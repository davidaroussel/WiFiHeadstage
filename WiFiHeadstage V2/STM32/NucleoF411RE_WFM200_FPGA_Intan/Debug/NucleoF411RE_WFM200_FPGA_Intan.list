
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cd5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fb2c  0801cf00  0801cf00  0001df00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806ca2c  0806ca2c  0006e288  2**0
                  CONTENTS
  4 .ARM          00000008  0806ca2c  0806ca2c  0006da2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806ca34  0806ca34  0006e288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806ca34  0806ca34  0006da34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806ca38  0806ca38  0006da38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0806ca3c  0006e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013dcc  20000288  0806ccc4  0006e288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014054  0806ccc4  0006f054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006e288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000311a7  00000000  00000000  0006e2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000945d  00000000  00000000  0009f45f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  000a88c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c03  00000000  00000000  000aac88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000120b7  00000000  00000000  000ac88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003aa25  00000000  00000000  000be942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b54  00000000  00000000  000f9367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001afebb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  001aff00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001b9e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801cee4 	.word	0x0801cee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0801cee4 	.word	0x0801cee4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <SPI_SEND_RECV_32>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV_32(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t *last_bit){
 8000ec8:	b480      	push	{r7}
 8000eca:	b087      	sub	sp, #28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	603b      	str	r3, [r7, #0]
	uint16_t Size = 2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	827b      	strh	r3, [r7, #18]

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t             txallowed = 1U;
 8000eda:	2301      	movs	r3, #1
 8000edc:	617b      	str	r3, [r7, #20]


	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	d003      	beq.n	8000ef2 <SPI_SEND_RECV_32+0x2a>
	{
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2205      	movs	r2, #5
 8000eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->pRxBuffPtr  = (uint8_t *)rx_ptr;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount = Size;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8a7a      	ldrh	r2, [r7, #18]
 8000f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->RxXferSize  = Size;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	8a7a      	ldrh	r2, [r7, #18]
 8000f08:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->pTxBuffPtr  = (uint8_t *)tx_ptr;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	68ba      	ldr	r2, [r7, #8]
 8000f0e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount = Size;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8a7a      	ldrh	r2, [r7, #18]
 8000f14:	86da      	strh	r2, [r3, #54]	@ 0x36
	hspi->TxXferSize  = Size;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	8a7a      	ldrh	r2, [r7, #18]
 8000f1a:	869a      	strh	r2, [r3, #52]	@ 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR       = NULL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->TxISR       = NULL;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	645a      	str	r2, [r3, #68]	@ 0x44


	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	2b40      	cmp	r3, #64	@ 0x40
 8000f34:	d007      	beq.n	8000f46 <SPI_SEND_RECV_32+0x7e>
	{
	/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f44:	601a      	str	r2, [r3, #0]
	}

	//RESET CS_PIN
	RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <SPI_SEND_RECV_32+0x138>)
 8000f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000f4c:	619a      	str	r2, [r3, #24]

	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000f4e:	e043      	b.n	8000fd8 <SPI_SEND_RECV_32+0x110>
	{
		/* Check TXE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d11b      	bne.n	8000f96 <SPI_SEND_RECV_32+0xce>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d016      	beq.n	8000f96 <SPI_SEND_RECV_32+0xce>
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d113      	bne.n	8000f96 <SPI_SEND_RECV_32+0xce>
		{
			hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	881a      	ldrh	r2, [r3, #0]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	1c9a      	adds	r2, r3, #2
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	631a      	str	r2, [r3, #48]	@ 0x30
			hspi->TxXferCount--;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	86da      	strh	r2, [r3, #54]	@ 0x36
			/* Next Data is a reception (Rx). Tx not allowed */
			txallowed = 0U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
		}

		/* Check RXNE flag */
		if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d119      	bne.n	8000fd8 <SPI_SEND_RECV_32+0x110>
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d014      	beq.n	8000fd8 <SPI_SEND_RECV_32+0x110>
		{
			*((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb8:	b292      	uxth	r2, r2
 8000fba:	801a      	strh	r2, [r3, #0]
			hspi->pRxBuffPtr += sizeof(uint16_t);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc0:	1c9a      	adds	r2, r3, #2
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	639a      	str	r2, [r3, #56]	@ 0x38
			hspi->RxXferCount--;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
			/* Next Data is a Transmission (Tx). Tx is allowed */
			txallowed = 1U;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
	while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1b6      	bne.n	8000f50 <SPI_SEND_RECV_32+0x88>
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1b1      	bne.n	8000f50 <SPI_SEND_RECV_32+0x88>
		}
	}
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 8000fec:	4b04      	ldr	r3, [pc, #16]	@ (8001000 <SPI_SEND_RECV_32+0x138>)
 8000fee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ff2:	619a      	str	r2, [r3, #24]


}
 8000ff4:	bf00      	nop
 8000ff6:	371c      	adds	r7, #28
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40020400 	.word	0x40020400

08001004 <start_app_task>:




void start_app_task(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
//	INIT_TCP();

//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8001008:	2200      	movs	r2, #0
 800100a:	210c      	movs	r1, #12
 800100c:	2014      	movs	r0, #20
 800100e:	f009 faf9 	bl	800a604 <xQueueGenericCreate>
 8001012:	4603      	mov	r3, r0
 8001014:	4a09      	ldr	r2, [pc, #36]	@ (800103c <start_app_task+0x38>)
 8001016:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <start_app_task+0x38>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d102      	bne.n	8001026 <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 8001020:	4807      	ldr	r0, [pc, #28]	@ (8001040 <start_app_task+0x3c>)
 8001022:	f01a f875 	bl	801b110 <puts>

  	//osTimerStart(periodicTimerHandle, UDP_FREQUENCY);
//  	while (!TCP_Connected){
//  		HAL_Delay(10);
//  	}
  	printf("Init RHD \r\n");
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <start_app_task+0x40>)
 8001028:	f01a f872 	bl	801b110 <puts>
//  	WIFI_MENU_INIT();
//  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
//  	TASK_TCP_TRANSMIT_INIT((void*) spi_to_wifi_queue);

  	TASK_RHD64_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <start_app_task+0x38>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 faf3 	bl	800161c <TASK_RHD64_SPI_COMMUNICATION_INIT>
//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200002a4 	.word	0x200002a4
 8001040:	0801cf00 	.word	0x0801cf00
 8001044:	0801cf10 	.word	0x0801cf10

08001048 <INIT_RHD64>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *p_arg);



void INIT_RHD64(SPI_HandleTypeDef *hspi){
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	uint8_t last_bit[1];
	uint16_t reg_address;
	uint16_t reg_value;


	for (int i = 0; i<3 ; i++){
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
 8001054:	e00e      	b.n	8001074 <INIT_RHD64+0x2c>
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 8001056:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800105a:	837b      	strh	r3, [r7, #26]
		SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	f107 0218 	add.w	r2, r7, #24
 8001064:	f107 011a 	add.w	r1, r7, #26
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff2d 	bl	8000ec8 <SPI_SEND_RECV_32>
	for (int i = 0; i<3 ; i++){
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	3301      	adds	r3, #1
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
 8001074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001076:	2b02      	cmp	r3, #2
 8001078:	dded      	ble.n	8001056 <INIT_RHD64+0xe>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11011110;
 800107e:	23de      	movs	r3, #222	@ 0xde
 8001080:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001082:	8bfb      	ldrh	r3, [r7, #30]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800108c:	4313      	orrs	r3, r2
 800108e:	b21b      	sxth	r3, r3
 8001090:	b29b      	uxth	r3, r3
 8001092:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	f107 0218 	add.w	r2, r7, #24
 800109c:	f107 011a 	add.w	r1, r7, #26
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff11 	bl	8000ec8 <SPI_SEND_RECV_32>
	printf("Char Receving Data:        %c \r\n", &rx_vector);
 80010a6:	f107 0318 	add.w	r3, r7, #24
 80010aa:	4619      	mov	r1, r3
 80010ac:	48ba      	ldr	r0, [pc, #744]	@ (8001398 <INIT_RHD64+0x350>)
 80010ae:	f019 ffc7 	bl	801b040 <iprintf>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 80010b2:	2381      	movs	r3, #129	@ 0x81
 80010b4:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 80010b6:	2320      	movs	r3, #32
 80010b8:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80010ba:	8bfb      	ldrh	r3, [r7, #30]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	f107 0218 	add.w	r2, r7, #24
 80010d4:	f107 011a 	add.w	r1, r7, #26
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff fef5 	bl	8000ec8 <SPI_SEND_RECV_32>
	printf("Char Receving Data:        %c \r\n", &rx_vector);
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	4619      	mov	r1, r3
 80010e4:	48ac      	ldr	r0, [pc, #688]	@ (8001398 <INIT_RHD64+0x350>)
 80010e6:	f019 ffab 	bl	801b040 <iprintf>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 80010ea:	2382      	movs	r3, #130	@ 0x82
 80010ec:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 80010ee:	2328      	movs	r3, #40	@ 0x28
 80010f0:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80010f2:	8bfb      	ldrh	r3, [r7, #30]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21b      	sxth	r3, r3
 8001100:	b29b      	uxth	r3, r3
 8001102:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	f107 0218 	add.w	r2, r7, #24
 800110c:	f107 011a 	add.w	r1, r7, #26
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fed9 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 8001116:	2383      	movs	r3, #131	@ 0x83
 8001118:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000010;
 800111a:	2302      	movs	r3, #2
 800111c:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800111e:	8bfb      	ldrh	r3, [r7, #30]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001128:	4313      	orrs	r3, r2
 800112a:	b21b      	sxth	r3, r3
 800112c:	b29b      	uxth	r3, r3
 800112e:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	f107 0218 	add.w	r2, r7, #24
 8001138:	f107 011a 	add.w	r1, r7, #26
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fec3 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8001142:	2384      	movs	r3, #132	@ 0x84
 8001144:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11010110;
 8001146:	23d6      	movs	r3, #214	@ 0xd6
 8001148:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800114a:	8bfb      	ldrh	r3, [r7, #30]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001154:	4313      	orrs	r3, r2
 8001156:	b21b      	sxth	r3, r3
 8001158:	b29b      	uxth	r3, r3
 800115a:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	f107 0218 	add.w	r2, r7, #24
 8001164:	f107 011a 	add.w	r1, r7, #26
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fead 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 800116e:	2385      	movs	r3, #133	@ 0x85
 8001170:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 8001172:	2300      	movs	r3, #0
 8001174:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001176:	8bfb      	ldrh	r3, [r7, #30]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	b29b      	uxth	r3, r3
 8001186:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	f107 0218 	add.w	r2, r7, #24
 8001190:	f107 011a 	add.w	r1, r7, #26
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fe97 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 800119a:	2386      	movs	r3, #134	@ 0x86
 800119c:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 800119e:	2300      	movs	r3, #0
 80011a0:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80011a2:	8bfb      	ldrh	r3, [r7, #30]
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	f107 0218 	add.w	r2, r7, #24
 80011bc:	f107 011a 	add.w	r1, r7, #26
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fe81 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 80011c6:	2387      	movs	r3, #135	@ 0x87
 80011c8:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 80011ca:	2300      	movs	r3, #0
 80011cc:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80011ce:	8bfb      	ldrh	r3, [r7, #30]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	f107 0218 	add.w	r2, r7, #24
 80011e8:	f107 011a 	add.w	r1, r7, #26
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe6b 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 80011f2:	2388      	movs	r3, #136	@ 0x88
 80011f4:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00011110;
 80011f6:	231e      	movs	r3, #30
 80011f8:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80011fa:	8bfb      	ldrh	r3, [r7, #30]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001204:	4313      	orrs	r3, r2
 8001206:	b21b      	sxth	r3, r3
 8001208:	b29b      	uxth	r3, r3
 800120a:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	f107 0218 	add.w	r2, r7, #24
 8001214:	f107 011a 	add.w	r1, r7, #26
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe55 	bl	8000ec8 <SPI_SEND_RECV_32>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 800121e:	2389      	movs	r3, #137	@ 0x89
 8001220:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000101;
 8001222:	2305      	movs	r3, #5
 8001224:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001226:	8bfb      	ldrh	r3, [r7, #30]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001230:	4313      	orrs	r3, r2
 8001232:	b21b      	sxth	r3, r3
 8001234:	b29b      	uxth	r3, r3
 8001236:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	f107 0218 	add.w	r2, r7, #24
 8001240:	f107 011a 	add.w	r1, r7, #26
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff fe3f 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 800124a:	238a      	movs	r3, #138	@ 0x8a
 800124c:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00101011;
 800124e:	232b      	movs	r3, #43	@ 0x2b
 8001250:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001252:	8bfb      	ldrh	r3, [r7, #30]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800125c:	4313      	orrs	r3, r2
 800125e:	b21b      	sxth	r3, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	f107 0218 	add.w	r2, r7, #24
 800126c:	f107 011a 	add.w	r1, r7, #26
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff fe29 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 8001276:	238b      	movs	r3, #139	@ 0x8b
 8001278:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000110;
 800127a:	2306      	movs	r3, #6
 800127c:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800127e:	8bfb      	ldrh	r3, [r7, #30]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21a      	sxth	r2, r3
 8001284:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	b29b      	uxth	r3, r3
 800128e:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	f107 0218 	add.w	r2, r7, #24
 8001298:	f107 011a 	add.w	r1, r7, #26
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f7ff fe13 	bl	8000ec8 <SPI_SEND_RECV_32>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 80012a2:	238c      	movs	r3, #140	@ 0x8c
 80012a4:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00110110;
 80012a6:	2336      	movs	r3, #54	@ 0x36
 80012a8:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80012aa:	8bfb      	ldrh	r3, [r7, #30]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	f107 0218 	add.w	r2, r7, #24
 80012c4:	f107 011a 	add.w	r1, r7, #26
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff fdfd 	bl	8000ec8 <SPI_SEND_RECV_32>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 80012ce:	238d      	movs	r3, #141	@ 0x8d
 80012d0:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 80012d2:	2300      	movs	r3, #0
 80012d4:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80012d6:	8bfb      	ldrh	r3, [r7, #30]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	f107 0218 	add.w	r2, r7, #24
 80012f0:	f107 011a 	add.w	r1, r7, #26
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fde7 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 80012fa:	238e      	movs	r3, #142	@ 0x8e
 80012fc:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b111111111;
 80012fe:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001302:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001304:	8bfb      	ldrh	r3, [r7, #30]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800130e:	4313      	orrs	r3, r2
 8001310:	b21b      	sxth	r3, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	f107 0218 	add.w	r2, r7, #24
 800131e:	f107 011a 	add.w	r1, r7, #26
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fdd0 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 15
	reg_address = 0b10001111;
 8001328:	238f      	movs	r3, #143	@ 0x8f
 800132a:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 800132c:	23ff      	movs	r3, #255	@ 0xff
 800132e:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001330:	8bfb      	ldrh	r3, [r7, #30]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	b21a      	sxth	r2, r3
 8001336:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800133a:	4313      	orrs	r3, r2
 800133c:	b21b      	sxth	r3, r3
 800133e:	b29b      	uxth	r3, r3
 8001340:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	f107 0218 	add.w	r2, r7, #24
 800134a:	f107 011a 	add.w	r1, r7, #26
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fdba 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 16
	reg_address = 0b10010000;
 8001354:	2390      	movs	r3, #144	@ 0x90
 8001356:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 8001358:	23ff      	movs	r3, #255	@ 0xff
 800135a:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800135c:	8bfb      	ldrh	r3, [r7, #30]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	b21a      	sxth	r2, r3
 8001362:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001366:	4313      	orrs	r3, r2
 8001368:	b21b      	sxth	r3, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	f107 0218 	add.w	r2, r7, #24
 8001376:	f107 011a 	add.w	r1, r7, #26
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fda4 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 17
	reg_address = 0b10010001;
 8001380:	2391      	movs	r3, #145	@ 0x91
 8001382:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 8001384:	23ff      	movs	r3, #255	@ 0xff
 8001386:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001388:	8bfb      	ldrh	r3, [r7, #30]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	e001      	b.n	800139c <INIT_RHD64+0x354>
 8001398:	0801cf1c 	.word	0x0801cf1c
 800139c:	b29b      	uxth	r3, r3
 800139e:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	f107 0218 	add.w	r2, r7, #24
 80013a8:	f107 011a 	add.w	r1, r7, #26
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f7ff fd8b 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 18
	reg_address = 0b10010010;
 80013b2:	2392      	movs	r3, #146	@ 0x92
 80013b4:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 80013b6:	23ff      	movs	r3, #255	@ 0xff
 80013b8:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	f107 0218 	add.w	r2, r7, #24
 80013d4:	f107 011a 	add.w	r1, r7, #26
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff fd75 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 19
	reg_address = 0b10010011;
 80013de:	2393      	movs	r3, #147	@ 0x93
 80013e0:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 80013e2:	23ff      	movs	r3, #255	@ 0xff
 80013e4:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80013e6:	8bfb      	ldrh	r3, [r7, #30]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	b21a      	sxth	r2, r3
 80013ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	f107 0218 	add.w	r2, r7, #24
 8001400:	f107 011a 	add.w	r1, r7, #26
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff fd5f 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 20
	reg_address = 0b10010100;
 800140a:	2394      	movs	r3, #148	@ 0x94
 800140c:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 800140e:	23ff      	movs	r3, #255	@ 0xff
 8001410:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001412:	8bfb      	ldrh	r3, [r7, #30]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b21a      	sxth	r2, r3
 8001418:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800141c:	4313      	orrs	r3, r2
 800141e:	b21b      	sxth	r3, r3
 8001420:	b29b      	uxth	r3, r3
 8001422:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	f107 0218 	add.w	r2, r7, #24
 800142c:	f107 011a 	add.w	r1, r7, #26
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fd49 	bl	8000ec8 <SPI_SEND_RECV_32>

	//	Reg. 21
	reg_address = 0b10010101;
 8001436:	2395      	movs	r3, #149	@ 0x95
 8001438:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b11111111;
 800143a:	23ff      	movs	r3, #255	@ 0xff
 800143c:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800143e:	8bfb      	ldrh	r3, [r7, #30]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	b21a      	sxth	r2, r3
 8001444:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001448:	4313      	orrs	r3, r2
 800144a:	b21b      	sxth	r3, r3
 800144c:	b29b      	uxth	r3, r3
 800144e:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	f107 0218 	add.w	r2, r7, #24
 8001458:	f107 011a 	add.w	r1, r7, #26
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fd33 	bl	8000ec8 <SPI_SEND_RECV_32>

	// Calibrate ADC
	HAL_Delay(100);
 8001462:	2064      	movs	r0, #100	@ 0x64
 8001464:	f003 f814 	bl	8004490 <HAL_Delay>
	reg_address = 0b01010101;
 8001468:	2355      	movs	r3, #85	@ 0x55
 800146a:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 800146c:	2300      	movs	r3, #0
 800146e:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001470:	8bfb      	ldrh	r3, [r7, #30]
 8001472:	021b      	lsls	r3, r3, #8
 8001474:	b21a      	sxth	r2, r3
 8001476:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800147a:	4313      	orrs	r3, r2
 800147c:	b21b      	sxth	r3, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	f107 0218 	add.w	r2, r7, #24
 800148a:	f107 011a 	add.w	r1, r7, #26
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd1a 	bl	8000ec8 <SPI_SEND_RECV_32>

	for (int i = 0; i<9 ; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
 8001498:	e018      	b.n	80014cc <INIT_RHD64+0x484>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 800149a:	23ff      	movs	r3, #255	@ 0xff
 800149c:	83fb      	strh	r3, [r7, #30]
		reg_value = 0b00000000;
 800149e:	2300      	movs	r3, #0
 80014a0:	83bb      	strh	r3, [r7, #28]
		tx_vector = (reg_address << 8) | reg_value;
 80014a2:	8bfb      	ldrh	r3, [r7, #30]
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	837b      	strh	r3, [r7, #26]
		SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	f107 0218 	add.w	r2, r7, #24
 80014bc:	f107 011a 	add.w	r1, r7, #26
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff fd01 	bl	8000ec8 <SPI_SEND_RECV_32>
	for (int i = 0; i<9 ; i++){
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	3301      	adds	r3, #1
 80014ca:	623b      	str	r3, [r7, #32]
 80014cc:	6a3b      	ldr	r3, [r7, #32]
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	dde3      	ble.n	800149a <INIT_RHD64+0x452>

	}

	//Read Register 40
	reg_address = 0b11101000;
 80014d2:	23e8      	movs	r3, #232	@ 0xe8
 80014d4:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 80014d6:	2300      	movs	r3, #0
 80014d8:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	021b      	lsls	r3, r3, #8
 80014de:	b21a      	sxth	r2, r3
 80014e0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	f107 0218 	add.w	r2, r7, #24
 80014f4:	f107 011a 	add.w	r1, r7, #26
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fce5 	bl	8000ec8 <SPI_SEND_RECV_32>

	//Read Register 41
	reg_address = 0b11101001;
 80014fe:	23e9      	movs	r3, #233	@ 0xe9
 8001500:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 8001502:	2300      	movs	r3, #0
 8001504:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001506:	8bfb      	ldrh	r3, [r7, #30]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b21a      	sxth	r2, r3
 800150c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001510:	4313      	orrs	r3, r2
 8001512:	b21b      	sxth	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	f107 0218 	add.w	r2, r7, #24
 8001520:	f107 011a 	add.w	r1, r7, #26
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fccf 	bl	8000ec8 <SPI_SEND_RECV_32>

	//Read Register 42
	reg_address = 0b11101010;
 800152a:	23ea      	movs	r3, #234	@ 0xea
 800152c:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 800152e:	2300      	movs	r3, #0
 8001530:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 8001532:	8bfb      	ldrh	r3, [r7, #30]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800153c:	4313      	orrs	r3, r2
 800153e:	b21b      	sxth	r3, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 8001544:	f107 030c 	add.w	r3, r7, #12
 8001548:	f107 0218 	add.w	r2, r7, #24
 800154c:	f107 011a 	add.w	r1, r7, #26
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fcb9 	bl	8000ec8 <SPI_SEND_RECV_32>
//	printf("Receving Data: %x - %c / %x \r\n",  rx_vector[0],data, misosplit_b[0]);



//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", &rx_vector);
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	4619      	mov	r1, r3
 800155c:	482d      	ldr	r0, [pc, #180]	@ (8001614 <INIT_RHD64+0x5cc>)
 800155e:	f019 fd6f 	bl	801b040 <iprintf>
//	printf("Hex  Receving Data: 0x%x 0x%x \r\n", data_a, data_b);


	//Read Register 43
	reg_address = 0b11101011;
 8001562:	23eb      	movs	r3, #235	@ 0xeb
 8001564:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 8001566:	2300      	movs	r3, #0
 8001568:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 800156a:	8bfb      	ldrh	r3, [r7, #30]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001574:	4313      	orrs	r3, r2
 8001576:	b21b      	sxth	r3, r3
 8001578:	b29b      	uxth	r3, r3
 800157a:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, &tx_vector, &rx_vector, last_bit);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	f107 0218 	add.w	r2, r7, #24
 8001584:	f107 011a 	add.w	r1, r7, #26
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff fc9d 	bl	8000ec8 <SPI_SEND_RECV_32>

//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", rx_vector);
 800158e:	8b3b      	ldrh	r3, [r7, #24]
 8001590:	4619      	mov	r1, r3
 8001592:	4820      	ldr	r0, [pc, #128]	@ (8001614 <INIT_RHD64+0x5cc>)
 8001594:	f019 fd54 	bl	801b040 <iprintf>


	//Read Register 44
	reg_address = 0b11101100;
 8001598:	23ec      	movs	r3, #236	@ 0xec
 800159a:	83fb      	strh	r3, [r7, #30]
	reg_value = 0b00000000;
 800159c:	2300      	movs	r3, #0
 800159e:	83bb      	strh	r3, [r7, #28]
	tx_vector = (reg_address << 8) | reg_value;
 80015a0:	8bfb      	ldrh	r3, [r7, #30]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	837b      	strh	r3, [r7, #26]
	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80015b2:	8b7b      	ldrh	r3, [r7, #26]
 80015b4:	4619      	mov	r1, r3
 80015b6:	8b3b      	ldrh	r3, [r7, #24]
 80015b8:	461a      	mov	r2, r3
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fc82 	bl	8000ec8 <SPI_SEND_RECV_32>
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", rx_vector);
 80015c4:	8b3b      	ldrh	r3, [r7, #24]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4812      	ldr	r0, [pc, #72]	@ (8001614 <INIT_RHD64+0x5cc>)
 80015ca:	f019 fd39 	bl	801b040 <iprintf>



	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, last_bit);
 80015ce:	8b7b      	ldrh	r3, [r7, #26]
 80015d0:	4619      	mov	r1, r3
 80015d2:	8b3b      	ldrh	r3, [r7, #24]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fc74 	bl	8000ec8 <SPI_SEND_RECV_32>
//	printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", rx_vector);
 80015e0:	8b3b      	ldrh	r3, [r7, #24]
 80015e2:	4619      	mov	r1, r3
 80015e4:	480b      	ldr	r0, [pc, #44]	@ (8001614 <INIT_RHD64+0x5cc>)
 80015e6:	f019 fd2b 	bl	801b040 <iprintf>


	SPI_SEND_RECV_32(hspi, tx_vector, rx_vector, &last_bit);
 80015ea:	8b7b      	ldrh	r3, [r7, #26]
 80015ec:	4619      	mov	r1, r3
 80015ee:	8b3b      	ldrh	r3, [r7, #24]
 80015f0:	461a      	mov	r2, r3
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fc66 	bl	8000ec8 <SPI_SEND_RECV_32>
	//printf("Char Receving Data: %c %c \r\n", data_a, data_b);
	printf("Char Receving Data:        %c \r\n", rx_vector);
 80015fc:	8b3b      	ldrh	r3, [r7, #24]
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <INIT_RHD64+0x5cc>)
 8001602:	f019 fd1d 	bl	801b040 <iprintf>


	printf("FUCK OFF CA MARCHE !!!! \r\n");
 8001606:	4804      	ldr	r0, [pc, #16]	@ (8001618 <INIT_RHD64+0x5d0>)
 8001608:	f019 fd82 	bl	801b110 <puts>

 }
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	@ 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	0801cf1c 	.word	0x0801cf1c
 8001618:	0801cf40 	.word	0x0801cf40

0800161c <TASK_RHD64_SPI_COMMUNICATION_INIT>:




void TASK_RHD64_SPI_COMMUNICATION_INIT (void *arg) {
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	osThreadDef(RHD64_SPI_handle, RHD64_SPI_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x38>)
 8001626:	f107 040c 	add.w	r4, r7, #12
 800162a:	461d      	mov	r5, r3
 800162c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL){
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f008 fb5f 	bl	8009cfe <osThreadCreate>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <TASK_RHD64_SPI_COMMUNICATION_INIT+0x30>
		printf("Booboo created SPI task \r\n");
 8001646:	4804      	ldr	r0, [pc, #16]	@ (8001658 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x3c>)
 8001648:	f019 fd62 	bl	801b110 <puts>
	}
}
 800164c:	bf00      	nop
 800164e:	3720      	adds	r7, #32
 8001650:	46bd      	mov	sp, r7
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	0801cf8c 	.word	0x0801cf8c
 8001658:	0801cf5c 	.word	0x0801cf5c

0800165c <RHD64_SPI_COMMUNICATION_task_entry>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *arg){
 800165c:	b580      	push	{r7, lr}
 800165e:	b0ac      	sub	sp, #176	@ 0xb0
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	uint8_t DATA_CH0[2];
	uint8_t DATA_CH32[2];

	uint16_t UDP_vector[32][2];

	uint16_t counter = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

	spi_to_udp_t spi_message = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]

	SPI_HandleTypeDef *hspi;
	hspi = &hspi4;
 8001676:	4b18      	ldr	r3, [pc, #96]	@ (80016d8 <RHD64_SPI_COMMUNICATION_task_entry+0x7c>)
 8001678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

	//Activate SPI
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800167c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800168e:	601a      	str	r2, [r3, #0]

	//Activating the 16bit data mode
	SPI4->CR1 |= 0x800;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <RHD64_SPI_COMMUNICATION_task_entry+0x80>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <RHD64_SPI_COMMUNICATION_task_entry+0x80>)
 8001696:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800169a:	6013      	str	r3, [r2, #0]
//			tx_vector[i] = i;
//			tx_vector[i+1] = i+1;
//		}
//	}

	INIT_RHD64(hspi);
 800169c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80016a0:	f7ff fcd2 	bl	8001048 <INIT_RHD64>
//		FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
//		//SET SPI_TASK_Scope_Pin
//		SPI_TASK_SCOPE_Port->BSRR = SPI_TASK_SCOPE_Pin;
//
//		spi_message.buffer = (void*)transmit_vector;
		if (spi_flag){
 80016a4:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <RHD64_SPI_COMMUNICATION_task_entry+0x84>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d010      	beq.n	80016ce <RHD64_SPI_COMMUNICATION_task_entry+0x72>
			if (arg != 0){
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f8      	beq.n	80016a4 <RHD64_SPI_COMMUNICATION_task_entry+0x48>

				if(xQueueSend((QueueHandle_t)arg,
 80016b2:	f107 0108 	add.w	r1, r7, #8
 80016b6:	2300      	movs	r3, #0
 80016b8:	220a      	movs	r2, #10
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f009 f82a 	bl	800a714 <xQueueGenericSend>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d0ee      	beq.n	80016a4 <RHD64_SPI_COMMUNICATION_task_entry+0x48>
							 (void *)&spi_message,
							 (TickType_t)10) != pdPASS)
				{
					printf("problem in queueSend \r\n");
 80016c6:	4807      	ldr	r0, [pc, #28]	@ (80016e4 <RHD64_SPI_COMMUNICATION_task_entry+0x88>)
 80016c8:	f019 fd22 	bl	801b110 <puts>
 80016cc:	e7ea      	b.n	80016a4 <RHD64_SPI_COMMUNICATION_task_entry+0x48>
				//RESET SPI_TASK_Scope_Pin
//				SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
			}
		}
		else{
			vTaskDelay(1);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f00a f858 	bl	800b784 <vTaskDelay>
		if (spi_flag){
 80016d4:	e7e6      	b.n	80016a4 <RHD64_SPI_COMMUNICATION_task_entry+0x48>
 80016d6:	bf00      	nop
 80016d8:	200009d4 	.word	0x200009d4
 80016dc:	40013400 	.word	0x40013400
 80016e0:	200002a8 	.word	0x200002a8
 80016e4:	0801cfa0 	.word	0x0801cfa0

080016e8 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	3301      	adds	r3, #1
 80016f6:	4a11      	ldr	r2, [pc, #68]	@ (800173c <from_hex+0x54>)
 80016f8:	4413      	add	r3, r2
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <from_hex+0x24>
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3b30      	subs	r3, #48	@ 0x30
 8001708:	b2db      	uxtb	r3, r3
 800170a:	e011      	b.n	8001730 <from_hex+0x48>
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	3301      	adds	r3, #1
 8001714:	4a09      	ldr	r2, [pc, #36]	@ (800173c <from_hex+0x54>)
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <from_hex+0x40>
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3320      	adds	r3, #32
 8001726:	e000      	b.n	800172a <from_hex+0x42>
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	3b57      	subs	r3, #87	@ 0x57
 800172e:	b2db      	uxtb	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	0806c6d3 	.word	0x0806c6d3

08001740 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8001740:	b590      	push	{r4, r7, lr}
 8001742:	b095      	sub	sp, #84	@ 0x54
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int i = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (strlen(str) > 64) {
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe fda5 	bl	80002a0 <strlen>
 8001756:	4603      	mov	r3, r0
 8001758:	2b40      	cmp	r3, #64	@ 0x40
 800175a:	d947      	bls.n	80017ec <url_decode+0xac>
    return SL_STATUS_FAIL;
 800175c:	2301      	movs	r3, #1
 800175e:	e056      	b.n	800180e <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8001760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b25      	cmp	r3, #37	@ 0x25
 8001766:	d128      	bne.n	80017ba <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8001768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800176a:	3301      	adds	r3, #1
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d039      	beq.n	80017e6 <url_decode+0xa6>
 8001772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001774:	3302      	adds	r3, #2
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d034      	beq.n	80017e6 <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 800177c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800177e:	3301      	adds	r3, #1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffb0 	bl	80016e8 <from_hex>
 8001788:	4603      	mov	r3, r0
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	b25c      	sxtb	r4, r3
 800178e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001790:	3302      	adds	r3, #2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ffa7 	bl	80016e8 <from_hex>
 800179a:	4603      	mov	r3, r0
 800179c:	b25b      	sxtb	r3, r3
 800179e:	4323      	orrs	r3, r4
 80017a0:	b259      	sxtb	r1, r3
 80017a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80017a8:	b2ca      	uxtb	r2, r1
 80017aa:	3350      	adds	r3, #80	@ 0x50
 80017ac:	443b      	add	r3, r7
 80017ae:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 80017b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017b4:	3302      	adds	r3, #2
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017b8:	e015      	b.n	80017e6 <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 80017ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b2b      	cmp	r3, #43	@ 0x2b
 80017c0:	d108      	bne.n	80017d4 <url_decode+0x94>
      rstr[i++]  = ' ';
 80017c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80017c8:	3350      	adds	r3, #80	@ 0x50
 80017ca:	443b      	add	r3, r7
 80017cc:	2220      	movs	r2, #32
 80017ce:	f803 2c48 	strb.w	r2, [r3, #-72]
 80017d2:	e008      	b.n	80017e6 <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 80017d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80017da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	3350      	adds	r3, #80	@ 0x50
 80017e0:	443b      	add	r3, r7
 80017e2:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 80017e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017e8:	3301      	adds	r3, #1
 80017ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (*pstr) {
 80017ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1b5      	bne.n	8001760 <url_decode+0x20>
  }
  rstr[i] = '\0';
 80017f4:	f107 0208 	add.w	r2, r7, #8
 80017f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017fa:	4413      	add	r3, r2
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4619      	mov	r1, r3
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f019 fe31 	bl	801b46e <strcpy>
  return SL_STATUS_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3754      	adds	r7, #84	@ 0x54
 8001812:	46bd      	mov	sp, r7
 8001814:	bd90      	pop	{r4, r7, pc}
	...

08001818 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <wifi_autoconnexion_init+0x28>)
 8001820:	1d3c      	adds	r4, r7, #4
 8001822:	461d      	mov	r5, r3
 8001824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f008 fa64 	bl	8009cfe <osThreadCreate>

}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bdb0      	pop	{r4, r5, r7, pc}
 800183e:	bf00      	nop
 8001840:	0801cfcc 	.word	0x0801cfcc

08001844 <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b097      	sub	sp, #92	@ 0x5c
 8001848:	af08      	add	r7, sp, #32
 800184a:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 800184c:	2303      	movs	r3, #3
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8001850:	4b58      	ldr	r3, [pc, #352]	@ (80019b4 <wifi_station_connect_task_entry+0x170>)
 8001852:	f107 0418 	add.w	r4, r7, #24
 8001856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 800185c:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <wifi_station_connect_task_entry+0x174>)
 800185e:	f107 0408 	add.w	r4, r7, #8
 8001862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	@ 0x34
 800186c:	2300      	movs	r3, #0
 800186e:	633b      	str	r3, [r7, #48]	@ 0x30

  if (num_params == 3) {
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	2b03      	cmp	r3, #3
 8001874:	f040 8096 	bne.w	80019a4 <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	4950      	ldr	r1, [pc, #320]	@ (80019bc <wifi_station_connect_task_entry+0x178>)
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fcaf 	bl	80001e0 <strcmp>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d114      	bne.n	80018b2 <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff58 	bl	8001740 <url_decode>
      ssid_length = strlen(pc_value[0]);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fd04 	bl	80002a0 <strlen>
 8001898:	4603      	mov	r3, r0
 800189a:	637b      	str	r3, [r7, #52]	@ 0x34
      memset(wlan_ssid, 0, 32);
 800189c:	2220      	movs	r2, #32
 800189e:	2100      	movs	r1, #0
 80018a0:	4847      	ldr	r0, [pc, #284]	@ (80019c0 <wifi_station_connect_task_entry+0x17c>)
 80018a2:	f019 fd2f 	bl	801b304 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018aa:	4619      	mov	r1, r3
 80018ac:	4844      	ldr	r0, [pc, #272]	@ (80019c0 <wifi_station_connect_task_entry+0x17c>)
 80018ae:	f019 fd43 	bl	801b338 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	4943      	ldr	r1, [pc, #268]	@ (80019c4 <wifi_station_connect_task_entry+0x180>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fc92 	bl	80001e0 <strcmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d114      	bne.n	80018ec <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff3b 	bl	8001740 <url_decode>
      passkey_length = strlen(pc_value[1]);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fce7 	bl	80002a0 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	633b      	str	r3, [r7, #48]	@ 0x30
      memset(wlan_passkey, 0, 64);
 80018d6:	2240      	movs	r2, #64	@ 0x40
 80018d8:	2100      	movs	r1, #0
 80018da:	483b      	ldr	r0, [pc, #236]	@ (80019c8 <wifi_station_connect_task_entry+0x184>)
 80018dc:	f019 fd12 	bl	801b304 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e4:	4619      	mov	r1, r3
 80018e6:	4838      	ldr	r0, [pc, #224]	@ (80019c8 <wifi_station_connect_task_entry+0x184>)
 80018e8:	f019 fd26 	bl	801b338 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	4937      	ldr	r1, [pc, #220]	@ (80019cc <wifi_station_connect_task_entry+0x188>)
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fc75 	bl	80001e0 <strcmp>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d12e      	bne.n	800195a <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff1e 	bl	8001740 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4932      	ldr	r1, [pc, #200]	@ (80019d0 <wifi_station_connect_task_entry+0x18c>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fc69 	bl	80001e0 <strcmp>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <wifi_station_connect_task_entry+0xe0>
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	492f      	ldr	r1, [pc, #188]	@ (80019d4 <wifi_station_connect_task_entry+0x190>)
 8001918:	4618      	mov	r0, r3
 800191a:	f7fe fc61 	bl	80001e0 <strcmp>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 8001924:	4b2c      	ldr	r3, [pc, #176]	@ (80019d8 <wifi_station_connect_task_entry+0x194>)
 8001926:	2202      	movs	r2, #2
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	e016      	b.n	800195a <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	492b      	ldr	r1, [pc, #172]	@ (80019dc <wifi_station_connect_task_entry+0x198>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fc55 	bl	80001e0 <strcmp>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d103      	bne.n	8001944 <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <wifi_station_connect_task_entry+0x194>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e00a      	b.n	800195a <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4926      	ldr	r1, [pc, #152]	@ (80019e0 <wifi_station_connect_task_entry+0x19c>)
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc49 	bl	80001e0 <strcmp>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8001954:	4b20      	ldr	r3, [pc, #128]	@ (80019d8 <wifi_station_connect_task_entry+0x194>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <wifi_station_connect_task_entry+0x1a0>)
 800195c:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d120      	bne.n	80019aa <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001968:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <wifi_station_connect_task_entry+0x194>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001970:	b292      	uxth	r2, r2
 8001972:	2000      	movs	r0, #0
 8001974:	9006      	str	r0, [sp, #24]
 8001976:	2000      	movs	r0, #0
 8001978:	9005      	str	r0, [sp, #20]
 800197a:	9204      	str	r2, [sp, #16]
 800197c:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <wifi_station_connect_task_entry+0x184>)
 800197e:	9203      	str	r2, [sp, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	9202      	str	r2, [sp, #8]
 8001984:	2200      	movs	r2, #0
 8001986:	9201      	str	r2, [sp, #4]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2300      	movs	r3, #0
 800198c:	2200      	movs	r2, #0
 800198e:	480c      	ldr	r0, [pc, #48]	@ (80019c0 <wifi_station_connect_task_entry+0x17c>)
 8001990:	f006 f95a 	bl	8007c48 <sl_wfx_send_join_command>
 8001994:	62b8      	str	r0, [r7, #40]	@ 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8001996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 800199c:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <wifi_station_connect_task_entry+0x1a4>)
 800199e:	f019 fbb7 	bl	801b110 <puts>
 80019a2:	e002      	b.n	80019aa <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 80019a4:	4811      	ldr	r0, [pc, #68]	@ (80019ec <wifi_station_connect_task_entry+0x1a8>)
 80019a6:	f019 fbb3 	bl	801b110 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f008 f9ce 	bl	8009d4c <osThreadTerminate>
 80019b0:	e7fb      	b.n	80019aa <wifi_station_connect_task_entry+0x166>
 80019b2:	bf00      	nop
 80019b4:	0801d048 	.word	0x0801d048
 80019b8:	0801d074 	.word	0x0801d074
 80019bc:	0801cfe0 	.word	0x0801cfe0
 80019c0:	20000000 	.word	0x20000000
 80019c4:	0801cfe8 	.word	0x0801cfe8
 80019c8:	20000024 	.word	0x20000024
 80019cc:	0801cfec 	.word	0x0801cfec
 80019d0:	0801cff4 	.word	0x0801cff4
 80019d4:	0801cffc 	.word	0x0801cffc
 80019d8:	20000065 	.word	0x20000065
 80019dc:	0801d000 	.word	0x0801d000
 80019e0:	0801d004 	.word	0x0801d004
 80019e4:	200003ac 	.word	0x200003ac
 80019e8:	0801d00c 	.word	0x0801d00c
 80019ec:	0801d028 	.word	0x0801d028

080019f0 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  if (link_up) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 80019fe:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <dhcpclient_set_link_state+0x28>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8001a04:	e002      	b.n	8001a0c <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <dhcpclient_set_link_state+0x28>)
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	200005d0 	.word	0x200005d0

08001a1c <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001a28:	4b9a      	ldr	r3, [pc, #616]	@ (8001c94 <dhcpclient_start+0x278>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	f000 811f 	beq.w	8001c72 <dhcpclient_start+0x256>
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	f300 8125 	bgt.w	8001c84 <dhcpclient_start+0x268>
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d002      	beq.n	8001a44 <dhcpclient_start+0x28>
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d012      	beq.n	8001a68 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8001a42:	e11f      	b.n	8001c84 <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2200      	movs	r2, #0
 8001a48:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8001a56:	4a90      	ldr	r2, [pc, #576]	@ (8001c98 <dhcpclient_start+0x27c>)
 8001a58:	2100      	movs	r1, #0
 8001a5a:	69f8      	ldr	r0, [r7, #28]
 8001a5c:	f00b fd82 	bl	800d564 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8001a60:	4b8c      	ldr	r3, [pc, #560]	@ (8001c94 <dhcpclient_start+0x278>)
 8001a62:	2202      	movs	r2, #2
 8001a64:	701a      	strb	r2, [r3, #0]
      break;
 8001a66:	e110      	b.n	8001c8a <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001a68:	69f8      	ldr	r0, [r7, #28]
 8001a6a:	f015 feff 	bl	801786c <dhcp_supplied_address>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d018      	beq.n	8001aa6 <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8001a74:	4b87      	ldr	r3, [pc, #540]	@ (8001c94 <dhcpclient_start+0x278>)
 8001a76:	2203      	movs	r2, #3
 8001a78:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8001a7a:	4b88      	ldr	r3, [pc, #544]	@ (8001c9c <dhcpclient_start+0x280>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001a7e:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8001a80:	4b86      	ldr	r3, [pc, #536]	@ (8001c9c <dhcpclient_start+0x280>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001a86:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8001a88:	4b84      	ldr	r3, [pc, #528]	@ (8001c9c <dhcpclient_start+0x280>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001a8e:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8001a90:	4b82      	ldr	r3, [pc, #520]	@ (8001c9c <dhcpclient_start+0x280>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4881      	ldr	r0, [pc, #516]	@ (8001ca0 <dhcpclient_start+0x284>)
 8001a9c:	f019 fad0 	bl	801b040 <iprintf>
          start_app_task();
 8001aa0:	f7ff fab0 	bl	8001004 <start_app_task>
      break;
 8001aa4:	e0f0      	b.n	8001c88 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aaa:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	799b      	ldrb	r3, [r3, #6]
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	f240 80e9 	bls.w	8001c88 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8001ab6:	4b77      	ldr	r3, [pc, #476]	@ (8001c94 <dhcpclient_start+0x278>)
 8001ab8:	2204      	movs	r2, #4
 8001aba:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8001abc:	2200      	movs	r2, #0
 8001abe:	4979      	ldr	r1, [pc, #484]	@ (8001ca4 <dhcpclient_start+0x288>)
 8001ac0:	69f8      	ldr	r0, [r7, #28]
 8001ac2:	f00b fd4f 	bl	800d564 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8001ac6:	4b78      	ldr	r3, [pc, #480]	@ (8001ca8 <dhcpclient_start+0x28c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	061a      	lsls	r2, r3, #24
 8001acc:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <dhcpclient_start+0x290>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <dhcpclient_start+0x294>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	021b      	lsls	r3, r3, #8
 8001ada:	4313      	orrs	r3, r2
 8001adc:	4a75      	ldr	r2, [pc, #468]	@ (8001cb4 <dhcpclient_start+0x298>)
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	061a      	lsls	r2, r3, #24
 8001ae4:	4b70      	ldr	r3, [pc, #448]	@ (8001ca8 <dhcpclient_start+0x28c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	0619      	lsls	r1, r3, #24
 8001aea:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <dhcpclient_start+0x290>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	4319      	orrs	r1, r3
 8001af2:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb0 <dhcpclient_start+0x294>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	430b      	orrs	r3, r1
 8001afa:	496e      	ldr	r1, [pc, #440]	@ (8001cb4 <dhcpclient_start+0x298>)
 8001afc:	7809      	ldrb	r1, [r1, #0]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001b06:	431a      	orrs	r2, r3
 8001b08:	4b67      	ldr	r3, [pc, #412]	@ (8001ca8 <dhcpclient_start+0x28c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	0619      	lsls	r1, r3, #24
 8001b0e:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <dhcpclient_start+0x290>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	4319      	orrs	r1, r3
 8001b16:	4b66      	ldr	r3, [pc, #408]	@ (8001cb0 <dhcpclient_start+0x294>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	021b      	lsls	r3, r3, #8
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	4965      	ldr	r1, [pc, #404]	@ (8001cb4 <dhcpclient_start+0x298>)
 8001b20:	7809      	ldrb	r1, [r1, #0]
 8001b22:	430b      	orrs	r3, r1
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <dhcpclient_start+0x28c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	0619      	lsls	r1, r3, #24
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <dhcpclient_start+0x290>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	4319      	orrs	r1, r3
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb0 <dhcpclient_start+0x294>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	430b      	orrs	r3, r1
 8001b42:	495c      	ldr	r1, [pc, #368]	@ (8001cb4 <dhcpclient_start+0x298>)
 8001b44:	7809      	ldrb	r1, [r1, #0]
 8001b46:	430b      	orrs	r3, r1
 8001b48:	0e1b      	lsrs	r3, r3, #24
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <dhcpclient_start+0x29c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	061a      	lsls	r2, r3, #24
 8001b54:	4b59      	ldr	r3, [pc, #356]	@ (8001cbc <dhcpclient_start+0x2a0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	4b58      	ldr	r3, [pc, #352]	@ (8001cc0 <dhcpclient_start+0x2a4>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	4313      	orrs	r3, r2
 8001b64:	4a57      	ldr	r2, [pc, #348]	@ (8001cc4 <dhcpclient_start+0x2a8>)
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	061a      	lsls	r2, r3, #24
 8001b6c:	4b52      	ldr	r3, [pc, #328]	@ (8001cb8 <dhcpclient_start+0x29c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	0619      	lsls	r1, r3, #24
 8001b72:	4b52      	ldr	r3, [pc, #328]	@ (8001cbc <dhcpclient_start+0x2a0>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	4319      	orrs	r1, r3
 8001b7a:	4b51      	ldr	r3, [pc, #324]	@ (8001cc0 <dhcpclient_start+0x2a4>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	430b      	orrs	r3, r1
 8001b82:	4950      	ldr	r1, [pc, #320]	@ (8001cc4 <dhcpclient_start+0x2a8>)
 8001b84:	7809      	ldrb	r1, [r1, #0]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	4b49      	ldr	r3, [pc, #292]	@ (8001cb8 <dhcpclient_start+0x29c>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	0619      	lsls	r1, r3, #24
 8001b96:	4b49      	ldr	r3, [pc, #292]	@ (8001cbc <dhcpclient_start+0x2a0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	041b      	lsls	r3, r3, #16
 8001b9c:	4319      	orrs	r1, r3
 8001b9e:	4b48      	ldr	r3, [pc, #288]	@ (8001cc0 <dhcpclient_start+0x2a4>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4947      	ldr	r1, [pc, #284]	@ (8001cc4 <dhcpclient_start+0x2a8>)
 8001ba8:	7809      	ldrb	r1, [r1, #0]
 8001baa:	430b      	orrs	r3, r1
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <dhcpclient_start+0x29c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	0619      	lsls	r1, r3, #24
 8001bba:	4b40      	ldr	r3, [pc, #256]	@ (8001cbc <dhcpclient_start+0x2a0>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	041b      	lsls	r3, r3, #16
 8001bc0:	4319      	orrs	r1, r3
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	@ (8001cc0 <dhcpclient_start+0x2a4>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	493e      	ldr	r1, [pc, #248]	@ (8001cc4 <dhcpclient_start+0x2a8>)
 8001bcc:	7809      	ldrb	r1, [r1, #0]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	0e1b      	lsrs	r3, r3, #24
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <dhcpclient_start+0x2ac>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	061a      	lsls	r2, r3, #24
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ccc <dhcpclient_start+0x2b0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	431a      	orrs	r2, r3
 8001be4:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <dhcpclient_start+0x2b4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	4313      	orrs	r3, r2
 8001bec:	4a39      	ldr	r2, [pc, #228]	@ (8001cd4 <dhcpclient_start+0x2b8>)
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	061a      	lsls	r2, r3, #24
 8001bf4:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <dhcpclient_start+0x2ac>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	0619      	lsls	r1, r3, #24
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <dhcpclient_start+0x2b0>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	4319      	orrs	r1, r3
 8001c02:	4b33      	ldr	r3, [pc, #204]	@ (8001cd0 <dhcpclient_start+0x2b4>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	021b      	lsls	r3, r3, #8
 8001c08:	430b      	orrs	r3, r1
 8001c0a:	4932      	ldr	r1, [pc, #200]	@ (8001cd4 <dhcpclient_start+0x2b8>)
 8001c0c:	7809      	ldrb	r1, [r1, #0]
 8001c0e:	430b      	orrs	r3, r1
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001c16:	431a      	orrs	r2, r3
 8001c18:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc8 <dhcpclient_start+0x2ac>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	0619      	lsls	r1, r3, #24
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ccc <dhcpclient_start+0x2b0>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	4319      	orrs	r1, r3
 8001c26:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd0 <dhcpclient_start+0x2b4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	4929      	ldr	r1, [pc, #164]	@ (8001cd4 <dhcpclient_start+0x2b8>)
 8001c30:	7809      	ldrb	r1, [r1, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <dhcpclient_start+0x2ac>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0619      	lsls	r1, r3, #24
 8001c42:	4b22      	ldr	r3, [pc, #136]	@ (8001ccc <dhcpclient_start+0x2b0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	041b      	lsls	r3, r3, #16
 8001c48:	4319      	orrs	r1, r3
 8001c4a:	4b21      	ldr	r3, [pc, #132]	@ (8001cd0 <dhcpclient_start+0x2b4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	430b      	orrs	r3, r1
 8001c52:	4920      	ldr	r1, [pc, #128]	@ (8001cd4 <dhcpclient_start+0x2b8>)
 8001c54:	7809      	ldrb	r1, [r1, #0]
 8001c56:	430b      	orrs	r3, r1
 8001c58:	0e1b      	lsrs	r3, r3, #24
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	f107 0210 	add.w	r2, r7, #16
 8001c66:	f107 0114 	add.w	r1, r7, #20
 8001c6a:	69f8      	ldr	r0, [r7, #28]
 8001c6c:	f00c feaa 	bl	800e9c4 <netif_set_addr>
      break;
 8001c70:	e00a      	b.n	8001c88 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8001c72:	2200      	movs	r2, #0
 8001c74:	490b      	ldr	r1, [pc, #44]	@ (8001ca4 <dhcpclient_start+0x288>)
 8001c76:	69f8      	ldr	r0, [r7, #28]
 8001c78:	f00b fc74 	bl	800d564 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <dhcpclient_start+0x278>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
    break;
 8001c82:	e002      	b.n	8001c8a <dhcpclient_start+0x26e>
    default: break;
 8001c84:	bf00      	nop
 8001c86:	e000      	b.n	8001c8a <dhcpclient_start+0x26e>
      break;
 8001c88:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c8e:	f009 fd79 	bl	800b784 <vTaskDelay>
    switch (dhcp_state)
 8001c92:	e6c9      	b.n	8001a28 <dhcpclient_start+0xc>
 8001c94:	200005d0 	.word	0x200005d0
 8001c98:	08016269 	.word	0x08016269
 8001c9c:	2000082c 	.word	0x2000082c
 8001ca0:	0801d084 	.word	0x0801d084
 8001ca4:	08016d1d 	.word	0x08016d1d
 8001ca8:	20000090 	.word	0x20000090
 8001cac:	20000091 	.word	0x20000091
 8001cb0:	200008ce 	.word	0x200008ce
 8001cb4:	20000092 	.word	0x20000092
 8001cb8:	20000093 	.word	0x20000093
 8001cbc:	20000094 	.word	0x20000094
 8001cc0:	20000095 	.word	0x20000095
 8001cc4:	200008cf 	.word	0x200008cf
 8001cc8:	200008d0 	.word	0x200008d0
 8001ccc:	200008d1 	.word	0x200008d1
 8001cd0:	200008d2 	.word	0x200008d2
 8001cd4:	200008d3 	.word	0x200008d3

08001cd8 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e08a      	b.n	8001dfc <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001ce6:	494b      	ldr	r1, [pc, #300]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	440b      	add	r3, r1
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d17b      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
 8001cfe:	4945      	ldr	r1, [pc, #276]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	440b      	add	r3, r1
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	781a      	ldrb	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	785b      	ldrb	r3, [r3, #1]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d16e      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001d18:	493e      	ldr	r1, [pc, #248]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	3302      	adds	r3, #2
 8001d28:	781a      	ldrb	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d161      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
 8001d32:	4938      	ldr	r1, [pc, #224]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	440b      	add	r3, r1
 8001d40:	3303      	adds	r3, #3
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d154      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001d4c:	4931      	ldr	r1, [pc, #196]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	440b      	add	r3, r1
 8001d5a:	3304      	adds	r3, #4
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	791b      	ldrb	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d147      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
 8001d66:	492b      	ldr	r1, [pc, #172]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	3305      	adds	r3, #5
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	795b      	ldrb	r3, [r3, #5]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d13a      	bne.n	8001df6 <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001d80:	4924      	ldr	r1, [pc, #144]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	440b      	add	r3, r1
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8001d92:	4920      	ldr	r1, [pc, #128]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	440b      	add	r3, r1
 8001da0:	3301      	adds	r3, #1
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001da6:	491b      	ldr	r1, [pc, #108]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	440b      	add	r3, r1
 8001db4:	3302      	adds	r3, #2
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001dba:	4916      	ldr	r1, [pc, #88]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3303      	adds	r3, #3
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8001dce:	4911      	ldr	r1, [pc, #68]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	440b      	add	r3, r1
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 8001de2:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <dhcpserver_remove_mac+0x13c>)
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	440b      	add	r3, r1
 8001df0:	3305      	adds	r3, #5
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	f67f af71 	bls.w	8001ce6 <dhcpserver_remove_mac+0xe>
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	200005d8 	.word	0x200005d8

08001e18 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff59 	bl	8001cd8 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e08b      	b.n	8001f44 <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8001e2c:	7bfa      	ldrb	r2, [r7, #15]
 8001e2e:	494a      	ldr	r1, [pc, #296]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	440b      	add	r3, r1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d17e      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	4945      	ldr	r1, [pc, #276]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3301      	adds	r3, #1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d173      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	493f      	ldr	r1, [pc, #252]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	440b      	add	r3, r1
 8001e64:	3302      	adds	r3, #2
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d168      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
 8001e6c:	7bfa      	ldrb	r2, [r7, #15]
 8001e6e:	493a      	ldr	r1, [pc, #232]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	440b      	add	r3, r1
 8001e7a:	3303      	adds	r3, #3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d15d      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8001e82:	7bfa      	ldrb	r2, [r7, #15]
 8001e84:	4934      	ldr	r1, [pc, #208]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e86:	4613      	mov	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	440b      	add	r3, r1
 8001e90:	3304      	adds	r3, #4
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d152      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	492f      	ldr	r1, [pc, #188]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4413      	add	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	440b      	add	r3, r1
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d147      	bne.n	8001f3e <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7818      	ldrb	r0, [r3, #0]
 8001eb4:	4928      	ldr	r1, [pc, #160]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	440b      	add	r3, r1
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7858      	ldrb	r0, [r3, #1]
 8001eca:	4923      	ldr	r1, [pc, #140]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4602      	mov	r2, r0
 8001eda:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	7898      	ldrb	r0, [r3, #2]
 8001ee2:	491d      	ldr	r1, [pc, #116]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	440b      	add	r3, r1
 8001eee:	3302      	adds	r3, #2
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8001ef4:	7bfa      	ldrb	r2, [r7, #15]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	78d8      	ldrb	r0, [r3, #3]
 8001efa:	4917      	ldr	r1, [pc, #92]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	3303      	adds	r3, #3
 8001f08:	4602      	mov	r2, r0
 8001f0a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7918      	ldrb	r0, [r3, #4]
 8001f12:	4911      	ldr	r1, [pc, #68]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4602      	mov	r2, r0
 8001f22:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7958      	ldrb	r0, [r3, #5]
 8001f2a:	490b      	ldr	r1, [pc, #44]	@ (8001f58 <dhcpserver_save_mac+0x140>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	440b      	add	r3, r1
 8001f36:	3305      	adds	r3, #5
 8001f38:	4602      	mov	r2, r0
 8001f3a:	701a      	strb	r2, [r3, #0]
      break;
 8001f3c:	e007      	b.n	8001f4e <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	3301      	adds	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b07      	cmp	r3, #7
 8001f48:	f67f af70 	bls.w	8001e2c <dhcpserver_save_mac+0x14>
    }
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200005d8 	.word	0x200005d8

08001f5c <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 8001f64:	2300      	movs	r3, #0
 8001f66:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e060      	b.n	8002030 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001f6e:	4935      	ldr	r1, [pc, #212]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	781a      	ldrb	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d151      	bne.n	800202a <dhcpserver_get_ip+0xce>
 8001f86:	492f      	ldr	r1, [pc, #188]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	440b      	add	r3, r1
 8001f94:	3301      	adds	r3, #1
 8001f96:	781a      	ldrb	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d144      	bne.n	800202a <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001fa0:	4928      	ldr	r1, [pc, #160]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	3302      	adds	r3, #2
 8001fb0:	781a      	ldrb	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d137      	bne.n	800202a <dhcpserver_get_ip+0xce>
 8001fba:	4922      	ldr	r1, [pc, #136]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4413      	add	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	440b      	add	r3, r1
 8001fc8:	3303      	adds	r3, #3
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d12a      	bne.n	800202a <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001fd4:	491b      	ldr	r1, [pc, #108]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11d      	bne.n	800202a <dhcpserver_get_ip+0xce>
 8001fee:	4915      	ldr	r1, [pc, #84]	@ (8002044 <dhcpserver_get_ip+0xe8>)
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	440b      	add	r3, r1
 8001ffc:	3305      	adds	r3, #5
 8001ffe:	781a      	ldrb	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	795b      	ldrb	r3, [r3, #5]
 8002004:	429a      	cmp	r2, r3
 8002006:	d110      	bne.n	800202a <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	330a      	adds	r3, #10
 800200c:	061b      	lsls	r3, r3, #24
 800200e:	4a0e      	ldr	r2, [pc, #56]	@ (8002048 <dhcpserver_get_ip+0xec>)
 8002010:	7812      	ldrb	r2, [r2, #0]
 8002012:	441a      	add	r2, r3
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <dhcpserver_get_ip+0xf0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	021b      	lsls	r3, r3, #8
 800201a:	441a      	add	r2, r3
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <dhcpserver_get_ip+0xf4>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	4413      	add	r3, r2
 8002024:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	e006      	b.n	8002038 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b07      	cmp	r3, #7
 8002034:	d99b      	bls.n	8001f6e <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 8002036:	68bb      	ldr	r3, [r7, #8]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	200005d8 	.word	0x200005d8
 8002048:	20000096 	.word	0x20000096
 800204c:	20000097 	.word	0x20000097
 8002050:	20000098 	.word	0x20000098

08002054 <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e03d      	b.n	80020dc <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8002060:	4923      	ldr	r1, [pc, #140]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	440b      	add	r3, r1
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002072:	491f      	ldr	r1, [pc, #124]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	440b      	add	r3, r1
 8002080:	3301      	adds	r3, #1
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002086:	491a      	ldr	r1, [pc, #104]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	440b      	add	r3, r1
 8002094:	3302      	adds	r3, #2
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 800209a:	4915      	ldr	r1, [pc, #84]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	440b      	add	r3, r1
 80020a8:	3303      	adds	r3, #3
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 80020ae:	4910      	ldr	r1, [pc, #64]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	440b      	add	r3, r1
 80020bc:	3304      	adds	r3, #4
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 80020c2:	490b      	ldr	r1, [pc, #44]	@ (80020f0 <dhcpserver_clear_stored_mac+0x9c>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	440b      	add	r3, r1
 80020d0:	3305      	adds	r3, #5
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3301      	adds	r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b07      	cmp	r3, #7
 80020e0:	d9be      	bls.n	8002060 <dhcpserver_clear_stored_mac+0xc>
  }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	200005d8 	.word	0x200005d8

080020f4 <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 80020fe:	23f0      	movs	r3, #240	@ 0xf0
 8002100:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 8002102:	2332      	movs	r3, #50	@ 0x32
 8002104:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 800210e:	e036      	b.n	800217e <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4619      	mov	r1, r3
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f00d fc3a 	bl	800f990 <pbuf_get_at>
 800211c:	4603      	mov	r3, r0
 800211e:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 8002120:	7c7a      	ldrb	r2, [r7, #17]
 8002122:	7c3b      	ldrb	r3, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d11b      	bne.n	8002160 <dhcpserver_find_requested_ip+0x6c>
      index++;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	b29b      	uxth	r3, r3
 8002132:	4619      	mov	r1, r3
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f00d fc2b 	bl	800f990 <pbuf_get_at>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
      index++;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	b29a      	uxth	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	b29b      	uxth	r3, r3
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f00d fb3e 	bl	800f7d0 <pbuf_copy_partial>
      index += size;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	4413      	add	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
      found = 1;
 800215c:	2301      	movs	r3, #1
 800215e:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	3301      	adds	r3, #1
 8002164:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	b29b      	uxth	r3, r3
 800216a:	4619      	mov	r1, r3
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f00d fc0f 	bl	800f990 <pbuf_get_at>
 8002172:	4603      	mov	r3, r0
 8002174:	3301      	adds	r3, #1
 8002176:	461a      	mov	r2, r3
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	4413      	add	r3, r2
 800217c:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 800217e:	7c7b      	ldrb	r3, [r7, #17]
 8002180:	2bff      	cmp	r3, #255	@ 0xff
 8002182:	d005      	beq.n	8002190 <dhcpserver_find_requested_ip+0x9c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	891b      	ldrh	r3, [r3, #8]
 8002188:	461a      	mov	r2, r3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4293      	cmp	r3, r2
 800218e:	d3bf      	bcc.n	8002110 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8002190:	8a7b      	ldrh	r3, [r7, #18]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t i;
  uint8_t flags = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t client_requested_addr = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 85b8 	beq.w	8002d3a <dhcpserver_fn+0xb9e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	891b      	ldrh	r3, [r3, #8]
 80021ce:	2bf0      	cmp	r3, #240	@ 0xf0
 80021d0:	f240 85b3 	bls.w	8002d3a <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 80021d4:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 80021d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021dc:	2036      	movs	r0, #54	@ 0x36
 80021de:	f00c fe09 	bl	800edf4 <pbuf_alloc>
 80021e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 85a9 	beq.w	8002d3e <dhcpserver_fn+0xba2>
 80021ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ee:	891b      	ldrh	r3, [r3, #8]
 80021f0:	2bef      	cmp	r3, #239	@ 0xef
 80021f2:	f240 85a4 	bls.w	8002d3e <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021fa:	f00d fa17 	bl	800f62c <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 80021fe:	2300      	movs	r3, #0
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002202:	e014      	b.n	800222e <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 8002204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002206:	b29b      	uxth	r3, r3
 8002208:	331c      	adds	r3, #28
 800220a:	b29b      	uxth	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f00d fbbe 	bl	800f990 <pbuf_get_at>
 8002214:	4603      	mov	r3, r0
 8002216:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    ethaddr.addr[i] = val;
 800221a:	f107 021c 	add.w	r2, r7, #28
 800221e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002220:	4413      	add	r3, r2
 8002222:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8002226:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8002228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222a:	3301      	adds	r3, #1
 800222c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002230:	2b05      	cmp	r3, #5
 8002232:	d9e7      	bls.n	8002204 <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fded 	bl	8001e18 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 800223e:	f107 031c 	add.w	r3, r7, #28
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fe8a 	bl	8001f5c <dhcpserver_get_ip>
 8002248:	4603      	mov	r3, r0
 800224a:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 8577 	beq.w	8002d42 <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 8002254:	f107 021c 	add.w	r2, r7, #28
 8002258:	f107 0314 	add.w	r3, r7, #20
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f015 fe76 	bl	8017f50 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 8002264:	21f2      	movs	r1, #242	@ 0xf2
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f00d fb92 	bl	800f990 <pbuf_get_at>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  switch (val) {
 8002272:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002276:	2b01      	cmp	r3, #1
 8002278:	d004      	beq.n	8002284 <dhcpserver_fn+0xe8>
 800227a:	2b03      	cmp	r3, #3
 800227c:	f000 826a 	beq.w	8002754 <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8002280:	f000 bd62 	b.w	8002d48 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8002284:	2202      	movs	r2, #2
 8002286:	2100      	movs	r1, #0
 8002288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800228a:	f00d fbba 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2108      	movs	r1, #8
 8002292:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002294:	f00d fbb5 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8002298:	2200      	movs	r2, #0
 800229a:	210a      	movs	r1, #10
 800229c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800229e:	f00d fbb0 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	461a      	mov	r2, r3
 80022a8:	2110      	movs	r1, #16
 80022aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022ac:	f00d fba9 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	2111      	movs	r1, #17
 80022ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022bc:	f00d fba1 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	2112      	movs	r1, #18
 80022ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022cc:	f00d fb99 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	0e1b      	lsrs	r3, r3, #24
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	2113      	movs	r1, #19
 80022da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022dc:	f00d fb91 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2114      	movs	r1, #20
 80022e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022e6:	f00d fb8c 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2115      	movs	r1, #21
 80022ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022f0:	f00d fb87 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80022f4:	2200      	movs	r2, #0
 80022f6:	2116      	movs	r1, #22
 80022f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80022fa:	f00d fb82 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2117      	movs	r1, #23
 8002302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002304:	f00d fb7d 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002308:	2263      	movs	r2, #99	@ 0x63
 800230a:	21ec      	movs	r1, #236	@ 0xec
 800230c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800230e:	f00d fb78 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002312:	2282      	movs	r2, #130	@ 0x82
 8002314:	21ed      	movs	r1, #237	@ 0xed
 8002316:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002318:	f00d fb73 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 800231c:	2253      	movs	r2, #83	@ 0x53
 800231e:	21ee      	movs	r1, #238	@ 0xee
 8002320:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002322:	f00d fb6e 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002326:	2263      	movs	r2, #99	@ 0x63
 8002328:	21ef      	movs	r1, #239	@ 0xef
 800232a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800232c:	f00d fb69 	bl	800fa02 <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8002330:	23f0      	movs	r3, #240	@ 0xf0
 8002332:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	b29b      	uxth	r3, r3
 8002338:	2235      	movs	r2, #53	@ 0x35
 800233a:	4619      	mov	r1, r3
 800233c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800233e:	f00d fb60 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002344:	3301      	adds	r3, #1
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	b29b      	uxth	r3, r3
 800234c:	2201      	movs	r2, #1
 800234e:	4619      	mov	r1, r3
 8002350:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002352:	f00d fb56 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	3301      	adds	r3, #1
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	b29b      	uxth	r3, r3
 8002360:	2202      	movs	r2, #2
 8002362:	4619      	mov	r1, r3
 8002364:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002366:	f00d fb4c 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	b29b      	uxth	r3, r3
 8002374:	2201      	movs	r2, #1
 8002376:	4619      	mov	r1, r3
 8002378:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800237a:	f00d fb42 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	3301      	adds	r3, #1
 8002382:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	b29b      	uxth	r3, r3
 8002388:	2204      	movs	r2, #4
 800238a:	4619      	mov	r1, r3
 800238c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800238e:	f00d fb38 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	3301      	adds	r3, #1
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002398:	4ba8      	ldr	r3, [pc, #672]	@ (800263c <dhcpserver_fn+0x4a0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	061a      	lsls	r2, r3, #24
 800239e:	4ba8      	ldr	r3, [pc, #672]	@ (8002640 <dhcpserver_fn+0x4a4>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	4ba7      	ldr	r3, [pc, #668]	@ (8002644 <dhcpserver_fn+0x4a8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	021b      	lsls	r3, r3, #8
 80023ac:	4313      	orrs	r3, r2
 80023ae:	4aa6      	ldr	r2, [pc, #664]	@ (8002648 <dhcpserver_fn+0x4ac>)
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	061a      	lsls	r2, r3, #24
 80023b6:	4ba1      	ldr	r3, [pc, #644]	@ (800263c <dhcpserver_fn+0x4a0>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0619      	lsls	r1, r3, #24
 80023bc:	4ba0      	ldr	r3, [pc, #640]	@ (8002640 <dhcpserver_fn+0x4a4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	041b      	lsls	r3, r3, #16
 80023c2:	4319      	orrs	r1, r3
 80023c4:	4b9f      	ldr	r3, [pc, #636]	@ (8002644 <dhcpserver_fn+0x4a8>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	430b      	orrs	r3, r1
 80023cc:	499e      	ldr	r1, [pc, #632]	@ (8002648 <dhcpserver_fn+0x4ac>)
 80023ce:	7809      	ldrb	r1, [r1, #0]
 80023d0:	430b      	orrs	r3, r1
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80023d8:	431a      	orrs	r2, r3
 80023da:	4b98      	ldr	r3, [pc, #608]	@ (800263c <dhcpserver_fn+0x4a0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	0619      	lsls	r1, r3, #24
 80023e0:	4b97      	ldr	r3, [pc, #604]	@ (8002640 <dhcpserver_fn+0x4a4>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	041b      	lsls	r3, r3, #16
 80023e6:	4319      	orrs	r1, r3
 80023e8:	4b96      	ldr	r3, [pc, #600]	@ (8002644 <dhcpserver_fn+0x4a8>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	430b      	orrs	r3, r1
 80023f0:	4995      	ldr	r1, [pc, #596]	@ (8002648 <dhcpserver_fn+0x4ac>)
 80023f2:	7809      	ldrb	r1, [r1, #0]
 80023f4:	430b      	orrs	r3, r1
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80023fc:	431a      	orrs	r2, r3
 80023fe:	4b8f      	ldr	r3, [pc, #572]	@ (800263c <dhcpserver_fn+0x4a0>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	0619      	lsls	r1, r3, #24
 8002404:	4b8e      	ldr	r3, [pc, #568]	@ (8002640 <dhcpserver_fn+0x4a4>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	041b      	lsls	r3, r3, #16
 800240a:	4319      	orrs	r1, r3
 800240c:	4b8d      	ldr	r3, [pc, #564]	@ (8002644 <dhcpserver_fn+0x4a8>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	430b      	orrs	r3, r1
 8002414:	498c      	ldr	r1, [pc, #560]	@ (8002648 <dhcpserver_fn+0x4ac>)
 8002416:	7809      	ldrb	r1, [r1, #0]
 8002418:	430b      	orrs	r3, r1
 800241a:	0e1b      	lsrs	r3, r3, #24
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002422:	b29b      	uxth	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4619      	mov	r1, r3
 800242a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800242c:	f00d fae9 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	b29b      	uxth	r3, r3
 8002434:	3301      	adds	r3, #1
 8002436:	b299      	uxth	r1, r3
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	b2db      	uxtb	r3, r3
 800243e:	461a      	mov	r2, r3
 8002440:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002442:	f00d fade 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	b29b      	uxth	r3, r3
 800244a:	3302      	adds	r3, #2
 800244c:	b299      	uxth	r1, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	0c1b      	lsrs	r3, r3, #16
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002458:	f00d fad3 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800245c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245e:	b29b      	uxth	r3, r3
 8002460:	3303      	adds	r3, #3
 8002462:	b299      	uxth	r1, r3
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	0e1b      	lsrs	r3, r3, #24
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800246e:	f00d fac8 	bl	800fa02 <pbuf_put_at>
      options_offset += 4;
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	3304      	adds	r3, #4
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	b29b      	uxth	r3, r3
 800247c:	2203      	movs	r2, #3
 800247e:	4619      	mov	r1, r3
 8002480:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002482:	f00d fabe 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	3301      	adds	r3, #1
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	b29b      	uxth	r3, r3
 8002490:	2204      	movs	r2, #4
 8002492:	4619      	mov	r1, r3
 8002494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002496:	f00d fab4 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	3301      	adds	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80024a0:	4b6a      	ldr	r3, [pc, #424]	@ (800264c <dhcpserver_fn+0x4b0>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	061a      	lsls	r2, r3, #24
 80024a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002650 <dhcpserver_fn+0x4b4>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <dhcpserver_fn+0x4b8>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4313      	orrs	r3, r2
 80024b6:	4a68      	ldr	r2, [pc, #416]	@ (8002658 <dhcpserver_fn+0x4bc>)
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	061a      	lsls	r2, r3, #24
 80024be:	4b63      	ldr	r3, [pc, #396]	@ (800264c <dhcpserver_fn+0x4b0>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	0619      	lsls	r1, r3, #24
 80024c4:	4b62      	ldr	r3, [pc, #392]	@ (8002650 <dhcpserver_fn+0x4b4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	4319      	orrs	r1, r3
 80024cc:	4b61      	ldr	r3, [pc, #388]	@ (8002654 <dhcpserver_fn+0x4b8>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	430b      	orrs	r3, r1
 80024d4:	4960      	ldr	r1, [pc, #384]	@ (8002658 <dhcpserver_fn+0x4bc>)
 80024d6:	7809      	ldrb	r1, [r1, #0]
 80024d8:	430b      	orrs	r3, r1
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80024e0:	431a      	orrs	r2, r3
 80024e2:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <dhcpserver_fn+0x4b0>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	0619      	lsls	r1, r3, #24
 80024e8:	4b59      	ldr	r3, [pc, #356]	@ (8002650 <dhcpserver_fn+0x4b4>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	041b      	lsls	r3, r3, #16
 80024ee:	4319      	orrs	r1, r3
 80024f0:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <dhcpserver_fn+0x4b8>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	021b      	lsls	r3, r3, #8
 80024f6:	430b      	orrs	r3, r1
 80024f8:	4957      	ldr	r1, [pc, #348]	@ (8002658 <dhcpserver_fn+0x4bc>)
 80024fa:	7809      	ldrb	r1, [r1, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002504:	431a      	orrs	r2, r3
 8002506:	4b51      	ldr	r3, [pc, #324]	@ (800264c <dhcpserver_fn+0x4b0>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	0619      	lsls	r1, r3, #24
 800250c:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <dhcpserver_fn+0x4b4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	041b      	lsls	r3, r3, #16
 8002512:	4319      	orrs	r1, r3
 8002514:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <dhcpserver_fn+0x4b8>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	430b      	orrs	r3, r1
 800251c:	494e      	ldr	r1, [pc, #312]	@ (8002658 <dhcpserver_fn+0x4bc>)
 800251e:	7809      	ldrb	r1, [r1, #0]
 8002520:	430b      	orrs	r3, r1
 8002522:	0e1b      	lsrs	r3, r3, #24
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	b29b      	uxth	r3, r3
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	4619      	mov	r1, r3
 8002532:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002534:	f00d fa65 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	b29b      	uxth	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	b299      	uxth	r1, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b2db      	uxtb	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800254a:	f00d fa5a 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	b29b      	uxth	r3, r3
 8002552:	3302      	adds	r3, #2
 8002554:	b299      	uxth	r1, r3
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	0c1b      	lsrs	r3, r3, #16
 800255a:	b2db      	uxtb	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002560:	f00d fa4f 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	b29b      	uxth	r3, r3
 8002568:	3303      	adds	r3, #3
 800256a:	b299      	uxth	r1, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	0e1b      	lsrs	r3, r3, #24
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002576:	f00d fa44 	bl	800fa02 <pbuf_put_at>
      options_offset += 4;
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	3304      	adds	r3, #4
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	b29b      	uxth	r3, r3
 8002584:	2233      	movs	r2, #51	@ 0x33
 8002586:	4619      	mov	r1, r3
 8002588:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800258a:	f00d fa3a 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	3301      	adds	r3, #1
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	b29b      	uxth	r3, r3
 8002598:	2204      	movs	r2, #4
 800259a:	4619      	mov	r1, r3
 800259c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800259e:	f00d fa30 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2200      	movs	r2, #0
 80025ae:	4619      	mov	r1, r3
 80025b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025b2:	f00d fa26 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2201      	movs	r2, #1
 80025c0:	4619      	mov	r1, r3
 80025c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025c4:	f00d fa1d 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3302      	adds	r3, #2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	2251      	movs	r2, #81	@ 0x51
 80025d2:	4619      	mov	r1, r3
 80025d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025d6:	f00d fa14 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	b29b      	uxth	r3, r3
 80025de:	3303      	adds	r3, #3
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2280      	movs	r2, #128	@ 0x80
 80025e4:	4619      	mov	r1, r3
 80025e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025e8:	f00d fa0b 	bl	800fa02 <pbuf_put_at>
      options_offset += 4;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	3304      	adds	r3, #4
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80025f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2236      	movs	r2, #54	@ 0x36
 80025f8:	4619      	mov	r1, r3
 80025fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80025fc:	f00d fa01 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	3301      	adds	r3, #1
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	b29b      	uxth	r3, r3
 800260a:	2204      	movs	r2, #4
 800260c:	4619      	mov	r1, r3
 800260e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002610:	f00d f9f7 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	3301      	adds	r3, #1
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <dhcpserver_fn+0x4b0>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	061a      	lsls	r2, r3, #24
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <dhcpserver_fn+0x4b4>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	041b      	lsls	r3, r3, #16
 8002626:	431a      	orrs	r2, r3
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <dhcpserver_fn+0x4b8>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	4313      	orrs	r3, r2
 8002630:	4a09      	ldr	r2, [pc, #36]	@ (8002658 <dhcpserver_fn+0x4bc>)
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4313      	orrs	r3, r2
 8002636:	061a      	lsls	r2, r3, #24
 8002638:	e010      	b.n	800265c <dhcpserver_fn+0x4c0>
 800263a:	bf00      	nop
 800263c:	2000009a 	.word	0x2000009a
 8002640:	2000009b 	.word	0x2000009b
 8002644:	2000009c 	.word	0x2000009c
 8002648:	200008d4 	.word	0x200008d4
 800264c:	20000096 	.word	0x20000096
 8002650:	20000097 	.word	0x20000097
 8002654:	20000098 	.word	0x20000098
 8002658:	20000099 	.word	0x20000099
 800265c:	4b54      	ldr	r3, [pc, #336]	@ (80027b0 <dhcpserver_fn+0x614>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	0619      	lsls	r1, r3, #24
 8002662:	4b54      	ldr	r3, [pc, #336]	@ (80027b4 <dhcpserver_fn+0x618>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	4319      	orrs	r1, r3
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <dhcpserver_fn+0x61c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	430b      	orrs	r3, r1
 8002672:	4952      	ldr	r1, [pc, #328]	@ (80027bc <dhcpserver_fn+0x620>)
 8002674:	7809      	ldrb	r1, [r1, #0]
 8002676:	430b      	orrs	r3, r1
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800267e:	431a      	orrs	r2, r3
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <dhcpserver_fn+0x614>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	0619      	lsls	r1, r3, #24
 8002686:	4b4b      	ldr	r3, [pc, #300]	@ (80027b4 <dhcpserver_fn+0x618>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	4319      	orrs	r1, r3
 800268e:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <dhcpserver_fn+0x61c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	430b      	orrs	r3, r1
 8002696:	4949      	ldr	r1, [pc, #292]	@ (80027bc <dhcpserver_fn+0x620>)
 8002698:	7809      	ldrb	r1, [r1, #0]
 800269a:	430b      	orrs	r3, r1
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80026a2:	431a      	orrs	r2, r3
 80026a4:	4b42      	ldr	r3, [pc, #264]	@ (80027b0 <dhcpserver_fn+0x614>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	0619      	lsls	r1, r3, #24
 80026aa:	4b42      	ldr	r3, [pc, #264]	@ (80027b4 <dhcpserver_fn+0x618>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	041b      	lsls	r3, r3, #16
 80026b0:	4319      	orrs	r1, r3
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <dhcpserver_fn+0x61c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	021b      	lsls	r3, r3, #8
 80026b8:	430b      	orrs	r3, r1
 80026ba:	4940      	ldr	r1, [pc, #256]	@ (80027bc <dhcpserver_fn+0x620>)
 80026bc:	7809      	ldrb	r1, [r1, #0]
 80026be:	430b      	orrs	r3, r1
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026d2:	f00d f996 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3301      	adds	r3, #1
 80026dc:	b299      	uxth	r1, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	0a1b      	lsrs	r3, r3, #8
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026e8:	f00d f98b 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3302      	adds	r3, #2
 80026f2:	b299      	uxth	r1, r3
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	0c1b      	lsrs	r3, r3, #16
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80026fe:	f00d f980 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	b29b      	uxth	r3, r3
 8002706:	3303      	adds	r3, #3
 8002708:	b299      	uxth	r1, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	0e1b      	lsrs	r3, r3, #24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
 8002712:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002714:	f00d f975 	bl	800fa02 <pbuf_put_at>
      options_offset += 4;
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	3304      	adds	r3, #4
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	b29b      	uxth	r3, r3
 8002722:	22ff      	movs	r2, #255	@ 0xff
 8002724:	4619      	mov	r1, r3
 8002726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002728:	f00d f96b 	bl	800fa02 <pbuf_put_at>
      options_offset++;
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	3301      	adds	r3, #1
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	b29b      	uxth	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800273a:	f00c fcbd 	bl	800f0b8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <dhcpserver_fn+0x624>)
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	f107 0214 	add.w	r2, r7, #20
 8002746:	2344      	movs	r3, #68	@ 0x44
 8002748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800274a:	f012 fe79 	bl	8015440 <udp_sendto>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
      break;
 8002752:	e2f9      	b.n	8002d48 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 8002754:	2202      	movs	r2, #2
 8002756:	2100      	movs	r1, #0
 8002758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800275a:	f00d f952 	bl	800fa02 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2108      	movs	r1, #8
 8002762:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002764:	f00d f94d 	bl	800fa02 <pbuf_put_at>
      flags = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 800276e:	210a      	movs	r1, #10
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f00d f90d 	bl	800f990 <pbuf_get_at>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      if (flags & 0x80) {
 800277c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002780:	2b00      	cmp	r3, #0
 8002782:	da1f      	bge.n	80027c4 <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 8002784:	210a      	movs	r1, #10
 8002786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002788:	f00d f902 	bl	800f990 <pbuf_get_at>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags |= 0x80;
 8002792:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002796:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800279a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 800279e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027a2:	461a      	mov	r2, r3
 80027a4:	210a      	movs	r1, #10
 80027a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027a8:	f00d f92b 	bl	800fa02 <pbuf_put_at>
 80027ac:	e01e      	b.n	80027ec <dhcpserver_fn+0x650>
 80027ae:	bf00      	nop
 80027b0:	20000096 	.word	0x20000096
 80027b4:	20000097 	.word	0x20000097
 80027b8:	20000098 	.word	0x20000098
 80027bc:	20000099 	.word	0x20000099
 80027c0:	200005d4 	.word	0x200005d4
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80027c4:	210a      	movs	r1, #10
 80027c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027c8:	f00d f8e2 	bl	800f990 <pbuf_get_at>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        flags &= ~0x80;
 80027d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80027de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80027e2:	461a      	mov	r2, r3
 80027e4:	210a      	movs	r1, #10
 80027e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027e8:	f00d f90b 	bl	800fa02 <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 80027ec:	f107 0318 	add.w	r3, r7, #24
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fc7e 	bl	80020f4 <dhcpserver_find_requested_ip>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 82a3 	beq.w	8002d46 <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	429a      	cmp	r2, r3
 8002806:	f040 8249 	bne.w	8002c9c <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	2110      	movs	r1, #16
 8002812:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002814:	f00d f8f5 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	0a1b      	lsrs	r3, r3, #8
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	2111      	movs	r1, #17
 8002822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002824:	f00d f8ed 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	b2db      	uxtb	r3, r3
 800282e:	461a      	mov	r2, r3
 8002830:	2112      	movs	r1, #18
 8002832:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002834:	f00d f8e5 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	0e1b      	lsrs	r3, r3, #24
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	2113      	movs	r1, #19
 8002842:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002844:	f00d f8dd 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002848:	2200      	movs	r2, #0
 800284a:	2114      	movs	r1, #20
 800284c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800284e:	f00d f8d8 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2115      	movs	r1, #21
 8002856:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002858:	f00d f8d3 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2116      	movs	r1, #22
 8002860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002862:	f00d f8ce 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2117      	movs	r1, #23
 800286a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800286c:	f00d f8c9 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002870:	2263      	movs	r2, #99	@ 0x63
 8002872:	21ec      	movs	r1, #236	@ 0xec
 8002874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002876:	f00d f8c4 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 800287a:	2282      	movs	r2, #130	@ 0x82
 800287c:	21ed      	movs	r1, #237	@ 0xed
 800287e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002880:	f00d f8bf 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002884:	2253      	movs	r2, #83	@ 0x53
 8002886:	21ee      	movs	r1, #238	@ 0xee
 8002888:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800288a:	f00d f8ba 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800288e:	2263      	movs	r2, #99	@ 0x63
 8002890:	21ef      	movs	r1, #239	@ 0xef
 8002892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002894:	f00d f8b5 	bl	800fa02 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002898:	23f0      	movs	r3, #240	@ 0xf0
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2235      	movs	r2, #53	@ 0x35
 80028a2:	4619      	mov	r1, r3
 80028a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028a6:	f00d f8ac 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	3301      	adds	r3, #1
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	4619      	mov	r1, r3
 80028b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028ba:	f00d f8a2 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	3301      	adds	r3, #1
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	2205      	movs	r2, #5
 80028ca:	4619      	mov	r1, r3
 80028cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028ce:	f00d f898 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	3301      	adds	r3, #1
 80028d6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2201      	movs	r2, #1
 80028de:	4619      	mov	r1, r3
 80028e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028e2:	f00d f88e 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	3301      	adds	r3, #1
 80028ea:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2204      	movs	r2, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028f6:	f00d f884 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	3301      	adds	r3, #1
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002900:	4ba8      	ldr	r3, [pc, #672]	@ (8002ba4 <dhcpserver_fn+0xa08>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	061a      	lsls	r2, r3, #24
 8002906:	4ba8      	ldr	r3, [pc, #672]	@ (8002ba8 <dhcpserver_fn+0xa0c>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	041b      	lsls	r3, r3, #16
 800290c:	431a      	orrs	r2, r3
 800290e:	4ba7      	ldr	r3, [pc, #668]	@ (8002bac <dhcpserver_fn+0xa10>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	4313      	orrs	r3, r2
 8002916:	4aa6      	ldr	r2, [pc, #664]	@ (8002bb0 <dhcpserver_fn+0xa14>)
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	4313      	orrs	r3, r2
 800291c:	061a      	lsls	r2, r3, #24
 800291e:	4ba1      	ldr	r3, [pc, #644]	@ (8002ba4 <dhcpserver_fn+0xa08>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	0619      	lsls	r1, r3, #24
 8002924:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba8 <dhcpserver_fn+0xa0c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	041b      	lsls	r3, r3, #16
 800292a:	4319      	orrs	r1, r3
 800292c:	4b9f      	ldr	r3, [pc, #636]	@ (8002bac <dhcpserver_fn+0xa10>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	430b      	orrs	r3, r1
 8002934:	499e      	ldr	r1, [pc, #632]	@ (8002bb0 <dhcpserver_fn+0xa14>)
 8002936:	7809      	ldrb	r1, [r1, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	021b      	lsls	r3, r3, #8
 800293c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002940:	431a      	orrs	r2, r3
 8002942:	4b98      	ldr	r3, [pc, #608]	@ (8002ba4 <dhcpserver_fn+0xa08>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	0619      	lsls	r1, r3, #24
 8002948:	4b97      	ldr	r3, [pc, #604]	@ (8002ba8 <dhcpserver_fn+0xa0c>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	4319      	orrs	r1, r3
 8002950:	4b96      	ldr	r3, [pc, #600]	@ (8002bac <dhcpserver_fn+0xa10>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	021b      	lsls	r3, r3, #8
 8002956:	430b      	orrs	r3, r1
 8002958:	4995      	ldr	r1, [pc, #596]	@ (8002bb0 <dhcpserver_fn+0xa14>)
 800295a:	7809      	ldrb	r1, [r1, #0]
 800295c:	430b      	orrs	r3, r1
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002964:	431a      	orrs	r2, r3
 8002966:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba4 <dhcpserver_fn+0xa08>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	0619      	lsls	r1, r3, #24
 800296c:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba8 <dhcpserver_fn+0xa0c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	041b      	lsls	r3, r3, #16
 8002972:	4319      	orrs	r1, r3
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <dhcpserver_fn+0xa10>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	430b      	orrs	r3, r1
 800297c:	498c      	ldr	r1, [pc, #560]	@ (8002bb0 <dhcpserver_fn+0xa14>)
 800297e:	7809      	ldrb	r1, [r1, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	b29b      	uxth	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4619      	mov	r1, r3
 8002992:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002994:	f00d f835 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	b29b      	uxth	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	b299      	uxth	r1, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029aa:	f00d f82a 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3302      	adds	r3, #2
 80029b4:	b299      	uxth	r1, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029c0:	f00d f81f 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3303      	adds	r3, #3
 80029ca:	b299      	uxth	r1, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	0e1b      	lsrs	r3, r3, #24
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029d6:	f00d f814 	bl	800fa02 <pbuf_put_at>
        options_offset += 4;
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	3304      	adds	r3, #4
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2203      	movs	r2, #3
 80029e6:	4619      	mov	r1, r3
 80029e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029ea:	f00d f80a 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2204      	movs	r2, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029fe:	f00d f800 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	3301      	adds	r3, #1
 8002a06:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002a08:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <dhcpserver_fn+0xa18>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	061a      	lsls	r2, r3, #24
 8002a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb8 <dhcpserver_fn+0xa1c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	041b      	lsls	r3, r3, #16
 8002a14:	431a      	orrs	r2, r3
 8002a16:	4b69      	ldr	r3, [pc, #420]	@ (8002bbc <dhcpserver_fn+0xa20>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a68      	ldr	r2, [pc, #416]	@ (8002bc0 <dhcpserver_fn+0xa24>)
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	061a      	lsls	r2, r3, #24
 8002a26:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <dhcpserver_fn+0xa18>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	0619      	lsls	r1, r3, #24
 8002a2c:	4b62      	ldr	r3, [pc, #392]	@ (8002bb8 <dhcpserver_fn+0xa1c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	4319      	orrs	r1, r3
 8002a34:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <dhcpserver_fn+0xa20>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	4960      	ldr	r1, [pc, #384]	@ (8002bc0 <dhcpserver_fn+0xa24>)
 8002a3e:	7809      	ldrb	r1, [r1, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <dhcpserver_fn+0xa18>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	0619      	lsls	r1, r3, #24
 8002a50:	4b59      	ldr	r3, [pc, #356]	@ (8002bb8 <dhcpserver_fn+0xa1c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	041b      	lsls	r3, r3, #16
 8002a56:	4319      	orrs	r1, r3
 8002a58:	4b58      	ldr	r3, [pc, #352]	@ (8002bbc <dhcpserver_fn+0xa20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	4957      	ldr	r1, [pc, #348]	@ (8002bc0 <dhcpserver_fn+0xa24>)
 8002a62:	7809      	ldrb	r1, [r1, #0]
 8002a64:	430b      	orrs	r3, r1
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	4b51      	ldr	r3, [pc, #324]	@ (8002bb4 <dhcpserver_fn+0xa18>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	0619      	lsls	r1, r3, #24
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <dhcpserver_fn+0xa1c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	041b      	lsls	r3, r3, #16
 8002a7a:	4319      	orrs	r1, r3
 8002a7c:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <dhcpserver_fn+0xa20>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	430b      	orrs	r3, r1
 8002a84:	494e      	ldr	r1, [pc, #312]	@ (8002bc0 <dhcpserver_fn+0xa24>)
 8002a86:	7809      	ldrb	r1, [r1, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	0e1b      	lsrs	r3, r3, #24
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002a9c:	f00c ffb1 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	b299      	uxth	r1, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	461a      	mov	r2, r3
 8002ab0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ab2:	f00c ffa6 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3302      	adds	r3, #2
 8002abc:	b299      	uxth	r1, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ac8:	f00c ff9b 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	b299      	uxth	r1, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	0e1b      	lsrs	r3, r3, #24
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ade:	f00c ff90 	bl	800fa02 <pbuf_put_at>
        options_offset += 4;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	2233      	movs	r2, #51	@ 0x33
 8002aee:	4619      	mov	r1, r3
 8002af0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002af2:	f00c ff86 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	3301      	adds	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2204      	movs	r2, #4
 8002b02:	4619      	mov	r1, r3
 8002b04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b06:	f00c ff7c 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2200      	movs	r2, #0
 8002b16:	4619      	mov	r1, r3
 8002b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b1a:	f00c ff72 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	4619      	mov	r1, r3
 8002b2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b2c:	f00c ff69 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3302      	adds	r3, #2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2251      	movs	r2, #81	@ 0x51
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b3e:	f00c ff60 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3303      	adds	r3, #3
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b50:	f00c ff57 	bl	800fa02 <pbuf_put_at>
        options_offset += 4;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	3304      	adds	r3, #4
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2236      	movs	r2, #54	@ 0x36
 8002b60:	4619      	mov	r1, r3
 8002b62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b64:	f00c ff4d 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2204      	movs	r2, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002b78:	f00c ff43 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	3301      	adds	r3, #1
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002b82:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb4 <dhcpserver_fn+0xa18>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	061a      	lsls	r2, r3, #24
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <dhcpserver_fn+0xa1c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <dhcpserver_fn+0xa20>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4313      	orrs	r3, r2
 8002b98:	4a09      	ldr	r2, [pc, #36]	@ (8002bc0 <dhcpserver_fn+0xa24>)
 8002b9a:	7812      	ldrb	r2, [r2, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	061a      	lsls	r2, r3, #24
 8002ba0:	e010      	b.n	8002bc4 <dhcpserver_fn+0xa28>
 8002ba2:	bf00      	nop
 8002ba4:	2000009a 	.word	0x2000009a
 8002ba8:	2000009b 	.word	0x2000009b
 8002bac:	2000009c 	.word	0x2000009c
 8002bb0:	200008d4 	.word	0x200008d4
 8002bb4:	20000096 	.word	0x20000096
 8002bb8:	20000097 	.word	0x20000097
 8002bbc:	20000098 	.word	0x20000098
 8002bc0:	20000099 	.word	0x20000099
 8002bc4:	4b67      	ldr	r3, [pc, #412]	@ (8002d64 <dhcpserver_fn+0xbc8>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	0619      	lsls	r1, r3, #24
 8002bca:	4b67      	ldr	r3, [pc, #412]	@ (8002d68 <dhcpserver_fn+0xbcc>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	041b      	lsls	r3, r3, #16
 8002bd0:	4319      	orrs	r1, r3
 8002bd2:	4b66      	ldr	r3, [pc, #408]	@ (8002d6c <dhcpserver_fn+0xbd0>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	021b      	lsls	r3, r3, #8
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	4965      	ldr	r1, [pc, #404]	@ (8002d70 <dhcpserver_fn+0xbd4>)
 8002bdc:	7809      	ldrb	r1, [r1, #0]
 8002bde:	430b      	orrs	r3, r1
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002be6:	431a      	orrs	r2, r3
 8002be8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d64 <dhcpserver_fn+0xbc8>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	0619      	lsls	r1, r3, #24
 8002bee:	4b5e      	ldr	r3, [pc, #376]	@ (8002d68 <dhcpserver_fn+0xbcc>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	4319      	orrs	r1, r3
 8002bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d6c <dhcpserver_fn+0xbd0>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	495c      	ldr	r1, [pc, #368]	@ (8002d70 <dhcpserver_fn+0xbd4>)
 8002c00:	7809      	ldrb	r1, [r1, #0]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	4b55      	ldr	r3, [pc, #340]	@ (8002d64 <dhcpserver_fn+0xbc8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	0619      	lsls	r1, r3, #24
 8002c12:	4b55      	ldr	r3, [pc, #340]	@ (8002d68 <dhcpserver_fn+0xbcc>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	4319      	orrs	r1, r3
 8002c1a:	4b54      	ldr	r3, [pc, #336]	@ (8002d6c <dhcpserver_fn+0xbd0>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	430b      	orrs	r3, r1
 8002c22:	4953      	ldr	r1, [pc, #332]	@ (8002d70 <dhcpserver_fn+0xbd4>)
 8002c24:	7809      	ldrb	r1, [r1, #0]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	0e1b      	lsrs	r3, r3, #24
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c3a:	f00c fee2 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3301      	adds	r3, #1
 8002c44:	b299      	uxth	r1, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c50:	f00c fed7 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3302      	adds	r3, #2
 8002c5a:	b299      	uxth	r1, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	0c1b      	lsrs	r3, r3, #16
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	461a      	mov	r2, r3
 8002c64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c66:	f00c fecc 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3303      	adds	r3, #3
 8002c70:	b299      	uxth	r1, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	0e1b      	lsrs	r3, r3, #24
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c7c:	f00c fec1 	bl	800fa02 <pbuf_put_at>
        options_offset += 4;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	3304      	adds	r3, #4
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	22ff      	movs	r2, #255	@ 0xff
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002c90:	f00c feb7 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	e03d      	b.n	8002d18 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002c9c:	2263      	movs	r2, #99	@ 0x63
 8002c9e:	21ec      	movs	r1, #236	@ 0xec
 8002ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ca2:	f00c feae 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002ca6:	2282      	movs	r2, #130	@ 0x82
 8002ca8:	21ed      	movs	r1, #237	@ 0xed
 8002caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cac:	f00c fea9 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002cb0:	2253      	movs	r2, #83	@ 0x53
 8002cb2:	21ee      	movs	r1, #238	@ 0xee
 8002cb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cb6:	f00c fea4 	bl	800fa02 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002cba:	2263      	movs	r2, #99	@ 0x63
 8002cbc:	21ef      	movs	r1, #239	@ 0xef
 8002cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cc0:	f00c fe9f 	bl	800fa02 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002cc4:	23f0      	movs	r3, #240	@ 0xf0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2235      	movs	r2, #53	@ 0x35
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cd2:	f00c fe96 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	3301      	adds	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002ce6:	f00c fe8c 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cec:	3301      	adds	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2206      	movs	r2, #6
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002cfa:	f00c fe82 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	22ff      	movs	r2, #255	@ 0xff
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d0e:	f00c fe78 	bl	800fa02 <pbuf_put_at>
        options_offset++;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	3301      	adds	r3, #1
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d20:	f00c f9ca 	bl	800f0b8 <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <dhcpserver_fn+0xbd8>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	f107 0214 	add.w	r2, r7, #20
 8002d2c:	2344      	movs	r3, #68	@ 0x44
 8002d2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d30:	f012 fb86 	bl	8015440 <udp_sendto>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
      break;
 8002d38:	e006      	b.n	8002d48 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002d3a:	bf00      	nop
 8002d3c:	e004      	b.n	8002d48 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002d3e:	bf00      	nop
 8002d40:	e002      	b.n	8002d48 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002d42:	bf00      	nop
 8002d44:	e000      	b.n	8002d48 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002d46:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8002d4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002d50:	f00c fb38 	bl	800f3c4 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f00c fb35 	bl	800f3c4 <pbuf_free>
}
 8002d5a:	bf00      	nop
 8002d5c:	3730      	adds	r7, #48	@ 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000096 	.word	0x20000096
 8002d68:	20000097 	.word	0x20000097
 8002d6c:	20000098 	.word	0x20000098
 8002d70:	20000099 	.word	0x20000099
 8002d74:	200005d4 	.word	0x200005d4

08002d78 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e03d      	b.n	8002e02 <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002d86:	4933      	ldr	r1, [pc, #204]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	440b      	add	r3, r1
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002d98:	492e      	ldr	r1, [pc, #184]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	440b      	add	r3, r1
 8002da6:	3301      	adds	r3, #1
 8002da8:	2200      	movs	r2, #0
 8002daa:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002dac:	4929      	ldr	r1, [pc, #164]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	440b      	add	r3, r1
 8002dba:	3302      	adds	r3, #2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002dc0:	4924      	ldr	r1, [pc, #144]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	440b      	add	r3, r1
 8002dce:	3303      	adds	r3, #3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002dd4:	491f      	ldr	r1, [pc, #124]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	3304      	adds	r3, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8002de8:	491a      	ldr	r1, [pc, #104]	@ (8002e54 <dhcpserver_start_prv+0xdc>)
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	440b      	add	r3, r1
 8002df6:	3305      	adds	r3, #5
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b07      	cmp	r3, #7
 8002e06:	d9be      	bls.n	8002d86 <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d11e      	bne.n	8002e4e <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8002e10:	f012 fe66 	bl	8015ae0 <udp_new>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a10      	ldr	r2, [pc, #64]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e18:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d014      	beq.n	8002e4c <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 8002e22:	4b0d      	ldr	r3, [pc, #52]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2243      	movs	r2, #67	@ 0x43
 8002e28:	490c      	ldr	r1, [pc, #48]	@ (8002e5c <dhcpserver_start_prv+0xe4>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f012 fcbe 	bl	80157ac <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	490a      	ldr	r1, [pc, #40]	@ (8002e60 <dhcpserver_start_prv+0xe8>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	f012 fd40 	bl	80158bc <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <dhcpserver_start_prv+0xe0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	4908      	ldr	r1, [pc, #32]	@ (8002e64 <dhcpserver_start_prv+0xec>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f012 fde9 	bl	8015a1c <udp_recv>
 8002e4a:	e000      	b.n	8002e4e <dhcpserver_start_prv+0xd6>
      return;
 8002e4c:	bf00      	nop
  }
}
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200005d8 	.word	0x200005d8
 8002e58:	200005d4 	.word	0x200005d4
 8002e5c:	0806c648 	.word	0x0806c648
 8002e60:	20000864 	.word	0x20000864
 8002e64:	0800219d 	.word	0x0800219d

08002e68 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <dhcpserver_start+0x10>)
 8002e70:	f00a fcae 	bl	800d7d0 <tcpip_callback>
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08002d79 	.word	0x08002d79

08002e7c <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8002e84:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb0 <dhcpserver_stop_prv+0x34>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <dhcpserver_stop_prv+0x34>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f012 fd9b 	bl	80159cc <udp_disconnect>
    udp_remove(dhcp_pcb);
 8002e96:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <dhcpserver_stop_prv+0x34>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f012 fdde 	bl	8015a5c <udp_remove>
    dhcp_pcb = NULL;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	@ (8002eb0 <dhcpserver_stop_prv+0x34>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200005d4 	.word	0x200005d4

08002eb4 <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <dhcpserver_stop+0x10>)
 8002ebc:	f00a fc88 	bl	800d7d0 <tcpip_callback>
}
 8002ec0:	bf00      	nop
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	08002e7d 	.word	0x08002e7d

08002ec8 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2206      	movs	r2, #6
 8002ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3332      	adds	r3, #50	@ 0x32
 8002edc:	2202      	movs	r2, #2
 8002ede:	491b      	ldr	r1, [pc, #108]	@ (8002f4c <low_level_init+0x84>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f018 f9ff 	bl	801b2e4 <memcmp>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10a      	bne.n	8002f02 <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002ef2:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <low_level_init+0x88>)
 8002ef4:	f203 2316 	addw	r3, r3, #534	@ 0x216
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	6011      	str	r1, [r2, #0]
 8002efc:	889b      	ldrh	r3, [r3, #4]
 8002efe:	8093      	strh	r3, [r2, #4]
 8002f00:	e009      	b.n	8002f16 <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <low_level_init+0x88>)
 8002f0a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	6010      	str	r0, [r2, #0]
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002f1c:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f24:	f043 030a 	orr.w	r3, r3, #10
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f36:	f043 0304 	orr.w	r3, r3, #4
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	0801d0a4 	.word	0x0801d0a4
 8002f50:	20000608 	.word	0x20000608

08002f54 <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8002f5e:	4b37      	ldr	r3, [pc, #220]	@ (800303c <low_level_output+0xe8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f04f 31ff 	mov.w	r1, #4294967295
 8002f66:	4618      	mov	r0, r3
 8002f68:	f007 fee6 	bl	800ad38 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	891b      	ldrh	r3, [r3, #8]
 8002f70:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 8002f72:	f107 0008 	add.w	r0, r7, #8
 8002f76:	2200      	movs	r2, #0
 8002f78:	214a      	movs	r1, #74	@ 0x4a
 8002f7a:	f005 fd59 	bl	8008a30 <sl_wfx_allocate_command_buffer>
 8002f7e:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d102      	bne.n	8002f8c <low_level_output+0x38>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <low_level_output+0xe8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	2200      	movs	r2, #0
 8002f94:	2100      	movs	r1, #0
 8002f96:	f007 fbbd 	bl	800a714 <xQueueGenericSend>
    return ERR_MEM;
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	e049      	b.n	8003034 <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e010      	b.n	8002fce <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	895b      	ldrh	r3, [r3, #10]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6938      	ldr	r0, [r7, #16]
 8002fb8:	f018 fa61 	bl	801b47e <memcpy>
    buffer += q->len;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	895b      	ldrh	r3, [r3, #10]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1eb      	bne.n	8002fac <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3332      	adds	r3, #50	@ 0x32
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4919      	ldr	r1, [pc, #100]	@ (8003040 <low_level_output+0xec>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f018 f981 	bl	801b2e4 <memcmp>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	891a      	ldrh	r2, [r3, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8002ffa:	4b12      	ldr	r3, [pc, #72]	@ (8003044 <low_level_output+0xf0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d004      	beq.n	800300c <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 8003002:	4b10      	ldr	r3, [pc, #64]	@ (8003044 <low_level_output+0xf0>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e002      	b.n	8003012 <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4a0d      	ldr	r2, [pc, #52]	@ (8003044 <low_level_output+0xf0>)
 8003010:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a0b      	ldr	r2, [pc, #44]	@ (8003044 <low_level_output+0xf0>)
 8003016:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8003018:	4b0b      	ldr	r3, [pc, #44]	@ (8003048 <low_level_output+0xf4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2101      	movs	r1, #1
 800301e:	4618      	mov	r0, r3
 8003020:	f007 f916 	bl	800a250 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <low_level_output+0xe8>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	f007 fb71 	bl	800a714 <xQueueGenericSend>
  
  return ERR_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20001510 	.word	0x20001510
 8003040:	0801d0a4 	.word	0x0801d0a4
 8003044:	20001514 	.word	0x20001514
 8003048:	2000150c 	.word	0x2000150c

0800304c <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	795b      	ldrb	r3, [r3, #5]
 800305a:	461a      	mov	r2, r3
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4413      	add	r3, r2
 8003060:	3308      	adds	r3, #8
 8003062:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	88db      	ldrh	r3, [r3, #6]
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	88db      	ldrh	r3, [r3, #6]
 8003072:	b29b      	uxth	r3, r3
 8003074:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8003078:	4619      	mov	r1, r3
 800307a:	2000      	movs	r0, #0
 800307c:	f00b feba 	bl	800edf4 <pbuf_alloc>
 8003080:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e010      	b.n	80030b0 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	6858      	ldr	r0, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	895b      	ldrh	r3, [r3, #10]
 8003096:	461a      	mov	r2, r3
 8003098:	68f9      	ldr	r1, [r7, #12]
 800309a:	f018 f9f0 	bl	801b47e <memcpy>
      buffer += q->len;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	895b      	ldrh	r3, [r3, #10]
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4413      	add	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1eb      	bne.n	800308e <low_level_input+0x42>
    }
  }  
   
  return p;
 80030b6:	697b      	ldr	r3, [r7, #20]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	78db      	ldrb	r3, [r3, #3]
 80030cc:	f003 0306 	and.w	r3, r3, #6
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <sl_wfx_host_received_frame_callback+0x54>)
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e001      	b.n	80030de <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 80030da:	4b0f      	ldr	r3, [pc, #60]	@ (8003118 <sl_wfx_host_received_frame_callback+0x58>)
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ffb0 	bl	800304c <low_level_input>
 80030ec:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	4798      	blx	r3
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f00c f95d 	bl	800f3c4 <pbuf_free>
      }
    }
  }
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	2000082c 	.word	0x2000082c
 8003118:	20000864 	.word	0x20000864

0800311c <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <sta_ethernetif_init+0x1a>
 800312a:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <sta_ethernetif_init+0x44>)
 800312c:	22dc      	movs	r2, #220	@ 0xdc
 800312e:	490d      	ldr	r1, [pc, #52]	@ (8003164 <sta_ethernetif_init+0x48>)
 8003130:	480d      	ldr	r0, [pc, #52]	@ (8003168 <sta_ethernetif_init+0x4c>)
 8003132:	f017 ff85 	bl	801b040 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3332      	adds	r3, #50	@ 0x32
 800313a:	2202      	movs	r2, #2
 800313c:	490b      	ldr	r1, [pc, #44]	@ (800316c <sta_ethernetif_init+0x50>)
 800313e:	4618      	mov	r0, r3
 8003140:	f018 f99d 	bl	801b47e <memcpy>

  netif->output = etharp_output;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <sta_ethernetif_init+0x54>)
 8003148:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <sta_ethernetif_init+0x58>)
 800314e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff feb9 	bl	8002ec8 <low_level_init>
  
  return ERR_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3708      	adds	r7, #8
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	0801d0a8 	.word	0x0801d0a8
 8003164:	0801d0c4 	.word	0x0801d0c4
 8003168:	0801d0d4 	.word	0x0801d0d4
 800316c:	0801d0a4 	.word	0x0801d0a4
 8003170:	08018235 	.word	0x08018235
 8003174:	08002f55 	.word	0x08002f55

08003178 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800317c:	f001 f97c 	bl	8004478 <HAL_GetTick>
 8003180:	4603      	mov	r3, r0
}
 8003182:	4618      	mov	r0, r3
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8003190:	2100      	movs	r1, #0
 8003192:	2000      	movs	r0, #0
 8003194:	f00a fbaa 	bl	800d8ec <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8003198:	f000 f886 	bl	80032a8 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <lwip_start_task_entry+0x44>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <lwip_start_task_entry+0x48>)
 80031a6:	f107 040c 	add.w	r4, r7, #12
 80031aa:	461d      	mov	r5, r3
 80031ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 80031b4:	f107 030c 	add.w	r3, r7, #12
 80031b8:	4906      	ldr	r1, [pc, #24]	@ (80031d4 <lwip_start_task_entry+0x4c>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f006 fd9f 	bl	8009cfe <osThreadCreate>
  }

  wifi_autoconnexion_init();
 80031c0:	f7fe fb2a 	bl	8001818 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 80031c4:	2000      	movs	r0, #0
 80031c6:	f006 fdc1 	bl	8009d4c <osThreadTerminate>
 80031ca:	e7fb      	b.n	80031c4 <lwip_start_task_entry+0x3c>
 80031cc:	2000008c 	.word	0x2000008c
 80031d0:	0801d108 	.word	0x0801d108
 80031d4:	2000082c 	.word	0x2000082c

080031d8 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 80031dc:	2200      	movs	r2, #0
 80031de:	4909      	ldr	r1, [pc, #36]	@ (8003204 <lwip_set_sta_link_up+0x2c>)
 80031e0:	4809      	ldr	r0, [pc, #36]	@ (8003208 <lwip_set_sta_link_up+0x30>)
 80031e2:	f00a f9bf 	bl	800d564 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 80031e6:	2200      	movs	r2, #0
 80031e8:	4908      	ldr	r1, [pc, #32]	@ (800320c <lwip_set_sta_link_up+0x34>)
 80031ea:	4807      	ldr	r0, [pc, #28]	@ (8003208 <lwip_set_sta_link_up+0x30>)
 80031ec:	f00a f9ba 	bl	800d564 <netifapi_netif_common>
  if (use_dhcp_client) {
 80031f0:	4b07      	ldr	r3, [pc, #28]	@ (8003210 <lwip_set_sta_link_up+0x38>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fe fbf9 	bl	80019f0 <dhcpclient_set_link_state>
  }
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	0800ea79 	.word	0x0800ea79
 8003208:	2000082c 	.word	0x2000082c
 800320c:	0800ebb5 	.word	0x0800ebb5
 8003210:	2000008c 	.word	0x2000008c

08003214 <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <lwip_set_sta_link_down+0x2c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fe fbe5 	bl	80019f0 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 8003226:	2200      	movs	r2, #0
 8003228:	4906      	ldr	r1, [pc, #24]	@ (8003244 <lwip_set_sta_link_down+0x30>)
 800322a:	4807      	ldr	r0, [pc, #28]	@ (8003248 <lwip_set_sta_link_down+0x34>)
 800322c:	f00a f99a 	bl	800d564 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8003230:	2200      	movs	r2, #0
 8003232:	4906      	ldr	r1, [pc, #24]	@ (800324c <lwip_set_sta_link_down+0x38>)
 8003234:	4804      	ldr	r0, [pc, #16]	@ (8003248 <lwip_set_sta_link_down+0x34>)
 8003236:	f00a f995 	bl	800d564 <netifapi_netif_common>
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000008c 	.word	0x2000008c
 8003244:	0800ec25 	.word	0x0800ec25
 8003248:	2000082c 	.word	0x2000082c
 800324c:	0800eb51 	.word	0x0800eb51

08003250 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 8003254:	2200      	movs	r2, #0
 8003256:	4906      	ldr	r1, [pc, #24]	@ (8003270 <lwip_set_ap_link_up+0x20>)
 8003258:	4806      	ldr	r0, [pc, #24]	@ (8003274 <lwip_set_ap_link_up+0x24>)
 800325a:	f00a f983 	bl	800d564 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 800325e:	2200      	movs	r2, #0
 8003260:	4905      	ldr	r1, [pc, #20]	@ (8003278 <lwip_set_ap_link_up+0x28>)
 8003262:	4804      	ldr	r0, [pc, #16]	@ (8003274 <lwip_set_ap_link_up+0x24>)
 8003264:	f00a f97e 	bl	800d564 <netifapi_netif_common>
  dhcpserver_start();
 8003268:	f7ff fdfe 	bl	8002e68 <dhcpserver_start>
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	0800ea79 	.word	0x0800ea79
 8003274:	20000864 	.word	0x20000864
 8003278:	0800ebb5 	.word	0x0800ebb5

0800327c <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8003280:	f7ff fe18 	bl	8002eb4 <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 8003284:	2200      	movs	r2, #0
 8003286:	4905      	ldr	r1, [pc, #20]	@ (800329c <lwip_set_ap_link_down+0x20>)
 8003288:	4805      	ldr	r0, [pc, #20]	@ (80032a0 <lwip_set_ap_link_down+0x24>)
 800328a:	f00a f96b 	bl	800d564 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 800328e:	2200      	movs	r2, #0
 8003290:	4904      	ldr	r1, [pc, #16]	@ (80032a4 <lwip_set_ap_link_down+0x28>)
 8003292:	4803      	ldr	r0, [pc, #12]	@ (80032a0 <lwip_set_ap_link_down+0x24>)
 8003294:	f00a f966 	bl	800d564 <netifapi_netif_common>
}
 8003298:	bf00      	nop
 800329a:	bd80      	pop	{r7, pc}
 800329c:	0800ec25 	.word	0x0800ec25
 80032a0:	20000864 	.word	0x20000864
 80032a4:	0800eb51 	.word	0x0800eb51

080032a8 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	@ 0x28
 80032ac:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 80032b4:	4b9e      	ldr	r3, [pc, #632]	@ (8003530 <netif_config+0x288>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d006      	beq.n	80032ca <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	e0cb      	b.n	8003462 <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 80032ca:	4b9a      	ldr	r3, [pc, #616]	@ (8003534 <netif_config+0x28c>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	061a      	lsls	r2, r3, #24
 80032d0:	4b99      	ldr	r3, [pc, #612]	@ (8003538 <netif_config+0x290>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	041b      	lsls	r3, r3, #16
 80032d6:	431a      	orrs	r2, r3
 80032d8:	4b98      	ldr	r3, [pc, #608]	@ (800353c <netif_config+0x294>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	4313      	orrs	r3, r2
 80032e0:	4a97      	ldr	r2, [pc, #604]	@ (8003540 <netif_config+0x298>)
 80032e2:	7812      	ldrb	r2, [r2, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	061a      	lsls	r2, r3, #24
 80032e8:	4b92      	ldr	r3, [pc, #584]	@ (8003534 <netif_config+0x28c>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	0619      	lsls	r1, r3, #24
 80032ee:	4b92      	ldr	r3, [pc, #584]	@ (8003538 <netif_config+0x290>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	4319      	orrs	r1, r3
 80032f6:	4b91      	ldr	r3, [pc, #580]	@ (800353c <netif_config+0x294>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	021b      	lsls	r3, r3, #8
 80032fc:	430b      	orrs	r3, r1
 80032fe:	4990      	ldr	r1, [pc, #576]	@ (8003540 <netif_config+0x298>)
 8003300:	7809      	ldrb	r1, [r1, #0]
 8003302:	430b      	orrs	r3, r1
 8003304:	021b      	lsls	r3, r3, #8
 8003306:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800330a:	431a      	orrs	r2, r3
 800330c:	4b89      	ldr	r3, [pc, #548]	@ (8003534 <netif_config+0x28c>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	0619      	lsls	r1, r3, #24
 8003312:	4b89      	ldr	r3, [pc, #548]	@ (8003538 <netif_config+0x290>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	4319      	orrs	r1, r3
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <netif_config+0x294>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	430b      	orrs	r3, r1
 8003322:	4987      	ldr	r1, [pc, #540]	@ (8003540 <netif_config+0x298>)
 8003324:	7809      	ldrb	r1, [r1, #0]
 8003326:	430b      	orrs	r3, r1
 8003328:	0a1b      	lsrs	r3, r3, #8
 800332a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800332e:	431a      	orrs	r2, r3
 8003330:	4b80      	ldr	r3, [pc, #512]	@ (8003534 <netif_config+0x28c>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	0619      	lsls	r1, r3, #24
 8003336:	4b80      	ldr	r3, [pc, #512]	@ (8003538 <netif_config+0x290>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	4319      	orrs	r1, r3
 800333e:	4b7f      	ldr	r3, [pc, #508]	@ (800353c <netif_config+0x294>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	021b      	lsls	r3, r3, #8
 8003344:	430b      	orrs	r3, r1
 8003346:	497e      	ldr	r1, [pc, #504]	@ (8003540 <netif_config+0x298>)
 8003348:	7809      	ldrb	r1, [r1, #0]
 800334a:	430b      	orrs	r3, r1
 800334c:	0e1b      	lsrs	r3, r3, #24
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 8003352:	4b7c      	ldr	r3, [pc, #496]	@ (8003544 <netif_config+0x29c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	061a      	lsls	r2, r3, #24
 8003358:	4b7b      	ldr	r3, [pc, #492]	@ (8003548 <netif_config+0x2a0>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	431a      	orrs	r2, r3
 8003360:	4b7a      	ldr	r3, [pc, #488]	@ (800354c <netif_config+0x2a4>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	4313      	orrs	r3, r2
 8003368:	4a79      	ldr	r2, [pc, #484]	@ (8003550 <netif_config+0x2a8>)
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	061a      	lsls	r2, r3, #24
 8003370:	4b74      	ldr	r3, [pc, #464]	@ (8003544 <netif_config+0x29c>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	0619      	lsls	r1, r3, #24
 8003376:	4b74      	ldr	r3, [pc, #464]	@ (8003548 <netif_config+0x2a0>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	041b      	lsls	r3, r3, #16
 800337c:	4319      	orrs	r1, r3
 800337e:	4b73      	ldr	r3, [pc, #460]	@ (800354c <netif_config+0x2a4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	430b      	orrs	r3, r1
 8003386:	4972      	ldr	r1, [pc, #456]	@ (8003550 <netif_config+0x2a8>)
 8003388:	7809      	ldrb	r1, [r1, #0]
 800338a:	430b      	orrs	r3, r1
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003392:	431a      	orrs	r2, r3
 8003394:	4b6b      	ldr	r3, [pc, #428]	@ (8003544 <netif_config+0x29c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	0619      	lsls	r1, r3, #24
 800339a:	4b6b      	ldr	r3, [pc, #428]	@ (8003548 <netif_config+0x2a0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	4319      	orrs	r1, r3
 80033a2:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <netif_config+0x2a4>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	021b      	lsls	r3, r3, #8
 80033a8:	430b      	orrs	r3, r1
 80033aa:	4969      	ldr	r1, [pc, #420]	@ (8003550 <netif_config+0x2a8>)
 80033ac:	7809      	ldrb	r1, [r1, #0]
 80033ae:	430b      	orrs	r3, r1
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80033b6:	431a      	orrs	r2, r3
 80033b8:	4b62      	ldr	r3, [pc, #392]	@ (8003544 <netif_config+0x29c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	0619      	lsls	r1, r3, #24
 80033be:	4b62      	ldr	r3, [pc, #392]	@ (8003548 <netif_config+0x2a0>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	041b      	lsls	r3, r3, #16
 80033c4:	4319      	orrs	r1, r3
 80033c6:	4b61      	ldr	r3, [pc, #388]	@ (800354c <netif_config+0x2a4>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	430b      	orrs	r3, r1
 80033ce:	4960      	ldr	r1, [pc, #384]	@ (8003550 <netif_config+0x2a8>)
 80033d0:	7809      	ldrb	r1, [r1, #0]
 80033d2:	430b      	orrs	r3, r1
 80033d4:	0e1b      	lsrs	r3, r3, #24
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 80033da:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <netif_config+0x2ac>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	061a      	lsls	r2, r3, #24
 80033e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003558 <netif_config+0x2b0>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <netif_config+0x2b4>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	4313      	orrs	r3, r2
 80033f0:	4a5b      	ldr	r2, [pc, #364]	@ (8003560 <netif_config+0x2b8>)
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	061a      	lsls	r2, r3, #24
 80033f8:	4b56      	ldr	r3, [pc, #344]	@ (8003554 <netif_config+0x2ac>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	0619      	lsls	r1, r3, #24
 80033fe:	4b56      	ldr	r3, [pc, #344]	@ (8003558 <netif_config+0x2b0>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	4319      	orrs	r1, r3
 8003406:	4b55      	ldr	r3, [pc, #340]	@ (800355c <netif_config+0x2b4>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	430b      	orrs	r3, r1
 800340e:	4954      	ldr	r1, [pc, #336]	@ (8003560 <netif_config+0x2b8>)
 8003410:	7809      	ldrb	r1, [r1, #0]
 8003412:	430b      	orrs	r3, r1
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800341a:	431a      	orrs	r2, r3
 800341c:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <netif_config+0x2ac>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0619      	lsls	r1, r3, #24
 8003422:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <netif_config+0x2b0>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	041b      	lsls	r3, r3, #16
 8003428:	4319      	orrs	r1, r3
 800342a:	4b4c      	ldr	r3, [pc, #304]	@ (800355c <netif_config+0x2b4>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	430b      	orrs	r3, r1
 8003432:	494b      	ldr	r1, [pc, #300]	@ (8003560 <netif_config+0x2b8>)
 8003434:	7809      	ldrb	r1, [r1, #0]
 8003436:	430b      	orrs	r3, r1
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800343e:	431a      	orrs	r2, r3
 8003440:	4b44      	ldr	r3, [pc, #272]	@ (8003554 <netif_config+0x2ac>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	0619      	lsls	r1, r3, #24
 8003446:	4b44      	ldr	r3, [pc, #272]	@ (8003558 <netif_config+0x2b0>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	4319      	orrs	r1, r3
 800344e:	4b43      	ldr	r3, [pc, #268]	@ (800355c <netif_config+0x2b4>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	430b      	orrs	r3, r1
 8003456:	4942      	ldr	r1, [pc, #264]	@ (8003560 <netif_config+0x2b8>)
 8003458:	7809      	ldrb	r1, [r1, #0]
 800345a:	430b      	orrs	r3, r1
 800345c:	0e1b      	lsrs	r3, r3, #24
 800345e:	4313      	orrs	r3, r2
 8003460:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 8003462:	4840      	ldr	r0, [pc, #256]	@ (8003564 <netif_config+0x2bc>)
 8003464:	f004 fb22 	bl	8007aac <sl_wfx_init>
 8003468:	6138      	str	r0, [r7, #16]
  switch (status) {
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f640 3202 	movw	r2, #2818	@ 0xb02
 8003470:	4293      	cmp	r3, r2
 8003472:	d034      	beq.n	80034de <netif_config+0x236>
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f640 3202 	movw	r2, #2818	@ 0xb02
 800347a:	4293      	cmp	r3, r2
 800347c:	d83b      	bhi.n	80034f6 <netif_config+0x24e>
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f640 3201 	movw	r2, #2817	@ 0xb01
 8003484:	4293      	cmp	r3, r2
 8003486:	d026      	beq.n	80034d6 <netif_config+0x22e>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f640 3201 	movw	r2, #2817	@ 0xb01
 800348e:	4293      	cmp	r3, r2
 8003490:	d831      	bhi.n	80034f6 <netif_config+0x24e>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b07      	cmp	r3, #7
 8003496:	d026      	beq.n	80034e6 <netif_config+0x23e>
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b07      	cmp	r3, #7
 800349c:	d82b      	bhi.n	80034f6 <netif_config+0x24e>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <netif_config+0x204>
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d021      	beq.n	80034ee <netif_config+0x246>
 80034aa:	e024      	b.n	80034f6 <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <netif_config+0x2bc>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80034b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <netif_config+0x2bc>)
 80034b6:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80034ba:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 80034bc:	4b29      	ldr	r3, [pc, #164]	@ (8003564 <netif_config+0x2bc>)
 80034be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80034c2:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 80034c4:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <netif_config+0x2bc>)
 80034c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80034ca:	4827      	ldr	r0, [pc, #156]	@ (8003568 <netif_config+0x2c0>)
 80034cc:	f017 fdb8 	bl	801b040 <iprintf>
    res = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]
    break;
 80034d4:	e012      	b.n	80034fc <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 80034d6:	4825      	ldr	r0, [pc, #148]	@ (800356c <netif_config+0x2c4>)
 80034d8:	f017 fe1a 	bl	801b110 <puts>
    break;
 80034dc:	e00e      	b.n	80034fc <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 80034de:	4824      	ldr	r0, [pc, #144]	@ (8003570 <netif_config+0x2c8>)
 80034e0:	f017 fe16 	bl	801b110 <puts>
    break;
 80034e4:	e00a      	b.n	80034fc <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 80034e6:	4823      	ldr	r0, [pc, #140]	@ (8003574 <netif_config+0x2cc>)
 80034e8:	f017 fe12 	bl	801b110 <puts>
    break;
 80034ec:	e006      	b.n	80034fc <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 80034ee:	4822      	ldr	r0, [pc, #136]	@ (8003578 <netif_config+0x2d0>)
 80034f0:	f017 fe0e 	bl	801b110 <puts>
    break;
 80034f4:	e002      	b.n	80034fc <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 80034f6:	4821      	ldr	r0, [pc, #132]	@ (800357c <netif_config+0x2d4>)
 80034f8:	f017 fe0a 	bl	801b110 <puts>
  }

  if (res == 0) {
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d110      	bne.n	8003524 <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 8003502:	1d3b      	adds	r3, r7, #4
 8003504:	f107 0208 	add.w	r2, r7, #8
 8003508:	f107 010c 	add.w	r1, r7, #12
 800350c:	481c      	ldr	r0, [pc, #112]	@ (8003580 <netif_config+0x2d8>)
 800350e:	9002      	str	r0, [sp, #8]
 8003510:	481c      	ldr	r0, [pc, #112]	@ (8003584 <netif_config+0x2dc>)
 8003512:	9001      	str	r0, [sp, #4]
 8003514:	2000      	movs	r0, #0
 8003516:	9000      	str	r0, [sp, #0]
 8003518:	481b      	ldr	r0, [pc, #108]	@ (8003588 <netif_config+0x2e0>)
 800351a:	f00b f8e3 	bl	800e6e4 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 800351e:	481a      	ldr	r0, [pc, #104]	@ (8003588 <netif_config+0x2e0>)
 8003520:	f00b fa9a 	bl	800ea58 <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 8003524:	697b      	ldr	r3, [r7, #20]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000008c 	.word	0x2000008c
 8003534:	20000090 	.word	0x20000090
 8003538:	20000091 	.word	0x20000091
 800353c:	200008ce 	.word	0x200008ce
 8003540:	20000092 	.word	0x20000092
 8003544:	20000093 	.word	0x20000093
 8003548:	20000094 	.word	0x20000094
 800354c:	20000095 	.word	0x20000095
 8003550:	200008cf 	.word	0x200008cf
 8003554:	200008d0 	.word	0x200008d0
 8003558:	200008d1 	.word	0x200008d1
 800355c:	200008d2 	.word	0x200008d2
 8003560:	200008d3 	.word	0x200008d3
 8003564:	20000608 	.word	0x20000608
 8003568:	0801d11c 	.word	0x0801d11c
 800356c:	0801d148 	.word	0x0801d148
 8003570:	0801d178 	.word	0x0801d178
 8003574:	0801d1ac 	.word	0x0801d1ac
 8003578:	0801d1dc 	.word	0x0801d1dc
 800357c:	0801d1fc 	.word	0x0801d1fc
 8003580:	0800d78d 	.word	0x0800d78d
 8003584:	0800311d 	.word	0x0800311d
 8003588:	2000082c 	.word	0x2000082c

0800358c <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 8003592:	4b08      	ldr	r3, [pc, #32]	@ (80035b4 <lwip_start+0x28>)
 8003594:	1d3c      	adds	r4, r7, #4
 8003596:	461d      	mov	r5, r3
 8003598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800359a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	2100      	movs	r1, #0
 80035a4:	4618      	mov	r0, r3
 80035a6:	f006 fbaa 	bl	8009cfe <osThreadCreate>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bdb0      	pop	{r4, r5, r7, pc}
 80035b2:	bf00      	nop
 80035b4:	0801d230 	.word	0x0801d230

080035b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035bc:	f000 fef6 	bl	80043ac <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80035c0:	f000 f81e 	bl	8003600 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035c4:	f000 f94c 	bl	8003860 <MX_GPIO_Init>
  MX_DMA_Init();
 80035c8:	f000 f92a 	bl	8003820 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80035cc:	f000 f8fe 	bl	80037cc <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 80035d0:	f000 f8c8 	bl	8003764 <MX_SPI3_Init>
  MX_SPI4_Init();
 80035d4:	f000 f892 	bl	80036fc <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 80035d8:	4807      	ldr	r0, [pc, #28]	@ (80035f8 <main+0x40>)
 80035da:	f017 fd31 	bl	801b040 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 80035de:	4807      	ldr	r0, [pc, #28]	@ (80035fc <main+0x44>)
 80035e0:	f017 fd96 	bl	801b110 <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 80035e4:	f006 fa72 	bl	8009acc <sl_wfx_task_start>
  wifi_events_start();
 80035e8:	f006 f902 	bl	80097f0 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 80035ec:	f7ff ffce 	bl	800358c <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 80035f0:	f006 fb6e 	bl	8009cd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <main+0x3c>
 80035f8:	0801d244 	.word	0x0801d244
 80035fc:	0801d248 	.word	0x0801d248

08003600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b094      	sub	sp, #80	@ 0x50
 8003604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003606:	f107 0320 	add.w	r3, r7, #32
 800360a:	2230      	movs	r2, #48	@ 0x30
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f017 fe78 	bl	801b304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	4b31      	ldr	r3, [pc, #196]	@ (80036f0 <SystemClock_Config+0xf0>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362c:	4a30      	ldr	r2, [pc, #192]	@ (80036f0 <SystemClock_Config+0xf0>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	@ 0x40
 8003634:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <SystemClock_Config+0xf0>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003640:	2300      	movs	r3, #0
 8003642:	607b      	str	r3, [r7, #4]
 8003644:	4b2b      	ldr	r3, [pc, #172]	@ (80036f4 <SystemClock_Config+0xf4>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a2a      	ldr	r2, [pc, #168]	@ (80036f4 <SystemClock_Config+0xf4>)
 800364a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b28      	ldr	r3, [pc, #160]	@ (80036f4 <SystemClock_Config+0xf4>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800365c:	2301      	movs	r3, #1
 800365e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003666:	2302      	movs	r3, #2
 8003668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800366a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003670:	2308      	movs	r3, #8
 8003672:	643b      	str	r3, [r7, #64]	@ 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8003674:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8003678:	647b      	str	r3, [r7, #68]	@ 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800367a:	2304      	movs	r3, #4
 800367c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800367e:	2308      	movs	r3, #8
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003682:	f107 0320 	add.w	r3, r7, #32
 8003686:	4618      	mov	r0, r3
 8003688:	f001 ff1c 	bl	80054c4 <HAL_RCC_OscConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003692:	f000 f9a3 	bl	80039dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003696:	230f      	movs	r3, #15
 8003698:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800369a:	2302      	movs	r3, #2
 800369c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	2103      	movs	r1, #3
 80036b2:	4618      	mov	r0, r3
 80036b4:	f002 f97e 	bl	80059b4 <HAL_RCC_ClockConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036be:	f000 f98d 	bl	80039dc <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80036c2:	f002 fb63 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 80036c6:	4603      	mov	r3, r0
 80036c8:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <SystemClock_Config+0xf8>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	099b      	lsrs	r3, r3, #6
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f838 	bl	8004746 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80036d6:	2004      	movs	r0, #4
 80036d8:	f001 f842 	bl	8004760 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80036dc:	2200      	movs	r2, #0
 80036de:	210f      	movs	r1, #15
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f000 fff7 	bl	80046d6 <HAL_NVIC_SetPriority>

}
 80036e8:	bf00      	nop
 80036ea:	3750      	adds	r7, #80	@ 0x50
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40007000 	.word	0x40007000
 80036f8:	10624dd3 	.word	0x10624dd3

080036fc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003700:	4b16      	ldr	r3, [pc, #88]	@ (800375c <MX_SPI4_Init+0x60>)
 8003702:	4a17      	ldr	r2, [pc, #92]	@ (8003760 <MX_SPI4_Init+0x64>)
 8003704:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8003706:	4b15      	ldr	r3, [pc, #84]	@ (800375c <MX_SPI4_Init+0x60>)
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <MX_SPI4_Init+0x60>)
 800370e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003712:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003714:	4b11      	ldr	r3, [pc, #68]	@ (800375c <MX_SPI4_Init+0x60>)
 8003716:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800371a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800371c:	4b0f      	ldr	r3, [pc, #60]	@ (800375c <MX_SPI4_Init+0x60>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003722:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <MX_SPI4_Init+0x60>)
 8003724:	2200      	movs	r2, #0
 8003726:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <MX_SPI4_Init+0x60>)
 800372a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800372e:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <MX_SPI4_Init+0x60>)
 8003732:	2200      	movs	r2, #0
 8003734:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <MX_SPI4_Init+0x60>)
 8003738:	2200      	movs	r2, #0
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <MX_SPI4_Init+0x60>)
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003742:	4b06      	ldr	r3, [pc, #24]	@ (800375c <MX_SPI4_Init+0x60>)
 8003744:	220a      	movs	r2, #10
 8003746:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003748:	4804      	ldr	r0, [pc, #16]	@ (800375c <MX_SPI4_Init+0x60>)
 800374a:	f002 fb53 	bl	8005df4 <HAL_SPI_Init>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_SPI4_Init+0x5c>
  {
	Error_Handler();
 8003754:	f000 f942 	bl	80039dc <Error_Handler>
  }
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200009d4 	.word	0x200009d4
 8003760:	40013400 	.word	0x40013400

08003764 <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 8003768:	4b16      	ldr	r3, [pc, #88]	@ (80037c4 <MX_SPI3_Init+0x60>)
 800376a:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <MX_SPI3_Init+0x64>)
 800376c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <MX_SPI3_Init+0x60>)
 8003770:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003774:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003776:	4b13      	ldr	r3, [pc, #76]	@ (80037c4 <MX_SPI3_Init+0x60>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800377c:	4b11      	ldr	r3, [pc, #68]	@ (80037c4 <MX_SPI3_Init+0x60>)
 800377e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003782:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003784:	4b0f      	ldr	r3, [pc, #60]	@ (80037c4 <MX_SPI3_Init+0x60>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <MX_SPI3_Init+0x60>)
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003790:	4b0c      	ldr	r3, [pc, #48]	@ (80037c4 <MX_SPI3_Init+0x60>)
 8003792:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003796:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003798:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <MX_SPI3_Init+0x60>)
 800379a:	2200      	movs	r2, #0
 800379c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800379e:	4b09      	ldr	r3, [pc, #36]	@ (80037c4 <MX_SPI3_Init+0x60>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a4:	4b07      	ldr	r3, [pc, #28]	@ (80037c4 <MX_SPI3_Init+0x60>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80037aa:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <MX_SPI3_Init+0x60>)
 80037ac:	220a      	movs	r2, #10
 80037ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80037b0:	4804      	ldr	r0, [pc, #16]	@ (80037c4 <MX_SPI3_Init+0x60>)
 80037b2:	f002 fb1f 	bl	8005df4 <HAL_SPI_Init>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_SPI3_Init+0x5c>
  {
	Error_Handler();
 80037bc:	f000 f90e 	bl	80039dc <Error_Handler>
  }
}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000091c 	.word	0x2000091c
 80037c8:	40003c00 	.word	0x40003c00

080037cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <MX_USART2_UART_Init+0x50>)
 80037d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037d8:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 80037dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037de:	4b0e      	ldr	r3, [pc, #56]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037f0:	4b09      	ldr	r3, [pc, #36]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037f2:	220c      	movs	r2, #12
 80037f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037f6:	4b08      	ldr	r3, [pc, #32]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003802:	4805      	ldr	r0, [pc, #20]	@ (8003818 <MX_USART2_UART_Init+0x4c>)
 8003804:	f003 fb02 	bl	8006e0c <HAL_UART_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800380e:	f000 f8e5 	bl	80039dc <Error_Handler>
  }
}
 8003812:	bf00      	nop
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	200008d8 	.word	0x200008d8
 800381c:	40004400 	.word	0x40004400

08003820 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <MX_DMA_Init+0x3c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	4a0b      	ldr	r2, [pc, #44]	@ (800385c <MX_DMA_Init+0x3c>)
 8003830:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003834:	6313      	str	r3, [r2, #48]	@ 0x30
 8003836:	4b09      	ldr	r3, [pc, #36]	@ (800385c <MX_DMA_Init+0x3c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	203b      	movs	r0, #59	@ 0x3b
 8003848:	f000 ff45 	bl	80046d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800384c:	203b      	movs	r0, #59	@ 0x3b
 800384e:	f000 ff5e 	bl	800470e <HAL_NVIC_EnableIRQ>


}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800

08003860 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	@ 0x28
 8003864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003866:	f107 0314 	add.w	r3, r7, #20
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4b4a      	ldr	r3, [pc, #296]	@ (80039a4 <MX_GPIO_Init+0x144>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387e:	4a49      	ldr	r2, [pc, #292]	@ (80039a4 <MX_GPIO_Init+0x144>)
 8003880:	f043 0304 	orr.w	r3, r3, #4
 8003884:	6313      	str	r3, [r2, #48]	@ 0x30
 8003886:	4b47      	ldr	r3, [pc, #284]	@ (80039a4 <MX_GPIO_Init+0x144>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b43      	ldr	r3, [pc, #268]	@ (80039a4 <MX_GPIO_Init+0x144>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389a:	4a42      	ldr	r2, [pc, #264]	@ (80039a4 <MX_GPIO_Init+0x144>)
 800389c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038a2:	4b40      	ldr	r3, [pc, #256]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b3c      	ldr	r3, [pc, #240]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	4a3b      	ldr	r2, [pc, #236]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80038be:	4b39      	ldr	r3, [pc, #228]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	4b35      	ldr	r3, [pc, #212]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	4a34      	ldr	r2, [pc, #208]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038d4:	f043 0302 	orr.w	r3, r3, #2
 80038d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80038da:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <MX_GPIO_Init+0x144>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 80038e6:	2201      	movs	r2, #1
 80038e8:	2110      	movs	r1, #16
 80038ea:	482f      	ldr	r0, [pc, #188]	@ (80039a8 <MX_GPIO_Init+0x148>)
 80038ec:	f001 fdac 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 80038f0:	2200      	movs	r2, #0
 80038f2:	2101      	movs	r1, #1
 80038f4:	482d      	ldr	r0, [pc, #180]	@ (80039ac <MX_GPIO_Init+0x14c>)
 80038f6:	f001 fda7 	bl	8005448 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 80038fa:	2310      	movs	r3, #16
 80038fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038fe:	2301      	movs	r3, #1
 8003900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003906:	2303      	movs	r3, #3
 8003908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 800390a:	f107 0314 	add.w	r3, r7, #20
 800390e:	4619      	mov	r1, r3
 8003910:	4825      	ldr	r0, [pc, #148]	@ (80039a8 <MX_GPIO_Init+0x148>)
 8003912:	f001 fb31 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800391a:	2301      	movs	r3, #1
 800391c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003922:	2303      	movs	r3, #3
 8003924:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	4619      	mov	r1, r3
 800392c:	481f      	ldr	r0, [pc, #124]	@ (80039ac <MX_GPIO_Init+0x14c>)
 800392e:	f001 fb23 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 8003932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003936:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003938:	2301      	movs	r3, #1
 800393a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003940:	2303      	movs	r3, #3
 8003942:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8003944:	f107 0314 	add.w	r3, r7, #20
 8003948:	4619      	mov	r1, r3
 800394a:	4819      	ldr	r0, [pc, #100]	@ (80039b0 <MX_GPIO_Init+0x150>)
 800394c:	f001 fb14 	bl	8004f78 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8003950:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003956:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800395a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	4619      	mov	r1, r3
 8003966:	4812      	ldr	r0, [pc, #72]	@ (80039b0 <MX_GPIO_Init+0x150>)
 8003968:	f001 fb06 	bl	8004f78 <HAL_GPIO_Init>



 //EXTRA PINOUTS HERE
  /*Configure GPIO pin: RHD_CS */
  GPIO_InitStruct.Pin = MUX_TOGGLE_Pin;
 800396c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003972:	2301      	movs	r3, #1
 8003974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MUX_TOGGLE_Port, &GPIO_InitStruct);
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	4619      	mov	r1, r3
 8003984:	4808      	ldr	r0, [pc, #32]	@ (80039a8 <MX_GPIO_Init+0x148>)
 8003986:	f001 faf7 	bl	8004f78 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(MUX_TOGGLE_Port, MUX_TOGGLE_Pin, GPIO_PIN_RESET);
 800398a:	2200      	movs	r2, #0
 800398c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003990:	4805      	ldr	r0, [pc, #20]	@ (80039a8 <MX_GPIO_Init+0x148>)
 8003992:	f001 fd59 	bl	8005448 <HAL_GPIO_WritePin>
  printf("RESET PIN\r\n");
 8003996:	4807      	ldr	r0, [pc, #28]	@ (80039b4 <MX_GPIO_Init+0x154>)
 8003998:	f017 fbba 	bl	801b110 <puts>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 800399c:	bf00      	nop
 800399e:	3728      	adds	r7, #40	@ 0x28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40020000 	.word	0x40020000
 80039ac:	40020800 	.word	0x40020800
 80039b0:	40020400 	.word	0x40020400
 80039b4:	0801d270 	.word	0x0801d270

080039b8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80039c0:	1d39      	adds	r1, r7, #4
 80039c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c6:	2201      	movs	r2, #1
 80039c8:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <__io_putchar+0x20>)
 80039ca:	f003 fa6c 	bl	8006ea6 <HAL_UART_Transmit>

  return ch;
 80039ce:	687b      	ldr	r3, [r7, #4]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	200008d8 	.word	0x200008d8

080039dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039e0:	b672      	cpsid	i
}
 80039e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <Error_Handler+0x8>

080039e8 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	4b25      	ldr	r3, [pc, #148]	@ (8003a88 <HAL_MspInit+0xa0>)
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	4a24      	ldr	r2, [pc, #144]	@ (8003a88 <HAL_MspInit+0xa0>)
 80039f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80039fe:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <HAL_MspInit+0xa0>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a88 <HAL_MspInit+0xa0>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <HAL_MspInit+0xa0>)
 8003a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_MspInit+0xa0>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a26:	2003      	movs	r0, #3
 8003a28:	f000 fe4a 	bl	80046c0 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f06f 000b 	mvn.w	r0, #11
 8003a34:	f000 fe4f 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	f06f 000a 	mvn.w	r0, #10
 8003a40:	f000 fe49 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	f06f 0009 	mvn.w	r0, #9
 8003a4c:	f000 fe43 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	2100      	movs	r1, #0
 8003a54:	f06f 0004 	mvn.w	r0, #4
 8003a58:	f000 fe3d 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f06f 0003 	mvn.w	r0, #3
 8003a64:	f000 fe37 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f06f 0001 	mvn.w	r0, #1
 8003a70:	f000 fe31 	bl	80046d6 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	210f      	movs	r1, #15
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f000 fe2b 	bl	80046d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800

08003a8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b090      	sub	sp, #64	@ 0x40
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	60da      	str	r2, [r3, #12]
 8003aa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4aa0      	ldr	r2, [pc, #640]	@ (8003d2c <HAL_SPI_MspInit+0x2a0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f040 80a1 	bne.w	8003bf2 <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ab4:	4b9e      	ldr	r3, [pc, #632]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	4a9d      	ldr	r2, [pc, #628]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003aba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003abe:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac0:	4b9b      	ldr	r3, [pc, #620]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad0:	4b97      	ldr	r3, [pc, #604]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	4a96      	ldr	r2, [pc, #600]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8003adc:	4b94      	ldr	r3, [pc, #592]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8003ae8:	23e0      	movs	r3, #224	@ 0xe0
 8003aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af4:	2303      	movs	r3, #3
 8003af6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003af8:	2305      	movs	r3, #5
 8003afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003b00:	4619      	mov	r1, r3
 8003b02:	488c      	ldr	r0, [pc, #560]	@ (8003d34 <HAL_SPI_MspInit+0x2a8>)
 8003b04:	f001 fa38 	bl	8004f78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003b08:	4b8b      	ldr	r3, [pc, #556]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b0a:	4a8c      	ldr	r2, [pc, #560]	@ (8003d3c <HAL_SPI_MspInit+0x2b0>)
 8003b0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003b0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b10:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8003b14:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b16:	4b88      	ldr	r3, [pc, #544]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b1c:	4b86      	ldr	r3, [pc, #536]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b22:	4b85      	ldr	r3, [pc, #532]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b28:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b2a:	4b83      	ldr	r3, [pc, #524]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b30:	4b81      	ldr	r3, [pc, #516]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003b36:	4b80      	ldr	r3, [pc, #512]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b42:	4b7d      	ldr	r3, [pc, #500]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003b48:	487b      	ldr	r0, [pc, #492]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b4a:	f000 fe25 	bl	8004798 <HAL_DMA_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003b54:	f7ff ff42 	bl	80039dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a77      	ldr	r2, [pc, #476]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b5c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003b5e:	4a76      	ldr	r2, [pc, #472]	@ (8003d38 <HAL_SPI_MspInit+0x2ac>)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003b64:	4b76      	ldr	r3, [pc, #472]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b66:	4a77      	ldr	r2, [pc, #476]	@ (8003d44 <HAL_SPI_MspInit+0x2b8>)
 8003b68:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003b6a:	4b75      	ldr	r3, [pc, #468]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b6c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b70:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b72:	4b73      	ldr	r3, [pc, #460]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b78:	4b71      	ldr	r3, [pc, #452]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b7e:	4b70      	ldr	r3, [pc, #448]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b84:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b86:	4b6e      	ldr	r3, [pc, #440]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003b92:	4b6b      	ldr	r3, [pc, #428]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003b98:	4b69      	ldr	r3, [pc, #420]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b9e:	4b68      	ldr	r3, [pc, #416]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ba4:	4866      	ldr	r0, [pc, #408]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003ba6:	f000 fdf7 	bl	8004798 <HAL_DMA_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003bb0:	f7ff ff14 	bl	80039dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a62      	ldr	r2, [pc, #392]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003bb8:	649a      	str	r2, [r3, #72]	@ 0x48
 8003bba:	4a61      	ldr	r2, [pc, #388]	@ (8003d40 <HAL_SPI_MspInit+0x2b4>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	210a      	movs	r1, #10
 8003bc4:	2038      	movs	r0, #56	@ 0x38
 8003bc6:	f000 fd86 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003bca:	2038      	movs	r0, #56	@ 0x38
 8003bcc:	f000 fd9f 	bl	800470e <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	210a      	movs	r1, #10
 8003bd4:	203a      	movs	r0, #58	@ 0x3a
 8003bd6:	f000 fd7e 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003bda:	203a      	movs	r0, #58	@ 0x3a
 8003bdc:	f000 fd97 	bl	800470e <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8003be0:	2202      	movs	r2, #2
 8003be2:	210a      	movs	r1, #10
 8003be4:	2023      	movs	r0, #35	@ 0x23
 8003be6:	f000 fd76 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003bea:	2023      	movs	r0, #35	@ 0x23
 8003bec:	f000 fd8f 	bl	800470e <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8003bf0:	e139      	b.n	8003e66 <HAL_SPI_MspInit+0x3da>
  else if(hspi->Instance==SPI4)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a54      	ldr	r2, [pc, #336]	@ (8003d48 <HAL_SPI_MspInit+0x2bc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	f040 80ad 	bne.w	8003d58 <HAL_SPI_MspInit+0x2cc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	4b4b      	ldr	r3, [pc, #300]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c06:	4a4a      	ldr	r2, [pc, #296]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c08:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c0e:	4b48      	ldr	r3, [pc, #288]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c16:	623b      	str	r3, [r7, #32]
 8003c18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	4b44      	ldr	r3, [pc, #272]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a43      	ldr	r2, [pc, #268]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	61fb      	str	r3, [r7, #28]
 8003c34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c40:	f043 0302 	orr.w	r3, r3, #2
 8003c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c46:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <HAL_SPI_MspInit+0x2a4>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8003c52:	2302      	movs	r3, #2
 8003c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c56:	2302      	movs	r3, #2
 8003c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003c62:	2305      	movs	r3, #5
 8003c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003c66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4831      	ldr	r0, [pc, #196]	@ (8003d34 <HAL_SPI_MspInit+0x2a8>)
 8003c6e:	f001 f983 	bl	8004f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8003c72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c80:	2303      	movs	r3, #3
 8003c82:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003c84:	2306      	movs	r3, #6
 8003c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003c88:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	482f      	ldr	r0, [pc, #188]	@ (8003d4c <HAL_SPI_MspInit+0x2c0>)
 8003c90:	f001 f972 	bl	8004f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8003c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003ca6:	2306      	movs	r3, #6
 8003ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003caa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4826      	ldr	r0, [pc, #152]	@ (8003d4c <HAL_SPI_MspInit+0x2c0>)
 8003cb2:	f001 f961 	bl	8004f78 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8003cb6:	4b26      	ldr	r3, [pc, #152]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cb8:	4a26      	ldr	r2, [pc, #152]	@ (8003d54 <HAL_SPI_MspInit+0x2c8>)
 8003cba:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8003cbc:	4b24      	ldr	r3, [pc, #144]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cbe:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003cc2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc4:	4b22      	ldr	r3, [pc, #136]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cd6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003cde:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce6:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8003ce8:	4b19      	ldr	r3, [pc, #100]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cf0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003cf4:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cf6:	4b16      	ldr	r3, [pc, #88]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8003cfc:	4814      	ldr	r0, [pc, #80]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003cfe:	f000 fd4b 	bl	8004798 <HAL_DMA_Init>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_SPI_MspInit+0x280>
      Error_Handler();
 8003d08:	f7ff fe68 	bl	80039dc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a10      	ldr	r2, [pc, #64]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003d10:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003d12:	4a0f      	ldr	r2, [pc, #60]	@ (8003d50 <HAL_SPI_MspInit+0x2c4>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	203b      	movs	r0, #59	@ 0x3b
 8003d1e:	f000 fcda 	bl	80046d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003d22:	203b      	movs	r0, #59	@ 0x3b
 8003d24:	f000 fcf3 	bl	800470e <HAL_NVIC_EnableIRQ>
}
 8003d28:	e09d      	b.n	8003e66 <HAL_SPI_MspInit+0x3da>
 8003d2a:	bf00      	nop
 8003d2c:	40013000 	.word	0x40013000
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	200014a4 	.word	0x200014a4
 8003d3c:	40026410 	.word	0x40026410
 8003d40:	20001444 	.word	0x20001444
 8003d44:	40026440 	.word	0x40026440
 8003d48:	40013400 	.word	0x40013400
 8003d4c:	40020400 	.word	0x40020400
 8003d50:	20000a2c 	.word	0x20000a2c
 8003d54:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a44      	ldr	r2, [pc, #272]	@ (8003e70 <HAL_SPI_MspInit+0x3e4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	f040 8081 	bne.w	8003e66 <HAL_SPI_MspInit+0x3da>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	4b42      	ldr	r3, [pc, #264]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d6c:	4a41      	ldr	r2, [pc, #260]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d74:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d88:	4a3a      	ldr	r2, [pc, #232]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d90:	4b38      	ldr	r3, [pc, #224]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	4a33      	ldr	r2, [pc, #204]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003da6:	f043 0308 	orr.w	r3, r3, #8
 8003daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dac:	4b31      	ldr	r3, [pc, #196]	@ (8003e74 <HAL_SPI_MspInit+0x3e8>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8003db8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	633b      	str	r3, [r7, #48]	@ 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	637b      	str	r3, [r7, #52]	@ 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dca:	2306      	movs	r3, #6
 8003dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4828      	ldr	r0, [pc, #160]	@ (8003e78 <HAL_SPI_MspInit+0x3ec>)
 8003dd6:	f001 f8cf 	bl	8004f78 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = RHS_SPI_CS_Pin;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	4825      	ldr	r0, [pc, #148]	@ (8003e7c <HAL_SPI_MspInit+0x3f0>)
 8003de6:	f001 f8c7 	bl	8004f78 <HAL_GPIO_Init>
	  hdma_spi3_rx.Instance = DMA1_Stream0; // Adjust stream and channel as per your hardware
 8003dea:	4b25      	ldr	r3, [pc, #148]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003dec:	4a25      	ldr	r2, [pc, #148]	@ (8003e84 <HAL_SPI_MspInit+0x3f8>)
 8003dee:	601a      	str	r2, [r3, #0]
	  hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003df0:	4b23      	ldr	r3, [pc, #140]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	605a      	str	r2, [r3, #4]
	  hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df6:	4b22      	ldr	r3, [pc, #136]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
	  hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dfc:	4b20      	ldr	r3, [pc, #128]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	60da      	str	r2, [r3, #12]
	  hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e02:	4b1f      	ldr	r3, [pc, #124]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e08:	611a      	str	r2, [r3, #16]
	  hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
	  hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
	  hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	61da      	str	r2, [r3, #28]
	  hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003e1c:	4b18      	ldr	r3, [pc, #96]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e22:	621a      	str	r2, [r3, #32]
	  hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e24:	4b16      	ldr	r3, [pc, #88]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	@ 0x24
	  if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003e2a:	4815      	ldr	r0, [pc, #84]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e2c:	f000 fcb4 	bl	8004798 <HAL_DMA_Init>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_SPI_MspInit+0x3ae>
		  Error_Handler();
 8003e36:	f7ff fdd1 	bl	80039dc <Error_Handler>
	  __HAL_LINKDMA(hspi, hdmarx, hdma_spi3_rx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a10      	ldr	r2, [pc, #64]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003e40:	4a0f      	ldr	r2, [pc, #60]	@ (8003e80 <HAL_SPI_MspInit+0x3f4>)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6393      	str	r3, [r2, #56]	@ 0x38
	  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8003e46:	2200      	movs	r2, #0
 8003e48:	2105      	movs	r1, #5
 8003e4a:	200b      	movs	r0, #11
 8003e4c:	f000 fc43 	bl	80046d6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003e50:	200b      	movs	r0, #11
 8003e52:	f000 fc5c 	bl	800470e <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003e56:	2200      	movs	r2, #0
 8003e58:	2105      	movs	r1, #5
 8003e5a:	2033      	movs	r0, #51	@ 0x33
 8003e5c:	f000 fc3b 	bl	80046d6 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003e60:	2033      	movs	r0, #51	@ 0x33
 8003e62:	f000 fc54 	bl	800470e <HAL_NVIC_EnableIRQ>
}
 8003e66:	bf00      	nop
 8003e68:	3740      	adds	r7, #64	@ 0x40
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40003c00 	.word	0x40003c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40020800 	.word	0x40020800
 8003e7c:	40020c00 	.word	0x40020c00
 8003e80:	20000974 	.word	0x20000974
 8003e84:	40026010 	.word	0x40026010

08003e88 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <HAL_SPI_MspDeInit+0x80>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d114      	bne.n	8003ec4 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f0c <HAL_SPI_MspDeInit+0x84>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f0c <HAL_SPI_MspDeInit+0x84>)
 8003ea0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ea4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8003ea6:	21e0      	movs	r1, #224	@ 0xe0
 8003ea8:	4819      	ldr	r0, [pc, #100]	@ (8003f10 <HAL_SPI_MspDeInit+0x88>)
 8003eaa:	f001 f9e9 	bl	8005280 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fd1e 	bl	80048f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fd19 	bl	80048f4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003ec2:	e01d      	b.n	8003f00 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a12      	ldr	r2, [pc, #72]	@ (8003f14 <HAL_SPI_MspDeInit+0x8c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d118      	bne.n	8003f00 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8003ece:	4b0f      	ldr	r3, [pc, #60]	@ (8003f0c <HAL_SPI_MspDeInit+0x84>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8003f0c <HAL_SPI_MspDeInit+0x84>)
 8003ed4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ed8:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 8003eda:	2102      	movs	r1, #2
 8003edc:	480c      	ldr	r0, [pc, #48]	@ (8003f10 <HAL_SPI_MspDeInit+0x88>)
 8003ede:	f001 f9cf 	bl	8005280 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 8003ee2:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8003ee6:	480c      	ldr	r0, [pc, #48]	@ (8003f18 <HAL_SPI_MspDeInit+0x90>)
 8003ee8:	f001 f9ca 	bl	8005280 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fcff 	bl	80048f4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fcfa 	bl	80048f4 <HAL_DMA_DeInit>
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40013000 	.word	0x40013000
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40020000 	.word	0x40020000
 8003f14:	40013400 	.word	0x40013400
 8003f18:	40020400 	.word	0x40020400

08003f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	@ 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <HAL_UART_MspInit+0x84>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d12b      	bne.n	8003f96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	4a17      	ldr	r2, [pc, #92]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4e:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <HAL_UART_MspInit+0x88>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003f76:	230c      	movs	r3, #12
 8003f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f82:	2303      	movs	r3, #3
 8003f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f86:	2307      	movs	r3, #7
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8a:	f107 0314 	add.w	r3, r7, #20
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <HAL_UART_MspInit+0x8c>)
 8003f92:	f000 fff1 	bl	8004f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003f96:	bf00      	nop
 8003f98:	3728      	adds	r7, #40	@ 0x28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40004400 	.word	0x40004400
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40020000 	.word	0x40020000

08003fac <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8003fb0:	4802      	ldr	r0, [pc, #8]	@ (8003fbc <SPI1_IRQHandler+0x10>)
 8003fb2:	f002 fb87 	bl	80066c4 <HAL_SPI_IRQHandler>
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200013ec 	.word	0x200013ec

08003fc0 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <HAL_SPI_TxCpltCallback+0x3c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f107 020c 	add.w	r2, r7, #12
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f006 fd3c 	bl	800aa54 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_SPI_TxCpltCallback+0x32>
 8003fe2:	4b07      	ldr	r3, [pc, #28]	@ (8004000 <HAL_SPI_TxCpltCallback+0x40>)
 8003fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f3bf 8f4f 	dsb	sy
 8003fee:	f3bf 8f6f 	isb	sy
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20001504 	.word	0x20001504
 8004000:	e000ed04 	.word	0xe000ed04

08004004 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1c      	ldr	r2, [pc, #112]	@ (8004088 <HAL_SPI_RxCpltCallback+0x84>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d112      	bne.n	8004040 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <HAL_SPI_RxCpltCallback+0x88>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f107 020c 	add.w	r2, r7, #12
 8004022:	4611      	mov	r1, r2
 8004024:	4618      	mov	r0, r3
 8004026:	f006 fd15 	bl	800aa54 <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_SPI_RxCpltCallback+0x3c>
 8004030:	4b17      	ldr	r3, [pc, #92]	@ (8004090 <HAL_SPI_RxCpltCallback+0x8c>)
 8004032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a13      	ldr	r2, [pc, #76]	@ (8004094 <HAL_SPI_RxCpltCallback+0x90>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d119      	bne.n	800407e <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 800404a:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <HAL_SPI_RxCpltCallback+0x94>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	bfb8      	it	lt
 800405a:	425b      	neglt	r3, r3
 800405c:	b2da      	uxtb	r2, r3
 800405e:	4b0e      	ldr	r3, [pc, #56]	@ (8004098 <HAL_SPI_RxCpltCallback+0x94>)
 8004060:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_SPI_RxCpltCallback+0x94>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	01db      	lsls	r3, r3, #7
 800406a:	4a0c      	ldr	r2, [pc, #48]	@ (800409c <HAL_SPI_RxCpltCallback+0x98>)
 800406c:	4413      	add	r3, r2
 800406e:	2240      	movs	r2, #64	@ 0x40
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f002 f962 	bl	800633c <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8004078:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <HAL_SPI_RxCpltCallback+0x9c>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
	}
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40013000 	.word	0x40013000
 800408c:	20001504 	.word	0x20001504
 8004090:	e000ed04 	.word	0xe000ed04
 8004094:	40013400 	.word	0x40013400
 8004098:	200002a9 	.word	0x200002a9
 800409c:	200002ac 	.word	0x200002ac
 80040a0:	200002a8 	.word	0x200002a8

080040a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <NMI_Handler+0x4>

080040ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <HardFault_Handler+0x4>

080040b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <MemManage_Handler+0x4>

080040bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040c0:	bf00      	nop
 80040c2:	e7fd      	b.n	80040c0 <BusFault_Handler+0x4>

080040c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <UsageFault_Handler+0x4>

080040cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040de:	f000 f9b7 	bl	8004450 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80040e2:	f008 f84b 	bl	800c17c <xTaskGetSchedulerState>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80040ec:	f008 ff9c 	bl	800d028 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 80040f0:	f005 ffba 	bl	800a068 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8004102:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <EXTI15_10_IRQHandler+0x60>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410a:	2b00      	cmp	r3, #0
 800410c:	d011      	beq.n	8004132 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 800410e:	4b13      	ldr	r3, [pc, #76]	@ (800415c <EXTI15_10_IRQHandler+0x64>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <EXTI15_10_IRQHandler+0x64>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	f006 fc98 	bl	800aa54 <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8004124:	4b0e      	ldr	r3, [pc, #56]	@ (8004160 <EXTI15_10_IRQHandler+0x68>)
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	2202      	movs	r2, #2
 800412c:	480d      	ldr	r0, [pc, #52]	@ (8004164 <EXTI15_10_IRQHandler+0x6c>)
 800412e:	f008 fd9b 	bl	800cc68 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8004132:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004136:	f001 f9a1 	bl	800547c <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <EXTI15_10_IRQHandler+0x58>
 8004140:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <EXTI15_10_IRQHandler+0x70>)
 8004142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004146:	601a      	str	r2, [r3, #0]
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	f3bf 8f6f 	isb	sy

}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40013c00 	.word	0x40013c00
 800415c:	200013d0 	.word	0x200013d0
 8004160:	2000150c 	.word	0x2000150c
 8004164:	0800a369 	.word	0x0800a369
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004170:	4802      	ldr	r0, [pc, #8]	@ (800417c <DMA2_Stream0_IRQHandler+0x10>)
 8004172:	f000 fc97 	bl	8004aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200014a4 	.word	0x200014a4

08004180 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004184:	4802      	ldr	r0, [pc, #8]	@ (8004190 <DMA2_Stream2_IRQHandler+0x10>)
 8004186:	f000 fc8d 	bl	8004aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20001444 	.word	0x20001444

08004194 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8004198:	4802      	ldr	r0, [pc, #8]	@ (80041a4 <DMA2_Stream3_IRQHandler+0x10>)
 800419a:	f000 fc83 	bl	8004aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000a2c 	.word	0x20000a2c

080041a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
	return 1;
 80041ac:	2301      	movs	r3, #1
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_kill>:

int _kill(int pid, int sig)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041c2:	f017 f927 	bl	801b414 <__errno>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2216      	movs	r2, #22
 80041ca:	601a      	str	r2, [r3, #0]
	return -1;
 80041cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3708      	adds	r7, #8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_exit>:

void _exit (int status)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ffe7 	bl	80041b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041ea:	bf00      	nop
 80041ec:	e7fd      	b.n	80041ea <_exit+0x12>

080041ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b086      	sub	sp, #24
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	e00a      	b.n	8004216 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004200:	f3af 8000 	nop.w
 8004204:	4601      	mov	r1, r0
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	60ba      	str	r2, [r7, #8]
 800420c:	b2ca      	uxtb	r2, r1
 800420e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	429a      	cmp	r2, r3
 800421c:	dbf0      	blt.n	8004200 <_read+0x12>
	}

return len;
 800421e:	687b      	ldr	r3, [r7, #4]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e009      	b.n	800424e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	60ba      	str	r2, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fbb8 	bl	80039b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3301      	adds	r3, #1
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	429a      	cmp	r2, r3
 8004254:	dbf1      	blt.n	800423a <_write+0x12>
	}
	return len;
 8004256:	687b      	ldr	r3, [r7, #4]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_close>:

int _close(int file)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
	return -1;
 8004268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004288:	605a      	str	r2, [r3, #4]
	return 0;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_isatty>:

int _isatty(int file)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
	return 1;
 80042a0:	2301      	movs	r3, #1
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b085      	sub	sp, #20
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
	return 0;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	@ (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	@ (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	@ (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	@ (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f017 f88c 	bl	801b414 <__errno>
 80042fc:	4603      	mov	r3, r0
 80042fe:	220c      	movs	r2, #12
 8004300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004302:	f04f 33ff 	mov.w	r3, #4294967295
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	@ (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	@ (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4413      	add	r3, r2
 8004316:	4a05      	ldr	r2, [pc, #20]	@ (800432c <_sbrk+0x64>)
 8004318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20020000 	.word	0x20020000
 8004328:	00000400 	.word	0x00000400
 800432c:	20000a8c 	.word	0x20000a8c
 8004330:	20014058 	.word	0x20014058

08004334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004338:	4b06      	ldr	r3, [pc, #24]	@ (8004354 <SystemInit+0x20>)
 800433a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433e:	4a05      	ldr	r2, [pc, #20]	@ (8004354 <SystemInit+0x20>)
 8004340:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004358:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004390 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800435c:	480d      	ldr	r0, [pc, #52]	@ (8004394 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800435e:	490e      	ldr	r1, [pc, #56]	@ (8004398 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004360:	4a0e      	ldr	r2, [pc, #56]	@ (800439c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004364:	e002      	b.n	800436c <LoopCopyDataInit>

08004366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800436a:	3304      	adds	r3, #4

0800436c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800436c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800436e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004370:	d3f9      	bcc.n	8004366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004372:	4a0b      	ldr	r2, [pc, #44]	@ (80043a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004374:	4c0b      	ldr	r4, [pc, #44]	@ (80043a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004378:	e001      	b.n	800437e <LoopFillZerobss>

0800437a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800437a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800437c:	3204      	adds	r2, #4

0800437e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800437e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004380:	d3fb      	bcc.n	800437a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004382:	f7ff ffd7 	bl	8004334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004386:	f017 f84b 	bl	801b420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800438a:	f7ff f915 	bl	80035b8 <main>
  bx  lr    
 800438e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004398:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800439c:	0806ca3c 	.word	0x0806ca3c
  ldr r2, =_sbss
 80043a0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80043a4:	20014054 	.word	0x20014054

080043a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043a8:	e7fe      	b.n	80043a8 <ADC_IRQHandler>
	...

080043ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043b0:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <HAL_Init+0x40>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0d      	ldr	r2, [pc, #52]	@ (80043ec <HAL_Init+0x40>)
 80043b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043bc:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <HAL_Init+0x40>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0a      	ldr	r2, [pc, #40]	@ (80043ec <HAL_Init+0x40>)
 80043c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043c8:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <HAL_Init+0x40>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a07      	ldr	r2, [pc, #28]	@ (80043ec <HAL_Init+0x40>)
 80043ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043d4:	2003      	movs	r0, #3
 80043d6:	f000 f973 	bl	80046c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043da:	200f      	movs	r0, #15
 80043dc:	f000 f808 	bl	80043f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043e0:	f7ff fb02 	bl	80039e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023c00 	.word	0x40023c00

080043f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043f8:	4b12      	ldr	r3, [pc, #72]	@ (8004444 <HAL_InitTick+0x54>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <HAL_InitTick+0x58>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004406:	fbb3 f3f1 	udiv	r3, r3, r1
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f999 	bl	8004746 <HAL_SYSTICK_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e00e      	b.n	800443c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b0f      	cmp	r3, #15
 8004422:	d80a      	bhi.n	800443a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004424:	2200      	movs	r2, #0
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	f000 f953 	bl	80046d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004430:	4a06      	ldr	r2, [pc, #24]	@ (800444c <HAL_InitTick+0x5c>)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	200000a0 	.word	0x200000a0
 8004448:	200000a8 	.word	0x200000a8
 800444c:	200000a4 	.word	0x200000a4

08004450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_IncTick+0x20>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <HAL_IncTick+0x24>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4413      	add	r3, r2
 8004460:	4a04      	ldr	r2, [pc, #16]	@ (8004474 <HAL_IncTick+0x24>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	200000a8 	.word	0x200000a8
 8004474:	20000a90 	.word	0x20000a90

08004478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b03      	ldr	r3, [pc, #12]	@ (800448c <HAL_GetTick+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000a90 	.word	0x20000a90

08004490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7ff ffee 	bl	8004478 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d005      	beq.n	80044b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044aa:	4b0a      	ldr	r3, [pc, #40]	@ (80044d4 <HAL_Delay+0x44>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044b6:	bf00      	nop
 80044b8:	f7ff ffde 	bl	8004478 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d8f7      	bhi.n	80044b8 <HAL_Delay+0x28>
  {
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	200000a8 	.word	0x200000a8

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	@ (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	@ (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	@ (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db12      	blt.n	80045b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	490a      	ldr	r1, [pc, #40]	@ (80045bc <__NVIC_DisableIRQ+0x44>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	3320      	adds	r3, #32
 80045a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045a4:	f3bf 8f4f 	dsb	sy
}
 80045a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045aa:	f3bf 8f6f 	isb	sy
}
 80045ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	6039      	str	r1, [r7, #0]
 80045ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0a      	blt.n	80045ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	490c      	ldr	r1, [pc, #48]	@ (800460c <__NVIC_SetPriority+0x4c>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	0112      	lsls	r2, r2, #4
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	440b      	add	r3, r1
 80045e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e8:	e00a      	b.n	8004600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	4908      	ldr	r1, [pc, #32]	@ (8004610 <__NVIC_SetPriority+0x50>)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	3b04      	subs	r3, #4
 80045f8:	0112      	lsls	r2, r2, #4
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	440b      	add	r3, r1
 80045fe:	761a      	strb	r2, [r3, #24]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	e000e100 	.word	0xe000e100
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004614:	b480      	push	{r7}
 8004616:	b089      	sub	sp, #36	@ 0x24
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	f1c3 0307 	rsb	r3, r3, #7
 800462e:	2b04      	cmp	r3, #4
 8004630:	bf28      	it	cs
 8004632:	2304      	movcs	r3, #4
 8004634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3304      	adds	r3, #4
 800463a:	2b06      	cmp	r3, #6
 800463c:	d902      	bls.n	8004644 <NVIC_EncodePriority+0x30>
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	3b03      	subs	r3, #3
 8004642:	e000      	b.n	8004646 <NVIC_EncodePriority+0x32>
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	401a      	ands	r2, r3
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800465c:	f04f 31ff 	mov.w	r1, #4294967295
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	fa01 f303 	lsl.w	r3, r1, r3
 8004666:	43d9      	mvns	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	4313      	orrs	r3, r2
         );
}
 800466e:	4618      	mov	r0, r3
 8004670:	3724      	adds	r7, #36	@ 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3b01      	subs	r3, #1
 8004688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800468c:	d301      	bcc.n	8004692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468e:	2301      	movs	r3, #1
 8004690:	e00f      	b.n	80046b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004692:	4a0a      	ldr	r2, [pc, #40]	@ (80046bc <SysTick_Config+0x40>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800469a:	210f      	movs	r1, #15
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f7ff ff8e 	bl	80045c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <SysTick_Config+0x40>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046aa:	4b04      	ldr	r3, [pc, #16]	@ (80046bc <SysTick_Config+0x40>)
 80046ac:	2207      	movs	r2, #7
 80046ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000e010 	.word	0xe000e010

080046c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ff05 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b086      	sub	sp, #24
 80046da:	af00      	add	r7, sp, #0
 80046dc:	4603      	mov	r3, r0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	607a      	str	r2, [r7, #4]
 80046e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e8:	f7ff ff1a 	bl	8004520 <__NVIC_GetPriorityGrouping>
 80046ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff8e 	bl	8004614 <NVIC_EncodePriority>
 80046f8:	4602      	mov	r2, r0
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	4611      	mov	r1, r2
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff5d 	bl	80045c0 <__NVIC_SetPriority>
}
 8004706:	bf00      	nop
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	4603      	mov	r3, r0
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff ff0d 	bl	800453c <__NVIC_EnableIRQ>
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	4603      	mov	r3, r0
 8004732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff1d 	bl	8004578 <__NVIC_DisableIRQ>
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f7ff ff94 	bl	800467c <SysTick_Config>
 8004754:	4603      	mov	r3, r0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d106      	bne.n	800477c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a08      	ldr	r2, [pc, #32]	@ (8004794 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004774:	f043 0304 	orr.w	r3, r3, #4
 8004778:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800477a:	e005      	b.n	8004788 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a04      	ldr	r2, [pc, #16]	@ (8004794 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004782:	f023 0304 	bic.w	r3, r3, #4
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	e000e010 	.word	0xe000e010

08004798 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047a4:	f7ff fe68 	bl	8004478 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e099      	b.n	80048e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d4:	e00f      	b.n	80047f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047d6:	f7ff fe4f 	bl	8004478 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d908      	bls.n	80047f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e078      	b.n	80048e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1e8      	bne.n	80047d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4b38      	ldr	r3, [pc, #224]	@ (80048f0 <HAL_DMA_Init+0x158>)
 8004810:	4013      	ands	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004822:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484c:	2b04      	cmp	r3, #4
 800484e:	d107      	bne.n	8004860 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004858:	4313      	orrs	r3, r2
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	695b      	ldr	r3, [r3, #20]
 800486e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0307 	bic.w	r3, r3, #7
 8004876:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	2b04      	cmp	r3, #4
 8004888:	d117      	bne.n	80048ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 faef 	bl	8004e80 <DMA_CheckFifoParam>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2240      	movs	r2, #64	@ 0x40
 80048ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80048b6:	2301      	movs	r3, #1
 80048b8:	e016      	b.n	80048e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 faa6 	bl	8004e14 <DMA_CalcBaseAndBitshift>
 80048c8:	4603      	mov	r3, r0
 80048ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	223f      	movs	r2, #63	@ 0x3f
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	f010803f 	.word	0xf010803f

080048f4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e050      	b.n	80049a8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d101      	bne.n	8004916 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004912:	2302      	movs	r3, #2
 8004914:	e048      	b.n	80049a8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2200      	movs	r2, #0
 8004944:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2221      	movs	r2, #33	@ 0x21
 8004954:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa5c 	bl	8004e14 <DMA_CalcBaseAndBitshift>
 800495c:	4603      	mov	r3, r0
 800495e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004988:	223f      	movs	r2, #63	@ 0x3f
 800498a:	409a      	lsls	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_DMA_Start_IT+0x26>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e040      	b.n	8004a58 <HAL_DMA_Start_IT+0xa8>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d12f      	bne.n	8004a4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f9da 	bl	8004db8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	223f      	movs	r2, #63	@ 0x3f
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0216 	orr.w	r2, r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0208 	orr.w	r2, r2, #8
 8004a36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e005      	b.n	8004a56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
 8004a54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d004      	beq.n	8004a7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2280      	movs	r2, #128	@ 0x80
 8004a78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e00c      	b.n	8004a98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2205      	movs	r2, #5
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0201 	bic.w	r2, r2, #1
 8004a94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ab0:	4b8e      	ldr	r3, [pc, #568]	@ (8004cec <HAL_DMA_IRQHandler+0x248>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a8e      	ldr	r2, [pc, #568]	@ (8004cf0 <HAL_DMA_IRQHandler+0x24c>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ace:	2208      	movs	r2, #8
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01a      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d013      	beq.n	8004b10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	2208      	movs	r2, #8
 8004afe:	409a      	lsls	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b14:	2201      	movs	r2, #1
 8004b16:	409a      	lsls	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d012      	beq.n	8004b46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00b      	beq.n	8004b46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	2201      	movs	r2, #1
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	f043 0202 	orr.w	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d012      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00b      	beq.n	8004b7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b68:	2204      	movs	r2, #4
 8004b6a:	409a      	lsls	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	2210      	movs	r2, #16
 8004b82:	409a      	lsls	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d043      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d03c      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b9e:	2210      	movs	r2, #16
 8004ba0:	409a      	lsls	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d018      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d024      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	4798      	blx	r3
 8004bd2:	e01f      	b.n	8004c14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
 8004be4:	e016      	b.n	8004c14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0208 	bic.w	r2, r2, #8
 8004c02:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	2220      	movs	r2, #32
 8004c1a:	409a      	lsls	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 808f 	beq.w	8004d44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8087 	beq.w	8004d44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d136      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0216 	bic.w	r2, r2, #22
 8004c5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695a      	ldr	r2, [r3, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <HAL_DMA_IRQHandler+0x1da>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 0208 	bic.w	r2, r2, #8
 8004c8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c92:	223f      	movs	r2, #63	@ 0x3f
 8004c94:	409a      	lsls	r2, r3
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d07e      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	4798      	blx	r3
        }
        return;
 8004cba:	e079      	b.n	8004db0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d031      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
 8004ce8:	e02c      	b.n	8004d44 <HAL_DMA_IRQHandler+0x2a0>
 8004cea:	bf00      	nop
 8004cec:	200000a0 	.word	0x200000a0
 8004cf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d023      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	4798      	blx	r3
 8004d04:	e01e      	b.n	8004d44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10f      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0210 	bic.w	r2, r2, #16
 8004d22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d032      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d022      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d307      	bcc.n	8004d8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f2      	bne.n	8004d70 <HAL_DMA_IRQHandler+0x2cc>
 8004d8a:	e000      	b.n	8004d8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
 8004dae:	e000      	b.n	8004db2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004db0:	bf00      	nop
    }
  }
}
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004dd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	2b40      	cmp	r3, #64	@ 0x40
 8004de4:	d108      	bne.n	8004df8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004df6:	e007      	b.n	8004e08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	3b10      	subs	r3, #16
 8004e24:	4a14      	ldr	r2, [pc, #80]	@ (8004e78 <DMA_CalcBaseAndBitshift+0x64>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e2e:	4a13      	ldr	r2, [pc, #76]	@ (8004e7c <DMA_CalcBaseAndBitshift+0x68>)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d909      	bls.n	8004e56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	1d1a      	adds	r2, r3, #4
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e54:	e007      	b.n	8004e66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	aaaaaaab 	.word	0xaaaaaaab
 8004e7c:	0802086c 	.word	0x0802086c

08004e80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11f      	bne.n	8004eda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d856      	bhi.n	8004f4e <DMA_CheckFifoParam+0xce>
 8004ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea8 <DMA_CheckFifoParam+0x28>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004ecb 	.word	0x08004ecb
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004f4f 	.word	0x08004f4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d046      	beq.n	8004f52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec8:	e043      	b.n	8004f52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ed2:	d140      	bne.n	8004f56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed8:	e03d      	b.n	8004f56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ee2:	d121      	bne.n	8004f28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d837      	bhi.n	8004f5a <DMA_CheckFifoParam+0xda>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <DMA_CheckFifoParam+0x70>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f07 	.word	0x08004f07
 8004ef8:	08004f01 	.word	0x08004f01
 8004efc:	08004f19 	.word	0x08004f19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	e030      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d025      	beq.n	8004f5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f16:	e022      	b.n	8004f5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f20:	d11f      	bne.n	8004f62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f26:	e01c      	b.n	8004f62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d903      	bls.n	8004f36 <DMA_CheckFifoParam+0xb6>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d003      	beq.n	8004f3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f34:	e018      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
      break;
 8004f3a:	e015      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f4c:	e00b      	b.n	8004f66 <DMA_CheckFifoParam+0xe6>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e00a      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;
 8004f52:	bf00      	nop
 8004f54:	e008      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;
 8004f56:	bf00      	nop
 8004f58:	e006      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;
 8004f5a:	bf00      	nop
 8004f5c:	e004      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;
 8004f5e:	bf00      	nop
 8004f60:	e002      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f62:	bf00      	nop
 8004f64:	e000      	b.n	8004f68 <DMA_CheckFifoParam+0xe8>
      break;
 8004f66:	bf00      	nop
    }
  } 
  
  return status; 
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop

08004f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	@ 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	e159      	b.n	8005248 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f94:	2201      	movs	r2, #1
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	f040 8148 	bne.w	8005242 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d005      	beq.n	8004fca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d130      	bne.n	800502c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68da      	ldr	r2, [r3, #12]
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005000:	2201      	movs	r2, #1
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 0201 	and.w	r2, r3, #1
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b03      	cmp	r3, #3
 8005036:	d017      	beq.n	8005068 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	2203      	movs	r2, #3
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4313      	orrs	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f003 0303 	and.w	r3, r3, #3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d123      	bne.n	80050bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	08da      	lsrs	r2, r3, #3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3208      	adds	r2, #8
 800507c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	220f      	movs	r2, #15
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	08da      	lsrs	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3208      	adds	r2, #8
 80050b6:	69b9      	ldr	r1, [r7, #24]
 80050b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	2203      	movs	r2, #3
 80050c8:	fa02 f303 	lsl.w	r3, r2, r3
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f003 0203 	and.w	r2, r3, #3
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a2 	beq.w	8005242 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	4b57      	ldr	r3, [pc, #348]	@ (8005260 <HAL_GPIO_Init+0x2e8>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	4a56      	ldr	r2, [pc, #344]	@ (8005260 <HAL_GPIO_Init+0x2e8>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800510c:	6453      	str	r3, [r2, #68]	@ 0x44
 800510e:	4b54      	ldr	r3, [pc, #336]	@ (8005260 <HAL_GPIO_Init+0x2e8>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005116:	60fb      	str	r3, [r7, #12]
 8005118:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800511a:	4a52      	ldr	r2, [pc, #328]	@ (8005264 <HAL_GPIO_Init+0x2ec>)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	3302      	adds	r3, #2
 8005122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005126:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	220f      	movs	r2, #15
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a49      	ldr	r2, [pc, #292]	@ (8005268 <HAL_GPIO_Init+0x2f0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d019      	beq.n	800517a <HAL_GPIO_Init+0x202>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a48      	ldr	r2, [pc, #288]	@ (800526c <HAL_GPIO_Init+0x2f4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d013      	beq.n	8005176 <HAL_GPIO_Init+0x1fe>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a47      	ldr	r2, [pc, #284]	@ (8005270 <HAL_GPIO_Init+0x2f8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00d      	beq.n	8005172 <HAL_GPIO_Init+0x1fa>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a46      	ldr	r2, [pc, #280]	@ (8005274 <HAL_GPIO_Init+0x2fc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d007      	beq.n	800516e <HAL_GPIO_Init+0x1f6>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a45      	ldr	r2, [pc, #276]	@ (8005278 <HAL_GPIO_Init+0x300>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d101      	bne.n	800516a <HAL_GPIO_Init+0x1f2>
 8005166:	2304      	movs	r3, #4
 8005168:	e008      	b.n	800517c <HAL_GPIO_Init+0x204>
 800516a:	2307      	movs	r3, #7
 800516c:	e006      	b.n	800517c <HAL_GPIO_Init+0x204>
 800516e:	2303      	movs	r3, #3
 8005170:	e004      	b.n	800517c <HAL_GPIO_Init+0x204>
 8005172:	2302      	movs	r3, #2
 8005174:	e002      	b.n	800517c <HAL_GPIO_Init+0x204>
 8005176:	2301      	movs	r3, #1
 8005178:	e000      	b.n	800517c <HAL_GPIO_Init+0x204>
 800517a:	2300      	movs	r3, #0
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	f002 0203 	and.w	r2, r2, #3
 8005182:	0092      	lsls	r2, r2, #2
 8005184:	4093      	lsls	r3, r2
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4313      	orrs	r3, r2
 800518a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800518c:	4935      	ldr	r1, [pc, #212]	@ (8005264 <HAL_GPIO_Init+0x2ec>)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	089b      	lsrs	r3, r3, #2
 8005192:	3302      	adds	r3, #2
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800519a:	4b38      	ldr	r3, [pc, #224]	@ (800527c <HAL_GPIO_Init+0x304>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	43db      	mvns	r3, r3
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	4013      	ands	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051be:	4a2f      	ldr	r2, [pc, #188]	@ (800527c <HAL_GPIO_Init+0x304>)
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051c4:	4b2d      	ldr	r3, [pc, #180]	@ (800527c <HAL_GPIO_Init+0x304>)
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e8:	4a24      	ldr	r2, [pc, #144]	@ (800527c <HAL_GPIO_Init+0x304>)
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051ee:	4b23      	ldr	r3, [pc, #140]	@ (800527c <HAL_GPIO_Init+0x304>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	43db      	mvns	r3, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	4013      	ands	r3, r2
 80051fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005212:	4a1a      	ldr	r2, [pc, #104]	@ (800527c <HAL_GPIO_Init+0x304>)
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005218:	4b18      	ldr	r3, [pc, #96]	@ (800527c <HAL_GPIO_Init+0x304>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	43db      	mvns	r3, r3
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4013      	ands	r3, r2
 8005226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800523c:	4a0f      	ldr	r2, [pc, #60]	@ (800527c <HAL_GPIO_Init+0x304>)
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3301      	adds	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	f67f aea2 	bls.w	8004f94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3724      	adds	r7, #36	@ 0x24
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
 8005264:	40013800 	.word	0x40013800
 8005268:	40020000 	.word	0x40020000
 800526c:	40020400 	.word	0x40020400
 8005270:	40020800 	.word	0x40020800
 8005274:	40020c00 	.word	0x40020c00
 8005278:	40021000 	.word	0x40021000
 800527c:	40013c00 	.word	0x40013c00

08005280 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	e0bb      	b.n	8005414 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800529c:	2201      	movs	r2, #1
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	4013      	ands	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	f040 80ab 	bne.w	800540e <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80052b8:	4a5c      	ldr	r2, [pc, #368]	@ (800542c <HAL_GPIO_DeInit+0x1ac>)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	089b      	lsrs	r3, r3, #2
 80052be:	3302      	adds	r3, #2
 80052c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	220f      	movs	r2, #15
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4013      	ands	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a54      	ldr	r2, [pc, #336]	@ (8005430 <HAL_GPIO_DeInit+0x1b0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d019      	beq.n	8005316 <HAL_GPIO_DeInit+0x96>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a53      	ldr	r2, [pc, #332]	@ (8005434 <HAL_GPIO_DeInit+0x1b4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d013      	beq.n	8005312 <HAL_GPIO_DeInit+0x92>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a52      	ldr	r2, [pc, #328]	@ (8005438 <HAL_GPIO_DeInit+0x1b8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d00d      	beq.n	800530e <HAL_GPIO_DeInit+0x8e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a51      	ldr	r2, [pc, #324]	@ (800543c <HAL_GPIO_DeInit+0x1bc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <HAL_GPIO_DeInit+0x8a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a50      	ldr	r2, [pc, #320]	@ (8005440 <HAL_GPIO_DeInit+0x1c0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_GPIO_DeInit+0x86>
 8005302:	2304      	movs	r3, #4
 8005304:	e008      	b.n	8005318 <HAL_GPIO_DeInit+0x98>
 8005306:	2307      	movs	r3, #7
 8005308:	e006      	b.n	8005318 <HAL_GPIO_DeInit+0x98>
 800530a:	2303      	movs	r3, #3
 800530c:	e004      	b.n	8005318 <HAL_GPIO_DeInit+0x98>
 800530e:	2302      	movs	r3, #2
 8005310:	e002      	b.n	8005318 <HAL_GPIO_DeInit+0x98>
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <HAL_GPIO_DeInit+0x98>
 8005316:	2300      	movs	r3, #0
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	f002 0203 	and.w	r2, r2, #3
 800531e:	0092      	lsls	r2, r2, #2
 8005320:	4093      	lsls	r3, r2
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	429a      	cmp	r2, r3
 8005326:	d132      	bne.n	800538e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005328:	4b46      	ldr	r3, [pc, #280]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	43db      	mvns	r3, r3
 8005330:	4944      	ldr	r1, [pc, #272]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 8005332:	4013      	ands	r3, r2
 8005334:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005336:	4b43      	ldr	r3, [pc, #268]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	43db      	mvns	r3, r3
 800533e:	4941      	ldr	r1, [pc, #260]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 8005340:	4013      	ands	r3, r2
 8005342:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005344:	4b3f      	ldr	r3, [pc, #252]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	43db      	mvns	r3, r3
 800534c:	493d      	ldr	r1, [pc, #244]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 800534e:	4013      	ands	r3, r2
 8005350:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005352:	4b3c      	ldr	r3, [pc, #240]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	43db      	mvns	r3, r3
 800535a:	493a      	ldr	r1, [pc, #232]	@ (8005444 <HAL_GPIO_DeInit+0x1c4>)
 800535c:	4013      	ands	r3, r2
 800535e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	220f      	movs	r2, #15
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005370:	4a2e      	ldr	r2, [pc, #184]	@ (800542c <HAL_GPIO_DeInit+0x1ac>)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	3302      	adds	r3, #2
 8005378:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	43da      	mvns	r2, r3
 8005380:	482a      	ldr	r0, [pc, #168]	@ (800542c <HAL_GPIO_DeInit+0x1ac>)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	089b      	lsrs	r3, r3, #2
 8005386:	400a      	ands	r2, r1
 8005388:	3302      	adds	r3, #2
 800538a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	2103      	movs	r1, #3
 8005398:	fa01 f303 	lsl.w	r3, r1, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	401a      	ands	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	08da      	lsrs	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3208      	adds	r2, #8
 80053ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	220f      	movs	r2, #15
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	08d2      	lsrs	r2, r2, #3
 80053c4:	4019      	ands	r1, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68da      	ldr	r2, [r3, #12]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	2103      	movs	r1, #3
 80053d8:	fa01 f303 	lsl.w	r3, r1, r3
 80053dc:	43db      	mvns	r3, r3
 80053de:	401a      	ands	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	2101      	movs	r1, #1
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	fa01 f303 	lsl.w	r3, r1, r3
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689a      	ldr	r2, [r3, #8]
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	2103      	movs	r1, #3
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	401a      	ands	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	3301      	adds	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	f67f af40 	bls.w	800529c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800541c:	bf00      	nop
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	40013800 	.word	0x40013800
 8005430:	40020000 	.word	0x40020000
 8005434:	40020400 	.word	0x40020400
 8005438:	40020800 	.word	0x40020800
 800543c:	40020c00 	.word	0x40020c00
 8005440:	40021000 	.word	0x40021000
 8005444:	40013c00 	.word	0x40013c00

08005448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
 8005454:	4613      	mov	r3, r2
 8005456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005458:	787b      	ldrb	r3, [r7, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005464:	e003      	b.n	800546e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005466:	887b      	ldrh	r3, [r7, #2]
 8005468:	041a      	lsls	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	619a      	str	r2, [r3, #24]
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	4013      	ands	r3, r2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d006      	beq.n	80054a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005492:	4a05      	ldr	r2, [pc, #20]	@ (80054a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 f806 	bl	80054ac <HAL_GPIO_EXTI_Callback>
  }
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40013c00 	.word	0x40013c00

080054ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	4603      	mov	r3, r0
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
	...

080054c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e267      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d075      	beq.n	80055ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e2:	4b88      	ldr	r3, [pc, #544]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d00c      	beq.n	8005508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054ee:	4b85      	ldr	r3, [pc, #532]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d112      	bne.n	8005520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054fa:	4b82      	ldr	r3, [pc, #520]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005506:	d10b      	bne.n	8005520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005508:	4b7e      	ldr	r3, [pc, #504]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d05b      	beq.n	80055cc <HAL_RCC_OscConfig+0x108>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d157      	bne.n	80055cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e242      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005528:	d106      	bne.n	8005538 <HAL_RCC_OscConfig+0x74>
 800552a:	4b76      	ldr	r3, [pc, #472]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a75      	ldr	r2, [pc, #468]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	e01d      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x98>
 8005542:	4b70      	ldr	r3, [pc, #448]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a6f      	ldr	r2, [pc, #444]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4b6d      	ldr	r3, [pc, #436]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a6c      	ldr	r2, [pc, #432]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0xb0>
 800555c:	4b69      	ldr	r3, [pc, #420]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a68      	ldr	r2, [pc, #416]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	4b66      	ldr	r3, [pc, #408]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a65      	ldr	r2, [pc, #404]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 800556e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d013      	beq.n	80055a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fe ff7c 	bl	8004478 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005584:	f7fe ff78 	bl	8004478 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	@ 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e207      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005596:	4b5b      	ldr	r3, [pc, #364]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCC_OscConfig+0xc0>
 80055a2:	e014      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe ff68 	bl	8004478 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ac:	f7fe ff64 	bl	8004478 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	@ 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1f3      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055be:	4b51      	ldr	r3, [pc, #324]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0xe8>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d063      	beq.n	80056a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055da:	4b4a      	ldr	r3, [pc, #296]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e6:	4b47      	ldr	r3, [pc, #284]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d11c      	bne.n	800562c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b44      	ldr	r3, [pc, #272]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fe:	4b41      	ldr	r3, [pc, #260]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x152>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1c7      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005616:	4b3b      	ldr	r3, [pc, #236]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4937      	ldr	r1, [pc, #220]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562a:	e03a      	b.n	80056a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_RCC_OscConfig+0x244>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fe ff1d 	bl	8004478 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fe ff19 	bl	8004478 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e1a8      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	4b2b      	ldr	r3, [pc, #172]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005660:	4b28      	ldr	r3, [pc, #160]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4925      	ldr	r1, [pc, #148]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e015      	b.n	80056a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005676:	4b24      	ldr	r3, [pc, #144]	@ (8005708 <HAL_RCC_OscConfig+0x244>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fe fefc 	bl	8004478 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005684:	f7fe fef8 	bl	8004478 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e187      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d036      	beq.n	800571c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b6:	4b15      	ldr	r3, [pc, #84]	@ (800570c <HAL_RCC_OscConfig+0x248>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fe fedc 	bl	8004478 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fe fed8 	bl	8004478 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e167      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005704 <HAL_RCC_OscConfig+0x240>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x200>
 80056e2:	e01b      	b.n	800571c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e4:	4b09      	ldr	r3, [pc, #36]	@ (800570c <HAL_RCC_OscConfig+0x248>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ea:	f7fe fec5 	bl	8004478 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f0:	e00e      	b.n	8005710 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fe fec1 	bl	8004478 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d907      	bls.n	8005710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e150      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
 8005704:	40023800 	.word	0x40023800
 8005708:	42470000 	.word	0x42470000
 800570c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005710:	4b88      	ldr	r3, [pc, #544]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ea      	bne.n	80056f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8097 	beq.w	8005858 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572e:	4b81      	ldr	r3, [pc, #516]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	4b7d      	ldr	r3, [pc, #500]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	4a7c      	ldr	r2, [pc, #496]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005748:	6413      	str	r3, [r2, #64]	@ 0x40
 800574a:	4b7a      	ldr	r3, [pc, #488]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575a:	4b77      	ldr	r3, [pc, #476]	@ (8005938 <HAL_RCC_OscConfig+0x474>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005766:	4b74      	ldr	r3, [pc, #464]	@ (8005938 <HAL_RCC_OscConfig+0x474>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a73      	ldr	r2, [pc, #460]	@ (8005938 <HAL_RCC_OscConfig+0x474>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005772:	f7fe fe81 	bl	8004478 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fe fe7d 	bl	8004478 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e10c      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578c:	4b6a      	ldr	r3, [pc, #424]	@ (8005938 <HAL_RCC_OscConfig+0x474>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x2ea>
 80057a0:	4b64      	ldr	r3, [pc, #400]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a4:	4a63      	ldr	r2, [pc, #396]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ac:	e01c      	b.n	80057e8 <HAL_RCC_OscConfig+0x324>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x30c>
 80057b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0x324>
 80057d0:	4b58      	ldr	r3, [pc, #352]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d4:	4a57      	ldr	r2, [pc, #348]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	@ 0x70
 80057dc:	4b55      	ldr	r3, [pc, #340]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e0:	4a54      	ldr	r2, [pc, #336]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f0:	f7fe fe42 	bl	8004478 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	e00a      	b.n	800580e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f8:	f7fe fe3e 	bl	8004478 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e0cb      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	4b49      	ldr	r3, [pc, #292]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ee      	beq.n	80057f8 <HAL_RCC_OscConfig+0x334>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800581c:	f7fe fe2c 	bl	8004478 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005822:	e00a      	b.n	800583a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005824:	f7fe fe28 	bl	8004478 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0b5      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583a:	4b3e      	ldr	r3, [pc, #248]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ee      	bne.n	8005824 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d105      	bne.n	8005858 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584c:	4b39      	ldr	r3, [pc, #228]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	4a38      	ldr	r2, [pc, #224]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80a1 	beq.w	80059a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005862:	4b34      	ldr	r3, [pc, #208]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b08      	cmp	r3, #8
 800586c:	d05c      	beq.n	8005928 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d141      	bne.n	80058fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005876:	4b31      	ldr	r3, [pc, #196]	@ (800593c <HAL_RCC_OscConfig+0x478>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800587c:	f7fe fdfc 	bl	8004478 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fe fdf8 	bl	8004478 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e087      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005896:	4b27      	ldr	r3, [pc, #156]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	491b      	ldr	r1, [pc, #108]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058cc:	4b1b      	ldr	r3, [pc, #108]	@ (800593c <HAL_RCC_OscConfig+0x478>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058d2:	f7fe fdd1 	bl	8004478 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058da:	f7fe fdcd 	bl	8004478 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e05c      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ec:	4b11      	ldr	r3, [pc, #68]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x416>
 80058f8:	e054      	b.n	80059a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b10      	ldr	r3, [pc, #64]	@ (800593c <HAL_RCC_OscConfig+0x478>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005900:	f7fe fdba 	bl	8004478 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005908:	f7fe fdb6 	bl	8004478 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e045      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	4b06      	ldr	r3, [pc, #24]	@ (8005934 <HAL_RCC_OscConfig+0x470>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x444>
 8005926:	e03d      	b.n	80059a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d107      	bne.n	8005940 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e038      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
 8005934:	40023800 	.word	0x40023800
 8005938:	40007000 	.word	0x40007000
 800593c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005940:	4b1b      	ldr	r3, [pc, #108]	@ (80059b0 <HAL_RCC_OscConfig+0x4ec>)
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d028      	beq.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005958:	429a      	cmp	r2, r3
 800595a:	d121      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	429a      	cmp	r2, r3
 8005968:	d11a      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005978:	4293      	cmp	r3, r2
 800597a:	d111      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	3b01      	subs	r3, #1
 800598a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800598c:	429a      	cmp	r2, r3
 800598e:	d107      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800599c:	429a      	cmp	r2, r3
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e0cc      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b68      	ldr	r3, [pc, #416]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90c      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b65      	ldr	r3, [pc, #404]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b63      	ldr	r3, [pc, #396]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e0b8      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d020      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a08:	4b59      	ldr	r3, [pc, #356]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a58      	ldr	r2, [pc, #352]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a20:	4b53      	ldr	r3, [pc, #332]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a52      	ldr	r2, [pc, #328]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b50      	ldr	r3, [pc, #320]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	494d      	ldr	r1, [pc, #308]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d044      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a52:	4b47      	ldr	r3, [pc, #284]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d119      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e07f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d003      	beq.n	8005a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d107      	bne.n	8005a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a72:	4b3f      	ldr	r3, [pc, #252]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e06f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a82:	4b3b      	ldr	r3, [pc, #236]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e067      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a92:	4b37      	ldr	r3, [pc, #220]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0203 	bic.w	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4934      	ldr	r1, [pc, #208]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005aa4:	f7fe fce8 	bl	8004478 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	e00a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aac:	f7fe fce4 	bl	8004478 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e04f      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 020c 	and.w	r2, r3, #12
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1eb      	bne.n	8005aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad4:	4b25      	ldr	r3, [pc, #148]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d20c      	bcs.n	8005afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae2:	4b22      	ldr	r3, [pc, #136]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b20      	ldr	r3, [pc, #128]	@ (8005b6c <HAL_RCC_ClockConfig+0x1b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0307 	and.w	r3, r3, #7
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d001      	beq.n	8005afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e032      	b.n	8005b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d008      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b08:	4b19      	ldr	r3, [pc, #100]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4916      	ldr	r1, [pc, #88]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d009      	beq.n	8005b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b26:	4b12      	ldr	r3, [pc, #72]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	490e      	ldr	r1, [pc, #56]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b3a:	f000 f821 	bl	8005b80 <HAL_RCC_GetSysClockFreq>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <HAL_RCC_ClockConfig+0x1bc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	490a      	ldr	r1, [pc, #40]	@ (8005b74 <HAL_RCC_ClockConfig+0x1c0>)
 8005b4c:	5ccb      	ldrb	r3, [r1, r3]
 8005b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b52:	4a09      	ldr	r2, [pc, #36]	@ (8005b78 <HAL_RCC_ClockConfig+0x1c4>)
 8005b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b56:	4b09      	ldr	r3, [pc, #36]	@ (8005b7c <HAL_RCC_ClockConfig+0x1c8>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fc48 	bl	80043f0 <HAL_InitTick>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	40023c00 	.word	0x40023c00
 8005b70:	40023800 	.word	0x40023800
 8005b74:	08020854 	.word	0x08020854
 8005b78:	200000a0 	.word	0x200000a0
 8005b7c:	200000a4 	.word	0x200000a4

08005b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b84:	b094      	sub	sp, #80	@ 0x50
 8005b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b90:	2300      	movs	r3, #0
 8005b92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b98:	4b79      	ldr	r3, [pc, #484]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 030c 	and.w	r3, r3, #12
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d00d      	beq.n	8005bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	f200 80e1 	bhi.w	8005d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d003      	beq.n	8005bba <HAL_RCC_GetSysClockFreq+0x3a>
 8005bb2:	e0db      	b.n	8005d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb4:	4b73      	ldr	r3, [pc, #460]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005bb8:	e0db      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bba:	4b73      	ldr	r3, [pc, #460]	@ (8005d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8005bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bbe:	e0d8      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bca:	4b6d      	ldr	r3, [pc, #436]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d063      	beq.n	8005c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	099b      	lsrs	r3, r3, #6
 8005bdc:	2200      	movs	r2, #0
 8005bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bea:	2300      	movs	r3, #0
 8005bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	462b      	mov	r3, r5
 8005bf6:	f04f 0000 	mov.w	r0, #0
 8005bfa:	f04f 0100 	mov.w	r1, #0
 8005bfe:	0159      	lsls	r1, r3, #5
 8005c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c04:	0150      	lsls	r0, r2, #5
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	1a51      	subs	r1, r2, r1
 8005c0e:	6139      	str	r1, [r7, #16]
 8005c10:	4629      	mov	r1, r5
 8005c12:	eb63 0301 	sbc.w	r3, r3, r1
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c24:	4659      	mov	r1, fp
 8005c26:	018b      	lsls	r3, r1, #6
 8005c28:	4651      	mov	r1, sl
 8005c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c2e:	4651      	mov	r1, sl
 8005c30:	018a      	lsls	r2, r1, #6
 8005c32:	4651      	mov	r1, sl
 8005c34:	ebb2 0801 	subs.w	r8, r2, r1
 8005c38:	4659      	mov	r1, fp
 8005c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c52:	4690      	mov	r8, r2
 8005c54:	4699      	mov	r9, r3
 8005c56:	4623      	mov	r3, r4
 8005c58:	eb18 0303 	adds.w	r3, r8, r3
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	462b      	mov	r3, r5
 8005c60:	eb49 0303 	adc.w	r3, r9, r3
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c72:	4629      	mov	r1, r5
 8005c74:	024b      	lsls	r3, r1, #9
 8005c76:	4621      	mov	r1, r4
 8005c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	024a      	lsls	r2, r1, #9
 8005c80:	4610      	mov	r0, r2
 8005c82:	4619      	mov	r1, r3
 8005c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c86:	2200      	movs	r2, #0
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c90:	f7fa ffa2 	bl	8000bd8 <__aeabi_uldivmod>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	4613      	mov	r3, r2
 8005c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c9c:	e058      	b.n	8005d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9e:	4b38      	ldr	r3, [pc, #224]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	099b      	lsrs	r3, r3, #6
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	4611      	mov	r1, r2
 8005caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cae:	623b      	str	r3, [r7, #32]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	f04f 0000 	mov.w	r0, #0
 8005cc0:	f04f 0100 	mov.w	r1, #0
 8005cc4:	0159      	lsls	r1, r3, #5
 8005cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cca:	0150      	lsls	r0, r2, #5
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8005cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	00eb      	lsls	r3, r5, #3
 8005d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d06:	00e2      	lsls	r2, r4, #3
 8005d08:	4614      	mov	r4, r2
 8005d0a:	461d      	mov	r5, r3
 8005d0c:	4643      	mov	r3, r8
 8005d0e:	18e3      	adds	r3, r4, r3
 8005d10:	603b      	str	r3, [r7, #0]
 8005d12:	464b      	mov	r3, r9
 8005d14:	eb45 0303 	adc.w	r3, r5, r3
 8005d18:	607b      	str	r3, [r7, #4]
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	f04f 0300 	mov.w	r3, #0
 8005d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d26:	4629      	mov	r1, r5
 8005d28:	028b      	lsls	r3, r1, #10
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d30:	4621      	mov	r1, r4
 8005d32:	028a      	lsls	r2, r1, #10
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
 8005d3e:	61fa      	str	r2, [r7, #28]
 8005d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d44:	f7fa ff48 	bl	8000bd8 <__aeabi_uldivmod>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d50:	4b0b      	ldr	r3, [pc, #44]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	0c1b      	lsrs	r3, r3, #16
 8005d56:	f003 0303 	and.w	r3, r3, #3
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d6a:	e002      	b.n	8005d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d6c:	4b05      	ldr	r3, [pc, #20]	@ (8005d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3750      	adds	r7, #80	@ 0x50
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7e:	bf00      	nop
 8005d80:	40023800 	.word	0x40023800
 8005d84:	00f42400 	.word	0x00f42400
 8005d88:	007a1200 	.word	0x007a1200

08005d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d90:	4b03      	ldr	r3, [pc, #12]	@ (8005da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d92:	681b      	ldr	r3, [r3, #0]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	200000a0 	.word	0x200000a0

08005da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005da8:	f7ff fff0 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dac:	4602      	mov	r2, r0
 8005dae:	4b05      	ldr	r3, [pc, #20]	@ (8005dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	0a9b      	lsrs	r3, r3, #10
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	4903      	ldr	r1, [pc, #12]	@ (8005dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005dba:	5ccb      	ldrb	r3, [r1, r3]
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	40023800 	.word	0x40023800
 8005dc8:	08020864 	.word	0x08020864

08005dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dd0:	f7ff ffdc 	bl	8005d8c <HAL_RCC_GetHCLKFreq>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	0b5b      	lsrs	r3, r3, #13
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	4903      	ldr	r1, [pc, #12]	@ (8005df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005de2:	5ccb      	ldrb	r3, [r1, r3]
 8005de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40023800 	.word	0x40023800
 8005df0:	08020864 	.word	0x08020864

08005df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e07b      	b.n	8005efe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e16:	d009      	beq.n	8005e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	61da      	str	r2, [r3, #28]
 8005e1e:	e005      	b.n	8005e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fd fe20 	bl	8003a8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e74:	431a      	orrs	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eb0:	ea42 0103 	orr.w	r1, r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	699b      	ldr	r3, [r3, #24]
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	f003 0104 	and.w	r1, r3, #4
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	f003 0210 	and.w	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b082      	sub	sp, #8
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e01a      	b.n	8005f4e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f2e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7fd ffa9 	bl	8003e88 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b088      	sub	sp, #32
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_SPI_Transmit+0x22>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e126      	b.n	80061c6 <HAL_SPI_Transmit+0x270>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f80:	f7fe fa7a 	bl	8004478 <HAL_GetTick>
 8005f84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d002      	beq.n	8005f9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f96:	2302      	movs	r3, #2
 8005f98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f9a:	e10b      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <HAL_SPI_Transmit+0x52>
 8005fa2:	88fb      	ldrh	r3, [r7, #6]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005fac:	e102      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2203      	movs	r2, #3
 8005fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff4:	d10f      	bne.n	8006016 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006014:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d007      	beq.n	8006034 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800603c:	d14b      	bne.n	80060d6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_SPI_Transmit+0xf6>
 8006046:	8afb      	ldrh	r3, [r7, #22]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d13e      	bne.n	80060ca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006070:	e02b      	b.n	80060ca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d112      	bne.n	80060a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006084:	881a      	ldrh	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80060a4:	e011      	b.n	80060ca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060a6:	f7fe f9e7 	bl	8004478 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d803      	bhi.n	80060be <HAL_SPI_Transmit+0x168>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060bc:	d102      	bne.n	80060c4 <HAL_SPI_Transmit+0x16e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d102      	bne.n	80060ca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060c8:	e074      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1ce      	bne.n	8006072 <HAL_SPI_Transmit+0x11c>
 80060d4:	e04c      	b.n	8006170 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SPI_Transmit+0x18e>
 80060de:	8afb      	ldrh	r3, [r7, #22]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d140      	bne.n	8006166 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	7812      	ldrb	r2, [r2, #0]
 80060f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800610a:	e02c      	b.n	8006166 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b02      	cmp	r3, #2
 8006118:	d113      	bne.n	8006142 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	7812      	ldrb	r2, [r2, #0]
 8006126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006140:	e011      	b.n	8006166 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006142:	f7fe f999 	bl	8004478 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d803      	bhi.n	800615a <HAL_SPI_Transmit+0x204>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d102      	bne.n	8006160 <HAL_SPI_Transmit+0x20a>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006164:	e026      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1cd      	bne.n	800610c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fe07 	bl	8006d88 <SPI_EndRxTxTransaction>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d002      	beq.n	8006186 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	77fb      	strb	r3, [r7, #31]
 80061b0:	e000      	b.n	80061b4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80061b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80061c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	4613      	mov	r3, r2
 80061dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_SPI_Transmit_DMA+0x20>
 80061ec:	2302      	movs	r3, #2
 80061ee:	e09b      	b.n	8006328 <HAL_SPI_Transmit_DMA+0x158>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d002      	beq.n	800620a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006204:	2302      	movs	r3, #2
 8006206:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006208:	e089      	b.n	800631e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d002      	beq.n	8006216 <HAL_SPI_Transmit_DMA+0x46>
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d102      	bne.n	800621c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	75fb      	strb	r3, [r7, #23]
    goto error;
 800621a:	e080      	b.n	800631e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2203      	movs	r2, #3
 8006220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	88fa      	ldrh	r2, [r7, #6]
 800623a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006262:	d10f      	bne.n	8006284 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006282:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006288:	4a29      	ldr	r2, [pc, #164]	@ (8006330 <HAL_SPI_Transmit_DMA+0x160>)
 800628a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006290:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <HAL_SPI_Transmit_DMA+0x164>)
 8006292:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006298:	4a27      	ldr	r2, [pc, #156]	@ (8006338 <HAL_SPI_Transmit_DMA+0x168>)
 800629a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a0:	2200      	movs	r2, #0
 80062a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ac:	4619      	mov	r1, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062ba:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062bc:	f7fe fb78 	bl	80049b0 <HAL_DMA_Start_IT>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ca:	f043 0210 	orr.w	r2, r3, #16
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80062de:	e01e      	b.n	800631e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ea:	2b40      	cmp	r3, #64	@ 0x40
 80062ec:	d007      	beq.n	80062fe <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0220 	orr.w	r2, r2, #32
 800630c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f042 0202 	orr.w	r2, r2, #2
 800631c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	08006af1 	.word	0x08006af1
 8006334:	08006911 	.word	0x08006911
 8006338:	08006b45 	.word	0x08006b45

0800633c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	4613      	mov	r3, r2
 8006348:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d110      	bne.n	8006378 <HAL_SPI_Receive_DMA+0x3c>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800635e:	d10b      	bne.n	8006378 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 f8a6 	bl	80064c0 <HAL_SPI_TransmitReceive_DMA>
 8006374:	4603      	mov	r3, r0
 8006376:	e09b      	b.n	80064b0 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_SPI_Receive_DMA+0x4a>
 8006382:	2302      	movs	r3, #2
 8006384:	e094      	b.n	80064b0 <HAL_SPI_Receive_DMA+0x174>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800639e:	e082      	b.n	80064a6 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_SPI_Receive_DMA+0x70>
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063b0:	e079      	b.n	80064a6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2204      	movs	r2, #4
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	88fa      	ldrh	r2, [r7, #6]
 80063d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->TxXferSize  = 0U;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f2:	d10f      	bne.n	8006414 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006402:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006412:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006418:	4a27      	ldr	r2, [pc, #156]	@ (80064b8 <HAL_SPI_Receive_DMA+0x17c>)
 800641a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006420:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <HAL_SPI_Receive_DMA+0x180>)
 8006422:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006428:	2200      	movs	r2, #0
 800642a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	330c      	adds	r3, #12
 8006436:	4619      	mov	r1, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006442:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006444:	f7fe fab4 	bl	80049b0 <HAL_DMA_Start_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f043 0210 	orr.w	r2, r3, #16
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 8006466:	e01e      	b.n	80064a6 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b40      	cmp	r3, #64	@ 0x40
 8006474:	d007      	beq.n	8006486 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006484:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f042 0220 	orr.w	r2, r2, #32
 8006494:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	080069b9 	.word	0x080069b9
 80064bc:	08006b45 	.word	0x08006b45

080064c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80064dc:	2302      	movs	r3, #2
 80064de:	e0e3      	b.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80064f6:	7dbb      	ldrb	r3, [r7, #22]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d00d      	beq.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x58>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006502:	d106      	bne.n	8006512 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <HAL_SPI_TransmitReceive_DMA+0x52>
 800650c:	7dbb      	ldrb	r3, [r7, #22]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d002      	beq.n	8006518 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006512:	2302      	movs	r3, #2
 8006514:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006516:	e0c2      	b.n	800669e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006524:	887b      	ldrh	r3, [r7, #2]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800652e:	e0b6      	b.n	800669e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b04      	cmp	r3, #4
 800653a:	d003      	beq.n	8006544 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2205      	movs	r2, #5
 8006540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	887a      	ldrh	r2, [r7, #2]
 800655a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	887a      	ldrh	r2, [r7, #2]
 8006566:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	887a      	ldrh	r2, [r7, #2]
 800656c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b04      	cmp	r3, #4
 8006584:	d108      	bne.n	8006598 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658a:	4a49      	ldr	r2, [pc, #292]	@ (80066b0 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800658c:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006592:	4a48      	ldr	r2, [pc, #288]	@ (80066b4 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006594:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006596:	e007      	b.n	80065a8 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800659c:	4a46      	ldr	r2, [pc, #280]	@ (80066b8 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800659e:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065a4:	4a45      	ldr	r2, [pc, #276]	@ (80066bc <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80065a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ac:	4a44      	ldr	r2, [pc, #272]	@ (80066c0 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80065ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b4:	2200      	movs	r2, #0
 80065b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	330c      	adds	r3, #12
 80065c2:	4619      	mov	r1, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065d0:	f7fe f9ee 	bl	80049b0 <HAL_DMA_Start_IT>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00c      	beq.n	80065f4 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065de:	f043 0210 	orr.w	r2, r3, #16
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 80065f2:	e054      	b.n	800669e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006608:	2200      	movs	r2, #0
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006610:	2200      	movs	r2, #0
 8006612:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006618:	2200      	movs	r2, #0
 800661a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006620:	2200      	movs	r2, #0
 8006622:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662c:	4619      	mov	r1, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	330c      	adds	r3, #12
 8006634:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800663c:	f7fe f9b8 	bl	80049b0 <HAL_DMA_Start_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00c      	beq.n	8006660 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f043 0210 	orr.w	r2, r3, #16
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    goto error;
 800665e:	e01e      	b.n	800669e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d007      	beq.n	800667e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800667c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0220 	orr.w	r2, r2, #32
 800668c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0202 	orr.w	r2, r2, #2
 800669c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	08006b0d 	.word	0x08006b0d
 80066b4:	080069b9 	.word	0x080069b9
 80066b8:	08006b29 	.word	0x08006b29
 80066bc:	08006a61 	.word	0x08006a61
 80066c0:	08006b45 	.word	0x08006b45

080066c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b088      	sub	sp, #32
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10e      	bne.n	8006704 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
    return;
 8006702:	e0ce      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <HAL_SPI_IRQHandler+0x5e>
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006714:	2b00      	cmp	r3, #0
 8006716:	d004      	beq.n	8006722 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
    return;
 8006720:	e0bf      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <HAL_SPI_IRQHandler+0x7e>
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80b0 	beq.w	80068a2 <HAL_SPI_IRQHandler+0x1de>
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80aa 	beq.w	80068a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d023      	beq.n	80067a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b03      	cmp	r3, #3
 8006762:	d011      	beq.n	8006788 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f043 0204 	orr.w	r2, r3, #4
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	e00b      	b.n	80067a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006788:	2300      	movs	r3, #0
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	693b      	ldr	r3, [r7, #16]
        return;
 800679e:	e080      	b.n	80068a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d014      	beq.n	80067d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067b6:	2300      	movs	r3, #0
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00c      	beq.n	80067f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e2:	f043 0208 	orr.w	r2, r3, #8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067ea:	2300      	movs	r3, #0
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d04f      	beq.n	80068a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685a      	ldr	r2, [r3, #4]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800680e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_SPI_IRQHandler+0x168>
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d034      	beq.n	8006896 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f022 0203 	bic.w	r2, r2, #3
 800683a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006840:	2b00      	cmp	r3, #0
 8006842:	d011      	beq.n	8006868 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006848:	4a17      	ldr	r2, [pc, #92]	@ (80068a8 <HAL_SPI_IRQHandler+0x1e4>)
 800684a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f905 	bl	8004a60 <HAL_DMA_Abort_IT>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006860:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686c:	2b00      	cmp	r3, #0
 800686e:	d016      	beq.n	800689e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006874:	4a0c      	ldr	r2, [pc, #48]	@ (80068a8 <HAL_SPI_IRQHandler+0x1e4>)
 8006876:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe f8ef 	bl	8004a60 <HAL_DMA_Abort_IT>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800688c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006894:	e003      	b.n	800689e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f830 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800689c:	e000      	b.n	80068a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800689e:	bf00      	nop
    return;
 80068a0:	bf00      	nop
  }
}
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	08006b85 	.word	0x08006b85

080068ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691e:	f7fd fdab 	bl	8004478 <HAL_GetTick>
 8006922:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800692e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006932:	d03b      	beq.n	80069ac <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0220 	bic.w	r2, r2, #32
 8006942:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 0202 	bic.w	r2, r2, #2
 8006952:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	2164      	movs	r1, #100	@ 0x64
 8006958:	6978      	ldr	r0, [r7, #20]
 800695a:	f000 fa15 	bl	8006d88 <SPI_EndRxTxTransaction>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006968:	f043 0220 	orr.w	r2, r3, #32
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006978:	2300      	movs	r3, #0
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	60fb      	str	r3, [r7, #12]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2200      	movs	r2, #0
 8006992:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069a4:	6978      	ldr	r0, [r7, #20]
 80069a6:	f7ff ffa9 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069aa:	e002      	b.n	80069b2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80069ac:	6978      	ldr	r0, [r7, #20]
 80069ae:	f7fd fb07 	bl	8003fc0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c6:	f7fd fd57 	bl	8004478 <HAL_GetTick>
 80069ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069da:	d03b      	beq.n	8006a54 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0220 	bic.w	r2, r2, #32
 80069ea:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10d      	bne.n	8006a10 <SPI_DMAReceiveCplt+0x58>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069fc:	d108      	bne.n	8006a10 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f022 0203 	bic.w	r2, r2, #3
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	e007      	b.n	8006a20 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 0201 	bic.w	r2, r2, #1
 8006a1e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	2164      	movs	r1, #100	@ 0x64
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f949 	bl	8006cbc <SPI_EndRxTransaction>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2220      	movs	r2, #32
 8006a34:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    hspi->RxXferCount = 0U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ff55 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a52:	e002      	b.n	8006a5a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f7fd fad5 	bl	8004004 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a6e:	f7fd fd03 	bl	8004478 <HAL_GetTick>
 8006a72:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a82:	d02f      	beq.n	8006ae4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0220 	bic.w	r2, r2, #32
 8006a92:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	2164      	movs	r1, #100	@ 0x64
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f975 	bl	8006d88 <SPI_EndRxTxTransaction>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0203 	bic.w	r2, r2, #3
 8006abe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->RxXferCount = 0U;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f7ff ff0d 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006ae2:	e002      	b.n	8006aea <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fee1 	bl	80068ac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006afc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fede 	bl	80068c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff feda 	bl	80068d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f7ff fed6 	bl	80068e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0203 	bic.w	r2, r2, #3
 8006b60:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	f043 0210 	orr.w	r2, r3, #16
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff fec0 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff feac 	bl	80068fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bbc:	f7fd fc5c 	bl	8004478 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4413      	add	r3, r2
 8006bca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bcc:	f7fd fc54 	bl	8004478 <HAL_GetTick>
 8006bd0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bd2:	4b39      	ldr	r3, [pc, #228]	@ (8006cb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	015b      	lsls	r3, r3, #5
 8006bd8:	0d1b      	lsrs	r3, r3, #20
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	fb02 f303 	mul.w	r3, r2, r3
 8006be0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be2:	e054      	b.n	8006c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bea:	d050      	beq.n	8006c8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bec:	f7fd fc44 	bl	8004478 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d902      	bls.n	8006c02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d13d      	bne.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c1a:	d111      	bne.n	8006c40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c24:	d004      	beq.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2e:	d107      	bne.n	8006c40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c48:	d10f      	bne.n	8006c6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e017      	b.n	8006cae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	4013      	ands	r3, r2
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d19b      	bne.n	8006be4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	200000a0 	.word	0x200000a0

08006cbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cd0:	d111      	bne.n	8006cf6 <SPI_EndRxTransaction+0x3a>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cda:	d004      	beq.n	8006ce6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce4:	d107      	bne.n	8006cf6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cf4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cfe:	d12a      	bne.n	8006d56 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d08:	d012      	beq.n	8006d30 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	@ 0x80
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff ff49 	bl	8006bac <SPI_WaitFlagStateUntilTimeout>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02d      	beq.n	8006d7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e026      	b.n	8006d7e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	2101      	movs	r1, #1
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff ff36 	bl	8006bac <SPI_WaitFlagStateUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01a      	beq.n	8006d7c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e013      	b.n	8006d7e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2101      	movs	r1, #1
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7ff ff23 	bl	8006bac <SPI_WaitFlagStateUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d007      	beq.n	8006d7c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d70:	f043 0220 	orr.w	r2, r3, #32
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e000      	b.n	8006d7e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b088      	sub	sp, #32
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d94:	4b1b      	ldr	r3, [pc, #108]	@ (8006e04 <SPI_EndRxTxTransaction+0x7c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1b      	ldr	r2, [pc, #108]	@ (8006e08 <SPI_EndRxTxTransaction+0x80>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	0d5b      	lsrs	r3, r3, #21
 8006da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006db2:	d112      	bne.n	8006dda <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2180      	movs	r1, #128	@ 0x80
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7ff fef4 	bl	8006bac <SPI_WaitFlagStateUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d016      	beq.n	8006df8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dce:	f043 0220 	orr.w	r2, r3, #32
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	3b01      	subs	r3, #1
 8006de4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df0:	2b80      	cmp	r3, #128	@ 0x80
 8006df2:	d0f2      	beq.n	8006dda <SPI_EndRxTxTransaction+0x52>
 8006df4:	e000      	b.n	8006df8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006df6:	bf00      	nop
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3718      	adds	r7, #24
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	200000a0 	.word	0x200000a0
 8006e08:	165e9f81 	.word	0x165e9f81

08006e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e03f      	b.n	8006e9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d106      	bne.n	8006e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7fd f872 	bl	8003f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2224      	movs	r2, #36	@ 0x24
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f929 	bl	80070a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	691a      	ldr	r2, [r3, #16]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	695a      	ldr	r2, [r3, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2220      	movs	r2, #32
 8006e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b08a      	sub	sp, #40	@ 0x28
 8006eaa:	af02      	add	r7, sp, #8
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d17c      	bne.n	8006fc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_UART_Transmit+0x2c>
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e075      	b.n	8006fc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_UART_Transmit+0x3e>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e06e      	b.n	8006fc2 <HAL_UART_Transmit+0x11c>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2221      	movs	r2, #33	@ 0x21
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006efa:	f7fd fabd 	bl	8004478 <HAL_GetTick>
 8006efe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	88fa      	ldrh	r2, [r7, #6]
 8006f0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f14:	d108      	bne.n	8006f28 <HAL_UART_Transmit+0x82>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d104      	bne.n	8006f28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e003      	b.n	8006f30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8006f38:	e02a      	b.n	8006f90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2200      	movs	r2, #0
 8006f42:	2180      	movs	r1, #128	@ 0x80
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f840 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e036      	b.n	8006fc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10b      	bne.n	8006f72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	e007      	b.n	8006f82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1cf      	bne.n	8006f3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2140      	movs	r1, #64	@ 0x40
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f810 	bl	8006fca <UART_WaitOnFlagUntilTimeout>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e006      	b.n	8006fc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	e000      	b.n	8006fc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006fc0:	2302      	movs	r3, #2
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3720      	adds	r7, #32
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b090      	sub	sp, #64	@ 0x40
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	60b9      	str	r1, [r7, #8]
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fda:	e050      	b.n	800707e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe2:	d04c      	beq.n	800707e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x30>
 8006fea:	f7fd fa45 	bl	8004478 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d241      	bcs.n	800707e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8007010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800701a:	637a      	str	r2, [r7, #52]	@ 0x34
 800701c:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e5      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3314      	adds	r3, #20
 8007034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	e853 3f00 	ldrex	r3, [r3]
 800703c:	613b      	str	r3, [r7, #16]
   return(result);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f023 0301 	bic.w	r3, r3, #1
 8007044:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3314      	adds	r3, #20
 800704c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800704e:	623a      	str	r2, [r7, #32]
 8007050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007052:	69f9      	ldr	r1, [r7, #28]
 8007054:	6a3a      	ldr	r2, [r7, #32]
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	61bb      	str	r3, [r7, #24]
   return(result);
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e5      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e00f      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	4013      	ands	r3, r2
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	429a      	cmp	r2, r3
 800708c:	bf0c      	ite	eq
 800708e:	2301      	moveq	r3, #1
 8007090:	2300      	movne	r3, #0
 8007092:	b2db      	uxtb	r3, r3
 8007094:	461a      	mov	r2, r3
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	429a      	cmp	r2, r3
 800709a:	d09f      	beq.n	8006fdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3740      	adds	r7, #64	@ 0x40
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070ac:	b0c0      	sub	sp, #256	@ 0x100
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	68d9      	ldr	r1, [r3, #12]
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	ea40 0301 	orr.w	r3, r0, r1
 80070d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007100:	f021 010c 	bic.w	r1, r1, #12
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800710e:	430b      	orrs	r3, r1
 8007110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007122:	6999      	ldr	r1, [r3, #24]
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	ea40 0301 	orr.w	r3, r0, r1
 800712e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b8f      	ldr	r3, [pc, #572]	@ (8007374 <UART_SetConfig+0x2cc>)
 8007138:	429a      	cmp	r2, r3
 800713a:	d005      	beq.n	8007148 <UART_SetConfig+0xa0>
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b8d      	ldr	r3, [pc, #564]	@ (8007378 <UART_SetConfig+0x2d0>)
 8007144:	429a      	cmp	r2, r3
 8007146:	d104      	bne.n	8007152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007148:	f7fe fe40 	bl	8005dcc <HAL_RCC_GetPCLK2Freq>
 800714c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007150:	e003      	b.n	800715a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007152:	f7fe fe27 	bl	8005da4 <HAL_RCC_GetPCLK1Freq>
 8007156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007164:	f040 810c 	bne.w	8007380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800717a:	4622      	mov	r2, r4
 800717c:	462b      	mov	r3, r5
 800717e:	1891      	adds	r1, r2, r2
 8007180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007182:	415b      	adcs	r3, r3
 8007184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800718a:	4621      	mov	r1, r4
 800718c:	eb12 0801 	adds.w	r8, r2, r1
 8007190:	4629      	mov	r1, r5
 8007192:	eb43 0901 	adc.w	r9, r3, r1
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071aa:	4690      	mov	r8, r2
 80071ac:	4699      	mov	r9, r3
 80071ae:	4623      	mov	r3, r4
 80071b0:	eb18 0303 	adds.w	r3, r8, r3
 80071b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071b8:	462b      	mov	r3, r5
 80071ba:	eb49 0303 	adc.w	r3, r9, r3
 80071be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071d6:	460b      	mov	r3, r1
 80071d8:	18db      	adds	r3, r3, r3
 80071da:	653b      	str	r3, [r7, #80]	@ 0x50
 80071dc:	4613      	mov	r3, r2
 80071de:	eb42 0303 	adc.w	r3, r2, r3
 80071e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80071e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071ec:	f7f9 fcf4 	bl	8000bd8 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b61      	ldr	r3, [pc, #388]	@ (800737c <UART_SetConfig+0x2d4>)
 80071f6:	fba3 2302 	umull	r2, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	011c      	lsls	r4, r3, #4
 80071fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800720c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	1891      	adds	r1, r2, r2
 8007216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007218:	415b      	adcs	r3, r3
 800721a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007220:	4641      	mov	r1, r8
 8007222:	eb12 0a01 	adds.w	sl, r2, r1
 8007226:	4649      	mov	r1, r9
 8007228:	eb43 0b01 	adc.w	fp, r3, r1
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800723c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007240:	4692      	mov	sl, r2
 8007242:	469b      	mov	fp, r3
 8007244:	4643      	mov	r3, r8
 8007246:	eb1a 0303 	adds.w	r3, sl, r3
 800724a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800724e:	464b      	mov	r3, r9
 8007250:	eb4b 0303 	adc.w	r3, fp, r3
 8007254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	643b      	str	r3, [r7, #64]	@ 0x40
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800727e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007282:	f7f9 fca9 	bl	8000bd8 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4611      	mov	r1, r2
 800728c:	4b3b      	ldr	r3, [pc, #236]	@ (800737c <UART_SetConfig+0x2d4>)
 800728e:	fba3 2301 	umull	r2, r3, r3, r1
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	@ 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072a2:	4b36      	ldr	r3, [pc, #216]	@ (800737c <UART_SetConfig+0x2d4>)
 80072a4:	fba3 2302 	umull	r2, r3, r3, r2
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072b0:	441c      	add	r4, r3
 80072b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	1891      	adds	r1, r2, r2
 80072ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072cc:	415b      	adcs	r3, r3
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072d4:	4641      	mov	r1, r8
 80072d6:	1851      	adds	r1, r2, r1
 80072d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80072da:	4649      	mov	r1, r9
 80072dc:	414b      	adcs	r3, r1
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072ec:	4659      	mov	r1, fp
 80072ee:	00cb      	lsls	r3, r1, #3
 80072f0:	4651      	mov	r1, sl
 80072f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072f6:	4651      	mov	r1, sl
 80072f8:	00ca      	lsls	r2, r1, #3
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	4642      	mov	r2, r8
 8007302:	189b      	adds	r3, r3, r2
 8007304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007308:	464b      	mov	r3, r9
 800730a:	460a      	mov	r2, r1
 800730c:	eb42 0303 	adc.w	r3, r2, r3
 8007310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007328:	460b      	mov	r3, r1
 800732a:	18db      	adds	r3, r3, r3
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	4613      	mov	r3, r2
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800733a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800733e:	f7f9 fc4b 	bl	8000bd8 <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <UART_SetConfig+0x2d4>)
 8007348:	fba3 1302 	umull	r1, r3, r3, r2
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	2164      	movs	r1, #100	@ 0x64
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	3332      	adds	r3, #50	@ 0x32
 800735a:	4a08      	ldr	r2, [pc, #32]	@ (800737c <UART_SetConfig+0x2d4>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	f003 0207 	and.w	r2, r3, #7
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4422      	add	r2, r4
 800736e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007370:	e106      	b.n	8007580 <UART_SetConfig+0x4d8>
 8007372:	bf00      	nop
 8007374:	40011000 	.word	0x40011000
 8007378:	40011400 	.word	0x40011400
 800737c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007384:	2200      	movs	r2, #0
 8007386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800738a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800738e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007392:	4642      	mov	r2, r8
 8007394:	464b      	mov	r3, r9
 8007396:	1891      	adds	r1, r2, r2
 8007398:	6239      	str	r1, [r7, #32]
 800739a:	415b      	adcs	r3, r3
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
 800739e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073a2:	4641      	mov	r1, r8
 80073a4:	1854      	adds	r4, r2, r1
 80073a6:	4649      	mov	r1, r9
 80073a8:	eb43 0501 	adc.w	r5, r3, r1
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	00eb      	lsls	r3, r5, #3
 80073b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ba:	00e2      	lsls	r2, r4, #3
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	4643      	mov	r3, r8
 80073c2:	18e3      	adds	r3, r4, r3
 80073c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c8:	464b      	mov	r3, r9
 80073ca:	eb45 0303 	adc.w	r3, r5, r3
 80073ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073ee:	4629      	mov	r1, r5
 80073f0:	008b      	lsls	r3, r1, #2
 80073f2:	4621      	mov	r1, r4
 80073f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073f8:	4621      	mov	r1, r4
 80073fa:	008a      	lsls	r2, r1, #2
 80073fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007400:	f7f9 fbea 	bl	8000bd8 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4b60      	ldr	r3, [pc, #384]	@ (800758c <UART_SetConfig+0x4e4>)
 800740a:	fba3 2302 	umull	r2, r3, r3, r2
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	011c      	lsls	r4, r3, #4
 8007412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007416:	2200      	movs	r2, #0
 8007418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800741c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007424:	4642      	mov	r2, r8
 8007426:	464b      	mov	r3, r9
 8007428:	1891      	adds	r1, r2, r2
 800742a:	61b9      	str	r1, [r7, #24]
 800742c:	415b      	adcs	r3, r3
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007434:	4641      	mov	r1, r8
 8007436:	1851      	adds	r1, r2, r1
 8007438:	6139      	str	r1, [r7, #16]
 800743a:	4649      	mov	r1, r9
 800743c:	414b      	adcs	r3, r1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800744c:	4659      	mov	r1, fp
 800744e:	00cb      	lsls	r3, r1, #3
 8007450:	4651      	mov	r1, sl
 8007452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007456:	4651      	mov	r1, sl
 8007458:	00ca      	lsls	r2, r1, #3
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	4603      	mov	r3, r0
 8007460:	4642      	mov	r2, r8
 8007462:	189b      	adds	r3, r3, r2
 8007464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007468:	464b      	mov	r3, r9
 800746a:	460a      	mov	r2, r1
 800746c:	eb42 0303 	adc.w	r3, r2, r3
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800747e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800748c:	4649      	mov	r1, r9
 800748e:	008b      	lsls	r3, r1, #2
 8007490:	4641      	mov	r1, r8
 8007492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007496:	4641      	mov	r1, r8
 8007498:	008a      	lsls	r2, r1, #2
 800749a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800749e:	f7f9 fb9b 	bl	8000bd8 <__aeabi_uldivmod>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	4b38      	ldr	r3, [pc, #224]	@ (800758c <UART_SetConfig+0x4e4>)
 80074aa:	fba3 2301 	umull	r2, r3, r3, r1
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	2264      	movs	r2, #100	@ 0x64
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	1acb      	subs	r3, r1, r3
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	3332      	adds	r3, #50	@ 0x32
 80074bc:	4a33      	ldr	r2, [pc, #204]	@ (800758c <UART_SetConfig+0x4e4>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074c8:	441c      	add	r4, r3
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80074d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80074d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	1891      	adds	r1, r2, r2
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	415b      	adcs	r3, r3
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074e8:	4641      	mov	r1, r8
 80074ea:	1851      	adds	r1, r2, r1
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	4649      	mov	r1, r9
 80074f0:	414b      	adcs	r3, r1
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007500:	4659      	mov	r1, fp
 8007502:	00cb      	lsls	r3, r1, #3
 8007504:	4651      	mov	r1, sl
 8007506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800750a:	4651      	mov	r1, sl
 800750c:	00ca      	lsls	r2, r1, #3
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	4603      	mov	r3, r0
 8007514:	4642      	mov	r2, r8
 8007516:	189b      	adds	r3, r3, r2
 8007518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800751a:	464b      	mov	r3, r9
 800751c:	460a      	mov	r2, r1
 800751e:	eb42 0303 	adc.w	r3, r2, r3
 8007522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	663b      	str	r3, [r7, #96]	@ 0x60
 800752e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800753c:	4649      	mov	r1, r9
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	4641      	mov	r1, r8
 8007542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007546:	4641      	mov	r1, r8
 8007548:	008a      	lsls	r2, r1, #2
 800754a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800754e:	f7f9 fb43 	bl	8000bd8 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <UART_SetConfig+0x4e4>)
 8007558:	fba3 1302 	umull	r1, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	2164      	movs	r1, #100	@ 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	3332      	adds	r3, #50	@ 0x32
 800756a:	4a08      	ldr	r2, [pc, #32]	@ (800758c <UART_SetConfig+0x4e4>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f003 020f 	and.w	r2, r3, #15
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4422      	add	r2, r4
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007586:	46bd      	mov	sp, r7
 8007588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800758c:	51eb851f 	.word	0x51eb851f

08007590 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  return x;
 8007598:	687b      	ldr	r3, [r7, #4]
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b084      	sub	sp, #16
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	4603      	mov	r3, r0
 80075ae:	6039      	str	r1, [r7, #0]
 80075b0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	79f9      	ldrb	r1, [r7, #7]
 80075b8:	2304      	movs	r3, #4
 80075ba:	2002      	movs	r0, #2
 80075bc:	f000 f8f6 	bl	80077ac <sl_wfx_bus_access>
 80075c0:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 80075c2:	7a3b      	ldrb	r3, [r7, #8]
 80075c4:	461a      	mov	r2, r3
 80075c6:	7a7b      	ldrb	r3, [r7, #9]
 80075c8:	021b      	lsls	r3, r3, #8
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	4313      	orrs	r3, r2
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	4603      	mov	r3, r0
 80075e6:	460a      	mov	r2, r1
 80075e8:	71fb      	strb	r3, [r7, #7]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 80075ee:	88bb      	ldrh	r3, [r7, #4]
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	733b      	strb	r3, [r7, #12]
 80075f4:	88bb      	ldrh	r3, [r7, #4]
 80075f6:	0a1b      	lsrs	r3, r3, #8
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 8007606:	f107 020c 	add.w	r2, r7, #12
 800760a:	79f9      	ldrb	r1, [r7, #7]
 800760c:	2304      	movs	r3, #4
 800760e:	2001      	movs	r0, #1
 8007610:	f000 f8cc 	bl	80077ac <sl_wfx_bus_access>
 8007614:	4603      	mov	r3, r0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	4603      	mov	r3, r0
 8007626:	6039      	str	r1, [r7, #0]
 8007628:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 800762a:	79f9      	ldrb	r1, [r7, #7]
 800762c:	2304      	movs	r3, #4
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	2002      	movs	r0, #2
 8007632:	f000 f8bb 	bl	80077ac <sl_wfx_bus_access>
 8007636:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff ffa7 	bl	8007590 <uint32_identity>
 8007642:	4602      	mov	r2, r0
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8007648:	68fb      	ldr	r3, [r7, #12]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	4603      	mov	r3, r0
 800765a:	6039      	str	r1, [r7, #0]
 800765c:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff ff95 	bl	8007590 <uint32_identity>
 8007666:	4603      	mov	r3, r0
 8007668:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 800766a:	463a      	mov	r2, r7
 800766c:	79f9      	ldrb	r1, [r7, #7]
 800766e:	2304      	movs	r3, #4
 8007670:	2001      	movs	r0, #1
 8007672:	f000 f89b 	bl	80077ac <sl_wfx_bus_access>
 8007676:	4603      	mov	r3, r0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	2102      	movs	r1, #2
 8007690:	2002      	movs	r0, #2
 8007692:	f000 f88b 	bl	80077ac <sl_wfx_bus_access>
 8007696:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	2102      	movs	r1, #2
 80076b2:	2001      	movs	r0, #1
 80076b4:	f000 f87a 	bl	80077ac <sl_wfx_bus_access>
 80076b8:	60f8      	str	r0, [r7, #12]

  return result;
 80076ba:	68fb      	ldr	r3, [r7, #12]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076d6:	d301      	bcc.n	80076dc <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 80076d8:	2321      	movs	r3, #33	@ 0x21
 80076da:	e00f      	b.n	80076fc <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	2004      	movs	r0, #4
 80076e0:	f7ff ffb7 	bl	8007652 <sl_wfx_reg_write_32>
 80076e4:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	2105      	movs	r1, #5
 80076f2:	2001      	movs	r0, #1
 80076f4:	f000 f85a 	bl	80077ac <sl_wfx_bus_access>
 80076f8:	6178      	str	r0, [r7, #20]
  }

  return result;
 80076fa:	697b      	ldr	r3, [r7, #20]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	2004      	movs	r0, #4
 8007712:	f7ff ff9e 	bl	8007652 <sl_wfx_reg_write_32>
 8007716:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d104      	bne.n	8007728 <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	2005      	movs	r0, #5
 8007722:	f7ff ff96 	bl	8007652 <sl_wfx_reg_write_32>
 8007726:	60f8      	str	r0, [r7, #12]
  }

  return result;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800773c:	6879      	ldr	r1, [r7, #4]
 800773e:	2004      	movs	r0, #4
 8007740:	f7ff ff87 	bl	8007652 <sl_wfx_reg_write_32>
 8007744:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007746:	f107 030c 	add.w	r3, r7, #12
 800774a:	4619      	mov	r1, r3
 800774c:	2000      	movs	r0, #0
 800774e:	f7ff ff66 	bl	800761e <sl_wfx_reg_read_32>
 8007752:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800775a:	4619      	mov	r1, r3
 800775c:	2000      	movs	r0, #0
 800775e:	f7ff ff78 	bl	8007652 <sl_wfx_reg_write_32>
 8007762:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	e011      	b.n	800778e <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800776a:	f107 030c 	add.w	r3, r7, #12
 800776e:	4619      	mov	r1, r3
 8007770:	2000      	movs	r0, #0
 8007772:	f7ff ff54 	bl	800761e <sl_wfx_reg_read_32>
 8007776:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d009      	beq.n	8007796 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8007782:	2001      	movs	r0, #1
 8007784:	f001 fadc 	bl	8008d40 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	3301      	adds	r3, #1
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b13      	cmp	r3, #19
 8007792:	d9ea      	bls.n	800776a <sl_wfx_apb_read_32+0x38>
 8007794:	e000      	b.n	8007798 <sl_wfx_apb_read_32+0x66>
      break;
 8007796:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	2005      	movs	r0, #5
 800779c:	f7ff ff3f 	bl	800761e <sl_wfx_reg_read_32>
 80077a0:	6138      	str	r0, [r7, #16]

  return result;
 80077a2:	693b      	ldr	r3, [r7, #16]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60ba      	str	r2, [r7, #8]
 80077b4:	607b      	str	r3, [r7, #4]
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
 80077ba:	460b      	mov	r3, r1
 80077bc:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 80077be:	4b43      	ldr	r3, [pc, #268]	@ (80078cc <sl_wfx_bus_access+0x120>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01a      	beq.n	8007804 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 80077ce:	2001      	movs	r0, #1
 80077d0:	f001 fa30 	bl	8008c34 <sl_wfx_host_set_wake_up_pin>
 80077d4:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d171      	bne.n	80078c0 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 80077dc:	7bfb      	ldrb	r3, [r7, #15]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d105      	bne.n	80077ee <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 80077e2:	f001 fa43 	bl	8008c6c <sl_wfx_host_wait_for_wake_up>
 80077e6:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d168      	bne.n	80078c0 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 80077ee:	4b37      	ldr	r3, [pc, #220]	@ (80078cc <sl_wfx_bus_access+0x120>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80077f6:	4b35      	ldr	r3, [pc, #212]	@ (80078cc <sl_wfx_bus_access+0x120>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0208 	bic.w	r2, r2, #8
 80077fe:	b2d2      	uxtb	r2, r2
 8007800:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d107      	bne.n	800781a <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	4618      	mov	r0, r3
 8007812:	f000 f85d 	bl	80078d0 <sl_wfx_reg_read>
 8007816:	6178      	str	r0, [r7, #20]
 8007818:	e00c      	b.n	8007834 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d107      	bne.n	8007830 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 8007820:	7bbb      	ldrb	r3, [r7, #14]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 f89e 	bl	8007968 <sl_wfx_reg_write>
 800782c:	6178      	str	r0, [r7, #20]
 800782e:	e001      	b.n	8007834 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8007830:	2321      	movs	r3, #33	@ 0x21
 8007832:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d142      	bne.n	80078c0 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 800783a:	4b24      	ldr	r3, [pc, #144]	@ (80078cc <sl_wfx_bus_access+0x120>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f893 3222 	ldrb.w	r3, [r3, #546]	@ 0x222
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b00      	cmp	r3, #0
 8007848:	d039      	beq.n	80078be <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d136      	bne.n	80078be <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d108      	bne.n	8007868 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d130      	bne.n	80078be <sl_wfx_bus_access+0x112>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	881b      	ldrh	r3, [r3, #0]
 8007860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007864:	2b00      	cmp	r3, #0
 8007866:	d12a      	bne.n	80078be <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 8007868:	4b18      	ldr	r3, [pc, #96]	@ (80078cc <sl_wfx_bus_access+0x120>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8007870:	2b01      	cmp	r3, #1
 8007872:	d824      	bhi.n	80078be <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3b02      	subs	r3, #2
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4413      	add	r3, r2
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007882:	2b00      	cmp	r3, #0
 8007884:	d11b      	bne.n	80078be <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 8007886:	7bb9      	ldrb	r1, [r7, #14]
 8007888:	7bfb      	ldrb	r3, [r7, #15]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	f001 fa01 	bl	8008c94 <sl_wfx_host_sleep_grant>
 8007892:	4603      	mov	r3, r0
 8007894:	f640 3208 	movw	r2, #2824	@ 0xb08
 8007898:	4293      	cmp	r3, r2
 800789a:	d110      	bne.n	80078be <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 800789c:	4b0b      	ldr	r3, [pc, #44]	@ (80078cc <sl_wfx_bus_access+0x120>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80078a4:	4b09      	ldr	r3, [pc, #36]	@ (80078cc <sl_wfx_bus_access+0x120>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0208 	orr.w	r2, r2, #8
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 80078b2:	2000      	movs	r0, #0
 80078b4:	f001 f9be 	bl	8008c34 <sl_wfx_host_set_wake_up_pin>
 80078b8:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 80078be:	bf00      	nop
  return result;
 80078c0:	697b      	ldr	r3, [r7, #20]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3718      	adds	r7, #24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000a94 	.word	0x20000a94

080078d0 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b08a      	sub	sp, #40	@ 0x28
 80078d4:	af02      	add	r7, sp, #8
 80078d6:	4603      	mov	r3, r0
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 80078de:	7bfb      	ldrb	r3, [r7, #15]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	031b      	lsls	r3, r3, #12
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	085b      	lsrs	r3, r3, #1
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078f8:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80078fa:	8bfb      	ldrh	r3, [r7, #30]
 80078fc:	0a1b      	lsrs	r3, r3, #8
 80078fe:	b29b      	uxth	r3, r3
 8007900:	b2db      	uxtb	r3, r3
 8007902:	753b      	strb	r3, [r7, #20]
 8007904:	8bfb      	ldrh	r3, [r7, #30]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 800790a:	f002 f80f 	bl	800992c <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f107 0114 	add.w	r1, r7, #20
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2202      	movs	r2, #2
 800791c:	2002      	movs	r0, #2
 800791e:	f002 f81d 	bl	800995c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007922:	f002 f80f 	bl	8009944 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d118      	bne.n	800795e <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	785a      	ldrb	r2, [r3, #1]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	3301      	adds	r3, #1
 8007942:	7dfa      	ldrb	r2, [r7, #23]
 8007944:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	789b      	ldrb	r3, [r3, #2]
 800794a:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	3302      	adds	r3, #2
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	78d2      	ldrb	r2, [r2, #3]
 8007954:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	3303      	adds	r3, #3
 800795a:	7dfa      	ldrb	r2, [r7, #23]
 800795c:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3720      	adds	r7, #32
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	@ 0x28
 800796c:	af02      	add	r7, sp, #8
 800796e:	4603      	mov	r3, r0
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d118      	bne.n	80079ae <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	785a      	ldrb	r2, [r3, #1]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	3301      	adds	r3, #1
 8007992:	7efa      	ldrb	r2, [r7, #27]
 8007994:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	789b      	ldrb	r3, [r3, #2]
 800799a:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	3302      	adds	r3, #2
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	78d2      	ldrb	r2, [r2, #3]
 80079a4:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	3303      	adds	r3, #3
 80079aa:	7efa      	ldrb	r2, [r7, #27]
 80079ac:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	031b      	lsls	r3, r3, #12
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 80079c0:	8b3b      	ldrh	r3, [r7, #24]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	753b      	strb	r3, [r7, #20]
 80079ca:	8b3b      	ldrh	r3, [r7, #24]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80079d0:	f001 ffac 	bl	800992c <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f107 0114 	add.w	r1, r7, #20
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2202      	movs	r2, #2
 80079e2:	2001      	movs	r0, #1
 80079e4:	f001 ffba 	bl	800995c <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 80079e8:	f001 ffac 	bl	8009944 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 80079fe:	f001 ff6f 	bl	80098e0 <sl_wfx_host_init_bus>
 8007a02:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d12b      	bne.n	8007a62 <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8007a0a:	f001 f8fb 	bl	8008c04 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007a0e:	463b      	mov	r3, r7
 8007a10:	4619      	mov	r1, r3
 8007a12:	2000      	movs	r0, #0
 8007a14:	f7ff fe03 	bl	800761e <sl_wfx_reg_read_32>
 8007a18:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d120      	bne.n	8007a62 <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <sl_wfx_init_bus+0x36>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a2c:	d104      	bne.n	8007a38 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d114      	bne.n	8007a62 <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a3e:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a46:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	4b08      	ldr	r3, [pc, #32]	@ (8007a6c <sl_wfx_init_bus+0x74>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	4619      	mov	r1, r3
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7ff fdfc 	bl	8007652 <sl_wfx_reg_write_32>
 8007a5a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0

  error_handler:
 8007a60:	bf00      	nop
  return status;
 8007a62:	687b      	ldr	r3, [r7, #4]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	04045400 	.word	0x04045400

08007a70 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8007a74:	f001 ff4c 	bl	8009910 <sl_wfx_host_deinit_bus>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <uint16_identity>:
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	4603      	mov	r3, r0
 8007a86:	80fb      	strh	r3, [r7, #6]
  return x;
 8007a88:	88fb      	ldrh	r3, [r7, #6]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <uint32_identity>:
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  return x;
 8007a9e:	687b      	ldr	r3, [r7, #4]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007aac:	b590      	push	{r4, r7, lr}
 8007aae:	b089      	sub	sp, #36	@ 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8007ab4:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8007ab8:	2100      	movs	r1, #0
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f013 fc22 	bl	801b304 <memset>

  sl_wfx_context = context;
 8007ac0:	4a5f      	ldr	r2, [pc, #380]	@ (8007c40 <sl_wfx_init+0x194>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8007ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8007c40 <sl_wfx_init+0x194>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  result = sl_wfx_init_bus(  );
 8007ad0:	f7ff ff92 	bl	80079f8 <sl_wfx_init_bus>
 8007ad4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f040 80a2 	bne.w	8007c22 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8007ade:	f000 fbf3 	bl	80082c8 <sl_wfx_init_chip>
 8007ae2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 809b 	bne.w	8007c22 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8007aec:	f000 fc80 	bl	80083f0 <sl_wfx_download_run_bootloader>
 8007af0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f040 8094 	bne.w	8007c22 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8007afa:	20e1      	movs	r0, #225	@ 0xe1
 8007afc:	f001 f8da 	bl	8008cb4 <sl_wfx_host_setup_waited_event>
 8007b00:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 808c 	bne.w	8007c22 <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8007b0a:	f000 fcb9 	bl	8008480 <sl_wfx_download_run_firmware>
 8007b0e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f040 8085 	bne.w	8007c22 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007b18:	f000 fb72 	bl	8008200 <sl_wfx_enable_irq>
 8007b1c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d17e      	bne.n	8007c22 <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 8007b24:	f000 fbb4 	bl	8008290 <sl_wfx_set_access_mode_message>
 8007b28:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d178      	bne.n	8007c22 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	461a      	mov	r2, r3
 8007b36:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007b3a:	20e1      	movs	r0, #225	@ 0xe1
 8007b3c:	f001 f8cc 	bl	8008cd8 <sl_wfx_host_wait_for_confirmation>
 8007b40:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d16c      	bne.n	8007c22 <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f893 2039 	ldrb.w	r2, [r3, #57]	@ 0x39
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f203 2016 	addw	r0, r3, #534	@ 0x216
         startup_info->body.mac_addr[0],
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	3326      	adds	r3, #38	@ 0x26
  memcpy(&(context->mac_addr_0.octet),
 8007b76:	2206      	movs	r2, #6
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f013 fc80 	bl	801b47e <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
         startup_info->body.mac_addr[1],
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	332c      	adds	r3, #44	@ 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8007b88:	2206      	movs	r2, #6
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f013 fc77 	bl	801b47e <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	8c1b      	ldrh	r3, [r3, #32]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff71 	bl	8007a7e <uint16_identity>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b28      	ldr	r3, [pc, #160]	@ (8007c44 <sl_wfx_init+0x198>)
 8007ba2:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	330a      	adds	r3, #10
 8007bae:	220e      	movs	r2, #14
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f013 fc64 	bl	801b47e <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f001 f83c 	bl	8008c34 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007bbc:	f107 0312 	add.w	r3, r7, #18
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 fff7 	bl	8008bb4 <sl_wfx_host_get_pds_size>
 8007bc6:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d129      	bne.n	8007c22 <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	76fb      	strb	r3, [r7, #27]
 8007bd2:	e01c      	b.n	8007c0e <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8007bd4:	7efb      	ldrb	r3, [r7, #27]
 8007bd6:	b29a      	uxth	r2, r3
 8007bd8:	f107 030c 	add.w	r3, r7, #12
 8007bdc:	4611      	mov	r1, r2
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 ffbc 	bl	8008b5c <sl_wfx_host_get_pds_data>
 8007be4:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d11a      	bne.n	8007c22 <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007bec:	68fc      	ldr	r4, [r7, #12]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7f8 fb55 	bl	80002a0 <strlen>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f950 	bl	8007ea0 <sl_wfx_send_configuration>
 8007c00:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10c      	bne.n	8007c22 <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007c08:	7efb      	ldrb	r3, [r7, #27]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	76fb      	strb	r3, [r7, #27]
 8007c0e:	7efb      	ldrb	r3, [r7, #27]
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	8a7b      	ldrh	r3, [r7, #18]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d3dd      	bcc.n	8007bd4 <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007c18:	4b09      	ldr	r3, [pc, #36]	@ (8007c40 <sl_wfx_init+0x194>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8007c28:	f000 fb0e 	bl	8008248 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007c2c:	f7ff ff20 	bl	8007a70 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8007c30:	f000 ffe0 	bl	8008bf4 <sl_wfx_host_deinit>
  }

  return result;
 8007c34:	69fb      	ldr	r3, [r7, #28]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3724      	adds	r7, #36	@ 0x24
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd90      	pop	{r4, r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000a94 	.word	0x20000a94
 8007c44:	20000a9a 	.word	0x20000a9a

08007c48 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	@ 0x28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
 8007c54:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8007c66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f023 0301 	bic.w	r3, r3, #1
 8007c70:	3378      	adds	r3, #120	@ 0x78
 8007c72:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007c74:	f107 0018 	add.w	r0, r7, #24
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	2143      	movs	r1, #67	@ 0x43
 8007c7e:	f000 fed7 	bl	8008a30 <sl_wfx_allocate_command_buffer>
 8007c82:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f040 8092 	bne.w	8007db0 <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	3304      	adds	r3, #4
 8007c96:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f7ff fefc 	bl	8007a96 <uint32_identity>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8007ca4:	887b      	ldrh	r3, [r7, #2]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7ff fee9 	bl	8007a7e <uint16_identity>
 8007cac:	4603      	mov	r3, r0
 8007cae:	461a      	mov	r2, r3
 8007cb0:	6a3b      	ldr	r3, [r7, #32]
 8007cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  connect_request->security_mode         = security_mode;
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8007cba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8007cc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007cc8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8007ccc:	2b06      	cmp	r3, #6
 8007cce:	d109      	bne.n	8007ce4 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f042 0202 	orr.w	r2, r2, #2
 8007cd8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
 8007ce2:	e007      	b.n	8007cf4 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007ce4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f7ff fec9 	bl	8007a7e <uint16_identity>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007cf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fec0 	bl	8007a7e <uint16_identity>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	461a      	mov	r2, r3
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	861a      	strh	r2, [r3, #48]	@ 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007d06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff feb7 	bl	8007a7e <uint16_identity>
 8007d10:	4603      	mov	r3, r0
 8007d12:	461a      	mov	r2, r3
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f013 fbab 	bl	801b47e <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	3332      	adds	r3, #50	@ 0x32
 8007d2c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8007d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d32:	4618      	mov	r0, r3
 8007d34:	f013 fba3 	bl	801b47e <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	3374      	adds	r3, #116	@ 0x74
 8007d3c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8007d40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d42:	4618      	mov	r0, r3
 8007d44:	f013 fb9b 	bl	801b47e <memcpy>
  if (bssid != NULL) {
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8007d4e:	6a3b      	ldr	r3, [r7, #32]
 8007d50:	3324      	adds	r3, #36	@ 0x24
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	2206      	movs	r2, #6
 8007d56:	4618      	mov	r0, r3
 8007d58:	f013 fb91 	bl	801b47e <memcpy>
 8007d5c:	e006      	b.n	8007d6c <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	3324      	adds	r3, #36	@ 0x24
 8007d62:	2206      	movs	r2, #6
 8007d64:	21ff      	movs	r1, #255	@ 0xff
 8007d66:	4618      	mov	r0, r3
 8007d68:	f013 facc 	bl	801b304 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	b292      	uxth	r2, r2
 8007d72:	4619      	mov	r1, r3
 8007d74:	2043      	movs	r0, #67	@ 0x43
 8007d76:	f000 f90b 	bl	8007f90 <sl_wfx_send_request>
 8007d7a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007d82:	f107 0314 	add.w	r3, r7, #20
 8007d86:	461a      	mov	r2, r3
 8007d88:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007d8c:	2043      	movs	r0, #67	@ 0x43
 8007d8e:	f000 ffa3 	bl	8008cd8 <sl_wfx_host_wait_for_confirmation>
 8007d92:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d10a      	bne.n	8007db0 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fe79 	bl	8007a96 <uint32_identity>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2143      	movs	r1, #67	@ 0x43
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fd61 	bl	8008870 <sl_wfx_get_status_code>
 8007dae:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	d10d      	bne.n	8007dd2 <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 8007db6:	4b0e      	ldr	r3, [pc, #56]	@ (8007df0 <sl_wfx_send_join_command+0x1a8>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <sl_wfx_send_join_command+0x1a8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	2143      	movs	r1, #67	@ 0x43
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fe44 	bl	8008a6c <sl_wfx_free_command_buffer>
  }
  return result;
 8007de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3728      	adds	r7, #40	@ 0x28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000a94 	.word	0x20000a94

08007df4 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	4611      	mov	r1, r2
 8007e00:	461a      	mov	r2, r3
 8007e02:	460b      	mov	r3, r1
 8007e04:	71fb      	strb	r3, [r7, #7]
 8007e06:	4613      	mov	r3, r2
 8007e08:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	f023 0301 	bic.w	r3, r3, #1
 8007e12:	330c      	adds	r3, #12
 8007e14:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8007e16:	4b21      	ldr	r3, [pc, #132]	@ (8007e9c <sl_wfx_send_ethernet_frame+0xa8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f8b3 2204 	ldrh.w	r2, [r3, #516]	@ 0x204
 8007e1e:	3201      	adds	r2, #1
 8007e20:	b292      	uxth	r2, r2
 8007e22:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fe25 	bl	8007a7e <uint16_identity>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	224a      	movs	r2, #74	@ 0x4a
 8007e40:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0306 	and.w	r3, r3, #6
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2208      	movs	r2, #8
 8007e56:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	79ba      	ldrb	r2, [r7, #6]
 8007e5c:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <sl_wfx_send_ethernet_frame+0xa8>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fe09 	bl	8007a7e <uint16_identity>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007e74:	68b8      	ldr	r0, [r7, #8]
 8007e76:	f7ff fe0e 	bl	8007a96 <uint32_identity>
 8007e7a:	4602      	mov	r2, r0
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	68f9      	ldr	r1, [r7, #12]
 8007e88:	204a      	movs	r0, #74	@ 0x4a
 8007e8a:	f000 f881 	bl	8007f90 <sl_wfx_send_request>
 8007e8e:	6138      	str	r0, [r7, #16]

  return result;
 8007e90:	693b      	ldr	r3, [r7, #16]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3718      	adds	r7, #24
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000a94 	.word	0x20000a94

08007ea0 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	f023 0301 	bic.w	r3, r3, #1
 8007ec2:	3306      	adds	r3, #6
 8007ec4:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007ec6:	f107 0010 	add.w	r0, r7, #16
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	2109      	movs	r1, #9
 8007ed0:	f000 fdae 	bl	8008a30 <sl_wfx_allocate_command_buffer>
 8007ed4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d137      	bne.n	8007f4c <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fdc6 	bl	8007a7e <uint16_identity>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	3302      	adds	r3, #2
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	4618      	mov	r0, r3
 8007f04:	f013 fabb 	bl	801b47e <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	b292      	uxth	r2, r2
 8007f0e:	4619      	mov	r1, r3
 8007f10:	2009      	movs	r0, #9
 8007f12:	f000 f83d 	bl	8007f90 <sl_wfx_send_request>
 8007f16:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d116      	bne.n	8007f4c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	461a      	mov	r2, r3
 8007f24:	f241 3188 	movw	r1, #5000	@ 0x1388
 8007f28:	2009      	movs	r0, #9
 8007f2a:	f000 fed5 	bl	8008cd8 <sl_wfx_host_wait_for_confirmation>
 8007f2e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff fdab 	bl	8007a96 <uint32_identity>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2109      	movs	r1, #9
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fc93 	bl	8008870 <sl_wfx_get_status_code>
 8007f4a:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	2b07      	cmp	r3, #7
 8007f50:	d10d      	bne.n	8007f6e <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 8007f52:	4b0e      	ldr	r3, [pc, #56]	@ (8007f8c <sl_wfx_send_configuration+0xec>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f8c <sl_wfx_send_configuration+0xec>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007f66:	3a01      	subs	r2, #1
 8007f68:	b292      	uxth	r2, r2
 8007f6a:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    }
  }
  if (frame != NULL) {
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	2202      	movs	r2, #2
 8007f78:	2109      	movs	r1, #9
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fd76 	bl	8008a6c <sl_wfx_free_command_buffer>
  }
  return result;
 8007f80:	69fb      	ldr	r3, [r7, #28]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3720      	adds	r7, #32
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000a94 	.word	0x20000a94

08007f90 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8007fa0:	f001 f84a 	bl	8009038 <sl_wfx_host_lock>
 8007fa4:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d005      	beq.n	8007fb8 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 8007fac:	68f9      	ldr	r1, [r7, #12]
 8007fae:	482f      	ldr	r0, [pc, #188]	@ (800806c <sl_wfx_send_request+0xdc>)
 8007fb0:	f001 f830 	bl	8009014 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	e054      	b.n	8008062 <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 8007fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8008070 <sl_wfx_send_request+0xe0>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8008074 <sl_wfx_send_request+0xe4>)
 8007fc2:	881b      	ldrh	r3, [r3, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d304      	bcc.n	8007fd2 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 8007fc8:	231d      	movs	r3, #29
 8007fca:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d137      	bne.n	8008042 <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	79fa      	ldrb	r2, [r7, #7]
 8007fd6:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 8007fd8:	88bb      	ldrh	r3, [r7, #4]
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7ff fd4f 	bl	8007a7e <uint16_identity>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b4a      	cmp	r3, #74	@ 0x4a
 8007fec:	d00a      	beq.n	8008004 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	2b32      	cmp	r3, #50	@ 0x32
 8007ff2:	d007      	beq.n	8008004 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8007ff4:	79fb      	ldrb	r3, [r7, #7]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fe5c 	bl	8008cb4 <sl_wfx_host_setup_waited_event>
 8007ffc:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d11e      	bne.n	8008042 <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800800a:	68f9      	ldr	r1, [r7, #12]
 800800c:	481a      	ldr	r0, [pc, #104]	@ (8008078 <sl_wfx_send_request+0xe8>)
 800800e:	f001 f801 	bl	8009014 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 8008012:	88bb      	ldrh	r3, [r7, #4]
 8008014:	4619      	mov	r1, r3
 8008016:	6838      	ldr	r0, [r7, #0]
 8008018:	f000 ffee 	bl	8008ff8 <sl_wfx_host_transmit_frame>
 800801c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10e      	bne.n	8008042 <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 800802a:	68f9      	ldr	r1, [r7, #12]
 800802c:	4812      	ldr	r0, [pc, #72]	@ (8008078 <sl_wfx_send_request+0xe8>)
 800802e:	f000 fff1 	bl	8009014 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 8008032:	4b0f      	ldr	r3, [pc, #60]	@ (8008070 <sl_wfx_send_request+0xe0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800803a:	3201      	adds	r2, #1
 800803c:	b292      	uxth	r2, r2
 800803e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 8008042:	f001 f819 	bl	8009078 <sl_wfx_host_unlock>
 8008046:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <sl_wfx_send_request+0xc2>
    result = unlock_result;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8008058:	68f9      	ldr	r1, [r7, #12]
 800805a:	4807      	ldr	r0, [pc, #28]	@ (8008078 <sl_wfx_send_request+0xe8>)
 800805c:	f000 ffda 	bl	8009014 <sl_wfx_host_log>
  }
#endif
  return result;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	0801d27c 	.word	0x0801d27c
 8008070:	20000a94 	.word	0x20000a94
 8008074:	20000a9a 	.word	0x20000a9a
 8008078:	0801d298 	.word	0x0801d298

0800807c <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 800807c:	b590      	push	{r4, r7, lr}
 800807e:	b08b      	sub	sp, #44	@ 0x2c
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8008088:	2301      	movs	r3, #1
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 800808e:	f000 ffd3 	bl	8009038 <sl_wfx_host_lock>
 8008092:	6278      	str	r0, [r7, #36]	@ 0x24

  if (result != SL_STATUS_OK) {
 8008094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008096:	2b00      	cmp	r3, #0
 8008098:	d005      	beq.n	80080a6 <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800809a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800809c:	4855      	ldr	r0, [pc, #340]	@ (80081f4 <sl_wfx_receive_frame+0x178>)
 800809e:	f000 ffb9 	bl	8009014 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 80080a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a4:	e0a1      	b.n	80081ea <sl_wfx_receive_frame+0x16e>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	881b      	ldrh	r3, [r3, #0]
 80080aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d116      	bne.n	80080e6 <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 80080b8:	6879      	ldr	r1, [r7, #4]
 80080ba:	2001      	movs	r0, #1
 80080bc:	f7ff fa73 	bl	80075a6 <sl_wfx_reg_read_16>
 80080c0:	6278      	str	r0, [r7, #36]	@ 0x24
    SL_WFX_ERROR_CHECK(result);
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d174      	bne.n	80081b2 <sl_wfx_receive_frame+0x136>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	881b      	ldrh	r3, [r3, #0]
 80080cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 80080da:	f640 3305 	movw	r3, #2821	@ 0xb05
 80080de:	627b      	str	r3, [r7, #36]	@ 0x24
      SL_WFX_ERROR_CHECK(result);
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d165      	bne.n	80081b2 <sl_wfx_receive_frame+0x136>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	0b9b      	lsrs	r3, r3, #14
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	3302      	adds	r3, #2
 80080f4:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 80080f6:	7efb      	ldrb	r3, [r7, #27]
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d101      	bne.n	8008100 <sl_wfx_receive_frame+0x84>
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <sl_wfx_receive_frame+0x86>
 8008100:	2302      	movs	r3, #2
 8008102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 800810c:	2b00      	cmp	r3, #0
 800810e:	d004      	beq.n	800811a <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8008116:	3340      	adds	r3, #64	@ 0x40
 8008118:	e000      	b.n	800811c <sl_wfx_receive_frame+0xa0>
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8008120:	f107 000c 	add.w	r0, r7, #12
 8008124:	461a      	mov	r2, r3
 8008126:	f000 ff47 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 800812a:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d13f      	bne.n	80081b2 <sl_wfx_receive_frame+0x136>

  memset(network_rx_buffer, 0, read_length);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	2100      	movs	r1, #0
 8008138:	4618      	mov	r0, r3
 800813a:	f013 f8e3 	bl	801b304 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6979      	ldr	r1, [r7, #20]
 8008142:	4618      	mov	r0, r3
 8008144:	f7ff fa9c 	bl	8007680 <sl_wfx_data_read>
 8008148:	6278      	str	r0, [r7, #36]	@ 0x24
  SL_WFX_ERROR_CHECK(result);
 800814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814c:	2b00      	cmp	r3, #0
 800814e:	d130      	bne.n	80081b2 <sl_wfx_receive_frame+0x136>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8008150:	4b29      	ldr	r3, [pc, #164]	@ (80081f8 <sl_wfx_receive_frame+0x17c>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00c      	beq.n	8008176 <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	789b      	ldrb	r3, [r3, #2]
 8008160:	b25b      	sxtb	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	db07      	blt.n	8008176 <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 8008166:	4b24      	ldr	r3, [pc, #144]	@ (80081f8 <sl_wfx_receive_frame+0x17c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 800816e:	3a01      	subs	r2, #1
 8008170:	b292      	uxth	r2, r2
 8008172:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	4619      	mov	r1, r3
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3301      	adds	r3, #1
 8008186:	4413      	add	r3, r2
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	b29b      	uxth	r3, r3
 800818e:	430b      	orrs	r3, r1
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	b29b      	uxth	r3, r3
 800819c:	68fc      	ldr	r4, [r7, #12]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff fc6d 	bl	8007a7e <uint16_identity>
 80081a4:	4603      	mov	r3, r0
 80081a6:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fdd4 	bl	8008d58 <sl_wfx_host_post_event>
 80081b0:	6278      	str	r0, [r7, #36]	@ 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d008      	beq.n	80081ca <sl_wfx_receive_frame+0x14e>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	789b      	ldrb	r3, [r3, #2]
 80081be:	4619      	mov	r1, r3
 80081c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081c4:	461a      	mov	r2, r3
 80081c6:	f000 fc51 	bl	8008a6c <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 80081ca:	f000 ff55 	bl	8009078 <sl_wfx_host_unlock>
 80081ce:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <sl_wfx_receive_frame+0x15e>
    result = unlock_result;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <sl_wfx_receive_frame+0x16c>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 80081e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80081e2:	4806      	ldr	r0, [pc, #24]	@ (80081fc <sl_wfx_receive_frame+0x180>)
 80081e4:	f000 ff16 	bl	8009014 <sl_wfx_host_log>
  }
#endif
  return result;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	372c      	adds	r7, #44	@ 0x2c
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd90      	pop	{r4, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	0801d2b0 	.word	0x0801d2b0
 80081f8:	20000a94 	.word	0x20000a94
 80081fc:	0801d2d0 	.word	0x0801d2d0

08008200 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 8008206:	f001 fc01 	bl	8009a0c <sl_wfx_host_enable_platform_interrupt>
 800820a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d115      	bne.n	800823e <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008212:	463b      	mov	r3, r7
 8008214:	4619      	mov	r1, r3
 8008216:	2000      	movs	r0, #0
 8008218:	f7ff fa01 	bl	800761e <sl_wfx_reg_read_32>
 800821c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800822a:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4619      	mov	r1, r3
 8008230:	2000      	movs	r0, #0
 8008232:	f7ff fa0e 	bl	8007652 <sl_wfx_reg_write_32>
 8008236:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0

  error_handler:
 800823c:	bf00      	nop
  return result;
 800823e:	687b      	ldr	r3, [r7, #4]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800824e:	463b      	mov	r3, r7
 8008250:	4619      	mov	r1, r3
 8008252:	2000      	movs	r0, #0
 8008254:	f7ff f9e3 	bl	800761e <sl_wfx_reg_read_32>
 8008258:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d112      	bne.n	8008286 <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008266:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	4619      	mov	r1, r3
 800826c:	2000      	movs	r0, #0
 800826e:	f7ff f9f0 	bl	8007652 <sl_wfx_reg_write_32>
 8008272:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d105      	bne.n	8008286 <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 800827a:	f001 fbd4 	bl	8009a26 <sl_wfx_host_disable_platform_interrupt>
 800827e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0

  error_handler:
 8008284:	bf00      	nop
  return result;
 8008286:	687b      	ldr	r3, [r7, #4]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8008296:	463b      	mov	r3, r7
 8008298:	4619      	mov	r1, r3
 800829a:	2000      	movs	r0, #0
 800829c:	f7ff f9bf 	bl	800761e <sl_wfx_reg_read_32>
 80082a0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10a      	bne.n	80082be <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80082ae:	4619      	mov	r1, r3
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7ff f9ce 	bl	8007652 <sl_wfx_reg_write_32>
 80082b6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0

  error_handler:
 80082bc:	bf00      	nop
  return result;
 80082be:	687b      	ldr	r3, [r7, #4]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80082ce:	1d3b      	adds	r3, r7, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	2000      	movs	r0, #0
 80082d4:	f7ff f9a3 	bl	800761e <sl_wfx_reg_read_32>
 80082d8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d177      	bne.n	80083d0 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 80082e0:	493e      	ldr	r1, [pc, #248]	@ (80083dc <sl_wfx_init_chip+0x114>)
 80082e2:	2006      	movs	r0, #6
 80082e4:	f7ff f9b5 	bl	8007652 <sl_wfx_reg_write_32>
 80082e8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d16f      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 80082f0:	493b      	ldr	r1, [pc, #236]	@ (80083e0 <sl_wfx_init_chip+0x118>)
 80082f2:	2006      	movs	r0, #6
 80082f4:	f7ff f9ad 	bl	8007652 <sl_wfx_reg_write_32>
 80082f8:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d167      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8008300:	4938      	ldr	r1, [pc, #224]	@ (80083e4 <sl_wfx_init_chip+0x11c>)
 8008302:	2006      	movs	r0, #6
 8008304:	f7ff f9a5 	bl	8007652 <sl_wfx_reg_write_32>
 8008308:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d15f      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8008310:	4935      	ldr	r1, [pc, #212]	@ (80083e8 <sl_wfx_init_chip+0x120>)
 8008312:	2006      	movs	r0, #6
 8008314:	f7ff f99d 	bl	8007652 <sl_wfx_reg_write_32>
 8008318:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d157      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8008320:	4932      	ldr	r1, [pc, #200]	@ (80083ec <sl_wfx_init_chip+0x124>)
 8008322:	2006      	movs	r0, #6
 8008324:	f7ff f995 	bl	8007652 <sl_wfx_reg_write_32>
 8008328:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d14f      	bne.n	80083d0 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8008330:	1cbb      	adds	r3, r7, #2
 8008332:	4619      	mov	r1, r3
 8008334:	2001      	movs	r0, #1
 8008336:	f7ff f936 	bl	80075a6 <sl_wfx_reg_read_16>
 800833a:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d146      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 8008342:	887b      	ldrh	r3, [r7, #2]
 8008344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008348:	b29b      	uxth	r3, r3
 800834a:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	4619      	mov	r1, r3
 8008350:	2001      	movs	r0, #1
 8008352:	f7ff f944 	bl	80075de <sl_wfx_reg_write_16>
 8008356:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d138      	bne.n	80083d0 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 800835e:	2300      	movs	r3, #0
 8008360:	60bb      	str	r3, [r7, #8]
 8008362:	e013      	b.n	800838c <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8008364:	1cbb      	adds	r3, r7, #2
 8008366:	4619      	mov	r1, r3
 8008368:	2001      	movs	r0, #1
 800836a:	f7ff f91c 	bl	80075a6 <sl_wfx_reg_read_16>
 800836e:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12c      	bne.n	80083d0 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 8008376:	887b      	ldrh	r3, [r7, #2]
 8008378:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8008380:	2001      	movs	r0, #1
 8008382:	f000 fcdd 	bl	8008d40 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	3301      	adds	r3, #1
 800838a:	60bb      	str	r3, [r7, #8]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008390:	d9e8      	bls.n	8008364 <sl_wfx_init_chip+0x9c>
 8008392:	e000      	b.n	8008396 <sl_wfx_init_chip+0xce>
      break;
 8008394:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 8008396:	887b      	ldrh	r3, [r7, #2]
 8008398:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d104      	bne.n	80083aa <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 80083a0:	2307      	movs	r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d112      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80083aa:	1d3b      	adds	r3, r7, #4
 80083ac:	4619      	mov	r1, r3
 80083ae:	2000      	movs	r0, #0
 80083b0:	f7ff f935 	bl	800761e <sl_wfx_reg_read_32>
 80083b4:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d103      	bne.n	80083ce <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 80083c6:	2301      	movs	r3, #1
 80083c8:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
  }

  error_handler:
 80083ce:	bf00      	nop
  return result;
 80083d0:	68fb      	ldr	r3, [r7, #12]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	07208775 	.word	0x07208775
 80083e0:	082ec020 	.word	0x082ec020
 80083e4:	093c3c3c 	.word	0x093c3c3c
 80083e8:	0b322c44 	.word	0x0b322c44
 80083ec:	0ca06497 	.word	0x0ca06497

080083f0 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80083f6:	463b      	mov	r3, r7
 80083f8:	4619      	mov	r1, r3
 80083fa:	481e      	ldr	r0, [pc, #120]	@ (8008474 <sl_wfx_download_run_bootloader+0x84>)
 80083fc:	f7ff f999 	bl	8007732 <sl_wfx_apb_read_32>
 8008400:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d12f      	bne.n	8008468 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008408:	463b      	mov	r3, r7
 800840a:	4619      	mov	r1, r3
 800840c:	2000      	movs	r0, #0
 800840e:	f7ff f906 	bl	800761e <sl_wfx_reg_read_32>
 8008412:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d126      	bne.n	8008468 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 8008420:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	4619      	mov	r1, r3
 8008426:	2000      	movs	r0, #0
 8008428:	f7ff f913 	bl	8007652 <sl_wfx_reg_write_32>
 800842c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d119      	bne.n	8008468 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 8008434:	4910      	ldr	r1, [pc, #64]	@ (8008478 <sl_wfx_download_run_bootloader+0x88>)
 8008436:	4811      	ldr	r0, [pc, #68]	@ (800847c <sl_wfx_download_run_bootloader+0x8c>)
 8008438:	f7ff f964 	bl	8007704 <sl_wfx_apb_write_32>
 800843c:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d111      	bne.n	8008468 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 8008444:	463b      	mov	r3, r7
 8008446:	4619      	mov	r1, r3
 8008448:	480c      	ldr	r0, [pc, #48]	@ (800847c <sl_wfx_download_run_bootloader+0x8c>)
 800844a:	f7ff f972 	bl	8007732 <sl_wfx_apb_read_32>
 800844e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d108      	bne.n	8008468 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	4a07      	ldr	r2, [pc, #28]	@ (8008478 <sl_wfx_download_run_bootloader+0x88>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d003      	beq.n	8008466 <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 800845e:	2301      	movs	r3, #1
 8008460:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
  }

  error_handler:
 8008466:	bf00      	nop
  return result;
 8008468:	687b      	ldr	r3, [r7, #4]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	0900c010 	.word	0x0900c010
 8008478:	23abc88e 	.word	0x23abc88e
 800847c:	09004000 	.word	0x09004000

08008480 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b08c      	sub	sp, #48	@ 0x30
 8008484:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 8008486:	2300      	movs	r3, #0
 8008488:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 800848e:	f000 faff 	bl	8008a90 <sl_wfx_host_init>
 8008492:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008496:	2b00      	cmp	r3, #0
 8008498:	f040 8185 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 800849c:	4984      	ldr	r1, [pc, #528]	@ (80086b0 <sl_wfx_download_run_firmware+0x230>)
 800849e:	4885      	ldr	r0, [pc, #532]	@ (80086b4 <sl_wfx_download_run_firmware+0x234>)
 80084a0:	f7ff f930 	bl	8007704 <sl_wfx_apb_write_32>
 80084a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 817c 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 80084ae:	2100      	movs	r1, #0
 80084b0:	4881      	ldr	r0, [pc, #516]	@ (80086b8 <sl_wfx_download_run_firmware+0x238>)
 80084b2:	f7ff f927 	bl	8007704 <sl_wfx_apb_write_32>
 80084b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f040 8173 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 80084c0:	2100      	movs	r1, #0
 80084c2:	487e      	ldr	r0, [pc, #504]	@ (80086bc <sl_wfx_download_run_firmware+0x23c>)
 80084c4:	f7ff f91e 	bl	8007704 <sl_wfx_apb_write_32>
 80084c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f040 816a 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 80084d2:	497b      	ldr	r1, [pc, #492]	@ (80086c0 <sl_wfx_download_run_firmware+0x240>)
 80084d4:	4877      	ldr	r0, [pc, #476]	@ (80086b4 <sl_wfx_download_run_firmware+0x234>)
 80084d6:	f7ff f915 	bl	8007704 <sl_wfx_apb_write_32>
 80084da:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f040 8161 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 80084e4:	2264      	movs	r2, #100	@ 0x64
 80084e6:	4977      	ldr	r1, [pc, #476]	@ (80086c4 <sl_wfx_download_run_firmware+0x244>)
 80084e8:	4877      	ldr	r0, [pc, #476]	@ (80086c8 <sl_wfx_download_run_firmware+0x248>)
 80084ea:	f000 f96b 	bl	80087c4 <sl_wfx_poll_for_value>
 80084ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f040 8157 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 80084f8:	f107 0310 	add.w	r3, r7, #16
 80084fc:	4619      	mov	r1, r3
 80084fe:	4873      	ldr	r0, [pc, #460]	@ (80086cc <sl_wfx_download_run_firmware+0x24c>)
 8008500:	f7ff f917 	bl	8007732 <sl_wfx_apb_read_32>
 8008504:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	f040 814c 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 800850e:	f107 0310 	add.w	r3, r7, #16
 8008512:	4619      	mov	r1, r3
 8008514:	486e      	ldr	r0, [pc, #440]	@ (80086d0 <sl_wfx_download_run_firmware+0x250>)
 8008516:	f7ff f90c 	bl	8007732 <sl_wfx_apb_read_32>
 800851a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800851c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 8141 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	0a1b      	lsrs	r3, r3, #8
 8008528:	b2da      	uxtb	r2, r3
 800852a:	4b6a      	ldr	r3, [pc, #424]	@ (80086d4 <sl_wfx_download_run_firmware+0x254>)
 800852c:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 800852e:	496a      	ldr	r1, [pc, #424]	@ (80086d8 <sl_wfx_download_run_firmware+0x258>)
 8008530:	4860      	ldr	r0, [pc, #384]	@ (80086b4 <sl_wfx_download_run_firmware+0x234>)
 8008532:	f7ff f8e7 	bl	8007704 <sl_wfx_apb_write_32>
 8008536:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 8133 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8008540:	2264      	movs	r2, #100	@ 0x64
 8008542:	495f      	ldr	r1, [pc, #380]	@ (80086c0 <sl_wfx_download_run_firmware+0x240>)
 8008544:	4860      	ldr	r0, [pc, #384]	@ (80086c8 <sl_wfx_download_run_firmware+0x248>)
 8008546:	f000 f93d 	bl	80087c4 <sl_wfx_poll_for_value>
 800854a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800854c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 8129 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 8008554:	f04f 31ff 	mov.w	r1, #4294967295
 8008558:	4860      	ldr	r0, [pc, #384]	@ (80086dc <sl_wfx_download_run_firmware+0x25c>)
 800855a:	f7ff f8d3 	bl	8007704 <sl_wfx_apb_write_32>
 800855e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f040 811f 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 8008568:	f107 030c 	add.w	r3, r7, #12
 800856c:	4618      	mov	r0, r3
 800856e:	f000 fae5 	bl	8008b3c <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3b50      	subs	r3, #80	@ 0x50
 8008576:	4619      	mov	r1, r3
 8008578:	4859      	ldr	r0, [pc, #356]	@ (80086e0 <sl_wfx_download_run_firmware+0x260>)
 800857a:	f7ff f8c3 	bl	8007704 <sl_wfx_apb_write_32>
 800857e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 810f 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 8008588:	1d3b      	adds	r3, r7, #4
 800858a:	2108      	movs	r1, #8
 800858c:	4618      	mov	r0, r3
 800858e:	f000 fab9 	bl	8008b04 <sl_wfx_host_get_firmware_data>
 8008592:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 8105 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 800859c:	4b4d      	ldr	r3, [pc, #308]	@ (80086d4 <sl_wfx_download_run_firmware+0x254>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4611      	mov	r1, r2
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f93c 	bl	8008822 <sl_wfx_compare_keysets>
 80085aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 80f9 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 80085b4:	1d3b      	adds	r3, r7, #4
 80085b6:	2140      	movs	r1, #64	@ 0x40
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 faa3 	bl	8008b04 <sl_wfx_host_get_firmware_data>
 80085be:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 80ef 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2240      	movs	r2, #64	@ 0x40
 80085cc:	4619      	mov	r1, r3
 80085ce:	4845      	ldr	r0, [pc, #276]	@ (80086e4 <sl_wfx_download_run_firmware+0x264>)
 80085d0:	f7ff f878 	bl	80076c4 <sl_wfx_apb_write>
 80085d4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 80e4 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 80085de:	1d3b      	adds	r3, r7, #4
 80085e0:	2108      	movs	r1, #8
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fa8e 	bl	8008b04 <sl_wfx_host_get_firmware_data>
 80085e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 80da 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2208      	movs	r2, #8
 80085f6:	4619      	mov	r1, r3
 80085f8:	483b      	ldr	r0, [pc, #236]	@ (80086e8 <sl_wfx_download_run_firmware+0x268>)
 80085fa:	f7ff f863 	bl	80076c4 <sl_wfx_apb_write>
 80085fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	f040 80cf 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8008608:	2101      	movs	r1, #1
 800860a:	4838      	ldr	r0, [pc, #224]	@ (80086ec <sl_wfx_download_run_firmware+0x26c>)
 800860c:	f7ff f87a 	bl	8007704 <sl_wfx_apb_write_32>
 8008610:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 80c6 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 800861a:	4935      	ldr	r1, [pc, #212]	@ (80086f0 <sl_wfx_download_run_firmware+0x270>)
 800861c:	4825      	ldr	r0, [pc, #148]	@ (80086b4 <sl_wfx_download_run_firmware+0x234>)
 800861e:	f7ff f871 	bl	8007704 <sl_wfx_apb_write_32>
 8008622:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 80bd 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	3b50      	subs	r3, #80	@ 0x50
 8008630:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	3b01      	subs	r3, #1
 8008636:	0a9b      	lsrs	r3, r3, #10
 8008638:	3301      	adds	r3, #1
 800863a:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 800863c:	2300      	movs	r3, #0
 800863e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008640:	e093      	b.n	800876a <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 8008642:	2300      	movs	r3, #0
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008646:	e015      	b.n	8008674 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6a3a      	ldr	r2, [r7, #32]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8008652:	d913      	bls.n	800867c <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 8008654:	2300      	movs	r3, #0
 8008656:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	4619      	mov	r1, r3
 800865e:	4817      	ldr	r0, [pc, #92]	@ (80086bc <sl_wfx_download_run_firmware+0x23c>)
 8008660:	f7ff f867 	bl	8007732 <sl_wfx_apb_read_32>
 8008664:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8008666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008668:	2b00      	cmp	r3, #0
 800866a:	f040 809c 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 800866e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008670:	3301      	adds	r3, #1
 8008672:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	2b63      	cmp	r3, #99	@ 0x63
 8008678:	d9e6      	bls.n	8008648 <sl_wfx_download_run_firmware+0x1c8>
 800867a:	e000      	b.n	800867e <sl_wfx_download_run_firmware+0x1fe>
        break;
 800867c:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	6a3a      	ldr	r2, [r7, #32]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f5b3 4ff8 	cmp.w	r3, #31744	@ 0x7c00
 8008688:	d93a      	bls.n	8008700 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800868a:	f107 0310 	add.w	r3, r7, #16
 800868e:	4619      	mov	r1, r3
 8008690:	480d      	ldr	r0, [pc, #52]	@ (80086c8 <sl_wfx_download_run_firmware+0x248>)
 8008692:	f7ff f84e 	bl	8007732 <sl_wfx_apb_read_32>
 8008696:	62f8      	str	r0, [r7, #44]	@ 0x2c
      SL_WFX_ERROR_CHECK(result);
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	2b00      	cmp	r3, #0
 800869c:	f040 8083 	bne.w	80087a6 <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4a13      	ldr	r2, [pc, #76]	@ (80086f0 <sl_wfx_download_run_firmware+0x270>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d025      	beq.n	80086f4 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 80086a8:	2301      	movs	r3, #1
 80086aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80086ac:	e025      	b.n	80086fa <sl_wfx_download_run_firmware+0x27a>
 80086ae:	bf00      	nop
 80086b0:	12345678 	.word	0x12345678
 80086b4:	0900c00c 	.word	0x0900c00c
 80086b8:	0900c004 	.word	0x0900c004
 80086bc:	0900c008 	.word	0x0900c008
 80086c0:	87654321 	.word	0x87654321
 80086c4:	bd53ef99 	.word	0xbd53ef99
 80086c8:	0900c010 	.word	0x0900c010
 80086cc:	0900c080 	.word	0x0900c080
 80086d0:	0900c0cc 	.word	0x0900c0cc
 80086d4:	20000a98 	.word	0x20000a98
 80086d8:	a753bd99 	.word	0xa753bd99
 80086dc:	09004000 	.word	0x09004000
 80086e0:	0900c000 	.word	0x0900c000
 80086e4:	0900c014 	.word	0x0900c014
 80086e8:	0900c054 	.word	0x0900c054
 80086ec:	0900c05c 	.word	0x0900c05c
 80086f0:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 80086f4:	f640 3302 	movw	r3, #2818	@ 0xb02
 80086f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d152      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	6a3b      	ldr	r3, [r7, #32]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870e:	d902      	bls.n	8008716 <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 8008710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008714:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 8008716:	1d3b      	adds	r3, r7, #4
 8008718:	69f9      	ldr	r1, [r7, #28]
 800871a:	4618      	mov	r0, r3
 800871c:	f000 f9f2 	bl	8008b04 <sl_wfx_host_get_firmware_data>
 8008720:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8008722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d13e      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800872e:	f103 6310 	add.w	r3, r3, #150994944	@ 0x9000000
 8008732:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8008736:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	4619      	mov	r1, r3
 800873e:	6978      	ldr	r0, [r7, #20]
 8008740:	f7fe ffc0 	bl	80076c4 <sl_wfx_apb_write>
 8008744:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 8008746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d12c      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 800874c:	6a3a      	ldr	r2, [r7, #32]
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	4413      	add	r3, r2
 8008752:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 8008754:	6a39      	ldr	r1, [r7, #32]
 8008756:	4816      	ldr	r0, [pc, #88]	@ (80087b0 <sl_wfx_download_run_firmware+0x330>)
 8008758:	f7fe ffd4 	bl	8007704 <sl_wfx_apb_write_32>
 800875c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    SL_WFX_ERROR_CHECK(result);
 800875e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	d120      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 8008764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008766:	3301      	adds	r3, #1
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
 800876a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	429a      	cmp	r2, r3
 8008770:	f4ff af67 	bcc.w	8008642 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8008774:	490f      	ldr	r1, [pc, #60]	@ (80087b4 <sl_wfx_download_run_firmware+0x334>)
 8008776:	4810      	ldr	r0, [pc, #64]	@ (80087b8 <sl_wfx_download_run_firmware+0x338>)
 8008778:	f7fe ffc4 	bl	8007704 <sl_wfx_apb_write_32>
 800877c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 800877e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d110      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8008784:	2264      	movs	r2, #100	@ 0x64
 8008786:	490b      	ldr	r1, [pc, #44]	@ (80087b4 <sl_wfx_download_run_firmware+0x334>)
 8008788:	480c      	ldr	r0, [pc, #48]	@ (80087bc <sl_wfx_download_run_firmware+0x33c>)
 800878a:	f000 f81b 	bl	80087c4 <sl_wfx_poll_for_value>
 800878e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d107      	bne.n	80087a6 <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 8008796:	490a      	ldr	r1, [pc, #40]	@ (80087c0 <sl_wfx_download_run_firmware+0x340>)
 8008798:	4807      	ldr	r0, [pc, #28]	@ (80087b8 <sl_wfx_download_run_firmware+0x338>)
 800879a:	f7fe ffb3 	bl	8007704 <sl_wfx_apb_write_32>
 800879e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  SL_WFX_ERROR_CHECK(result);
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	2b00      	cmp	r3, #0

  error_handler:
 80087a4:	bf00      	nop
  return result;
 80087a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3730      	adds	r7, #48	@ 0x30
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	0900c004 	.word	0x0900c004
 80087b4:	d4c64a99 	.word	0xd4c64a99
 80087b8:	0900c00c 	.word	0x0900c00c
 80087bc:	0900c010 	.word	0x0900c010
 80087c0:	174fc882 	.word	0x174fc882

080087c4 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 80087d4:	e013      	b.n	80087fe <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 80087d6:	f107 0310 	add.w	r3, r7, #16
 80087da:	4619      	mov	r1, r3
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f7fe ffa8 	bl	8007732 <sl_wfx_apb_read_32>
 80087e2:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d116      	bne.n	8008818 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d009      	beq.n	8008806 <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 80087f2:	2001      	movs	r0, #1
 80087f4:	f000 faa4 	bl	8008d40 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d1e8      	bne.n	80087d6 <sl_wfx_poll_for_value+0x12>
 8008804:	e000      	b.n	8008808 <sl_wfx_poll_for_value+0x44>
      break;
 8008806:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	d002      	beq.n	8008816 <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 8008810:	2307      	movs	r3, #7
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	e000      	b.n	8008818 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 8008816:	bf00      	nop
  return result;
 8008818:	697b      	ldr	r3, [r7, #20]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	4603      	mov	r3, r0
 800882a:	6039      	str	r1, [r7, #0]
 800882c:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	799b      	ldrb	r3, [r3, #6]
 8008832:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	79db      	ldrb	r3, [r3, #7]
 8008838:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 800883a:	2300      	movs	r3, #0
 800883c:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 800883e:	f107 0308 	add.w	r3, r7, #8
 8008842:	2210      	movs	r2, #16
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f011 fed6 	bl	801a5f8 <strtoul>
 800884c:	4603      	mov	r3, r0
 800884e:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 8008850:	7afa      	ldrb	r2, [r7, #11]
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	429a      	cmp	r2, r3
 8008856:	d102      	bne.n	800885e <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	e002      	b.n	8008864 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 800885e:	f640 3301 	movw	r3, #2817	@ 0xb01
 8008862:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008864:	68fb      	ldr	r3, [r7, #12]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d05b      	beq.n	800893e <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f241 2256 	movw	r2, #4694	@ 0x1256
 800888c:	4293      	cmp	r3, r2
 800888e:	d045      	beq.n	800891c <sl_wfx_get_status_code+0xac>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f241 2256 	movw	r2, #4694	@ 0x1256
 8008896:	4293      	cmp	r3, r2
 8008898:	d84e      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f241 2234 	movw	r2, #4660	@ 0x1234
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d038      	beq.n	8008916 <sl_wfx_get_status_code+0xa6>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f241 2234 	movw	r2, #4660	@ 0x1234
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d844      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2baf      	cmp	r3, #175	@ 0xaf
 80088b2:	d033      	beq.n	800891c <sl_wfx_get_status_code+0xac>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2baf      	cmp	r3, #175	@ 0xaf
 80088b8:	d83e      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b9e      	cmp	r3, #158	@ 0x9e
 80088be:	d02a      	beq.n	8008916 <sl_wfx_get_status_code+0xa6>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b9e      	cmp	r3, #158	@ 0x9e
 80088c4:	d838      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b8d      	cmp	r3, #141	@ 0x8d
 80088ca:	d027      	beq.n	800891c <sl_wfx_get_status_code+0xac>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b8d      	cmp	r3, #141	@ 0x8d
 80088d0:	d832      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b7c      	cmp	r3, #124	@ 0x7c
 80088d6:	d021      	beq.n	800891c <sl_wfx_get_status_code+0xac>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2b7c      	cmp	r3, #124	@ 0x7c
 80088dc:	d82c      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b6b      	cmp	r3, #107	@ 0x6b
 80088e2:	d01b      	beq.n	800891c <sl_wfx_get_status_code+0xac>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2b6b      	cmp	r3, #107	@ 0x6b
 80088e8:	d826      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d80f      	bhi.n	8008910 <sl_wfx_get_status_code+0xa0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d820      	bhi.n	8008938 <sl_wfx_get_status_code+0xc8>
 80088f6:	a201      	add	r2, pc, #4	@ (adr r2, 80088fc <sl_wfx_get_status_code+0x8c>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008917 	.word	0x08008917
 8008900:	0800891d 	.word	0x0800891d
 8008904:	08008923 	.word	0x08008923
 8008908:	08008929 	.word	0x08008929
 800890c:	08008931 	.word	0x08008931
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b5a      	cmp	r3, #90	@ 0x5a
 8008914:	d110      	bne.n	8008938 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
        break;
 800891a:	e075      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 800891c:	2301      	movs	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]
        break;
 8008920:	e072      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008922:	2321      	movs	r3, #33	@ 0x21
 8008924:	60fb      	str	r3, [r7, #12]
        break;
 8008926:	e06f      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008928:	f640 3304 	movw	r3, #2820	@ 0xb04
 800892c:	60fb      	str	r3, [r7, #12]
        break;
 800892e:	e06b      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8008930:	f640 3303 	movw	r3, #2819	@ 0xb03
 8008934:	60fb      	str	r3, [r7, #12]
        break;
 8008936:	e067      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008938:	2301      	movs	r3, #1
 800893a:	60fb      	str	r3, [r7, #12]
        break;
 800893c:	e064      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2b14      	cmp	r3, #20
 8008942:	d85e      	bhi.n	8008a02 <sl_wfx_get_status_code+0x192>
 8008944:	a201      	add	r2, pc, #4	@ (adr r2, 800894c <sl_wfx_get_status_code+0xdc>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	080089a1 	.word	0x080089a1
 8008950:	080089a7 	.word	0x080089a7
 8008954:	080089ad 	.word	0x080089ad
 8008958:	080089b5 	.word	0x080089b5
 800895c:	080089bb 	.word	0x080089bb
 8008960:	080089c3 	.word	0x080089c3
 8008964:	080089cb 	.word	0x080089cb
 8008968:	080089d3 	.word	0x080089d3
 800896c:	080089db 	.word	0x080089db
 8008970:	080089e3 	.word	0x080089e3
 8008974:	080089eb 	.word	0x080089eb
 8008978:	08008a03 	.word	0x08008a03
 800897c:	08008a03 	.word	0x08008a03
 8008980:	08008a03 	.word	0x08008a03
 8008984:	08008a03 	.word	0x08008a03
 8008988:	08008a03 	.word	0x08008a03
 800898c:	08008a03 	.word	0x08008a03
 8008990:	08008a03 	.word	0x08008a03
 8008994:	08008a03 	.word	0x08008a03
 8008998:	080089f3 	.word	0x080089f3
 800899c:	080089fb 	.word	0x080089fb
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]
        break;
 80089a4:	e030      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 80089a6:	2321      	movs	r3, #33	@ 0x21
 80089a8:	60fb      	str	r3, [r7, #12]
        break;
 80089aa:	e02d      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 80089ac:	f640 3318 	movw	r3, #2840	@ 0xb18
 80089b0:	60fb      	str	r3, [r7, #12]
        break;
 80089b2:	e029      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 80089b4:	2301      	movs	r3, #1
 80089b6:	60fb      	str	r3, [r7, #12]
        break;
 80089b8:	e026      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 80089ba:	f640 3319 	movw	r3, #2841	@ 0xb19
 80089be:	60fb      	str	r3, [r7, #12]
        break;
 80089c0:	e022      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 80089c2:	f640 3304 	movw	r3, #2820	@ 0xb04
 80089c6:	60fb      	str	r3, [r7, #12]
        break;
 80089c8:	e01e      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 80089ca:	f640 331a 	movw	r3, #2842	@ 0xb1a
 80089ce:	60fb      	str	r3, [r7, #12]
        break;
 80089d0:	e01a      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 80089d2:	f640 331b 	movw	r3, #2843	@ 0xb1b
 80089d6:	60fb      	str	r3, [r7, #12]
        break;
 80089d8:	e016      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 80089da:	f640 331c 	movw	r3, #2844	@ 0xb1c
 80089de:	60fb      	str	r3, [r7, #12]
        break;
 80089e0:	e012      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 80089e2:	f640 331d 	movw	r3, #2845	@ 0xb1d
 80089e6:	60fb      	str	r3, [r7, #12]
        break;
 80089e8:	e00e      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 80089ea:	f640 331e 	movw	r3, #2846	@ 0xb1e
 80089ee:	60fb      	str	r3, [r7, #12]
        break;
 80089f0:	e00a      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 80089f2:	f640 331f 	movw	r3, #2847	@ 0xb1f
 80089f6:	60fb      	str	r3, [r7, #12]
        break;
 80089f8:	e006      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 80089fa:	f44f 6332 	mov.w	r3, #2848	@ 0xb20
 80089fe:	60fb      	str	r3, [r7, #12]
        break;
 8008a00:	e002      	b.n	8008a08 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008a02:	2301      	movs	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
        break;
 8008a06:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <sl_wfx_get_status_code+0x1b0>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f640 3204 	movw	r2, #2820	@ 0xb04
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d003      	beq.n	8008a20 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8008a18:	68f9      	ldr	r1, [r7, #12]
 8008a1a:	4804      	ldr	r0, [pc, #16]	@ (8008a2c <sl_wfx_get_status_code+0x1bc>)
 8008a1c:	f000 fafa 	bl	8009014 <sl_wfx_host_log>
  }
#endif
  return result;
 8008a20:	68fb      	ldr	r3, [r7, #12]
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0801d358 	.word	0x0801d358

08008a30 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	4619      	mov	r1, r3
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 fab6 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 8008a4c:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f012 fc51 	bl	801b304 <memset>
  }

  error_handler:
  return result;
 8008a62:	697b      	ldr	r3, [r7, #20]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f000 faac 	bl	8008fdc <sl_wfx_host_free_buffer>
 8008a84:	4603      	mov	r3, r0
  }
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
	...

08008a90 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8008a94:	4b16      	ldr	r3, [pc, #88]	@ (8008af0 <sl_wfx_host_init+0x60>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	2001      	movs	r0, #1
 8008aa0:	f001 fdb0 	bl	800a604 <xQueueGenericCreate>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	4a13      	ldr	r2, [pc, #76]	@ (8008af4 <sl_wfx_host_init+0x64>)
 8008aa8:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008aaa:	2203      	movs	r2, #3
 8008aac:	2100      	movs	r1, #0
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f001 fda8 	bl	800a604 <xQueueGenericCreate>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4a10      	ldr	r2, [pc, #64]	@ (8008af8 <sl_wfx_host_init+0x68>)
 8008ab8:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008aba:	4b0f      	ldr	r3, [pc, #60]	@ (8008af8 <sl_wfx_host_init+0x68>)
 8008abc:	6818      	ldr	r0, [r3, #0]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	f001 fe26 	bl	800a714 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008ac8:	2203      	movs	r2, #3
 8008aca:	2100      	movs	r1, #0
 8008acc:	2001      	movs	r0, #1
 8008ace:	f001 fd99 	bl	800a604 <xQueueGenericCreate>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	4a09      	ldr	r2, [pc, #36]	@ (8008afc <sl_wfx_host_init+0x6c>)
 8008ad6:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2101      	movs	r1, #1
 8008adc:	2001      	movs	r0, #1
 8008ade:	f001 fd91 	bl	800a604 <xQueueGenericCreate>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	4a06      	ldr	r2, [pc, #24]	@ (8008b00 <sl_wfx_host_init+0x70>)
 8008ae6:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	200013dc 	.word	0x200013dc
 8008af4:	200013d8 	.word	0x200013d8
 8008af8:	200013d4 	.word	0x200013d4
 8008afc:	200013d0 	.word	0x200013d0
 8008b00:	200013cc 	.word	0x200013cc

08008b04 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008b0e:	4b09      	ldr	r3, [pc, #36]	@ (8008b34 <sl_wfx_host_get_firmware_data+0x30>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a09      	ldr	r2, [pc, #36]	@ (8008b38 <sl_wfx_host_get_firmware_data+0x34>)
 8008b14:	441a      	add	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008b1a:	4b06      	ldr	r3, [pc, #24]	@ (8008b34 <sl_wfx_host_get_firmware_data+0x30>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	4413      	add	r3, r2
 8008b22:	4a04      	ldr	r2, [pc, #16]	@ (8008b34 <sl_wfx_host_get_firmware_data+0x30>)
 8008b24:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	200013dc 	.word	0x200013dc
 8008b38:	080208a4 	.word	0x080208a4

08008b3c <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a04      	ldr	r2, [pc, #16]	@ (8008b58 <sl_wfx_host_get_firmware_size+0x1c>)
 8008b48:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	0004bc50 	.word	0x0004bc50

08008b5c <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008b68:	4b0e      	ldr	r3, [pc, #56]	@ (8008ba4 <sl_wfx_host_get_pds_data+0x48>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008b70:	2206      	movs	r2, #6
 8008b72:	4619      	mov	r1, r3
 8008b74:	480c      	ldr	r0, [pc, #48]	@ (8008ba8 <sl_wfx_host_get_pds_data+0x4c>)
 8008b76:	f012 fbcd 	bl	801b314 <strncmp>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d106      	bne.n	8008b8e <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8008b80:	887b      	ldrh	r3, [r7, #2]
 8008b82:	4a0a      	ldr	r2, [pc, #40]	@ (8008bac <sl_wfx_host_get_pds_data+0x50>)
 8008b84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	e005      	b.n	8008b9a <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 8008b8e:	887b      	ldrh	r3, [r7, #2]
 8008b90:	4a07      	ldr	r2, [pc, #28]	@ (8008bb0 <sl_wfx_host_get_pds_data+0x54>)
 8008b92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	20000a94 	.word	0x20000a94
 8008ba8:	0801d5f4 	.word	0x0801d5f4
 8008bac:	0802088c 	.word	0x0802088c
 8008bb0:	08020874 	.word	0x08020874

08008bb4 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008bec <sl_wfx_host_get_pds_size+0x38>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8008bc4:	2206      	movs	r2, #6
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4809      	ldr	r0, [pc, #36]	@ (8008bf0 <sl_wfx_host_get_pds_size+0x3c>)
 8008bca:	f012 fba3 	bl	801b314 <strncmp>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2206      	movs	r2, #6
 8008bd8:	801a      	strh	r2, [r3, #0]
 8008bda:	e002      	b.n	8008be2 <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2206      	movs	r2, #6
 8008be0:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20000a94 	.word	0x20000a94
 8008bf0:	0801d5f4 	.word	0x0801d5f4

08008bf4 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008c08:	2200      	movs	r2, #0
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	4808      	ldr	r0, [pc, #32]	@ (8008c30 <sl_wfx_host_reset_chip+0x2c>)
 8008c0e:	f7fc fc1b 	bl	8005448 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008c12:	200a      	movs	r0, #10
 8008c14:	f7fb fc3c 	bl	8004490 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008c18:	2201      	movs	r2, #1
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4804      	ldr	r0, [pc, #16]	@ (8008c30 <sl_wfx_host_reset_chip+0x2c>)
 8008c1e:	f7fc fc13 	bl	8005448 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008c22:	200a      	movs	r0, #10
 8008c24:	f7fb fc34 	bl	8004490 <HAL_Delay>

  return SL_STATUS_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	40020800 	.word	0x40020800

08008c34 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008c3e:	79fb      	ldrb	r3, [r7, #7]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d006      	beq.n	8008c52 <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 8008c44:	2201      	movs	r2, #1
 8008c46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008c4a:	4807      	ldr	r0, [pc, #28]	@ (8008c68 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008c4c:	f7fc fbfc 	bl	8005448 <HAL_GPIO_WritePin>
 8008c50:	e005      	b.n	8008c5e <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 8008c52:	2200      	movs	r2, #0
 8008c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008c58:	4803      	ldr	r0, [pc, #12]	@ (8008c68 <sl_wfx_host_set_wake_up_pin+0x34>)
 8008c5a:	f7fc fbf5 	bl	8005448 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	40020400 	.word	0x40020400

08008c6c <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8008c70:	4b07      	ldr	r3, [pc, #28]	@ (8008c90 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2100      	movs	r1, #0
 8008c76:	4618      	mov	r0, r3
 8008c78:	f002 f85e 	bl	800ad38 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2101      	movs	r1, #1
 8008c82:	4618      	mov	r0, r3
 8008c84:	f002 f858 	bl	800ad38 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200013d0 	.word	0x200013d0

08008c94 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	603a      	str	r2, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 8008ca4:	f640 3308 	movw	r3, #2824	@ 0xb08
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008cbe:	4a05      	ldr	r2, [pc, #20]	@ (8008cd4 <sl_wfx_host_setup_waited_event+0x20>)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	200013dc 	.word	0x200013dc

08008cd8 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b086      	sub	sp, #24
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]
 8008cea:	e01b      	b.n	8008d24 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008cec:	4b12      	ldr	r3, [pc, #72]	@ (8008d38 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f107 0113 	add.w	r1, r7, #19
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 ff3c 	bl	800ab74 <xQueueReceive>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d10d      	bne.n	8008d1e <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8008d02:	7cfb      	ldrb	r3, [r7, #19]
 8008d04:	7bfa      	ldrb	r2, [r7, #15]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d109      	bne.n	8008d1e <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008d10:	4b0a      	ldr	r3, [pc, #40]	@ (8008d3c <sl_wfx_host_wait_for_confirmation+0x64>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e007      	b.n	8008d2e <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3301      	adds	r3, #1
 8008d22:	617b      	str	r3, [r7, #20]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d3df      	bcc.n	8008cec <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008d2c:	2307      	movs	r3, #7
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200013cc 	.word	0x200013cc
 8008d3c:	20000a94 	.word	0x20000a94

08008d40 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f80b 	bl	8009d64 <osDelay>
  
  return SL_STATUS_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08a      	sub	sp, #40	@ 0x28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	789b      	ldrb	r3, [r3, #2]
 8008d64:	3bc3      	subs	r3, #195	@ 0xc3
 8008d66:	2b21      	cmp	r3, #33	@ 0x21
 8008d68:	f200 80f3 	bhi.w	8008f52 <sl_wfx_host_post_event+0x1fa>
 8008d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d74 <sl_wfx_host_post_event+0x1c>)
 8008d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d72:	bf00      	nop
 8008d74:	08008dfd 	.word	0x08008dfd
 8008d78:	08008e05 	.word	0x08008e05
 8008d7c:	08008e0d 	.word	0x08008e0d
 8008d80:	08008f53 	.word	0x08008f53
 8008d84:	08008e15 	.word	0x08008e15
 8008d88:	08008f53 	.word	0x08008f53
 8008d8c:	08008f53 	.word	0x08008f53
 8008d90:	08008e1d 	.word	0x08008e1d
 8008d94:	08008e33 	.word	0x08008e33
 8008d98:	08008e3b 	.word	0x08008e3b
 8008d9c:	08008e43 	.word	0x08008e43
 8008da0:	08008e4b 	.word	0x08008e4b
 8008da4:	08008e53 	.word	0x08008e53
 8008da8:	08008f53 	.word	0x08008f53
 8008dac:	08008f53 	.word	0x08008f53
 8008db0:	08008e5b 	.word	0x08008e5b
 8008db4:	08008f53 	.word	0x08008f53
 8008db8:	08008f53 	.word	0x08008f53
 8008dbc:	08008f53 	.word	0x08008f53
 8008dc0:	08008f53 	.word	0x08008f53
 8008dc4:	08008f53 	.word	0x08008f53
 8008dc8:	08008f53 	.word	0x08008f53
 8008dcc:	08008f53 	.word	0x08008f53
 8008dd0:	08008f53 	.word	0x08008f53
 8008dd4:	08008f53 	.word	0x08008f53
 8008dd8:	08008f53 	.word	0x08008f53
 8008ddc:	08008f53 	.word	0x08008f53
 8008de0:	08008f53 	.word	0x08008f53
 8008de4:	08008f53 	.word	0x08008f53
 8008de8:	08008e63 	.word	0x08008e63
 8008dec:	08008f53 	.word	0x08008f53
 8008df0:	08008f53 	.word	0x08008f53
 8008df4:	08008f53 	.word	0x08008f53
 8008df8:	08008edf 	.word	0x08008edf
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fa41 	bl	8009284 <sl_wfx_connect_callback>
      break;
 8008e02:	e0a6      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fb4d 	bl	80094a4 <sl_wfx_disconnect_callback>
      break;
 8008e0a:	e0a2      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fb87 	bl	8009520 <sl_wfx_start_ap_callback>
      break;
 8008e12:	e09e      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fbdd 	bl	80095d4 <sl_wfx_stop_ap_callback>
      break;
 8008e1a:	e09a      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	791b      	ldrb	r3, [r3, #4]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 8093 	bne.w	8008f50 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7fa f948 	bl	80030c0 <sl_wfx_host_received_frame_callback>
      }
      break;
 8008e30:	e08e      	b.n	8008f50 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f92e 	bl	8009094 <sl_wfx_scan_result_callback>
      break;
 8008e38:	e08b      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9ee 	bl	800921c <sl_wfx_scan_complete_callback>
      break;
 8008e40:	e087      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fc02 	bl	800964c <sl_wfx_ap_client_connected_callback>
      break;
 8008e48:	e083      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fc3c 	bl	80096c8 <sl_wfx_ap_client_rejected_callback>
      break;
 8008e50:	e07f      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc6e 	bl	8009734 <sl_wfx_ap_client_disconnected_callback>
      break;
 8008e58:	e07b      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fca0 	bl	80097a0 <sl_wfx_ext_auth_callback>
      break;
 8008e60:	e077      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	627b      	str	r3, [r7, #36]	@ 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	4849      	ldr	r0, [pc, #292]	@ (8008f98 <sl_wfx_host_post_event+0x240>)
 8008e72:	f012 f8e5 	bl	801b040 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008e76:	2300      	movs	r3, #0
 8008e78:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008e7a:	e029      	b.n	8008ed0 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8008e7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4846      	ldr	r0, [pc, #280]	@ (8008f9c <sl_wfx_host_post_event+0x244>)
 8008e82:	f012 f8dd 	bl	801b040 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8008e8c:	e00d      	b.n	8008eaa <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	4619      	mov	r1, r3
 8008e94:	4842      	ldr	r0, [pc, #264]	@ (8008fa0 <sl_wfx_host_post_event+0x248>)
 8008e96:	f012 f8d3 	bl	801b040 <iprintf>
            exception_tmp++;
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008ea0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8008eaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008eae:	2b0f      	cmp	r3, #15
 8008eb0:	d808      	bhi.n	8008ec4 <sl_wfx_host_post_event+0x16c>
 8008eb2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008eb4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008eb8:	4413      	add	r3, r2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	8812      	ldrh	r2, [r2, #0]
 8008ebe:	b292      	uxth	r2, r2
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	dbe4      	blt.n	8008e8e <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8008ec4:	4837      	ldr	r0, [pc, #220]	@ (8008fa4 <sl_wfx_host_post_event+0x24c>)
 8008ec6:	f012 f923 	bl	801b110 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008eca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ecc:	3310      	adds	r3, #16
 8008ece:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d3cf      	bcc.n	8008e7c <sl_wfx_host_post_event+0x124>
      }
      break;
 8008edc:	e039      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	4619      	mov	r1, r3
 8008eec:	482e      	ldr	r0, [pc, #184]	@ (8008fa8 <sl_wfx_host_post_event+0x250>)
 8008eee:	f012 f8a7 	bl	801b040 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	837b      	strh	r3, [r7, #26]
 8008ef6:	e024      	b.n	8008f42 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8008ef8:	8b7b      	ldrh	r3, [r7, #26]
 8008efa:	4619      	mov	r1, r3
 8008efc:	4827      	ldr	r0, [pc, #156]	@ (8008f9c <sl_wfx_host_post_event+0x244>)
 8008efe:	f012 f89f 	bl	801b040 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008f02:	2300      	movs	r3, #0
 8008f04:	767b      	strb	r3, [r7, #25]
 8008f06:	e00b      	b.n	8008f20 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4824      	ldr	r0, [pc, #144]	@ (8008fa0 <sl_wfx_host_post_event+0x248>)
 8008f10:	f012 f896 	bl	801b040 <iprintf>
            error_tmp++;
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	3301      	adds	r3, #1
 8008f18:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008f1a:	7e7b      	ldrb	r3, [r7, #25]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	767b      	strb	r3, [r7, #25]
 8008f20:	7e7b      	ldrb	r3, [r7, #25]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	d807      	bhi.n	8008f36 <sl_wfx_host_post_event+0x1de>
 8008f26:	8b7a      	ldrh	r2, [r7, #26]
 8008f28:	7e7b      	ldrb	r3, [r7, #25]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	8812      	ldrh	r2, [r2, #0]
 8008f30:	b292      	uxth	r2, r2
 8008f32:	4293      	cmp	r3, r2
 8008f34:	dbe8      	blt.n	8008f08 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 8008f36:	481b      	ldr	r0, [pc, #108]	@ (8008fa4 <sl_wfx_host_post_event+0x24c>)
 8008f38:	f012 f8ea 	bl	801b110 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008f3c:	8b7b      	ldrh	r3, [r7, #26]
 8008f3e:	3310      	adds	r3, #16
 8008f40:	837b      	strh	r3, [r7, #26]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8b7a      	ldrh	r2, [r7, #26]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d3d4      	bcc.n	8008ef8 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 8008f4e:	e000      	b.n	8008f52 <sl_wfx_host_post_event+0x1fa>
      break;
 8008f50:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 8008f52:	4b16      	ldr	r3, [pc, #88]	@ (8008fac <sl_wfx_host_post_event+0x254>)
 8008f54:	791a      	ldrb	r2, [r3, #4]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	789b      	ldrb	r3, [r3, #2]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d117      	bne.n	8008f8e <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f68:	d211      	bcs.n	8008f8e <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 8008f6a:	4b11      	ldr	r3, [pc, #68]	@ (8008fb0 <sl_wfx_host_post_event+0x258>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 8008f76:	461a      	mov	r2, r3
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	f012 fa80 	bl	801b47e <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 8008f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008fb4 <sl_wfx_host_post_event+0x25c>)
 8008f80:	6818      	ldr	r0, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	1c99      	adds	r1, r3, #2
 8008f86:	2302      	movs	r3, #2
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f001 fbc3 	bl	800a714 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3728      	adds	r7, #40	@ 0x28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	0801d5fc 	.word	0x0801d5fc
 8008f9c:	0801d618 	.word	0x0801d618
 8008fa0:	0801d624 	.word	0x0801d624
 8008fa4:	0801d62c 	.word	0x0801d62c
 8008fa8:	0801d630 	.word	0x0801d630
 8008fac:	200013dc 	.word	0x200013dc
 8008fb0:	20000a94 	.word	0x20000a94
 8008fb4:	200013cc 	.word	0x200013cc

08008fb8 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	607a      	str	r2, [r7, #4]
 8008fc4:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f004 f8c0 	bl	800d14c <pvPortMalloc>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f004 f97d 	bl	800d2e8 <vPortFree>
  
  return SL_STATUS_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7fe fb4c 	bl	80076a2 <sl_wfx_data_write>
 800900a:	4603      	mov	r3, r0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 8009014:	b40f      	push	{r0, r1, r2, r3}
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 800901c:	f107 0314 	add.w	r3, r7, #20
 8009020:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	6938      	ldr	r0, [r7, #16]
 8009026:	f012 f8bf 	bl	801b1a8 <viprintf>
  va_end(valist);
}
 800902a:	bf00      	nop
 800902c:	3708      	adds	r7, #8
 800902e:	46bd      	mov	sp, r7
 8009030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009034:	b004      	add	sp, #16
 8009036:	4770      	bx	lr

08009038 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 800903e:	2307      	movs	r3, #7
 8009040:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 8009042:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <sl_wfx_host_lock+0x38>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800904a:	4618      	mov	r0, r3
 800904c:	f001 fe74 	bl	800ad38 <xQueueSemaphoreTake>
 8009050:	4603      	mov	r3, r0
 8009052:	2b01      	cmp	r3, #1
 8009054:	d102      	bne.n	800905c <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	607b      	str	r3, [r7, #4]
 800905a:	e004      	b.n	8009066 <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 800905c:	4805      	ldr	r0, [pc, #20]	@ (8009074 <sl_wfx_host_lock+0x3c>)
 800905e:	f012 f857 	bl	801b110 <puts>
	      status = SL_STATUS_TIMEOUT;
 8009062:	2307      	movs	r3, #7
 8009064:	607b      	str	r3, [r7, #4]
	    }

  return status;
 8009066:	687b      	ldr	r3, [r7, #4]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	200013d4 	.word	0x200013d4
 8009074:	0801d648 	.word	0x0801d648

08009078 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 800907c:	4b04      	ldr	r3, [pc, #16]	@ (8009090 <sl_wfx_host_unlock+0x18>)
 800907e:	6818      	ldr	r0, [r3, #0]
 8009080:	2300      	movs	r3, #0
 8009082:	2200      	movs	r2, #0
 8009084:	2100      	movs	r1, #0
 8009086:	f001 fb45 	bl	800a714 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200013d4 	.word	0x200013d4

08009094 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8009094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009098:	b08a      	sub	sp, #40	@ 0x28
 800909a:	af08      	add	r7, sp, #32
 800909c:	6078      	str	r0, [r7, #4]
  scan_count++;
 800909e:	4b5b      	ldr	r3, [pc, #364]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	4b59      	ldr	r3, [pc, #356]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 80090a8:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 80090aa:	4b59      	ldr	r3, [pc, #356]	@ (8009210 <sl_wfx_scan_result_callback+0x17c>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d03e      	beq.n	8009130 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 80090b2:	4b56      	ldr	r3, [pc, #344]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090bc:	b29b      	uxth	r3, r3
    printf(
 80090be:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3330      	adds	r3, #48	@ 0x30
 80090c4:	781b      	ldrb	r3, [r3, #0]
    printf(
 80090c6:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3bdc      	subs	r3, #220	@ 0xdc
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	b21b      	sxth	r3, r3
    printf(
 80090d4:	0fda      	lsrs	r2, r3, #31
 80090d6:	4413      	add	r3, r2
 80090d8:	105b      	asrs	r3, r3, #1
 80090da:	b21b      	sxth	r3, r3
 80090dc:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    printf(
 80090e4:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    printf(
 80090ec:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    printf(
 80090f4:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    printf(
 80090fc:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    printf(
 8009104:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    printf(
 800910c:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	3308      	adds	r3, #8
    printf(
 8009112:	9307      	str	r3, [sp, #28]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	9306      	str	r3, [sp, #24]
 8009118:	9605      	str	r6, [sp, #20]
 800911a:	9504      	str	r5, [sp, #16]
 800911c:	9403      	str	r4, [sp, #12]
 800911e:	9002      	str	r0, [sp, #8]
 8009120:	9101      	str	r1, [sp, #4]
 8009122:	9200      	str	r2, [sp, #0]
 8009124:	4643      	mov	r3, r8
 8009126:	4672      	mov	r2, lr
 8009128:	4661      	mov	r1, ip
 800912a:	483a      	ldr	r0, [pc, #232]	@ (8009214 <sl_wfx_scan_result_callback+0x180>)
 800912c:	f011 ff88 	bl	801b040 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 8009130:	4b36      	ldr	r3, [pc, #216]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b32      	cmp	r3, #50	@ 0x32
 8009136:	d863      	bhi.n	8009200 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 8009138:	4b34      	ldr	r3, [pc, #208]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	4936      	ldr	r1, [pc, #216]	@ (8009218 <sl_wfx_scan_result_callback+0x184>)
 8009140:	4613      	mov	r3, r2
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	4413      	add	r3, r2
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	18ca      	adds	r2, r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3304      	adds	r3, #4
 8009150:	4610      	mov	r0, r2
 8009152:	f103 0420 	add.w	r4, r3, #32
 8009156:	4602      	mov	r2, r0
 8009158:	4619      	mov	r1, r3
 800915a:	f8d1 c000 	ldr.w	ip, [r1]
 800915e:	684e      	ldr	r6, [r1, #4]
 8009160:	688d      	ldr	r5, [r1, #8]
 8009162:	68c9      	ldr	r1, [r1, #12]
 8009164:	f8c2 c000 	str.w	ip, [r2]
 8009168:	6056      	str	r6, [r2, #4]
 800916a:	6095      	str	r5, [r2, #8]
 800916c:	60d1      	str	r1, [r2, #12]
 800916e:	3310      	adds	r3, #16
 8009170:	3010      	adds	r0, #16
 8009172:	42a3      	cmp	r3, r4
 8009174:	d1ef      	bne.n	8009156 <sl_wfx_scan_result_callback+0xc2>
 8009176:	4602      	mov	r2, r0
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 800917c:	4b23      	ldr	r3, [pc, #140]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	1e5a      	subs	r2, r3, #1
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009186:	b298      	uxth	r0, r3
 8009188:	4923      	ldr	r1, [pc, #140]	@ (8009218 <sl_wfx_scan_result_callback+0x184>)
 800918a:	4613      	mov	r3, r2
 800918c:	005b      	lsls	r3, r3, #1
 800918e:	4413      	add	r3, r2
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	440b      	add	r3, r1
 8009196:	332a      	adds	r3, #42	@ 0x2a
 8009198:	4602      	mov	r2, r0
 800919a:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 800919c:	4b1b      	ldr	r3, [pc, #108]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	1e5a      	subs	r2, r3, #1
 80091a2:	491d      	ldr	r1, [pc, #116]	@ (8009218 <sl_wfx_scan_result_callback+0x184>)
 80091a4:	4613      	mov	r3, r2
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	4413      	add	r3, r2
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	1a9b      	subs	r3, r3, r2
 80091ae:	440b      	add	r3, r1
 80091b0:	332c      	adds	r3, #44	@ 0x2c
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80091b8:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 80091ba:	4b14      	ldr	r3, [pc, #80]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	1e5a      	subs	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80091c4:	b298      	uxth	r0, r3
 80091c6:	4914      	ldr	r1, [pc, #80]	@ (8009218 <sl_wfx_scan_result_callback+0x184>)
 80091c8:	4613      	mov	r3, r2
 80091ca:	005b      	lsls	r3, r3, #1
 80091cc:	4413      	add	r3, r2
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	1a9b      	subs	r3, r3, r2
 80091d2:	440b      	add	r3, r1
 80091d4:	3328      	adds	r3, #40	@ 0x28
 80091d6:	4602      	mov	r2, r0
 80091d8:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 80091dc:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <sl_wfx_scan_result_callback+0x178>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	1e5a      	subs	r2, r3, #1
 80091e2:	4613      	mov	r3, r2
 80091e4:	005b      	lsls	r3, r3, #1
 80091e6:	4413      	add	r3, r2
 80091e8:	011b      	lsls	r3, r3, #4
 80091ea:	1a9b      	subs	r3, r3, r2
 80091ec:	3320      	adds	r3, #32
 80091ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009218 <sl_wfx_scan_result_callback+0x184>)
 80091f0:	4413      	add	r3, r2
 80091f2:	1d18      	adds	r0, r3, #4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3328      	adds	r3, #40	@ 0x28
 80091f8:	2206      	movs	r2, #6
 80091fa:	4619      	mov	r1, r3
 80091fc:	f012 f93f 	bl	801b47e <memcpy>
  }
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800920a:	bf00      	nop
 800920c:	200013ca 	.word	0x200013ca
 8009210:	200000a9 	.word	0x200000a9
 8009214:	0801d664 	.word	0x0801d664
 8009218:	20000a9c 	.word	0x20000a9c

0800921c <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 8009224:	4b14      	ldr	r3, [pc, #80]	@ (8009278 <sl_wfx_scan_complete_callback+0x5c>)
 8009226:	781a      	ldrb	r2, [r3, #0]
 8009228:	4b14      	ldr	r3, [pc, #80]	@ (800927c <sl_wfx_scan_complete_callback+0x60>)
 800922a:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 800922c:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <sl_wfx_scan_complete_callback+0x5c>)
 800922e:	2200      	movs	r2, #0
 8009230:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009238:	461a      	mov	r2, r3
 800923a:	f107 0308 	add.w	r3, r7, #8
 800923e:	2101      	movs	r1, #1
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff feb9 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 8009246:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10f      	bne.n	800926e <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 800924e:	68b8      	ldr	r0, [r7, #8]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	461a      	mov	r2, r3
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	f012 f910 	bl	801b47e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800925e:	4b08      	ldr	r3, [pc, #32]	@ (8009280 <sl_wfx_scan_complete_callback+0x64>)
 8009260:	6818      	ldr	r0, [r3, #0]
 8009262:	f107 0108 	add.w	r1, r7, #8
 8009266:	2300      	movs	r3, #0
 8009268:	2200      	movs	r2, #0
 800926a:	f001 fa53 	bl	800a714 <xQueueGenericSend>
  }
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	200013ca 	.word	0x200013ca
 800927c:	200013cb 	.word	0x200013cb
 8009280:	200013e4 	.word	0x200013e4

08009284 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 8009284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	2b0a      	cmp	r3, #10
 8009292:	f200 80d3 	bhi.w	800943c <sl_wfx_connect_callback+0x1b8>
 8009296:	a201      	add	r2, pc, #4	@ (adr r2, 800929c <sl_wfx_connect_callback+0x18>)
 8009298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	0800943d 	.word	0x0800943d
 80092a4:	0800943d 	.word	0x0800943d
 80092a8:	0800943d 	.word	0x0800943d
 80092ac:	0800943d 	.word	0x0800943d
 80092b0:	0800943d 	.word	0x0800943d
 80092b4:	08009327 	.word	0x08009327
 80092b8:	0800936b 	.word	0x0800936b
 80092bc:	08009399 	.word	0x08009399
 80092c0:	080093c7 	.word	0x080093c7
 80092c4:	08009403 	.word	0x08009403
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 80092c8:	496a      	ldr	r1, [pc, #424]	@ (8009474 <sl_wfx_connect_callback+0x1f0>)
 80092ca:	486b      	ldr	r0, [pc, #428]	@ (8009478 <sl_wfx_connect_callback+0x1f4>)
 80092cc:	f011 feb8 	bl	801b040 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 80092d0:	4b6a      	ldr	r3, [pc, #424]	@ (800947c <sl_wfx_connect_callback+0x1f8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80092d8:	4b68      	ldr	r3, [pc, #416]	@ (800947c <sl_wfx_connect_callback+0x1f8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f042 0202 	orr.w	r2, r2, #2
 80092e0:	b2d2      	uxtb	r2, r2
 80092e2:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 80092ec:	461a      	mov	r2, r3
 80092ee:	f107 0308 	add.w	r3, r7, #8
 80092f2:	2101      	movs	r1, #1
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff fe5f 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 80092fa:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f040 80b3 	bne.w	800946a <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 8009304:	68b8      	ldr	r0, [r7, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29b      	uxth	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	f012 f8b5 	bl	801b47e <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 8009314:	4b5a      	ldr	r3, [pc, #360]	@ (8009480 <sl_wfx_connect_callback+0x1fc>)
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	f107 0108 	add.w	r1, r7, #8
 800931c:	2300      	movs	r3, #0
 800931e:	2200      	movs	r2, #0
 8009320:	f001 f9f8 	bl	800a714 <xQueueGenericSend>
      }
      break;
 8009324:	e0a1      	b.n	800946a <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 8009326:	4b57      	ldr	r3, [pc, #348]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 8009328:	4a57      	ldr	r2, [pc, #348]	@ (8009488 <sl_wfx_connect_callback+0x204>)
 800932a:	4614      	mov	r4, r2
 800932c:	469c      	mov	ip, r3
 800932e:	f104 0e20 	add.w	lr, r4, #32
 8009332:	4665      	mov	r5, ip
 8009334:	4626      	mov	r6, r4
 8009336:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009338:	6028      	str	r0, [r5, #0]
 800933a:	6069      	str	r1, [r5, #4]
 800933c:	60aa      	str	r2, [r5, #8]
 800933e:	60eb      	str	r3, [r5, #12]
 8009340:	3410      	adds	r4, #16
 8009342:	f10c 0c10 	add.w	ip, ip, #16
 8009346:	4574      	cmp	r4, lr
 8009348:	d1f3      	bne.n	8009332 <sl_wfx_connect_callback+0xae>
 800934a:	4662      	mov	r2, ip
 800934c:	4623      	mov	r3, r4
 800934e:	cb03      	ldmia	r3!, {r0, r1}
 8009350:	6010      	str	r0, [r2, #0]
 8009352:	6051      	str	r1, [r2, #4]
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 8009358:	484a      	ldr	r0, [pc, #296]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 800935a:	f011 fe71 	bl	801b040 <iprintf>
      printf("\r\n");
 800935e:	484b      	ldr	r0, [pc, #300]	@ (800948c <sl_wfx_connect_callback+0x208>)
 8009360:	f011 fed6 	bl	801b110 <puts>
      wifi_autoconnexion_init();
 8009364:	f7f8 fa58 	bl	8001818 <wifi_autoconnexion_init>
      break;
 8009368:	e080      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800936a:	4a46      	ldr	r2, [pc, #280]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 800936c:	4b48      	ldr	r3, [pc, #288]	@ (8009490 <sl_wfx_connect_callback+0x20c>)
 800936e:	4615      	mov	r5, r2
 8009370:	461c      	mov	r4, r3
 8009372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009374:	6028      	str	r0, [r5, #0]
 8009376:	6069      	str	r1, [r5, #4]
 8009378:	60aa      	str	r2, [r5, #8]
 800937a:	60eb      	str	r3, [r5, #12]
 800937c:	8823      	ldrh	r3, [r4, #0]
 800937e:	78a2      	ldrb	r2, [r4, #2]
 8009380:	822b      	strh	r3, [r5, #16]
 8009382:	4613      	mov	r3, r2
 8009384:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8009386:	483f      	ldr	r0, [pc, #252]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 8009388:	f011 fe5a 	bl	801b040 <iprintf>
      printf("\r\n");
 800938c:	483f      	ldr	r0, [pc, #252]	@ (800948c <sl_wfx_connect_callback+0x208>)
 800938e:	f011 febf 	bl	801b110 <puts>
      wifi_autoconnexion_init();
 8009392:	f7f8 fa41 	bl	8001818 <wifi_autoconnexion_init>
      break;
 8009396:	e069      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 8009398:	4a3a      	ldr	r2, [pc, #232]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 800939a:	4b3e      	ldr	r3, [pc, #248]	@ (8009494 <sl_wfx_connect_callback+0x210>)
 800939c:	4615      	mov	r5, r2
 800939e:	461c      	mov	r4, r3
 80093a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093a2:	6028      	str	r0, [r5, #0]
 80093a4:	6069      	str	r1, [r5, #4]
 80093a6:	60aa      	str	r2, [r5, #8]
 80093a8:	60eb      	str	r3, [r5, #12]
 80093aa:	8823      	ldrh	r3, [r4, #0]
 80093ac:	78a2      	ldrb	r2, [r4, #2]
 80093ae:	822b      	strh	r3, [r5, #16]
 80093b0:	4613      	mov	r3, r2
 80093b2:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 80093b4:	4833      	ldr	r0, [pc, #204]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 80093b6:	f011 fe43 	bl	801b040 <iprintf>
      printf("\r\n");
 80093ba:	4834      	ldr	r0, [pc, #208]	@ (800948c <sl_wfx_connect_callback+0x208>)
 80093bc:	f011 fea8 	bl	801b110 <puts>
      wifi_autoconnexion_init();
 80093c0:	f7f8 fa2a 	bl	8001818 <wifi_autoconnexion_init>
      break;
 80093c4:	e052      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 80093c6:	4b2f      	ldr	r3, [pc, #188]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 80093c8:	4a33      	ldr	r2, [pc, #204]	@ (8009498 <sl_wfx_connect_callback+0x214>)
 80093ca:	4614      	mov	r4, r2
 80093cc:	469c      	mov	ip, r3
 80093ce:	f104 0e20 	add.w	lr, r4, #32
 80093d2:	4665      	mov	r5, ip
 80093d4:	4626      	mov	r6, r4
 80093d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093d8:	6028      	str	r0, [r5, #0]
 80093da:	6069      	str	r1, [r5, #4]
 80093dc:	60aa      	str	r2, [r5, #8]
 80093de:	60eb      	str	r3, [r5, #12]
 80093e0:	3410      	adds	r4, #16
 80093e2:	f10c 0c10 	add.w	ip, ip, #16
 80093e6:	4574      	cmp	r4, lr
 80093e8:	d1f3      	bne.n	80093d2 <sl_wfx_connect_callback+0x14e>
 80093ea:	4662      	mov	r2, ip
 80093ec:	4623      	mov	r3, r4
 80093ee:	cb03      	ldmia	r3!, {r0, r1}
 80093f0:	6010      	str	r0, [r2, #0]
 80093f2:	6051      	str	r1, [r2, #4]
      printf(event_log);
 80093f4:	4823      	ldr	r0, [pc, #140]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 80093f6:	f011 fe23 	bl	801b040 <iprintf>
      printf("\r\n");
 80093fa:	4824      	ldr	r0, [pc, #144]	@ (800948c <sl_wfx_connect_callback+0x208>)
 80093fc:	f011 fe88 	bl	801b110 <puts>
      break;
 8009400:	e034      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 8009402:	4b20      	ldr	r3, [pc, #128]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 8009404:	4a25      	ldr	r2, [pc, #148]	@ (800949c <sl_wfx_connect_callback+0x218>)
 8009406:	4614      	mov	r4, r2
 8009408:	469c      	mov	ip, r3
 800940a:	f104 0e20 	add.w	lr, r4, #32
 800940e:	4665      	mov	r5, ip
 8009410:	4626      	mov	r6, r4
 8009412:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009414:	6028      	str	r0, [r5, #0]
 8009416:	6069      	str	r1, [r5, #4]
 8009418:	60aa      	str	r2, [r5, #8]
 800941a:	60eb      	str	r3, [r5, #12]
 800941c:	3410      	adds	r4, #16
 800941e:	f10c 0c10 	add.w	ip, ip, #16
 8009422:	4574      	cmp	r4, lr
 8009424:	d1f3      	bne.n	800940e <sl_wfx_connect_callback+0x18a>
 8009426:	4662      	mov	r2, ip
 8009428:	4623      	mov	r3, r4
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 800942e:	4815      	ldr	r0, [pc, #84]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 8009430:	f011 fe06 	bl	801b040 <iprintf>
      printf("\r\n");
 8009434:	4815      	ldr	r0, [pc, #84]	@ (800948c <sl_wfx_connect_callback+0x208>)
 8009436:	f011 fe6b 	bl	801b110 <puts>
      break;
 800943a:	e017      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 800943c:	4a11      	ldr	r2, [pc, #68]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 800943e:	4b18      	ldr	r3, [pc, #96]	@ (80094a0 <sl_wfx_connect_callback+0x21c>)
 8009440:	4615      	mov	r5, r2
 8009442:	461c      	mov	r4, r3
 8009444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009446:	6028      	str	r0, [r5, #0]
 8009448:	6069      	str	r1, [r5, #4]
 800944a:	60aa      	str	r2, [r5, #8]
 800944c:	60eb      	str	r3, [r5, #12]
 800944e:	cc03      	ldmia	r4!, {r0, r1}
 8009450:	6128      	str	r0, [r5, #16]
 8009452:	6169      	str	r1, [r5, #20]
 8009454:	7823      	ldrb	r3, [r4, #0]
 8009456:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 8009458:	480a      	ldr	r0, [pc, #40]	@ (8009484 <sl_wfx_connect_callback+0x200>)
 800945a:	f011 fdf1 	bl	801b040 <iprintf>
      printf("\r\n");
 800945e:	480b      	ldr	r0, [pc, #44]	@ (800948c <sl_wfx_connect_callback+0x208>)
 8009460:	f011 fe56 	bl	801b110 <puts>
      wifi_autoconnexion_init();
 8009464:	f7f8 f9d8 	bl	8001818 <wifi_autoconnexion_init>
    }
  }
}
 8009468:	e000      	b.n	800946c <sl_wfx_connect_callback+0x1e8>
      break;
 800946a:	bf00      	nop
}
 800946c:	bf00      	nop
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009474:	0801d69c 	.word	0x0801d69c
 8009478:	0801d6a8 	.word	0x0801d6a8
 800947c:	20000a94 	.word	0x20000a94
 8009480:	200013e4 	.word	0x200013e4
 8009484:	2000089c 	.word	0x2000089c
 8009488:	0801d6c4 	.word	0x0801d6c4
 800948c:	0801d62c 	.word	0x0801d62c
 8009490:	0801d6f0 	.word	0x0801d6f0
 8009494:	0801d704 	.word	0x0801d704
 8009498:	0801d718 	.word	0x0801d718
 800949c:	0801d740 	.word	0x0801d740
 80094a0:	0801d764 	.word	0x0801d764

080094a4 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	895b      	ldrh	r3, [r3, #10]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	4817      	ldr	r0, [pc, #92]	@ (8009514 <sl_wfx_disconnect_callback+0x70>)
 80094b6:	f011 fdc3 	bl	801b040 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 80094ba:	4b17      	ldr	r3, [pc, #92]	@ (8009518 <sl_wfx_disconnect_callback+0x74>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80094c2:	4b15      	ldr	r3, [pc, #84]	@ (8009518 <sl_wfx_disconnect_callback+0x74>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f022 0202 	bic.w	r2, r2, #2
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80094d6:	461a      	mov	r2, r3
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	2101      	movs	r1, #1
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff fd6a 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 80094e4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10f      	bne.n	800950c <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	461a      	mov	r2, r3
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	f011 ffc1 	bl	801b47e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80094fc:	4b07      	ldr	r3, [pc, #28]	@ (800951c <sl_wfx_disconnect_callback+0x78>)
 80094fe:	6818      	ldr	r0, [r3, #0]
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	2300      	movs	r3, #0
 8009506:	2200      	movs	r2, #0
 8009508:	f001 f904 	bl	800a714 <xQueueGenericSend>
  }
}
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	0801d780 	.word	0x0801d780
 8009518:	20000a94 	.word	0x20000a94
 800951c:	200013e4 	.word	0x200013e4

08009520 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d130      	bne.n	8009592 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 8009530:	4820      	ldr	r0, [pc, #128]	@ (80095b4 <sl_wfx_start_ap_callback+0x94>)
 8009532:	f011 fded 	bl	801b110 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 8009536:	4920      	ldr	r1, [pc, #128]	@ (80095b8 <sl_wfx_start_ap_callback+0x98>)
 8009538:	4820      	ldr	r0, [pc, #128]	@ (80095bc <sl_wfx_start_ap_callback+0x9c>)
 800953a:	f011 fd81 	bl	801b040 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 800953e:	4b20      	ldr	r3, [pc, #128]	@ (80095c0 <sl_wfx_start_ap_callback+0xa0>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 8009546:	4b1e      	ldr	r3, [pc, #120]	@ (80095c0 <sl_wfx_start_ap_callback+0xa0>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f042 0204 	orr.w	r2, r2, #4
 800954e:	b2d2      	uxtb	r2, r2
 8009550:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 800955a:	461a      	mov	r2, r3
 800955c:	f107 0308 	add.w	r3, r7, #8
 8009560:	2101      	movs	r1, #1
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff fd28 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 8009568:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11c      	bne.n	80095aa <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 8009570:	68b8      	ldr	r0, [r7, #8]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	f011 ff7f 	bl	801b47e <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 8009580:	4b10      	ldr	r3, [pc, #64]	@ (80095c4 <sl_wfx_start_ap_callback+0xa4>)
 8009582:	6818      	ldr	r0, [r3, #0]
 8009584:	f107 0108 	add.w	r1, r7, #8
 8009588:	2300      	movs	r3, #0
 800958a:	2200      	movs	r2, #0
 800958c:	f001 f8c2 	bl	800a714 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 8009590:	e00b      	b.n	80095aa <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 8009592:	480d      	ldr	r0, [pc, #52]	@ (80095c8 <sl_wfx_start_ap_callback+0xa8>)
 8009594:	f011 fdbc 	bl	801b110 <puts>
    strcpy(event_log, "AP start failed");
 8009598:	4a0c      	ldr	r2, [pc, #48]	@ (80095cc <sl_wfx_start_ap_callback+0xac>)
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <sl_wfx_start_ap_callback+0xb0>)
 800959c:	4614      	mov	r4, r2
 800959e:	461d      	mov	r5, r3
 80095a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	6061      	str	r1, [r4, #4]
 80095a6:	60a2      	str	r2, [r4, #8]
 80095a8:	60e3      	str	r3, [r4, #12]
}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bdb0      	pop	{r4, r5, r7, pc}
 80095b2:	bf00      	nop
 80095b4:	0801d794 	.word	0x0801d794
 80095b8:	20000068 	.word	0x20000068
 80095bc:	0801d7a0 	.word	0x0801d7a0
 80095c0:	20000a94 	.word	0x20000a94
 80095c4:	200013e4 	.word	0x200013e4
 80095c8:	0801d7bc 	.word	0x0801d7bc
 80095cc:	2000089c 	.word	0x2000089c
 80095d0:	0801d7d0 	.word	0x0801d7d0

080095d4 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 80095dc:	4818      	ldr	r0, [pc, #96]	@ (8009640 <sl_wfx_stop_ap_callback+0x6c>)
 80095de:	f011 fd97 	bl	801b110 <puts>
  dhcpserver_clear_stored_mac();
 80095e2:	f7f8 fd37 	bl	8002054 <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 80095e6:	4b17      	ldr	r3, [pc, #92]	@ (8009644 <sl_wfx_stop_ap_callback+0x70>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f893 2222 	ldrb.w	r2, [r3, #546]	@ 0x222
 80095ee:	4b15      	ldr	r3, [pc, #84]	@ (8009644 <sl_wfx_stop_ap_callback+0x70>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0204 	bic.w	r2, r2, #4
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009602:	461a      	mov	r2, r3
 8009604:	f107 0308 	add.w	r3, r7, #8
 8009608:	2101      	movs	r1, #1
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fcd4 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 8009610:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10f      	bne.n	8009638 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	6879      	ldr	r1, [r7, #4]
 8009624:	f011 ff2b 	bl	801b47e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009628:	4b07      	ldr	r3, [pc, #28]	@ (8009648 <sl_wfx_stop_ap_callback+0x74>)
 800962a:	6818      	ldr	r0, [r3, #0]
 800962c:	f107 0108 	add.w	r1, r7, #8
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	f001 f86e 	bl	800a714 <xQueueGenericSend>
  }
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	0801d7e0 	.word	0x0801d7e0
 8009644:	20000a94 	.word	0x20000a94
 8009648:	200013e4 	.word	0x200013e4

0800964c <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 800964c:	b5b0      	push	{r4, r5, r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af04      	add	r7, sp, #16
 8009652:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009658:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800965e:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009664:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800966a:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009670:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009676:	9302      	str	r3, [sp, #8]
 8009678:	9101      	str	r1, [sp, #4]
 800967a:	9200      	str	r2, [sp, #0]
 800967c:	462b      	mov	r3, r5
 800967e:	4622      	mov	r2, r4
 8009680:	4601      	mov	r1, r0
 8009682:	480b      	ldr	r0, [pc, #44]	@ (80096b0 <sl_wfx_ap_client_connected_callback+0x64>)
 8009684:	f011 fcdc 	bl	801b040 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 8009688:	4b0a      	ldr	r3, [pc, #40]	@ (80096b4 <sl_wfx_ap_client_connected_callback+0x68>)
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	4619      	mov	r1, r3
 800968e:	4b0a      	ldr	r3, [pc, #40]	@ (80096b8 <sl_wfx_ap_client_connected_callback+0x6c>)
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	4b09      	ldr	r3, [pc, #36]	@ (80096bc <sl_wfx_ap_client_connected_callback+0x70>)
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	4618      	mov	r0, r3
 800969a:	4b09      	ldr	r3, [pc, #36]	@ (80096c0 <sl_wfx_ap_client_connected_callback+0x74>)
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	4603      	mov	r3, r0
 80096a2:	4808      	ldr	r0, [pc, #32]	@ (80096c4 <sl_wfx_ap_client_connected_callback+0x78>)
 80096a4:	f011 fccc 	bl	801b040 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 80096a8:	bf00      	nop
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bdb0      	pop	{r4, r5, r7, pc}
 80096b0:	0801d7f0 	.word	0x0801d7f0
 80096b4:	20000096 	.word	0x20000096
 80096b8:	20000097 	.word	0x20000097
 80096bc:	20000098 	.word	0x20000098
 80096c0:	20000099 	.word	0x20000099
 80096c4:	0801d828 	.word	0x0801d828

080096c8 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 80096c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ca:	b089      	sub	sp, #36	@ 0x24
 80096cc:	af04      	add	r7, sp, #16
 80096ce:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	f107 0308 	add.w	r3, r7, #8
 80096d8:	6810      	ldr	r0, [r2, #0]
 80096da:	6018      	str	r0, [r3, #0]
 80096dc:	8892      	ldrh	r2, [r2, #4]
 80096de:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80096e0:	f107 0308 	add.w	r3, r7, #8
 80096e4:	4618      	mov	r0, r3
 80096e6:	f7f8 faf7 	bl	8001cd8 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	895b      	ldrh	r3, [r3, #10]
 80096ee:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80096f0:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80096f6:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80096fc:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009702:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009708:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800970e:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009714:	9303      	str	r3, [sp, #12]
 8009716:	9002      	str	r0, [sp, #8]
 8009718:	9101      	str	r1, [sp, #4]
 800971a:	9200      	str	r2, [sp, #0]
 800971c:	4633      	mov	r3, r6
 800971e:	462a      	mov	r2, r5
 8009720:	4621      	mov	r1, r4
 8009722:	4803      	ldr	r0, [pc, #12]	@ (8009730 <sl_wfx_ap_client_rejected_callback+0x68>)
 8009724:	f011 fc8c 	bl	801b040 <iprintf>
}
 8009728:	bf00      	nop
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	0801d85c 	.word	0x0801d85c

08009734 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 8009734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009736:	b089      	sub	sp, #36	@ 0x24
 8009738:	af04      	add	r7, sp, #16
 800973a:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	f107 0308 	add.w	r3, r7, #8
 8009744:	6810      	ldr	r0, [r2, #0]
 8009746:	6018      	str	r0, [r3, #0]
 8009748:	8892      	ldrh	r2, [r2, #4]
 800974a:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	4618      	mov	r0, r3
 8009752:	f7f8 fac1 	bl	8001cd8 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	895b      	ldrh	r3, [r3, #10]
 800975a:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800975c:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009762:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009768:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800976e:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009774:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800977a:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	9002      	str	r0, [sp, #8]
 8009784:	9101      	str	r1, [sp, #4]
 8009786:	9200      	str	r2, [sp, #0]
 8009788:	4633      	mov	r3, r6
 800978a:	462a      	mov	r2, r5
 800978c:	4621      	mov	r1, r4
 800978e:	4803      	ldr	r0, [pc, #12]	@ (800979c <sl_wfx_ap_client_disconnected_callback+0x68>)
 8009790:	f011 fc56 	bl	801b040 <iprintf>
}
 8009794:	bf00      	nop
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800979c:	0801d8a0 	.word	0x0801d8a0

080097a0 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80097ae:	461a      	mov	r2, r3
 80097b0:	f107 0308 	add.w	r3, r7, #8
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fbfe 	bl	8008fb8 <sl_wfx_host_allocate_buffer>
 80097bc:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10f      	bne.n	80097e4 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 80097c4:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
    memcpy(buffer,
 80097cc:	461a      	mov	r2, r3
 80097ce:	6879      	ldr	r1, [r7, #4]
 80097d0:	f011 fe55 	bl	801b47e <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80097d4:	4b05      	ldr	r3, [pc, #20]	@ (80097ec <sl_wfx_ext_auth_callback+0x4c>)
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	2300      	movs	r3, #0
 80097de:	2200      	movs	r2, #0
 80097e0:	f000 ff98 	bl	800a714 <xQueueGenericSend>
  }
}
 80097e4:	bf00      	nop
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}
 80097ec:	200013e4 	.word	0x200013e4

080097f0 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 80097f0:	b5b0      	push	{r4, r5, r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 80097f6:	2203      	movs	r2, #3
 80097f8:	2100      	movs	r1, #0
 80097fa:	2001      	movs	r0, #1
 80097fc:	f000 ff02 	bl	800a604 <xQueueGenericCreate>
 8009800:	4603      	mov	r3, r0
 8009802:	4a0d      	ldr	r2, [pc, #52]	@ (8009838 <wifi_events_start+0x48>)
 8009804:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 8009806:	4b0d      	ldr	r3, [pc, #52]	@ (800983c <wifi_events_start+0x4c>)
 8009808:	1d3c      	adds	r4, r7, #4
 800980a:	461d      	mov	r5, r3
 800980c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800980e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 8009814:	1d3b      	adds	r3, r7, #4
 8009816:	2100      	movs	r1, #0
 8009818:	4618      	mov	r0, r3
 800981a:	f000 fa70 	bl	8009cfe <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 800981e:	2200      	movs	r2, #0
 8009820:	2104      	movs	r1, #4
 8009822:	200a      	movs	r0, #10
 8009824:	f000 feee 	bl	800a604 <xQueueGenericCreate>
 8009828:	4603      	mov	r3, r0
 800982a:	4a05      	ldr	r2, [pc, #20]	@ (8009840 <wifi_events_start+0x50>)
 800982c:	6013      	str	r3, [r2, #0]
}
 800982e:	bf00      	nop
 8009830:	3718      	adds	r7, #24
 8009832:	46bd      	mov	sp, r7
 8009834:	bdb0      	pop	{r4, r5, r7, pc}
 8009836:	bf00      	nop
 8009838:	200013e8 	.word	0x200013e8
 800983c:	0801d8f4 	.word	0x0801d8f4
 8009840:	200013e4 	.word	0x200013e4

08009844 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800984c:	4b22      	ldr	r3, [pc, #136]	@ (80098d8 <wifi_events_task_entry+0x94>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f107 0108 	add.w	r1, r7, #8
 8009854:	f04f 32ff 	mov.w	r2, #4294967295
 8009858:	4618      	mov	r0, r3
 800985a:	f001 f98b 	bl	800ab74 <xQueueReceive>
 800985e:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d1f2      	bne.n	800984c <wifi_events_task_entry+0x8>
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0ef      	beq.n	800984c <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	789b      	ldrb	r3, [r3, #2]
 8009870:	3bc3      	subs	r3, #195	@ 0xc3
 8009872:	2b09      	cmp	r3, #9
 8009874:	d82a      	bhi.n	80098cc <wifi_events_task_entry+0x88>
 8009876:	a201      	add	r2, pc, #4	@ (adr r2, 800987c <wifi_events_task_entry+0x38>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	080098a5 	.word	0x080098a5
 8009880:	080098ab 	.word	0x080098ab
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098cd 	.word	0x080098cd
 800988c:	080098b7 	.word	0x080098b7
 8009890:	080098cd 	.word	0x080098cd
 8009894:	080098cd 	.word	0x080098cd
 8009898:	080098cd 	.word	0x080098cd
 800989c:	080098cd 	.word	0x080098cd
 80098a0:	080098bd 	.word	0x080098bd
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 80098a4:	f7f9 fc98 	bl	80031d8 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 80098a8:	e010      	b.n	80098cc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 80098aa:	f7f9 fcb3 	bl	8003214 <lwip_set_sta_link_down>
          break;
 80098ae:	e00d      	b.n	80098cc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 80098b0:	f7f9 fcce 	bl	8003250 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 80098b4:	e00a      	b.n	80098cc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 80098b6:	f7f9 fce1 	bl	800327c <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 80098ba:	e007      	b.n	80098cc <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <wifi_events_task_entry+0x98>)
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	2200      	movs	r2, #0
 80098c4:	2100      	movs	r1, #0
 80098c6:	f000 ff25 	bl	800a714 <xQueueGenericSend>
          break;
 80098ca:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2101      	movs	r1, #1
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fb83 	bl	8008fdc <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 80098d6:	e7b9      	b.n	800984c <wifi_events_task_entry+0x8>
 80098d8:	200013e4 	.word	0x200013e4
 80098dc:	200013d8 	.word	0x200013d8

080098e0 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 80098e4:	f000 f8a8 	bl	8009a38 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 80098e8:	2203      	movs	r2, #3
 80098ea:	2100      	movs	r1, #0
 80098ec:	2001      	movs	r0, #1
 80098ee:	f000 fe89 	bl	800a604 <xQueueGenericCreate>
 80098f2:	4603      	mov	r3, r0
 80098f4:	4a05      	ldr	r2, [pc, #20]	@ (800990c <sl_wfx_host_init_bus+0x2c>)
 80098f6:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 80098f8:	4b04      	ldr	r3, [pc, #16]	@ (800990c <sl_wfx_host_init_bus+0x2c>)
 80098fa:	6818      	ldr	r0, [r3, #0]
 80098fc:	2300      	movs	r3, #0
 80098fe:	2200      	movs	r2, #0
 8009900:	2100      	movs	r1, #0
 8009902:	f000 ff07 	bl	800a714 <xQueueGenericSend>
  return SL_STATUS_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20001504 	.word	0x20001504

08009910 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 8009914:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <sl_wfx_host_deinit_bus+0x18>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fac9 	bl	8009eb0 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 800991e:	f000 f8c1 	bl	8009aa4 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	bd80      	pop	{r7, pc}
 8009928:	20001504 	.word	0x20001504

0800992c <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 800992c:	b580      	push	{r7, lr}
 800992e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8009930:	2200      	movs	r2, #0
 8009932:	2110      	movs	r1, #16
 8009934:	4802      	ldr	r0, [pc, #8]	@ (8009940 <sl_wfx_host_spi_cs_assert+0x14>)
 8009936:	f7fb fd87 	bl	8005448 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	bd80      	pop	{r7, pc}
 8009940:	40020000 	.word	0x40020000

08009944 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 8009948:	2201      	movs	r2, #1
 800994a:	2110      	movs	r1, #16
 800994c:	4802      	ldr	r0, [pc, #8]	@ (8009958 <sl_wfx_host_spi_cs_deassert+0x14>)
 800994e:	f7fb fd7b 	bl	8005448 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40020000 	.word	0x40020000

0800995c <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 800995c:	b580      	push	{r7, lr}
 800995e:	b086      	sub	sp, #24
 8009960:	af00      	add	r7, sp, #0
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
 800996a:	4613      	mov	r3, r2
 800996c:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 800996e:	2301      	movs	r3, #1
 8009970:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	2b02      	cmp	r3, #2
 8009976:	bf0c      	ite	eq
 8009978:	2301      	moveq	r3, #1
 800997a:	2300      	movne	r3, #0
 800997c:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 800997e:	4b21      	ldr	r3, [pc, #132]	@ (8009a04 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f04f 31ff 	mov.w	r1, #4294967295
 8009986:	4618      	mov	r0, r3
 8009988:	f001 f9d6 	bl	800ad38 <xQueueSemaphoreTake>
 800998c:	4603      	mov	r3, r0
 800998e:	2b01      	cmp	r3, #1
 8009990:	d120      	bne.n	80099d4 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 8009992:	89ba      	ldrh	r2, [r7, #12]
 8009994:	2301      	movs	r3, #1
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	481b      	ldr	r0, [pc, #108]	@ (8009a08 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800999a:	f7fc fadc 	bl	8005f56 <HAL_SPI_Transmit>
    if (is_read) {
 800999e:	7cfb      	ldrb	r3, [r7, #19]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00b      	beq.n	80099bc <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 80099a4:	8c3b      	ldrh	r3, [r7, #32]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4817      	ldr	r0, [pc, #92]	@ (8009a08 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80099ac:	f7fc fcc6 	bl	800633c <HAL_SPI_Receive_DMA>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d110      	bne.n	80099d8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e00d      	b.n	80099d8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 80099bc:	8c3b      	ldrh	r3, [r7, #32]
 80099be:	461a      	mov	r2, r3
 80099c0:	6879      	ldr	r1, [r7, #4]
 80099c2:	4811      	ldr	r0, [pc, #68]	@ (8009a08 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80099c4:	f7fc fc04 	bl	80061d0 <HAL_SPI_Transmit_DMA>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d104      	bne.n	80099d8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 80099ce:	2300      	movs	r3, #0
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e001      	b.n	80099d8 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 80099d4:	2307      	movs	r3, #7
 80099d6:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 80099d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009a04 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f04f 31ff 	mov.w	r1, #4294967295
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 f9a9 	bl	800ad38 <xQueueSemaphoreTake>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d106      	bne.n	80099fa <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 80099ec:	4b05      	ldr	r3, [pc, #20]	@ (8009a04 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	2200      	movs	r2, #0
 80099f4:	2100      	movs	r1, #0
 80099f6:	f000 fe8d 	bl	800a714 <xQueueGenericSend>
  }

  return result;
 80099fa:	697b      	ldr	r3, [r7, #20]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20001504 	.word	0x20001504
 8009a08:	200013ec 	.word	0x200013ec

08009a0c <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009a10:	2200      	movs	r2, #0
 8009a12:	210a      	movs	r1, #10
 8009a14:	2028      	movs	r0, #40	@ 0x28
 8009a16:	f7fa fe5e 	bl	80046d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009a1a:	2028      	movs	r0, #40	@ 0x28
 8009a1c:	f7fa fe77 	bl	800470e <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 8009a26:	b580      	push	{r7, lr}
 8009a28:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009a2a:	2028      	movs	r0, #40	@ 0x28
 8009a2c:	f7fa fe7d 	bl	800472a <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009a3c:	4b17      	ldr	r3, [pc, #92]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a3e:	4a18      	ldr	r2, [pc, #96]	@ (8009aa0 <MX_SPI1_Init+0x68>)
 8009a40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009a42:	4b16      	ldr	r3, [pc, #88]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009a48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009a4a:	4b14      	ldr	r3, [pc, #80]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009a50:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a56:	4b11      	ldr	r3, [pc, #68]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009a62:	4b0e      	ldr	r3, [pc, #56]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009a70:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009a76:	4b09      	ldr	r3, [pc, #36]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a7c:	4b07      	ldr	r3, [pc, #28]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009a82:	4b06      	ldr	r3, [pc, #24]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a84:	220a      	movs	r2, #10
 8009a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009a88:	4804      	ldr	r0, [pc, #16]	@ (8009a9c <MX_SPI1_Init+0x64>)
 8009a8a:	f7fc f9b3 	bl	8005df4 <HAL_SPI_Init>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009a94:	f7f9 ffa2 	bl	80039dc <Error_Handler>
  }
}
 8009a98:	bf00      	nop
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200013ec 	.word	0x200013ec
 8009aa0:	40013000 	.word	0x40013000

08009aa4 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009aa8:	4805      	ldr	r0, [pc, #20]	@ (8009ac0 <MX_SPI1_DeInit+0x1c>)
 8009aaa:	f7fa ff23 	bl	80048f4 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009aae:	4805      	ldr	r0, [pc, #20]	@ (8009ac4 <MX_SPI1_DeInit+0x20>)
 8009ab0:	f7fa ff20 	bl	80048f4 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 8009ab4:	4804      	ldr	r0, [pc, #16]	@ (8009ac8 <MX_SPI1_DeInit+0x24>)
 8009ab6:	f7fc fa26 	bl	8005f06 <HAL_SPI_DeInit>
}
 8009aba:	bf00      	nop
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200014a4 	.word	0x200014a4
 8009ac4:	20001444 	.word	0x20001444
 8009ac8:	200013ec 	.word	0x200013ec

08009acc <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009acc:	b5b0      	push	{r4, r5, r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 8009ad2:	f000 fad4 	bl	800a07e <xEventGroupCreate>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	4a10      	ldr	r2, [pc, #64]	@ (8009b1c <sl_wfx_task_start+0x50>)
 8009ada:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009adc:	2001      	movs	r0, #1
 8009ade:	f000 fe01 	bl	800a6e4 <xQueueCreateMutex>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8009b20 <sl_wfx_task_start+0x54>)
 8009ae6:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <sl_wfx_task_start+0x58>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009aee:	4b0d      	ldr	r3, [pc, #52]	@ (8009b24 <sl_wfx_task_start+0x58>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 8009af4:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <sl_wfx_task_start+0x5c>)
 8009af6:	1d3c      	adds	r4, r7, #4
 8009af8:	461d      	mov	r5, r3
 8009afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009afe:	682b      	ldr	r3, [r5, #0]
 8009b00:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 8009b02:	1d3b      	adds	r3, r7, #4
 8009b04:	2100      	movs	r1, #0
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 f8f9 	bl	8009cfe <osThreadCreate>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	4a07      	ldr	r2, [pc, #28]	@ (8009b2c <sl_wfx_task_start+0x60>)
 8009b10:	6013      	str	r3, [r2, #0]

}
 8009b12:	bf00      	nop
 8009b14:	3718      	adds	r7, #24
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bdb0      	pop	{r4, r5, r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	2000150c 	.word	0x2000150c
 8009b20:	20001510 	.word	0x20001510
 8009b24:	20001514 	.word	0x20001514
 8009b28:	0801d914 	.word	0x0801d914
 8009b2c:	20001508 	.word	0x20001508

08009b30 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af02      	add	r7, sp, #8
 8009b36:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <sl_wfx_task_entry+0x44>)
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	f04f 33ff 	mov.w	r3, #4294967295
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	2300      	movs	r3, #0
 8009b48:	2201      	movs	r2, #1
 8009b4a:	2103      	movs	r1, #3
 8009b4c:	f000 faae 	bl	800a0ac <xEventGroupWaitBits>
 8009b50:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 8009b5c:	f000 f834 	bl	8009bc8 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d0e8      	beq.n	8009b3c <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 8009b6a:	89fb      	ldrh	r3, [r7, #14]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f000 f803 	bl	8009b78 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009b72:	e7e3      	b.n	8009b3c <sl_wfx_task_entry+0xc>
 8009b74:	2000150c 	.word	0x2000150c

08009b78 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 8009b82:	f7ff ff50 	bl	8009a26 <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 8009b86:	1dbb      	adds	r3, r7, #6
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7fe fa77 	bl	800807c <sl_wfx_receive_frame>
 8009b8e:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 8009b96:	f7ff ff39 	bl	8009a0c <sl_wfx_host_enable_platform_interrupt>
 8009b9a:	e00d      	b.n	8009bb8 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d006      	beq.n	8009bb4 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 8009ba6:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <sl_wfx_rx_process+0x4c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2102      	movs	r1, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f000 fb4f 	bl	800a250 <xEventGroupSetBits>
 8009bb2:	e001      	b.n	8009bb8 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 8009bb4:	f7ff ff2a 	bl	8009a0c <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	2000150c 	.word	0x2000150c

08009bc8 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009bce:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 8009bd6:	231b      	movs	r3, #27
 8009bd8:	e045      	b.n	8009c66 <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009bda:	4b26      	ldr	r3, [pc, #152]	@ (8009c74 <sl_wfx_tx_process+0xac>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f04f 31ff 	mov.w	r1, #4294967295
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 f8a8 	bl	800ad38 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009be8:	4b21      	ldr	r3, [pc, #132]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009bf4:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009bfa:	791a      	ldrb	r2, [r3, #4]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f7fe f8f9 	bl	8007df4 <sl_wfx_send_ethernet_frame>
 8009c02:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00e      	beq.n	8009c28 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8009c78 <sl_wfx_tx_process+0xb0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2101      	movs	r1, #1
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fb1d 	bl	800a250 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009c16:	4b17      	ldr	r3, [pc, #92]	@ (8009c74 <sl_wfx_tx_process+0xac>)
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2100      	movs	r1, #0
 8009c20:	f000 fd78 	bl	800a714 <xQueueGenericSend>
    return SL_STATUS_FULL;
 8009c24:	231c      	movs	r3, #28
 8009c26:	e01e      	b.n	8009c66 <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009c28:	4b11      	ldr	r3, [pc, #68]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009c2e:	4b10      	ldr	r3, [pc, #64]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a0e      	ldr	r2, [pc, #56]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009c36:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009c38:	2200      	movs	r2, #0
 8009c3a:	214a      	movs	r1, #74	@ 0x4a
 8009c3c:	6838      	ldr	r0, [r7, #0]
 8009c3e:	f7fe ff15 	bl	8008a6c <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8009c42:	4b0b      	ldr	r3, [pc, #44]	@ (8009c70 <sl_wfx_tx_process+0xa8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d005      	beq.n	8009c56 <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c78 <sl_wfx_tx_process+0xb0>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fafd 	bl	800a250 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009c56:	4b07      	ldr	r3, [pc, #28]	@ (8009c74 <sl_wfx_tx_process+0xac>)
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f000 fd58 	bl	800a714 <xQueueGenericSend>

  return result;
 8009c64:	687b      	ldr	r3, [r7, #4]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3708      	adds	r7, #8
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	20001514 	.word	0x20001514
 8009c74:	20001510 	.word	0x20001510
 8009c78:	2000150c 	.word	0x2000150c

08009c7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c8e:	2b84      	cmp	r3, #132	@ 0x84
 8009c90:	d005      	beq.n	8009c9e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c92:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	3303      	adds	r3, #3
 8009c9c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr

08009cac <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cb2:	f3ef 8305 	mrs	r3, IPSR
 8009cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8009cb8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	bf14      	ite	ne
 8009cbe:	2301      	movne	r3, #1
 8009cc0:	2300      	moveq	r3, #0
 8009cc2:	b2db      	uxtb	r3, r3
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009cd4:	f001 fd8c 	bl	800b7f0 <vTaskStartScheduler>
  
  return osOK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009ce2:	f7ff ffe3 	bl	8009cac <inHandlerMode>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009cec:	f001 fe8a 	bl	800ba04 <xTaskGetTickCountFromISR>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	e002      	b.n	8009cfa <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009cf4:	f001 fe76 	bl	800b9e4 <xTaskGetTickCount>
 8009cf8:	4603      	mov	r3, r0
  }
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009cfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d00:	b087      	sub	sp, #28
 8009d02:	af02      	add	r7, sp, #8
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685c      	ldr	r4, [r3, #4]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d14:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7ff ffad 	bl	8009c7c <makeFreeRtosPriority>
 8009d22:	4602      	mov	r2, r0
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	9200      	str	r2, [sp, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	4632      	mov	r2, r6
 8009d30:	4629      	mov	r1, r5
 8009d32:	4620      	mov	r0, r4
 8009d34:	f001 fb62 	bl	800b3fc <xTaskCreate>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d001      	beq.n	8009d42 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e000      	b.n	8009d44 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009d42:	68fb      	ldr	r3, [r7, #12]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d4c <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b082      	sub	sp, #8
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f001 fc85 	bl	800b664 <vTaskDelete>
  return osOK;
 8009d5a:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3708      	adds	r7, #8
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <osDelay+0x18>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	e000      	b.n	8009d7e <osDelay+0x1a>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fd00 	bl	800b784 <vTaskDelay>
  
  return osOK;
 8009d84:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009d96:	2001      	movs	r0, #1
 8009d98:	f000 fca4 	bl	800a6e4 <xQueueCreateMutex>
 8009d9c:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3708      	adds	r7, #8
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009db2:	2300      	movs	r3, #0
 8009db4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d101      	bne.n	8009dc0 <osMutexWait+0x18>
    return osErrorParameter;
 8009dbc:	2380      	movs	r3, #128	@ 0x80
 8009dbe:	e03b      	b.n	8009e38 <osMutexWait+0x90>
  }
  
  ticks = 0;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dca:	d103      	bne.n	8009dd4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e00a      	b.n	8009dea <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d007      	beq.n	8009dea <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	085b      	lsrs	r3, r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <osMutexWait+0x42>
      ticks = 1;
 8009de6:	2301      	movs	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009dea:	f7ff ff5f 	bl	8009cac <inHandlerMode>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d017      	beq.n	8009e24 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009df4:	f107 0308 	add.w	r3, r7, #8
 8009df8:	461a      	mov	r2, r3
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f8ab 	bl	800af58 <xQueueReceiveFromISR>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d001      	beq.n	8009e0c <osMutexWait+0x64>
      return osErrorOS;
 8009e08:	23ff      	movs	r3, #255	@ 0xff
 8009e0a:	e015      	b.n	8009e38 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d011      	beq.n	8009e36 <osMutexWait+0x8e>
 8009e12:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <osMutexWait+0x98>)
 8009e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	e008      	b.n	8009e36 <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009e24:	68f9      	ldr	r1, [r7, #12]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 ff86 	bl	800ad38 <xQueueSemaphoreTake>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d001      	beq.n	8009e36 <osMutexWait+0x8e>
    return osErrorOS;
 8009e32:	23ff      	movs	r3, #255	@ 0xff
 8009e34:	e000      	b.n	8009e38 <osMutexWait+0x90>
  }
  
  return osOK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009e54:	f7ff ff2a 	bl	8009cac <inHandlerMode>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d016      	beq.n	8009e8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009e5e:	f107 0308 	add.w	r3, r7, #8
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fdf5 	bl	800aa54 <xQueueGiveFromISR>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d001      	beq.n	8009e74 <osMutexRelease+0x30>
      return osErrorOS;
 8009e70:	23ff      	movs	r3, #255	@ 0xff
 8009e72:	e017      	b.n	8009ea4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d013      	beq.n	8009ea2 <osMutexRelease+0x5e>
 8009e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009eac <osMutexRelease+0x68>)
 8009e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	f3bf 8f4f 	dsb	sy
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	e00a      	b.n	8009ea2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fc3e 	bl	800a714 <xQueueGenericSend>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d001      	beq.n	8009ea2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009e9e:	23ff      	movs	r3, #255	@ 0xff
 8009ea0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	e000ed04 	.word	0xe000ed04

08009eb0 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009eb8:	f7ff fef8 	bl	8009cac <inHandlerMode>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d001      	beq.n	8009ec6 <osMutexDelete+0x16>
    return osErrorISR;
 8009ec2:	2382      	movs	r3, #130	@ 0x82
 8009ec4:	e003      	b.n	8009ece <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f001 f8c8 	bl	800b05c <vQueueDelete>

  return osOK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b082      	sub	sp, #8
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6818      	ldr	r0, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4619      	mov	r1, r3
 8009eec:	f000 fb8a 	bl	800a604 <xQueueGenericCreate>
 8009ef0:	4603      	mov	r3, r0
#endif
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	085b      	lsrs	r3, r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <osMessagePut+0x20>
    ticks = 1;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009f1c:	f7ff fec6 	bl	8009cac <inHandlerMode>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d018      	beq.n	8009f58 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009f26:	f107 0210 	add.w	r2, r7, #16
 8009f2a:	f107 0108 	add.w	r1, r7, #8
 8009f2e:	2300      	movs	r3, #0
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 fcf1 	bl	800a918 <xQueueGenericSendFromISR>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d001      	beq.n	8009f40 <osMessagePut+0x44>
      return osErrorOS;
 8009f3c:	23ff      	movs	r3, #255	@ 0xff
 8009f3e:	e018      	b.n	8009f72 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d014      	beq.n	8009f70 <osMessagePut+0x74>
 8009f46:	4b0d      	ldr	r3, [pc, #52]	@ (8009f7c <osMessagePut+0x80>)
 8009f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
 8009f56:	e00b      	b.n	8009f70 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009f58:	f107 0108 	add.w	r1, r7, #8
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	697a      	ldr	r2, [r7, #20]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 fbd7 	bl	800a714 <xQueueGenericSend>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d001      	beq.n	8009f70 <osMessagePut+0x74>
      return osErrorOS;
 8009f6c:	23ff      	movs	r3, #255	@ 0xff
 8009f6e:	e000      	b.n	8009f72 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009f80:	b590      	push	{r4, r7, lr}
 8009f82:	b08b      	sub	sp, #44	@ 0x2c
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d10a      	bne.n	8009fb0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009f9a:	2380      	movs	r3, #128	@ 0x80
 8009f9c:	617b      	str	r3, [r7, #20]
    return event;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	461c      	mov	r4, r3
 8009fa2:	f107 0314 	add.w	r3, r7, #20
 8009fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009fae:	e055      	b.n	800a05c <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fbe:	d103      	bne.n	8009fc8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fc6:	e00a      	b.n	8009fde <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	085b      	lsrs	r3, r3, #1
 8009fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d101      	bne.n	8009fde <osMessageGet+0x5e>
      ticks = 1;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009fde:	f7ff fe65 	bl	8009cac <inHandlerMode>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d01c      	beq.n	800a022 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009fe8:	f107 0220 	add.w	r2, r7, #32
 8009fec:	f107 0314 	add.w	r3, r7, #20
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	68b8      	ldr	r0, [r7, #8]
 8009ff6:	f000 ffaf 	bl	800af58 <xQueueReceiveFromISR>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d102      	bne.n	800a006 <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800a000:	2310      	movs	r3, #16
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	e001      	b.n	800a00a <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800a006:	2300      	movs	r3, #0
 800a008:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01d      	beq.n	800a04c <osMessageGet+0xcc>
 800a010:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <osMessageGet+0xe4>)
 800a012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	e014      	b.n	800a04c <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a022:	f107 0314 	add.w	r3, r7, #20
 800a026:	3304      	adds	r3, #4
 800a028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a02a:	4619      	mov	r1, r3
 800a02c:	68b8      	ldr	r0, [r7, #8]
 800a02e:	f000 fda1 	bl	800ab74 <xQueueReceive>
 800a032:	4603      	mov	r3, r0
 800a034:	2b01      	cmp	r3, #1
 800a036:	d102      	bne.n	800a03e <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800a038:	2310      	movs	r3, #16
 800a03a:	617b      	str	r3, [r7, #20]
 800a03c:	e006      	b.n	800a04c <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <osMessageGet+0xc8>
 800a044:	2300      	movs	r3, #0
 800a046:	e000      	b.n	800a04a <osMessageGet+0xca>
 800a048:	2340      	movs	r3, #64	@ 0x40
 800a04a:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	461c      	mov	r4, r3
 800a050:	f107 0314 	add.w	r3, r7, #20
 800a054:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a058:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	372c      	adds	r7, #44	@ 0x2c
 800a060:	46bd      	mov	sp, r7
 800a062:	bd90      	pop	{r4, r7, pc}
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a06c:	f002 f886 	bl	800c17c <xTaskGetSchedulerState>
 800a070:	4603      	mov	r3, r0
 800a072:	2b01      	cmp	r3, #1
 800a074:	d001      	beq.n	800a07a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a076:	f002 ffd7 	bl	800d028 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a07a:	bf00      	nop
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b082      	sub	sp, #8
 800a082:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a084:	2018      	movs	r0, #24
 800a086:	f003 f861 	bl	800d14c <pvPortMalloc>
 800a08a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d007      	beq.n	800a0a2 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 f992 	bl	800a3c6 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a0a2:	687b      	ldr	r3, [r7, #4]
	}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3708      	adds	r7, #8
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b090      	sub	sp, #64	@ 0x40
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	607a      	str	r2, [r7, #4]
 800a0b8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <xEventGroupWaitBits+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	e7fd      	b.n	800a0e0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a0ea:	d30b      	bcc.n	800a104 <xEventGroupWaitBits+0x58>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	61fb      	str	r3, [r7, #28]
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	e7fd      	b.n	800a100 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d10b      	bne.n	800a122 <xEventGroupWaitBits+0x76>
	__asm volatile
 800a10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a10e:	f383 8811 	msr	BASEPRI, r3
 800a112:	f3bf 8f6f 	isb	sy
 800a116:	f3bf 8f4f 	dsb	sy
 800a11a:	61bb      	str	r3, [r7, #24]
}
 800a11c:	bf00      	nop
 800a11e:	bf00      	nop
 800a120:	e7fd      	b.n	800a11e <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a122:	f002 f82b 	bl	800c17c <xTaskGetSchedulerState>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d102      	bne.n	800a132 <xEventGroupWaitBits+0x86>
 800a12c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d101      	bne.n	800a136 <xEventGroupWaitBits+0x8a>
 800a132:	2301      	movs	r3, #1
 800a134:	e000      	b.n	800a138 <xEventGroupWaitBits+0x8c>
 800a136:	2300      	movs	r3, #0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <xEventGroupWaitBits+0xa8>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	617b      	str	r3, [r7, #20]
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800a154:	f001 fb9a 	bl	800b88c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a164:	f000 f90d 	bl	800a382 <prvTestWaitCondition>
 800a168:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800a16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00e      	beq.n	800a18e <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a174:	2300      	movs	r3, #0
 800a176:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d028      	beq.n	800a1d0 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a17e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	43db      	mvns	r3, r3
 800a186:	401a      	ands	r2, r3
 800a188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	e020      	b.n	800a1d0 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a190:	2b00      	cmp	r3, #0
 800a192:	d104      	bne.n	800a19e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a196:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800a198:	2301      	movs	r3, #1
 800a19a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a19c:	e018      	b.n	800a1d0 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d003      	beq.n	800a1ac <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a1aa:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a1b8:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1bc:	1d18      	adds	r0, r3, #4
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	f001 fd6a 	bl	800bca0 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a1d0:	f001 fb6a 	bl	800b8a8 <xTaskResumeAll>
 800a1d4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d031      	beq.n	800a240 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d107      	bne.n	800a1f2 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800a1e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a24c <xEventGroupWaitBits+0x1a0>)
 800a1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a1f2:	f002 f96f 	bl	800c4d4 <uxTaskResetEventItemValue>
 800a1f6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a1f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d11a      	bne.n	800a238 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800a202:	f002 fe81 	bl	800cf08 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	68b9      	ldr	r1, [r7, #8]
 800a210:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a212:	f000 f8b6 	bl	800a382 <prvTestWaitCondition>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d009      	beq.n	800a230 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d006      	beq.n	800a230 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	43db      	mvns	r3, r3
 800a22a:	401a      	ands	r2, r3
 800a22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22e:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a234:	f002 fe9a 	bl	800cf6c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a23a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a242:	4618      	mov	r0, r3
 800a244:	3740      	adds	r7, #64	@ 0x40
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	e000ed04 	.word	0xe000ed04

0800a250 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b08e      	sub	sp, #56	@ 0x38
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a25a:	2300      	movs	r3, #0
 800a25c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a262:	2300      	movs	r3, #0
 800a264:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10b      	bne.n	800a284 <xEventGroupSetBits+0x34>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	613b      	str	r3, [r7, #16]
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	e7fd      	b.n	800a280 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a28a:	d30b      	bcc.n	800a2a4 <xEventGroupSetBits+0x54>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	60fb      	str	r3, [r7, #12]
}
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
 800a2a2:	e7fd      	b.n	800a2a0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a2b0:	f001 faec 	bl	800b88c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a2ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c4:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a2c6:	e03c      	b.n	800a342 <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a2ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a2d8:	69bb      	ldr	r3, [r7, #24]
 800a2da:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a2de:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a2e6:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d108      	bne.n	800a304 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800a2fe:	2301      	movs	r3, #1
 800a300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a302:	e008      	b.n	800a316 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	4013      	ands	r3, r2
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d101      	bne.n	800a316 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a312:	2301      	movs	r3, #1
 800a314:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d010      	beq.n	800a33e <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a336:	4619      	mov	r1, r3
 800a338:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a33a:	f001 fd7f 	bl	800be3c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800a342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	429a      	cmp	r2, r3
 800a348:	d1be      	bne.n	800a2c8 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a358:	f001 faa6 	bl	800b8a8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35e:	681b      	ldr	r3, [r3, #0]
}
 800a360:	4618      	mov	r0, r3
 800a362:	3738      	adds	r7, #56	@ 0x38
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff6b 	bl	800a250 <xEventGroupSetBits>
}
 800a37a:	bf00      	nop
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a382:	b480      	push	{r7}
 800a384:	b087      	sub	sp, #28
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	60b9      	str	r1, [r7, #8]
 800a38c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a38e:	2300      	movs	r3, #0
 800a390:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d107      	bne.n	800a3a8 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	4013      	ands	r3, r2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	617b      	str	r3, [r7, #20]
 800a3a6:	e007      	b.n	800a3b8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d101      	bne.n	800a3b8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a3b8:	697b      	ldr	r3, [r7, #20]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	371c      	adds	r7, #28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	b083      	sub	sp, #12
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f103 0208 	add.w	r2, r3, #8
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295
 800a3de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f103 0208 	add.w	r2, r3, #8
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f103 0208 	add.w	r2, r3, #8
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a3fa:	bf00      	nop
 800a3fc:	370c      	adds	r7, #12
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a406:	b480      	push	{r7}
 800a408:	b083      	sub	sp, #12
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	601a      	str	r2, [r3, #0]
}
 800a45c:	bf00      	nop
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d103      	bne.n	800a488 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e00c      	b.n	800a4a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3308      	adds	r3, #8
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	e002      	b.n	800a496 <vListInsert+0x2e>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d2f6      	bcs.n	800a490 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	685a      	ldr	r2, [r3, #4]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	68fa      	ldr	r2, [r7, #12]
 800a4b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	683a      	ldr	r2, [r7, #0]
 800a4bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	601a      	str	r2, [r3, #0]
}
 800a4ce:	bf00      	nop
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	6892      	ldr	r2, [r2, #8]
 800a4f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6852      	ldr	r2, [r2, #4]
 800a4fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	429a      	cmp	r2, r3
 800a504:	d103      	bne.n	800a50e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	689a      	ldr	r2, [r3, #8]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
	...

0800a530 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <xQueueGenericReset+0x2c>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	60bb      	str	r3, [r7, #8]
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a55c:	f002 fcd4 	bl	800cf08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a568:	68f9      	ldr	r1, [r7, #12]
 800a56a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	441a      	add	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a58c:	3b01      	subs	r3, #1
 800a58e:	68f9      	ldr	r1, [r7, #12]
 800a590:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a592:	fb01 f303 	mul.w	r3, r1, r3
 800a596:	441a      	add	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	22ff      	movs	r2, #255	@ 0xff
 800a5a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	22ff      	movs	r2, #255	@ 0xff
 800a5a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d114      	bne.n	800a5dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01a      	beq.n	800a5f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3310      	adds	r3, #16
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f001 fbd8 	bl	800bd74 <xTaskRemoveFromEventList>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d012      	beq.n	800a5f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a600 <xQueueGenericReset+0xd0>)
 800a5cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	e009      	b.n	800a5f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3310      	adds	r3, #16
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fef0 	bl	800a3c6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3324      	adds	r3, #36	@ 0x24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7ff feeb 	bl	800a3c6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a5f0:	f002 fcbc 	bl	800cf6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a5f4:	2301      	movs	r3, #1
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000ed04 	.word	0xe000ed04

0800a604 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08a      	sub	sp, #40	@ 0x28
 800a608:	af02      	add	r7, sp, #8
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61c:	f383 8811 	msr	BASEPRI, r3
 800a620:	f3bf 8f6f 	isb	sy
 800a624:	f3bf 8f4f 	dsb	sy
 800a628:	613b      	str	r3, [r7, #16]
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	e7fd      	b.n	800a62c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	fb02 f303 	mul.w	r3, r2, r3
 800a638:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	3348      	adds	r3, #72	@ 0x48
 800a63e:	4618      	mov	r0, r3
 800a640:	f002 fd84 	bl	800d14c <pvPortMalloc>
 800a644:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00d      	beq.n	800a668 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	3348      	adds	r3, #72	@ 0x48
 800a654:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a656:	79fa      	ldrb	r2, [r7, #7]
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4613      	mov	r3, r2
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 f805 	bl	800a672 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a668:	69bb      	ldr	r3, [r7, #24]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3720      	adds	r7, #32
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	601a      	str	r2, [r3, #0]
 800a68c:	e002      	b.n	800a694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	68ba      	ldr	r2, [r7, #8]
 800a69e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	69b8      	ldr	r0, [r7, #24]
 800a6a4:	f7ff ff44 	bl	800a530 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6a8:	bf00      	nop
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00e      	beq.n	800a6dc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f81c 	bl	800a714 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a6f6:	79fb      	ldrb	r3, [r7, #7]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6939      	ldr	r1, [r7, #16]
 800a6fc:	6978      	ldr	r0, [r7, #20]
 800a6fe:	f7ff ff81 	bl	800a604 <xQueueGenericCreate>
 800a702:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff ffd3 	bl	800a6b0 <prvInitialiseMutex>

		return xNewQueue;
 800a70a:	68fb      	ldr	r3, [r7, #12]
	}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b08e      	sub	sp, #56	@ 0x38
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a722:	2300      	movs	r3, #0
 800a724:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a72a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <xQueueGenericSend+0x34>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a734:	f383 8811 	msr	BASEPRI, r3
 800a738:	f3bf 8f6f 	isb	sy
 800a73c:	f3bf 8f4f 	dsb	sy
 800a740:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a742:	bf00      	nop
 800a744:	bf00      	nop
 800a746:	e7fd      	b.n	800a744 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d103      	bne.n	800a756 <xQueueGenericSend+0x42>
 800a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d101      	bne.n	800a75a <xQueueGenericSend+0x46>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <xQueueGenericSend+0x48>
 800a75a:	2300      	movs	r3, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10b      	bne.n	800a778 <xQueueGenericSend+0x64>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d103      	bne.n	800a786 <xQueueGenericSend+0x72>
 800a77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a782:	2b01      	cmp	r3, #1
 800a784:	d101      	bne.n	800a78a <xQueueGenericSend+0x76>
 800a786:	2301      	movs	r3, #1
 800a788:	e000      	b.n	800a78c <xQueueGenericSend+0x78>
 800a78a:	2300      	movs	r3, #0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d10b      	bne.n	800a7a8 <xQueueGenericSend+0x94>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	623b      	str	r3, [r7, #32]
}
 800a7a2:	bf00      	nop
 800a7a4:	bf00      	nop
 800a7a6:	e7fd      	b.n	800a7a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7a8:	f001 fce8 	bl	800c17c <xTaskGetSchedulerState>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d102      	bne.n	800a7b8 <xQueueGenericSend+0xa4>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <xQueueGenericSend+0xa8>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e000      	b.n	800a7be <xQueueGenericSend+0xaa>
 800a7bc:	2300      	movs	r3, #0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10b      	bne.n	800a7da <xQueueGenericSend+0xc6>
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	61fb      	str	r3, [r7, #28]
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop
 800a7d8:	e7fd      	b.n	800a7d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7da:	f002 fb95 	bl	800cf08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d302      	bcc.n	800a7f0 <xQueueGenericSend+0xdc>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d129      	bne.n	800a844 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7f6:	f000 fc68 	bl	800b0ca <prvCopyDataToQueue>
 800a7fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a800:	2b00      	cmp	r3, #0
 800a802:	d010      	beq.n	800a826 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a806:	3324      	adds	r3, #36	@ 0x24
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 fab3 	bl	800bd74 <xTaskRemoveFromEventList>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d013      	beq.n	800a83c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a814:	4b3f      	ldr	r3, [pc, #252]	@ (800a914 <xQueueGenericSend+0x200>)
 800a816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	e00a      	b.n	800a83c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d007      	beq.n	800a83c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a82c:	4b39      	ldr	r3, [pc, #228]	@ (800a914 <xQueueGenericSend+0x200>)
 800a82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a83c:	f002 fb96 	bl	800cf6c <vPortExitCritical>
				return pdPASS;
 800a840:	2301      	movs	r3, #1
 800a842:	e063      	b.n	800a90c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d103      	bne.n	800a852 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a84a:	f002 fb8f 	bl	800cf6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a84e:	2300      	movs	r3, #0
 800a850:	e05c      	b.n	800a90c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a854:	2b00      	cmp	r3, #0
 800a856:	d106      	bne.n	800a866 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 fb51 	bl	800bf04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a862:	2301      	movs	r3, #1
 800a864:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a866:	f002 fb81 	bl	800cf6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a86a:	f001 f80f 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a86e:	f002 fb4b 	bl	800cf08 <vPortEnterCritical>
 800a872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a874:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a878:	b25b      	sxtb	r3, r3
 800a87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87e:	d103      	bne.n	800a888 <xQueueGenericSend+0x174>
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a88a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a88e:	b25b      	sxtb	r3, r3
 800a890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a894:	d103      	bne.n	800a89e <xQueueGenericSend+0x18a>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a89e:	f002 fb65 	bl	800cf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8a2:	1d3a      	adds	r2, r7, #4
 800a8a4:	f107 0314 	add.w	r3, r7, #20
 800a8a8:	4611      	mov	r1, r2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f001 fb40 	bl	800bf30 <xTaskCheckForTimeOut>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d124      	bne.n	800a900 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a8b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8b8:	f000 fcff 	bl	800b2ba <prvIsQueueFull>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d018      	beq.n	800a8f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c4:	3310      	adds	r3, #16
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f001 f9c2 	bl	800bc54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a8d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8d2:	f000 fc8a 	bl	800b1ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8d6:	f000 ffe7 	bl	800b8a8 <xTaskResumeAll>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f47f af7c 	bne.w	800a7da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a914 <xQueueGenericSend+0x200>)
 800a8e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	f3bf 8f4f 	dsb	sy
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	e772      	b.n	800a7da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8f6:	f000 fc78 	bl	800b1ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8fa:	f000 ffd5 	bl	800b8a8 <xTaskResumeAll>
 800a8fe:	e76c      	b.n	800a7da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a900:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a902:	f000 fc72 	bl	800b1ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a906:	f000 ffcf 	bl	800b8a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a90a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3738      	adds	r7, #56	@ 0x38
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	e000ed04 	.word	0xe000ed04

0800a918 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b090      	sub	sp, #64	@ 0x40
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
 800a924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10b      	bne.n	800a948 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	e7fd      	b.n	800a944 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d103      	bne.n	800a956 <xQueueGenericSendFromISR+0x3e>
 800a94e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <xQueueGenericSendFromISR+0x42>
 800a956:	2301      	movs	r3, #1
 800a958:	e000      	b.n	800a95c <xQueueGenericSendFromISR+0x44>
 800a95a:	2300      	movs	r3, #0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10b      	bne.n	800a978 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a964:	f383 8811 	msr	BASEPRI, r3
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	f3bf 8f4f 	dsb	sy
 800a970:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a972:	bf00      	nop
 800a974:	bf00      	nop
 800a976:	e7fd      	b.n	800a974 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d103      	bne.n	800a986 <xQueueGenericSendFromISR+0x6e>
 800a97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <xQueueGenericSendFromISR+0x72>
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <xQueueGenericSendFromISR+0x74>
 800a98a:	2300      	movs	r3, #0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d10b      	bne.n	800a9a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a994:	f383 8811 	msr	BASEPRI, r3
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	f3bf 8f4f 	dsb	sy
 800a9a0:	623b      	str	r3, [r7, #32]
}
 800a9a2:	bf00      	nop
 800a9a4:	bf00      	nop
 800a9a6:	e7fd      	b.n	800a9a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9a8:	f002 fb8e 	bl	800d0c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a9ac:	f3ef 8211 	mrs	r2, BASEPRI
 800a9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	61fa      	str	r2, [r7, #28]
 800a9c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a9c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d302      	bcc.n	800a9da <xQueueGenericSendFromISR+0xc2>
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d12f      	bne.n	800aa3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	68b9      	ldr	r1, [r7, #8]
 800a9ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a9f0:	f000 fb6b 	bl	800b0ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fc:	d112      	bne.n	800aa24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d016      	beq.n	800aa34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	3324      	adds	r3, #36	@ 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f9b2 	bl	800bd74 <xTaskRemoveFromEventList>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00e      	beq.n	800aa34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	e007      	b.n	800aa34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aa24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	b25a      	sxtb	r2, r3
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aa34:	2301      	movs	r3, #1
 800aa36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aa38:	e001      	b.n	800aa3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3740      	adds	r7, #64	@ 0x40
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08e      	sub	sp, #56	@ 0x38
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10b      	bne.n	800aa80 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	623b      	str	r3, [r7, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	e7fd      	b.n	800aa7c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	61fb      	str	r3, [r7, #28]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aaa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d103      	bne.n	800aab0 <xQueueGiveFromISR+0x5c>
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d101      	bne.n	800aab4 <xQueueGiveFromISR+0x60>
 800aab0:	2301      	movs	r3, #1
 800aab2:	e000      	b.n	800aab6 <xQueueGiveFromISR+0x62>
 800aab4:	2300      	movs	r3, #0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10b      	bne.n	800aad2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	61bb      	str	r3, [r7, #24]
}
 800aacc:	bf00      	nop
 800aace:	bf00      	nop
 800aad0:	e7fd      	b.n	800aace <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aad2:	f002 faf9 	bl	800d0c8 <vPortValidateInterruptPriority>
	__asm volatile
 800aad6:	f3ef 8211 	mrs	r2, BASEPRI
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	617a      	str	r2, [r7, #20]
 800aaec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aaee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d22b      	bcs.n	800ab5a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab1c:	d112      	bne.n	800ab44 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d016      	beq.n	800ab54 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab28:	3324      	adds	r3, #36	@ 0x24
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 f922 	bl	800bd74 <xTaskRemoveFromEventList>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00e      	beq.n	800ab54 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	e007      	b.n	800ab54 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab48:	3301      	adds	r3, #1
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	b25a      	sxtb	r2, r3
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab54:	2301      	movs	r3, #1
 800ab56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab58:	e001      	b.n	800ab5e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f383 8811 	msr	BASEPRI, r3
}
 800ab68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3738      	adds	r7, #56	@ 0x38
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08c      	sub	sp, #48	@ 0x30
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab80:	2300      	movs	r3, #0
 800ab82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d10b      	bne.n	800aba6 <xQueueReceive+0x32>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	623b      	str	r3, [r7, #32]
}
 800aba0:	bf00      	nop
 800aba2:	bf00      	nop
 800aba4:	e7fd      	b.n	800aba2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d103      	bne.n	800abb4 <xQueueReceive+0x40>
 800abac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <xQueueReceive+0x44>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e000      	b.n	800abba <xQueueReceive+0x46>
 800abb8:	2300      	movs	r3, #0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d10b      	bne.n	800abd6 <xQueueReceive+0x62>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	61fb      	str	r3, [r7, #28]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abd6:	f001 fad1 	bl	800c17c <xTaskGetSchedulerState>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d102      	bne.n	800abe6 <xQueueReceive+0x72>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d101      	bne.n	800abea <xQueueReceive+0x76>
 800abe6:	2301      	movs	r3, #1
 800abe8:	e000      	b.n	800abec <xQueueReceive+0x78>
 800abea:	2300      	movs	r3, #0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10b      	bne.n	800ac08 <xQueueReceive+0x94>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	61bb      	str	r3, [r7, #24]
}
 800ac02:	bf00      	nop
 800ac04:	bf00      	nop
 800ac06:	e7fd      	b.n	800ac04 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac08:	f002 f97e 	bl	800cf08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d01f      	beq.n	800ac58 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac1c:	f000 fabf 	bl	800b19e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	1e5a      	subs	r2, r3, #1
 800ac24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac26:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00f      	beq.n	800ac50 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f89d 	bl	800bd74 <xTaskRemoveFromEventList>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d007      	beq.n	800ac50 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac40:	4b3c      	ldr	r3, [pc, #240]	@ (800ad34 <xQueueReceive+0x1c0>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac50:	f002 f98c 	bl	800cf6c <vPortExitCritical>
				return pdPASS;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e069      	b.n	800ad2c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac5e:	f002 f985 	bl	800cf6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac62:	2300      	movs	r3, #0
 800ac64:	e062      	b.n	800ad2c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac6c:	f107 0310 	add.w	r3, r7, #16
 800ac70:	4618      	mov	r0, r3
 800ac72:	f001 f947 	bl	800bf04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac76:	2301      	movs	r3, #1
 800ac78:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac7a:	f002 f977 	bl	800cf6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac7e:	f000 fe05 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac82:	f002 f941 	bl	800cf08 <vPortEnterCritical>
 800ac86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac92:	d103      	bne.n	800ac9c <xQueueReceive+0x128>
 800ac94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca8:	d103      	bne.n	800acb2 <xQueueReceive+0x13e>
 800acaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acac:	2200      	movs	r2, #0
 800acae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acb2:	f002 f95b 	bl	800cf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acb6:	1d3a      	adds	r2, r7, #4
 800acb8:	f107 0310 	add.w	r3, r7, #16
 800acbc:	4611      	mov	r1, r2
 800acbe:	4618      	mov	r0, r3
 800acc0:	f001 f936 	bl	800bf30 <xTaskCheckForTimeOut>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d123      	bne.n	800ad12 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800accc:	f000 fadf 	bl	800b28e <prvIsQueueEmpty>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d017      	beq.n	800ad06 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	3324      	adds	r3, #36	@ 0x24
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 ffb8 	bl	800bc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ace4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ace6:	f000 fa80 	bl	800b1ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acea:	f000 fddd 	bl	800b8a8 <xTaskResumeAll>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d189      	bne.n	800ac08 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800acf4:	4b0f      	ldr	r3, [pc, #60]	@ (800ad34 <xQueueReceive+0x1c0>)
 800acf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	f3bf 8f4f 	dsb	sy
 800ad00:	f3bf 8f6f 	isb	sy
 800ad04:	e780      	b.n	800ac08 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad08:	f000 fa6f 	bl	800b1ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad0c:	f000 fdcc 	bl	800b8a8 <xTaskResumeAll>
 800ad10:	e77a      	b.n	800ac08 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad14:	f000 fa69 	bl	800b1ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad18:	f000 fdc6 	bl	800b8a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad1e:	f000 fab6 	bl	800b28e <prvIsQueueEmpty>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f43f af6f 	beq.w	800ac08 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad2a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3730      	adds	r7, #48	@ 0x30
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	e000ed04 	.word	0xe000ed04

0800ad38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08e      	sub	sp, #56	@ 0x38
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad42:	2300      	movs	r3, #0
 800ad44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ad54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	623b      	str	r3, [r7, #32]
}
 800ad66:	bf00      	nop
 800ad68:	bf00      	nop
 800ad6a:	e7fd      	b.n	800ad68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad78:	f383 8811 	msr	BASEPRI, r3
 800ad7c:	f3bf 8f6f 	isb	sy
 800ad80:	f3bf 8f4f 	dsb	sy
 800ad84:	61fb      	str	r3, [r7, #28]
}
 800ad86:	bf00      	nop
 800ad88:	bf00      	nop
 800ad8a:	e7fd      	b.n	800ad88 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad8c:	f001 f9f6 	bl	800c17c <xTaskGetSchedulerState>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d102      	bne.n	800ad9c <xQueueSemaphoreTake+0x64>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d101      	bne.n	800ada0 <xQueueSemaphoreTake+0x68>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e000      	b.n	800ada2 <xQueueSemaphoreTake+0x6a>
 800ada0:	2300      	movs	r3, #0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10b      	bne.n	800adbe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	61bb      	str	r3, [r7, #24]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adbe:	f002 f8a3 	bl	800cf08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d024      	beq.n	800ae18 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800adce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800add6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d104      	bne.n	800ade8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800adde:	f001 fb91 	bl	800c504 <pvTaskIncrementMutexHeldCount>
 800ade2:	4602      	mov	r2, r0
 800ade4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ade8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00f      	beq.n	800ae10 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf2:	3310      	adds	r3, #16
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 ffbd 	bl	800bd74 <xTaskRemoveFromEventList>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d007      	beq.n	800ae10 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae00:	4b54      	ldr	r3, [pc, #336]	@ (800af54 <xQueueSemaphoreTake+0x21c>)
 800ae02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae06:	601a      	str	r2, [r3, #0]
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae10:	f002 f8ac 	bl	800cf6c <vPortExitCritical>
				return pdPASS;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e098      	b.n	800af4a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d112      	bne.n	800ae44 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00b      	beq.n	800ae3c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ae24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	617b      	str	r3, [r7, #20]
}
 800ae36:	bf00      	nop
 800ae38:	bf00      	nop
 800ae3a:	e7fd      	b.n	800ae38 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae3c:	f002 f896 	bl	800cf6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae40:	2300      	movs	r3, #0
 800ae42:	e082      	b.n	800af4a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 f858 	bl	800bf04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae58:	f002 f888 	bl	800cf6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae5c:	f000 fd16 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae60:	f002 f852 	bl	800cf08 <vPortEnterCritical>
 800ae64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae70:	d103      	bne.n	800ae7a <xQueueSemaphoreTake+0x142>
 800ae72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae86:	d103      	bne.n	800ae90 <xQueueSemaphoreTake+0x158>
 800ae88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae90:	f002 f86c 	bl	800cf6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae94:	463a      	mov	r2, r7
 800ae96:	f107 030c 	add.w	r3, r7, #12
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f001 f847 	bl	800bf30 <xTaskCheckForTimeOut>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d132      	bne.n	800af0e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aea8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aeaa:	f000 f9f0 	bl	800b28e <prvIsQueueEmpty>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d026      	beq.n	800af02 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aebc:	f002 f824 	bl	800cf08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f977 	bl	800c1b8 <xTaskPriorityInherit>
 800aeca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aecc:	f002 f84e 	bl	800cf6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	3324      	adds	r3, #36	@ 0x24
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 febb 	bl	800bc54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aee0:	f000 f983 	bl	800b1ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee4:	f000 fce0 	bl	800b8a8 <xTaskResumeAll>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f47f af67 	bne.w	800adbe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aef0:	4b18      	ldr	r3, [pc, #96]	@ (800af54 <xQueueSemaphoreTake+0x21c>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	e75d      	b.n	800adbe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af04:	f000 f971 	bl	800b1ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af08:	f000 fcce 	bl	800b8a8 <xTaskResumeAll>
 800af0c:	e757      	b.n	800adbe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af10:	f000 f96b 	bl	800b1ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af14:	f000 fcc8 	bl	800b8a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af1a:	f000 f9b8 	bl	800b28e <prvIsQueueEmpty>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f43f af4c 	beq.w	800adbe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800af2c:	f001 ffec 	bl	800cf08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af32:	f000 f8b2 	bl	800b09a <prvGetDisinheritPriorityAfterTimeout>
 800af36:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 fa38 	bl	800c3b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af44:	f002 f812 	bl	800cf6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3738      	adds	r7, #56	@ 0x38
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	e000ed04 	.word	0xe000ed04

0800af58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b08e      	sub	sp, #56	@ 0x38
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10b      	bne.n	800af86 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	623b      	str	r3, [r7, #32]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d103      	bne.n	800af94 <xQueueReceiveFromISR+0x3c>
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <xQueueReceiveFromISR+0x40>
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <xQueueReceiveFromISR+0x42>
 800af98:	2300      	movs	r3, #0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d10b      	bne.n	800afb6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800af9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	61fb      	str	r3, [r7, #28]
}
 800afb0:	bf00      	nop
 800afb2:	bf00      	nop
 800afb4:	e7fd      	b.n	800afb2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afb6:	f002 f887 	bl	800d0c8 <vPortValidateInterruptPriority>
	__asm volatile
 800afba:	f3ef 8211 	mrs	r2, BASEPRI
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	61ba      	str	r2, [r7, #24]
 800afd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800afd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afda:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d02f      	beq.n	800b042 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800afe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aff0:	f000 f8d5 	bl	800b19e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aff6:	1e5a      	subs	r2, r3, #1
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800affc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b004:	d112      	bne.n	800b02c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d016      	beq.n	800b03c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b010:	3310      	adds	r3, #16
 800b012:	4618      	mov	r0, r3
 800b014:	f000 feae 	bl	800bd74 <xTaskRemoveFromEventList>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00e      	beq.n	800b03c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2201      	movs	r2, #1
 800b028:	601a      	str	r2, [r3, #0]
 800b02a:	e007      	b.n	800b03c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b030:	3301      	adds	r3, #1
 800b032:	b2db      	uxtb	r3, r3
 800b034:	b25a      	sxtb	r2, r3
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b03c:	2301      	movs	r3, #1
 800b03e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b040:	e001      	b.n	800b046 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b042:	2300      	movs	r3, #0
 800b044:	637b      	str	r3, [r7, #52]	@ 0x34
 800b046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b048:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	f383 8811 	msr	BASEPRI, r3
}
 800b050:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b054:	4618      	mov	r0, r3
 800b056:	3738      	adds	r7, #56	@ 0x38
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10b      	bne.n	800b086 <vQueueDelete+0x2a>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	60bb      	str	r3, [r7, #8]
}
 800b080:	bf00      	nop
 800b082:	bf00      	nop
 800b084:	e7fd      	b.n	800b082 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f95a 	bl	800b340 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f002 f92b 	bl	800d2e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b09a:	b480      	push	{r7}
 800b09c:	b085      	sub	sp, #20
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d006      	beq.n	800b0b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f1c3 0307 	rsb	r3, r3, #7
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e001      	b.n	800b0bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
	}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b086      	sub	sp, #24
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10d      	bne.n	800b104 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d14d      	bne.n	800b18c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f001 f8d5 	bl	800c2a4 <xTaskPriorityDisinherit>
 800b0fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	609a      	str	r2, [r3, #8]
 800b102:	e043      	b.n	800b18c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d119      	bne.n	800b13e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6858      	ldr	r0, [r3, #4]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b112:	461a      	mov	r2, r3
 800b114:	68b9      	ldr	r1, [r7, #8]
 800b116:	f010 f9b2 	bl	801b47e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b122:	441a      	add	r2, r3
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	429a      	cmp	r2, r3
 800b132:	d32b      	bcc.n	800b18c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	605a      	str	r2, [r3, #4]
 800b13c:	e026      	b.n	800b18c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	68d8      	ldr	r0, [r3, #12]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b146:	461a      	mov	r2, r3
 800b148:	68b9      	ldr	r1, [r7, #8]
 800b14a:	f010 f998 	bl	801b47e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	68da      	ldr	r2, [r3, #12]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b156:	425b      	negs	r3, r3
 800b158:	441a      	add	r2, r3
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	68da      	ldr	r2, [r3, #12]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d207      	bcs.n	800b17a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	689a      	ldr	r2, [r3, #8]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	425b      	negs	r3, r3
 800b174:	441a      	add	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d105      	bne.n	800b18c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3b01      	subs	r3, #1
 800b18a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b194:	697b      	ldr	r3, [r7, #20]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b082      	sub	sp, #8
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d018      	beq.n	800b1e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68da      	ldr	r2, [r3, #12]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b8:	441a      	add	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	68da      	ldr	r2, [r3, #12]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d303      	bcc.n	800b1d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68d9      	ldr	r1, [r3, #12]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6838      	ldr	r0, [r7, #0]
 800b1de:	f010 f94e 	bl	801b47e <memcpy>
	}
}
 800b1e2:	bf00      	nop
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b1f2:	f001 fe89 	bl	800cf08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b1fe:	e011      	b.n	800b224 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b204:	2b00      	cmp	r3, #0
 800b206:	d012      	beq.n	800b22e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	3324      	adds	r3, #36	@ 0x24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 fdb1 	bl	800bd74 <xTaskRemoveFromEventList>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b218:	f000 feee 	bl	800bff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	3b01      	subs	r3, #1
 800b220:	b2db      	uxtb	r3, r3
 800b222:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dce9      	bgt.n	800b200 <prvUnlockQueue+0x16>
 800b22c:	e000      	b.n	800b230 <prvUnlockQueue+0x46>
					break;
 800b22e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	22ff      	movs	r2, #255	@ 0xff
 800b234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b238:	f001 fe98 	bl	800cf6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b23c:	f001 fe64 	bl	800cf08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b246:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b248:	e011      	b.n	800b26e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d012      	beq.n	800b278 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	3310      	adds	r3, #16
 800b256:	4618      	mov	r0, r3
 800b258:	f000 fd8c 	bl	800bd74 <xTaskRemoveFromEventList>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b262:	f000 fec9 	bl	800bff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b266:	7bbb      	ldrb	r3, [r7, #14]
 800b268:	3b01      	subs	r3, #1
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b272:	2b00      	cmp	r3, #0
 800b274:	dce9      	bgt.n	800b24a <prvUnlockQueue+0x60>
 800b276:	e000      	b.n	800b27a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b278:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	22ff      	movs	r2, #255	@ 0xff
 800b27e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b282:	f001 fe73 	bl	800cf6c <vPortExitCritical>
}
 800b286:	bf00      	nop
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b084      	sub	sp, #16
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b296:	f001 fe37 	bl	800cf08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d102      	bne.n	800b2a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
 800b2a6:	e001      	b.n	800b2ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2ac:	f001 fe5e 	bl	800cf6c <vPortExitCritical>

	return xReturn;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3710      	adds	r7, #16
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b2ba:	b580      	push	{r7, lr}
 800b2bc:	b084      	sub	sp, #16
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2c2:	f001 fe21 	bl	800cf08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d102      	bne.n	800b2d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	60fb      	str	r3, [r7, #12]
 800b2d6:	e001      	b.n	800b2dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b2dc:	f001 fe46 	bl	800cf6c <vPortExitCritical>

	return xReturn;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	e014      	b.n	800b326 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b2fc:	4a0f      	ldr	r2, [pc, #60]	@ (800b33c <vQueueAddToRegistry+0x50>)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10b      	bne.n	800b320 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b308:	490c      	ldr	r1, [pc, #48]	@ (800b33c <vQueueAddToRegistry+0x50>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b312:	4a0a      	ldr	r2, [pc, #40]	@ (800b33c <vQueueAddToRegistry+0x50>)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	00db      	lsls	r3, r3, #3
 800b318:	4413      	add	r3, r2
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b31e:	e006      	b.n	800b32e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3301      	adds	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b07      	cmp	r3, #7
 800b32a:	d9e7      	bls.n	800b2fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	2000151c 	.word	0x2000151c

0800b340 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b340:	b480      	push	{r7}
 800b342:	b085      	sub	sp, #20
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e016      	b.n	800b37c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b34e:	4a10      	ldr	r2, [pc, #64]	@ (800b390 <vQueueUnregisterQueue+0x50>)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	00db      	lsls	r3, r3, #3
 800b354:	4413      	add	r3, r2
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d10b      	bne.n	800b376 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b35e:	4a0c      	ldr	r2, [pc, #48]	@ (800b390 <vQueueUnregisterQueue+0x50>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2100      	movs	r1, #0
 800b364:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b368:	4a09      	ldr	r2, [pc, #36]	@ (800b390 <vQueueUnregisterQueue+0x50>)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	2200      	movs	r2, #0
 800b372:	605a      	str	r2, [r3, #4]
				break;
 800b374:	e006      	b.n	800b384 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	3301      	adds	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b07      	cmp	r3, #7
 800b380:	d9e5      	bls.n	800b34e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b382:	bf00      	nop
 800b384:	bf00      	nop
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	2000151c 	.word	0x2000151c

0800b394 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b394:	b580      	push	{r7, lr}
 800b396:	b086      	sub	sp, #24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3a4:	f001 fdb0 	bl	800cf08 <vPortEnterCritical>
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3ae:	b25b      	sxtb	r3, r3
 800b3b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b4:	d103      	bne.n	800b3be <vQueueWaitForMessageRestricted+0x2a>
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3c4:	b25b      	sxtb	r3, r3
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ca:	d103      	bne.n	800b3d4 <vQueueWaitForMessageRestricted+0x40>
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3d4:	f001 fdca 	bl	800cf6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	3324      	adds	r3, #36	@ 0x24
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fc97 	bl	800bd1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3ee:	6978      	ldr	r0, [r7, #20]
 800b3f0:	f7ff fefb 	bl	800b1ea <prvUnlockQueue>
	}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b08c      	sub	sp, #48	@ 0x30
 800b400:	af04      	add	r7, sp, #16
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	4613      	mov	r3, r2
 800b40a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b40c:	88fb      	ldrh	r3, [r7, #6]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4618      	mov	r0, r3
 800b412:	f001 fe9b 	bl	800d14c <pvPortMalloc>
 800b416:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00e      	beq.n	800b43c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b41e:	2054      	movs	r0, #84	@ 0x54
 800b420:	f001 fe94 	bl	800d14c <pvPortMalloc>
 800b424:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	631a      	str	r2, [r3, #48]	@ 0x30
 800b432:	e005      	b.n	800b440 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b434:	6978      	ldr	r0, [r7, #20]
 800b436:	f001 ff57 	bl	800d2e8 <vPortFree>
 800b43a:	e001      	b.n	800b440 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d013      	beq.n	800b46e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b446:	88fa      	ldrh	r2, [r7, #6]
 800b448:	2300      	movs	r3, #0
 800b44a:	9303      	str	r3, [sp, #12]
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	9302      	str	r3, [sp, #8]
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	68b9      	ldr	r1, [r7, #8]
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f000 f80e 	bl	800b47e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b462:	69f8      	ldr	r0, [r7, #28]
 800b464:	f000 f894 	bl	800b590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b468:	2301      	movs	r3, #1
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	e002      	b.n	800b474 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b46e:	f04f 33ff 	mov.w	r3, #4294967295
 800b472:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b474:	69bb      	ldr	r3, [r7, #24]
	}
 800b476:	4618      	mov	r0, r3
 800b478:	3720      	adds	r7, #32
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b088      	sub	sp, #32
 800b482:	af00      	add	r7, sp, #0
 800b484:	60f8      	str	r0, [r7, #12]
 800b486:	60b9      	str	r1, [r7, #8]
 800b488:	607a      	str	r2, [r7, #4]
 800b48a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b496:	3b01      	subs	r3, #1
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	4413      	add	r3, r2
 800b49c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	f023 0307 	bic.w	r3, r3, #7
 800b4a4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	f003 0307 	and.w	r3, r3, #7
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	f383 8811 	msr	BASEPRI, r3
 800b4b8:	f3bf 8f6f 	isb	sy
 800b4bc:	f3bf 8f4f 	dsb	sy
 800b4c0:	617b      	str	r3, [r7, #20]
}
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
 800b4c6:	e7fd      	b.n	800b4c4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d01f      	beq.n	800b50e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	61fb      	str	r3, [r7, #28]
 800b4d2:	e012      	b.n	800b4fa <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	7819      	ldrb	r1, [r3, #0]
 800b4dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	3334      	adds	r3, #52	@ 0x34
 800b4e4:	460a      	mov	r2, r1
 800b4e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d006      	beq.n	800b502 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	61fb      	str	r3, [r7, #28]
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2b0f      	cmp	r3, #15
 800b4fe:	d9e9      	bls.n	800b4d4 <prvInitialiseNewTask+0x56>
 800b500:	e000      	b.n	800b504 <prvInitialiseNewTask+0x86>
			{
				break;
 800b502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b50c:	e003      	b.n	800b516 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b518:	2b06      	cmp	r3, #6
 800b51a:	d901      	bls.n	800b520 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b51c:	2306      	movs	r3, #6
 800b51e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b524:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b52a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	2200      	movs	r2, #0
 800b530:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b534:	3304      	adds	r3, #4
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe ff65 	bl	800a406 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b53c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53e:	3318      	adds	r3, #24
 800b540:	4618      	mov	r0, r3
 800b542:	f7fe ff60 	bl	800a406 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b54a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54e:	f1c3 0207 	rsb	r2, r3, #7
 800b552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	68f9      	ldr	r1, [r7, #12]
 800b56e:	69b8      	ldr	r0, [r7, #24]
 800b570:	f001 fb9a 	bl	800cca8 <pxPortInitialiseStack>
 800b574:	4602      	mov	r2, r0
 800b576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b586:	bf00      	nop
 800b588:	3720      	adds	r7, #32
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b598:	f001 fcb6 	bl	800cf08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b59c:	4b2a      	ldr	r3, [pc, #168]	@ (800b648 <prvAddNewTaskToReadyList+0xb8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	4a29      	ldr	r2, [pc, #164]	@ (800b648 <prvAddNewTaskToReadyList+0xb8>)
 800b5a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5a6:	4b29      	ldr	r3, [pc, #164]	@ (800b64c <prvAddNewTaskToReadyList+0xbc>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5ae:	4a27      	ldr	r2, [pc, #156]	@ (800b64c <prvAddNewTaskToReadyList+0xbc>)
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5b4:	4b24      	ldr	r3, [pc, #144]	@ (800b648 <prvAddNewTaskToReadyList+0xb8>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d110      	bne.n	800b5de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5bc:	f000 fd40 	bl	800c040 <prvInitialiseTaskLists>
 800b5c0:	e00d      	b.n	800b5de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5c2:	4b23      	ldr	r3, [pc, #140]	@ (800b650 <prvAddNewTaskToReadyList+0xc0>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d109      	bne.n	800b5de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5ca:	4b20      	ldr	r3, [pc, #128]	@ (800b64c <prvAddNewTaskToReadyList+0xbc>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d802      	bhi.n	800b5de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b5d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b64c <prvAddNewTaskToReadyList+0xbc>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b5de:	4b1d      	ldr	r3, [pc, #116]	@ (800b654 <prvAddNewTaskToReadyList+0xc4>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a1b      	ldr	r2, [pc, #108]	@ (800b654 <prvAddNewTaskToReadyList+0xc4>)
 800b5e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	409a      	lsls	r2, r3
 800b5f0:	4b19      	ldr	r3, [pc, #100]	@ (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	4a18      	ldr	r2, [pc, #96]	@ (800b658 <prvAddNewTaskToReadyList+0xc8>)
 800b5f8:	6013      	str	r3, [r2, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4a15      	ldr	r2, [pc, #84]	@ (800b65c <prvAddNewTaskToReadyList+0xcc>)
 800b608:	441a      	add	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	3304      	adds	r3, #4
 800b60e:	4619      	mov	r1, r3
 800b610:	4610      	mov	r0, r2
 800b612:	f7fe ff05 	bl	800a420 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b616:	f001 fca9 	bl	800cf6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b61a:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <prvAddNewTaskToReadyList+0xc0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00e      	beq.n	800b640 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b622:	4b0a      	ldr	r3, [pc, #40]	@ (800b64c <prvAddNewTaskToReadyList+0xbc>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d207      	bcs.n	800b640 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b630:	4b0b      	ldr	r3, [pc, #44]	@ (800b660 <prvAddNewTaskToReadyList+0xd0>)
 800b632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b636:	601a      	str	r2, [r3, #0]
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b640:	bf00      	nop
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}
 800b648:	2000165c 	.word	0x2000165c
 800b64c:	2000155c 	.word	0x2000155c
 800b650:	20001668 	.word	0x20001668
 800b654:	20001678 	.word	0x20001678
 800b658:	20001664 	.word	0x20001664
 800b65c:	20001560 	.word	0x20001560
 800b660:	e000ed04 	.word	0xe000ed04

0800b664 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b664:	b580      	push	{r7, lr}
 800b666:	b084      	sub	sp, #16
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b66c:	f001 fc4c 	bl	800cf08 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d102      	bne.n	800b67c <vTaskDelete+0x18>
 800b676:	4b39      	ldr	r3, [pc, #228]	@ (800b75c <vTaskDelete+0xf8>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	e000      	b.n	800b67e <vTaskDelete+0x1a>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	3304      	adds	r3, #4
 800b684:	4618      	mov	r0, r3
 800b686:	f7fe ff28 	bl	800a4da <uxListRemove>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d115      	bne.n	800b6bc <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b694:	4932      	ldr	r1, [pc, #200]	@ (800b760 <vTaskDelete+0xfc>)
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	440b      	add	r3, r1
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <vTaskDelete+0x58>
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b0:	43da      	mvns	r2, r3
 800b6b2:	4b2c      	ldr	r3, [pc, #176]	@ (800b764 <vTaskDelete+0x100>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b764 <vTaskDelete+0x100>)
 800b6ba:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d004      	beq.n	800b6ce <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe ff06 	bl	800a4da <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b6ce:	4b26      	ldr	r3, [pc, #152]	@ (800b768 <vTaskDelete+0x104>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	4a24      	ldr	r2, [pc, #144]	@ (800b768 <vTaskDelete+0x104>)
 800b6d6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b6d8:	4b20      	ldr	r3, [pc, #128]	@ (800b75c <vTaskDelete+0xf8>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d10b      	bne.n	800b6fa <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4820      	ldr	r0, [pc, #128]	@ (800b76c <vTaskDelete+0x108>)
 800b6ea:	f7fe fe99 	bl	800a420 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b6ee:	4b20      	ldr	r3, [pc, #128]	@ (800b770 <vTaskDelete+0x10c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a1e      	ldr	r2, [pc, #120]	@ (800b770 <vTaskDelete+0x10c>)
 800b6f6:	6013      	str	r3, [r2, #0]
 800b6f8:	e009      	b.n	800b70e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b6fa:	4b1e      	ldr	r3, [pc, #120]	@ (800b774 <vTaskDelete+0x110>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	4a1c      	ldr	r2, [pc, #112]	@ (800b774 <vTaskDelete+0x110>)
 800b702:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 fd09 	bl	800c11c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b70a:	f000 fd17 	bl	800c13c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b70e:	f001 fc2d 	bl	800cf6c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b712:	4b19      	ldr	r3, [pc, #100]	@ (800b778 <vTaskDelete+0x114>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d01c      	beq.n	800b754 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 800b71a:	4b10      	ldr	r3, [pc, #64]	@ (800b75c <vTaskDelete+0xf8>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	429a      	cmp	r2, r3
 800b722:	d117      	bne.n	800b754 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b724:	4b15      	ldr	r3, [pc, #84]	@ (800b77c <vTaskDelete+0x118>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00b      	beq.n	800b744 <vTaskDelete+0xe0>
	__asm volatile
 800b72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b730:	f383 8811 	msr	BASEPRI, r3
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	60bb      	str	r3, [r7, #8]
}
 800b73e:	bf00      	nop
 800b740:	bf00      	nop
 800b742:	e7fd      	b.n	800b740 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b744:	4b0e      	ldr	r3, [pc, #56]	@ (800b780 <vTaskDelete+0x11c>)
 800b746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	f3bf 8f4f 	dsb	sy
 800b750:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	2000155c 	.word	0x2000155c
 800b760:	20001560 	.word	0x20001560
 800b764:	20001664 	.word	0x20001664
 800b768:	20001678 	.word	0x20001678
 800b76c:	20001630 	.word	0x20001630
 800b770:	20001644 	.word	0x20001644
 800b774:	2000165c 	.word	0x2000165c
 800b778:	20001668 	.word	0x20001668
 800b77c:	20001684 	.word	0x20001684
 800b780:	e000ed04 	.word	0xe000ed04

0800b784 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b784:	b580      	push	{r7, lr}
 800b786:	b084      	sub	sp, #16
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d018      	beq.n	800b7c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b796:	4b14      	ldr	r3, [pc, #80]	@ (800b7e8 <vTaskDelay+0x64>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00b      	beq.n	800b7b6 <vTaskDelay+0x32>
	__asm volatile
 800b79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	60bb      	str	r3, [r7, #8]
}
 800b7b0:	bf00      	nop
 800b7b2:	bf00      	nop
 800b7b4:	e7fd      	b.n	800b7b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7b6:	f000 f869 	bl	800b88c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 feb5 	bl	800c52c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7c2:	f000 f871 	bl	800b8a8 <xTaskResumeAll>
 800b7c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d107      	bne.n	800b7de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b7ce:	4b07      	ldr	r3, [pc, #28]	@ (800b7ec <vTaskDelay+0x68>)
 800b7d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7de:	bf00      	nop
 800b7e0:	3710      	adds	r7, #16
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	20001684 	.word	0x20001684
 800b7ec:	e000ed04 	.word	0xe000ed04

0800b7f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b7f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b874 <vTaskStartScheduler+0x84>)
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	2300      	movs	r3, #0
 800b800:	2280      	movs	r2, #128	@ 0x80
 800b802:	491d      	ldr	r1, [pc, #116]	@ (800b878 <vTaskStartScheduler+0x88>)
 800b804:	481d      	ldr	r0, [pc, #116]	@ (800b87c <vTaskStartScheduler+0x8c>)
 800b806:	f7ff fdf9 	bl	800b3fc <xTaskCreate>
 800b80a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d102      	bne.n	800b818 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b812:	f000 fef1 	bl	800c5f8 <xTimerCreateTimerTask>
 800b816:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d116      	bne.n	800b84c <vTaskStartScheduler+0x5c>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60bb      	str	r3, [r7, #8]
}
 800b830:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b832:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <vTaskStartScheduler+0x90>)
 800b834:	f04f 32ff 	mov.w	r2, #4294967295
 800b838:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b83a:	4b12      	ldr	r3, [pc, #72]	@ (800b884 <vTaskStartScheduler+0x94>)
 800b83c:	2201      	movs	r2, #1
 800b83e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b840:	4b11      	ldr	r3, [pc, #68]	@ (800b888 <vTaskStartScheduler+0x98>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b846:	f001 fabb 	bl	800cdc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b84a:	e00f      	b.n	800b86c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b852:	d10b      	bne.n	800b86c <vTaskStartScheduler+0x7c>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	607b      	str	r3, [r7, #4]
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	e7fd      	b.n	800b868 <vTaskStartScheduler+0x78>
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20001680 	.word	0x20001680
 800b878:	0801d928 	.word	0x0801d928
 800b87c:	0800c011 	.word	0x0800c011
 800b880:	2000167c 	.word	0x2000167c
 800b884:	20001668 	.word	0x20001668
 800b888:	20001660 	.word	0x20001660

0800b88c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b890:	4b04      	ldr	r3, [pc, #16]	@ (800b8a4 <vTaskSuspendAll+0x18>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a03      	ldr	r2, [pc, #12]	@ (800b8a4 <vTaskSuspendAll+0x18>)
 800b898:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b89a:	bf00      	nop
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20001684 	.word	0x20001684

0800b8a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8b6:	4b42      	ldr	r3, [pc, #264]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	603b      	str	r3, [r7, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8d6:	f001 fb17 	bl	800cf08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8da:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	4a37      	ldr	r2, [pc, #220]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e4:	4b36      	ldr	r3, [pc, #216]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d161      	bne.n	800b9b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8ec:	4b35      	ldr	r3, [pc, #212]	@ (800b9c4 <xTaskResumeAll+0x11c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d05d      	beq.n	800b9b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f4:	e02e      	b.n	800b954 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f6:	4b34      	ldr	r3, [pc, #208]	@ (800b9c8 <xTaskResumeAll+0x120>)
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3318      	adds	r3, #24
 800b902:	4618      	mov	r0, r3
 800b904:	f7fe fde9 	bl	800a4da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fde4 	bl	800a4da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b916:	2201      	movs	r2, #1
 800b918:	409a      	lsls	r2, r3
 800b91a:	4b2c      	ldr	r3, [pc, #176]	@ (800b9cc <xTaskResumeAll+0x124>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4313      	orrs	r3, r2
 800b920:	4a2a      	ldr	r2, [pc, #168]	@ (800b9cc <xTaskResumeAll+0x124>)
 800b922:	6013      	str	r3, [r2, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b928:	4613      	mov	r3, r2
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4a27      	ldr	r2, [pc, #156]	@ (800b9d0 <xTaskResumeAll+0x128>)
 800b932:	441a      	add	r2, r3
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	3304      	adds	r3, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	4610      	mov	r0, r2
 800b93c:	f7fe fd70 	bl	800a420 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b944:	4b23      	ldr	r3, [pc, #140]	@ (800b9d4 <xTaskResumeAll+0x12c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d302      	bcc.n	800b954 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b94e:	4b22      	ldr	r3, [pc, #136]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b950:	2201      	movs	r2, #1
 800b952:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b954:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c8 <xTaskResumeAll+0x120>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d1cc      	bne.n	800b8f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b962:	f000 fbeb 	bl	800c13c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b966:	4b1d      	ldr	r3, [pc, #116]	@ (800b9dc <xTaskResumeAll+0x134>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d010      	beq.n	800b994 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b972:	f000 f859 	bl	800ba28 <xTaskIncrementTick>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b97c:	4b16      	ldr	r3, [pc, #88]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b97e:	2201      	movs	r2, #1
 800b980:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3b01      	subs	r3, #1
 800b986:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1f1      	bne.n	800b972 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b98e:	4b13      	ldr	r3, [pc, #76]	@ (800b9dc <xTaskResumeAll+0x134>)
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b994:	4b10      	ldr	r3, [pc, #64]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d009      	beq.n	800b9b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e0 <xTaskResumeAll+0x138>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9b0:	f001 fadc 	bl	800cf6c <vPortExitCritical>

	return xAlreadyYielded;
 800b9b4:	68bb      	ldr	r3, [r7, #8]
}
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	20001684 	.word	0x20001684
 800b9c4:	2000165c 	.word	0x2000165c
 800b9c8:	2000161c 	.word	0x2000161c
 800b9cc:	20001664 	.word	0x20001664
 800b9d0:	20001560 	.word	0x20001560
 800b9d4:	2000155c 	.word	0x2000155c
 800b9d8:	20001670 	.word	0x20001670
 800b9dc:	2000166c 	.word	0x2000166c
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9ea:	4b05      	ldr	r3, [pc, #20]	@ (800ba00 <xTaskGetTickCount+0x1c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9f0:	687b      	ldr	r3, [r7, #4]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20001660 	.word	0x20001660

0800ba04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba0a:	f001 fb5d 	bl	800d0c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ba0e:	2300      	movs	r3, #0
 800ba10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ba12:	4b04      	ldr	r3, [pc, #16]	@ (800ba24 <xTaskGetTickCountFromISR+0x20>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba18:	683b      	ldr	r3, [r7, #0]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20001660 	.word	0x20001660

0800ba28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b086      	sub	sp, #24
 800ba2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba32:	4b4f      	ldr	r3, [pc, #316]	@ (800bb70 <xTaskIncrementTick+0x148>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	f040 808f 	bne.w	800bb5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba3c:	4b4d      	ldr	r3, [pc, #308]	@ (800bb74 <xTaskIncrementTick+0x14c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	3301      	adds	r3, #1
 800ba42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba44:	4a4b      	ldr	r2, [pc, #300]	@ (800bb74 <xTaskIncrementTick+0x14c>)
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d121      	bne.n	800ba94 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba50:	4b49      	ldr	r3, [pc, #292]	@ (800bb78 <xTaskIncrementTick+0x150>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00b      	beq.n	800ba72 <xTaskIncrementTick+0x4a>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	603b      	str	r3, [r7, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	bf00      	nop
 800ba70:	e7fd      	b.n	800ba6e <xTaskIncrementTick+0x46>
 800ba72:	4b41      	ldr	r3, [pc, #260]	@ (800bb78 <xTaskIncrementTick+0x150>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	4b40      	ldr	r3, [pc, #256]	@ (800bb7c <xTaskIncrementTick+0x154>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a3e      	ldr	r2, [pc, #248]	@ (800bb78 <xTaskIncrementTick+0x150>)
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	4a3e      	ldr	r2, [pc, #248]	@ (800bb7c <xTaskIncrementTick+0x154>)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6013      	str	r3, [r2, #0]
 800ba86:	4b3e      	ldr	r3, [pc, #248]	@ (800bb80 <xTaskIncrementTick+0x158>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	4a3c      	ldr	r2, [pc, #240]	@ (800bb80 <xTaskIncrementTick+0x158>)
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	f000 fb54 	bl	800c13c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba94:	4b3b      	ldr	r3, [pc, #236]	@ (800bb84 <xTaskIncrementTick+0x15c>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d348      	bcc.n	800bb30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba9e:	4b36      	ldr	r3, [pc, #216]	@ (800bb78 <xTaskIncrementTick+0x150>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d104      	bne.n	800bab2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baa8:	4b36      	ldr	r3, [pc, #216]	@ (800bb84 <xTaskIncrementTick+0x15c>)
 800baaa:	f04f 32ff 	mov.w	r2, #4294967295
 800baae:	601a      	str	r2, [r3, #0]
					break;
 800bab0:	e03e      	b.n	800bb30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab2:	4b31      	ldr	r3, [pc, #196]	@ (800bb78 <xTaskIncrementTick+0x150>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bac2:	693a      	ldr	r2, [r7, #16]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d203      	bcs.n	800bad2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800baca:	4a2e      	ldr	r2, [pc, #184]	@ (800bb84 <xTaskIncrementTick+0x15c>)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bad0:	e02e      	b.n	800bb30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	3304      	adds	r3, #4
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7fe fcff 	bl	800a4da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d004      	beq.n	800baee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	3318      	adds	r3, #24
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe fcf6 	bl	800a4da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf2:	2201      	movs	r2, #1
 800baf4:	409a      	lsls	r2, r3
 800baf6:	4b24      	ldr	r3, [pc, #144]	@ (800bb88 <xTaskIncrementTick+0x160>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4313      	orrs	r3, r2
 800bafc:	4a22      	ldr	r2, [pc, #136]	@ (800bb88 <xTaskIncrementTick+0x160>)
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4a1f      	ldr	r2, [pc, #124]	@ (800bb8c <xTaskIncrementTick+0x164>)
 800bb0e:	441a      	add	r2, r3
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	3304      	adds	r3, #4
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f7fe fc82 	bl	800a420 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb20:	4b1b      	ldr	r3, [pc, #108]	@ (800bb90 <xTaskIncrementTick+0x168>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d3b9      	bcc.n	800ba9e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb2e:	e7b6      	b.n	800ba9e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb30:	4b17      	ldr	r3, [pc, #92]	@ (800bb90 <xTaskIncrementTick+0x168>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	4915      	ldr	r1, [pc, #84]	@ (800bb8c <xTaskIncrementTick+0x164>)
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	440b      	add	r3, r1
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d901      	bls.n	800bb4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb4c:	4b11      	ldr	r3, [pc, #68]	@ (800bb94 <xTaskIncrementTick+0x16c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d007      	beq.n	800bb64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bb54:	2301      	movs	r3, #1
 800bb56:	617b      	str	r3, [r7, #20]
 800bb58:	e004      	b.n	800bb64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb5a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb98 <xTaskIncrementTick+0x170>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	4a0d      	ldr	r2, [pc, #52]	@ (800bb98 <xTaskIncrementTick+0x170>)
 800bb62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb64:	697b      	ldr	r3, [r7, #20]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20001684 	.word	0x20001684
 800bb74:	20001660 	.word	0x20001660
 800bb78:	20001614 	.word	0x20001614
 800bb7c:	20001618 	.word	0x20001618
 800bb80:	20001674 	.word	0x20001674
 800bb84:	2000167c 	.word	0x2000167c
 800bb88:	20001664 	.word	0x20001664
 800bb8c:	20001560 	.word	0x20001560
 800bb90:	2000155c 	.word	0x2000155c
 800bb94:	20001670 	.word	0x20001670
 800bb98:	2000166c 	.word	0x2000166c

0800bb9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b087      	sub	sp, #28
 800bba0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bba2:	4b27      	ldr	r3, [pc, #156]	@ (800bc40 <vTaskSwitchContext+0xa4>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbaa:	4b26      	ldr	r3, [pc, #152]	@ (800bc44 <vTaskSwitchContext+0xa8>)
 800bbac:	2201      	movs	r2, #1
 800bbae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbb0:	e040      	b.n	800bc34 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800bbb2:	4b24      	ldr	r3, [pc, #144]	@ (800bc44 <vTaskSwitchContext+0xa8>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb8:	4b23      	ldr	r3, [pc, #140]	@ (800bc48 <vTaskSwitchContext+0xac>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	fab3 f383 	clz	r3, r3
 800bbc4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bbc6:	7afb      	ldrb	r3, [r7, #11]
 800bbc8:	f1c3 031f 	rsb	r3, r3, #31
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	491f      	ldr	r1, [pc, #124]	@ (800bc4c <vTaskSwitchContext+0xb0>)
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	4613      	mov	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4413      	add	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	440b      	add	r3, r1
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d10b      	bne.n	800bbfa <vTaskSwitchContext+0x5e>
	__asm volatile
 800bbe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe6:	f383 8811 	msr	BASEPRI, r3
 800bbea:	f3bf 8f6f 	isb	sy
 800bbee:	f3bf 8f4f 	dsb	sy
 800bbf2:	607b      	str	r3, [r7, #4]
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	e7fd      	b.n	800bbf6 <vTaskSwitchContext+0x5a>
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4a11      	ldr	r2, [pc, #68]	@ (800bc4c <vTaskSwitchContext+0xb0>)
 800bc06:	4413      	add	r3, r2
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	685a      	ldr	r2, [r3, #4]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	605a      	str	r2, [r3, #4]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	685a      	ldr	r2, [r3, #4]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	3308      	adds	r3, #8
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d104      	bne.n	800bc2a <vTaskSwitchContext+0x8e>
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	4a07      	ldr	r2, [pc, #28]	@ (800bc50 <vTaskSwitchContext+0xb4>)
 800bc32:	6013      	str	r3, [r2, #0]
}
 800bc34:	bf00      	nop
 800bc36:	371c      	adds	r7, #28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	20001684 	.word	0x20001684
 800bc44:	20001670 	.word	0x20001670
 800bc48:	20001664 	.word	0x20001664
 800bc4c:	20001560 	.word	0x20001560
 800bc50:	2000155c 	.word	0x2000155c

0800bc54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10b      	bne.n	800bc7c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc68:	f383 8811 	msr	BASEPRI, r3
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f3bf 8f4f 	dsb	sy
 800bc74:	60fb      	str	r3, [r7, #12]
}
 800bc76:	bf00      	nop
 800bc78:	bf00      	nop
 800bc7a:	e7fd      	b.n	800bc78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc7c:	4b07      	ldr	r3, [pc, #28]	@ (800bc9c <vTaskPlaceOnEventList+0x48>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3318      	adds	r3, #24
 800bc82:	4619      	mov	r1, r3
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7fe fbef 	bl	800a468 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc8a:	2101      	movs	r1, #1
 800bc8c:	6838      	ldr	r0, [r7, #0]
 800bc8e:	f000 fc4d 	bl	800c52c <prvAddCurrentTaskToDelayedList>
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2000155c 	.word	0x2000155c

0800bca0 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b086      	sub	sp, #24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10b      	bne.n	800bcca <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800bcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	617b      	str	r3, [r7, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
 800bcc8:	e7fd      	b.n	800bcc6 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800bcca:	4b12      	ldr	r3, [pc, #72]	@ (800bd14 <vTaskPlaceOnUnorderedEventList+0x74>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d10b      	bne.n	800bcea <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	613b      	str	r3, [r7, #16]
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop
 800bce8:	e7fd      	b.n	800bce6 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bcea:	4b0b      	ldr	r3, [pc, #44]	@ (800bd18 <vTaskPlaceOnUnorderedEventList+0x78>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bcf4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcf6:	4b08      	ldr	r3, [pc, #32]	@ (800bd18 <vTaskPlaceOnUnorderedEventList+0x78>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7fe fb8e 	bl	800a420 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd04:	2101      	movs	r1, #1
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fc10 	bl	800c52c <prvAddCurrentTaskToDelayedList>
}
 800bd0c:	bf00      	nop
 800bd0e:	3718      	adds	r7, #24
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	20001684 	.word	0x20001684
 800bd18:	2000155c 	.word	0x2000155c

0800bd1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d10b      	bne.n	800bd46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	617b      	str	r3, [r7, #20]
}
 800bd40:	bf00      	nop
 800bd42:	bf00      	nop
 800bd44:	e7fd      	b.n	800bd42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd46:	4b0a      	ldr	r3, [pc, #40]	@ (800bd70 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3318      	adds	r3, #24
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f7fe fb66 	bl	800a420 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd60:	6879      	ldr	r1, [r7, #4]
 800bd62:	68b8      	ldr	r0, [r7, #8]
 800bd64:	f000 fbe2 	bl	800c52c <prvAddCurrentTaskToDelayedList>
	}
 800bd68:	bf00      	nop
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	2000155c 	.word	0x2000155c

0800bd74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10b      	bne.n	800bda2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	60fb      	str	r3, [r7, #12]
}
 800bd9c:	bf00      	nop
 800bd9e:	bf00      	nop
 800bda0:	e7fd      	b.n	800bd9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3318      	adds	r3, #24
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fb97 	bl	800a4da <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdac:	4b1d      	ldr	r3, [pc, #116]	@ (800be24 <xTaskRemoveFromEventList+0xb0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d11c      	bne.n	800bdee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7fe fb8e 	bl	800a4da <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	409a      	lsls	r2, r3
 800bdc6:	4b18      	ldr	r3, [pc, #96]	@ (800be28 <xTaskRemoveFromEventList+0xb4>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	4a16      	ldr	r2, [pc, #88]	@ (800be28 <xTaskRemoveFromEventList+0xb4>)
 800bdce:	6013      	str	r3, [r2, #0]
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4a13      	ldr	r2, [pc, #76]	@ (800be2c <xTaskRemoveFromEventList+0xb8>)
 800bdde:	441a      	add	r2, r3
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4619      	mov	r1, r3
 800bde6:	4610      	mov	r0, r2
 800bde8:	f7fe fb1a 	bl	800a420 <vListInsertEnd>
 800bdec:	e005      	b.n	800bdfa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3318      	adds	r3, #24
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	480e      	ldr	r0, [pc, #56]	@ (800be30 <xTaskRemoveFromEventList+0xbc>)
 800bdf6:	f7fe fb13 	bl	800a420 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdfe:	4b0d      	ldr	r3, [pc, #52]	@ (800be34 <xTaskRemoveFromEventList+0xc0>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be04:	429a      	cmp	r2, r3
 800be06:	d905      	bls.n	800be14 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be08:	2301      	movs	r3, #1
 800be0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be0c:	4b0a      	ldr	r3, [pc, #40]	@ (800be38 <xTaskRemoveFromEventList+0xc4>)
 800be0e:	2201      	movs	r2, #1
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	e001      	b.n	800be18 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be14:	2300      	movs	r3, #0
 800be16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be18:	697b      	ldr	r3, [r7, #20]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3718      	adds	r7, #24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	20001684 	.word	0x20001684
 800be28:	20001664 	.word	0x20001664
 800be2c:	20001560 	.word	0x20001560
 800be30:	2000161c 	.word	0x2000161c
 800be34:	2000155c 	.word	0x2000155c
 800be38:	20001670 	.word	0x20001670

0800be3c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b086      	sub	sp, #24
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800be46:	4b2a      	ldr	r3, [pc, #168]	@ (800bef0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10b      	bne.n	800be66 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800be4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be52:	f383 8811 	msr	BASEPRI, r3
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	f3bf 8f4f 	dsb	sy
 800be5e:	613b      	str	r3, [r7, #16]
}
 800be60:	bf00      	nop
 800be62:	bf00      	nop
 800be64:	e7fd      	b.n	800be62 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10b      	bne.n	800be94 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	60fb      	str	r3, [r7, #12]
}
 800be8e:	bf00      	nop
 800be90:	bf00      	nop
 800be92:	e7fd      	b.n	800be90 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7fe fb20 	bl	800a4da <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	3304      	adds	r3, #4
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe fb1b 	bl	800a4da <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea8:	2201      	movs	r2, #1
 800beaa:	409a      	lsls	r2, r3
 800beac:	4b11      	ldr	r3, [pc, #68]	@ (800bef4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	4a10      	ldr	r2, [pc, #64]	@ (800bef4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4a0d      	ldr	r2, [pc, #52]	@ (800bef8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800bec4:	441a      	add	r2, r3
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	3304      	adds	r3, #4
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f7fe faa7 	bl	800a420 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed6:	4b09      	ldr	r3, [pc, #36]	@ (800befc <vTaskRemoveFromUnorderedEventList+0xc0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bedc:	429a      	cmp	r2, r3
 800bede:	d902      	bls.n	800bee6 <vTaskRemoveFromUnorderedEventList+0xaa>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800bee0:	4b07      	ldr	r3, [pc, #28]	@ (800bf00 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800bee2:	2201      	movs	r2, #1
 800bee4:	601a      	str	r2, [r3, #0]
	}
}
 800bee6:	bf00      	nop
 800bee8:	3718      	adds	r7, #24
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	20001684 	.word	0x20001684
 800bef4:	20001664 	.word	0x20001664
 800bef8:	20001560 	.word	0x20001560
 800befc:	2000155c 	.word	0x2000155c
 800bf00:	20001670 	.word	0x20001670

0800bf04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf0c:	4b06      	ldr	r3, [pc, #24]	@ (800bf28 <vTaskInternalSetTimeOutState+0x24>)
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf14:	4b05      	ldr	r3, [pc, #20]	@ (800bf2c <vTaskInternalSetTimeOutState+0x28>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	605a      	str	r2, [r3, #4]
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	20001674 	.word	0x20001674
 800bf2c:	20001660 	.word	0x20001660

0800bf30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10b      	bne.n	800bf58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	613b      	str	r3, [r7, #16]
}
 800bf52:	bf00      	nop
 800bf54:	bf00      	nop
 800bf56:	e7fd      	b.n	800bf54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10b      	bne.n	800bf76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	60fb      	str	r3, [r7, #12]
}
 800bf70:	bf00      	nop
 800bf72:	bf00      	nop
 800bf74:	e7fd      	b.n	800bf72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bf76:	f000 ffc7 	bl	800cf08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf7a:	4b1d      	ldr	r3, [pc, #116]	@ (800bff0 <xTaskCheckForTimeOut+0xc0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf92:	d102      	bne.n	800bf9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf94:	2300      	movs	r3, #0
 800bf96:	61fb      	str	r3, [r7, #28]
 800bf98:	e023      	b.n	800bfe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681a      	ldr	r2, [r3, #0]
 800bf9e:	4b15      	ldr	r3, [pc, #84]	@ (800bff4 <xTaskCheckForTimeOut+0xc4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d007      	beq.n	800bfb6 <xTaskCheckForTimeOut+0x86>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	69ba      	ldr	r2, [r7, #24]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d302      	bcc.n	800bfb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	61fb      	str	r3, [r7, #28]
 800bfb4:	e015      	b.n	800bfe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d20b      	bcs.n	800bfd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	1ad2      	subs	r2, r2, r3
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f7ff ff99 	bl	800bf04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	e004      	b.n	800bfe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfe2:	f000 ffc3 	bl	800cf6c <vPortExitCritical>

	return xReturn;
 800bfe6:	69fb      	ldr	r3, [r7, #28]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	20001660 	.word	0x20001660
 800bff4:	20001674 	.word	0x20001674

0800bff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bff8:	b480      	push	{r7}
 800bffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bffc:	4b03      	ldr	r3, [pc, #12]	@ (800c00c <vTaskMissedYield+0x14>)
 800bffe:	2201      	movs	r2, #1
 800c000:	601a      	str	r2, [r3, #0]
}
 800c002:	bf00      	nop
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	20001670 	.word	0x20001670

0800c010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b082      	sub	sp, #8
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c018:	f000 f852 	bl	800c0c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c01c:	4b06      	ldr	r3, [pc, #24]	@ (800c038 <prvIdleTask+0x28>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d9f9      	bls.n	800c018 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c024:	4b05      	ldr	r3, [pc, #20]	@ (800c03c <prvIdleTask+0x2c>)
 800c026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	f3bf 8f4f 	dsb	sy
 800c030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c034:	e7f0      	b.n	800c018 <prvIdleTask+0x8>
 800c036:	bf00      	nop
 800c038:	20001560 	.word	0x20001560
 800c03c:	e000ed04 	.word	0xe000ed04

0800c040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c046:	2300      	movs	r3, #0
 800c048:	607b      	str	r3, [r7, #4]
 800c04a:	e00c      	b.n	800c066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	4613      	mov	r3, r2
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	009b      	lsls	r3, r3, #2
 800c056:	4a12      	ldr	r2, [pc, #72]	@ (800c0a0 <prvInitialiseTaskLists+0x60>)
 800c058:	4413      	add	r3, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fe f9b3 	bl	800a3c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3301      	adds	r3, #1
 800c064:	607b      	str	r3, [r7, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2b06      	cmp	r3, #6
 800c06a:	d9ef      	bls.n	800c04c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c06c:	480d      	ldr	r0, [pc, #52]	@ (800c0a4 <prvInitialiseTaskLists+0x64>)
 800c06e:	f7fe f9aa 	bl	800a3c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c072:	480d      	ldr	r0, [pc, #52]	@ (800c0a8 <prvInitialiseTaskLists+0x68>)
 800c074:	f7fe f9a7 	bl	800a3c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c078:	480c      	ldr	r0, [pc, #48]	@ (800c0ac <prvInitialiseTaskLists+0x6c>)
 800c07a:	f7fe f9a4 	bl	800a3c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c07e:	480c      	ldr	r0, [pc, #48]	@ (800c0b0 <prvInitialiseTaskLists+0x70>)
 800c080:	f7fe f9a1 	bl	800a3c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c084:	480b      	ldr	r0, [pc, #44]	@ (800c0b4 <prvInitialiseTaskLists+0x74>)
 800c086:	f7fe f99e 	bl	800a3c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c08a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b8 <prvInitialiseTaskLists+0x78>)
 800c08c:	4a05      	ldr	r2, [pc, #20]	@ (800c0a4 <prvInitialiseTaskLists+0x64>)
 800c08e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <prvInitialiseTaskLists+0x7c>)
 800c092:	4a05      	ldr	r2, [pc, #20]	@ (800c0a8 <prvInitialiseTaskLists+0x68>)
 800c094:	601a      	str	r2, [r3, #0]
}
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	20001560 	.word	0x20001560
 800c0a4:	200015ec 	.word	0x200015ec
 800c0a8:	20001600 	.word	0x20001600
 800c0ac:	2000161c 	.word	0x2000161c
 800c0b0:	20001630 	.word	0x20001630
 800c0b4:	20001648 	.word	0x20001648
 800c0b8:	20001614 	.word	0x20001614
 800c0bc:	20001618 	.word	0x20001618

0800c0c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0c6:	e019      	b.n	800c0fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0c8:	f000 ff1e 	bl	800cf08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0cc:	4b10      	ldr	r3, [pc, #64]	@ (800c110 <prvCheckTasksWaitingTermination+0x50>)
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3304      	adds	r3, #4
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7fe f9fe 	bl	800a4da <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0de:	4b0d      	ldr	r3, [pc, #52]	@ (800c114 <prvCheckTasksWaitingTermination+0x54>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	4a0b      	ldr	r2, [pc, #44]	@ (800c114 <prvCheckTasksWaitingTermination+0x54>)
 800c0e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c118 <prvCheckTasksWaitingTermination+0x58>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c118 <prvCheckTasksWaitingTermination+0x58>)
 800c0f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0f2:	f000 ff3b 	bl	800cf6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 f810 	bl	800c11c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0fc:	4b06      	ldr	r3, [pc, #24]	@ (800c118 <prvCheckTasksWaitingTermination+0x58>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1e1      	bne.n	800c0c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c104:	bf00      	nop
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20001630 	.word	0x20001630
 800c114:	2000165c 	.word	0x2000165c
 800c118:	20001644 	.word	0x20001644

0800c11c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c128:	4618      	mov	r0, r3
 800c12a:	f001 f8dd 	bl	800d2e8 <vPortFree>
			vPortFree( pxTCB );
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f001 f8da 	bl	800d2e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c142:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <prvResetNextTaskUnblockTime+0x38>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c14c:	4b0a      	ldr	r3, [pc, #40]	@ (800c178 <prvResetNextTaskUnblockTime+0x3c>)
 800c14e:	f04f 32ff 	mov.w	r2, #4294967295
 800c152:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c154:	e008      	b.n	800c168 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c156:	4b07      	ldr	r3, [pc, #28]	@ (800c174 <prvResetNextTaskUnblockTime+0x38>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	68db      	ldr	r3, [r3, #12]
 800c15e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	4a04      	ldr	r2, [pc, #16]	@ (800c178 <prvResetNextTaskUnblockTime+0x3c>)
 800c166:	6013      	str	r3, [r2, #0]
}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	20001614 	.word	0x20001614
 800c178:	2000167c 	.word	0x2000167c

0800c17c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c182:	4b0b      	ldr	r3, [pc, #44]	@ (800c1b0 <xTaskGetSchedulerState+0x34>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d102      	bne.n	800c190 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c18a:	2301      	movs	r3, #1
 800c18c:	607b      	str	r3, [r7, #4]
 800c18e:	e008      	b.n	800c1a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c190:	4b08      	ldr	r3, [pc, #32]	@ (800c1b4 <xTaskGetSchedulerState+0x38>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d102      	bne.n	800c19e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c198:	2302      	movs	r3, #2
 800c19a:	607b      	str	r3, [r7, #4]
 800c19c:	e001      	b.n	800c1a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1a2:	687b      	ldr	r3, [r7, #4]
	}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ae:	4770      	bx	lr
 800c1b0:	20001668 	.word	0x20001668
 800c1b4:	20001684 	.word	0x20001684

0800c1b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d05e      	beq.n	800c28c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	4b31      	ldr	r3, [pc, #196]	@ (800c298 <xTaskPriorityInherit+0xe0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d24e      	bcs.n	800c27a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	db06      	blt.n	800c1f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1e4:	4b2c      	ldr	r3, [pc, #176]	@ (800c298 <xTaskPriorityInherit+0xe0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ea:	f1c3 0207 	rsb	r2, r3, #7
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	6959      	ldr	r1, [r3, #20]
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1fa:	4613      	mov	r3, r2
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4a26      	ldr	r2, [pc, #152]	@ (800c29c <xTaskPriorityInherit+0xe4>)
 800c204:	4413      	add	r3, r2
 800c206:	4299      	cmp	r1, r3
 800c208:	d12f      	bne.n	800c26a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	3304      	adds	r3, #4
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fe f963 	bl	800a4da <uxListRemove>
 800c214:	4603      	mov	r3, r0
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10a      	bne.n	800c230 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c21e:	2201      	movs	r2, #1
 800c220:	fa02 f303 	lsl.w	r3, r2, r3
 800c224:	43da      	mvns	r2, r3
 800c226:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a0 <xTaskPriorityInherit+0xe8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4013      	ands	r3, r2
 800c22c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a0 <xTaskPriorityInherit+0xe8>)
 800c22e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c230:	4b19      	ldr	r3, [pc, #100]	@ (800c298 <xTaskPriorityInherit+0xe0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c23e:	2201      	movs	r2, #1
 800c240:	409a      	lsls	r2, r3
 800c242:	4b17      	ldr	r3, [pc, #92]	@ (800c2a0 <xTaskPriorityInherit+0xe8>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4313      	orrs	r3, r2
 800c248:	4a15      	ldr	r2, [pc, #84]	@ (800c2a0 <xTaskPriorityInherit+0xe8>)
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c250:	4613      	mov	r3, r2
 800c252:	009b      	lsls	r3, r3, #2
 800c254:	4413      	add	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4a10      	ldr	r2, [pc, #64]	@ (800c29c <xTaskPriorityInherit+0xe4>)
 800c25a:	441a      	add	r2, r3
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4610      	mov	r0, r2
 800c264:	f7fe f8dc 	bl	800a420 <vListInsertEnd>
 800c268:	e004      	b.n	800c274 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c26a:	4b0b      	ldr	r3, [pc, #44]	@ (800c298 <xTaskPriorityInherit+0xe0>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c274:	2301      	movs	r3, #1
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	e008      	b.n	800c28c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c27e:	4b06      	ldr	r3, [pc, #24]	@ (800c298 <xTaskPriorityInherit+0xe0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c284:	429a      	cmp	r2, r3
 800c286:	d201      	bcs.n	800c28c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c288:	2301      	movs	r3, #1
 800c28a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c28c:	68fb      	ldr	r3, [r7, #12]
	}
 800c28e:	4618      	mov	r0, r3
 800c290:	3710      	adds	r7, #16
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	2000155c 	.word	0x2000155c
 800c29c:	20001560 	.word	0x20001560
 800c2a0:	20001664 	.word	0x20001664

0800c2a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b086      	sub	sp, #24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d070      	beq.n	800c39c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c2ba:	4b3b      	ldr	r3, [pc, #236]	@ (800c3a8 <xTaskPriorityDisinherit+0x104>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d00b      	beq.n	800c2dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c2c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c8:	f383 8811 	msr	BASEPRI, r3
 800c2cc:	f3bf 8f6f 	isb	sy
 800c2d0:	f3bf 8f4f 	dsb	sy
 800c2d4:	60fb      	str	r3, [r7, #12]
}
 800c2d6:	bf00      	nop
 800c2d8:	bf00      	nop
 800c2da:	e7fd      	b.n	800c2d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10b      	bne.n	800c2fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e8:	f383 8811 	msr	BASEPRI, r3
 800c2ec:	f3bf 8f6f 	isb	sy
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	60bb      	str	r3, [r7, #8]
}
 800c2f6:	bf00      	nop
 800c2f8:	bf00      	nop
 800c2fa:	e7fd      	b.n	800c2f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c300:	1e5a      	subs	r2, r3, #1
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c30e:	429a      	cmp	r2, r3
 800c310:	d044      	beq.n	800c39c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c316:	2b00      	cmp	r3, #0
 800c318:	d140      	bne.n	800c39c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	3304      	adds	r3, #4
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe f8db 	bl	800a4da <uxListRemove>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d115      	bne.n	800c356 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c32e:	491f      	ldr	r1, [pc, #124]	@ (800c3ac <xTaskPriorityDisinherit+0x108>)
 800c330:	4613      	mov	r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	440b      	add	r3, r1
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10a      	bne.n	800c356 <xTaskPriorityDisinherit+0xb2>
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c344:	2201      	movs	r2, #1
 800c346:	fa02 f303 	lsl.w	r3, r2, r3
 800c34a:	43da      	mvns	r2, r3
 800c34c:	4b18      	ldr	r3, [pc, #96]	@ (800c3b0 <xTaskPriorityDisinherit+0x10c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4013      	ands	r3, r2
 800c352:	4a17      	ldr	r2, [pc, #92]	@ (800c3b0 <xTaskPriorityDisinherit+0x10c>)
 800c354:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c362:	f1c3 0207 	rsb	r2, r3, #7
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36e:	2201      	movs	r2, #1
 800c370:	409a      	lsls	r2, r3
 800c372:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b0 <xTaskPriorityDisinherit+0x10c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4313      	orrs	r3, r2
 800c378:	4a0d      	ldr	r2, [pc, #52]	@ (800c3b0 <xTaskPriorityDisinherit+0x10c>)
 800c37a:	6013      	str	r3, [r2, #0]
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c380:	4613      	mov	r3, r2
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4a08      	ldr	r2, [pc, #32]	@ (800c3ac <xTaskPriorityDisinherit+0x108>)
 800c38a:	441a      	add	r2, r3
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	3304      	adds	r3, #4
 800c390:	4619      	mov	r1, r3
 800c392:	4610      	mov	r0, r2
 800c394:	f7fe f844 	bl	800a420 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c398:	2301      	movs	r3, #1
 800c39a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c39c:	697b      	ldr	r3, [r7, #20]
	}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3718      	adds	r7, #24
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	2000155c 	.word	0x2000155c
 800c3ac:	20001560 	.word	0x20001560
 800c3b0:	20001664 	.word	0x20001664

0800c3b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b088      	sub	sp, #32
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d079      	beq.n	800c4c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10b      	bne.n	800c3ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60fb      	str	r3, [r7, #12]
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	e7fd      	b.n	800c3e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	429a      	cmp	r2, r3
 800c3f4:	d902      	bls.n	800c3fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	61fb      	str	r3, [r7, #28]
 800c3fa:	e002      	b.n	800c402 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c3fc:	69bb      	ldr	r3, [r7, #24]
 800c3fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c400:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d059      	beq.n	800c4c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	429a      	cmp	r2, r3
 800c414:	d154      	bne.n	800c4c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c416:	4b2c      	ldr	r3, [pc, #176]	@ (800c4c8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69ba      	ldr	r2, [r7, #24]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d10b      	bne.n	800c438 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60bb      	str	r3, [r7, #8]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c438:	69bb      	ldr	r3, [r7, #24]
 800c43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	69fa      	ldr	r2, [r7, #28]
 800c442:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	db04      	blt.n	800c456 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c44c:	69fb      	ldr	r3, [r7, #28]
 800c44e:	f1c3 0207 	rsb	r2, r3, #7
 800c452:	69bb      	ldr	r3, [r7, #24]
 800c454:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	6959      	ldr	r1, [r3, #20]
 800c45a:	693a      	ldr	r2, [r7, #16]
 800c45c:	4613      	mov	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	4413      	add	r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	4a19      	ldr	r2, [pc, #100]	@ (800c4cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c466:	4413      	add	r3, r2
 800c468:	4299      	cmp	r1, r3
 800c46a:	d129      	bne.n	800c4c0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	3304      	adds	r3, #4
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe f832 	bl	800a4da <uxListRemove>
 800c476:	4603      	mov	r3, r0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d10a      	bne.n	800c492 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c47c:	69bb      	ldr	r3, [r7, #24]
 800c47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c480:	2201      	movs	r2, #1
 800c482:	fa02 f303 	lsl.w	r3, r2, r3
 800c486:	43da      	mvns	r2, r3
 800c488:	4b11      	ldr	r3, [pc, #68]	@ (800c4d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4013      	ands	r3, r2
 800c48e:	4a10      	ldr	r2, [pc, #64]	@ (800c4d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c490:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c496:	2201      	movs	r2, #1
 800c498:	409a      	lsls	r2, r3
 800c49a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c4d0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c4a2:	6013      	str	r3, [r2, #0]
 800c4a4:	69bb      	ldr	r3, [r7, #24]
 800c4a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4a06      	ldr	r2, [pc, #24]	@ (800c4cc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4b2:	441a      	add	r2, r3
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	f7fd ffb0 	bl	800a420 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4c0:	bf00      	nop
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	2000155c 	.word	0x2000155c
 800c4cc:	20001560 	.word	0x20001560
 800c4d0:	20001664 	.word	0x20001664

0800c4d4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c4da:	4b09      	ldr	r3, [pc, #36]	@ (800c500 <uxTaskResetEventItemValue+0x2c>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e2:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <uxTaskResetEventItemValue+0x2c>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4e8:	4b05      	ldr	r3, [pc, #20]	@ (800c500 <uxTaskResetEventItemValue+0x2c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f1c2 0207 	rsb	r2, r2, #7
 800c4f0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c4f2:	687b      	ldr	r3, [r7, #4]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr
 800c500:	2000155c 	.word	0x2000155c

0800c504 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c504:	b480      	push	{r7}
 800c506:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c508:	4b07      	ldr	r3, [pc, #28]	@ (800c528 <pvTaskIncrementMutexHeldCount+0x24>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d004      	beq.n	800c51a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <pvTaskIncrementMutexHeldCount+0x24>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c516:	3201      	adds	r2, #1
 800c518:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c51a:	4b03      	ldr	r3, [pc, #12]	@ (800c528 <pvTaskIncrementMutexHeldCount+0x24>)
 800c51c:	681b      	ldr	r3, [r3, #0]
	}
 800c51e:	4618      	mov	r0, r3
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	2000155c 	.word	0x2000155c

0800c52c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c536:	4b29      	ldr	r3, [pc, #164]	@ (800c5dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c53c:	4b28      	ldr	r3, [pc, #160]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	3304      	adds	r3, #4
 800c542:	4618      	mov	r0, r3
 800c544:	f7fd ffc9 	bl	800a4da <uxListRemove>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10b      	bne.n	800c566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c54e:	4b24      	ldr	r3, [pc, #144]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c554:	2201      	movs	r2, #1
 800c556:	fa02 f303 	lsl.w	r3, r2, r3
 800c55a:	43da      	mvns	r2, r3
 800c55c:	4b21      	ldr	r3, [pc, #132]	@ (800c5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4013      	ands	r3, r2
 800c562:	4a20      	ldr	r2, [pc, #128]	@ (800c5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c56c:	d10a      	bne.n	800c584 <prvAddCurrentTaskToDelayedList+0x58>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d007      	beq.n	800c584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c574:	4b1a      	ldr	r3, [pc, #104]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3304      	adds	r3, #4
 800c57a:	4619      	mov	r1, r3
 800c57c:	481a      	ldr	r0, [pc, #104]	@ (800c5e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c57e:	f7fd ff4f 	bl	800a420 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c582:	e026      	b.n	800c5d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4413      	add	r3, r2
 800c58a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c58c:	4b14      	ldr	r3, [pc, #80]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d209      	bcs.n	800c5b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c59c:	4b13      	ldr	r3, [pc, #76]	@ (800c5ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7fd ff5d 	bl	800a468 <vListInsert>
}
 800c5ae:	e010      	b.n	800c5d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4610      	mov	r0, r2
 800c5be:	f7fd ff53 	bl	800a468 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d202      	bcs.n	800c5d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c5cc:	4a09      	ldr	r2, [pc, #36]	@ (800c5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	6013      	str	r3, [r2, #0]
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20001660 	.word	0x20001660
 800c5e0:	2000155c 	.word	0x2000155c
 800c5e4:	20001664 	.word	0x20001664
 800c5e8:	20001648 	.word	0x20001648
 800c5ec:	20001618 	.word	0x20001618
 800c5f0:	20001614 	.word	0x20001614
 800c5f4:	2000167c 	.word	0x2000167c

0800c5f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c602:	f000 fafb 	bl	800cbfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c606:	4b11      	ldr	r3, [pc, #68]	@ (800c64c <xTimerCreateTimerTask+0x54>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00a      	beq.n	800c624 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c60e:	4b10      	ldr	r3, [pc, #64]	@ (800c650 <xTimerCreateTimerTask+0x58>)
 800c610:	9301      	str	r3, [sp, #4]
 800c612:	2306      	movs	r3, #6
 800c614:	9300      	str	r3, [sp, #0]
 800c616:	2300      	movs	r3, #0
 800c618:	2280      	movs	r2, #128	@ 0x80
 800c61a:	490e      	ldr	r1, [pc, #56]	@ (800c654 <xTimerCreateTimerTask+0x5c>)
 800c61c:	480e      	ldr	r0, [pc, #56]	@ (800c658 <xTimerCreateTimerTask+0x60>)
 800c61e:	f7fe feed 	bl	800b3fc <xTaskCreate>
 800c622:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10b      	bne.n	800c642 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	603b      	str	r3, [r7, #0]
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c642:	687b      	ldr	r3, [r7, #4]
}
 800c644:	4618      	mov	r0, r3
 800c646:	3708      	adds	r7, #8
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}
 800c64c:	200016b8 	.word	0x200016b8
 800c650:	200016bc 	.word	0x200016bc
 800c654:	0801d930 	.word	0x0801d930
 800c658:	0800c795 	.word	0x0800c795

0800c65c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	@ 0x28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10b      	bne.n	800c68c <xTimerGenericCommand+0x30>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	623b      	str	r3, [r7, #32]
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	e7fd      	b.n	800c688 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c68c:	4b19      	ldr	r3, [pc, #100]	@ (800c6f4 <xTimerGenericCommand+0x98>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d02a      	beq.n	800c6ea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2b05      	cmp	r3, #5
 800c6a4:	dc18      	bgt.n	800c6d8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6a6:	f7ff fd69 	bl	800c17c <xTaskGetSchedulerState>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d109      	bne.n	800c6c4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6b0:	4b10      	ldr	r3, [pc, #64]	@ (800c6f4 <xTimerGenericCommand+0x98>)
 800c6b2:	6818      	ldr	r0, [r3, #0]
 800c6b4:	f107 0110 	add.w	r1, r7, #16
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6bc:	f7fe f82a 	bl	800a714 <xQueueGenericSend>
 800c6c0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c6c2:	e012      	b.n	800c6ea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f4 <xTimerGenericCommand+0x98>)
 800c6c6:	6818      	ldr	r0, [r3, #0]
 800c6c8:	f107 0110 	add.w	r1, r7, #16
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f7fe f820 	bl	800a714 <xQueueGenericSend>
 800c6d4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c6d6:	e008      	b.n	800c6ea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6d8:	4b06      	ldr	r3, [pc, #24]	@ (800c6f4 <xTimerGenericCommand+0x98>)
 800c6da:	6818      	ldr	r0, [r3, #0]
 800c6dc:	f107 0110 	add.w	r1, r7, #16
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	f7fe f918 	bl	800a918 <xQueueGenericSendFromISR>
 800c6e8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3728      	adds	r7, #40	@ 0x28
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	200016b8 	.word	0x200016b8

0800c6f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af02      	add	r7, sp, #8
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c702:	4b23      	ldr	r3, [pc, #140]	@ (800c790 <prvProcessExpiredTimer+0x98>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	3304      	adds	r3, #4
 800c710:	4618      	mov	r0, r3
 800c712:	f7fd fee2 	bl	800a4da <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c71c:	f003 0304 	and.w	r3, r3, #4
 800c720:	2b00      	cmp	r3, #0
 800c722:	d023      	beq.n	800c76c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	699a      	ldr	r2, [r3, #24]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	18d1      	adds	r1, r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	6978      	ldr	r0, [r7, #20]
 800c732:	f000 f8d5 	bl	800c8e0 <prvInsertTimerInActiveList>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d020      	beq.n	800c77e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c73c:	2300      	movs	r3, #0
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	2300      	movs	r3, #0
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	2100      	movs	r1, #0
 800c746:	6978      	ldr	r0, [r7, #20]
 800c748:	f7ff ff88 	bl	800c65c <xTimerGenericCommand>
 800c74c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d114      	bne.n	800c77e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c758:	f383 8811 	msr	BASEPRI, r3
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f3bf 8f4f 	dsb	sy
 800c764:	60fb      	str	r3, [r7, #12]
}
 800c766:	bf00      	nop
 800c768:	bf00      	nop
 800c76a:	e7fd      	b.n	800c768 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c772:	f023 0301 	bic.w	r3, r3, #1
 800c776:	b2da      	uxtb	r2, r3
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	6a1b      	ldr	r3, [r3, #32]
 800c782:	6978      	ldr	r0, [r7, #20]
 800c784:	4798      	blx	r3
}
 800c786:	bf00      	nop
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	200016b0 	.word	0x200016b0

0800c794 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c79c:	f107 0308 	add.w	r3, r7, #8
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f859 	bl	800c858 <prvGetNextExpireTime>
 800c7a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f000 f805 	bl	800c7bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7b2:	f000 f8d7 	bl	800c964 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7b6:	bf00      	nop
 800c7b8:	e7f0      	b.n	800c79c <prvTimerTask+0x8>
	...

0800c7bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7c6:	f7ff f861 	bl	800b88c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ca:	f107 0308 	add.w	r3, r7, #8
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 f866 	bl	800c8a0 <prvSampleTimeNow>
 800c7d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d130      	bne.n	800c83e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10a      	bne.n	800c7f8 <prvProcessTimerOrBlockTask+0x3c>
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d806      	bhi.n	800c7f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c7ea:	f7ff f85d 	bl	800b8a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff ff81 	bl	800c6f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c7f6:	e024      	b.n	800c842 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d008      	beq.n	800c810 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c7fe:	4b13      	ldr	r3, [pc, #76]	@ (800c84c <prvProcessTimerOrBlockTask+0x90>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d101      	bne.n	800c80c <prvProcessTimerOrBlockTask+0x50>
 800c808:	2301      	movs	r3, #1
 800c80a:	e000      	b.n	800c80e <prvProcessTimerOrBlockTask+0x52>
 800c80c:	2300      	movs	r3, #0
 800c80e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c810:	4b0f      	ldr	r3, [pc, #60]	@ (800c850 <prvProcessTimerOrBlockTask+0x94>)
 800c812:	6818      	ldr	r0, [r3, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	f7fe fdb9 	bl	800b394 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c822:	f7ff f841 	bl	800b8a8 <xTaskResumeAll>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c82c:	4b09      	ldr	r3, [pc, #36]	@ (800c854 <prvProcessTimerOrBlockTask+0x98>)
 800c82e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	f3bf 8f6f 	isb	sy
}
 800c83c:	e001      	b.n	800c842 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c83e:	f7ff f833 	bl	800b8a8 <xTaskResumeAll>
}
 800c842:	bf00      	nop
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}
 800c84a:	bf00      	nop
 800c84c:	200016b4 	.word	0x200016b4
 800c850:	200016b8 	.word	0x200016b8
 800c854:	e000ed04 	.word	0xe000ed04

0800c858 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c860:	4b0e      	ldr	r3, [pc, #56]	@ (800c89c <prvGetNextExpireTime+0x44>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <prvGetNextExpireTime+0x16>
 800c86a:	2201      	movs	r2, #1
 800c86c:	e000      	b.n	800c870 <prvGetNextExpireTime+0x18>
 800c86e:	2200      	movs	r2, #0
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d105      	bne.n	800c888 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c87c:	4b07      	ldr	r3, [pc, #28]	@ (800c89c <prvGetNextExpireTime+0x44>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60fb      	str	r3, [r7, #12]
 800c886:	e001      	b.n	800c88c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c88c:	68fb      	ldr	r3, [r7, #12]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3714      	adds	r7, #20
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	200016b0 	.word	0x200016b0

0800c8a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8a8:	f7ff f89c 	bl	800b9e4 <xTaskGetTickCount>
 800c8ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c8dc <prvSampleTimeNow+0x3c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d205      	bcs.n	800c8c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8b8:	f000 f93a 	bl	800cb30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	601a      	str	r2, [r3, #0]
 800c8c2:	e002      	b.n	800c8ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c8ca:	4a04      	ldr	r2, [pc, #16]	@ (800c8dc <prvSampleTimeNow+0x3c>)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	200016c0 	.word	0x200016c0

0800c8e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b086      	sub	sp, #24
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	607a      	str	r2, [r7, #4]
 800c8ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	429a      	cmp	r2, r3
 800c904:	d812      	bhi.n	800c92c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	1ad2      	subs	r2, r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	429a      	cmp	r2, r3
 800c912:	d302      	bcc.n	800c91a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c914:	2301      	movs	r3, #1
 800c916:	617b      	str	r3, [r7, #20]
 800c918:	e01b      	b.n	800c952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c91a:	4b10      	ldr	r3, [pc, #64]	@ (800c95c <prvInsertTimerInActiveList+0x7c>)
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	3304      	adds	r3, #4
 800c922:	4619      	mov	r1, r3
 800c924:	4610      	mov	r0, r2
 800c926:	f7fd fd9f 	bl	800a468 <vListInsert>
 800c92a:	e012      	b.n	800c952 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d206      	bcs.n	800c942 <prvInsertTimerInActiveList+0x62>
 800c934:	68ba      	ldr	r2, [r7, #8]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d302      	bcc.n	800c942 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	e007      	b.n	800c952 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c942:	4b07      	ldr	r3, [pc, #28]	@ (800c960 <prvInsertTimerInActiveList+0x80>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fd fd8b 	bl	800a468 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c952:	697b      	ldr	r3, [r7, #20]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	200016b4 	.word	0x200016b4
 800c960:	200016b0 	.word	0x200016b0

0800c964 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b08e      	sub	sp, #56	@ 0x38
 800c968:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c96a:	e0ce      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	da19      	bge.n	800c9a6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c972:	1d3b      	adds	r3, r7, #4
 800c974:	3304      	adds	r3, #4
 800c976:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10b      	bne.n	800c996 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	61fb      	str	r3, [r7, #28]
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	e7fd      	b.n	800c992 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c99c:	6850      	ldr	r0, [r2, #4]
 800c99e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c9a0:	6892      	ldr	r2, [r2, #8]
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	f2c0 80ae 	blt.w	800cb0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b4:	695b      	ldr	r3, [r3, #20]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9bc:	3304      	adds	r3, #4
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fd fd8b 	bl	800a4da <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9c4:	463b      	mov	r3, r7
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff ff6a 	bl	800c8a0 <prvSampleTimeNow>
 800c9cc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2b09      	cmp	r3, #9
 800c9d2:	f200 8097 	bhi.w	800cb04 <prvProcessReceivedCommands+0x1a0>
 800c9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9dc <prvProcessReceivedCommands+0x78>)
 800c9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9dc:	0800ca05 	.word	0x0800ca05
 800c9e0:	0800ca05 	.word	0x0800ca05
 800c9e4:	0800ca05 	.word	0x0800ca05
 800c9e8:	0800ca7b 	.word	0x0800ca7b
 800c9ec:	0800ca8f 	.word	0x0800ca8f
 800c9f0:	0800cadb 	.word	0x0800cadb
 800c9f4:	0800ca05 	.word	0x0800ca05
 800c9f8:	0800ca05 	.word	0x0800ca05
 800c9fc:	0800ca7b 	.word	0x0800ca7b
 800ca00:	0800ca8f 	.word	0x0800ca8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca0a:	f043 0301 	orr.w	r3, r3, #1
 800ca0e:	b2da      	uxtb	r2, r3
 800ca10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	18d1      	adds	r1, r2, r3
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca24:	f7ff ff5c 	bl	800c8e0 <prvInsertTimerInActiveList>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d06c      	beq.n	800cb08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca30:	6a1b      	ldr	r3, [r3, #32]
 800ca32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca38:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca3c:	f003 0304 	and.w	r3, r3, #4
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d061      	beq.n	800cb08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca44:	68ba      	ldr	r2, [r7, #8]
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	699b      	ldr	r3, [r3, #24]
 800ca4a:	441a      	add	r2, r3
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9300      	str	r3, [sp, #0]
 800ca50:	2300      	movs	r3, #0
 800ca52:	2100      	movs	r1, #0
 800ca54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca56:	f7ff fe01 	bl	800c65c <xTimerGenericCommand>
 800ca5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca5c:	6a3b      	ldr	r3, [r7, #32]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d152      	bne.n	800cb08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ca62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	61bb      	str	r3, [r7, #24]
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop
 800ca78:	e7fd      	b.n	800ca76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca80:	f023 0301 	bic.w	r3, r3, #1
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800ca8c:	e03d      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ca94:	f043 0301 	orr.w	r3, r3, #1
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800caa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caa8:	699b      	ldr	r3, [r3, #24]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10b      	bne.n	800cac6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	617b      	str	r3, [r7, #20]
}
 800cac0:	bf00      	nop
 800cac2:	bf00      	nop
 800cac4:	e7fd      	b.n	800cac2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cac8:	699a      	ldr	r2, [r3, #24]
 800caca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cacc:	18d1      	adds	r1, r2, r3
 800cace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cad4:	f7ff ff04 	bl	800c8e0 <prvInsertTimerInActiveList>
					break;
 800cad8:	e017      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cadc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cae0:	f003 0302 	and.w	r3, r3, #2
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d103      	bne.n	800caf0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800caea:	f000 fbfd 	bl	800d2e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800caee:	e00c      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800caf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800caf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800caf6:	f023 0301 	bic.w	r3, r3, #1
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
					break;
 800cb02:	e002      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cb04:	bf00      	nop
 800cb06:	e000      	b.n	800cb0a <prvProcessReceivedCommands+0x1a6>
					break;
 800cb08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb0a:	4b08      	ldr	r3, [pc, #32]	@ (800cb2c <prvProcessReceivedCommands+0x1c8>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	1d39      	adds	r1, r7, #4
 800cb10:	2200      	movs	r2, #0
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fe f82e 	bl	800ab74 <xQueueReceive>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f47f af26 	bne.w	800c96c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	3730      	adds	r7, #48	@ 0x30
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	200016b8 	.word	0x200016b8

0800cb30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb36:	e049      	b.n	800cbcc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb38:	4b2e      	ldr	r3, [pc, #184]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	68db      	ldr	r3, [r3, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb42:	4b2c      	ldr	r3, [pc, #176]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3304      	adds	r3, #4
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fd fcc2 	bl	800a4da <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cb64:	f003 0304 	and.w	r3, r3, #4
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d02f      	beq.n	800cbcc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	4413      	add	r3, r2
 800cb74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d90e      	bls.n	800cb9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cb8a:	4b1a      	ldr	r3, [pc, #104]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3304      	adds	r3, #4
 800cb92:	4619      	mov	r1, r3
 800cb94:	4610      	mov	r0, r2
 800cb96:	f7fd fc67 	bl	800a468 <vListInsert>
 800cb9a:	e017      	b.n	800cbcc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	2300      	movs	r3, #0
 800cba2:	693a      	ldr	r2, [r7, #16]
 800cba4:	2100      	movs	r1, #0
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f7ff fd58 	bl	800c65c <xTimerGenericCommand>
 800cbac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10b      	bne.n	800cbcc <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	603b      	str	r3, [r7, #0]
}
 800cbc6:	bf00      	nop
 800cbc8:	bf00      	nop
 800cbca:	e7fd      	b.n	800cbc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbcc:	4b09      	ldr	r3, [pc, #36]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1b0      	bne.n	800cb38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cbd6:	4b07      	ldr	r3, [pc, #28]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cbdc:	4b06      	ldr	r3, [pc, #24]	@ (800cbf8 <prvSwitchTimerLists+0xc8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a04      	ldr	r2, [pc, #16]	@ (800cbf4 <prvSwitchTimerLists+0xc4>)
 800cbe2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cbe4:	4a04      	ldr	r2, [pc, #16]	@ (800cbf8 <prvSwitchTimerLists+0xc8>)
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	6013      	str	r3, [r2, #0]
}
 800cbea:	bf00      	nop
 800cbec:	3718      	adds	r7, #24
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	200016b0 	.word	0x200016b0
 800cbf8:	200016b4 	.word	0x200016b4

0800cbfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc00:	f000 f982 	bl	800cf08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc04:	4b12      	ldr	r3, [pc, #72]	@ (800cc50 <prvCheckForValidListAndQueue+0x54>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d11d      	bne.n	800cc48 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc0c:	4811      	ldr	r0, [pc, #68]	@ (800cc54 <prvCheckForValidListAndQueue+0x58>)
 800cc0e:	f7fd fbda 	bl	800a3c6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc12:	4811      	ldr	r0, [pc, #68]	@ (800cc58 <prvCheckForValidListAndQueue+0x5c>)
 800cc14:	f7fd fbd7 	bl	800a3c6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc18:	4b10      	ldr	r3, [pc, #64]	@ (800cc5c <prvCheckForValidListAndQueue+0x60>)
 800cc1a:	4a0e      	ldr	r2, [pc, #56]	@ (800cc54 <prvCheckForValidListAndQueue+0x58>)
 800cc1c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc1e:	4b10      	ldr	r3, [pc, #64]	@ (800cc60 <prvCheckForValidListAndQueue+0x64>)
 800cc20:	4a0d      	ldr	r2, [pc, #52]	@ (800cc58 <prvCheckForValidListAndQueue+0x5c>)
 800cc22:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cc24:	2200      	movs	r2, #0
 800cc26:	2110      	movs	r1, #16
 800cc28:	2001      	movs	r0, #1
 800cc2a:	f7fd fceb 	bl	800a604 <xQueueGenericCreate>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	4a07      	ldr	r2, [pc, #28]	@ (800cc50 <prvCheckForValidListAndQueue+0x54>)
 800cc32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc34:	4b06      	ldr	r3, [pc, #24]	@ (800cc50 <prvCheckForValidListAndQueue+0x54>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc3c:	4b04      	ldr	r3, [pc, #16]	@ (800cc50 <prvCheckForValidListAndQueue+0x54>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4908      	ldr	r1, [pc, #32]	@ (800cc64 <prvCheckForValidListAndQueue+0x68>)
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe fb52 	bl	800b2ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc48:	f000 f990 	bl	800cf6c <vPortExitCritical>
}
 800cc4c:	bf00      	nop
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	200016b8 	.word	0x200016b8
 800cc54:	20001688 	.word	0x20001688
 800cc58:	2000169c 	.word	0x2000169c
 800cc5c:	200016b0 	.word	0x200016b0
 800cc60:	200016b4 	.word	0x200016b4
 800cc64:	0801d938 	.word	0x0801d938

0800cc68 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08a      	sub	sp, #40	@ 0x28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800cc76:	f06f 0301 	mvn.w	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cc88:	4b06      	ldr	r3, [pc, #24]	@ (800cca4 <xTimerPendFunctionCallFromISR+0x3c>)
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	f107 0114 	add.w	r1, r7, #20
 800cc90:	2300      	movs	r3, #0
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	f7fd fe40 	bl	800a918 <xQueueGenericSendFromISR>
 800cc98:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800cc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3728      	adds	r7, #40	@ 0x28
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	200016b8 	.word	0x200016b8

0800cca8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	3b04      	subs	r3, #4
 800ccb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ccc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	3b04      	subs	r3, #4
 800ccc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	f023 0201 	bic.w	r2, r3, #1
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3b04      	subs	r3, #4
 800ccd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ccd8:	4a0c      	ldr	r2, [pc, #48]	@ (800cd0c <pxPortInitialiseStack+0x64>)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	3b14      	subs	r3, #20
 800cce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3b04      	subs	r3, #4
 800ccee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f06f 0202 	mvn.w	r2, #2
 800ccf6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3b20      	subs	r3, #32
 800ccfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3714      	adds	r7, #20
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	0800cd11 	.word	0x0800cd11

0800cd10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd16:	2300      	movs	r3, #0
 800cd18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd1a:	4b13      	ldr	r3, [pc, #76]	@ (800cd68 <prvTaskExitError+0x58>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd22:	d00b      	beq.n	800cd3c <prvTaskExitError+0x2c>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	60fb      	str	r3, [r7, #12]
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <prvTaskExitError+0x28>
	__asm volatile
 800cd3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd40:	f383 8811 	msr	BASEPRI, r3
 800cd44:	f3bf 8f6f 	isb	sy
 800cd48:	f3bf 8f4f 	dsb	sy
 800cd4c:	60bb      	str	r3, [r7, #8]
}
 800cd4e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd50:	bf00      	nop
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d0fc      	beq.n	800cd52 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	3714      	adds	r7, #20
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop
 800cd68:	200000ac 	.word	0x200000ac
 800cd6c:	00000000 	.word	0x00000000

0800cd70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd70:	4b07      	ldr	r3, [pc, #28]	@ (800cd90 <pxCurrentTCBConst2>)
 800cd72:	6819      	ldr	r1, [r3, #0]
 800cd74:	6808      	ldr	r0, [r1, #0]
 800cd76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7a:	f380 8809 	msr	PSP, r0
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f04f 0000 	mov.w	r0, #0
 800cd86:	f380 8811 	msr	BASEPRI, r0
 800cd8a:	4770      	bx	lr
 800cd8c:	f3af 8000 	nop.w

0800cd90 <pxCurrentTCBConst2>:
 800cd90:	2000155c 	.word	0x2000155c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop

0800cd98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd98:	4808      	ldr	r0, [pc, #32]	@ (800cdbc <prvPortStartFirstTask+0x24>)
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	6800      	ldr	r0, [r0, #0]
 800cd9e:	f380 8808 	msr	MSP, r0
 800cda2:	f04f 0000 	mov.w	r0, #0
 800cda6:	f380 8814 	msr	CONTROL, r0
 800cdaa:	b662      	cpsie	i
 800cdac:	b661      	cpsie	f
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	df00      	svc	0
 800cdb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdba:	bf00      	nop
 800cdbc:	e000ed08 	.word	0xe000ed08

0800cdc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdc6:	4b47      	ldr	r3, [pc, #284]	@ (800cee4 <xPortStartScheduler+0x124>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	4a47      	ldr	r2, [pc, #284]	@ (800cee8 <xPortStartScheduler+0x128>)
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d10b      	bne.n	800cde8 <xPortStartScheduler+0x28>
	__asm volatile
 800cdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd4:	f383 8811 	msr	BASEPRI, r3
 800cdd8:	f3bf 8f6f 	isb	sy
 800cddc:	f3bf 8f4f 	dsb	sy
 800cde0:	613b      	str	r3, [r7, #16]
}
 800cde2:	bf00      	nop
 800cde4:	bf00      	nop
 800cde6:	e7fd      	b.n	800cde4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cde8:	4b3e      	ldr	r3, [pc, #248]	@ (800cee4 <xPortStartScheduler+0x124>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a3f      	ldr	r2, [pc, #252]	@ (800ceec <xPortStartScheduler+0x12c>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d10b      	bne.n	800ce0a <xPortStartScheduler+0x4a>
	__asm volatile
 800cdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	60fb      	str	r3, [r7, #12]
}
 800ce04:	bf00      	nop
 800ce06:	bf00      	nop
 800ce08:	e7fd      	b.n	800ce06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce0a:	4b39      	ldr	r3, [pc, #228]	@ (800cef0 <xPortStartScheduler+0x130>)
 800ce0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	22ff      	movs	r2, #255	@ 0xff
 800ce1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce24:	78fb      	ldrb	r3, [r7, #3]
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	4b31      	ldr	r3, [pc, #196]	@ (800cef4 <xPortStartScheduler+0x134>)
 800ce30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce32:	4b31      	ldr	r3, [pc, #196]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce34:	2207      	movs	r2, #7
 800ce36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce38:	e009      	b.n	800ce4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ce3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	4a2d      	ldr	r2, [pc, #180]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce44:	78fb      	ldrb	r3, [r7, #3]
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce4e:	78fb      	ldrb	r3, [r7, #3]
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce56:	2b80      	cmp	r3, #128	@ 0x80
 800ce58:	d0ef      	beq.n	800ce3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce5a:	4b27      	ldr	r3, [pc, #156]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f1c3 0307 	rsb	r3, r3, #7
 800ce62:	2b04      	cmp	r3, #4
 800ce64:	d00b      	beq.n	800ce7e <xPortStartScheduler+0xbe>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	60bb      	str	r3, [r7, #8]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce7e:	4b1e      	ldr	r3, [pc, #120]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	021b      	lsls	r3, r3, #8
 800ce84:	4a1c      	ldr	r2, [pc, #112]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce88:	4b1b      	ldr	r3, [pc, #108]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce90:	4a19      	ldr	r2, [pc, #100]	@ (800cef8 <xPortStartScheduler+0x138>)
 800ce92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce9c:	4b17      	ldr	r3, [pc, #92]	@ (800cefc <xPortStartScheduler+0x13c>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a16      	ldr	r2, [pc, #88]	@ (800cefc <xPortStartScheduler+0x13c>)
 800cea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cea8:	4b14      	ldr	r3, [pc, #80]	@ (800cefc <xPortStartScheduler+0x13c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a13      	ldr	r2, [pc, #76]	@ (800cefc <xPortStartScheduler+0x13c>)
 800ceae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ceb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ceb4:	f000 f8da 	bl	800d06c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ceb8:	4b11      	ldr	r3, [pc, #68]	@ (800cf00 <xPortStartScheduler+0x140>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cebe:	f000 f8f9 	bl	800d0b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cec2:	4b10      	ldr	r3, [pc, #64]	@ (800cf04 <xPortStartScheduler+0x144>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a0f      	ldr	r2, [pc, #60]	@ (800cf04 <xPortStartScheduler+0x144>)
 800cec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cece:	f7ff ff63 	bl	800cd98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ced2:	f7fe fe63 	bl	800bb9c <vTaskSwitchContext>
	prvTaskExitError();
 800ced6:	f7ff ff1b 	bl	800cd10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	e000ed00 	.word	0xe000ed00
 800cee8:	410fc271 	.word	0x410fc271
 800ceec:	410fc270 	.word	0x410fc270
 800cef0:	e000e400 	.word	0xe000e400
 800cef4:	200016c4 	.word	0x200016c4
 800cef8:	200016c8 	.word	0x200016c8
 800cefc:	e000ed20 	.word	0xe000ed20
 800cf00:	200000ac 	.word	0x200000ac
 800cf04:	e000ef34 	.word	0xe000ef34

0800cf08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	607b      	str	r3, [r7, #4]
}
 800cf20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf22:	4b10      	ldr	r3, [pc, #64]	@ (800cf64 <vPortEnterCritical+0x5c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	3301      	adds	r3, #1
 800cf28:	4a0e      	ldr	r2, [pc, #56]	@ (800cf64 <vPortEnterCritical+0x5c>)
 800cf2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf2c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf64 <vPortEnterCritical+0x5c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d110      	bne.n	800cf56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf34:	4b0c      	ldr	r3, [pc, #48]	@ (800cf68 <vPortEnterCritical+0x60>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00b      	beq.n	800cf56 <vPortEnterCritical+0x4e>
	__asm volatile
 800cf3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	603b      	str	r3, [r7, #0]
}
 800cf50:	bf00      	nop
 800cf52:	bf00      	nop
 800cf54:	e7fd      	b.n	800cf52 <vPortEnterCritical+0x4a>
	}
}
 800cf56:	bf00      	nop
 800cf58:	370c      	adds	r7, #12
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	200000ac 	.word	0x200000ac
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf72:	4b12      	ldr	r3, [pc, #72]	@ (800cfbc <vPortExitCritical+0x50>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d10b      	bne.n	800cf92 <vPortExitCritical+0x26>
	__asm volatile
 800cf7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf7e:	f383 8811 	msr	BASEPRI, r3
 800cf82:	f3bf 8f6f 	isb	sy
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	607b      	str	r3, [r7, #4]
}
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
 800cf90:	e7fd      	b.n	800cf8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf92:	4b0a      	ldr	r3, [pc, #40]	@ (800cfbc <vPortExitCritical+0x50>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3b01      	subs	r3, #1
 800cf98:	4a08      	ldr	r2, [pc, #32]	@ (800cfbc <vPortExitCritical+0x50>)
 800cf9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf9c:	4b07      	ldr	r3, [pc, #28]	@ (800cfbc <vPortExitCritical+0x50>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d105      	bne.n	800cfb0 <vPortExitCritical+0x44>
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	f383 8811 	msr	BASEPRI, r3
}
 800cfae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	200000ac 	.word	0x200000ac

0800cfc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cfc0:	f3ef 8009 	mrs	r0, PSP
 800cfc4:	f3bf 8f6f 	isb	sy
 800cfc8:	4b15      	ldr	r3, [pc, #84]	@ (800d020 <pxCurrentTCBConst>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	f01e 0f10 	tst.w	lr, #16
 800cfd0:	bf08      	it	eq
 800cfd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cfd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfda:	6010      	str	r0, [r2, #0]
 800cfdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cfe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cfe4:	f380 8811 	msr	BASEPRI, r0
 800cfe8:	f3bf 8f4f 	dsb	sy
 800cfec:	f3bf 8f6f 	isb	sy
 800cff0:	f7fe fdd4 	bl	800bb9c <vTaskSwitchContext>
 800cff4:	f04f 0000 	mov.w	r0, #0
 800cff8:	f380 8811 	msr	BASEPRI, r0
 800cffc:	bc09      	pop	{r0, r3}
 800cffe:	6819      	ldr	r1, [r3, #0]
 800d000:	6808      	ldr	r0, [r1, #0]
 800d002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d006:	f01e 0f10 	tst.w	lr, #16
 800d00a:	bf08      	it	eq
 800d00c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d010:	f380 8809 	msr	PSP, r0
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	f3af 8000 	nop.w

0800d020 <pxCurrentTCBConst>:
 800d020:	2000155c 	.word	0x2000155c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d024:	bf00      	nop
 800d026:	bf00      	nop

0800d028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
	__asm volatile
 800d02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d032:	f383 8811 	msr	BASEPRI, r3
 800d036:	f3bf 8f6f 	isb	sy
 800d03a:	f3bf 8f4f 	dsb	sy
 800d03e:	607b      	str	r3, [r7, #4]
}
 800d040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d042:	f7fe fcf1 	bl	800ba28 <xTaskIncrementTick>
 800d046:	4603      	mov	r3, r0
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d003      	beq.n	800d054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d04c:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <xPortSysTickHandler+0x40>)
 800d04e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	2300      	movs	r3, #0
 800d056:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	f383 8811 	msr	BASEPRI, r3
}
 800d05e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d06c:	b480      	push	{r7}
 800d06e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d070:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a0 <vPortSetupTimerInterrupt+0x34>)
 800d072:	2200      	movs	r2, #0
 800d074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d076:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a4 <vPortSetupTimerInterrupt+0x38>)
 800d078:	2200      	movs	r2, #0
 800d07a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d07c:	4b0a      	ldr	r3, [pc, #40]	@ (800d0a8 <vPortSetupTimerInterrupt+0x3c>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a0a      	ldr	r2, [pc, #40]	@ (800d0ac <vPortSetupTimerInterrupt+0x40>)
 800d082:	fba2 2303 	umull	r2, r3, r2, r3
 800d086:	099b      	lsrs	r3, r3, #6
 800d088:	4a09      	ldr	r2, [pc, #36]	@ (800d0b0 <vPortSetupTimerInterrupt+0x44>)
 800d08a:	3b01      	subs	r3, #1
 800d08c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d08e:	4b04      	ldr	r3, [pc, #16]	@ (800d0a0 <vPortSetupTimerInterrupt+0x34>)
 800d090:	2207      	movs	r2, #7
 800d092:	601a      	str	r2, [r3, #0]
}
 800d094:	bf00      	nop
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	e000e010 	.word	0xe000e010
 800d0a4:	e000e018 	.word	0xe000e018
 800d0a8:	200000a0 	.word	0x200000a0
 800d0ac:	10624dd3 	.word	0x10624dd3
 800d0b0:	e000e014 	.word	0xe000e014

0800d0b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d0c4 <vPortEnableVFP+0x10>
 800d0b8:	6801      	ldr	r1, [r0, #0]
 800d0ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d0be:	6001      	str	r1, [r0, #0]
 800d0c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0c2:	bf00      	nop
 800d0c4:	e000ed88 	.word	0xe000ed88

0800d0c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b085      	sub	sp, #20
 800d0cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0ce:	f3ef 8305 	mrs	r3, IPSR
 800d0d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b0f      	cmp	r3, #15
 800d0d8:	d915      	bls.n	800d106 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d0da:	4a18      	ldr	r2, [pc, #96]	@ (800d13c <vPortValidateInterruptPriority+0x74>)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	4413      	add	r3, r2
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d0e4:	4b16      	ldr	r3, [pc, #88]	@ (800d140 <vPortValidateInterruptPriority+0x78>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	7afa      	ldrb	r2, [r7, #11]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d20b      	bcs.n	800d106 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	607b      	str	r3, [r7, #4]
}
 800d100:	bf00      	nop
 800d102:	bf00      	nop
 800d104:	e7fd      	b.n	800d102 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d106:	4b0f      	ldr	r3, [pc, #60]	@ (800d144 <vPortValidateInterruptPriority+0x7c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d10e:	4b0e      	ldr	r3, [pc, #56]	@ (800d148 <vPortValidateInterruptPriority+0x80>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	429a      	cmp	r2, r3
 800d114:	d90b      	bls.n	800d12e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	603b      	str	r3, [r7, #0]
}
 800d128:	bf00      	nop
 800d12a:	bf00      	nop
 800d12c:	e7fd      	b.n	800d12a <vPortValidateInterruptPriority+0x62>
	}
 800d12e:	bf00      	nop
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	e000e3f0 	.word	0xe000e3f0
 800d140:	200016c4 	.word	0x200016c4
 800d144:	e000ed0c 	.word	0xe000ed0c
 800d148:	200016c8 	.word	0x200016c8

0800d14c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08a      	sub	sp, #40	@ 0x28
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d154:	2300      	movs	r3, #0
 800d156:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d158:	f7fe fb98 	bl	800b88c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d15c:	4b5c      	ldr	r3, [pc, #368]	@ (800d2d0 <pvPortMalloc+0x184>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d164:	f000 f924 	bl	800d3b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d168:	4b5a      	ldr	r3, [pc, #360]	@ (800d2d4 <pvPortMalloc+0x188>)
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4013      	ands	r3, r2
 800d170:	2b00      	cmp	r3, #0
 800d172:	f040 8095 	bne.w	800d2a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d01e      	beq.n	800d1ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d17c:	2208      	movs	r2, #8
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	4413      	add	r3, r2
 800d182:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f003 0307 	and.w	r3, r3, #7
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d015      	beq.n	800d1ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f023 0307 	bic.w	r3, r3, #7
 800d194:	3308      	adds	r3, #8
 800d196:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f003 0307 	and.w	r3, r3, #7
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00b      	beq.n	800d1ba <pvPortMalloc+0x6e>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	617b      	str	r3, [r7, #20]
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop
 800d1b8:	e7fd      	b.n	800d1b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d06f      	beq.n	800d2a0 <pvPortMalloc+0x154>
 800d1c0:	4b45      	ldr	r3, [pc, #276]	@ (800d2d8 <pvPortMalloc+0x18c>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d86a      	bhi.n	800d2a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1ca:	4b44      	ldr	r3, [pc, #272]	@ (800d2dc <pvPortMalloc+0x190>)
 800d1cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1ce:	4b43      	ldr	r3, [pc, #268]	@ (800d2dc <pvPortMalloc+0x190>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1d4:	e004      	b.n	800d1e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d903      	bls.n	800d1f2 <pvPortMalloc+0xa6>
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1f1      	bne.n	800d1d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d1f2:	4b37      	ldr	r3, [pc, #220]	@ (800d2d0 <pvPortMalloc+0x184>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d051      	beq.n	800d2a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2208      	movs	r2, #8
 800d202:	4413      	add	r3, r2
 800d204:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	6a3b      	ldr	r3, [r7, #32]
 800d20c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	685a      	ldr	r2, [r3, #4]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	1ad2      	subs	r2, r2, r3
 800d216:	2308      	movs	r3, #8
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d920      	bls.n	800d260 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d21e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4413      	add	r3, r2
 800d224:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	f003 0307 	and.w	r3, r3, #7
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00b      	beq.n	800d248 <pvPortMalloc+0xfc>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	613b      	str	r3, [r7, #16]
}
 800d242:	bf00      	nop
 800d244:	bf00      	nop
 800d246:	e7fd      	b.n	800d244 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	685a      	ldr	r2, [r3, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	1ad2      	subs	r2, r2, r3
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d25a:	69b8      	ldr	r0, [r7, #24]
 800d25c:	f000 f90a 	bl	800d474 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d260:	4b1d      	ldr	r3, [pc, #116]	@ (800d2d8 <pvPortMalloc+0x18c>)
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2d8 <pvPortMalloc+0x18c>)
 800d26c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d26e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d8 <pvPortMalloc+0x18c>)
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	4b1b      	ldr	r3, [pc, #108]	@ (800d2e0 <pvPortMalloc+0x194>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	429a      	cmp	r2, r3
 800d278:	d203      	bcs.n	800d282 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d27a:	4b17      	ldr	r3, [pc, #92]	@ (800d2d8 <pvPortMalloc+0x18c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4a18      	ldr	r2, [pc, #96]	@ (800d2e0 <pvPortMalloc+0x194>)
 800d280:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d284:	685a      	ldr	r2, [r3, #4]
 800d286:	4b13      	ldr	r3, [pc, #76]	@ (800d2d4 <pvPortMalloc+0x188>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	431a      	orrs	r2, r3
 800d28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d28e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	2200      	movs	r2, #0
 800d294:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d296:	4b13      	ldr	r3, [pc, #76]	@ (800d2e4 <pvPortMalloc+0x198>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	4a11      	ldr	r2, [pc, #68]	@ (800d2e4 <pvPortMalloc+0x198>)
 800d29e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2a0:	f7fe fb02 	bl	800b8a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	f003 0307 	and.w	r3, r3, #7
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00b      	beq.n	800d2c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2b2:	f383 8811 	msr	BASEPRI, r3
 800d2b6:	f3bf 8f6f 	isb	sy
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	60fb      	str	r3, [r7, #12]
}
 800d2c0:	bf00      	nop
 800d2c2:	bf00      	nop
 800d2c4:	e7fd      	b.n	800d2c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3728      	adds	r7, #40	@ 0x28
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	2000a2d4 	.word	0x2000a2d4
 800d2d4:	2000a2e8 	.word	0x2000a2e8
 800d2d8:	2000a2d8 	.word	0x2000a2d8
 800d2dc:	2000a2cc 	.word	0x2000a2cc
 800d2e0:	2000a2dc 	.word	0x2000a2dc
 800d2e4:	2000a2e0 	.word	0x2000a2e0

0800d2e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b086      	sub	sp, #24
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d04f      	beq.n	800d39a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d2fa:	2308      	movs	r3, #8
 800d2fc:	425b      	negs	r3, r3
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	4413      	add	r3, r2
 800d302:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	685a      	ldr	r2, [r3, #4]
 800d30c:	4b25      	ldr	r3, [pc, #148]	@ (800d3a4 <vPortFree+0xbc>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4013      	ands	r3, r2
 800d312:	2b00      	cmp	r3, #0
 800d314:	d10b      	bne.n	800d32e <vPortFree+0x46>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	60fb      	str	r3, [r7, #12]
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	e7fd      	b.n	800d32a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00b      	beq.n	800d34e <vPortFree+0x66>
	__asm volatile
 800d336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d33a:	f383 8811 	msr	BASEPRI, r3
 800d33e:	f3bf 8f6f 	isb	sy
 800d342:	f3bf 8f4f 	dsb	sy
 800d346:	60bb      	str	r3, [r7, #8]
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	e7fd      	b.n	800d34a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	4b14      	ldr	r3, [pc, #80]	@ (800d3a4 <vPortFree+0xbc>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4013      	ands	r3, r2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d01e      	beq.n	800d39a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d11a      	bne.n	800d39a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d364:	693b      	ldr	r3, [r7, #16]
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a4 <vPortFree+0xbc>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	43db      	mvns	r3, r3
 800d36e:	401a      	ands	r2, r3
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d374:	f7fe fa8a 	bl	800b88c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a8 <vPortFree+0xc0>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4413      	add	r3, r2
 800d382:	4a09      	ldr	r2, [pc, #36]	@ (800d3a8 <vPortFree+0xc0>)
 800d384:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d386:	6938      	ldr	r0, [r7, #16]
 800d388:	f000 f874 	bl	800d474 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d38c:	4b07      	ldr	r3, [pc, #28]	@ (800d3ac <vPortFree+0xc4>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	3301      	adds	r3, #1
 800d392:	4a06      	ldr	r2, [pc, #24]	@ (800d3ac <vPortFree+0xc4>)
 800d394:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d396:	f7fe fa87 	bl	800b8a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d39a:	bf00      	nop
 800d39c:	3718      	adds	r7, #24
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	2000a2e8 	.word	0x2000a2e8
 800d3a8:	2000a2d8 	.word	0x2000a2d8
 800d3ac:	2000a2e4 	.word	0x2000a2e4

0800d3b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3b6:	f44f 430c 	mov.w	r3, #35840	@ 0x8c00
 800d3ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3bc:	4b27      	ldr	r3, [pc, #156]	@ (800d45c <prvHeapInit+0xac>)
 800d3be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00c      	beq.n	800d3e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3307      	adds	r3, #7
 800d3ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f023 0307 	bic.w	r3, r3, #7
 800d3d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	4a1f      	ldr	r2, [pc, #124]	@ (800d45c <prvHeapInit+0xac>)
 800d3e0:	4413      	add	r3, r2
 800d3e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d3e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d460 <prvHeapInit+0xb0>)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d3ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d460 <prvHeapInit+0xb0>)
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d3fc:	2208      	movs	r2, #8
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	1a9b      	subs	r3, r3, r2
 800d402:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f023 0307 	bic.w	r3, r3, #7
 800d40a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4a15      	ldr	r2, [pc, #84]	@ (800d464 <prvHeapInit+0xb4>)
 800d410:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d412:	4b14      	ldr	r3, [pc, #80]	@ (800d464 <prvHeapInit+0xb4>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2200      	movs	r2, #0
 800d418:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d41a:	4b12      	ldr	r3, [pc, #72]	@ (800d464 <prvHeapInit+0xb4>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2200      	movs	r2, #0
 800d420:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	1ad2      	subs	r2, r2, r3
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d430:	4b0c      	ldr	r3, [pc, #48]	@ (800d464 <prvHeapInit+0xb4>)
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4a0a      	ldr	r2, [pc, #40]	@ (800d468 <prvHeapInit+0xb8>)
 800d43e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	4a09      	ldr	r2, [pc, #36]	@ (800d46c <prvHeapInit+0xbc>)
 800d446:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d448:	4b09      	ldr	r3, [pc, #36]	@ (800d470 <prvHeapInit+0xc0>)
 800d44a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d44e:	601a      	str	r2, [r3, #0]
}
 800d450:	bf00      	nop
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	200016cc 	.word	0x200016cc
 800d460:	2000a2cc 	.word	0x2000a2cc
 800d464:	2000a2d4 	.word	0x2000a2d4
 800d468:	2000a2dc 	.word	0x2000a2dc
 800d46c:	2000a2d8 	.word	0x2000a2d8
 800d470:	2000a2e8 	.word	0x2000a2e8

0800d474 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d47c:	4b28      	ldr	r3, [pc, #160]	@ (800d520 <prvInsertBlockIntoFreeList+0xac>)
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e002      	b.n	800d488 <prvInsertBlockIntoFreeList+0x14>
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d8f7      	bhi.n	800d482 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	4413      	add	r3, r2
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d108      	bne.n	800d4b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	441a      	add	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	441a      	add	r2, r3
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	429a      	cmp	r2, r3
 800d4c8:	d118      	bne.n	800d4fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	4b15      	ldr	r3, [pc, #84]	@ (800d524 <prvInsertBlockIntoFreeList+0xb0>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d00d      	beq.n	800d4f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	441a      	add	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	601a      	str	r2, [r3, #0]
 800d4f0:	e008      	b.n	800d504 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d4f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d524 <prvInsertBlockIntoFreeList+0xb0>)
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	e003      	b.n	800d504 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681a      	ldr	r2, [r3, #0]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d002      	beq.n	800d512 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	687a      	ldr	r2, [r7, #4]
 800d510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d512:	bf00      	nop
 800d514:	3714      	adds	r7, #20
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2000a2cc 	.word	0x2000a2cc
 800d524:	2000a2d4 	.word	0x2000a2d4

0800d528 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b084      	sub	sp, #16
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d007      	beq.n	800d54c <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	6852      	ldr	r2, [r2, #4]
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
 800d548:	4603      	mov	r3, r0
 800d54a:	e006      	b.n	800d55a <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	6852      	ldr	r2, [r2, #4]
 800d554:	4610      	mov	r0, r2
 800d556:	4798      	blx	r3
    return ERR_OK;
 800d558:	2300      	movs	r3, #0
  }
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
	...

0800d564 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08e      	sub	sp, #56	@ 0x38
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d57c:	f107 0314 	add.w	r3, r7, #20
 800d580:	4619      	mov	r1, r3
 800d582:	4806      	ldr	r0, [pc, #24]	@ (800d59c <netifapi_netif_common+0x38>)
 800d584:	f000 f99a 	bl	800d8bc <tcpip_api_call>
 800d588:	4603      	mov	r3, r0
 800d58a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d58e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800d592:	4618      	mov	r0, r3
 800d594:	3738      	adds	r7, #56	@ 0x38
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	0800d529 	.word	0x0800d529

0800d5a0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d5aa:	f007 fd37 	bl	801501c <sys_timeouts_sleeptime>
 800d5ae:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b6:	d10b      	bne.n	800d5d0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d5b8:	4813      	ldr	r0, [pc, #76]	@ (800d608 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5ba:	f00c fe5e 	bl	801a27a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d5be:	2200      	movs	r2, #0
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f00c fdd2 	bl	801a16c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d5c8:	480f      	ldr	r0, [pc, #60]	@ (800d608 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5ca:	f00c fe47 	bl	801a25c <sys_mutex_lock>
    return;
 800d5ce:	e018      	b.n	800d602 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d102      	bne.n	800d5dc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d5d6:	f007 fce7 	bl	8014fa8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5da:	e7e6      	b.n	800d5aa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d5dc:	480a      	ldr	r0, [pc, #40]	@ (800d608 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5de:	f00c fe4c 	bl	801a27a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d5e2:	68fa      	ldr	r2, [r7, #12]
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f00c fdc0 	bl	801a16c <sys_arch_mbox_fetch>
 800d5ec:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d5ee:	4806      	ldr	r0, [pc, #24]	@ (800d608 <tcpip_timeouts_mbox_fetch+0x68>)
 800d5f0:	f00c fe34 	bl	801a25c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5fa:	d102      	bne.n	800d602 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d5fc:	f007 fcd4 	bl	8014fa8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d600:	e7d3      	b.n	800d5aa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	2000a2f8 	.word	0x2000a2f8

0800d60c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d614:	4810      	ldr	r0, [pc, #64]	@ (800d658 <tcpip_thread+0x4c>)
 800d616:	f00c fe21 	bl	801a25c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d61a:	4b10      	ldr	r3, [pc, #64]	@ (800d65c <tcpip_thread+0x50>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d622:	4b0e      	ldr	r3, [pc, #56]	@ (800d65c <tcpip_thread+0x50>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a0e      	ldr	r2, [pc, #56]	@ (800d660 <tcpip_thread+0x54>)
 800d628:	6812      	ldr	r2, [r2, #0]
 800d62a:	4610      	mov	r0, r2
 800d62c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d62e:	f107 030c 	add.w	r3, r7, #12
 800d632:	4619      	mov	r1, r3
 800d634:	480b      	ldr	r0, [pc, #44]	@ (800d664 <tcpip_thread+0x58>)
 800d636:	f7ff ffb3 	bl	800d5a0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d106      	bne.n	800d64e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d640:	4b09      	ldr	r3, [pc, #36]	@ (800d668 <tcpip_thread+0x5c>)
 800d642:	2291      	movs	r2, #145	@ 0x91
 800d644:	4909      	ldr	r1, [pc, #36]	@ (800d66c <tcpip_thread+0x60>)
 800d646:	480a      	ldr	r0, [pc, #40]	@ (800d670 <tcpip_thread+0x64>)
 800d648:	f00d fcfa 	bl	801b040 <iprintf>
      continue;
 800d64c:	e003      	b.n	800d656 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	4618      	mov	r0, r3
 800d652:	f000 f80f 	bl	800d674 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d656:	e7ea      	b.n	800d62e <tcpip_thread+0x22>
 800d658:	2000a2f8 	.word	0x2000a2f8
 800d65c:	2000a2ec 	.word	0x2000a2ec
 800d660:	2000a2f0 	.word	0x2000a2f0
 800d664:	2000a2f4 	.word	0x2000a2f4
 800d668:	0801d940 	.word	0x0801d940
 800d66c:	0801d970 	.word	0x0801d970
 800d670:	0801d990 	.word	0x0801d990

0800d674 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b02      	cmp	r3, #2
 800d682:	d026      	beq.n	800d6d2 <tcpip_thread_handle_msg+0x5e>
 800d684:	2b02      	cmp	r3, #2
 800d686:	dc2b      	bgt.n	800d6e0 <tcpip_thread_handle_msg+0x6c>
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <tcpip_thread_handle_msg+0x1e>
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d015      	beq.n	800d6bc <tcpip_thread_handle_msg+0x48>
 800d690:	e026      	b.n	800d6e0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	6850      	ldr	r0, [r2, #4]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	6892      	ldr	r2, [r2, #8]
 800d69e:	4611      	mov	r1, r2
 800d6a0:	4798      	blx	r3
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d004      	beq.n	800d6b2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f001 fe89 	bl	800f3c4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d6b2:	6879      	ldr	r1, [r7, #4]
 800d6b4:	2009      	movs	r0, #9
 800d6b6:	f000 ffe3 	bl	800e680 <memp_free>
      break;
 800d6ba:	e018      	b.n	800d6ee <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6892      	ldr	r2, [r2, #8]
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d6c8:	6879      	ldr	r1, [r7, #4]
 800d6ca:	2008      	movs	r0, #8
 800d6cc:	f000 ffd8 	bl	800e680 <memp_free>
      break;
 800d6d0:	e00d      	b.n	800d6ee <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	6892      	ldr	r2, [r2, #8]
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4798      	blx	r3
      break;
 800d6de:	e006      	b.n	800d6ee <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d6e0:	4b05      	ldr	r3, [pc, #20]	@ (800d6f8 <tcpip_thread_handle_msg+0x84>)
 800d6e2:	22cf      	movs	r2, #207	@ 0xcf
 800d6e4:	4905      	ldr	r1, [pc, #20]	@ (800d6fc <tcpip_thread_handle_msg+0x88>)
 800d6e6:	4806      	ldr	r0, [pc, #24]	@ (800d700 <tcpip_thread_handle_msg+0x8c>)
 800d6e8:	f00d fcaa 	bl	801b040 <iprintf>
      break;
 800d6ec:	bf00      	nop
  }
}
 800d6ee:	bf00      	nop
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	0801d940 	.word	0x0801d940
 800d6fc:	0801d970 	.word	0x0801d970
 800d700:	0801d990 	.word	0x0801d990

0800d704 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b086      	sub	sp, #24
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d710:	481a      	ldr	r0, [pc, #104]	@ (800d77c <tcpip_inpkt+0x78>)
 800d712:	f00c fd6a 	bl	801a1ea <sys_mbox_valid>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d105      	bne.n	800d728 <tcpip_inpkt+0x24>
 800d71c:	4b18      	ldr	r3, [pc, #96]	@ (800d780 <tcpip_inpkt+0x7c>)
 800d71e:	22fc      	movs	r2, #252	@ 0xfc
 800d720:	4918      	ldr	r1, [pc, #96]	@ (800d784 <tcpip_inpkt+0x80>)
 800d722:	4819      	ldr	r0, [pc, #100]	@ (800d788 <tcpip_inpkt+0x84>)
 800d724:	f00d fc8c 	bl	801b040 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d728:	2009      	movs	r0, #9
 800d72a:	f000 ff57 	bl	800e5dc <memp_malloc>
 800d72e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d102      	bne.n	800d73c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d736:	f04f 33ff 	mov.w	r3, #4294967295
 800d73a:	e01a      	b.n	800d772 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	2200      	movs	r2, #0
 800d740:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	68fa      	ldr	r2, [r7, #12]
 800d746:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	687a      	ldr	r2, [r7, #4]
 800d752:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d754:	6979      	ldr	r1, [r7, #20]
 800d756:	4809      	ldr	r0, [pc, #36]	@ (800d77c <tcpip_inpkt+0x78>)
 800d758:	f00c fcee 	bl	801a138 <sys_mbox_trypost>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d006      	beq.n	800d770 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d762:	6979      	ldr	r1, [r7, #20]
 800d764:	2009      	movs	r0, #9
 800d766:	f000 ff8b 	bl	800e680 <memp_free>
    return ERR_MEM;
 800d76a:	f04f 33ff 	mov.w	r3, #4294967295
 800d76e:	e000      	b.n	800d772 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d770:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	2000a2f4 	.word	0x2000a2f4
 800d780:	0801d940 	.word	0x0801d940
 800d784:	0801d9b8 	.word	0x0801d9b8
 800d788:	0801d990 	.word	0x0801d990

0800d78c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d79c:	f003 0318 	and.w	r3, r3, #24
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d006      	beq.n	800d7b2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d7a4:	4a08      	ldr	r2, [pc, #32]	@ (800d7c8 <tcpip_input+0x3c>)
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff ffab 	bl	800d704 <tcpip_inpkt>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	e005      	b.n	800d7be <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d7b2:	4a06      	ldr	r2, [pc, #24]	@ (800d7cc <tcpip_input+0x40>)
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f7ff ffa4 	bl	800d704 <tcpip_inpkt>
 800d7bc:	4603      	mov	r3, r0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	08019f25 	.word	0x08019f25
 800d7cc:	08018ced 	.word	0x08018ced

0800d7d0 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d7da:	4814      	ldr	r0, [pc, #80]	@ (800d82c <tcpip_callback+0x5c>)
 800d7dc:	f00c fd05 	bl	801a1ea <sys_mbox_valid>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d106      	bne.n	800d7f4 <tcpip_callback+0x24>
 800d7e6:	4b12      	ldr	r3, [pc, #72]	@ (800d830 <tcpip_callback+0x60>)
 800d7e8:	f240 1239 	movw	r2, #313	@ 0x139
 800d7ec:	4911      	ldr	r1, [pc, #68]	@ (800d834 <tcpip_callback+0x64>)
 800d7ee:	4812      	ldr	r0, [pc, #72]	@ (800d838 <tcpip_callback+0x68>)
 800d7f0:	f00d fc26 	bl	801b040 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d7f4:	2008      	movs	r0, #8
 800d7f6:	f000 fef1 	bl	800e5dc <memp_malloc>
 800d7fa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d102      	bne.n	800d808 <tcpip_callback+0x38>
    return ERR_MEM;
 800d802:	f04f 33ff 	mov.w	r3, #4294967295
 800d806:	e00d      	b.n	800d824 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d81a:	68f9      	ldr	r1, [r7, #12]
 800d81c:	4803      	ldr	r0, [pc, #12]	@ (800d82c <tcpip_callback+0x5c>)
 800d81e:	f00c fc75 	bl	801a10c <sys_mbox_post>
  return ERR_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	2000a2f4 	.word	0x2000a2f4
 800d830:	0801d940 	.word	0x0801d940
 800d834:	0801d9b8 	.word	0x0801d9b8
 800d838:	0801d990 	.word	0x0801d990

0800d83c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d846:	4819      	ldr	r0, [pc, #100]	@ (800d8ac <tcpip_try_callback+0x70>)
 800d848:	f00c fccf 	bl	801a1ea <sys_mbox_valid>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d106      	bne.n	800d860 <tcpip_try_callback+0x24>
 800d852:	4b17      	ldr	r3, [pc, #92]	@ (800d8b0 <tcpip_try_callback+0x74>)
 800d854:	f240 125d 	movw	r2, #349	@ 0x15d
 800d858:	4916      	ldr	r1, [pc, #88]	@ (800d8b4 <tcpip_try_callback+0x78>)
 800d85a:	4817      	ldr	r0, [pc, #92]	@ (800d8b8 <tcpip_try_callback+0x7c>)
 800d85c:	f00d fbf0 	bl	801b040 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d860:	2008      	movs	r0, #8
 800d862:	f000 febb 	bl	800e5dc <memp_malloc>
 800d866:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d102      	bne.n	800d874 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d86e:	f04f 33ff 	mov.w	r3, #4294967295
 800d872:	e017      	b.n	800d8a4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2201      	movs	r2, #1
 800d878:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	683a      	ldr	r2, [r7, #0]
 800d884:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d886:	68f9      	ldr	r1, [r7, #12]
 800d888:	4808      	ldr	r0, [pc, #32]	@ (800d8ac <tcpip_try_callback+0x70>)
 800d88a:	f00c fc55 	bl	801a138 <sys_mbox_trypost>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d006      	beq.n	800d8a2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d894:	68f9      	ldr	r1, [r7, #12]
 800d896:	2008      	movs	r0, #8
 800d898:	f000 fef2 	bl	800e680 <memp_free>
    return ERR_MEM;
 800d89c:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a0:	e000      	b.n	800d8a4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	2000a2f4 	.word	0x2000a2f4
 800d8b0:	0801d940 	.word	0x0801d940
 800d8b4:	0801d9b8 	.word	0x0801d9b8
 800d8b8:	0801d990 	.word	0x0801d990

0800d8bc <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800d8c6:	4808      	ldr	r0, [pc, #32]	@ (800d8e8 <tcpip_api_call+0x2c>)
 800d8c8:	f00c fcc8 	bl	801a25c <sys_mutex_lock>
  err = fn(call);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6838      	ldr	r0, [r7, #0]
 800d8d0:	4798      	blx	r3
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800d8d6:	4804      	ldr	r0, [pc, #16]	@ (800d8e8 <tcpip_api_call+0x2c>)
 800d8d8:	f00c fccf 	bl	801a27a <sys_mutex_unlock>
  return err;
 800d8dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	2000a2f8 	.word	0x2000a2f8

0800d8ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b084      	sub	sp, #16
 800d8f0:	af02      	add	r7, sp, #8
 800d8f2:	6078      	str	r0, [r7, #4]
 800d8f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d8f6:	f000 f9ea 	bl	800dcce <lwip_init>

  tcpip_init_done = initfunc;
 800d8fa:	4a17      	ldr	r2, [pc, #92]	@ (800d958 <tcpip_init+0x6c>)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d900:	4a16      	ldr	r2, [pc, #88]	@ (800d95c <tcpip_init+0x70>)
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d906:	210a      	movs	r1, #10
 800d908:	4815      	ldr	r0, [pc, #84]	@ (800d960 <tcpip_init+0x74>)
 800d90a:	f00c fbe1 	bl	801a0d0 <sys_mbox_new>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d006      	beq.n	800d922 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d914:	4b13      	ldr	r3, [pc, #76]	@ (800d964 <tcpip_init+0x78>)
 800d916:	f240 2261 	movw	r2, #609	@ 0x261
 800d91a:	4913      	ldr	r1, [pc, #76]	@ (800d968 <tcpip_init+0x7c>)
 800d91c:	4813      	ldr	r0, [pc, #76]	@ (800d96c <tcpip_init+0x80>)
 800d91e:	f00d fb8f 	bl	801b040 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d922:	4813      	ldr	r0, [pc, #76]	@ (800d970 <tcpip_init+0x84>)
 800d924:	f00c fc80 	bl	801a228 <sys_mutex_new>
 800d928:	4603      	mov	r3, r0
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d006      	beq.n	800d93c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d92e:	4b0d      	ldr	r3, [pc, #52]	@ (800d964 <tcpip_init+0x78>)
 800d930:	f240 2265 	movw	r2, #613	@ 0x265
 800d934:	490f      	ldr	r1, [pc, #60]	@ (800d974 <tcpip_init+0x88>)
 800d936:	480d      	ldr	r0, [pc, #52]	@ (800d96c <tcpip_init+0x80>)
 800d938:	f00d fb82 	bl	801b040 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d93c:	f04f 33ff 	mov.w	r3, #4294967295
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d946:	2200      	movs	r2, #0
 800d948:	490b      	ldr	r1, [pc, #44]	@ (800d978 <tcpip_init+0x8c>)
 800d94a:	480c      	ldr	r0, [pc, #48]	@ (800d97c <tcpip_init+0x90>)
 800d94c:	f00c fca2 	bl	801a294 <sys_thread_new>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	2000a2ec 	.word	0x2000a2ec
 800d95c:	2000a2f0 	.word	0x2000a2f0
 800d960:	2000a2f4 	.word	0x2000a2f4
 800d964:	0801d940 	.word	0x0801d940
 800d968:	0801d9c8 	.word	0x0801d9c8
 800d96c:	0801d990 	.word	0x0801d990
 800d970:	2000a2f8 	.word	0x2000a2f8
 800d974:	0801d9ec 	.word	0x0801d9ec
 800d978:	0800d60d 	.word	0x0800d60d
 800d97c:	0801da10 	.word	0x0801da10

0800d980 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	4603      	mov	r3, r0
 800d988:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d98a:	88fb      	ldrh	r3, [r7, #6]
 800d98c:	021b      	lsls	r3, r3, #8
 800d98e:	b21a      	sxth	r2, r3
 800d990:	88fb      	ldrh	r3, [r7, #6]
 800d992:	0a1b      	lsrs	r3, r3, #8
 800d994:	b29b      	uxth	r3, r3
 800d996:	b21b      	sxth	r3, r3
 800d998:	4313      	orrs	r3, r2
 800d99a:	b21b      	sxth	r3, r3
 800d99c:	b29b      	uxth	r3, r3
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b083      	sub	sp, #12
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	061a      	lsls	r2, r3, #24
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	021b      	lsls	r3, r3, #8
 800d9ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d9be:	431a      	orrs	r2, r3
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	0a1b      	lsrs	r3, r3, #8
 800d9c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	0e1b      	lsrs	r3, r3, #24
 800d9ce:	4313      	orrs	r3, r2
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b089      	sub	sp, #36	@ 0x24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	f003 0301 	and.w	r3, r3, #1
 800d9f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00d      	beq.n	800da1c <lwip_standard_chksum+0x40>
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	2b00      	cmp	r3, #0
 800da04:	dd0a      	ble.n	800da1c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	1c53      	adds	r3, r2, #1
 800da0a:	61fb      	str	r3, [r7, #28]
 800da0c:	f107 030e 	add.w	r3, r7, #14
 800da10:	3301      	adds	r3, #1
 800da12:	7812      	ldrb	r2, [r2, #0]
 800da14:	701a      	strb	r2, [r3, #0]
    len--;
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	3b01      	subs	r3, #1
 800da1a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800da20:	e00a      	b.n	800da38 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	1c9a      	adds	r2, r3, #2
 800da26:	61ba      	str	r2, [r7, #24]
 800da28:	881b      	ldrh	r3, [r3, #0]
 800da2a:	461a      	mov	r2, r3
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	4413      	add	r3, r2
 800da30:	617b      	str	r3, [r7, #20]
    len -= 2;
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	3b02      	subs	r3, #2
 800da36:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	dcf1      	bgt.n	800da22 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	dd04      	ble.n	800da4e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800da44:	f107 030e 	add.w	r3, r7, #14
 800da48:	69ba      	ldr	r2, [r7, #24]
 800da4a:	7812      	ldrb	r2, [r2, #0]
 800da4c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800da4e:	89fb      	ldrh	r3, [r7, #14]
 800da50:	461a      	mov	r2, r3
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	4413      	add	r3, r2
 800da56:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	0c1a      	lsrs	r2, r3, #16
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	b29b      	uxth	r3, r3
 800da60:	4413      	add	r3, r2
 800da62:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	0c1a      	lsrs	r2, r3, #16
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	4413      	add	r3, r2
 800da6e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d007      	beq.n	800da86 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	021b      	lsls	r3, r3, #8
 800da7a:	b29a      	uxth	r2, r3
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	0a1b      	lsrs	r3, r3, #8
 800da80:	b2db      	uxtb	r3, r3
 800da82:	4313      	orrs	r3, r2
 800da84:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	b29b      	uxth	r3, r3
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3724      	adds	r7, #36	@ 0x24
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b086      	sub	sp, #24
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	60f8      	str	r0, [r7, #12]
 800da9e:	607b      	str	r3, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	72fb      	strb	r3, [r7, #11]
 800daa4:	4613      	mov	r3, r2
 800daa6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800daa8:	2300      	movs	r3, #0
 800daaa:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	e02b      	b.n	800db0a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	685a      	ldr	r2, [r3, #4]
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	895b      	ldrh	r3, [r3, #10]
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f7ff ff8d 	bl	800d9dc <lwip_standard_chksum>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4413      	add	r3, r2
 800daca:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	0c1a      	lsrs	r2, r3, #16
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	4413      	add	r3, r2
 800dad6:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	895b      	ldrh	r3, [r3, #10]
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	b29b      	uxth	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00e      	beq.n	800db04 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	bf0c      	ite	eq
 800daec:	2301      	moveq	r3, #1
 800daee:	2300      	movne	r3, #0
 800daf0:	b2db      	uxtb	r3, r3
 800daf2:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	0a1b      	lsrs	r3, r3, #8
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1d0      	bne.n	800dab2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d007      	beq.n	800db26 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	021b      	lsls	r3, r3, #8
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	0a1b      	lsrs	r3, r3, #8
 800db20:	b2db      	uxtb	r3, r3
 800db22:	4313      	orrs	r3, r2
 800db24:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800db26:	7afb      	ldrb	r3, [r7, #11]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	4618      	mov	r0, r3
 800db2c:	f7ff ff28 	bl	800d980 <lwip_htons>
 800db30:	4603      	mov	r3, r0
 800db32:	461a      	mov	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4413      	add	r3, r2
 800db38:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800db3a:	893b      	ldrh	r3, [r7, #8]
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7ff ff1f 	bl	800d980 <lwip_htons>
 800db42:	4603      	mov	r3, r0
 800db44:	461a      	mov	r2, r3
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4413      	add	r3, r2
 800db4a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	0c1a      	lsrs	r2, r3, #16
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	b29b      	uxth	r3, r3
 800db54:	4413      	add	r3, r2
 800db56:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	0c1a      	lsrs	r2, r3, #16
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4413      	add	r3, r2
 800db62:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	b29b      	uxth	r3, r3
 800db68:	43db      	mvns	r3, r3
 800db6a:	b29b      	uxth	r3, r3
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3718      	adds	r7, #24
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b086      	sub	sp, #24
 800db78:	af00      	add	r7, sp, #0
 800db7a:	60f8      	str	r0, [r7, #12]
 800db7c:	607b      	str	r3, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	72fb      	strb	r3, [r7, #11]
 800db82:	4613      	mov	r3, r2
 800db84:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	0c1b      	lsrs	r3, r3, #16
 800db96:	693a      	ldr	r2, [r7, #16]
 800db98:	4413      	add	r3, r2
 800db9a:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	693a      	ldr	r2, [r7, #16]
 800dba8:	4413      	add	r3, r2
 800dbaa:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	0c1b      	lsrs	r3, r3, #16
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	0c1a      	lsrs	r2, r3, #16
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	4413      	add	r3, r2
 800dbc0:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	0c1a      	lsrs	r2, r3, #16
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	4413      	add	r3, r2
 800dbcc:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800dbce:	893a      	ldrh	r2, [r7, #8]
 800dbd0:	7af9      	ldrb	r1, [r7, #11]
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7ff ff5e 	bl	800da96 <inet_cksum_pseudo_base>
 800dbda:	4603      	mov	r3, r0
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b086      	sub	sp, #24
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	607b      	str	r3, [r7, #4]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	72fb      	strb	r3, [r7, #11]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800dbf6:	893a      	ldrh	r2, [r7, #8]
 800dbf8:	7af9      	ldrb	r1, [r7, #11]
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	9300      	str	r3, [sp, #0]
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f7ff ffb7 	bl	800db74 <inet_chksum_pseudo>
 800dc06:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dc1c:	887b      	ldrh	r3, [r7, #2]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f7ff fedb 	bl	800d9dc <lwip_standard_chksum>
 800dc26:	4603      	mov	r3, r0
 800dc28:	43db      	mvns	r3, r3
 800dc2a:	b29b      	uxth	r3, r3
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b086      	sub	sp, #24
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	613b      	str	r3, [r7, #16]
 800dc48:	e02b      	b.n	800dca2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	685a      	ldr	r2, [r3, #4]
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	895b      	ldrh	r3, [r3, #10]
 800dc52:	4619      	mov	r1, r3
 800dc54:	4610      	mov	r0, r2
 800dc56:	f7ff fec1 	bl	800d9dc <lwip_standard_chksum>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	4413      	add	r3, r2
 800dc62:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800dc64:	697b      	ldr	r3, [r7, #20]
 800dc66:	0c1a      	lsrs	r2, r3, #16
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	4413      	add	r3, r2
 800dc6e:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00e      	beq.n	800dc9c <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	bf0c      	ite	eq
 800dc84:	2301      	moveq	r3, #1
 800dc86:	2300      	movne	r3, #0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	021b      	lsls	r3, r3, #8
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	0a1b      	lsrs	r3, r3, #8
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	613b      	str	r3, [r7, #16]
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1d0      	bne.n	800dc4a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	021b      	lsls	r3, r3, #8
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	697b      	ldr	r3, [r7, #20]
 800dcb6:	0a1b      	lsrs	r3, r3, #8
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	43db      	mvns	r3, r3
 800dcc4:	b29b      	uxth	r3, r3
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}

0800dcce <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b082      	sub	sp, #8
 800dcd2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800dcd8:	f00c fa98 	bl	801a20c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800dcdc:	f000 f8d4 	bl	800de88 <mem_init>
  memp_init();
 800dce0:	f000 fc30 	bl	800e544 <memp_init>
  pbuf_init();
  netif_init();
 800dce4:	f000 fcf6 	bl	800e6d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800dce8:	f007 f9d0 	bl	801508c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800dcec:	f001 feac 	bl	800fa48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800dcf0:	f007 f912 	bl	8014f18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800dcf4:	bf00      	nop
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}

0800dcfc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800dd06:	4b05      	ldr	r3, [pc, #20]	@ (800dd1c <ptr_to_mem+0x20>)
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	88fb      	ldrh	r3, [r7, #6]
 800dd0c:	4413      	add	r3, r2
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	370c      	adds	r7, #12
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	2000f328 	.word	0x2000f328

0800dd20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dd28:	4b05      	ldr	r3, [pc, #20]	@ (800dd40 <mem_to_ptr+0x20>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	b29b      	uxth	r3, r3
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	2000f328 	.word	0x2000f328

0800dd44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dd4c:	4b45      	ldr	r3, [pc, #276]	@ (800de64 <plug_holes+0x120>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d206      	bcs.n	800dd64 <plug_holes+0x20>
 800dd56:	4b44      	ldr	r3, [pc, #272]	@ (800de68 <plug_holes+0x124>)
 800dd58:	f240 12df 	movw	r2, #479	@ 0x1df
 800dd5c:	4943      	ldr	r1, [pc, #268]	@ (800de6c <plug_holes+0x128>)
 800dd5e:	4844      	ldr	r0, [pc, #272]	@ (800de70 <plug_holes+0x12c>)
 800dd60:	f00d f96e 	bl	801b040 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dd64:	4b43      	ldr	r3, [pc, #268]	@ (800de74 <plug_holes+0x130>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d306      	bcc.n	800dd7c <plug_holes+0x38>
 800dd6e:	4b3e      	ldr	r3, [pc, #248]	@ (800de68 <plug_holes+0x124>)
 800dd70:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dd74:	4940      	ldr	r1, [pc, #256]	@ (800de78 <plug_holes+0x134>)
 800dd76:	483e      	ldr	r0, [pc, #248]	@ (800de70 <plug_holes+0x12c>)
 800dd78:	f00d f962 	bl	801b040 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	791b      	ldrb	r3, [r3, #4]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d006      	beq.n	800dd92 <plug_holes+0x4e>
 800dd84:	4b38      	ldr	r3, [pc, #224]	@ (800de68 <plug_holes+0x124>)
 800dd86:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800dd8a:	493c      	ldr	r1, [pc, #240]	@ (800de7c <plug_holes+0x138>)
 800dd8c:	4838      	ldr	r0, [pc, #224]	@ (800de70 <plug_holes+0x12c>)
 800dd8e:	f00d f957 	bl	801b040 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800dd9a:	d906      	bls.n	800ddaa <plug_holes+0x66>
 800dd9c:	4b32      	ldr	r3, [pc, #200]	@ (800de68 <plug_holes+0x124>)
 800dd9e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800dda2:	4937      	ldr	r1, [pc, #220]	@ (800de80 <plug_holes+0x13c>)
 800dda4:	4832      	ldr	r0, [pc, #200]	@ (800de70 <plug_holes+0x12c>)
 800dda6:	f00d f94b 	bl	801b040 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff ffa4 	bl	800dcfc <ptr_to_mem>
 800ddb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ddb6:	687a      	ldr	r2, [r7, #4]
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d024      	beq.n	800de08 <plug_holes+0xc4>
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	791b      	ldrb	r3, [r3, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d120      	bne.n	800de08 <plug_holes+0xc4>
 800ddc6:	4b2b      	ldr	r3, [pc, #172]	@ (800de74 <plug_holes+0x130>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d01b      	beq.n	800de08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ddd0:	4b2c      	ldr	r3, [pc, #176]	@ (800de84 <plug_holes+0x140>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68fa      	ldr	r2, [r7, #12]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d102      	bne.n	800dde0 <plug_holes+0x9c>
      lfree = mem;
 800ddda:	4a2a      	ldr	r2, [pc, #168]	@ (800de84 <plug_holes+0x140>)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	881a      	ldrh	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800ddf0:	d00a      	beq.n	800de08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7ff ff80 	bl	800dcfc <ptr_to_mem>
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7ff ff8e 	bl	800dd20 <mem_to_ptr>
 800de04:	4603      	mov	r3, r0
 800de06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	885b      	ldrh	r3, [r3, #2]
 800de0c:	4618      	mov	r0, r3
 800de0e:	f7ff ff75 	bl	800dcfc <ptr_to_mem>
 800de12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800de14:	68ba      	ldr	r2, [r7, #8]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d01f      	beq.n	800de5c <plug_holes+0x118>
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	791b      	ldrb	r3, [r3, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d11b      	bne.n	800de5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800de24:	4b17      	ldr	r3, [pc, #92]	@ (800de84 <plug_holes+0x140>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d102      	bne.n	800de34 <plug_holes+0xf0>
      lfree = pmem;
 800de2e:	4a15      	ldr	r2, [pc, #84]	@ (800de84 <plug_holes+0x140>)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	881a      	ldrh	r2, [r3, #0]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800de44:	d00a      	beq.n	800de5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff ff56 	bl	800dcfc <ptr_to_mem>
 800de50:	4604      	mov	r4, r0
 800de52:	68b8      	ldr	r0, [r7, #8]
 800de54:	f7ff ff64 	bl	800dd20 <mem_to_ptr>
 800de58:	4603      	mov	r3, r0
 800de5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800de5c:	bf00      	nop
 800de5e:	3714      	adds	r7, #20
 800de60:	46bd      	mov	sp, r7
 800de62:	bd90      	pop	{r4, r7, pc}
 800de64:	2000f328 	.word	0x2000f328
 800de68:	0801da18 	.word	0x0801da18
 800de6c:	0801da48 	.word	0x0801da48
 800de70:	0801da60 	.word	0x0801da60
 800de74:	2000f32c 	.word	0x2000f32c
 800de78:	0801da88 	.word	0x0801da88
 800de7c:	0801daa4 	.word	0x0801daa4
 800de80:	0801dac0 	.word	0x0801dac0
 800de84:	2000f334 	.word	0x2000f334

0800de88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800de8e:	4b1f      	ldr	r3, [pc, #124]	@ (800df0c <mem_init+0x84>)
 800de90:	3303      	adds	r3, #3
 800de92:	f023 0303 	bic.w	r3, r3, #3
 800de96:	461a      	mov	r2, r3
 800de98:	4b1d      	ldr	r3, [pc, #116]	@ (800df10 <mem_init+0x88>)
 800de9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800de9c:	4b1c      	ldr	r3, [pc, #112]	@ (800df10 <mem_init+0x88>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800dea8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2200      	movs	r2, #0
 800deae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800deb6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
 800deba:	f7ff ff1f 	bl	800dcfc <ptr_to_mem>
 800debe:	4603      	mov	r3, r0
 800dec0:	4a14      	ldr	r2, [pc, #80]	@ (800df14 <mem_init+0x8c>)
 800dec2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dec4:	4b13      	ldr	r3, [pc, #76]	@ (800df14 <mem_init+0x8c>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2201      	movs	r2, #1
 800deca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800decc:	4b11      	ldr	r3, [pc, #68]	@ (800df14 <mem_init+0x8c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800ded4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ded6:	4b0f      	ldr	r3, [pc, #60]	@ (800df14 <mem_init+0x8c>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f44f 42a0 	mov.w	r2, #20480	@ 0x5000
 800dede:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dee0:	4b0b      	ldr	r3, [pc, #44]	@ (800df10 <mem_init+0x88>)
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a0c      	ldr	r2, [pc, #48]	@ (800df18 <mem_init+0x90>)
 800dee6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dee8:	480c      	ldr	r0, [pc, #48]	@ (800df1c <mem_init+0x94>)
 800deea:	f00c f99d 	bl	801a228 <sys_mutex_new>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d006      	beq.n	800df02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800def4:	4b0a      	ldr	r3, [pc, #40]	@ (800df20 <mem_init+0x98>)
 800def6:	f240 221f 	movw	r2, #543	@ 0x21f
 800defa:	490a      	ldr	r1, [pc, #40]	@ (800df24 <mem_init+0x9c>)
 800defc:	480a      	ldr	r0, [pc, #40]	@ (800df28 <mem_init+0xa0>)
 800defe:	f00d f89f 	bl	801b040 <iprintf>
  }
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	2000a314 	.word	0x2000a314
 800df10:	2000f328 	.word	0x2000f328
 800df14:	2000f32c 	.word	0x2000f32c
 800df18:	2000f334 	.word	0x2000f334
 800df1c:	2000f330 	.word	0x2000f330
 800df20:	0801da18 	.word	0x0801da18
 800df24:	0801daec 	.word	0x0801daec
 800df28:	0801da60 	.word	0x0801da60

0800df2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f7ff fef3 	bl	800dd20 <mem_to_ptr>
 800df3a:	4603      	mov	r3, r0
 800df3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff feda 	bl	800dcfc <ptr_to_mem>
 800df48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	885b      	ldrh	r3, [r3, #2]
 800df4e:	4618      	mov	r0, r3
 800df50:	f7ff fed4 	bl	800dcfc <ptr_to_mem>
 800df54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800df5e:	d818      	bhi.n	800df92 <mem_link_valid+0x66>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	885b      	ldrh	r3, [r3, #2]
 800df64:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800df68:	d813      	bhi.n	800df92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800df6e:	8afa      	ldrh	r2, [r7, #22]
 800df70:	429a      	cmp	r2, r3
 800df72:	d004      	beq.n	800df7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	8afa      	ldrh	r2, [r7, #22]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d109      	bne.n	800df92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800df7e:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <mem_link_valid+0x74>)
 800df80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	429a      	cmp	r2, r3
 800df86:	d006      	beq.n	800df96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	885b      	ldrh	r3, [r3, #2]
 800df8c:	8afa      	ldrh	r2, [r7, #22]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d001      	beq.n	800df96 <mem_link_valid+0x6a>
    return 0;
 800df92:	2300      	movs	r3, #0
 800df94:	e000      	b.n	800df98 <mem_link_valid+0x6c>
  }
  return 1;
 800df96:	2301      	movs	r3, #1
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	2000f32c 	.word	0x2000f32c

0800dfa4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d070      	beq.n	800e094 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00d      	beq.n	800dfd8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dfbc:	4b37      	ldr	r3, [pc, #220]	@ (800e09c <mem_free+0xf8>)
 800dfbe:	f240 2273 	movw	r2, #627	@ 0x273
 800dfc2:	4937      	ldr	r1, [pc, #220]	@ (800e0a0 <mem_free+0xfc>)
 800dfc4:	4837      	ldr	r0, [pc, #220]	@ (800e0a4 <mem_free+0x100>)
 800dfc6:	f00d f83b 	bl	801b040 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dfca:	f00c f981 	bl	801a2d0 <sys_arch_protect>
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f00c f98b 	bl	801a2ec <sys_arch_unprotect>
    return;
 800dfd6:	e05e      	b.n	800e096 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3b08      	subs	r3, #8
 800dfdc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dfde:	4b32      	ldr	r3, [pc, #200]	@ (800e0a8 <mem_free+0x104>)
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d306      	bcc.n	800dff6 <mem_free+0x52>
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f103 020c 	add.w	r2, r3, #12
 800dfee:	4b2f      	ldr	r3, [pc, #188]	@ (800e0ac <mem_free+0x108>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d90d      	bls.n	800e012 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dff6:	4b29      	ldr	r3, [pc, #164]	@ (800e09c <mem_free+0xf8>)
 800dff8:	f240 227f 	movw	r2, #639	@ 0x27f
 800dffc:	492c      	ldr	r1, [pc, #176]	@ (800e0b0 <mem_free+0x10c>)
 800dffe:	4829      	ldr	r0, [pc, #164]	@ (800e0a4 <mem_free+0x100>)
 800e000:	f00d f81e 	bl	801b040 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e004:	f00c f964 	bl	801a2d0 <sys_arch_protect>
 800e008:	6138      	str	r0, [r7, #16]
 800e00a:	6938      	ldr	r0, [r7, #16]
 800e00c:	f00c f96e 	bl	801a2ec <sys_arch_unprotect>
    return;
 800e010:	e041      	b.n	800e096 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e012:	4828      	ldr	r0, [pc, #160]	@ (800e0b4 <mem_free+0x110>)
 800e014:	f00c f922 	bl	801a25c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	791b      	ldrb	r3, [r3, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d110      	bne.n	800e042 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e020:	4b1e      	ldr	r3, [pc, #120]	@ (800e09c <mem_free+0xf8>)
 800e022:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e026:	4924      	ldr	r1, [pc, #144]	@ (800e0b8 <mem_free+0x114>)
 800e028:	481e      	ldr	r0, [pc, #120]	@ (800e0a4 <mem_free+0x100>)
 800e02a:	f00d f809 	bl	801b040 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e02e:	4821      	ldr	r0, [pc, #132]	@ (800e0b4 <mem_free+0x110>)
 800e030:	f00c f923 	bl	801a27a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e034:	f00c f94c 	bl	801a2d0 <sys_arch_protect>
 800e038:	6178      	str	r0, [r7, #20]
 800e03a:	6978      	ldr	r0, [r7, #20]
 800e03c:	f00c f956 	bl	801a2ec <sys_arch_unprotect>
    return;
 800e040:	e029      	b.n	800e096 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e042:	69f8      	ldr	r0, [r7, #28]
 800e044:	f7ff ff72 	bl	800df2c <mem_link_valid>
 800e048:	4603      	mov	r3, r0
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d110      	bne.n	800e070 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e04e:	4b13      	ldr	r3, [pc, #76]	@ (800e09c <mem_free+0xf8>)
 800e050:	f240 2295 	movw	r2, #661	@ 0x295
 800e054:	4919      	ldr	r1, [pc, #100]	@ (800e0bc <mem_free+0x118>)
 800e056:	4813      	ldr	r0, [pc, #76]	@ (800e0a4 <mem_free+0x100>)
 800e058:	f00c fff2 	bl	801b040 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e05c:	4815      	ldr	r0, [pc, #84]	@ (800e0b4 <mem_free+0x110>)
 800e05e:	f00c f90c 	bl	801a27a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e062:	f00c f935 	bl	801a2d0 <sys_arch_protect>
 800e066:	61b8      	str	r0, [r7, #24]
 800e068:	69b8      	ldr	r0, [r7, #24]
 800e06a:	f00c f93f 	bl	801a2ec <sys_arch_unprotect>
    return;
 800e06e:	e012      	b.n	800e096 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	2200      	movs	r2, #0
 800e074:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e076:	4b12      	ldr	r3, [pc, #72]	@ (800e0c0 <mem_free+0x11c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	69fa      	ldr	r2, [r7, #28]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d202      	bcs.n	800e086 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e080:	4a0f      	ldr	r2, [pc, #60]	@ (800e0c0 <mem_free+0x11c>)
 800e082:	69fb      	ldr	r3, [r7, #28]
 800e084:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e086:	69f8      	ldr	r0, [r7, #28]
 800e088:	f7ff fe5c 	bl	800dd44 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e08c:	4809      	ldr	r0, [pc, #36]	@ (800e0b4 <mem_free+0x110>)
 800e08e:	f00c f8f4 	bl	801a27a <sys_mutex_unlock>
 800e092:	e000      	b.n	800e096 <mem_free+0xf2>
    return;
 800e094:	bf00      	nop
}
 800e096:	3720      	adds	r7, #32
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	0801da18 	.word	0x0801da18
 800e0a0:	0801db08 	.word	0x0801db08
 800e0a4:	0801da60 	.word	0x0801da60
 800e0a8:	2000f328 	.word	0x2000f328
 800e0ac:	2000f32c 	.word	0x2000f32c
 800e0b0:	0801db2c 	.word	0x0801db2c
 800e0b4:	2000f330 	.word	0x2000f330
 800e0b8:	0801db48 	.word	0x0801db48
 800e0bc:	0801db70 	.word	0x0801db70
 800e0c0:	2000f334 	.word	0x2000f334

0800e0c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b088      	sub	sp, #32
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e0d0:	887b      	ldrh	r3, [r7, #2]
 800e0d2:	3303      	adds	r3, #3
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	f023 0303 	bic.w	r3, r3, #3
 800e0da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e0dc:	8bfb      	ldrh	r3, [r7, #30]
 800e0de:	2b0b      	cmp	r3, #11
 800e0e0:	d801      	bhi.n	800e0e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e0e2:	230c      	movs	r3, #12
 800e0e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e0e6:	8bfb      	ldrh	r3, [r7, #30]
 800e0e8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e0ec:	d803      	bhi.n	800e0f6 <mem_trim+0x32>
 800e0ee:	8bfa      	ldrh	r2, [r7, #30]
 800e0f0:	887b      	ldrh	r3, [r7, #2]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d201      	bcs.n	800e0fa <mem_trim+0x36>
    return NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e0d8      	b.n	800e2ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e0fa:	4b6e      	ldr	r3, [pc, #440]	@ (800e2b4 <mem_trim+0x1f0>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	429a      	cmp	r2, r3
 800e102:	d304      	bcc.n	800e10e <mem_trim+0x4a>
 800e104:	4b6c      	ldr	r3, [pc, #432]	@ (800e2b8 <mem_trim+0x1f4>)
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d306      	bcc.n	800e11c <mem_trim+0x58>
 800e10e:	4b6b      	ldr	r3, [pc, #428]	@ (800e2bc <mem_trim+0x1f8>)
 800e110:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e114:	496a      	ldr	r1, [pc, #424]	@ (800e2c0 <mem_trim+0x1fc>)
 800e116:	486b      	ldr	r0, [pc, #428]	@ (800e2c4 <mem_trim+0x200>)
 800e118:	f00c ff92 	bl	801b040 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e11c:	4b65      	ldr	r3, [pc, #404]	@ (800e2b4 <mem_trim+0x1f0>)
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	687a      	ldr	r2, [r7, #4]
 800e122:	429a      	cmp	r2, r3
 800e124:	d304      	bcc.n	800e130 <mem_trim+0x6c>
 800e126:	4b64      	ldr	r3, [pc, #400]	@ (800e2b8 <mem_trim+0x1f4>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d307      	bcc.n	800e140 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e130:	f00c f8ce 	bl	801a2d0 <sys_arch_protect>
 800e134:	60b8      	str	r0, [r7, #8]
 800e136:	68b8      	ldr	r0, [r7, #8]
 800e138:	f00c f8d8 	bl	801a2ec <sys_arch_unprotect>
    return rmem;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	e0b5      	b.n	800e2ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3b08      	subs	r3, #8
 800e144:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e146:	69b8      	ldr	r0, [r7, #24]
 800e148:	f7ff fdea 	bl	800dd20 <mem_to_ptr>
 800e14c:	4603      	mov	r3, r0
 800e14e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	881a      	ldrh	r2, [r3, #0]
 800e154:	8afb      	ldrh	r3, [r7, #22]
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	b29b      	uxth	r3, r3
 800e15a:	3b08      	subs	r3, #8
 800e15c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e15e:	8bfa      	ldrh	r2, [r7, #30]
 800e160:	8abb      	ldrh	r3, [r7, #20]
 800e162:	429a      	cmp	r2, r3
 800e164:	d906      	bls.n	800e174 <mem_trim+0xb0>
 800e166:	4b55      	ldr	r3, [pc, #340]	@ (800e2bc <mem_trim+0x1f8>)
 800e168:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e16c:	4956      	ldr	r1, [pc, #344]	@ (800e2c8 <mem_trim+0x204>)
 800e16e:	4855      	ldr	r0, [pc, #340]	@ (800e2c4 <mem_trim+0x200>)
 800e170:	f00c ff66 	bl	801b040 <iprintf>
  if (newsize > size) {
 800e174:	8bfa      	ldrh	r2, [r7, #30]
 800e176:	8abb      	ldrh	r3, [r7, #20]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d901      	bls.n	800e180 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e17c:	2300      	movs	r3, #0
 800e17e:	e095      	b.n	800e2ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e180:	8bfa      	ldrh	r2, [r7, #30]
 800e182:	8abb      	ldrh	r3, [r7, #20]
 800e184:	429a      	cmp	r2, r3
 800e186:	d101      	bne.n	800e18c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	e08f      	b.n	800e2ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e18c:	484f      	ldr	r0, [pc, #316]	@ (800e2cc <mem_trim+0x208>)
 800e18e:	f00c f865 	bl	801a25c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e192:	69bb      	ldr	r3, [r7, #24]
 800e194:	881b      	ldrh	r3, [r3, #0]
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff fdb0 	bl	800dcfc <ptr_to_mem>
 800e19c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	791b      	ldrb	r3, [r3, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d13f      	bne.n	800e226 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e1ae:	d106      	bne.n	800e1be <mem_trim+0xfa>
 800e1b0:	4b42      	ldr	r3, [pc, #264]	@ (800e2bc <mem_trim+0x1f8>)
 800e1b2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e1b6:	4946      	ldr	r1, [pc, #280]	@ (800e2d0 <mem_trim+0x20c>)
 800e1b8:	4842      	ldr	r0, [pc, #264]	@ (800e2c4 <mem_trim+0x200>)
 800e1ba:	f00c ff41 	bl	801b040 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e1c4:	8afa      	ldrh	r2, [r7, #22]
 800e1c6:	8bfb      	ldrh	r3, [r7, #30]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e1d0:	4b40      	ldr	r3, [pc, #256]	@ (800e2d4 <mem_trim+0x210>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	693a      	ldr	r2, [r7, #16]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d106      	bne.n	800e1e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e1da:	89fb      	ldrh	r3, [r7, #14]
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fd8d 	bl	800dcfc <ptr_to_mem>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	4a3b      	ldr	r2, [pc, #236]	@ (800e2d4 <mem_trim+0x210>)
 800e1e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e1e8:	89fb      	ldrh	r3, [r7, #14]
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7ff fd86 	bl	800dcfc <ptr_to_mem>
 800e1f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	89ba      	ldrh	r2, [r7, #12]
 800e1fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e1fe:	693b      	ldr	r3, [r7, #16]
 800e200:	8afa      	ldrh	r2, [r7, #22]
 800e202:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	89fa      	ldrh	r2, [r7, #14]
 800e208:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e212:	d047      	beq.n	800e2a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff fd6f 	bl	800dcfc <ptr_to_mem>
 800e21e:	4602      	mov	r2, r0
 800e220:	89fb      	ldrh	r3, [r7, #14]
 800e222:	8053      	strh	r3, [r2, #2]
 800e224:	e03e      	b.n	800e2a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e226:	8bfb      	ldrh	r3, [r7, #30]
 800e228:	f103 0214 	add.w	r2, r3, #20
 800e22c:	8abb      	ldrh	r3, [r7, #20]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d838      	bhi.n	800e2a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e232:	8afa      	ldrh	r2, [r7, #22]
 800e234:	8bfb      	ldrh	r3, [r7, #30]
 800e236:	4413      	add	r3, r2
 800e238:	b29b      	uxth	r3, r3
 800e23a:	3308      	adds	r3, #8
 800e23c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e246:	d106      	bne.n	800e256 <mem_trim+0x192>
 800e248:	4b1c      	ldr	r3, [pc, #112]	@ (800e2bc <mem_trim+0x1f8>)
 800e24a:	f240 3216 	movw	r2, #790	@ 0x316
 800e24e:	4920      	ldr	r1, [pc, #128]	@ (800e2d0 <mem_trim+0x20c>)
 800e250:	481c      	ldr	r0, [pc, #112]	@ (800e2c4 <mem_trim+0x200>)
 800e252:	f00c fef5 	bl	801b040 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e256:	89fb      	ldrh	r3, [r7, #14]
 800e258:	4618      	mov	r0, r3
 800e25a:	f7ff fd4f 	bl	800dcfc <ptr_to_mem>
 800e25e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e260:	4b1c      	ldr	r3, [pc, #112]	@ (800e2d4 <mem_trim+0x210>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	429a      	cmp	r2, r3
 800e268:	d202      	bcs.n	800e270 <mem_trim+0x1ac>
      lfree = mem2;
 800e26a:	4a1a      	ldr	r2, [pc, #104]	@ (800e2d4 <mem_trim+0x210>)
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	2200      	movs	r2, #0
 800e274:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e276:	69bb      	ldr	r3, [r7, #24]
 800e278:	881a      	ldrh	r2, [r3, #0]
 800e27a:	693b      	ldr	r3, [r7, #16]
 800e27c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	8afa      	ldrh	r2, [r7, #22]
 800e282:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	89fa      	ldrh	r2, [r7, #14]
 800e288:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e292:	d007      	beq.n	800e2a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	4618      	mov	r0, r3
 800e29a:	f7ff fd2f 	bl	800dcfc <ptr_to_mem>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	89fb      	ldrh	r3, [r7, #14]
 800e2a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e2a4:	4809      	ldr	r0, [pc, #36]	@ (800e2cc <mem_trim+0x208>)
 800e2a6:	f00b ffe8 	bl	801a27a <sys_mutex_unlock>
  return rmem;
 800e2aa:	687b      	ldr	r3, [r7, #4]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3720      	adds	r7, #32
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	2000f328 	.word	0x2000f328
 800e2b8:	2000f32c 	.word	0x2000f32c
 800e2bc:	0801da18 	.word	0x0801da18
 800e2c0:	0801dba4 	.word	0x0801dba4
 800e2c4:	0801da60 	.word	0x0801da60
 800e2c8:	0801dbbc 	.word	0x0801dbbc
 800e2cc:	2000f330 	.word	0x2000f330
 800e2d0:	0801dbdc 	.word	0x0801dbdc
 800e2d4:	2000f334 	.word	0x2000f334

0800e2d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b088      	sub	sp, #32
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	4603      	mov	r3, r0
 800e2e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e2e2:	88fb      	ldrh	r3, [r7, #6]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d101      	bne.n	800e2ec <mem_malloc+0x14>
    return NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	e0e2      	b.n	800e4b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e2ec:	88fb      	ldrh	r3, [r7, #6]
 800e2ee:	3303      	adds	r3, #3
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	f023 0303 	bic.w	r3, r3, #3
 800e2f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e2f8:	8bbb      	ldrh	r3, [r7, #28]
 800e2fa:	2b0b      	cmp	r3, #11
 800e2fc:	d801      	bhi.n	800e302 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e2fe:	230c      	movs	r3, #12
 800e300:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e302:	8bbb      	ldrh	r3, [r7, #28]
 800e304:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e308:	d803      	bhi.n	800e312 <mem_malloc+0x3a>
 800e30a:	8bba      	ldrh	r2, [r7, #28]
 800e30c:	88fb      	ldrh	r3, [r7, #6]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d201      	bcs.n	800e316 <mem_malloc+0x3e>
    return NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	e0cd      	b.n	800e4b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e316:	4869      	ldr	r0, [pc, #420]	@ (800e4bc <mem_malloc+0x1e4>)
 800e318:	f00b ffa0 	bl	801a25c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e31c:	4b68      	ldr	r3, [pc, #416]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f7ff fcfd 	bl	800dd20 <mem_to_ptr>
 800e326:	4603      	mov	r3, r0
 800e328:	83fb      	strh	r3, [r7, #30]
 800e32a:	e0b7      	b.n	800e49c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e32c:	8bfb      	ldrh	r3, [r7, #30]
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff fce4 	bl	800dcfc <ptr_to_mem>
 800e334:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	791b      	ldrb	r3, [r3, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	f040 80a7 	bne.w	800e48e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	461a      	mov	r2, r3
 800e346:	8bfb      	ldrh	r3, [r7, #30]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	f1a3 0208 	sub.w	r2, r3, #8
 800e34e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e350:	429a      	cmp	r2, r3
 800e352:	f0c0 809c 	bcc.w	800e48e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	461a      	mov	r2, r3
 800e35c:	8bfb      	ldrh	r3, [r7, #30]
 800e35e:	1ad3      	subs	r3, r2, r3
 800e360:	f1a3 0208 	sub.w	r2, r3, #8
 800e364:	8bbb      	ldrh	r3, [r7, #28]
 800e366:	3314      	adds	r3, #20
 800e368:	429a      	cmp	r2, r3
 800e36a:	d333      	bcc.n	800e3d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e36c:	8bfa      	ldrh	r2, [r7, #30]
 800e36e:	8bbb      	ldrh	r3, [r7, #28]
 800e370:	4413      	add	r3, r2
 800e372:	b29b      	uxth	r3, r3
 800e374:	3308      	adds	r3, #8
 800e376:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e378:	8a7b      	ldrh	r3, [r7, #18]
 800e37a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e37e:	d106      	bne.n	800e38e <mem_malloc+0xb6>
 800e380:	4b50      	ldr	r3, [pc, #320]	@ (800e4c4 <mem_malloc+0x1ec>)
 800e382:	f240 3287 	movw	r2, #903	@ 0x387
 800e386:	4950      	ldr	r1, [pc, #320]	@ (800e4c8 <mem_malloc+0x1f0>)
 800e388:	4850      	ldr	r0, [pc, #320]	@ (800e4cc <mem_malloc+0x1f4>)
 800e38a:	f00c fe59 	bl	801b040 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e38e:	8a7b      	ldrh	r3, [r7, #18]
 800e390:	4618      	mov	r0, r3
 800e392:	f7ff fcb3 	bl	800dcfc <ptr_to_mem>
 800e396:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	881a      	ldrh	r2, [r3, #0]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	8bfa      	ldrh	r2, [r7, #30]
 800e3aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	8a7a      	ldrh	r2, [r7, #18]
 800e3b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	881b      	ldrh	r3, [r3, #0]
 800e3bc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800e3c0:	d00b      	beq.n	800e3da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7ff fc98 	bl	800dcfc <ptr_to_mem>
 800e3cc:	4602      	mov	r2, r0
 800e3ce:	8a7b      	ldrh	r3, [r7, #18]
 800e3d0:	8053      	strh	r3, [r2, #2]
 800e3d2:	e002      	b.n	800e3da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	2201      	movs	r2, #1
 800e3d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e3da:	4b39      	ldr	r3, [pc, #228]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	697a      	ldr	r2, [r7, #20]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d127      	bne.n	800e434 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e3e4:	4b36      	ldr	r3, [pc, #216]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e3ea:	e005      	b.n	800e3f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	881b      	ldrh	r3, [r3, #0]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fc83 	bl	800dcfc <ptr_to_mem>
 800e3f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	791b      	ldrb	r3, [r3, #4]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d004      	beq.n	800e40a <mem_malloc+0x132>
 800e400:	4b33      	ldr	r3, [pc, #204]	@ (800e4d0 <mem_malloc+0x1f8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	69ba      	ldr	r2, [r7, #24]
 800e406:	429a      	cmp	r2, r3
 800e408:	d1f0      	bne.n	800e3ec <mem_malloc+0x114>
          }
          lfree = cur;
 800e40a:	4a2d      	ldr	r2, [pc, #180]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e40c:	69bb      	ldr	r3, [r7, #24]
 800e40e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e410:	4b2b      	ldr	r3, [pc, #172]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	4b2e      	ldr	r3, [pc, #184]	@ (800e4d0 <mem_malloc+0x1f8>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d00b      	beq.n	800e434 <mem_malloc+0x15c>
 800e41c:	4b28      	ldr	r3, [pc, #160]	@ (800e4c0 <mem_malloc+0x1e8>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	791b      	ldrb	r3, [r3, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d006      	beq.n	800e434 <mem_malloc+0x15c>
 800e426:	4b27      	ldr	r3, [pc, #156]	@ (800e4c4 <mem_malloc+0x1ec>)
 800e428:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800e42c:	4929      	ldr	r1, [pc, #164]	@ (800e4d4 <mem_malloc+0x1fc>)
 800e42e:	4827      	ldr	r0, [pc, #156]	@ (800e4cc <mem_malloc+0x1f4>)
 800e430:	f00c fe06 	bl	801b040 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e434:	4821      	ldr	r0, [pc, #132]	@ (800e4bc <mem_malloc+0x1e4>)
 800e436:	f00b ff20 	bl	801a27a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e43a:	8bba      	ldrh	r2, [r7, #28]
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	4413      	add	r3, r2
 800e440:	3308      	adds	r3, #8
 800e442:	4a23      	ldr	r2, [pc, #140]	@ (800e4d0 <mem_malloc+0x1f8>)
 800e444:	6812      	ldr	r2, [r2, #0]
 800e446:	4293      	cmp	r3, r2
 800e448:	d906      	bls.n	800e458 <mem_malloc+0x180>
 800e44a:	4b1e      	ldr	r3, [pc, #120]	@ (800e4c4 <mem_malloc+0x1ec>)
 800e44c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800e450:	4921      	ldr	r1, [pc, #132]	@ (800e4d8 <mem_malloc+0x200>)
 800e452:	481e      	ldr	r0, [pc, #120]	@ (800e4cc <mem_malloc+0x1f4>)
 800e454:	f00c fdf4 	bl	801b040 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	f003 0303 	and.w	r3, r3, #3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d006      	beq.n	800e470 <mem_malloc+0x198>
 800e462:	4b18      	ldr	r3, [pc, #96]	@ (800e4c4 <mem_malloc+0x1ec>)
 800e464:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800e468:	491c      	ldr	r1, [pc, #112]	@ (800e4dc <mem_malloc+0x204>)
 800e46a:	4818      	ldr	r0, [pc, #96]	@ (800e4cc <mem_malloc+0x1f4>)
 800e46c:	f00c fde8 	bl	801b040 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e470:	697b      	ldr	r3, [r7, #20]
 800e472:	f003 0303 	and.w	r3, r3, #3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d006      	beq.n	800e488 <mem_malloc+0x1b0>
 800e47a:	4b12      	ldr	r3, [pc, #72]	@ (800e4c4 <mem_malloc+0x1ec>)
 800e47c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800e480:	4917      	ldr	r1, [pc, #92]	@ (800e4e0 <mem_malloc+0x208>)
 800e482:	4812      	ldr	r0, [pc, #72]	@ (800e4cc <mem_malloc+0x1f4>)
 800e484:	f00c fddc 	bl	801b040 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	3308      	adds	r3, #8
 800e48c:	e011      	b.n	800e4b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e48e:	8bfb      	ldrh	r3, [r7, #30]
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fc33 	bl	800dcfc <ptr_to_mem>
 800e496:	4603      	mov	r3, r0
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e49c:	8bfa      	ldrh	r2, [r7, #30]
 800e49e:	8bbb      	ldrh	r3, [r7, #28]
 800e4a0:	f5c3 43a0 	rsb	r3, r3, #20480	@ 0x5000
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	f4ff af41 	bcc.w	800e32c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e4aa:	4804      	ldr	r0, [pc, #16]	@ (800e4bc <mem_malloc+0x1e4>)
 800e4ac:	f00b fee5 	bl	801a27a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e4b0:	2300      	movs	r3, #0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3720      	adds	r7, #32
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
 800e4ba:	bf00      	nop
 800e4bc:	2000f330 	.word	0x2000f330
 800e4c0:	2000f334 	.word	0x2000f334
 800e4c4:	0801da18 	.word	0x0801da18
 800e4c8:	0801dbdc 	.word	0x0801dbdc
 800e4cc:	0801da60 	.word	0x0801da60
 800e4d0:	2000f32c 	.word	0x2000f32c
 800e4d4:	0801dbf0 	.word	0x0801dbf0
 800e4d8:	0801dc0c 	.word	0x0801dc0c
 800e4dc:	0801dc3c 	.word	0x0801dc3c
 800e4e0:	0801dc6c 	.word	0x0801dc6c

0800e4e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	689b      	ldr	r3, [r3, #8]
 800e4f8:	3303      	adds	r3, #3
 800e4fa:	f023 0303 	bic.w	r3, r3, #3
 800e4fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	e011      	b.n	800e52a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	68db      	ldr	r3, [r3, #12]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	68ba      	ldr	r2, [r7, #8]
 800e516:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	889b      	ldrh	r3, [r3, #4]
 800e51c:	461a      	mov	r2, r3
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	4413      	add	r3, r2
 800e522:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	3301      	adds	r3, #1
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	88db      	ldrh	r3, [r3, #6]
 800e52e:	461a      	mov	r2, r3
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	4293      	cmp	r3, r2
 800e534:	dbe7      	blt.n	800e506 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e536:	bf00      	nop
 800e538:	bf00      	nop
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e54a:	2300      	movs	r3, #0
 800e54c:	80fb      	strh	r3, [r7, #6]
 800e54e:	e009      	b.n	800e564 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e550:	88fb      	ldrh	r3, [r7, #6]
 800e552:	4a08      	ldr	r2, [pc, #32]	@ (800e574 <memp_init+0x30>)
 800e554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e558:	4618      	mov	r0, r3
 800e55a:	f7ff ffc3 	bl	800e4e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e55e:	88fb      	ldrh	r3, [r7, #6]
 800e560:	3301      	adds	r3, #1
 800e562:	80fb      	strh	r3, [r7, #6]
 800e564:	88fb      	ldrh	r3, [r7, #6]
 800e566:	2b0c      	cmp	r3, #12
 800e568:	d9f2      	bls.n	800e550 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e56a:	bf00      	nop
 800e56c:	bf00      	nop
 800e56e:	3708      	adds	r7, #8
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}
 800e574:	0806c5c4 	.word	0x0806c5c4

0800e578 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e580:	f00b fea6 	bl	801a2d0 <sys_arch_protect>
 800e584:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d015      	beq.n	800e5c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	6812      	ldr	r2, [r2, #0]
 800e59c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	f003 0303 	and.w	r3, r3, #3
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d006      	beq.n	800e5b6 <do_memp_malloc_pool+0x3e>
 800e5a8:	4b09      	ldr	r3, [pc, #36]	@ (800e5d0 <do_memp_malloc_pool+0x58>)
 800e5aa:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800e5ae:	4909      	ldr	r1, [pc, #36]	@ (800e5d4 <do_memp_malloc_pool+0x5c>)
 800e5b0:	4809      	ldr	r0, [pc, #36]	@ (800e5d8 <do_memp_malloc_pool+0x60>)
 800e5b2:	f00c fd45 	bl	801b040 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f00b fe98 	bl	801a2ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	e003      	b.n	800e5c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	f00b fe93 	bl	801a2ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e5c6:	2300      	movs	r3, #0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}
 800e5d0:	0801dd28 	.word	0x0801dd28
 800e5d4:	0801dd58 	.word	0x0801dd58
 800e5d8:	0801dd7c 	.word	0x0801dd7c

0800e5dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	2b0c      	cmp	r3, #12
 800e5ea:	d908      	bls.n	800e5fe <memp_malloc+0x22>
 800e5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e618 <memp_malloc+0x3c>)
 800e5ee:	f240 1257 	movw	r2, #343	@ 0x157
 800e5f2:	490a      	ldr	r1, [pc, #40]	@ (800e61c <memp_malloc+0x40>)
 800e5f4:	480a      	ldr	r0, [pc, #40]	@ (800e620 <memp_malloc+0x44>)
 800e5f6:	f00c fd23 	bl	801b040 <iprintf>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e008      	b.n	800e610 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e5fe:	79fb      	ldrb	r3, [r7, #7]
 800e600:	4a08      	ldr	r2, [pc, #32]	@ (800e624 <memp_malloc+0x48>)
 800e602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff ffb6 	bl	800e578 <do_memp_malloc_pool>
 800e60c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e60e:	68fb      	ldr	r3, [r7, #12]
}
 800e610:	4618      	mov	r0, r3
 800e612:	3710      	adds	r7, #16
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	0801dd28 	.word	0x0801dd28
 800e61c:	0801ddb8 	.word	0x0801ddb8
 800e620:	0801dd7c 	.word	0x0801dd7c
 800e624:	0806c5c4 	.word	0x0806c5c4

0800e628 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b084      	sub	sp, #16
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e632:	683b      	ldr	r3, [r7, #0]
 800e634:	f003 0303 	and.w	r3, r3, #3
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d006      	beq.n	800e64a <do_memp_free_pool+0x22>
 800e63c:	4b0d      	ldr	r3, [pc, #52]	@ (800e674 <do_memp_free_pool+0x4c>)
 800e63e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800e642:	490d      	ldr	r1, [pc, #52]	@ (800e678 <do_memp_free_pool+0x50>)
 800e644:	480d      	ldr	r0, [pc, #52]	@ (800e67c <do_memp_free_pool+0x54>)
 800e646:	f00c fcfb 	bl	801b040 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e64e:	f00b fe3f 	bl	801a2d0 <sys_arch_protect>
 800e652:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	68fa      	ldr	r2, [r7, #12]
 800e664:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e666:	68b8      	ldr	r0, [r7, #8]
 800e668:	f00b fe40 	bl	801a2ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e66c:	bf00      	nop
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	0801dd28 	.word	0x0801dd28
 800e678:	0801ddd8 	.word	0x0801ddd8
 800e67c:	0801dd7c 	.word	0x0801dd7c

0800e680 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	6039      	str	r1, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e68c:	79fb      	ldrb	r3, [r7, #7]
 800e68e:	2b0c      	cmp	r3, #12
 800e690:	d907      	bls.n	800e6a2 <memp_free+0x22>
 800e692:	4b0c      	ldr	r3, [pc, #48]	@ (800e6c4 <memp_free+0x44>)
 800e694:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800e698:	490b      	ldr	r1, [pc, #44]	@ (800e6c8 <memp_free+0x48>)
 800e69a:	480c      	ldr	r0, [pc, #48]	@ (800e6cc <memp_free+0x4c>)
 800e69c:	f00c fcd0 	bl	801b040 <iprintf>
 800e6a0:	e00c      	b.n	800e6bc <memp_free+0x3c>

  if (mem == NULL) {
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d008      	beq.n	800e6ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e6a8:	79fb      	ldrb	r3, [r7, #7]
 800e6aa:	4a09      	ldr	r2, [pc, #36]	@ (800e6d0 <memp_free+0x50>)
 800e6ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6b0:	6839      	ldr	r1, [r7, #0]
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7ff ffb8 	bl	800e628 <do_memp_free_pool>
 800e6b8:	e000      	b.n	800e6bc <memp_free+0x3c>
    return;
 800e6ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	0801dd28 	.word	0x0801dd28
 800e6c8:	0801ddf8 	.word	0x0801ddf8
 800e6cc:	0801dd7c 	.word	0x0801dd7c
 800e6d0:	0806c5c4 	.word	0x0806c5c4

0800e6d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e6d8:	bf00      	nop
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr
	...

0800e6e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b086      	sub	sp, #24
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	60f8      	str	r0, [r7, #12]
 800e6ec:	60b9      	str	r1, [r7, #8]
 800e6ee:	607a      	str	r2, [r7, #4]
 800e6f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d108      	bne.n	800e70a <netif_add+0x26>
 800e6f8:	4b5b      	ldr	r3, [pc, #364]	@ (800e868 <netif_add+0x184>)
 800e6fa:	f240 1227 	movw	r2, #295	@ 0x127
 800e6fe:	495b      	ldr	r1, [pc, #364]	@ (800e86c <netif_add+0x188>)
 800e700:	485b      	ldr	r0, [pc, #364]	@ (800e870 <netif_add+0x18c>)
 800e702:	f00c fc9d 	bl	801b040 <iprintf>
 800e706:	2300      	movs	r3, #0
 800e708:	e0a9      	b.n	800e85e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d108      	bne.n	800e722 <netif_add+0x3e>
 800e710:	4b55      	ldr	r3, [pc, #340]	@ (800e868 <netif_add+0x184>)
 800e712:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800e716:	4957      	ldr	r1, [pc, #348]	@ (800e874 <netif_add+0x190>)
 800e718:	4855      	ldr	r0, [pc, #340]	@ (800e870 <netif_add+0x18c>)
 800e71a:	f00c fc91 	bl	801b040 <iprintf>
 800e71e:	2300      	movs	r3, #0
 800e720:	e09d      	b.n	800e85e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d101      	bne.n	800e72c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e728:	4b53      	ldr	r3, [pc, #332]	@ (800e878 <netif_add+0x194>)
 800e72a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d101      	bne.n	800e736 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e732:	4b51      	ldr	r3, [pc, #324]	@ (800e878 <netif_add+0x194>)
 800e734:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d101      	bne.n	800e740 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e73c:	4b4e      	ldr	r3, [pc, #312]	@ (800e878 <netif_add+0x194>)
 800e73e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	4a49      	ldr	r2, [pc, #292]	@ (800e87c <netif_add+0x198>)
 800e756:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2200      	movs	r2, #0
 800e75c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2200      	movs	r2, #0
 800e762:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	3324      	adds	r3, #36	@ 0x24
 800e76a:	2204      	movs	r2, #4
 800e76c:	2100      	movs	r1, #0
 800e76e:	4618      	mov	r0, r3
 800e770:	f00c fdc8 	bl	801b304 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	6a3a      	ldr	r2, [r7, #32]
 800e77e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e780:	4b3f      	ldr	r3, [pc, #252]	@ (800e880 <netif_add+0x19c>)
 800e782:	781a      	ldrb	r2, [r3, #0]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e78e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 f914 	bl	800e9c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	4798      	blx	r3
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <netif_add+0xc8>
    return NULL;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e058      	b.n	800e85e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e7b2:	2bff      	cmp	r3, #255	@ 0xff
 800e7b4:	d103      	bne.n	800e7be <netif_add+0xda>
        netif->num = 0;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e7c2:	4b30      	ldr	r3, [pc, #192]	@ (800e884 <netif_add+0x1a0>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	617b      	str	r3, [r7, #20]
 800e7c8:	e02b      	b.n	800e822 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e7ca:	697a      	ldr	r2, [r7, #20]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d106      	bne.n	800e7e0 <netif_add+0xfc>
 800e7d2:	4b25      	ldr	r3, [pc, #148]	@ (800e868 <netif_add+0x184>)
 800e7d4:	f240 128b 	movw	r2, #395	@ 0x18b
 800e7d8:	492b      	ldr	r1, [pc, #172]	@ (800e888 <netif_add+0x1a4>)
 800e7da:	4825      	ldr	r0, [pc, #148]	@ (800e870 <netif_add+0x18c>)
 800e7dc:	f00c fc30 	bl	801b040 <iprintf>
        num_netifs++;
 800e7e0:	693b      	ldr	r3, [r7, #16]
 800e7e2:	3301      	adds	r3, #1
 800e7e4:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	2bff      	cmp	r3, #255	@ 0xff
 800e7ea:	dd06      	ble.n	800e7fa <netif_add+0x116>
 800e7ec:	4b1e      	ldr	r3, [pc, #120]	@ (800e868 <netif_add+0x184>)
 800e7ee:	f240 128d 	movw	r2, #397	@ 0x18d
 800e7f2:	4926      	ldr	r1, [pc, #152]	@ (800e88c <netif_add+0x1a8>)
 800e7f4:	481e      	ldr	r0, [pc, #120]	@ (800e870 <netif_add+0x18c>)
 800e7f6:	f00c fc23 	bl	801b040 <iprintf>
        if (netif2->num == netif->num) {
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e806:	429a      	cmp	r2, r3
 800e808:	d108      	bne.n	800e81c <netif_add+0x138>
          netif->num++;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e810:	3301      	adds	r3, #1
 800e812:	b2da      	uxtb	r2, r3
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800e81a:	e005      	b.n	800e828 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	617b      	str	r3, [r7, #20]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1d0      	bne.n	800e7ca <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1be      	bne.n	800e7ac <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e834:	2bfe      	cmp	r3, #254	@ 0xfe
 800e836:	d103      	bne.n	800e840 <netif_add+0x15c>
    netif_num = 0;
 800e838:	4b11      	ldr	r3, [pc, #68]	@ (800e880 <netif_add+0x19c>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	701a      	strb	r2, [r3, #0]
 800e83e:	e006      	b.n	800e84e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e846:	3301      	adds	r3, #1
 800e848:	b2da      	uxtb	r2, r3
 800e84a:	4b0d      	ldr	r3, [pc, #52]	@ (800e880 <netif_add+0x19c>)
 800e84c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e84e:	4b0d      	ldr	r3, [pc, #52]	@ (800e884 <netif_add+0x1a0>)
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e856:	4a0b      	ldr	r2, [pc, #44]	@ (800e884 <netif_add+0x1a0>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e85c:	68fb      	ldr	r3, [r7, #12]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3718      	adds	r7, #24
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	0801de14 	.word	0x0801de14
 800e86c:	0801dea8 	.word	0x0801dea8
 800e870:	0801de64 	.word	0x0801de64
 800e874:	0801dec4 	.word	0x0801dec4
 800e878:	0806c648 	.word	0x0806c648
 800e87c:	0800ec85 	.word	0x0800ec85
 800e880:	20013d6c 	.word	0x20013d6c
 800e884:	20013d64 	.word	0x20013d64
 800e888:	0801dee8 	.word	0x0801dee8
 800e88c:	0801defc 	.word	0x0801defc

0800e890 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e89a:	6839      	ldr	r1, [r7, #0]
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f002 fc21 	bl	80110e4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e8a2:	6839      	ldr	r1, [r7, #0]
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f007 f933 	bl	8015b10 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <netif_do_set_ipaddr+0x20>
 800e8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800e93c <netif_do_set_ipaddr+0x88>)
 800e8c8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800e8cc:	491c      	ldr	r1, [pc, #112]	@ (800e940 <netif_do_set_ipaddr+0x8c>)
 800e8ce:	481d      	ldr	r0, [pc, #116]	@ (800e944 <netif_do_set_ipaddr+0x90>)
 800e8d0:	f00c fbb6 	bl	801b040 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <netif_do_set_ipaddr+0x34>
 800e8da:	4b18      	ldr	r3, [pc, #96]	@ (800e93c <netif_do_set_ipaddr+0x88>)
 800e8dc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800e8e0:	4917      	ldr	r1, [pc, #92]	@ (800e940 <netif_do_set_ipaddr+0x8c>)
 800e8e2:	4818      	ldr	r0, [pc, #96]	@ (800e944 <netif_do_set_ipaddr+0x90>)
 800e8e4:	f00c fbac 	bl	801b040 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d01c      	beq.n	800e930 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	3304      	adds	r3, #4
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e906:	f107 0314 	add.w	r3, r7, #20
 800e90a:	4619      	mov	r1, r3
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f7ff ffbf 	bl	800e890 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d002      	beq.n	800e91e <netif_do_set_ipaddr+0x6a>
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	e000      	b.n	800e920 <netif_do_set_ipaddr+0x6c>
 800e91e:	2300      	movs	r3, #0
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e924:	2101      	movs	r1, #1
 800e926:	68f8      	ldr	r0, [r7, #12]
 800e928:	f000 f8d2 	bl	800ead0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e92c:	2301      	movs	r3, #1
 800e92e:	e000      	b.n	800e932 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3718      	adds	r7, #24
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	0801de14 	.word	0x0801de14
 800e940:	0801df2c 	.word	0x0801df2c
 800e944:	0801de64 	.word	0x0801de64

0800e948 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e948:	b480      	push	{r7}
 800e94a:	b085      	sub	sp, #20
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	60f8      	str	r0, [r7, #12]
 800e950:	60b9      	str	r1, [r7, #8]
 800e952:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	681a      	ldr	r2, [r3, #0]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	3308      	adds	r3, #8
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	429a      	cmp	r2, r3
 800e960:	d00a      	beq.n	800e978 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d002      	beq.n	800e96e <netif_do_set_netmask+0x26>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	e000      	b.n	800e970 <netif_do_set_netmask+0x28>
 800e96e:	2300      	movs	r3, #0
 800e970:	68fa      	ldr	r2, [r7, #12]
 800e972:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e974:	2301      	movs	r3, #1
 800e976:	e000      	b.n	800e97a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3714      	adds	r7, #20
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr

0800e986 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e986:	b480      	push	{r7}
 800e988:	b085      	sub	sp, #20
 800e98a:	af00      	add	r7, sp, #0
 800e98c:	60f8      	str	r0, [r7, #12]
 800e98e:	60b9      	str	r1, [r7, #8]
 800e990:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	330c      	adds	r3, #12
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d00a      	beq.n	800e9b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d002      	beq.n	800e9ac <netif_do_set_gw+0x26>
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	e000      	b.n	800e9ae <netif_do_set_gw+0x28>
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e000      	b.n	800e9b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3714      	adds	r7, #20
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c2:	4770      	bx	lr

0800e9c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b088      	sub	sp, #32
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	607a      	str	r2, [r7, #4]
 800e9d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e9e0:	4b1c      	ldr	r3, [pc, #112]	@ (800ea54 <netif_set_addr+0x90>)
 800e9e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d101      	bne.n	800e9ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e9ea:	4b1a      	ldr	r3, [pc, #104]	@ (800ea54 <netif_set_addr+0x90>)
 800e9ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e9f4:	4b17      	ldr	r3, [pc, #92]	@ (800ea54 <netif_set_addr+0x90>)
 800e9f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d003      	beq.n	800ea06 <netif_set_addr+0x42>
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <netif_set_addr+0x46>
 800ea06:	2301      	movs	r3, #1
 800ea08:	e000      	b.n	800ea0c <netif_set_addr+0x48>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d006      	beq.n	800ea22 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ea14:	f107 0310 	add.w	r3, r7, #16
 800ea18:	461a      	mov	r2, r3
 800ea1a:	68b9      	ldr	r1, [r7, #8]
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f7ff ff49 	bl	800e8b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ea22:	69fa      	ldr	r2, [r7, #28]
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	f7ff ff8e 	bl	800e948 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ea2c:	69ba      	ldr	r2, [r7, #24]
 800ea2e:	6839      	ldr	r1, [r7, #0]
 800ea30:	68f8      	ldr	r0, [r7, #12]
 800ea32:	f7ff ffa8 	bl	800e986 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d106      	bne.n	800ea4a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ea3c:	f107 0310 	add.w	r3, r7, #16
 800ea40:	461a      	mov	r2, r3
 800ea42:	68b9      	ldr	r1, [r7, #8]
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f7ff ff35 	bl	800e8b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ea4a:	bf00      	nop
 800ea4c:	3720      	adds	r7, #32
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	0806c648 	.word	0x0806c648

0800ea58 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ea60:	4a04      	ldr	r2, [pc, #16]	@ (800ea74 <netif_set_default+0x1c>)
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ea66:	bf00      	nop
 800ea68:	370c      	adds	r7, #12
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea70:	4770      	bx	lr
 800ea72:	bf00      	nop
 800ea74:	20013d68 	.word	0x20013d68

0800ea78 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d107      	bne.n	800ea96 <netif_set_up+0x1e>
 800ea86:	4b0f      	ldr	r3, [pc, #60]	@ (800eac4 <netif_set_up+0x4c>)
 800ea88:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ea8c:	490e      	ldr	r1, [pc, #56]	@ (800eac8 <netif_set_up+0x50>)
 800ea8e:	480f      	ldr	r0, [pc, #60]	@ (800eacc <netif_set_up+0x54>)
 800ea90:	f00c fad6 	bl	801b040 <iprintf>
 800ea94:	e013      	b.n	800eabe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10c      	bne.n	800eabe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eaaa:	f043 0301 	orr.w	r3, r3, #1
 800eaae:	b2da      	uxtb	r2, r3
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800eab6:	2103      	movs	r1, #3
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f809 	bl	800ead0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	0801de14 	.word	0x0801de14
 800eac8:	0801df9c 	.word	0x0801df9c
 800eacc:	0801de64 	.word	0x0801de64

0800ead0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d106      	bne.n	800eaf0 <netif_issue_reports+0x20>
 800eae2:	4b18      	ldr	r3, [pc, #96]	@ (800eb44 <netif_issue_reports+0x74>)
 800eae4:	f240 326d 	movw	r2, #877	@ 0x36d
 800eae8:	4917      	ldr	r1, [pc, #92]	@ (800eb48 <netif_issue_reports+0x78>)
 800eaea:	4818      	ldr	r0, [pc, #96]	@ (800eb4c <netif_issue_reports+0x7c>)
 800eaec:	f00c faa8 	bl	801b040 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eaf6:	f003 0304 	and.w	r3, r3, #4
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01e      	beq.n	800eb3c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb04:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d017      	beq.n	800eb3c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eb0c:	78fb      	ldrb	r3, [r7, #3]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d013      	beq.n	800eb3e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	3304      	adds	r3, #4
 800eb1a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d00e      	beq.n	800eb3e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb26:	f003 0308 	and.w	r3, r3, #8
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d007      	beq.n	800eb3e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	3304      	adds	r3, #4
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f009 fe6b 	bl	8018810 <etharp_request>
 800eb3a:	e000      	b.n	800eb3e <netif_issue_reports+0x6e>
    return;
 800eb3c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}
 800eb44:	0801de14 	.word	0x0801de14
 800eb48:	0801dfb8 	.word	0x0801dfb8
 800eb4c:	0801de64 	.word	0x0801de64

0800eb50 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d107      	bne.n	800eb6e <netif_set_down+0x1e>
 800eb5e:	4b12      	ldr	r3, [pc, #72]	@ (800eba8 <netif_set_down+0x58>)
 800eb60:	f240 329b 	movw	r2, #923	@ 0x39b
 800eb64:	4911      	ldr	r1, [pc, #68]	@ (800ebac <netif_set_down+0x5c>)
 800eb66:	4812      	ldr	r0, [pc, #72]	@ (800ebb0 <netif_set_down+0x60>)
 800eb68:	f00c fa6a 	bl	801b040 <iprintf>
 800eb6c:	e019      	b.n	800eba2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb74:	f003 0301 	and.w	r3, r3, #1
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d012      	beq.n	800eba2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb82:	f023 0301 	bic.w	r3, r3, #1
 800eb86:	b2da      	uxtb	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eb94:	f003 0308 	and.w	r3, r3, #8
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d002      	beq.n	800eba2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f009 f9f1 	bl	8017f84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	0801de14 	.word	0x0801de14
 800ebac:	0801dfdc 	.word	0x0801dfdc
 800ebb0:	0801de64 	.word	0x0801de64

0800ebb4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d107      	bne.n	800ebd2 <netif_set_link_up+0x1e>
 800ebc2:	4b15      	ldr	r3, [pc, #84]	@ (800ec18 <netif_set_link_up+0x64>)
 800ebc4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ebc8:	4914      	ldr	r1, [pc, #80]	@ (800ec1c <netif_set_link_up+0x68>)
 800ebca:	4815      	ldr	r0, [pc, #84]	@ (800ec20 <netif_set_link_up+0x6c>)
 800ebcc:	f00c fa38 	bl	801b040 <iprintf>
 800ebd0:	e01e      	b.n	800ec10 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ebd8:	f003 0304 	and.w	r3, r3, #4
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d117      	bne.n	800ec10 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ebe6:	f043 0304 	orr.w	r3, r3, #4
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f007 fbb6 	bl	8016364 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ebf8:	2103      	movs	r1, #3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff ff68 	bl	800ead0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	69db      	ldr	r3, [r3, #28]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d003      	beq.n	800ec10 <netif_set_link_up+0x5c>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	69db      	ldr	r3, [r3, #28]
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	0801de14 	.word	0x0801de14
 800ec1c:	0801dffc 	.word	0x0801dffc
 800ec20:	0801de64 	.word	0x0801de64

0800ec24 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d107      	bne.n	800ec42 <netif_set_link_down+0x1e>
 800ec32:	4b11      	ldr	r3, [pc, #68]	@ (800ec78 <netif_set_link_down+0x54>)
 800ec34:	f240 4206 	movw	r2, #1030	@ 0x406
 800ec38:	4910      	ldr	r1, [pc, #64]	@ (800ec7c <netif_set_link_down+0x58>)
 800ec3a:	4811      	ldr	r0, [pc, #68]	@ (800ec80 <netif_set_link_down+0x5c>)
 800ec3c:	f00c fa00 	bl	801b040 <iprintf>
 800ec40:	e017      	b.n	800ec72 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d010      	beq.n	800ec72 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ec56:	f023 0304 	bic.w	r3, r3, #4
 800ec5a:	b2da      	uxtb	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	69db      	ldr	r3, [r3, #28]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d003      	beq.n	800ec72 <netif_set_link_down+0x4e>
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	69db      	ldr	r3, [r3, #28]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	0801de14 	.word	0x0801de14
 800ec7c:	0801e020 	.word	0x0801e020
 800ec80:	0801de64 	.word	0x0801de64

0800ec84 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ec90:	f06f 030b 	mvn.w	r3, #11
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3714      	adds	r7, #20
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9e:	4770      	bx	lr

0800eca0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800eca0:	b480      	push	{r7}
 800eca2:	b085      	sub	sp, #20
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d013      	beq.n	800ecd8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ecb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ece8 <netif_get_by_index+0x48>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	60fb      	str	r3, [r7, #12]
 800ecb6:	e00c      	b.n	800ecd2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	79fa      	ldrb	r2, [r7, #7]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d101      	bne.n	800eccc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	e006      	b.n	800ecda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	60fb      	str	r3, [r7, #12]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d1ef      	bne.n	800ecb8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr
 800ece6:	bf00      	nop
 800ece8:	20013d64 	.word	0x20013d64

0800ecec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b082      	sub	sp, #8
 800ecf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ecf2:	f00b faed 	bl	801a2d0 <sys_arch_protect>
 800ecf6:	6038      	str	r0, [r7, #0]
 800ecf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed30 <pbuf_free_ooseq+0x44>)
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	701a      	strb	r2, [r3, #0]
 800ecfe:	6838      	ldr	r0, [r7, #0]
 800ed00:	f00b faf4 	bl	801a2ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ed04:	4b0b      	ldr	r3, [pc, #44]	@ (800ed34 <pbuf_free_ooseq+0x48>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	607b      	str	r3, [r7, #4]
 800ed0a:	e00a      	b.n	800ed22 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d003      	beq.n	800ed1c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f002 fa23 	bl	8011160 <tcp_free_ooseq>
      return;
 800ed1a:	e005      	b.n	800ed28 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	607b      	str	r3, [r7, #4]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d1f1      	bne.n	800ed0c <pbuf_free_ooseq+0x20>
    }
  }
}
 800ed28:	3708      	adds	r7, #8
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20013d6d 	.word	0x20013d6d
 800ed34:	20013d7c 	.word	0x20013d7c

0800ed38 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b082      	sub	sp, #8
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ed40:	f7ff ffd4 	bl	800ecec <pbuf_free_ooseq>
}
 800ed44:	bf00      	nop
 800ed46:	3708      	adds	r7, #8
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ed52:	f00b fabd 	bl	801a2d0 <sys_arch_protect>
 800ed56:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ed58:	4b0f      	ldr	r3, [pc, #60]	@ (800ed98 <pbuf_pool_is_empty+0x4c>)
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ed5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ed98 <pbuf_pool_is_empty+0x4c>)
 800ed60:	2201      	movs	r2, #1
 800ed62:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f00b fac1 	bl	801a2ec <sys_arch_unprotect>

  if (!queued) {
 800ed6a:	78fb      	ldrb	r3, [r7, #3]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10f      	bne.n	800ed90 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ed70:	2100      	movs	r1, #0
 800ed72:	480a      	ldr	r0, [pc, #40]	@ (800ed9c <pbuf_pool_is_empty+0x50>)
 800ed74:	f7fe fd62 	bl	800d83c <tcpip_try_callback>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d008      	beq.n	800ed90 <pbuf_pool_is_empty+0x44>
 800ed7e:	f00b faa7 	bl	801a2d0 <sys_arch_protect>
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	4b04      	ldr	r3, [pc, #16]	@ (800ed98 <pbuf_pool_is_empty+0x4c>)
 800ed86:	2200      	movs	r2, #0
 800ed88:	701a      	strb	r2, [r3, #0]
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f00b faae 	bl	801a2ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	20013d6d 	.word	0x20013d6d
 800ed9c:	0800ed39 	.word	0x0800ed39

0800eda0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b085      	sub	sp, #20
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	4611      	mov	r1, r2
 800edac:	461a      	mov	r2, r3
 800edae:	460b      	mov	r3, r1
 800edb0:	80fb      	strh	r3, [r7, #6]
 800edb2:	4613      	mov	r3, r2
 800edb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2200      	movs	r2, #0
 800edba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	68ba      	ldr	r2, [r7, #8]
 800edc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	88fa      	ldrh	r2, [r7, #6]
 800edc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	88ba      	ldrh	r2, [r7, #4]
 800edcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800edce:	8b3b      	ldrh	r3, [r7, #24]
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	7f3a      	ldrb	r2, [r7, #28]
 800edda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2201      	movs	r2, #1
 800ede0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	2200      	movs	r2, #0
 800ede6:	73da      	strb	r2, [r3, #15]
}
 800ede8:	bf00      	nop
 800edea:	3714      	adds	r7, #20
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b08c      	sub	sp, #48	@ 0x30
 800edf8:	af02      	add	r7, sp, #8
 800edfa:	4603      	mov	r3, r0
 800edfc:	71fb      	strb	r3, [r7, #7]
 800edfe:	460b      	mov	r3, r1
 800ee00:	80bb      	strh	r3, [r7, #4]
 800ee02:	4613      	mov	r3, r2
 800ee04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ee0a:	887b      	ldrh	r3, [r7, #2]
 800ee0c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ee10:	f000 8082 	beq.w	800ef18 <pbuf_alloc+0x124>
 800ee14:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ee18:	f300 80ca 	bgt.w	800efb0 <pbuf_alloc+0x1bc>
 800ee1c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ee20:	d010      	beq.n	800ee44 <pbuf_alloc+0x50>
 800ee22:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ee26:	f300 80c3 	bgt.w	800efb0 <pbuf_alloc+0x1bc>
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d002      	beq.n	800ee34 <pbuf_alloc+0x40>
 800ee2e:	2b41      	cmp	r3, #65	@ 0x41
 800ee30:	f040 80be 	bne.w	800efb0 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ee34:	887a      	ldrh	r2, [r7, #2]
 800ee36:	88bb      	ldrh	r3, [r7, #4]
 800ee38:	4619      	mov	r1, r3
 800ee3a:	2000      	movs	r0, #0
 800ee3c:	f000 f8d4 	bl	800efe8 <pbuf_alloc_reference>
 800ee40:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ee42:	e0bf      	b.n	800efc4 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ee44:	2300      	movs	r3, #0
 800ee46:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ee4c:	88bb      	ldrh	r3, [r7, #4]
 800ee4e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ee50:	200c      	movs	r0, #12
 800ee52:	f7ff fbc3 	bl	800e5dc <memp_malloc>
 800ee56:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d109      	bne.n	800ee72 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800ee5e:	f7ff ff75 	bl	800ed4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ee62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d002      	beq.n	800ee6e <pbuf_alloc+0x7a>
            pbuf_free(p);
 800ee68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee6a:	f000 faab 	bl	800f3c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	e0a9      	b.n	800efc6 <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ee72:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee74:	3303      	adds	r3, #3
 800ee76:	b29b      	uxth	r3, r3
 800ee78:	f023 0303 	bic.w	r3, r3, #3
 800ee7c:	b29b      	uxth	r3, r3
 800ee7e:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800ee82:	3304      	adds	r3, #4
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	8b7a      	ldrh	r2, [r7, #26]
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	bf28      	it	cs
 800ee8c:	4613      	movcs	r3, r2
 800ee8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ee90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ee92:	3310      	adds	r3, #16
 800ee94:	693a      	ldr	r2, [r7, #16]
 800ee96:	4413      	add	r3, r2
 800ee98:	3303      	adds	r3, #3
 800ee9a:	f023 0303 	bic.w	r3, r3, #3
 800ee9e:	4618      	mov	r0, r3
 800eea0:	89f9      	ldrh	r1, [r7, #14]
 800eea2:	8b7a      	ldrh	r2, [r7, #26]
 800eea4:	2300      	movs	r3, #0
 800eea6:	9301      	str	r3, [sp, #4]
 800eea8:	887b      	ldrh	r3, [r7, #2]
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	460b      	mov	r3, r1
 800eeae:	4601      	mov	r1, r0
 800eeb0:	6938      	ldr	r0, [r7, #16]
 800eeb2:	f7ff ff75 	bl	800eda0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	f003 0303 	and.w	r3, r3, #3
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d006      	beq.n	800eed0 <pbuf_alloc+0xdc>
 800eec2:	4b43      	ldr	r3, [pc, #268]	@ (800efd0 <pbuf_alloc+0x1dc>)
 800eec4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eec8:	4942      	ldr	r1, [pc, #264]	@ (800efd4 <pbuf_alloc+0x1e0>)
 800eeca:	4843      	ldr	r0, [pc, #268]	@ (800efd8 <pbuf_alloc+0x1e4>)
 800eecc:	f00c f8b8 	bl	801b040 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eed0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800eed2:	3303      	adds	r3, #3
 800eed4:	f023 0303 	bic.w	r3, r3, #3
 800eed8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800eedc:	4293      	cmp	r3, r2
 800eede:	d106      	bne.n	800eeee <pbuf_alloc+0xfa>
 800eee0:	4b3b      	ldr	r3, [pc, #236]	@ (800efd0 <pbuf_alloc+0x1dc>)
 800eee2:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800eee6:	493d      	ldr	r1, [pc, #244]	@ (800efdc <pbuf_alloc+0x1e8>)
 800eee8:	483b      	ldr	r0, [pc, #236]	@ (800efd8 <pbuf_alloc+0x1e4>)
 800eeea:	f00c f8a9 	bl	801b040 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800eeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d102      	bne.n	800eefa <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	627b      	str	r3, [r7, #36]	@ 0x24
 800eef8:	e002      	b.n	800ef00 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	693a      	ldr	r2, [r7, #16]
 800eefe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ef04:	8b7a      	ldrh	r2, [r7, #26]
 800ef06:	89fb      	ldrh	r3, [r7, #14]
 800ef08:	1ad3      	subs	r3, r2, r3
 800ef0a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800ef10:	8b7b      	ldrh	r3, [r7, #26]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d19c      	bne.n	800ee50 <pbuf_alloc+0x5c>
      break;
 800ef16:	e055      	b.n	800efc4 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ef18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef1a:	3303      	adds	r3, #3
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	f023 0303 	bic.w	r3, r3, #3
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	88bb      	ldrh	r3, [r7, #4]
 800ef26:	3303      	adds	r3, #3
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	f023 0303 	bic.w	r3, r3, #3
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4413      	add	r3, r2
 800ef32:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ef34:	8b3b      	ldrh	r3, [r7, #24]
 800ef36:	3310      	adds	r3, #16
 800ef38:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ef3a:	8b3a      	ldrh	r2, [r7, #24]
 800ef3c:	88bb      	ldrh	r3, [r7, #4]
 800ef3e:	3303      	adds	r3, #3
 800ef40:	f023 0303 	bic.w	r3, r3, #3
 800ef44:	429a      	cmp	r2, r3
 800ef46:	d306      	bcc.n	800ef56 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ef48:	8afa      	ldrh	r2, [r7, #22]
 800ef4a:	88bb      	ldrh	r3, [r7, #4]
 800ef4c:	3303      	adds	r3, #3
 800ef4e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d201      	bcs.n	800ef5a <pbuf_alloc+0x166>
        return NULL;
 800ef56:	2300      	movs	r3, #0
 800ef58:	e035      	b.n	800efc6 <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ef5a:	8afb      	ldrh	r3, [r7, #22]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7ff f9bb 	bl	800e2d8 <mem_malloc>
 800ef62:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800ef64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d101      	bne.n	800ef6e <pbuf_alloc+0x17a>
        return NULL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	e02b      	b.n	800efc6 <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ef6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ef70:	3310      	adds	r3, #16
 800ef72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef74:	4413      	add	r3, r2
 800ef76:	3303      	adds	r3, #3
 800ef78:	f023 0303 	bic.w	r3, r3, #3
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	88b9      	ldrh	r1, [r7, #4]
 800ef80:	88ba      	ldrh	r2, [r7, #4]
 800ef82:	2300      	movs	r3, #0
 800ef84:	9301      	str	r3, [sp, #4]
 800ef86:	887b      	ldrh	r3, [r7, #2]
 800ef88:	9300      	str	r3, [sp, #0]
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4601      	mov	r1, r0
 800ef8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef90:	f7ff ff06 	bl	800eda0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ef94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	f003 0303 	and.w	r3, r3, #3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d010      	beq.n	800efc2 <pbuf_alloc+0x1ce>
 800efa0:	4b0b      	ldr	r3, [pc, #44]	@ (800efd0 <pbuf_alloc+0x1dc>)
 800efa2:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800efa6:	490e      	ldr	r1, [pc, #56]	@ (800efe0 <pbuf_alloc+0x1ec>)
 800efa8:	480b      	ldr	r0, [pc, #44]	@ (800efd8 <pbuf_alloc+0x1e4>)
 800efaa:	f00c f849 	bl	801b040 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800efae:	e008      	b.n	800efc2 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800efb0:	4b07      	ldr	r3, [pc, #28]	@ (800efd0 <pbuf_alloc+0x1dc>)
 800efb2:	f240 1227 	movw	r2, #295	@ 0x127
 800efb6:	490b      	ldr	r1, [pc, #44]	@ (800efe4 <pbuf_alloc+0x1f0>)
 800efb8:	4807      	ldr	r0, [pc, #28]	@ (800efd8 <pbuf_alloc+0x1e4>)
 800efba:	f00c f841 	bl	801b040 <iprintf>
      return NULL;
 800efbe:	2300      	movs	r3, #0
 800efc0:	e001      	b.n	800efc6 <pbuf_alloc+0x1d2>
      break;
 800efc2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3728      	adds	r7, #40	@ 0x28
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	0801e044 	.word	0x0801e044
 800efd4:	0801e074 	.word	0x0801e074
 800efd8:	0801e0a4 	.word	0x0801e0a4
 800efdc:	0801e0cc 	.word	0x0801e0cc
 800efe0:	0801e100 	.word	0x0801e100
 800efe4:	0801e12c 	.word	0x0801e12c

0800efe8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b086      	sub	sp, #24
 800efec:	af02      	add	r7, sp, #8
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	460b      	mov	r3, r1
 800eff2:	807b      	strh	r3, [r7, #2]
 800eff4:	4613      	mov	r3, r2
 800eff6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eff8:	883b      	ldrh	r3, [r7, #0]
 800effa:	2b41      	cmp	r3, #65	@ 0x41
 800effc:	d009      	beq.n	800f012 <pbuf_alloc_reference+0x2a>
 800effe:	883b      	ldrh	r3, [r7, #0]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d006      	beq.n	800f012 <pbuf_alloc_reference+0x2a>
 800f004:	4b0f      	ldr	r3, [pc, #60]	@ (800f044 <pbuf_alloc_reference+0x5c>)
 800f006:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f00a:	490f      	ldr	r1, [pc, #60]	@ (800f048 <pbuf_alloc_reference+0x60>)
 800f00c:	480f      	ldr	r0, [pc, #60]	@ (800f04c <pbuf_alloc_reference+0x64>)
 800f00e:	f00c f817 	bl	801b040 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f012:	200b      	movs	r0, #11
 800f014:	f7ff fae2 	bl	800e5dc <memp_malloc>
 800f018:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f020:	2300      	movs	r3, #0
 800f022:	e00b      	b.n	800f03c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f024:	8879      	ldrh	r1, [r7, #2]
 800f026:	887a      	ldrh	r2, [r7, #2]
 800f028:	2300      	movs	r3, #0
 800f02a:	9301      	str	r3, [sp, #4]
 800f02c:	883b      	ldrh	r3, [r7, #0]
 800f02e:	9300      	str	r3, [sp, #0]
 800f030:	460b      	mov	r3, r1
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff feb3 	bl	800eda0 <pbuf_init_alloced_pbuf>
  return p;
 800f03a:	68fb      	ldr	r3, [r7, #12]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	0801e044 	.word	0x0801e044
 800f048:	0801e148 	.word	0x0801e148
 800f04c:	0801e0a4 	.word	0x0801e0a4

0800f050 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b088      	sub	sp, #32
 800f054:	af02      	add	r7, sp, #8
 800f056:	607b      	str	r3, [r7, #4]
 800f058:	4603      	mov	r3, r0
 800f05a:	73fb      	strb	r3, [r7, #15]
 800f05c:	460b      	mov	r3, r1
 800f05e:	81bb      	strh	r3, [r7, #12]
 800f060:	4613      	mov	r3, r2
 800f062:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f068:	8a7b      	ldrh	r3, [r7, #18]
 800f06a:	3303      	adds	r3, #3
 800f06c:	f023 0203 	bic.w	r2, r3, #3
 800f070:	89bb      	ldrh	r3, [r7, #12]
 800f072:	441a      	add	r2, r3
 800f074:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f076:	429a      	cmp	r2, r3
 800f078:	d901      	bls.n	800f07e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	e018      	b.n	800f0b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f07e:	6a3b      	ldr	r3, [r7, #32]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d007      	beq.n	800f094 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f084:	8a7b      	ldrh	r3, [r7, #18]
 800f086:	3303      	adds	r3, #3
 800f088:	f023 0303 	bic.w	r3, r3, #3
 800f08c:	6a3a      	ldr	r2, [r7, #32]
 800f08e:	4413      	add	r3, r2
 800f090:	617b      	str	r3, [r7, #20]
 800f092:	e001      	b.n	800f098 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f094:	2300      	movs	r3, #0
 800f096:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	89b9      	ldrh	r1, [r7, #12]
 800f09c:	89ba      	ldrh	r2, [r7, #12]
 800f09e:	2302      	movs	r3, #2
 800f0a0:	9301      	str	r3, [sp, #4]
 800f0a2:	897b      	ldrh	r3, [r7, #10]
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	460b      	mov	r3, r1
 800f0a8:	6979      	ldr	r1, [r7, #20]
 800f0aa:	f7ff fe79 	bl	800eda0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f0ae:	687b      	ldr	r3, [r7, #4]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3718      	adds	r7, #24
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b084      	sub	sp, #16
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d106      	bne.n	800f0d8 <pbuf_realloc+0x20>
 800f0ca:	4b3a      	ldr	r3, [pc, #232]	@ (800f1b4 <pbuf_realloc+0xfc>)
 800f0cc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f0d0:	4939      	ldr	r1, [pc, #228]	@ (800f1b8 <pbuf_realloc+0x100>)
 800f0d2:	483a      	ldr	r0, [pc, #232]	@ (800f1bc <pbuf_realloc+0x104>)
 800f0d4:	f00b ffb4 	bl	801b040 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	891b      	ldrh	r3, [r3, #8]
 800f0dc:	887a      	ldrh	r2, [r7, #2]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d263      	bcs.n	800f1aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	891a      	ldrh	r2, [r3, #8]
 800f0e6:	887b      	ldrh	r3, [r7, #2]
 800f0e8:	1ad3      	subs	r3, r2, r3
 800f0ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f0ec:	887b      	ldrh	r3, [r7, #2]
 800f0ee:	817b      	strh	r3, [r7, #10]
  q = p;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f0f4:	e018      	b.n	800f128 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	895b      	ldrh	r3, [r3, #10]
 800f0fa:	897a      	ldrh	r2, [r7, #10]
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	891a      	ldrh	r2, [r3, #8]
 800f104:	893b      	ldrh	r3, [r7, #8]
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	b29a      	uxth	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <pbuf_realloc+0x70>
 800f11a:	4b26      	ldr	r3, [pc, #152]	@ (800f1b4 <pbuf_realloc+0xfc>)
 800f11c:	f240 12af 	movw	r2, #431	@ 0x1af
 800f120:	4927      	ldr	r1, [pc, #156]	@ (800f1c0 <pbuf_realloc+0x108>)
 800f122:	4826      	ldr	r0, [pc, #152]	@ (800f1bc <pbuf_realloc+0x104>)
 800f124:	f00b ff8c 	bl	801b040 <iprintf>
  while (rem_len > q->len) {
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	895b      	ldrh	r3, [r3, #10]
 800f12c:	897a      	ldrh	r2, [r7, #10]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d8e1      	bhi.n	800f0f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	7b1b      	ldrb	r3, [r3, #12]
 800f136:	f003 030f 	and.w	r3, r3, #15
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d121      	bne.n	800f182 <pbuf_realloc+0xca>
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	895b      	ldrh	r3, [r3, #10]
 800f142:	897a      	ldrh	r2, [r7, #10]
 800f144:	429a      	cmp	r2, r3
 800f146:	d01c      	beq.n	800f182 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	7b5b      	ldrb	r3, [r3, #13]
 800f14c:	f003 0302 	and.w	r3, r3, #2
 800f150:	2b00      	cmp	r3, #0
 800f152:	d116      	bne.n	800f182 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	685a      	ldr	r2, [r3, #4]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	897b      	ldrh	r3, [r7, #10]
 800f160:	4413      	add	r3, r2
 800f162:	b29b      	uxth	r3, r3
 800f164:	4619      	mov	r1, r3
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7fe ffac 	bl	800e0c4 <mem_trim>
 800f16c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <pbuf_realloc+0xca>
 800f174:	4b0f      	ldr	r3, [pc, #60]	@ (800f1b4 <pbuf_realloc+0xfc>)
 800f176:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f17a:	4912      	ldr	r1, [pc, #72]	@ (800f1c4 <pbuf_realloc+0x10c>)
 800f17c:	480f      	ldr	r0, [pc, #60]	@ (800f1bc <pbuf_realloc+0x104>)
 800f17e:	f00b ff5f 	bl	801b040 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	897a      	ldrh	r2, [r7, #10]
 800f186:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	895a      	ldrh	r2, [r3, #10]
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 f911 	bl	800f3c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	601a      	str	r2, [r3, #0]
 800f1a8:	e000      	b.n	800f1ac <pbuf_realloc+0xf4>
    return;
 800f1aa:	bf00      	nop

}
 800f1ac:	3710      	adds	r7, #16
 800f1ae:	46bd      	mov	sp, r7
 800f1b0:	bd80      	pop	{r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	0801e044 	.word	0x0801e044
 800f1b8:	0801e15c 	.word	0x0801e15c
 800f1bc:	0801e0a4 	.word	0x0801e0a4
 800f1c0:	0801e174 	.word	0x0801e174
 800f1c4:	0801e18c 	.word	0x0801e18c

0800f1c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b086      	sub	sp, #24
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	4613      	mov	r3, r2
 800f1d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d106      	bne.n	800f1ea <pbuf_add_header_impl+0x22>
 800f1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800f28c <pbuf_add_header_impl+0xc4>)
 800f1de:	f240 12df 	movw	r2, #479	@ 0x1df
 800f1e2:	492b      	ldr	r1, [pc, #172]	@ (800f290 <pbuf_add_header_impl+0xc8>)
 800f1e4:	482b      	ldr	r0, [pc, #172]	@ (800f294 <pbuf_add_header_impl+0xcc>)
 800f1e6:	f00b ff2b 	bl	801b040 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d003      	beq.n	800f1f8 <pbuf_add_header_impl+0x30>
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1f6:	d301      	bcc.n	800f1fc <pbuf_add_header_impl+0x34>
    return 1;
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	e043      	b.n	800f284 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d101      	bne.n	800f206 <pbuf_add_header_impl+0x3e>
    return 0;
 800f202:	2300      	movs	r3, #0
 800f204:	e03e      	b.n	800f284 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	8a7b      	ldrh	r3, [r7, #18]
 800f210:	4413      	add	r3, r2
 800f212:	b29b      	uxth	r3, r3
 800f214:	8a7a      	ldrh	r2, [r7, #18]
 800f216:	429a      	cmp	r2, r3
 800f218:	d901      	bls.n	800f21e <pbuf_add_header_impl+0x56>
    return 1;
 800f21a:	2301      	movs	r3, #1
 800f21c:	e032      	b.n	800f284 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	7b1b      	ldrb	r3, [r3, #12]
 800f222:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f224:	8a3b      	ldrh	r3, [r7, #16]
 800f226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00c      	beq.n	800f248 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	425b      	negs	r3, r3
 800f236:	4413      	add	r3, r2
 800f238:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	3310      	adds	r3, #16
 800f23e:	697a      	ldr	r2, [r7, #20]
 800f240:	429a      	cmp	r2, r3
 800f242:	d20d      	bcs.n	800f260 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f244:	2301      	movs	r3, #1
 800f246:	e01d      	b.n	800f284 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f248:	79fb      	ldrb	r3, [r7, #7]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d006      	beq.n	800f25c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	685a      	ldr	r2, [r3, #4]
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	425b      	negs	r3, r3
 800f256:	4413      	add	r3, r2
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	e001      	b.n	800f260 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e011      	b.n	800f284 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	895a      	ldrh	r2, [r3, #10]
 800f26a:	8a7b      	ldrh	r3, [r7, #18]
 800f26c:	4413      	add	r3, r2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	891a      	ldrh	r2, [r3, #8]
 800f278:	8a7b      	ldrh	r3, [r7, #18]
 800f27a:	4413      	add	r3, r2
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	811a      	strh	r2, [r3, #8]


  return 0;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3718      	adds	r7, #24
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	0801e044 	.word	0x0801e044
 800f290:	0801e1a8 	.word	0x0801e1a8
 800f294:	0801e0a4 	.word	0x0801e0a4

0800f298 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff ff8e 	bl	800f1c8 <pbuf_add_header_impl>
 800f2ac:	4603      	mov	r3, r0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
	...

0800f2b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d106      	bne.n	800f2d6 <pbuf_remove_header+0x1e>
 800f2c8:	4b20      	ldr	r3, [pc, #128]	@ (800f34c <pbuf_remove_header+0x94>)
 800f2ca:	f240 224b 	movw	r2, #587	@ 0x24b
 800f2ce:	4920      	ldr	r1, [pc, #128]	@ (800f350 <pbuf_remove_header+0x98>)
 800f2d0:	4820      	ldr	r0, [pc, #128]	@ (800f354 <pbuf_remove_header+0x9c>)
 800f2d2:	f00b feb5 	bl	801b040 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d003      	beq.n	800f2e4 <pbuf_remove_header+0x2c>
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2e2:	d301      	bcc.n	800f2e8 <pbuf_remove_header+0x30>
    return 1;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e02c      	b.n	800f342 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d101      	bne.n	800f2f2 <pbuf_remove_header+0x3a>
    return 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e027      	b.n	800f342 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	895b      	ldrh	r3, [r3, #10]
 800f2fa:	89fa      	ldrh	r2, [r7, #14]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d908      	bls.n	800f312 <pbuf_remove_header+0x5a>
 800f300:	4b12      	ldr	r3, [pc, #72]	@ (800f34c <pbuf_remove_header+0x94>)
 800f302:	f240 2255 	movw	r2, #597	@ 0x255
 800f306:	4914      	ldr	r1, [pc, #80]	@ (800f358 <pbuf_remove_header+0xa0>)
 800f308:	4812      	ldr	r0, [pc, #72]	@ (800f354 <pbuf_remove_header+0x9c>)
 800f30a:	f00b fe99 	bl	801b040 <iprintf>
 800f30e:	2301      	movs	r3, #1
 800f310:	e017      	b.n	800f342 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	685b      	ldr	r3, [r3, #4]
 800f316:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685a      	ldr	r2, [r3, #4]
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	441a      	add	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	895a      	ldrh	r2, [r3, #10]
 800f328:	89fb      	ldrh	r3, [r7, #14]
 800f32a:	1ad3      	subs	r3, r2, r3
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	891a      	ldrh	r2, [r3, #8]
 800f336:	89fb      	ldrh	r3, [r7, #14]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	3710      	adds	r7, #16
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	0801e044 	.word	0x0801e044
 800f350:	0801e1a8 	.word	0x0801e1a8
 800f354:	0801e0a4 	.word	0x0801e0a4
 800f358:	0801e1b4 	.word	0x0801e1b4

0800f35c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	460b      	mov	r3, r1
 800f366:	807b      	strh	r3, [r7, #2]
 800f368:	4613      	mov	r3, r2
 800f36a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f36c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f370:	2b00      	cmp	r3, #0
 800f372:	da08      	bge.n	800f386 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f378:	425b      	negs	r3, r3
 800f37a:	4619      	mov	r1, r3
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f7ff ff9b 	bl	800f2b8 <pbuf_remove_header>
 800f382:	4603      	mov	r3, r0
 800f384:	e007      	b.n	800f396 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f386:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f38a:	787a      	ldrb	r2, [r7, #1]
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff ff1a 	bl	800f1c8 <pbuf_add_header_impl>
 800f394:	4603      	mov	r3, r0
  }
}
 800f396:	4618      	mov	r0, r3
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b082      	sub	sp, #8
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f3aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff ffd2 	bl	800f35c <pbuf_header_impl>
 800f3b8:	4603      	mov	r3, r0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
	...

0800f3c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b088      	sub	sp, #32
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d10b      	bne.n	800f3ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <pbuf_free+0x22>
 800f3d8:	4b3b      	ldr	r3, [pc, #236]	@ (800f4c8 <pbuf_free+0x104>)
 800f3da:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800f3de:	493b      	ldr	r1, [pc, #236]	@ (800f4cc <pbuf_free+0x108>)
 800f3e0:	483b      	ldr	r0, [pc, #236]	@ (800f4d0 <pbuf_free+0x10c>)
 800f3e2:	f00b fe2d 	bl	801b040 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e069      	b.n	800f4be <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f3ee:	e062      	b.n	800f4b6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f3f0:	f00a ff6e 	bl	801a2d0 <sys_arch_protect>
 800f3f4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	7b9b      	ldrb	r3, [r3, #14]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d106      	bne.n	800f40c <pbuf_free+0x48>
 800f3fe:	4b32      	ldr	r3, [pc, #200]	@ (800f4c8 <pbuf_free+0x104>)
 800f400:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800f404:	4933      	ldr	r1, [pc, #204]	@ (800f4d4 <pbuf_free+0x110>)
 800f406:	4832      	ldr	r0, [pc, #200]	@ (800f4d0 <pbuf_free+0x10c>)
 800f408:	f00b fe1a 	bl	801b040 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	7b9b      	ldrb	r3, [r3, #14]
 800f410:	3b01      	subs	r3, #1
 800f412:	b2da      	uxtb	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	739a      	strb	r2, [r3, #14]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	7b9b      	ldrb	r3, [r3, #14]
 800f41c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f41e:	69b8      	ldr	r0, [r7, #24]
 800f420:	f00a ff64 	bl	801a2ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f424:	7dfb      	ldrb	r3, [r7, #23]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d143      	bne.n	800f4b2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	7b1b      	ldrb	r3, [r3, #12]
 800f434:	f003 030f 	and.w	r3, r3, #15
 800f438:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	7b5b      	ldrb	r3, [r3, #13]
 800f43e:	f003 0302 	and.w	r3, r3, #2
 800f442:	2b00      	cmp	r3, #0
 800f444:	d011      	beq.n	800f46a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	691b      	ldr	r3, [r3, #16]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <pbuf_free+0x9c>
 800f452:	4b1d      	ldr	r3, [pc, #116]	@ (800f4c8 <pbuf_free+0x104>)
 800f454:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800f458:	491f      	ldr	r1, [pc, #124]	@ (800f4d8 <pbuf_free+0x114>)
 800f45a:	481d      	ldr	r0, [pc, #116]	@ (800f4d0 <pbuf_free+0x10c>)
 800f45c:	f00b fdf0 	bl	801b040 <iprintf>
        pc->custom_free_function(p);
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	4798      	blx	r3
 800f468:	e01d      	b.n	800f4a6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f46a:	7bfb      	ldrb	r3, [r7, #15]
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d104      	bne.n	800f47a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f470:	6879      	ldr	r1, [r7, #4]
 800f472:	200c      	movs	r0, #12
 800f474:	f7ff f904 	bl	800e680 <memp_free>
 800f478:	e015      	b.n	800f4a6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d104      	bne.n	800f48a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f480:	6879      	ldr	r1, [r7, #4]
 800f482:	200b      	movs	r0, #11
 800f484:	f7ff f8fc 	bl	800e680 <memp_free>
 800f488:	e00d      	b.n	800f4a6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d103      	bne.n	800f498 <pbuf_free+0xd4>
          mem_free(p);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7fe fd87 	bl	800dfa4 <mem_free>
 800f496:	e006      	b.n	800f4a6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f498:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c8 <pbuf_free+0x104>)
 800f49a:	f240 320f 	movw	r2, #783	@ 0x30f
 800f49e:	490f      	ldr	r1, [pc, #60]	@ (800f4dc <pbuf_free+0x118>)
 800f4a0:	480b      	ldr	r0, [pc, #44]	@ (800f4d0 <pbuf_free+0x10c>)
 800f4a2:	f00b fdcd 	bl	801b040 <iprintf>
        }
      }
      count++;
 800f4a6:	7ffb      	ldrb	r3, [r7, #31]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f4ac:	693b      	ldr	r3, [r7, #16]
 800f4ae:	607b      	str	r3, [r7, #4]
 800f4b0:	e001      	b.n	800f4b6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d199      	bne.n	800f3f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f4bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3720      	adds	r7, #32
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	0801e044 	.word	0x0801e044
 800f4cc:	0801e1a8 	.word	0x0801e1a8
 800f4d0:	0801e0a4 	.word	0x0801e0a4
 800f4d4:	0801e1d4 	.word	0x0801e1d4
 800f4d8:	0801e1ec 	.word	0x0801e1ec
 800f4dc:	0801e210 	.word	0x0801e210

0800f4e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b085      	sub	sp, #20
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f4ec:	e005      	b.n	800f4fa <pbuf_clen+0x1a>
    ++len;
 800f4ee:	89fb      	ldrh	r3, [r7, #14]
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d1f6      	bne.n	800f4ee <pbuf_clen+0xe>
  }
  return len;
 800f500:	89fb      	ldrh	r3, [r7, #14]
}
 800f502:	4618      	mov	r0, r3
 800f504:	3714      	adds	r7, #20
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr
	...

0800f510 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b084      	sub	sp, #16
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d016      	beq.n	800f54c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f51e:	f00a fed7 	bl	801a2d0 <sys_arch_protect>
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	7b9b      	ldrb	r3, [r3, #14]
 800f528:	3301      	adds	r3, #1
 800f52a:	b2da      	uxtb	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	739a      	strb	r2, [r3, #14]
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f00a fedb 	bl	801a2ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7b9b      	ldrb	r3, [r3, #14]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d106      	bne.n	800f54c <pbuf_ref+0x3c>
 800f53e:	4b05      	ldr	r3, [pc, #20]	@ (800f554 <pbuf_ref+0x44>)
 800f540:	f240 3242 	movw	r2, #834	@ 0x342
 800f544:	4904      	ldr	r1, [pc, #16]	@ (800f558 <pbuf_ref+0x48>)
 800f546:	4805      	ldr	r0, [pc, #20]	@ (800f55c <pbuf_ref+0x4c>)
 800f548:	f00b fd7a 	bl	801b040 <iprintf>
  }
}
 800f54c:	bf00      	nop
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	0801e044 	.word	0x0801e044
 800f558:	0801e224 	.word	0x0801e224
 800f55c:	0801e0a4 	.word	0x0801e0a4

0800f560 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <pbuf_cat+0x16>
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d107      	bne.n	800f586 <pbuf_cat+0x26>
 800f576:	4b20      	ldr	r3, [pc, #128]	@ (800f5f8 <pbuf_cat+0x98>)
 800f578:	f240 3259 	movw	r2, #857	@ 0x359
 800f57c:	491f      	ldr	r1, [pc, #124]	@ (800f5fc <pbuf_cat+0x9c>)
 800f57e:	4820      	ldr	r0, [pc, #128]	@ (800f600 <pbuf_cat+0xa0>)
 800f580:	f00b fd5e 	bl	801b040 <iprintf>
 800f584:	e034      	b.n	800f5f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	e00a      	b.n	800f5a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	891a      	ldrh	r2, [r3, #8]
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	891b      	ldrh	r3, [r3, #8]
 800f594:	4413      	add	r3, r2
 800f596:	b29a      	uxth	r2, r3
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	60fb      	str	r3, [r7, #12]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1f0      	bne.n	800f58c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	891a      	ldrh	r2, [r3, #8]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	895b      	ldrh	r3, [r3, #10]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d006      	beq.n	800f5c4 <pbuf_cat+0x64>
 800f5b6:	4b10      	ldr	r3, [pc, #64]	@ (800f5f8 <pbuf_cat+0x98>)
 800f5b8:	f240 3262 	movw	r2, #866	@ 0x362
 800f5bc:	4911      	ldr	r1, [pc, #68]	@ (800f604 <pbuf_cat+0xa4>)
 800f5be:	4810      	ldr	r0, [pc, #64]	@ (800f600 <pbuf_cat+0xa0>)
 800f5c0:	f00b fd3e 	bl	801b040 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d006      	beq.n	800f5da <pbuf_cat+0x7a>
 800f5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800f5f8 <pbuf_cat+0x98>)
 800f5ce:	f240 3263 	movw	r2, #867	@ 0x363
 800f5d2:	490d      	ldr	r1, [pc, #52]	@ (800f608 <pbuf_cat+0xa8>)
 800f5d4:	480a      	ldr	r0, [pc, #40]	@ (800f600 <pbuf_cat+0xa0>)
 800f5d6:	f00b fd33 	bl	801b040 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	891a      	ldrh	r2, [r3, #8]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	891b      	ldrh	r3, [r3, #8]
 800f5e2:	4413      	add	r3, r2
 800f5e4:	b29a      	uxth	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
 800f5f6:	bf00      	nop
 800f5f8:	0801e044 	.word	0x0801e044
 800f5fc:	0801e238 	.word	0x0801e238
 800f600:	0801e0a4 	.word	0x0801e0a4
 800f604:	0801e270 	.word	0x0801e270
 800f608:	0801e2a0 	.word	0x0801e2a0

0800f60c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f616:	6839      	ldr	r1, [r7, #0]
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff ffa1 	bl	800f560 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f61e:	6838      	ldr	r0, [r7, #0]
 800f620:	f7ff ff76 	bl	800f510 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f636:	2300      	movs	r3, #0
 800f638:	617b      	str	r3, [r7, #20]
 800f63a:	2300      	movs	r3, #0
 800f63c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d008      	beq.n	800f656 <pbuf_copy+0x2a>
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <pbuf_copy+0x2a>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	891a      	ldrh	r2, [r3, #8]
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	891b      	ldrh	r3, [r3, #8]
 800f652:	429a      	cmp	r2, r3
 800f654:	d209      	bcs.n	800f66a <pbuf_copy+0x3e>
 800f656:	4b57      	ldr	r3, [pc, #348]	@ (800f7b4 <pbuf_copy+0x188>)
 800f658:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800f65c:	4956      	ldr	r1, [pc, #344]	@ (800f7b8 <pbuf_copy+0x18c>)
 800f65e:	4857      	ldr	r0, [pc, #348]	@ (800f7bc <pbuf_copy+0x190>)
 800f660:	f00b fcee 	bl	801b040 <iprintf>
 800f664:	f06f 030f 	mvn.w	r3, #15
 800f668:	e09f      	b.n	800f7aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	895b      	ldrh	r3, [r3, #10]
 800f66e:	461a      	mov	r2, r3
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	1ad2      	subs	r2, r2, r3
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	895b      	ldrh	r3, [r3, #10]
 800f678:	4619      	mov	r1, r3
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	1acb      	subs	r3, r1, r3
 800f67e:	429a      	cmp	r2, r3
 800f680:	d306      	bcc.n	800f690 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	895b      	ldrh	r3, [r3, #10]
 800f686:	461a      	mov	r2, r3
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	60fb      	str	r3, [r7, #12]
 800f68e:	e005      	b.n	800f69c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	895b      	ldrh	r3, [r3, #10]
 800f694:	461a      	mov	r2, r3
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	1ad3      	subs	r3, r2, r3
 800f69a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685a      	ldr	r2, [r3, #4]
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	18d0      	adds	r0, r2, r3
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	693b      	ldr	r3, [r7, #16]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	4619      	mov	r1, r3
 800f6b0:	f00b fee5 	bl	801b47e <memcpy>
    offset_to += len;
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	895b      	ldrh	r3, [r3, #10]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d906      	bls.n	800f6de <pbuf_copy+0xb2>
 800f6d0:	4b38      	ldr	r3, [pc, #224]	@ (800f7b4 <pbuf_copy+0x188>)
 800f6d2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800f6d6:	493a      	ldr	r1, [pc, #232]	@ (800f7c0 <pbuf_copy+0x194>)
 800f6d8:	4838      	ldr	r0, [pc, #224]	@ (800f7bc <pbuf_copy+0x190>)
 800f6da:	f00b fcb1 	bl	801b040 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	895b      	ldrh	r3, [r3, #10]
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d906      	bls.n	800f6f8 <pbuf_copy+0xcc>
 800f6ea:	4b32      	ldr	r3, [pc, #200]	@ (800f7b4 <pbuf_copy+0x188>)
 800f6ec:	f240 32da 	movw	r2, #986	@ 0x3da
 800f6f0:	4934      	ldr	r1, [pc, #208]	@ (800f7c4 <pbuf_copy+0x198>)
 800f6f2:	4832      	ldr	r0, [pc, #200]	@ (800f7bc <pbuf_copy+0x190>)
 800f6f4:	f00b fca4 	bl	801b040 <iprintf>
    if (offset_from >= p_from->len) {
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	895b      	ldrh	r3, [r3, #10]
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	4293      	cmp	r3, r2
 800f702:	d304      	bcc.n	800f70e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f704:	2300      	movs	r3, #0
 800f706:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	895b      	ldrh	r3, [r3, #10]
 800f712:	461a      	mov	r2, r3
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	4293      	cmp	r3, r2
 800f718:	d114      	bne.n	800f744 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d10c      	bne.n	800f744 <pbuf_copy+0x118>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d009      	beq.n	800f744 <pbuf_copy+0x118>
 800f730:	4b20      	ldr	r3, [pc, #128]	@ (800f7b4 <pbuf_copy+0x188>)
 800f732:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800f736:	4924      	ldr	r1, [pc, #144]	@ (800f7c8 <pbuf_copy+0x19c>)
 800f738:	4820      	ldr	r0, [pc, #128]	@ (800f7bc <pbuf_copy+0x190>)
 800f73a:	f00b fc81 	bl	801b040 <iprintf>
 800f73e:	f06f 030f 	mvn.w	r3, #15
 800f742:	e032      	b.n	800f7aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d013      	beq.n	800f772 <pbuf_copy+0x146>
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	895a      	ldrh	r2, [r3, #10]
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	891b      	ldrh	r3, [r3, #8]
 800f752:	429a      	cmp	r2, r3
 800f754:	d10d      	bne.n	800f772 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d009      	beq.n	800f772 <pbuf_copy+0x146>
 800f75e:	4b15      	ldr	r3, [pc, #84]	@ (800f7b4 <pbuf_copy+0x188>)
 800f760:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800f764:	4919      	ldr	r1, [pc, #100]	@ (800f7cc <pbuf_copy+0x1a0>)
 800f766:	4815      	ldr	r0, [pc, #84]	@ (800f7bc <pbuf_copy+0x190>)
 800f768:	f00b fc6a 	bl	801b040 <iprintf>
 800f76c:	f06f 0305 	mvn.w	r3, #5
 800f770:	e01b      	b.n	800f7aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2b00      	cmp	r3, #0
 800f776:	d013      	beq.n	800f7a0 <pbuf_copy+0x174>
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	895a      	ldrh	r2, [r3, #10]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	891b      	ldrh	r3, [r3, #8]
 800f780:	429a      	cmp	r2, r3
 800f782:	d10d      	bne.n	800f7a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d009      	beq.n	800f7a0 <pbuf_copy+0x174>
 800f78c:	4b09      	ldr	r3, [pc, #36]	@ (800f7b4 <pbuf_copy+0x188>)
 800f78e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800f792:	490e      	ldr	r1, [pc, #56]	@ (800f7cc <pbuf_copy+0x1a0>)
 800f794:	4809      	ldr	r0, [pc, #36]	@ (800f7bc <pbuf_copy+0x190>)
 800f796:	f00b fc53 	bl	801b040 <iprintf>
 800f79a:	f06f 0305 	mvn.w	r3, #5
 800f79e:	e004      	b.n	800f7aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f47f af61 	bne.w	800f66a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3718      	adds	r7, #24
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	0801e044 	.word	0x0801e044
 800f7b8:	0801e2ec 	.word	0x0801e2ec
 800f7bc:	0801e0a4 	.word	0x0801e0a4
 800f7c0:	0801e31c 	.word	0x0801e31c
 800f7c4:	0801e334 	.word	0x0801e334
 800f7c8:	0801e350 	.word	0x0801e350
 800f7cc:	0801e360 	.word	0x0801e360

0800f7d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b088      	sub	sp, #32
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	461a      	mov	r2, r3
 800f7de:	460b      	mov	r3, r1
 800f7e0:	80fb      	strh	r3, [r7, #6]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d108      	bne.n	800f806 <pbuf_copy_partial+0x36>
 800f7f4:	4b2b      	ldr	r3, [pc, #172]	@ (800f8a4 <pbuf_copy_partial+0xd4>)
 800f7f6:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f7fa:	492b      	ldr	r1, [pc, #172]	@ (800f8a8 <pbuf_copy_partial+0xd8>)
 800f7fc:	482b      	ldr	r0, [pc, #172]	@ (800f8ac <pbuf_copy_partial+0xdc>)
 800f7fe:	f00b fc1f 	bl	801b040 <iprintf>
 800f802:	2300      	movs	r3, #0
 800f804:	e04a      	b.n	800f89c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d108      	bne.n	800f81e <pbuf_copy_partial+0x4e>
 800f80c:	4b25      	ldr	r3, [pc, #148]	@ (800f8a4 <pbuf_copy_partial+0xd4>)
 800f80e:	f240 420b 	movw	r2, #1035	@ 0x40b
 800f812:	4927      	ldr	r1, [pc, #156]	@ (800f8b0 <pbuf_copy_partial+0xe0>)
 800f814:	4825      	ldr	r0, [pc, #148]	@ (800f8ac <pbuf_copy_partial+0xdc>)
 800f816:	f00b fc13 	bl	801b040 <iprintf>
 800f81a:	2300      	movs	r3, #0
 800f81c:	e03e      	b.n	800f89c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	61fb      	str	r3, [r7, #28]
 800f822:	e034      	b.n	800f88e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f824:	88bb      	ldrh	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00a      	beq.n	800f840 <pbuf_copy_partial+0x70>
 800f82a:	69fb      	ldr	r3, [r7, #28]
 800f82c:	895b      	ldrh	r3, [r3, #10]
 800f82e:	88ba      	ldrh	r2, [r7, #4]
 800f830:	429a      	cmp	r2, r3
 800f832:	d305      	bcc.n	800f840 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	895b      	ldrh	r3, [r3, #10]
 800f838:	88ba      	ldrh	r2, [r7, #4]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	80bb      	strh	r3, [r7, #4]
 800f83e:	e023      	b.n	800f888 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	895a      	ldrh	r2, [r3, #10]
 800f844:	88bb      	ldrh	r3, [r7, #4]
 800f846:	1ad3      	subs	r3, r2, r3
 800f848:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f84a:	8b3a      	ldrh	r2, [r7, #24]
 800f84c:	88fb      	ldrh	r3, [r7, #6]
 800f84e:	429a      	cmp	r2, r3
 800f850:	d901      	bls.n	800f856 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f852:	88fb      	ldrh	r3, [r7, #6]
 800f854:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f856:	8b7b      	ldrh	r3, [r7, #26]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	18d0      	adds	r0, r2, r3
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	685a      	ldr	r2, [r3, #4]
 800f860:	88bb      	ldrh	r3, [r7, #4]
 800f862:	4413      	add	r3, r2
 800f864:	8b3a      	ldrh	r2, [r7, #24]
 800f866:	4619      	mov	r1, r3
 800f868:	f00b fe09 	bl	801b47e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f86c:	8afa      	ldrh	r2, [r7, #22]
 800f86e:	8b3b      	ldrh	r3, [r7, #24]
 800f870:	4413      	add	r3, r2
 800f872:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f874:	8b7a      	ldrh	r2, [r7, #26]
 800f876:	8b3b      	ldrh	r3, [r7, #24]
 800f878:	4413      	add	r3, r2
 800f87a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f87c:	88fa      	ldrh	r2, [r7, #6]
 800f87e:	8b3b      	ldrh	r3, [r7, #24]
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f884:	2300      	movs	r3, #0
 800f886:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	61fb      	str	r3, [r7, #28]
 800f88e:	88fb      	ldrh	r3, [r7, #6]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d002      	beq.n	800f89a <pbuf_copy_partial+0xca>
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1c4      	bne.n	800f824 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f89a:	8afb      	ldrh	r3, [r7, #22]
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3720      	adds	r7, #32
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	0801e044 	.word	0x0801e044
 800f8a8:	0801e38c 	.word	0x0801e38c
 800f8ac:	0801e0a4 	.word	0x0801e0a4
 800f8b0:	0801e3ac 	.word	0x0801e3ac

0800f8b4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b087      	sub	sp, #28
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	60f8      	str	r0, [r7, #12]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	607a      	str	r2, [r7, #4]
 800f8c0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f8c2:	897b      	ldrh	r3, [r7, #10]
 800f8c4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f8ca:	e007      	b.n	800f8dc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	895b      	ldrh	r3, [r3, #10]
 800f8d0:	8afa      	ldrh	r2, [r7, #22]
 800f8d2:	1ad3      	subs	r3, r2, r3
 800f8d4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f8dc:	693b      	ldr	r3, [r7, #16]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <pbuf_skip_const+0x38>
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	895b      	ldrh	r3, [r3, #10]
 800f8e6:	8afa      	ldrh	r2, [r7, #22]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d2ef      	bcs.n	800f8cc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d002      	beq.n	800f8f8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8afa      	ldrh	r2, [r7, #22]
 800f8f6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f8f8:	693b      	ldr	r3, [r7, #16]
}
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	371c      	adds	r7, #28
 800f8fe:	46bd      	mov	sp, r7
 800f900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b086      	sub	sp, #24
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	60f8      	str	r0, [r7, #12]
 800f90e:	460b      	mov	r3, r1
 800f910:	607a      	str	r2, [r7, #4]
 800f912:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f914:	897b      	ldrh	r3, [r7, #10]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	4619      	mov	r1, r3
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f7ff ffca 	bl	800f8b4 <pbuf_skip_const>
 800f920:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f922:	697b      	ldr	r3, [r7, #20]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3718      	adds	r7, #24
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	603a      	str	r2, [r7, #0]
 800f936:	71fb      	strb	r3, [r7, #7]
 800f938:	460b      	mov	r3, r1
 800f93a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	8919      	ldrh	r1, [r3, #8]
 800f940:	88ba      	ldrh	r2, [r7, #4]
 800f942:	79fb      	ldrb	r3, [r7, #7]
 800f944:	4618      	mov	r0, r3
 800f946:	f7ff fa55 	bl	800edf4 <pbuf_alloc>
 800f94a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d101      	bne.n	800f956 <pbuf_clone+0x2a>
    return NULL;
 800f952:	2300      	movs	r3, #0
 800f954:	e011      	b.n	800f97a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f7ff fe67 	bl	800f62c <pbuf_copy>
 800f95e:	4603      	mov	r3, r0
 800f960:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f962:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d006      	beq.n	800f978 <pbuf_clone+0x4c>
 800f96a:	4b06      	ldr	r3, [pc, #24]	@ (800f984 <pbuf_clone+0x58>)
 800f96c:	f240 5224 	movw	r2, #1316	@ 0x524
 800f970:	4905      	ldr	r1, [pc, #20]	@ (800f988 <pbuf_clone+0x5c>)
 800f972:	4806      	ldr	r0, [pc, #24]	@ (800f98c <pbuf_clone+0x60>)
 800f974:	f00b fb64 	bl	801b040 <iprintf>
  return q;
 800f978:	68fb      	ldr	r3, [r7, #12]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	0801e044 	.word	0x0801e044
 800f988:	0801e4b8 	.word	0x0801e4b8
 800f98c:	0801e0a4 	.word	0x0801e0a4

0800f990 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	460b      	mov	r3, r1
 800f99a:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f99c:	887b      	ldrh	r3, [r7, #2]
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f80c 	bl	800f9be <pbuf_try_get_at>
 800f9a6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	db02      	blt.n	800f9b4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	e000      	b.n	800f9b6 <pbuf_get_at+0x26>
  }
  return 0;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}

0800f9be <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f9be:	b580      	push	{r7, lr}
 800f9c0:	b084      	sub	sp, #16
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
 800f9c6:	460b      	mov	r3, r1
 800f9c8:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f9ca:	f107 020a 	add.w	r2, r7, #10
 800f9ce:	887b      	ldrh	r3, [r7, #2]
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f7ff ff6e 	bl	800f8b4 <pbuf_skip_const>
 800f9d8:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00a      	beq.n	800f9f6 <pbuf_try_get_at+0x38>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	895a      	ldrh	r2, [r3, #10]
 800f9e4:	897b      	ldrh	r3, [r7, #10]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d905      	bls.n	800f9f6 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	897a      	ldrh	r2, [r7, #10]
 800f9f0:	4413      	add	r3, r2
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	e001      	b.n	800f9fa <pbuf_try_get_at+0x3c>
  }
  return -1;
 800f9f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3710      	adds	r7, #16
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}

0800fa02 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b084      	sub	sp, #16
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
 800fa0a:	460b      	mov	r3, r1
 800fa0c:	807b      	strh	r3, [r7, #2]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800fa12:	f107 020a 	add.w	r2, r7, #10
 800fa16:	887b      	ldrh	r3, [r7, #2]
 800fa18:	4619      	mov	r1, r3
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7ff ff73 	bl	800f906 <pbuf_skip>
 800fa20:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d00a      	beq.n	800fa3e <pbuf_put_at+0x3c>
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	895a      	ldrh	r2, [r3, #10]
 800fa2c:	897b      	ldrh	r3, [r7, #10]
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d905      	bls.n	800fa3e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	897a      	ldrh	r2, [r7, #10]
 800fa38:	4413      	add	r3, r2
 800fa3a:	787a      	ldrb	r2, [r7, #1]
 800fa3c:	701a      	strb	r2, [r3, #0]
  }
}
 800fa3e:	bf00      	nop
 800fa40:	3710      	adds	r7, #16
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
	...

0800fa48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fa4c:	f00a fd28 	bl	801a4a0 <rand>
 800fa50:	4603      	mov	r3, r0
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	4b01      	ldr	r3, [pc, #4]	@ (800fa68 <tcp_init+0x20>)
 800fa62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fa64:	bf00      	nop
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	200000b0 	.word	0x200000b0

0800fa6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b082      	sub	sp, #8
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	7d1b      	ldrb	r3, [r3, #20]
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	d105      	bne.n	800fa88 <tcp_free+0x1c>
 800fa7c:	4b06      	ldr	r3, [pc, #24]	@ (800fa98 <tcp_free+0x2c>)
 800fa7e:	22d4      	movs	r2, #212	@ 0xd4
 800fa80:	4906      	ldr	r1, [pc, #24]	@ (800fa9c <tcp_free+0x30>)
 800fa82:	4807      	ldr	r0, [pc, #28]	@ (800faa0 <tcp_free+0x34>)
 800fa84:	f00b fadc 	bl	801b040 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800fa88:	6879      	ldr	r1, [r7, #4]
 800fa8a:	2001      	movs	r0, #1
 800fa8c:	f7fe fdf8 	bl	800e680 <memp_free>
}
 800fa90:	bf00      	nop
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	0801e544 	.word	0x0801e544
 800fa9c:	0801e574 	.word	0x0801e574
 800faa0:	0801e588 	.word	0x0801e588

0800faa4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	7d1b      	ldrb	r3, [r3, #20]
 800fab0:	2b01      	cmp	r3, #1
 800fab2:	d105      	bne.n	800fac0 <tcp_free_listen+0x1c>
 800fab4:	4b06      	ldr	r3, [pc, #24]	@ (800fad0 <tcp_free_listen+0x2c>)
 800fab6:	22df      	movs	r2, #223	@ 0xdf
 800fab8:	4906      	ldr	r1, [pc, #24]	@ (800fad4 <tcp_free_listen+0x30>)
 800faba:	4807      	ldr	r0, [pc, #28]	@ (800fad8 <tcp_free_listen+0x34>)
 800fabc:	f00b fac0 	bl	801b040 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	2002      	movs	r0, #2
 800fac4:	f7fe fddc 	bl	800e680 <memp_free>
}
 800fac8:	bf00      	nop
 800faca:	3708      	adds	r7, #8
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	0801e544 	.word	0x0801e544
 800fad4:	0801e5b0 	.word	0x0801e5b0
 800fad8:	0801e588 	.word	0x0801e588

0800fadc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fae0:	f000 fea6 	bl	8010830 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fae4:	4b07      	ldr	r3, [pc, #28]	@ (800fb04 <tcp_tmr+0x28>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	3301      	adds	r3, #1
 800faea:	b2da      	uxtb	r2, r3
 800faec:	4b05      	ldr	r3, [pc, #20]	@ (800fb04 <tcp_tmr+0x28>)
 800faee:	701a      	strb	r2, [r3, #0]
 800faf0:	4b04      	ldr	r3, [pc, #16]	@ (800fb04 <tcp_tmr+0x28>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	f003 0301 	and.w	r3, r3, #1
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fafc:	f000 fb56 	bl	80101ac <tcp_slowtmr>
  }
}
 800fb00:	bf00      	nop
 800fb02:	bd80      	pop	{r7, pc}
 800fb04:	20013d85 	.word	0x20013d85

0800fb08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d105      	bne.n	800fb24 <tcp_remove_listener+0x1c>
 800fb18:	4b0d      	ldr	r3, [pc, #52]	@ (800fb50 <tcp_remove_listener+0x48>)
 800fb1a:	22ff      	movs	r2, #255	@ 0xff
 800fb1c:	490d      	ldr	r1, [pc, #52]	@ (800fb54 <tcp_remove_listener+0x4c>)
 800fb1e:	480e      	ldr	r0, [pc, #56]	@ (800fb58 <tcp_remove_listener+0x50>)
 800fb20:	f00b fa8e 	bl	801b040 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	60fb      	str	r3, [r7, #12]
 800fb28:	e00a      	b.n	800fb40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d102      	bne.n	800fb3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2200      	movs	r2, #0
 800fb38:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	60fb      	str	r3, [r7, #12]
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d1f1      	bne.n	800fb2a <tcp_remove_listener+0x22>
    }
  }
}
 800fb46:	bf00      	nop
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	0801e544 	.word	0x0801e544
 800fb54:	0801e5cc 	.word	0x0801e5cc
 800fb58:	0801e588 	.word	0x0801e588

0800fb5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d106      	bne.n	800fb78 <tcp_listen_closed+0x1c>
 800fb6a:	4b14      	ldr	r3, [pc, #80]	@ (800fbbc <tcp_listen_closed+0x60>)
 800fb6c:	f240 1211 	movw	r2, #273	@ 0x111
 800fb70:	4913      	ldr	r1, [pc, #76]	@ (800fbc0 <tcp_listen_closed+0x64>)
 800fb72:	4814      	ldr	r0, [pc, #80]	@ (800fbc4 <tcp_listen_closed+0x68>)
 800fb74:	f00b fa64 	bl	801b040 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	d006      	beq.n	800fb8e <tcp_listen_closed+0x32>
 800fb80:	4b0e      	ldr	r3, [pc, #56]	@ (800fbbc <tcp_listen_closed+0x60>)
 800fb82:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800fb86:	4910      	ldr	r1, [pc, #64]	@ (800fbc8 <tcp_listen_closed+0x6c>)
 800fb88:	480e      	ldr	r0, [pc, #56]	@ (800fbc4 <tcp_listen_closed+0x68>)
 800fb8a:	f00b fa59 	bl	801b040 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fb8e:	2301      	movs	r3, #1
 800fb90:	60fb      	str	r3, [r7, #12]
 800fb92:	e00b      	b.n	800fbac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fb94:	4a0d      	ldr	r2, [pc, #52]	@ (800fbcc <tcp_listen_closed+0x70>)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	6879      	ldr	r1, [r7, #4]
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff ffb1 	bl	800fb08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2b03      	cmp	r3, #3
 800fbb0:	d9f0      	bls.n	800fb94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fbb2:	bf00      	nop
 800fbb4:	bf00      	nop
 800fbb6:	3710      	adds	r7, #16
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}
 800fbbc:	0801e544 	.word	0x0801e544
 800fbc0:	0801e5f4 	.word	0x0801e5f4
 800fbc4:	0801e588 	.word	0x0801e588
 800fbc8:	0801e600 	.word	0x0801e600
 800fbcc:	0806c610 	.word	0x0806c610

0800fbd0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fbd0:	b5b0      	push	{r4, r5, r7, lr}
 800fbd2:	b088      	sub	sp, #32
 800fbd4:	af04      	add	r7, sp, #16
 800fbd6:	6078      	str	r0, [r7, #4]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <tcp_close_shutdown+0x20>
 800fbe2:	4b63      	ldr	r3, [pc, #396]	@ (800fd70 <tcp_close_shutdown+0x1a0>)
 800fbe4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800fbe8:	4962      	ldr	r1, [pc, #392]	@ (800fd74 <tcp_close_shutdown+0x1a4>)
 800fbea:	4863      	ldr	r0, [pc, #396]	@ (800fd78 <tcp_close_shutdown+0x1a8>)
 800fbec:	f00b fa28 	bl	801b040 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fbf0:	78fb      	ldrb	r3, [r7, #3]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d067      	beq.n	800fcc6 <tcp_close_shutdown+0xf6>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7d1b      	ldrb	r3, [r3, #20]
 800fbfa:	2b04      	cmp	r3, #4
 800fbfc:	d003      	beq.n	800fc06 <tcp_close_shutdown+0x36>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7d1b      	ldrb	r3, [r3, #20]
 800fc02:	2b07      	cmp	r3, #7
 800fc04:	d15f      	bne.n	800fcc6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d105      	bne.n	800fc1a <tcp_close_shutdown+0x4a>
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc12:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d055      	beq.n	800fcc6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	8b5b      	ldrh	r3, [r3, #26]
 800fc1e:	f003 0310 	and.w	r3, r3, #16
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <tcp_close_shutdown+0x64>
 800fc26:	4b52      	ldr	r3, [pc, #328]	@ (800fd70 <tcp_close_shutdown+0x1a0>)
 800fc28:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800fc2c:	4953      	ldr	r1, [pc, #332]	@ (800fd7c <tcp_close_shutdown+0x1ac>)
 800fc2e:	4852      	ldr	r0, [pc, #328]	@ (800fd78 <tcp_close_shutdown+0x1a8>)
 800fc30:	f00b fa06 	bl	801b040 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800fc3c:	687d      	ldr	r5, [r7, #4]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	3304      	adds	r3, #4
 800fc42:	687a      	ldr	r2, [r7, #4]
 800fc44:	8ad2      	ldrh	r2, [r2, #22]
 800fc46:	6879      	ldr	r1, [r7, #4]
 800fc48:	8b09      	ldrh	r1, [r1, #24]
 800fc4a:	9102      	str	r1, [sp, #8]
 800fc4c:	9201      	str	r2, [sp, #4]
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	462b      	mov	r3, r5
 800fc52:	4622      	mov	r2, r4
 800fc54:	4601      	mov	r1, r0
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f004 fedc 	bl	8014a14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f001 f8cb 	bl	8010df8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fc62:	4b47      	ldr	r3, [pc, #284]	@ (800fd80 <tcp_close_shutdown+0x1b0>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	429a      	cmp	r2, r3
 800fc6a:	d105      	bne.n	800fc78 <tcp_close_shutdown+0xa8>
 800fc6c:	4b44      	ldr	r3, [pc, #272]	@ (800fd80 <tcp_close_shutdown+0x1b0>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	4a43      	ldr	r2, [pc, #268]	@ (800fd80 <tcp_close_shutdown+0x1b0>)
 800fc74:	6013      	str	r3, [r2, #0]
 800fc76:	e013      	b.n	800fca0 <tcp_close_shutdown+0xd0>
 800fc78:	4b41      	ldr	r3, [pc, #260]	@ (800fd80 <tcp_close_shutdown+0x1b0>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	60fb      	str	r3, [r7, #12]
 800fc7e:	e00c      	b.n	800fc9a <tcp_close_shutdown+0xca>
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d104      	bne.n	800fc94 <tcp_close_shutdown+0xc4>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68da      	ldr	r2, [r3, #12]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	60da      	str	r2, [r3, #12]
 800fc92:	e005      	b.n	800fca0 <tcp_close_shutdown+0xd0>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	60fb      	str	r3, [r7, #12]
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1ef      	bne.n	800fc80 <tcp_close_shutdown+0xb0>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	60da      	str	r2, [r3, #12]
 800fca6:	4b37      	ldr	r3, [pc, #220]	@ (800fd84 <tcp_close_shutdown+0x1b4>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fcac:	4b36      	ldr	r3, [pc, #216]	@ (800fd88 <tcp_close_shutdown+0x1b8>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d102      	bne.n	800fcbc <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fcb6:	f003 fd75 	bl	80137a4 <tcp_trigger_input_pcb_close>
 800fcba:	e002      	b.n	800fcc2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fed5 	bl	800fa6c <tcp_free>
      }
      return ERR_OK;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	e050      	b.n	800fd68 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	7d1b      	ldrb	r3, [r3, #20]
 800fcca:	2b02      	cmp	r3, #2
 800fccc:	d03b      	beq.n	800fd46 <tcp_close_shutdown+0x176>
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	dc44      	bgt.n	800fd5c <tcp_close_shutdown+0x18c>
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d002      	beq.n	800fcdc <tcp_close_shutdown+0x10c>
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d02a      	beq.n	800fd30 <tcp_close_shutdown+0x160>
 800fcda:	e03f      	b.n	800fd5c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	8adb      	ldrh	r3, [r3, #22]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d021      	beq.n	800fd28 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fce4:	4b29      	ldr	r3, [pc, #164]	@ (800fd8c <tcp_close_shutdown+0x1bc>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d105      	bne.n	800fcfa <tcp_close_shutdown+0x12a>
 800fcee:	4b27      	ldr	r3, [pc, #156]	@ (800fd8c <tcp_close_shutdown+0x1bc>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	4a25      	ldr	r2, [pc, #148]	@ (800fd8c <tcp_close_shutdown+0x1bc>)
 800fcf6:	6013      	str	r3, [r2, #0]
 800fcf8:	e013      	b.n	800fd22 <tcp_close_shutdown+0x152>
 800fcfa:	4b24      	ldr	r3, [pc, #144]	@ (800fd8c <tcp_close_shutdown+0x1bc>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	60bb      	str	r3, [r7, #8]
 800fd00:	e00c      	b.n	800fd1c <tcp_close_shutdown+0x14c>
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d104      	bne.n	800fd16 <tcp_close_shutdown+0x146>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	68da      	ldr	r2, [r3, #12]
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	60da      	str	r2, [r3, #12]
 800fd14:	e005      	b.n	800fd22 <tcp_close_shutdown+0x152>
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	60bb      	str	r3, [r7, #8]
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1ef      	bne.n	800fd02 <tcp_close_shutdown+0x132>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7ff fe9f 	bl	800fa6c <tcp_free>
      break;
 800fd2e:	e01a      	b.n	800fd66 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7ff ff13 	bl	800fb5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	4815      	ldr	r0, [pc, #84]	@ (800fd90 <tcp_close_shutdown+0x1c0>)
 800fd3a:	f001 f8ad 	bl	8010e98 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff feb0 	bl	800faa4 <tcp_free_listen>
      break;
 800fd44:	e00f      	b.n	800fd66 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fd46:	6879      	ldr	r1, [r7, #4]
 800fd48:	480d      	ldr	r0, [pc, #52]	@ (800fd80 <tcp_close_shutdown+0x1b0>)
 800fd4a:	f001 f8a5 	bl	8010e98 <tcp_pcb_remove>
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	@ (800fd84 <tcp_close_shutdown+0x1b4>)
 800fd50:	2201      	movs	r2, #1
 800fd52:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff fe89 	bl	800fa6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fd5a:	e004      	b.n	800fd66 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f819 	bl	800fd94 <tcp_close_shutdown_fin>
 800fd62:	4603      	mov	r3, r0
 800fd64:	e000      	b.n	800fd68 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800fd66:	2300      	movs	r3, #0
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bdb0      	pop	{r4, r5, r7, pc}
 800fd70:	0801e544 	.word	0x0801e544
 800fd74:	0801e618 	.word	0x0801e618
 800fd78:	0801e588 	.word	0x0801e588
 800fd7c:	0801e638 	.word	0x0801e638
 800fd80:	20013d7c 	.word	0x20013d7c
 800fd84:	20013d84 	.word	0x20013d84
 800fd88:	20013dc0 	.word	0x20013dc0
 800fd8c:	20013d74 	.word	0x20013d74
 800fd90:	20013d78 	.word	0x20013d78

0800fd94 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <tcp_close_shutdown_fin+0x1c>
 800fda2:	4b2e      	ldr	r3, [pc, #184]	@ (800fe5c <tcp_close_shutdown_fin+0xc8>)
 800fda4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800fda8:	492d      	ldr	r1, [pc, #180]	@ (800fe60 <tcp_close_shutdown_fin+0xcc>)
 800fdaa:	482e      	ldr	r0, [pc, #184]	@ (800fe64 <tcp_close_shutdown_fin+0xd0>)
 800fdac:	f00b f948 	bl	801b040 <iprintf>

  switch (pcb->state) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	7d1b      	ldrb	r3, [r3, #20]
 800fdb4:	2b07      	cmp	r3, #7
 800fdb6:	d020      	beq.n	800fdfa <tcp_close_shutdown_fin+0x66>
 800fdb8:	2b07      	cmp	r3, #7
 800fdba:	dc2b      	bgt.n	800fe14 <tcp_close_shutdown_fin+0x80>
 800fdbc:	2b03      	cmp	r3, #3
 800fdbe:	d002      	beq.n	800fdc6 <tcp_close_shutdown_fin+0x32>
 800fdc0:	2b04      	cmp	r3, #4
 800fdc2:	d00d      	beq.n	800fde0 <tcp_close_shutdown_fin+0x4c>
 800fdc4:	e026      	b.n	800fe14 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f003 ff04 	bl	8013bd4 <tcp_send_fin>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fdd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d11f      	bne.n	800fe18 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2205      	movs	r2, #5
 800fddc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fdde:	e01b      	b.n	800fe18 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f003 fef7 	bl	8013bd4 <tcp_send_fin>
 800fde6:	4603      	mov	r3, r0
 800fde8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fdea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d114      	bne.n	800fe1c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2205      	movs	r2, #5
 800fdf6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fdf8:	e010      	b.n	800fe1c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f003 feea 	bl	8013bd4 <tcp_send_fin>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d109      	bne.n	800fe20 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2209      	movs	r2, #9
 800fe10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe12:	e005      	b.n	800fe20 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	e01c      	b.n	800fe52 <tcp_close_shutdown_fin+0xbe>
      break;
 800fe18:	bf00      	nop
 800fe1a:	e002      	b.n	800fe22 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe1c:	bf00      	nop
 800fe1e:	e000      	b.n	800fe22 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe20:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fe22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d103      	bne.n	800fe32 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f004 f810 	bl	8013e50 <tcp_output>
 800fe30:	e00d      	b.n	800fe4e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fe32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe3a:	d108      	bne.n	800fe4e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	8b5b      	ldrh	r3, [r3, #26]
 800fe40:	f043 0308 	orr.w	r3, r3, #8
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	e001      	b.n	800fe52 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fe4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop
 800fe5c:	0801e544 	.word	0x0801e544
 800fe60:	0801e5f4 	.word	0x0801e5f4
 800fe64:	0801e588 	.word	0x0801e588

0800fe68 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d109      	bne.n	800fe8a <tcp_close+0x22>
 800fe76:	4b0f      	ldr	r3, [pc, #60]	@ (800feb4 <tcp_close+0x4c>)
 800fe78:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800fe7c:	490e      	ldr	r1, [pc, #56]	@ (800feb8 <tcp_close+0x50>)
 800fe7e:	480f      	ldr	r0, [pc, #60]	@ (800febc <tcp_close+0x54>)
 800fe80:	f00b f8de 	bl	801b040 <iprintf>
 800fe84:	f06f 030f 	mvn.w	r3, #15
 800fe88:	e00f      	b.n	800feaa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	7d1b      	ldrb	r3, [r3, #20]
 800fe8e:	2b01      	cmp	r3, #1
 800fe90:	d006      	beq.n	800fea0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8b5b      	ldrh	r3, [r3, #26]
 800fe96:	f043 0310 	orr.w	r3, r3, #16
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fea0:	2101      	movs	r1, #1
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7ff fe94 	bl	800fbd0 <tcp_close_shutdown>
 800fea8:	4603      	mov	r3, r0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	0801e544 	.word	0x0801e544
 800feb8:	0801e654 	.word	0x0801e654
 800febc:	0801e588 	.word	0x0801e588

0800fec0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b08e      	sub	sp, #56	@ 0x38
 800fec4:	af04      	add	r7, sp, #16
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d107      	bne.n	800fee0 <tcp_abandon+0x20>
 800fed0:	4b52      	ldr	r3, [pc, #328]	@ (801001c <tcp_abandon+0x15c>)
 800fed2:	f240 223d 	movw	r2, #573	@ 0x23d
 800fed6:	4952      	ldr	r1, [pc, #328]	@ (8010020 <tcp_abandon+0x160>)
 800fed8:	4852      	ldr	r0, [pc, #328]	@ (8010024 <tcp_abandon+0x164>)
 800feda:	f00b f8b1 	bl	801b040 <iprintf>
 800fede:	e099      	b.n	8010014 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	7d1b      	ldrb	r3, [r3, #20]
 800fee4:	2b01      	cmp	r3, #1
 800fee6:	d106      	bne.n	800fef6 <tcp_abandon+0x36>
 800fee8:	4b4c      	ldr	r3, [pc, #304]	@ (801001c <tcp_abandon+0x15c>)
 800feea:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800feee:	494e      	ldr	r1, [pc, #312]	@ (8010028 <tcp_abandon+0x168>)
 800fef0:	484c      	ldr	r0, [pc, #304]	@ (8010024 <tcp_abandon+0x164>)
 800fef2:	f00b f8a5 	bl	801b040 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	7d1b      	ldrb	r3, [r3, #20]
 800fefa:	2b0a      	cmp	r3, #10
 800fefc:	d107      	bne.n	800ff0e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fefe:	6879      	ldr	r1, [r7, #4]
 800ff00:	484a      	ldr	r0, [pc, #296]	@ (801002c <tcp_abandon+0x16c>)
 800ff02:	f000 ffc9 	bl	8010e98 <tcp_pcb_remove>
    tcp_free(pcb);
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff fdb0 	bl	800fa6c <tcp_free>
 800ff0c:	e082      	b.n	8010014 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ff12:	2300      	movs	r3, #0
 800ff14:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff1a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff20:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff28:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	691b      	ldr	r3, [r3, #16]
 800ff2e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	7d1b      	ldrb	r3, [r3, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d126      	bne.n	800ff86 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	8adb      	ldrh	r3, [r3, #22]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d02e      	beq.n	800ff9e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ff40:	4b3b      	ldr	r3, [pc, #236]	@ (8010030 <tcp_abandon+0x170>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	687a      	ldr	r2, [r7, #4]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d105      	bne.n	800ff56 <tcp_abandon+0x96>
 800ff4a:	4b39      	ldr	r3, [pc, #228]	@ (8010030 <tcp_abandon+0x170>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	68db      	ldr	r3, [r3, #12]
 800ff50:	4a37      	ldr	r2, [pc, #220]	@ (8010030 <tcp_abandon+0x170>)
 800ff52:	6013      	str	r3, [r2, #0]
 800ff54:	e013      	b.n	800ff7e <tcp_abandon+0xbe>
 800ff56:	4b36      	ldr	r3, [pc, #216]	@ (8010030 <tcp_abandon+0x170>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	61fb      	str	r3, [r7, #28]
 800ff5c:	e00c      	b.n	800ff78 <tcp_abandon+0xb8>
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d104      	bne.n	800ff72 <tcp_abandon+0xb2>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68da      	ldr	r2, [r3, #12]
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	60da      	str	r2, [r3, #12]
 800ff70:	e005      	b.n	800ff7e <tcp_abandon+0xbe>
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	61fb      	str	r3, [r7, #28]
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1ef      	bne.n	800ff5e <tcp_abandon+0x9e>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	60da      	str	r2, [r3, #12]
 800ff84:	e00b      	b.n	800ff9e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	8adb      	ldrh	r3, [r3, #22]
 800ff8e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ff90:	6879      	ldr	r1, [r7, #4]
 800ff92:	4828      	ldr	r0, [pc, #160]	@ (8010034 <tcp_abandon+0x174>)
 800ff94:	f000 ff80 	bl	8010e98 <tcp_pcb_remove>
 800ff98:	4b27      	ldr	r3, [pc, #156]	@ (8010038 <tcp_abandon+0x178>)
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d004      	beq.n	800ffb0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f000 fd22 	bl	80109f4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d004      	beq.n	800ffc2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f000 fd19 	bl	80109f4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d004      	beq.n	800ffd4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 fd10 	bl	80109f4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ffd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d00e      	beq.n	800fff8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ffda:	6879      	ldr	r1, [r7, #4]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	3304      	adds	r3, #4
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	8b12      	ldrh	r2, [r2, #24]
 800ffe4:	9202      	str	r2, [sp, #8]
 800ffe6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ffe8:	9201      	str	r2, [sp, #4]
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	460b      	mov	r3, r1
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	69b9      	ldr	r1, [r7, #24]
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f004 fd0e 	bl	8014a14 <tcp_rst>
    }
    last_state = pcb->state;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	7d1b      	ldrb	r3, [r3, #20]
 800fffc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7ff fd34 	bl	800fa6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d004      	beq.n	8010014 <tcp_abandon+0x154>
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	f06f 010c 	mvn.w	r1, #12
 8010010:	68f8      	ldr	r0, [r7, #12]
 8010012:	4798      	blx	r3
  }
}
 8010014:	3728      	adds	r7, #40	@ 0x28
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	0801e544 	.word	0x0801e544
 8010020:	0801e688 	.word	0x0801e688
 8010024:	0801e588 	.word	0x0801e588
 8010028:	0801e6a4 	.word	0x0801e6a4
 801002c:	20013d80 	.word	0x20013d80
 8010030:	20013d74 	.word	0x20013d74
 8010034:	20013d7c 	.word	0x20013d7c
 8010038:	20013d84 	.word	0x20013d84

0801003c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010044:	2101      	movs	r1, #1
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff ff3a 	bl	800fec0 <tcp_abandon>
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b084      	sub	sp, #16
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d106      	bne.n	8010070 <tcp_update_rcv_ann_wnd+0x1c>
 8010062:	4b25      	ldr	r3, [pc, #148]	@ (80100f8 <tcp_update_rcv_ann_wnd+0xa4>)
 8010064:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8010068:	4924      	ldr	r1, [pc, #144]	@ (80100fc <tcp_update_rcv_ann_wnd+0xa8>)
 801006a:	4825      	ldr	r0, [pc, #148]	@ (8010100 <tcp_update_rcv_ann_wnd+0xac>)
 801006c:	f00a ffe8 	bl	801b040 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010074:	687a      	ldr	r2, [r7, #4]
 8010076:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010078:	4413      	add	r3, r2
 801007a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8010084:	f241 61d0 	movw	r1, #5840	@ 0x16d0
 8010088:	428a      	cmp	r2, r1
 801008a:	bf28      	it	cs
 801008c:	460a      	movcs	r2, r1
 801008e:	b292      	uxth	r2, r2
 8010090:	4413      	add	r3, r2
 8010092:	68fa      	ldr	r2, [r7, #12]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	2b00      	cmp	r3, #0
 8010098:	db08      	blt.n	80100ac <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a6:	68fa      	ldr	r2, [r7, #12]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	e020      	b.n	80100ee <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	dd03      	ble.n	80100c2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80100c0:	e014      	b.n	80100ec <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80100d4:	d306      	bcc.n	80100e4 <tcp_update_rcv_ann_wnd+0x90>
 80100d6:	4b08      	ldr	r3, [pc, #32]	@ (80100f8 <tcp_update_rcv_ann_wnd+0xa4>)
 80100d8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80100dc:	4909      	ldr	r1, [pc, #36]	@ (8010104 <tcp_update_rcv_ann_wnd+0xb0>)
 80100de:	4808      	ldr	r0, [pc, #32]	@ (8010100 <tcp_update_rcv_ann_wnd+0xac>)
 80100e0:	f00a ffae 	bl	801b040 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80100ec:	2300      	movs	r3, #0
  }
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	0801e544 	.word	0x0801e544
 80100fc:	0801e7a0 	.word	0x0801e7a0
 8010100:	0801e588 	.word	0x0801e588
 8010104:	0801e7c4 	.word	0x0801e7c4

08010108 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	460b      	mov	r3, r1
 8010112:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d107      	bne.n	801012a <tcp_recved+0x22>
 801011a:	4b20      	ldr	r3, [pc, #128]	@ (801019c <tcp_recved+0x94>)
 801011c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010120:	491f      	ldr	r1, [pc, #124]	@ (80101a0 <tcp_recved+0x98>)
 8010122:	4820      	ldr	r0, [pc, #128]	@ (80101a4 <tcp_recved+0x9c>)
 8010124:	f00a ff8c 	bl	801b040 <iprintf>
 8010128:	e034      	b.n	8010194 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	7d1b      	ldrb	r3, [r3, #20]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d106      	bne.n	8010140 <tcp_recved+0x38>
 8010132:	4b1a      	ldr	r3, [pc, #104]	@ (801019c <tcp_recved+0x94>)
 8010134:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8010138:	491b      	ldr	r1, [pc, #108]	@ (80101a8 <tcp_recved+0xa0>)
 801013a:	481a      	ldr	r0, [pc, #104]	@ (80101a4 <tcp_recved+0x9c>)
 801013c:	f00a ff80 	bl	801b040 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010144:	887b      	ldrh	r3, [r7, #2]
 8010146:	4413      	add	r3, r2
 8010148:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801014a:	89fb      	ldrh	r3, [r7, #14]
 801014c:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010150:	4293      	cmp	r3, r2
 8010152:	d804      	bhi.n	801015e <tcp_recved+0x56>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010158:	89fa      	ldrh	r2, [r7, #14]
 801015a:	429a      	cmp	r2, r3
 801015c:	d204      	bcs.n	8010168 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010164:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010166:	e002      	b.n	801016e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	89fa      	ldrh	r2, [r7, #14]
 801016c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff ff70 	bl	8010054 <tcp_update_rcv_ann_wnd>
 8010174:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	f640 3267 	movw	r2, #2919	@ 0xb67
 801017c:	4293      	cmp	r3, r2
 801017e:	d909      	bls.n	8010194 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	8b5b      	ldrh	r3, [r3, #26]
 8010184:	f043 0302 	orr.w	r3, r3, #2
 8010188:	b29a      	uxth	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f003 fe5e 	bl	8013e50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	0801e544 	.word	0x0801e544
 80101a0:	0801e7e0 	.word	0x0801e7e0
 80101a4:	0801e588 	.word	0x0801e588
 80101a8:	0801e7f8 	.word	0x0801e7f8

080101ac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80101ac:	b5b0      	push	{r4, r5, r7, lr}
 80101ae:	b090      	sub	sp, #64	@ 0x40
 80101b0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80101b8:	4b95      	ldr	r3, [pc, #596]	@ (8010410 <tcp_slowtmr+0x264>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	3301      	adds	r3, #1
 80101be:	4a94      	ldr	r2, [pc, #592]	@ (8010410 <tcp_slowtmr+0x264>)
 80101c0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80101c2:	4b94      	ldr	r3, [pc, #592]	@ (8010414 <tcp_slowtmr+0x268>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	3301      	adds	r3, #1
 80101c8:	b2da      	uxtb	r2, r3
 80101ca:	4b92      	ldr	r3, [pc, #584]	@ (8010414 <tcp_slowtmr+0x268>)
 80101cc:	701a      	strb	r2, [r3, #0]
 80101ce:	e000      	b.n	80101d2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80101d0:	bf00      	nop
  prev = NULL;
 80101d2:	2300      	movs	r3, #0
 80101d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80101d6:	4b90      	ldr	r3, [pc, #576]	@ (8010418 <tcp_slowtmr+0x26c>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80101dc:	e29f      	b.n	801071e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80101de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101e0:	7d1b      	ldrb	r3, [r3, #20]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d106      	bne.n	80101f4 <tcp_slowtmr+0x48>
 80101e6:	4b8d      	ldr	r3, [pc, #564]	@ (801041c <tcp_slowtmr+0x270>)
 80101e8:	f240 42be 	movw	r2, #1214	@ 0x4be
 80101ec:	498c      	ldr	r1, [pc, #560]	@ (8010420 <tcp_slowtmr+0x274>)
 80101ee:	488d      	ldr	r0, [pc, #564]	@ (8010424 <tcp_slowtmr+0x278>)
 80101f0:	f00a ff26 	bl	801b040 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80101f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101f6:	7d1b      	ldrb	r3, [r3, #20]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d106      	bne.n	801020a <tcp_slowtmr+0x5e>
 80101fc:	4b87      	ldr	r3, [pc, #540]	@ (801041c <tcp_slowtmr+0x270>)
 80101fe:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8010202:	4989      	ldr	r1, [pc, #548]	@ (8010428 <tcp_slowtmr+0x27c>)
 8010204:	4887      	ldr	r0, [pc, #540]	@ (8010424 <tcp_slowtmr+0x278>)
 8010206:	f00a ff1b 	bl	801b040 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801020a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020c:	7d1b      	ldrb	r3, [r3, #20]
 801020e:	2b0a      	cmp	r3, #10
 8010210:	d106      	bne.n	8010220 <tcp_slowtmr+0x74>
 8010212:	4b82      	ldr	r3, [pc, #520]	@ (801041c <tcp_slowtmr+0x270>)
 8010214:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8010218:	4984      	ldr	r1, [pc, #528]	@ (801042c <tcp_slowtmr+0x280>)
 801021a:	4882      	ldr	r0, [pc, #520]	@ (8010424 <tcp_slowtmr+0x278>)
 801021c:	f00a ff10 	bl	801b040 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010222:	7f9a      	ldrb	r2, [r3, #30]
 8010224:	4b7b      	ldr	r3, [pc, #492]	@ (8010414 <tcp_slowtmr+0x268>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	429a      	cmp	r2, r3
 801022a:	d105      	bne.n	8010238 <tcp_slowtmr+0x8c>
      prev = pcb;
 801022c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8010236:	e272      	b.n	801071e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8010238:	4b76      	ldr	r3, [pc, #472]	@ (8010414 <tcp_slowtmr+0x268>)
 801023a:	781a      	ldrb	r2, [r3, #0]
 801023c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010240:	2300      	movs	r3, #0
 8010242:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8010246:	2300      	movs	r3, #0
 8010248:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801024c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024e:	7d1b      	ldrb	r3, [r3, #20]
 8010250:	2b02      	cmp	r3, #2
 8010252:	d10a      	bne.n	801026a <tcp_slowtmr+0xbe>
 8010254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801025a:	2b05      	cmp	r3, #5
 801025c:	d905      	bls.n	801026a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801025e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010262:	3301      	adds	r3, #1
 8010264:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8010268:	e11e      	b.n	80104a8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801026a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010270:	2b0b      	cmp	r3, #11
 8010272:	d905      	bls.n	8010280 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8010274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010278:	3301      	adds	r3, #1
 801027a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801027e:	e113      	b.n	80104a8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8010280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010282:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010286:	2b00      	cmp	r3, #0
 8010288:	d075      	beq.n	8010376 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801028a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801028e:	2b00      	cmp	r3, #0
 8010290:	d006      	beq.n	80102a0 <tcp_slowtmr+0xf4>
 8010292:	4b62      	ldr	r3, [pc, #392]	@ (801041c <tcp_slowtmr+0x270>)
 8010294:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8010298:	4965      	ldr	r1, [pc, #404]	@ (8010430 <tcp_slowtmr+0x284>)
 801029a:	4862      	ldr	r0, [pc, #392]	@ (8010424 <tcp_slowtmr+0x278>)
 801029c:	f00a fed0 	bl	801b040 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80102a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d106      	bne.n	80102b6 <tcp_slowtmr+0x10a>
 80102a8:	4b5c      	ldr	r3, [pc, #368]	@ (801041c <tcp_slowtmr+0x270>)
 80102aa:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80102ae:	4961      	ldr	r1, [pc, #388]	@ (8010434 <tcp_slowtmr+0x288>)
 80102b0:	485c      	ldr	r0, [pc, #368]	@ (8010424 <tcp_slowtmr+0x278>)
 80102b2:	f00a fec5 	bl	801b040 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80102b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80102bc:	2b0b      	cmp	r3, #11
 80102be:	d905      	bls.n	80102cc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80102c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102c4:	3301      	adds	r3, #1
 80102c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80102ca:	e0ed      	b.n	80104a8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80102cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80102d2:	3b01      	subs	r3, #1
 80102d4:	4a58      	ldr	r2, [pc, #352]	@ (8010438 <tcp_slowtmr+0x28c>)
 80102d6:	5cd3      	ldrb	r3, [r2, r3]
 80102d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80102da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80102e0:	7c7a      	ldrb	r2, [r7, #17]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d907      	bls.n	80102f6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80102e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102e8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80102ec:	3301      	adds	r3, #1
 80102ee:	b2da      	uxtb	r2, r3
 80102f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80102f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102f8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80102fc:	7c7a      	ldrb	r2, [r7, #17]
 80102fe:	429a      	cmp	r2, r3
 8010300:	f200 80d2 	bhi.w	80104a8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8010304:	2301      	movs	r3, #1
 8010306:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8010308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801030a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801030e:	2b00      	cmp	r3, #0
 8010310:	d108      	bne.n	8010324 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010312:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010314:	f004 fc72 	bl	8014bfc <tcp_zero_window_probe>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d014      	beq.n	8010348 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801031e:	2300      	movs	r3, #0
 8010320:	623b      	str	r3, [r7, #32]
 8010322:	e011      	b.n	8010348 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801032a:	4619      	mov	r1, r3
 801032c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801032e:	f003 fb05 	bl	801393c <tcp_split_unsent_seg>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d107      	bne.n	8010348 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8010338:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801033a:	f003 fd89 	bl	8013e50 <tcp_output>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d101      	bne.n	8010348 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	2b00      	cmp	r3, #0
 801034c:	f000 80ac 	beq.w	80104a8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010352:	2200      	movs	r2, #0
 8010354:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801035a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801035e:	2b06      	cmp	r3, #6
 8010360:	f200 80a2 	bhi.w	80104a8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010366:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801036a:	3301      	adds	r3, #1
 801036c:	b2da      	uxtb	r2, r3
 801036e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010370:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010374:	e098      	b.n	80104a8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010378:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801037c:	2b00      	cmp	r3, #0
 801037e:	db0f      	blt.n	80103a0 <tcp_slowtmr+0x1f4>
 8010380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010382:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010386:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801038a:	4293      	cmp	r3, r2
 801038c:	d008      	beq.n	80103a0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801038e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010390:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010394:	b29b      	uxth	r3, r3
 8010396:	3301      	adds	r3, #1
 8010398:	b29b      	uxth	r3, r3
 801039a:	b21a      	sxth	r2, r3
 801039c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80103a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80103a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80103ac:	429a      	cmp	r2, r3
 80103ae:	db7b      	blt.n	80104a8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80103b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80103b2:	f004 f855 	bl	8014460 <tcp_rexmit_rto_prepare>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d007      	beq.n	80103cc <tcp_slowtmr+0x220>
 80103bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d171      	bne.n	80104a8 <tcp_slowtmr+0x2fc>
 80103c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d06d      	beq.n	80104a8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80103cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ce:	7d1b      	ldrb	r3, [r3, #20]
 80103d0:	2b02      	cmp	r3, #2
 80103d2:	d03a      	beq.n	801044a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80103d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80103da:	2b0c      	cmp	r3, #12
 80103dc:	bf28      	it	cs
 80103de:	230c      	movcs	r3, #12
 80103e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80103e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80103e8:	10db      	asrs	r3, r3, #3
 80103ea:	b21b      	sxth	r3, r3
 80103ec:	461a      	mov	r2, r3
 80103ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80103f4:	4413      	add	r3, r2
 80103f6:	7efa      	ldrb	r2, [r7, #27]
 80103f8:	4910      	ldr	r1, [pc, #64]	@ (801043c <tcp_slowtmr+0x290>)
 80103fa:	5c8a      	ldrb	r2, [r1, r2]
 80103fc:	4093      	lsls	r3, r2
 80103fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8010406:	4293      	cmp	r3, r2
 8010408:	dc1a      	bgt.n	8010440 <tcp_slowtmr+0x294>
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	b21a      	sxth	r2, r3
 801040e:	e019      	b.n	8010444 <tcp_slowtmr+0x298>
 8010410:	20013d70 	.word	0x20013d70
 8010414:	20013d86 	.word	0x20013d86
 8010418:	20013d7c 	.word	0x20013d7c
 801041c:	0801e544 	.word	0x0801e544
 8010420:	0801e888 	.word	0x0801e888
 8010424:	0801e588 	.word	0x0801e588
 8010428:	0801e8b4 	.word	0x0801e8b4
 801042c:	0801e8e0 	.word	0x0801e8e0
 8010430:	0801e910 	.word	0x0801e910
 8010434:	0801e944 	.word	0x0801e944
 8010438:	0806c608 	.word	0x0806c608
 801043c:	0806c5f8 	.word	0x0806c5f8
 8010440:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010446:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801044a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801044c:	2200      	movs	r2, #0
 801044e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010452:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010458:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801045c:	4293      	cmp	r3, r2
 801045e:	bf28      	it	cs
 8010460:	4613      	movcs	r3, r2
 8010462:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010464:	8a7b      	ldrh	r3, [r7, #18]
 8010466:	085b      	lsrs	r3, r3, #1
 8010468:	b29a      	uxth	r2, r3
 801046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010472:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010478:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	b29b      	uxth	r3, r3
 801047e:	429a      	cmp	r2, r3
 8010480:	d206      	bcs.n	8010490 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010486:	005b      	lsls	r3, r3, #1
 8010488:	b29a      	uxth	r2, r3
 801048a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801048c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010492:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010496:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801049a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801049c:	2200      	movs	r2, #0
 801049e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80104a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80104a4:	f004 f856 	bl	8014554 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80104a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104aa:	7d1b      	ldrb	r3, [r3, #20]
 80104ac:	2b06      	cmp	r3, #6
 80104ae:	d111      	bne.n	80104d4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80104b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104b2:	8b5b      	ldrh	r3, [r3, #26]
 80104b4:	f003 0310 	and.w	r3, r3, #16
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00b      	beq.n	80104d4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104bc:	4b9d      	ldr	r3, [pc, #628]	@ (8010734 <tcp_slowtmr+0x588>)
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104c2:	6a1b      	ldr	r3, [r3, #32]
 80104c4:	1ad3      	subs	r3, r2, r3
 80104c6:	2b28      	cmp	r3, #40	@ 0x28
 80104c8:	d904      	bls.n	80104d4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80104ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80104ce:	3301      	adds	r3, #1
 80104d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104d6:	7a5b      	ldrb	r3, [r3, #9]
 80104d8:	f003 0308 	and.w	r3, r3, #8
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d04c      	beq.n	801057a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80104e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104e4:	2b04      	cmp	r3, #4
 80104e6:	d003      	beq.n	80104f0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80104e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80104ec:	2b07      	cmp	r3, #7
 80104ee:	d144      	bne.n	801057a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104f0:	4b90      	ldr	r3, [pc, #576]	@ (8010734 <tcp_slowtmr+0x588>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104f6:	6a1b      	ldr	r3, [r3, #32]
 80104f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80104fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010500:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8010504:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8010508:	498b      	ldr	r1, [pc, #556]	@ (8010738 <tcp_slowtmr+0x58c>)
 801050a:	fba1 1303 	umull	r1, r3, r1, r3
 801050e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010510:	429a      	cmp	r2, r3
 8010512:	d90a      	bls.n	801052a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8010514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010518:	3301      	adds	r3, #1
 801051a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801051e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010522:	3301      	adds	r3, #1
 8010524:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010528:	e027      	b.n	801057a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801052a:	4b82      	ldr	r3, [pc, #520]	@ (8010734 <tcp_slowtmr+0x588>)
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010536:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801053a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801053c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010540:	4618      	mov	r0, r3
 8010542:	4b7e      	ldr	r3, [pc, #504]	@ (801073c <tcp_slowtmr+0x590>)
 8010544:	fb00 f303 	mul.w	r3, r0, r3
 8010548:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801054a:	497b      	ldr	r1, [pc, #492]	@ (8010738 <tcp_slowtmr+0x58c>)
 801054c:	fba1 1303 	umull	r1, r3, r1, r3
 8010550:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010552:	429a      	cmp	r2, r3
 8010554:	d911      	bls.n	801057a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8010556:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010558:	f004 fb10 	bl	8014b7c <tcp_keepalive>
 801055c:	4603      	mov	r3, r0
 801055e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010562:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010566:	2b00      	cmp	r3, #0
 8010568:	d107      	bne.n	801057a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 801056a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010570:	3301      	adds	r3, #1
 8010572:	b2da      	uxtb	r2, r3
 8010574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010576:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801057a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801057c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801057e:	2b00      	cmp	r3, #0
 8010580:	d011      	beq.n	80105a6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010582:	4b6c      	ldr	r3, [pc, #432]	@ (8010734 <tcp_slowtmr+0x588>)
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010588:	6a1b      	ldr	r3, [r3, #32]
 801058a:	1ad2      	subs	r2, r2, r3
 801058c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801058e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010592:	4619      	mov	r1, r3
 8010594:	460b      	mov	r3, r1
 8010596:	005b      	lsls	r3, r3, #1
 8010598:	440b      	add	r3, r1
 801059a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801059c:	429a      	cmp	r2, r3
 801059e:	d302      	bcc.n	80105a6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80105a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105a2:	f000 fddd 	bl	8011160 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80105a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105a8:	7d1b      	ldrb	r3, [r3, #20]
 80105aa:	2b03      	cmp	r3, #3
 80105ac:	d10b      	bne.n	80105c6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105ae:	4b61      	ldr	r3, [pc, #388]	@ (8010734 <tcp_slowtmr+0x588>)
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105b4:	6a1b      	ldr	r3, [r3, #32]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	2b28      	cmp	r3, #40	@ 0x28
 80105ba:	d904      	bls.n	80105c6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80105bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105c0:	3301      	adds	r3, #1
 80105c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80105c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105c8:	7d1b      	ldrb	r3, [r3, #20]
 80105ca:	2b09      	cmp	r3, #9
 80105cc:	d10b      	bne.n	80105e6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80105ce:	4b59      	ldr	r3, [pc, #356]	@ (8010734 <tcp_slowtmr+0x588>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105d4:	6a1b      	ldr	r3, [r3, #32]
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	2bf0      	cmp	r3, #240	@ 0xf0
 80105da:	d904      	bls.n	80105e6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80105dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105e0:	3301      	adds	r3, #1
 80105e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80105e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d060      	beq.n	80106b0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80105ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80105f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80105f4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80105f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80105f8:	f000 fbfe 	bl	8010df8 <tcp_pcb_purge>
      if (prev != NULL) {
 80105fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d010      	beq.n	8010624 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010602:	4b4f      	ldr	r3, [pc, #316]	@ (8010740 <tcp_slowtmr+0x594>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010608:	429a      	cmp	r2, r3
 801060a:	d106      	bne.n	801061a <tcp_slowtmr+0x46e>
 801060c:	4b4d      	ldr	r3, [pc, #308]	@ (8010744 <tcp_slowtmr+0x598>)
 801060e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010612:	494d      	ldr	r1, [pc, #308]	@ (8010748 <tcp_slowtmr+0x59c>)
 8010614:	484d      	ldr	r0, [pc, #308]	@ (801074c <tcp_slowtmr+0x5a0>)
 8010616:	f00a fd13 	bl	801b040 <iprintf>
        prev->next = pcb->next;
 801061a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801061c:	68da      	ldr	r2, [r3, #12]
 801061e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010620:	60da      	str	r2, [r3, #12]
 8010622:	e00f      	b.n	8010644 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010624:	4b46      	ldr	r3, [pc, #280]	@ (8010740 <tcp_slowtmr+0x594>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801062a:	429a      	cmp	r2, r3
 801062c:	d006      	beq.n	801063c <tcp_slowtmr+0x490>
 801062e:	4b45      	ldr	r3, [pc, #276]	@ (8010744 <tcp_slowtmr+0x598>)
 8010630:	f240 5271 	movw	r2, #1393	@ 0x571
 8010634:	4946      	ldr	r1, [pc, #280]	@ (8010750 <tcp_slowtmr+0x5a4>)
 8010636:	4845      	ldr	r0, [pc, #276]	@ (801074c <tcp_slowtmr+0x5a0>)
 8010638:	f00a fd02 	bl	801b040 <iprintf>
        tcp_active_pcbs = pcb->next;
 801063c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	4a3f      	ldr	r2, [pc, #252]	@ (8010740 <tcp_slowtmr+0x594>)
 8010642:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010648:	2b00      	cmp	r3, #0
 801064a:	d013      	beq.n	8010674 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010652:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010654:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010658:	3304      	adds	r3, #4
 801065a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801065c:	8ad2      	ldrh	r2, [r2, #22]
 801065e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010660:	8b09      	ldrh	r1, [r1, #24]
 8010662:	9102      	str	r1, [sp, #8]
 8010664:	9201      	str	r2, [sp, #4]
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	462b      	mov	r3, r5
 801066a:	4622      	mov	r2, r4
 801066c:	4601      	mov	r1, r0
 801066e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010670:	f004 f9d0 	bl	8014a14 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801067a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801067c:	7d1b      	ldrb	r3, [r3, #20]
 801067e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010682:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801068a:	6838      	ldr	r0, [r7, #0]
 801068c:	f7ff f9ee 	bl	800fa6c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010690:	4b30      	ldr	r3, [pc, #192]	@ (8010754 <tcp_slowtmr+0x5a8>)
 8010692:	2200      	movs	r2, #0
 8010694:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d004      	beq.n	80106a6 <tcp_slowtmr+0x4fa>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	f06f 010c 	mvn.w	r1, #12
 80106a2:	68b8      	ldr	r0, [r7, #8]
 80106a4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80106a6:	4b2b      	ldr	r3, [pc, #172]	@ (8010754 <tcp_slowtmr+0x5a8>)
 80106a8:	781b      	ldrb	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d037      	beq.n	801071e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80106ae:	e590      	b.n	80101d2 <tcp_slowtmr+0x26>
      prev = pcb;
 80106b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80106b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80106ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106bc:	7f1b      	ldrb	r3, [r3, #28]
 80106be:	3301      	adds	r3, #1
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80106c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106c8:	7f1a      	ldrb	r2, [r3, #28]
 80106ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106cc:	7f5b      	ldrb	r3, [r3, #29]
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d325      	bcc.n	801071e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80106d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106d4:	2200      	movs	r2, #0
 80106d6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80106d8:	4b1e      	ldr	r3, [pc, #120]	@ (8010754 <tcp_slowtmr+0x5a8>)
 80106da:	2200      	movs	r2, #0
 80106dc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80106de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00b      	beq.n	8010700 <tcp_slowtmr+0x554>
 80106e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80106ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106f0:	6912      	ldr	r2, [r2, #16]
 80106f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106f4:	4610      	mov	r0, r2
 80106f6:	4798      	blx	r3
 80106f8:	4603      	mov	r3, r0
 80106fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80106fe:	e002      	b.n	8010706 <tcp_slowtmr+0x55a>
 8010700:	2300      	movs	r3, #0
 8010702:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010706:	4b13      	ldr	r3, [pc, #76]	@ (8010754 <tcp_slowtmr+0x5a8>)
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	f47f ad60 	bne.w	80101d0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010710:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8010718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801071a:	f003 fb99 	bl	8013e50 <tcp_output>
  while (pcb != NULL) {
 801071e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010720:	2b00      	cmp	r3, #0
 8010722:	f47f ad5c 	bne.w	80101de <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010726:	2300      	movs	r3, #0
 8010728:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801072a:	4b0b      	ldr	r3, [pc, #44]	@ (8010758 <tcp_slowtmr+0x5ac>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010730:	e067      	b.n	8010802 <tcp_slowtmr+0x656>
 8010732:	bf00      	nop
 8010734:	20013d70 	.word	0x20013d70
 8010738:	10624dd3 	.word	0x10624dd3
 801073c:	000124f8 	.word	0x000124f8
 8010740:	20013d7c 	.word	0x20013d7c
 8010744:	0801e544 	.word	0x0801e544
 8010748:	0801e97c 	.word	0x0801e97c
 801074c:	0801e588 	.word	0x0801e588
 8010750:	0801e9a8 	.word	0x0801e9a8
 8010754:	20013d84 	.word	0x20013d84
 8010758:	20013d80 	.word	0x20013d80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801075c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075e:	7d1b      	ldrb	r3, [r3, #20]
 8010760:	2b0a      	cmp	r3, #10
 8010762:	d006      	beq.n	8010772 <tcp_slowtmr+0x5c6>
 8010764:	4b2b      	ldr	r3, [pc, #172]	@ (8010814 <tcp_slowtmr+0x668>)
 8010766:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801076a:	492b      	ldr	r1, [pc, #172]	@ (8010818 <tcp_slowtmr+0x66c>)
 801076c:	482b      	ldr	r0, [pc, #172]	@ (801081c <tcp_slowtmr+0x670>)
 801076e:	f00a fc67 	bl	801b040 <iprintf>
    pcb_remove = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010778:	4b29      	ldr	r3, [pc, #164]	@ (8010820 <tcp_slowtmr+0x674>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801077e:	6a1b      	ldr	r3, [r3, #32]
 8010780:	1ad3      	subs	r3, r2, r3
 8010782:	2bf0      	cmp	r3, #240	@ 0xf0
 8010784:	d904      	bls.n	8010790 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010786:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801078a:	3301      	adds	r3, #1
 801078c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010794:	2b00      	cmp	r3, #0
 8010796:	d02f      	beq.n	80107f8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010798:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801079a:	f000 fb2d 	bl	8010df8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801079e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d010      	beq.n	80107c6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80107a4:	4b1f      	ldr	r3, [pc, #124]	@ (8010824 <tcp_slowtmr+0x678>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d106      	bne.n	80107bc <tcp_slowtmr+0x610>
 80107ae:	4b19      	ldr	r3, [pc, #100]	@ (8010814 <tcp_slowtmr+0x668>)
 80107b0:	f240 52af 	movw	r2, #1455	@ 0x5af
 80107b4:	491c      	ldr	r1, [pc, #112]	@ (8010828 <tcp_slowtmr+0x67c>)
 80107b6:	4819      	ldr	r0, [pc, #100]	@ (801081c <tcp_slowtmr+0x670>)
 80107b8:	f00a fc42 	bl	801b040 <iprintf>
        prev->next = pcb->next;
 80107bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107be:	68da      	ldr	r2, [r3, #12]
 80107c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c2:	60da      	str	r2, [r3, #12]
 80107c4:	e00f      	b.n	80107e6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80107c6:	4b17      	ldr	r3, [pc, #92]	@ (8010824 <tcp_slowtmr+0x678>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d006      	beq.n	80107de <tcp_slowtmr+0x632>
 80107d0:	4b10      	ldr	r3, [pc, #64]	@ (8010814 <tcp_slowtmr+0x668>)
 80107d2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80107d6:	4915      	ldr	r1, [pc, #84]	@ (801082c <tcp_slowtmr+0x680>)
 80107d8:	4810      	ldr	r0, [pc, #64]	@ (801081c <tcp_slowtmr+0x670>)
 80107da:	f00a fc31 	bl	801b040 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80107de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e0:	68db      	ldr	r3, [r3, #12]
 80107e2:	4a10      	ldr	r2, [pc, #64]	@ (8010824 <tcp_slowtmr+0x678>)
 80107e4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80107e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107e8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80107ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80107f0:	69f8      	ldr	r0, [r7, #28]
 80107f2:	f7ff f93b 	bl	800fa6c <tcp_free>
 80107f6:	e004      	b.n	8010802 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80107f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80107fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1a9      	bne.n	801075c <tcp_slowtmr+0x5b0>
    }
  }
}
 8010808:	bf00      	nop
 801080a:	bf00      	nop
 801080c:	3730      	adds	r7, #48	@ 0x30
 801080e:	46bd      	mov	sp, r7
 8010810:	bdb0      	pop	{r4, r5, r7, pc}
 8010812:	bf00      	nop
 8010814:	0801e544 	.word	0x0801e544
 8010818:	0801e9d4 	.word	0x0801e9d4
 801081c:	0801e588 	.word	0x0801e588
 8010820:	20013d70 	.word	0x20013d70
 8010824:	20013d80 	.word	0x20013d80
 8010828:	0801ea04 	.word	0x0801ea04
 801082c:	0801ea2c 	.word	0x0801ea2c

08010830 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b082      	sub	sp, #8
 8010834:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010836:	4b2d      	ldr	r3, [pc, #180]	@ (80108ec <tcp_fasttmr+0xbc>)
 8010838:	781b      	ldrb	r3, [r3, #0]
 801083a:	3301      	adds	r3, #1
 801083c:	b2da      	uxtb	r2, r3
 801083e:	4b2b      	ldr	r3, [pc, #172]	@ (80108ec <tcp_fasttmr+0xbc>)
 8010840:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010842:	4b2b      	ldr	r3, [pc, #172]	@ (80108f0 <tcp_fasttmr+0xc0>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010848:	e048      	b.n	80108dc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7f9a      	ldrb	r2, [r3, #30]
 801084e:	4b27      	ldr	r3, [pc, #156]	@ (80108ec <tcp_fasttmr+0xbc>)
 8010850:	781b      	ldrb	r3, [r3, #0]
 8010852:	429a      	cmp	r2, r3
 8010854:	d03f      	beq.n	80108d6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010856:	4b25      	ldr	r3, [pc, #148]	@ (80108ec <tcp_fasttmr+0xbc>)
 8010858:	781a      	ldrb	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	8b5b      	ldrh	r3, [r3, #26]
 8010862:	f003 0301 	and.w	r3, r3, #1
 8010866:	2b00      	cmp	r3, #0
 8010868:	d010      	beq.n	801088c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	8b5b      	ldrh	r3, [r3, #26]
 801086e:	f043 0302 	orr.w	r3, r3, #2
 8010872:	b29a      	uxth	r2, r3
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f003 fae9 	bl	8013e50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	8b5b      	ldrh	r3, [r3, #26]
 8010882:	f023 0303 	bic.w	r3, r3, #3
 8010886:	b29a      	uxth	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	8b5b      	ldrh	r3, [r3, #26]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b00      	cmp	r3, #0
 8010896:	d009      	beq.n	80108ac <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	8b5b      	ldrh	r3, [r3, #26]
 801089c:	f023 0308 	bic.w	r3, r3, #8
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff fa74 	bl	800fd94 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00a      	beq.n	80108d0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80108ba:	4b0e      	ldr	r3, [pc, #56]	@ (80108f4 <tcp_fasttmr+0xc4>)
 80108bc:	2200      	movs	r2, #0
 80108be:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f000 f819 	bl	80108f8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80108c6:	4b0b      	ldr	r3, [pc, #44]	@ (80108f4 <tcp_fasttmr+0xc4>)
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d000      	beq.n	80108d0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80108ce:	e7b8      	b.n	8010842 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	607b      	str	r3, [r7, #4]
 80108d4:	e002      	b.n	80108dc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1b3      	bne.n	801084a <tcp_fasttmr+0x1a>
    }
  }
}
 80108e2:	bf00      	nop
 80108e4:	bf00      	nop
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	20013d86 	.word	0x20013d86
 80108f0:	20013d7c 	.word	0x20013d7c
 80108f4:	20013d84 	.word	0x20013d84

080108f8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80108f8:	b590      	push	{r4, r7, lr}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d109      	bne.n	801091a <tcp_process_refused_data+0x22>
 8010906:	4b38      	ldr	r3, [pc, #224]	@ (80109e8 <tcp_process_refused_data+0xf0>)
 8010908:	f240 6209 	movw	r2, #1545	@ 0x609
 801090c:	4937      	ldr	r1, [pc, #220]	@ (80109ec <tcp_process_refused_data+0xf4>)
 801090e:	4838      	ldr	r0, [pc, #224]	@ (80109f0 <tcp_process_refused_data+0xf8>)
 8010910:	f00a fb96 	bl	801b040 <iprintf>
 8010914:	f06f 030f 	mvn.w	r3, #15
 8010918:	e061      	b.n	80109de <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801091e:	7b5b      	ldrb	r3, [r3, #13]
 8010920:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010926:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00b      	beq.n	8010950 <tcp_process_refused_data+0x58>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6918      	ldr	r0, [r3, #16]
 8010942:	2300      	movs	r3, #0
 8010944:	68ba      	ldr	r2, [r7, #8]
 8010946:	6879      	ldr	r1, [r7, #4]
 8010948:	47a0      	blx	r4
 801094a:	4603      	mov	r3, r0
 801094c:	73fb      	strb	r3, [r7, #15]
 801094e:	e007      	b.n	8010960 <tcp_process_refused_data+0x68>
 8010950:	2300      	movs	r3, #0
 8010952:	68ba      	ldr	r2, [r7, #8]
 8010954:	6879      	ldr	r1, [r7, #4]
 8010956:	2000      	movs	r0, #0
 8010958:	f000 f8a6 	bl	8010aa8 <tcp_recv_null>
 801095c:	4603      	mov	r3, r0
 801095e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010960:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d12b      	bne.n	80109c0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010968:	7bbb      	ldrb	r3, [r7, #14]
 801096a:	f003 0320 	and.w	r3, r3, #32
 801096e:	2b00      	cmp	r3, #0
 8010970:	d034      	beq.n	80109dc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010976:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801097a:	4293      	cmp	r3, r2
 801097c:	d005      	beq.n	801098a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010982:	3301      	adds	r3, #1
 8010984:	b29a      	uxth	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00b      	beq.n	80109ac <tcp_process_refused_data+0xb4>
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	6918      	ldr	r0, [r3, #16]
 801099e:	2300      	movs	r3, #0
 80109a0:	2200      	movs	r2, #0
 80109a2:	6879      	ldr	r1, [r7, #4]
 80109a4:	47a0      	blx	r4
 80109a6:	4603      	mov	r3, r0
 80109a8:	73fb      	strb	r3, [r7, #15]
 80109aa:	e001      	b.n	80109b0 <tcp_process_refused_data+0xb8>
 80109ac:	2300      	movs	r3, #0
 80109ae:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80109b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109b4:	f113 0f0d 	cmn.w	r3, #13
 80109b8:	d110      	bne.n	80109dc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80109ba:	f06f 030c 	mvn.w	r3, #12
 80109be:	e00e      	b.n	80109de <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80109c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109c4:	f113 0f0d 	cmn.w	r3, #13
 80109c8:	d102      	bne.n	80109d0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80109ca:	f06f 030c 	mvn.w	r3, #12
 80109ce:	e006      	b.n	80109de <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68ba      	ldr	r2, [r7, #8]
 80109d4:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80109d6:	f06f 0304 	mvn.w	r3, #4
 80109da:	e000      	b.n	80109de <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3714      	adds	r7, #20
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd90      	pop	{r4, r7, pc}
 80109e6:	bf00      	nop
 80109e8:	0801e544 	.word	0x0801e544
 80109ec:	0801ea54 	.word	0x0801ea54
 80109f0:	0801e588 	.word	0x0801e588

080109f4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80109fc:	e007      	b.n	8010a0e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f000 f80a 	bl	8010a1e <tcp_seg_free>
    seg = next;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d1f4      	bne.n	80109fe <tcp_segs_free+0xa>
  }
}
 8010a14:	bf00      	nop
 8010a16:	bf00      	nop
 8010a18:	3710      	adds	r7, #16
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	bd80      	pop	{r7, pc}

08010a1e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010a1e:	b580      	push	{r7, lr}
 8010a20:	b082      	sub	sp, #8
 8010a22:	af00      	add	r7, sp, #0
 8010a24:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00c      	beq.n	8010a46 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	685b      	ldr	r3, [r3, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d004      	beq.n	8010a3e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7fe fcc3 	bl	800f3c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010a3e:	6879      	ldr	r1, [r7, #4]
 8010a40:	2003      	movs	r0, #3
 8010a42:	f7fd fe1d 	bl	800e680 <memp_free>
  }
}
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
	...

08010a50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d106      	bne.n	8010a6c <tcp_seg_copy+0x1c>
 8010a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8010a9c <tcp_seg_copy+0x4c>)
 8010a60:	f240 6282 	movw	r2, #1666	@ 0x682
 8010a64:	490e      	ldr	r1, [pc, #56]	@ (8010aa0 <tcp_seg_copy+0x50>)
 8010a66:	480f      	ldr	r0, [pc, #60]	@ (8010aa4 <tcp_seg_copy+0x54>)
 8010a68:	f00a faea 	bl	801b040 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010a6c:	2003      	movs	r0, #3
 8010a6e:	f7fd fdb5 	bl	800e5dc <memp_malloc>
 8010a72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <tcp_seg_copy+0x2e>
    return NULL;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	e00a      	b.n	8010a94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010a7e:	2214      	movs	r2, #20
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f00a fcfb 	bl	801b47e <memcpy>
  pbuf_ref(cseg->p);
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	685b      	ldr	r3, [r3, #4]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7fe fd3f 	bl	800f510 <pbuf_ref>
  return cseg;
 8010a92:	68fb      	ldr	r3, [r7, #12]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	0801e544 	.word	0x0801e544
 8010aa0:	0801ea98 	.word	0x0801ea98
 8010aa4:	0801e588 	.word	0x0801e588

08010aa8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
 8010ab4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d109      	bne.n	8010ad0 <tcp_recv_null+0x28>
 8010abc:	4b12      	ldr	r3, [pc, #72]	@ (8010b08 <tcp_recv_null+0x60>)
 8010abe:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8010ac2:	4912      	ldr	r1, [pc, #72]	@ (8010b0c <tcp_recv_null+0x64>)
 8010ac4:	4812      	ldr	r0, [pc, #72]	@ (8010b10 <tcp_recv_null+0x68>)
 8010ac6:	f00a fabb 	bl	801b040 <iprintf>
 8010aca:	f06f 030f 	mvn.w	r3, #15
 8010ace:	e016      	b.n	8010afe <tcp_recv_null+0x56>

  if (p != NULL) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d009      	beq.n	8010aea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	891b      	ldrh	r3, [r3, #8]
 8010ada:	4619      	mov	r1, r3
 8010adc:	68b8      	ldr	r0, [r7, #8]
 8010ade:	f7ff fb13 	bl	8010108 <tcp_recved>
    pbuf_free(p);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7fe fc6e 	bl	800f3c4 <pbuf_free>
 8010ae8:	e008      	b.n	8010afc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010aea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d104      	bne.n	8010afc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7ff f9b8 	bl	800fe68 <tcp_close>
 8010af8:	4603      	mov	r3, r0
 8010afa:	e000      	b.n	8010afe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010afc:	2300      	movs	r3, #0
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	3710      	adds	r7, #16
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bd80      	pop	{r7, pc}
 8010b06:	bf00      	nop
 8010b08:	0801e544 	.word	0x0801e544
 8010b0c:	0801eab4 	.word	0x0801eab4
 8010b10:	0801e588 	.word	0x0801e588

08010b14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	db01      	blt.n	8010b2a <tcp_kill_prio+0x16>
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	e000      	b.n	8010b2c <tcp_kill_prio+0x18>
 8010b2a:	237f      	movs	r3, #127	@ 0x7f
 8010b2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010b2e:	7afb      	ldrb	r3, [r7, #11]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d034      	beq.n	8010b9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010b34:	7afb      	ldrb	r3, [r7, #11]
 8010b36:	3b01      	subs	r3, #1
 8010b38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b42:	4b19      	ldr	r3, [pc, #100]	@ (8010ba8 <tcp_kill_prio+0x94>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	617b      	str	r3, [r7, #20]
 8010b48:	e01f      	b.n	8010b8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	7d5b      	ldrb	r3, [r3, #21]
 8010b4e:	7afa      	ldrb	r2, [r7, #11]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d80c      	bhi.n	8010b6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010b58:	7afa      	ldrb	r2, [r7, #11]
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d112      	bne.n	8010b84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b5e:	4b13      	ldr	r3, [pc, #76]	@ (8010bac <tcp_kill_prio+0x98>)
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	6a1b      	ldr	r3, [r3, #32]
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d80a      	bhi.n	8010b84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8010bac <tcp_kill_prio+0x98>)
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	1ad3      	subs	r3, r2, r3
 8010b78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	7d5b      	ldrb	r3, [r3, #21]
 8010b82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	617b      	str	r3, [r7, #20]
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1dc      	bne.n	8010b4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d004      	beq.n	8010ba0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010b96:	6938      	ldr	r0, [r7, #16]
 8010b98:	f7ff fa50 	bl	801003c <tcp_abort>
 8010b9c:	e000      	b.n	8010ba0 <tcp_kill_prio+0x8c>
    return;
 8010b9e:	bf00      	nop
  }
}
 8010ba0:	3718      	adds	r7, #24
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	20013d7c 	.word	0x20013d7c
 8010bac:	20013d70 	.word	0x20013d70

08010bb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010bba:	79fb      	ldrb	r3, [r7, #7]
 8010bbc:	2b08      	cmp	r3, #8
 8010bbe:	d009      	beq.n	8010bd4 <tcp_kill_state+0x24>
 8010bc0:	79fb      	ldrb	r3, [r7, #7]
 8010bc2:	2b09      	cmp	r3, #9
 8010bc4:	d006      	beq.n	8010bd4 <tcp_kill_state+0x24>
 8010bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8010c30 <tcp_kill_state+0x80>)
 8010bc8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8010bcc:	4919      	ldr	r1, [pc, #100]	@ (8010c34 <tcp_kill_state+0x84>)
 8010bce:	481a      	ldr	r0, [pc, #104]	@ (8010c38 <tcp_kill_state+0x88>)
 8010bd0:	f00a fa36 	bl	801b040 <iprintf>

  inactivity = 0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bdc:	4b17      	ldr	r3, [pc, #92]	@ (8010c3c <tcp_kill_state+0x8c>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	617b      	str	r3, [r7, #20]
 8010be2:	e017      	b.n	8010c14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	7d1b      	ldrb	r3, [r3, #20]
 8010be8:	79fa      	ldrb	r2, [r7, #7]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d10f      	bne.n	8010c0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010bee:	4b14      	ldr	r3, [pc, #80]	@ (8010c40 <tcp_kill_state+0x90>)
 8010bf0:	681a      	ldr	r2, [r3, #0]
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	6a1b      	ldr	r3, [r3, #32]
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d807      	bhi.n	8010c0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010bfe:	4b10      	ldr	r3, [pc, #64]	@ (8010c40 <tcp_kill_state+0x90>)
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	6a1b      	ldr	r3, [r3, #32]
 8010c06:	1ad3      	subs	r3, r2, r3
 8010c08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	617b      	str	r3, [r7, #20]
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d1e4      	bne.n	8010be4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d003      	beq.n	8010c28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010c20:	2100      	movs	r1, #0
 8010c22:	6938      	ldr	r0, [r7, #16]
 8010c24:	f7ff f94c 	bl	800fec0 <tcp_abandon>
  }
}
 8010c28:	bf00      	nop
 8010c2a:	3718      	adds	r7, #24
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	0801e544 	.word	0x0801e544
 8010c34:	0801ead0 	.word	0x0801ead0
 8010c38:	0801e588 	.word	0x0801e588
 8010c3c:	20013d7c 	.word	0x20013d7c
 8010c40:	20013d70 	.word	0x20013d70

08010c44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c52:	4b12      	ldr	r3, [pc, #72]	@ (8010c9c <tcp_kill_timewait+0x58>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	e012      	b.n	8010c80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c5a:	4b11      	ldr	r3, [pc, #68]	@ (8010ca0 <tcp_kill_timewait+0x5c>)
 8010c5c:	681a      	ldr	r2, [r3, #0]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	687a      	ldr	r2, [r7, #4]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d807      	bhi.n	8010c7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8010ca0 <tcp_kill_timewait+0x5c>)
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6a1b      	ldr	r3, [r3, #32]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	68db      	ldr	r3, [r3, #12]
 8010c7e:	60fb      	str	r3, [r7, #12]
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1e9      	bne.n	8010c5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d002      	beq.n	8010c92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010c8c:	68b8      	ldr	r0, [r7, #8]
 8010c8e:	f7ff f9d5 	bl	801003c <tcp_abort>
  }
}
 8010c92:	bf00      	nop
 8010c94:	3710      	adds	r7, #16
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd80      	pop	{r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20013d80 	.word	0x20013d80
 8010ca0:	20013d70 	.word	0x20013d70

08010ca4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010caa:	4b10      	ldr	r3, [pc, #64]	@ (8010cec <tcp_handle_closepend+0x48>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010cb0:	e014      	b.n	8010cdc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	8b5b      	ldrh	r3, [r3, #26]
 8010cbc:	f003 0308 	and.w	r3, r3, #8
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d009      	beq.n	8010cd8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	8b5b      	ldrh	r3, [r3, #26]
 8010cc8:	f023 0308 	bic.w	r3, r3, #8
 8010ccc:	b29a      	uxth	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7ff f85e 	bl	800fd94 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d1e7      	bne.n	8010cb2 <tcp_handle_closepend+0xe>
  }
}
 8010ce2:	bf00      	nop
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	20013d7c 	.word	0x20013d7c

08010cf0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b084      	sub	sp, #16
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010cfa:	2001      	movs	r0, #1
 8010cfc:	f7fd fc6e 	bl	800e5dc <memp_malloc>
 8010d00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d126      	bne.n	8010d56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010d08:	f7ff ffcc 	bl	8010ca4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010d0c:	f7ff ff9a 	bl	8010c44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d10:	2001      	movs	r0, #1
 8010d12:	f7fd fc63 	bl	800e5dc <memp_malloc>
 8010d16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d11b      	bne.n	8010d56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010d1e:	2009      	movs	r0, #9
 8010d20:	f7ff ff46 	bl	8010bb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d24:	2001      	movs	r0, #1
 8010d26:	f7fd fc59 	bl	800e5dc <memp_malloc>
 8010d2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d111      	bne.n	8010d56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010d32:	2008      	movs	r0, #8
 8010d34:	f7ff ff3c 	bl	8010bb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d38:	2001      	movs	r0, #1
 8010d3a:	f7fd fc4f 	bl	800e5dc <memp_malloc>
 8010d3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d107      	bne.n	8010d56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010d46:	79fb      	ldrb	r3, [r7, #7]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff fee3 	bl	8010b14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d4e:	2001      	movs	r0, #1
 8010d50:	f7fd fc44 	bl	800e5dc <memp_malloc>
 8010d54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d03f      	beq.n	8010ddc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010d5c:	229c      	movs	r2, #156	@ 0x9c
 8010d5e:	2100      	movs	r1, #0
 8010d60:	68f8      	ldr	r0, [r7, #12]
 8010d62:	f00a facf 	bl	801b304 <memset>
    pcb->prio = prio;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	79fa      	ldrb	r2, [r7, #7]
 8010d6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010d72:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	22ff      	movs	r2, #255	@ 0xff
 8010d8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010d92:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2206      	movs	r2, #6
 8010d98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	2206      	movs	r2, #6
 8010da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010da8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2201      	movs	r2, #1
 8010dae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8010db2:	4b0d      	ldr	r3, [pc, #52]	@ (8010de8 <tcp_alloc+0xf8>)
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010dba:	4b0c      	ldr	r3, [pc, #48]	@ (8010dec <tcp_alloc+0xfc>)
 8010dbc:	781a      	ldrb	r2, [r3, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 8010dc8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4a08      	ldr	r2, [pc, #32]	@ (8010df0 <tcp_alloc+0x100>)
 8010dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	4a07      	ldr	r2, [pc, #28]	@ (8010df4 <tcp_alloc+0x104>)
 8010dd8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3710      	adds	r7, #16
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}
 8010de6:	bf00      	nop
 8010de8:	20013d70 	.word	0x20013d70
 8010dec:	20013d86 	.word	0x20013d86
 8010df0:	08010aa9 	.word	0x08010aa9
 8010df4:	006ddd00 	.word	0x006ddd00

08010df8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b082      	sub	sp, #8
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d107      	bne.n	8010e16 <tcp_pcb_purge+0x1e>
 8010e06:	4b21      	ldr	r3, [pc, #132]	@ (8010e8c <tcp_pcb_purge+0x94>)
 8010e08:	f640 0251 	movw	r2, #2129	@ 0x851
 8010e0c:	4920      	ldr	r1, [pc, #128]	@ (8010e90 <tcp_pcb_purge+0x98>)
 8010e0e:	4821      	ldr	r0, [pc, #132]	@ (8010e94 <tcp_pcb_purge+0x9c>)
 8010e10:	f00a f916 	bl	801b040 <iprintf>
 8010e14:	e037      	b.n	8010e86 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7d1b      	ldrb	r3, [r3, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d033      	beq.n	8010e86 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010e22:	2b0a      	cmp	r3, #10
 8010e24:	d02f      	beq.n	8010e86 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010e2a:	2b01      	cmp	r3, #1
 8010e2c:	d02b      	beq.n	8010e86 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d007      	beq.n	8010e46 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7fe fac2 	bl	800f3c4 <pbuf_free>
      pcb->refused_data = NULL;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d002      	beq.n	8010e54 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f986 	bl	8011160 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010e5a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7ff fdc7 	bl	80109f4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f7ff fdc2 	bl	80109f4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010e86:	3708      	adds	r7, #8
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	0801e544 	.word	0x0801e544
 8010e90:	0801eb90 	.word	0x0801eb90
 8010e94:	0801e588 	.word	0x0801e588

08010e98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d106      	bne.n	8010eb6 <tcp_pcb_remove+0x1e>
 8010ea8:	4b3e      	ldr	r3, [pc, #248]	@ (8010fa4 <tcp_pcb_remove+0x10c>)
 8010eaa:	f640 0283 	movw	r2, #2179	@ 0x883
 8010eae:	493e      	ldr	r1, [pc, #248]	@ (8010fa8 <tcp_pcb_remove+0x110>)
 8010eb0:	483e      	ldr	r0, [pc, #248]	@ (8010fac <tcp_pcb_remove+0x114>)
 8010eb2:	f00a f8c5 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d106      	bne.n	8010eca <tcp_pcb_remove+0x32>
 8010ebc:	4b39      	ldr	r3, [pc, #228]	@ (8010fa4 <tcp_pcb_remove+0x10c>)
 8010ebe:	f640 0284 	movw	r2, #2180	@ 0x884
 8010ec2:	493b      	ldr	r1, [pc, #236]	@ (8010fb0 <tcp_pcb_remove+0x118>)
 8010ec4:	4839      	ldr	r0, [pc, #228]	@ (8010fac <tcp_pcb_remove+0x114>)
 8010ec6:	f00a f8bb 	bl	801b040 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	683a      	ldr	r2, [r7, #0]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d105      	bne.n	8010ee0 <tcp_pcb_remove+0x48>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	68da      	ldr	r2, [r3, #12]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	601a      	str	r2, [r3, #0]
 8010ede:	e013      	b.n	8010f08 <tcp_pcb_remove+0x70>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	60fb      	str	r3, [r7, #12]
 8010ee6:	e00c      	b.n	8010f02 <tcp_pcb_remove+0x6a>
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	68db      	ldr	r3, [r3, #12]
 8010eec:	683a      	ldr	r2, [r7, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d104      	bne.n	8010efc <tcp_pcb_remove+0x64>
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	68da      	ldr	r2, [r3, #12]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	60da      	str	r2, [r3, #12]
 8010efa:	e005      	b.n	8010f08 <tcp_pcb_remove+0x70>
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	60fb      	str	r3, [r7, #12]
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1ef      	bne.n	8010ee8 <tcp_pcb_remove+0x50>
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010f0e:	6838      	ldr	r0, [r7, #0]
 8010f10:	f7ff ff72 	bl	8010df8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	7d1b      	ldrb	r3, [r3, #20]
 8010f18:	2b0a      	cmp	r3, #10
 8010f1a:	d013      	beq.n	8010f44 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d00f      	beq.n	8010f44 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	8b5b      	ldrh	r3, [r3, #26]
 8010f28:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d009      	beq.n	8010f44 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	8b5b      	ldrh	r3, [r3, #26]
 8010f34:	f043 0302 	orr.w	r3, r3, #2
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010f3e:	6838      	ldr	r0, [r7, #0]
 8010f40:	f002 ff86 	bl	8013e50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	7d1b      	ldrb	r3, [r3, #20]
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d020      	beq.n	8010f8e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d006      	beq.n	8010f62 <tcp_pcb_remove+0xca>
 8010f54:	4b13      	ldr	r3, [pc, #76]	@ (8010fa4 <tcp_pcb_remove+0x10c>)
 8010f56:	f640 0293 	movw	r2, #2195	@ 0x893
 8010f5a:	4916      	ldr	r1, [pc, #88]	@ (8010fb4 <tcp_pcb_remove+0x11c>)
 8010f5c:	4813      	ldr	r0, [pc, #76]	@ (8010fac <tcp_pcb_remove+0x114>)
 8010f5e:	f00a f86f 	bl	801b040 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d006      	beq.n	8010f78 <tcp_pcb_remove+0xe0>
 8010f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8010fa4 <tcp_pcb_remove+0x10c>)
 8010f6c:	f640 0294 	movw	r2, #2196	@ 0x894
 8010f70:	4911      	ldr	r1, [pc, #68]	@ (8010fb8 <tcp_pcb_remove+0x120>)
 8010f72:	480e      	ldr	r0, [pc, #56]	@ (8010fac <tcp_pcb_remove+0x114>)
 8010f74:	f00a f864 	bl	801b040 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d006      	beq.n	8010f8e <tcp_pcb_remove+0xf6>
 8010f80:	4b08      	ldr	r3, [pc, #32]	@ (8010fa4 <tcp_pcb_remove+0x10c>)
 8010f82:	f640 0296 	movw	r2, #2198	@ 0x896
 8010f86:	490d      	ldr	r1, [pc, #52]	@ (8010fbc <tcp_pcb_remove+0x124>)
 8010f88:	4808      	ldr	r0, [pc, #32]	@ (8010fac <tcp_pcb_remove+0x114>)
 8010f8a:	f00a f859 	bl	801b040 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	2200      	movs	r2, #0
 8010f92:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	2200      	movs	r2, #0
 8010f98:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010f9a:	bf00      	nop
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	0801e544 	.word	0x0801e544
 8010fa8:	0801ebac 	.word	0x0801ebac
 8010fac:	0801e588 	.word	0x0801e588
 8010fb0:	0801ebc8 	.word	0x0801ebc8
 8010fb4:	0801ebe8 	.word	0x0801ebe8
 8010fb8:	0801ec00 	.word	0x0801ec00
 8010fbc:	0801ec1c 	.word	0x0801ec1c

08010fc0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b082      	sub	sp, #8
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_next_iss+0x1c>
 8010fce:	4b0a      	ldr	r3, [pc, #40]	@ (8010ff8 <tcp_next_iss+0x38>)
 8010fd0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8010fd4:	4909      	ldr	r1, [pc, #36]	@ (8010ffc <tcp_next_iss+0x3c>)
 8010fd6:	480a      	ldr	r0, [pc, #40]	@ (8011000 <tcp_next_iss+0x40>)
 8010fd8:	f00a f832 	bl	801b040 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010fdc:	4b09      	ldr	r3, [pc, #36]	@ (8011004 <tcp_next_iss+0x44>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	4b09      	ldr	r3, [pc, #36]	@ (8011008 <tcp_next_iss+0x48>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	4a07      	ldr	r2, [pc, #28]	@ (8011004 <tcp_next_iss+0x44>)
 8010fe8:	6013      	str	r3, [r2, #0]
  return iss;
 8010fea:	4b06      	ldr	r3, [pc, #24]	@ (8011004 <tcp_next_iss+0x44>)
 8010fec:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
 8010ff6:	bf00      	nop
 8010ff8:	0801e544 	.word	0x0801e544
 8010ffc:	0801ec34 	.word	0x0801ec34
 8011000:	0801e588 	.word	0x0801e588
 8011004:	200000b4 	.word	0x200000b4
 8011008:	20013d70 	.word	0x20013d70

0801100c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b086      	sub	sp, #24
 8011010:	af00      	add	r7, sp, #0
 8011012:	4603      	mov	r3, r0
 8011014:	60b9      	str	r1, [r7, #8]
 8011016:	607a      	str	r2, [r7, #4]
 8011018:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d106      	bne.n	801102e <tcp_eff_send_mss_netif+0x22>
 8011020:	4b14      	ldr	r3, [pc, #80]	@ (8011074 <tcp_eff_send_mss_netif+0x68>)
 8011022:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8011026:	4914      	ldr	r1, [pc, #80]	@ (8011078 <tcp_eff_send_mss_netif+0x6c>)
 8011028:	4814      	ldr	r0, [pc, #80]	@ (801107c <tcp_eff_send_mss_netif+0x70>)
 801102a:	f00a f809 	bl	801b040 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d101      	bne.n	8011038 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011034:	89fb      	ldrh	r3, [r7, #14]
 8011036:	e019      	b.n	801106c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801103c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801103e:	8afb      	ldrh	r3, [r7, #22]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d012      	beq.n	801106a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011044:	2328      	movs	r3, #40	@ 0x28
 8011046:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011048:	8afa      	ldrh	r2, [r7, #22]
 801104a:	8abb      	ldrh	r3, [r7, #20]
 801104c:	429a      	cmp	r2, r3
 801104e:	d904      	bls.n	801105a <tcp_eff_send_mss_netif+0x4e>
 8011050:	8afa      	ldrh	r2, [r7, #22]
 8011052:	8abb      	ldrh	r3, [r7, #20]
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	b29b      	uxth	r3, r3
 8011058:	e000      	b.n	801105c <tcp_eff_send_mss_netif+0x50>
 801105a:	2300      	movs	r3, #0
 801105c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801105e:	8a7a      	ldrh	r2, [r7, #18]
 8011060:	89fb      	ldrh	r3, [r7, #14]
 8011062:	4293      	cmp	r3, r2
 8011064:	bf28      	it	cs
 8011066:	4613      	movcs	r3, r2
 8011068:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801106a:	89fb      	ldrh	r3, [r7, #14]
}
 801106c:	4618      	mov	r0, r3
 801106e:	3718      	adds	r7, #24
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	0801e544 	.word	0x0801e544
 8011078:	0801ec50 	.word	0x0801ec50
 801107c:	0801e588 	.word	0x0801e588

08011080 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d119      	bne.n	80110c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011094:	4b10      	ldr	r3, [pc, #64]	@ (80110d8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011096:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801109a:	4910      	ldr	r1, [pc, #64]	@ (80110dc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801109c:	4810      	ldr	r0, [pc, #64]	@ (80110e0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801109e:	f009 ffcf 	bl	801b040 <iprintf>

  while (pcb != NULL) {
 80110a2:	e011      	b.n	80110c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d108      	bne.n	80110c2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80110b6:	68f8      	ldr	r0, [r7, #12]
 80110b8:	f7fe ffc0 	bl	801003c <tcp_abort>
      pcb = next;
 80110bc:	68bb      	ldr	r3, [r7, #8]
 80110be:	60fb      	str	r3, [r7, #12]
 80110c0:	e002      	b.n	80110c8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	68db      	ldr	r3, [r3, #12]
 80110c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d1ea      	bne.n	80110a4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80110ce:	bf00      	nop
 80110d0:	bf00      	nop
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0801e544 	.word	0x0801e544
 80110dc:	0801ec78 	.word	0x0801ec78
 80110e0:	0801e588 	.word	0x0801e588

080110e4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d02a      	beq.n	801114a <tcp_netif_ip_addr_changed+0x66>
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d026      	beq.n	801114a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80110fc:	4b15      	ldr	r3, [pc, #84]	@ (8011154 <tcp_netif_ip_addr_changed+0x70>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4619      	mov	r1, r3
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7ff ffbc 	bl	8011080 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011108:	4b13      	ldr	r3, [pc, #76]	@ (8011158 <tcp_netif_ip_addr_changed+0x74>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f7ff ffb6 	bl	8011080 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011114:	683b      	ldr	r3, [r7, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d017      	beq.n	801114a <tcp_netif_ip_addr_changed+0x66>
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d013      	beq.n	801114a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011122:	4b0e      	ldr	r3, [pc, #56]	@ (801115c <tcp_netif_ip_addr_changed+0x78>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	60fb      	str	r3, [r7, #12]
 8011128:	e00c      	b.n	8011144 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681a      	ldr	r2, [r3, #0]
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	429a      	cmp	r2, r3
 8011134:	d103      	bne.n	801113e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	681a      	ldr	r2, [r3, #0]
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	60fb      	str	r3, [r7, #12]
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d1ef      	bne.n	801112a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801114a:	bf00      	nop
 801114c:	3710      	adds	r7, #16
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	20013d7c 	.word	0x20013d7c
 8011158:	20013d74 	.word	0x20013d74
 801115c:	20013d78 	.word	0x20013d78

08011160 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801116c:	2b00      	cmp	r3, #0
 801116e:	d007      	beq.n	8011180 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011174:	4618      	mov	r0, r3
 8011176:	f7ff fc3d 	bl	80109f4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2200      	movs	r2, #0
 801117e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}

08011188 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011188:	b590      	push	{r4, r7, lr}
 801118a:	b08d      	sub	sp, #52	@ 0x34
 801118c:	af04      	add	r7, sp, #16
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d105      	bne.n	80111a4 <tcp_input+0x1c>
 8011198:	4b8b      	ldr	r3, [pc, #556]	@ (80113c8 <tcp_input+0x240>)
 801119a:	2283      	movs	r2, #131	@ 0x83
 801119c:	498b      	ldr	r1, [pc, #556]	@ (80113cc <tcp_input+0x244>)
 801119e:	488c      	ldr	r0, [pc, #560]	@ (80113d0 <tcp_input+0x248>)
 80111a0:	f009 ff4e 	bl	801b040 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	685b      	ldr	r3, [r3, #4]
 80111a8:	4a8a      	ldr	r2, [pc, #552]	@ (80113d4 <tcp_input+0x24c>)
 80111aa:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	895b      	ldrh	r3, [r3, #10]
 80111b0:	2b13      	cmp	r3, #19
 80111b2:	f240 83e3 	bls.w	801197c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80111b6:	4b88      	ldr	r3, [pc, #544]	@ (80113d8 <tcp_input+0x250>)
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	4a87      	ldr	r2, [pc, #540]	@ (80113d8 <tcp_input+0x250>)
 80111bc:	6812      	ldr	r2, [r2, #0]
 80111be:	4611      	mov	r1, r2
 80111c0:	4618      	mov	r0, r3
 80111c2:	f008 f81f 	bl	8019204 <ip4_addr_isbroadcast_u32>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f040 83d9 	bne.w	8011980 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80111ce:	4b82      	ldr	r3, [pc, #520]	@ (80113d8 <tcp_input+0x250>)
 80111d0:	695b      	ldr	r3, [r3, #20]
 80111d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80111d6:	2be0      	cmp	r3, #224	@ 0xe0
 80111d8:	f000 83d2 	beq.w	8011980 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	891a      	ldrh	r2, [r3, #8]
 80111e0:	4b7e      	ldr	r3, [pc, #504]	@ (80113dc <tcp_input+0x254>)
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	4b7e      	ldr	r3, [pc, #504]	@ (80113e0 <tcp_input+0x258>)
 80111e6:	2106      	movs	r1, #6
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7fc fcfb 	bl	800dbe4 <ip_chksum_pseudo>
 80111ee:	4603      	mov	r3, r0
 80111f0:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80111f2:	8a3b      	ldrh	r3, [r7, #16]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	f040 83c5 	bne.w	8011984 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80111fa:	4b76      	ldr	r3, [pc, #472]	@ (80113d4 <tcp_input+0x24c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	899b      	ldrh	r3, [r3, #12]
 8011200:	b29b      	uxth	r3, r3
 8011202:	4618      	mov	r0, r3
 8011204:	f7fc fbbc 	bl	800d980 <lwip_htons>
 8011208:	4603      	mov	r3, r0
 801120a:	0b1b      	lsrs	r3, r3, #12
 801120c:	b29b      	uxth	r3, r3
 801120e:	b2db      	uxtb	r3, r3
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011214:	7bfb      	ldrb	r3, [r7, #15]
 8011216:	2b13      	cmp	r3, #19
 8011218:	f240 83b6 	bls.w	8011988 <tcp_input+0x800>
 801121c:	7bfb      	ldrb	r3, [r7, #15]
 801121e:	b29a      	uxth	r2, r3
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	891b      	ldrh	r3, [r3, #8]
 8011224:	429a      	cmp	r2, r3
 8011226:	f200 83af 	bhi.w	8011988 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801122a:	7bfb      	ldrb	r3, [r7, #15]
 801122c:	b29b      	uxth	r3, r3
 801122e:	3b14      	subs	r3, #20
 8011230:	b29a      	uxth	r2, r3
 8011232:	4b6c      	ldr	r3, [pc, #432]	@ (80113e4 <tcp_input+0x25c>)
 8011234:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011236:	4b6c      	ldr	r3, [pc, #432]	@ (80113e8 <tcp_input+0x260>)
 8011238:	2200      	movs	r2, #0
 801123a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	895a      	ldrh	r2, [r3, #10]
 8011240:	7bfb      	ldrb	r3, [r7, #15]
 8011242:	b29b      	uxth	r3, r3
 8011244:	429a      	cmp	r2, r3
 8011246:	d309      	bcc.n	801125c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011248:	4b66      	ldr	r3, [pc, #408]	@ (80113e4 <tcp_input+0x25c>)
 801124a:	881a      	ldrh	r2, [r3, #0]
 801124c:	4b67      	ldr	r3, [pc, #412]	@ (80113ec <tcp_input+0x264>)
 801124e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011250:	7bfb      	ldrb	r3, [r7, #15]
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7fe f82f 	bl	800f2b8 <pbuf_remove_header>
 801125a:	e04e      	b.n	80112fa <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d105      	bne.n	8011270 <tcp_input+0xe8>
 8011264:	4b58      	ldr	r3, [pc, #352]	@ (80113c8 <tcp_input+0x240>)
 8011266:	22c2      	movs	r2, #194	@ 0xc2
 8011268:	4961      	ldr	r1, [pc, #388]	@ (80113f0 <tcp_input+0x268>)
 801126a:	4859      	ldr	r0, [pc, #356]	@ (80113d0 <tcp_input+0x248>)
 801126c:	f009 fee8 	bl	801b040 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011270:	2114      	movs	r1, #20
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f7fe f820 	bl	800f2b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	895a      	ldrh	r2, [r3, #10]
 801127c:	4b5b      	ldr	r3, [pc, #364]	@ (80113ec <tcp_input+0x264>)
 801127e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011280:	4b58      	ldr	r3, [pc, #352]	@ (80113e4 <tcp_input+0x25c>)
 8011282:	881a      	ldrh	r2, [r3, #0]
 8011284:	4b59      	ldr	r3, [pc, #356]	@ (80113ec <tcp_input+0x264>)
 8011286:	881b      	ldrh	r3, [r3, #0]
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801128c:	4b57      	ldr	r3, [pc, #348]	@ (80113ec <tcp_input+0x264>)
 801128e:	881b      	ldrh	r3, [r3, #0]
 8011290:	4619      	mov	r1, r3
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7fe f810 	bl	800f2b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	895b      	ldrh	r3, [r3, #10]
 801129e:	89ba      	ldrh	r2, [r7, #12]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	f200 8373 	bhi.w	801198c <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	4a4e      	ldr	r2, [pc, #312]	@ (80113e8 <tcp_input+0x260>)
 80112ae:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	89ba      	ldrh	r2, [r7, #12]
 80112b6:	4611      	mov	r1, r2
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fd fffd 	bl	800f2b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	891a      	ldrh	r2, [r3, #8]
 80112c2:	89bb      	ldrh	r3, [r7, #12]
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	895b      	ldrh	r3, [r3, #10]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d005      	beq.n	80112e0 <tcp_input+0x158>
 80112d4:	4b3c      	ldr	r3, [pc, #240]	@ (80113c8 <tcp_input+0x240>)
 80112d6:	22df      	movs	r2, #223	@ 0xdf
 80112d8:	4946      	ldr	r1, [pc, #280]	@ (80113f4 <tcp_input+0x26c>)
 80112da:	483d      	ldr	r0, [pc, #244]	@ (80113d0 <tcp_input+0x248>)
 80112dc:	f009 feb0 	bl	801b040 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	891a      	ldrh	r2, [r3, #8]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	891b      	ldrh	r3, [r3, #8]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d005      	beq.n	80112fa <tcp_input+0x172>
 80112ee:	4b36      	ldr	r3, [pc, #216]	@ (80113c8 <tcp_input+0x240>)
 80112f0:	22e0      	movs	r2, #224	@ 0xe0
 80112f2:	4941      	ldr	r1, [pc, #260]	@ (80113f8 <tcp_input+0x270>)
 80112f4:	4836      	ldr	r0, [pc, #216]	@ (80113d0 <tcp_input+0x248>)
 80112f6:	f009 fea3 	bl	801b040 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80112fa:	4b36      	ldr	r3, [pc, #216]	@ (80113d4 <tcp_input+0x24c>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	b29b      	uxth	r3, r3
 8011302:	4a34      	ldr	r2, [pc, #208]	@ (80113d4 <tcp_input+0x24c>)
 8011304:	6814      	ldr	r4, [r2, #0]
 8011306:	4618      	mov	r0, r3
 8011308:	f7fc fb3a 	bl	800d980 <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011310:	4b30      	ldr	r3, [pc, #192]	@ (80113d4 <tcp_input+0x24c>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	885b      	ldrh	r3, [r3, #2]
 8011316:	b29b      	uxth	r3, r3
 8011318:	4a2e      	ldr	r2, [pc, #184]	@ (80113d4 <tcp_input+0x24c>)
 801131a:	6814      	ldr	r4, [r2, #0]
 801131c:	4618      	mov	r0, r3
 801131e:	f7fc fb2f 	bl	800d980 <lwip_htons>
 8011322:	4603      	mov	r3, r0
 8011324:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011326:	4b2b      	ldr	r3, [pc, #172]	@ (80113d4 <tcp_input+0x24c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	4a29      	ldr	r2, [pc, #164]	@ (80113d4 <tcp_input+0x24c>)
 801132e:	6814      	ldr	r4, [r2, #0]
 8011330:	4618      	mov	r0, r3
 8011332:	f7fc fb3a 	bl	800d9aa <lwip_htonl>
 8011336:	4603      	mov	r3, r0
 8011338:	6063      	str	r3, [r4, #4]
 801133a:	6863      	ldr	r3, [r4, #4]
 801133c:	4a2f      	ldr	r2, [pc, #188]	@ (80113fc <tcp_input+0x274>)
 801133e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011340:	4b24      	ldr	r3, [pc, #144]	@ (80113d4 <tcp_input+0x24c>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	4a23      	ldr	r2, [pc, #140]	@ (80113d4 <tcp_input+0x24c>)
 8011348:	6814      	ldr	r4, [r2, #0]
 801134a:	4618      	mov	r0, r3
 801134c:	f7fc fb2d 	bl	800d9aa <lwip_htonl>
 8011350:	4603      	mov	r3, r0
 8011352:	60a3      	str	r3, [r4, #8]
 8011354:	68a3      	ldr	r3, [r4, #8]
 8011356:	4a2a      	ldr	r2, [pc, #168]	@ (8011400 <tcp_input+0x278>)
 8011358:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801135a:	4b1e      	ldr	r3, [pc, #120]	@ (80113d4 <tcp_input+0x24c>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	89db      	ldrh	r3, [r3, #14]
 8011360:	b29b      	uxth	r3, r3
 8011362:	4a1c      	ldr	r2, [pc, #112]	@ (80113d4 <tcp_input+0x24c>)
 8011364:	6814      	ldr	r4, [r2, #0]
 8011366:	4618      	mov	r0, r3
 8011368:	f7fc fb0a 	bl	800d980 <lwip_htons>
 801136c:	4603      	mov	r3, r0
 801136e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011370:	4b18      	ldr	r3, [pc, #96]	@ (80113d4 <tcp_input+0x24c>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	b29b      	uxth	r3, r3
 8011378:	4618      	mov	r0, r3
 801137a:	f7fc fb01 	bl	800d980 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	b2db      	uxtb	r3, r3
 8011382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011386:	b2da      	uxtb	r2, r3
 8011388:	4b1e      	ldr	r3, [pc, #120]	@ (8011404 <tcp_input+0x27c>)
 801138a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	891a      	ldrh	r2, [r3, #8]
 8011390:	4b1d      	ldr	r3, [pc, #116]	@ (8011408 <tcp_input+0x280>)
 8011392:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011394:	4b1b      	ldr	r3, [pc, #108]	@ (8011404 <tcp_input+0x27c>)
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f003 0303 	and.w	r3, r3, #3
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00c      	beq.n	80113ba <tcp_input+0x232>
    tcplen++;
 80113a0:	4b19      	ldr	r3, [pc, #100]	@ (8011408 <tcp_input+0x280>)
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	3301      	adds	r3, #1
 80113a6:	b29a      	uxth	r2, r3
 80113a8:	4b17      	ldr	r3, [pc, #92]	@ (8011408 <tcp_input+0x280>)
 80113aa:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	891a      	ldrh	r2, [r3, #8]
 80113b0:	4b15      	ldr	r3, [pc, #84]	@ (8011408 <tcp_input+0x280>)
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	f200 82eb 	bhi.w	8011990 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80113be:	4b13      	ldr	r3, [pc, #76]	@ (801140c <tcp_input+0x284>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	61bb      	str	r3, [r7, #24]
 80113c4:	e09b      	b.n	80114fe <tcp_input+0x376>
 80113c6:	bf00      	nop
 80113c8:	0801ecac 	.word	0x0801ecac
 80113cc:	0801ece0 	.word	0x0801ece0
 80113d0:	0801ecf8 	.word	0x0801ecf8
 80113d4:	20013d9c 	.word	0x20013d9c
 80113d8:	2000a2fc 	.word	0x2000a2fc
 80113dc:	2000a310 	.word	0x2000a310
 80113e0:	2000a30c 	.word	0x2000a30c
 80113e4:	20013da0 	.word	0x20013da0
 80113e8:	20013da4 	.word	0x20013da4
 80113ec:	20013da2 	.word	0x20013da2
 80113f0:	0801ed20 	.word	0x0801ed20
 80113f4:	0801ed30 	.word	0x0801ed30
 80113f8:	0801ed3c 	.word	0x0801ed3c
 80113fc:	20013dac 	.word	0x20013dac
 8011400:	20013db0 	.word	0x20013db0
 8011404:	20013db8 	.word	0x20013db8
 8011408:	20013db6 	.word	0x20013db6
 801140c:	20013d7c 	.word	0x20013d7c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	7d1b      	ldrb	r3, [r3, #20]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d105      	bne.n	8011424 <tcp_input+0x29c>
 8011418:	4b88      	ldr	r3, [pc, #544]	@ (801163c <tcp_input+0x4b4>)
 801141a:	22fb      	movs	r2, #251	@ 0xfb
 801141c:	4988      	ldr	r1, [pc, #544]	@ (8011640 <tcp_input+0x4b8>)
 801141e:	4889      	ldr	r0, [pc, #548]	@ (8011644 <tcp_input+0x4bc>)
 8011420:	f009 fe0e 	bl	801b040 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011424:	69bb      	ldr	r3, [r7, #24]
 8011426:	7d1b      	ldrb	r3, [r3, #20]
 8011428:	2b0a      	cmp	r3, #10
 801142a:	d105      	bne.n	8011438 <tcp_input+0x2b0>
 801142c:	4b83      	ldr	r3, [pc, #524]	@ (801163c <tcp_input+0x4b4>)
 801142e:	22fc      	movs	r2, #252	@ 0xfc
 8011430:	4985      	ldr	r1, [pc, #532]	@ (8011648 <tcp_input+0x4c0>)
 8011432:	4884      	ldr	r0, [pc, #528]	@ (8011644 <tcp_input+0x4bc>)
 8011434:	f009 fe04 	bl	801b040 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	7d1b      	ldrb	r3, [r3, #20]
 801143c:	2b01      	cmp	r3, #1
 801143e:	d105      	bne.n	801144c <tcp_input+0x2c4>
 8011440:	4b7e      	ldr	r3, [pc, #504]	@ (801163c <tcp_input+0x4b4>)
 8011442:	22fd      	movs	r2, #253	@ 0xfd
 8011444:	4981      	ldr	r1, [pc, #516]	@ (801164c <tcp_input+0x4c4>)
 8011446:	487f      	ldr	r0, [pc, #508]	@ (8011644 <tcp_input+0x4bc>)
 8011448:	f009 fdfa 	bl	801b040 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801144c:	69bb      	ldr	r3, [r7, #24]
 801144e:	7a1b      	ldrb	r3, [r3, #8]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00c      	beq.n	801146e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	7a1a      	ldrb	r2, [r3, #8]
 8011458:	4b7d      	ldr	r3, [pc, #500]	@ (8011650 <tcp_input+0x4c8>)
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011460:	3301      	adds	r3, #1
 8011462:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011464:	429a      	cmp	r2, r3
 8011466:	d002      	beq.n	801146e <tcp_input+0x2e6>
      prev = pcb;
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	61fb      	str	r3, [r7, #28]
      continue;
 801146c:	e044      	b.n	80114f8 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 801146e:	69bb      	ldr	r3, [r7, #24]
 8011470:	8b1a      	ldrh	r2, [r3, #24]
 8011472:	4b78      	ldr	r3, [pc, #480]	@ (8011654 <tcp_input+0x4cc>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	b29b      	uxth	r3, r3
 801147a:	429a      	cmp	r2, r3
 801147c:	d13a      	bne.n	80114f4 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	8ada      	ldrh	r2, [r3, #22]
 8011482:	4b74      	ldr	r3, [pc, #464]	@ (8011654 <tcp_input+0x4cc>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	885b      	ldrh	r3, [r3, #2]
 8011488:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801148a:	429a      	cmp	r2, r3
 801148c:	d132      	bne.n	80114f4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	685a      	ldr	r2, [r3, #4]
 8011492:	4b6f      	ldr	r3, [pc, #444]	@ (8011650 <tcp_input+0x4c8>)
 8011494:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011496:	429a      	cmp	r2, r3
 8011498:	d12c      	bne.n	80114f4 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	4b6c      	ldr	r3, [pc, #432]	@ (8011650 <tcp_input+0x4c8>)
 80114a0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d126      	bne.n	80114f4 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	69ba      	ldr	r2, [r7, #24]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d106      	bne.n	80114be <tcp_input+0x336>
 80114b0:	4b62      	ldr	r3, [pc, #392]	@ (801163c <tcp_input+0x4b4>)
 80114b2:	f240 120d 	movw	r2, #269	@ 0x10d
 80114b6:	4968      	ldr	r1, [pc, #416]	@ (8011658 <tcp_input+0x4d0>)
 80114b8:	4862      	ldr	r0, [pc, #392]	@ (8011644 <tcp_input+0x4bc>)
 80114ba:	f009 fdc1 	bl	801b040 <iprintf>
      if (prev != NULL) {
 80114be:	69fb      	ldr	r3, [r7, #28]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d00a      	beq.n	80114da <tcp_input+0x352>
        prev->next = pcb->next;
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	68da      	ldr	r2, [r3, #12]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80114cc:	4b63      	ldr	r3, [pc, #396]	@ (801165c <tcp_input+0x4d4>)
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	69bb      	ldr	r3, [r7, #24]
 80114d2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80114d4:	4a61      	ldr	r2, [pc, #388]	@ (801165c <tcp_input+0x4d4>)
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	68db      	ldr	r3, [r3, #12]
 80114de:	69ba      	ldr	r2, [r7, #24]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d110      	bne.n	8011506 <tcp_input+0x37e>
 80114e4:	4b55      	ldr	r3, [pc, #340]	@ (801163c <tcp_input+0x4b4>)
 80114e6:	f240 1215 	movw	r2, #277	@ 0x115
 80114ea:	495d      	ldr	r1, [pc, #372]	@ (8011660 <tcp_input+0x4d8>)
 80114ec:	4855      	ldr	r0, [pc, #340]	@ (8011644 <tcp_input+0x4bc>)
 80114ee:	f009 fda7 	bl	801b040 <iprintf>
      break;
 80114f2:	e008      	b.n	8011506 <tcp_input+0x37e>
    }
    prev = pcb;
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	61bb      	str	r3, [r7, #24]
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d185      	bne.n	8011410 <tcp_input+0x288>
 8011504:	e000      	b.n	8011508 <tcp_input+0x380>
      break;
 8011506:	bf00      	nop
  }

  if (pcb == NULL) {
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f040 80b0 	bne.w	8011670 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011510:	4b54      	ldr	r3, [pc, #336]	@ (8011664 <tcp_input+0x4dc>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	61bb      	str	r3, [r7, #24]
 8011516:	e03f      	b.n	8011598 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	7d1b      	ldrb	r3, [r3, #20]
 801151c:	2b0a      	cmp	r3, #10
 801151e:	d006      	beq.n	801152e <tcp_input+0x3a6>
 8011520:	4b46      	ldr	r3, [pc, #280]	@ (801163c <tcp_input+0x4b4>)
 8011522:	f240 121f 	movw	r2, #287	@ 0x11f
 8011526:	4950      	ldr	r1, [pc, #320]	@ (8011668 <tcp_input+0x4e0>)
 8011528:	4846      	ldr	r0, [pc, #280]	@ (8011644 <tcp_input+0x4bc>)
 801152a:	f009 fd89 	bl	801b040 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	7a1b      	ldrb	r3, [r3, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d009      	beq.n	801154a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	7a1a      	ldrb	r2, [r3, #8]
 801153a:	4b45      	ldr	r3, [pc, #276]	@ (8011650 <tcp_input+0x4c8>)
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011542:	3301      	adds	r3, #1
 8011544:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011546:	429a      	cmp	r2, r3
 8011548:	d122      	bne.n	8011590 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	8b1a      	ldrh	r2, [r3, #24]
 801154e:	4b41      	ldr	r3, [pc, #260]	@ (8011654 <tcp_input+0x4cc>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	b29b      	uxth	r3, r3
 8011556:	429a      	cmp	r2, r3
 8011558:	d11b      	bne.n	8011592 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	8ada      	ldrh	r2, [r3, #22]
 801155e:	4b3d      	ldr	r3, [pc, #244]	@ (8011654 <tcp_input+0x4cc>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	885b      	ldrh	r3, [r3, #2]
 8011564:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011566:	429a      	cmp	r2, r3
 8011568:	d113      	bne.n	8011592 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	685a      	ldr	r2, [r3, #4]
 801156e:	4b38      	ldr	r3, [pc, #224]	@ (8011650 <tcp_input+0x4c8>)
 8011570:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011572:	429a      	cmp	r2, r3
 8011574:	d10d      	bne.n	8011592 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	4b35      	ldr	r3, [pc, #212]	@ (8011650 <tcp_input+0x4c8>)
 801157c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801157e:	429a      	cmp	r2, r3
 8011580:	d107      	bne.n	8011592 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011582:	69b8      	ldr	r0, [r7, #24]
 8011584:	f000 fb5e 	bl	8011c44 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7fd ff1b 	bl	800f3c4 <pbuf_free>
        return;
 801158e:	e205      	b.n	801199c <tcp_input+0x814>
        continue;
 8011590:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	61bb      	str	r3, [r7, #24]
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d1bc      	bne.n	8011518 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801159e:	2300      	movs	r3, #0
 80115a0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80115a2:	4b32      	ldr	r3, [pc, #200]	@ (801166c <tcp_input+0x4e4>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	617b      	str	r3, [r7, #20]
 80115a8:	e02a      	b.n	8011600 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	7a1b      	ldrb	r3, [r3, #8]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00c      	beq.n	80115cc <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	7a1a      	ldrb	r2, [r3, #8]
 80115b6:	4b26      	ldr	r3, [pc, #152]	@ (8011650 <tcp_input+0x4c8>)
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80115be:	3301      	adds	r3, #1
 80115c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d002      	beq.n	80115cc <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	61fb      	str	r3, [r7, #28]
        continue;
 80115ca:	e016      	b.n	80115fa <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	8ada      	ldrh	r2, [r3, #22]
 80115d0:	4b20      	ldr	r3, [pc, #128]	@ (8011654 <tcp_input+0x4cc>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	885b      	ldrh	r3, [r3, #2]
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	429a      	cmp	r2, r3
 80115da:	d10c      	bne.n	80115f6 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	4b1b      	ldr	r3, [pc, #108]	@ (8011650 <tcp_input+0x4c8>)
 80115e2:	695b      	ldr	r3, [r3, #20]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d00f      	beq.n	8011608 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00d      	beq.n	801160a <tcp_input+0x482>
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d009      	beq.n	801160a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	68db      	ldr	r3, [r3, #12]
 80115fe:	617b      	str	r3, [r7, #20]
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1d1      	bne.n	80115aa <tcp_input+0x422>
 8011606:	e000      	b.n	801160a <tcp_input+0x482>
            break;
 8011608:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d02f      	beq.n	8011670 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011610:	69fb      	ldr	r3, [r7, #28]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00a      	beq.n	801162c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	68da      	ldr	r2, [r3, #12]
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801161e:	4b13      	ldr	r3, [pc, #76]	@ (801166c <tcp_input+0x4e4>)
 8011620:	681a      	ldr	r2, [r3, #0]
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011626:	4a11      	ldr	r2, [pc, #68]	@ (801166c <tcp_input+0x4e4>)
 8011628:	697b      	ldr	r3, [r7, #20]
 801162a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801162c:	6978      	ldr	r0, [r7, #20]
 801162e:	f000 fa0b 	bl	8011a48 <tcp_listen_input>
      }
      pbuf_free(p);
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7fd fec6 	bl	800f3c4 <pbuf_free>
      return;
 8011638:	e1b0      	b.n	801199c <tcp_input+0x814>
 801163a:	bf00      	nop
 801163c:	0801ecac 	.word	0x0801ecac
 8011640:	0801ed5c 	.word	0x0801ed5c
 8011644:	0801ecf8 	.word	0x0801ecf8
 8011648:	0801ed84 	.word	0x0801ed84
 801164c:	0801edb0 	.word	0x0801edb0
 8011650:	2000a2fc 	.word	0x2000a2fc
 8011654:	20013d9c 	.word	0x20013d9c
 8011658:	0801edd8 	.word	0x0801edd8
 801165c:	20013d7c 	.word	0x20013d7c
 8011660:	0801ee04 	.word	0x0801ee04
 8011664:	20013d80 	.word	0x20013d80
 8011668:	0801ee30 	.word	0x0801ee30
 801166c:	20013d78 	.word	0x20013d78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	2b00      	cmp	r3, #0
 8011674:	f000 8158 	beq.w	8011928 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011678:	4b95      	ldr	r3, [pc, #596]	@ (80118d0 <tcp_input+0x748>)
 801167a:	2200      	movs	r2, #0
 801167c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	891a      	ldrh	r2, [r3, #8]
 8011682:	4b93      	ldr	r3, [pc, #588]	@ (80118d0 <tcp_input+0x748>)
 8011684:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011686:	4a92      	ldr	r2, [pc, #584]	@ (80118d0 <tcp_input+0x748>)
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801168c:	4b91      	ldr	r3, [pc, #580]	@ (80118d4 <tcp_input+0x74c>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a8f      	ldr	r2, [pc, #572]	@ (80118d0 <tcp_input+0x748>)
 8011692:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8011694:	4b90      	ldr	r3, [pc, #576]	@ (80118d8 <tcp_input+0x750>)
 8011696:	2200      	movs	r2, #0
 8011698:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801169a:	4b90      	ldr	r3, [pc, #576]	@ (80118dc <tcp_input+0x754>)
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80116a0:	4b8f      	ldr	r3, [pc, #572]	@ (80118e0 <tcp_input+0x758>)
 80116a2:	2200      	movs	r2, #0
 80116a4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80116a6:	4b8f      	ldr	r3, [pc, #572]	@ (80118e4 <tcp_input+0x75c>)
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	f003 0308 	and.w	r3, r3, #8
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d006      	beq.n	80116c0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	7b5b      	ldrb	r3, [r3, #13]
 80116b6:	f043 0301 	orr.w	r3, r3, #1
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d017      	beq.n	80116f8 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80116c8:	69b8      	ldr	r0, [r7, #24]
 80116ca:	f7ff f915 	bl	80108f8 <tcp_process_refused_data>
 80116ce:	4603      	mov	r3, r0
 80116d0:	f113 0f0d 	cmn.w	r3, #13
 80116d4:	d007      	beq.n	80116e6 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00c      	beq.n	80116f8 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80116de:	4b82      	ldr	r3, [pc, #520]	@ (80118e8 <tcp_input+0x760>)
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d008      	beq.n	80116f8 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f040 80e4 	bne.w	80118b8 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80116f0:	69b8      	ldr	r0, [r7, #24]
 80116f2:	f003 f9e1 	bl	8014ab8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80116f6:	e0df      	b.n	80118b8 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 80116f8:	4a7c      	ldr	r2, [pc, #496]	@ (80118ec <tcp_input+0x764>)
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80116fe:	69b8      	ldr	r0, [r7, #24]
 8011700:	f000 fb1a 	bl	8011d38 <tcp_process>
 8011704:	4603      	mov	r3, r0
 8011706:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801170c:	f113 0f0d 	cmn.w	r3, #13
 8011710:	f000 80d4 	beq.w	80118bc <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8011714:	4b71      	ldr	r3, [pc, #452]	@ (80118dc <tcp_input+0x754>)
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	f003 0308 	and.w	r3, r3, #8
 801171c:	2b00      	cmp	r3, #0
 801171e:	d015      	beq.n	801174c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011720:	69bb      	ldr	r3, [r7, #24]
 8011722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011726:	2b00      	cmp	r3, #0
 8011728:	d008      	beq.n	801173c <tcp_input+0x5b4>
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011730:	69ba      	ldr	r2, [r7, #24]
 8011732:	6912      	ldr	r2, [r2, #16]
 8011734:	f06f 010d 	mvn.w	r1, #13
 8011738:	4610      	mov	r0, r2
 801173a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801173c:	69b9      	ldr	r1, [r7, #24]
 801173e:	486c      	ldr	r0, [pc, #432]	@ (80118f0 <tcp_input+0x768>)
 8011740:	f7ff fbaa 	bl	8010e98 <tcp_pcb_remove>
        tcp_free(pcb);
 8011744:	69b8      	ldr	r0, [r7, #24]
 8011746:	f7fe f991 	bl	800fa6c <tcp_free>
 801174a:	e0da      	b.n	8011902 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 801174c:	2300      	movs	r3, #0
 801174e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011750:	4b63      	ldr	r3, [pc, #396]	@ (80118e0 <tcp_input+0x758>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d01d      	beq.n	8011794 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011758:	4b61      	ldr	r3, [pc, #388]	@ (80118e0 <tcp_input+0x758>)
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801175e:	69bb      	ldr	r3, [r7, #24]
 8011760:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00a      	beq.n	801177e <tcp_input+0x5f6>
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	6910      	ldr	r0, [r2, #16]
 8011772:	897a      	ldrh	r2, [r7, #10]
 8011774:	69b9      	ldr	r1, [r7, #24]
 8011776:	4798      	blx	r3
 8011778:	4603      	mov	r3, r0
 801177a:	74fb      	strb	r3, [r7, #19]
 801177c:	e001      	b.n	8011782 <tcp_input+0x5fa>
 801177e:	2300      	movs	r3, #0
 8011780:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011782:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011786:	f113 0f0d 	cmn.w	r3, #13
 801178a:	f000 8099 	beq.w	80118c0 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 801178e:	4b54      	ldr	r3, [pc, #336]	@ (80118e0 <tcp_input+0x758>)
 8011790:	2200      	movs	r2, #0
 8011792:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011794:	69b8      	ldr	r0, [r7, #24]
 8011796:	f000 f917 	bl	80119c8 <tcp_input_delayed_close>
 801179a:	4603      	mov	r3, r0
 801179c:	2b00      	cmp	r3, #0
 801179e:	f040 8091 	bne.w	80118c4 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80117a2:	4b4d      	ldr	r3, [pc, #308]	@ (80118d8 <tcp_input+0x750>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d041      	beq.n	801182e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80117aa:	69bb      	ldr	r3, [r7, #24]
 80117ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d006      	beq.n	80117c0 <tcp_input+0x638>
 80117b2:	4b50      	ldr	r3, [pc, #320]	@ (80118f4 <tcp_input+0x76c>)
 80117b4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80117b8:	494f      	ldr	r1, [pc, #316]	@ (80118f8 <tcp_input+0x770>)
 80117ba:	4850      	ldr	r0, [pc, #320]	@ (80118fc <tcp_input+0x774>)
 80117bc:	f009 fc40 	bl	801b040 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	8b5b      	ldrh	r3, [r3, #26]
 80117c4:	f003 0310 	and.w	r3, r3, #16
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d008      	beq.n	80117de <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80117cc:	4b42      	ldr	r3, [pc, #264]	@ (80118d8 <tcp_input+0x750>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fd fdf7 	bl	800f3c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80117d6:	69b8      	ldr	r0, [r7, #24]
 80117d8:	f7fe fc30 	bl	801003c <tcp_abort>
            goto aborted;
 80117dc:	e091      	b.n	8011902 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80117de:	69bb      	ldr	r3, [r7, #24]
 80117e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00c      	beq.n	8011802 <tcp_input+0x67a>
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	6918      	ldr	r0, [r3, #16]
 80117f2:	4b39      	ldr	r3, [pc, #228]	@ (80118d8 <tcp_input+0x750>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	2300      	movs	r3, #0
 80117f8:	69b9      	ldr	r1, [r7, #24]
 80117fa:	47a0      	blx	r4
 80117fc:	4603      	mov	r3, r0
 80117fe:	74fb      	strb	r3, [r7, #19]
 8011800:	e008      	b.n	8011814 <tcp_input+0x68c>
 8011802:	4b35      	ldr	r3, [pc, #212]	@ (80118d8 <tcp_input+0x750>)
 8011804:	681a      	ldr	r2, [r3, #0]
 8011806:	2300      	movs	r3, #0
 8011808:	69b9      	ldr	r1, [r7, #24]
 801180a:	2000      	movs	r0, #0
 801180c:	f7ff f94c 	bl	8010aa8 <tcp_recv_null>
 8011810:	4603      	mov	r3, r0
 8011812:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011814:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011818:	f113 0f0d 	cmn.w	r3, #13
 801181c:	d054      	beq.n	80118c8 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801181e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d003      	beq.n	801182e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011826:	4b2c      	ldr	r3, [pc, #176]	@ (80118d8 <tcp_input+0x750>)
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	69bb      	ldr	r3, [r7, #24]
 801182c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801182e:	4b2b      	ldr	r3, [pc, #172]	@ (80118dc <tcp_input+0x754>)
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	f003 0320 	and.w	r3, r3, #32
 8011836:	2b00      	cmp	r3, #0
 8011838:	d031      	beq.n	801189e <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 801183a:	69bb      	ldr	r3, [r7, #24]
 801183c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801183e:	2b00      	cmp	r3, #0
 8011840:	d009      	beq.n	8011856 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011846:	7b5a      	ldrb	r2, [r3, #13]
 8011848:	69bb      	ldr	r3, [r7, #24]
 801184a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801184c:	f042 0220 	orr.w	r2, r2, #32
 8011850:	b2d2      	uxtb	r2, r2
 8011852:	735a      	strb	r2, [r3, #13]
 8011854:	e023      	b.n	801189e <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801185a:	f642 52a0 	movw	r2, #11680	@ 0x2da0
 801185e:	4293      	cmp	r3, r2
 8011860:	d005      	beq.n	801186e <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011866:	3301      	adds	r3, #1
 8011868:	b29a      	uxth	r2, r3
 801186a:	69bb      	ldr	r3, [r7, #24]
 801186c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011874:	2b00      	cmp	r3, #0
 8011876:	d00b      	beq.n	8011890 <tcp_input+0x708>
 8011878:	69bb      	ldr	r3, [r7, #24]
 801187a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	6918      	ldr	r0, [r3, #16]
 8011882:	2300      	movs	r3, #0
 8011884:	2200      	movs	r2, #0
 8011886:	69b9      	ldr	r1, [r7, #24]
 8011888:	47a0      	blx	r4
 801188a:	4603      	mov	r3, r0
 801188c:	74fb      	strb	r3, [r7, #19]
 801188e:	e001      	b.n	8011894 <tcp_input+0x70c>
 8011890:	2300      	movs	r3, #0
 8011892:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011894:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011898:	f113 0f0d 	cmn.w	r3, #13
 801189c:	d016      	beq.n	80118cc <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801189e:	4b13      	ldr	r3, [pc, #76]	@ (80118ec <tcp_input+0x764>)
 80118a0:	2200      	movs	r2, #0
 80118a2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80118a4:	69b8      	ldr	r0, [r7, #24]
 80118a6:	f000 f88f 	bl	80119c8 <tcp_input_delayed_close>
 80118aa:	4603      	mov	r3, r0
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d127      	bne.n	8011900 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80118b0:	69b8      	ldr	r0, [r7, #24]
 80118b2:	f002 facd 	bl	8013e50 <tcp_output>
 80118b6:	e024      	b.n	8011902 <tcp_input+0x77a>
        goto aborted;
 80118b8:	bf00      	nop
 80118ba:	e022      	b.n	8011902 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80118bc:	bf00      	nop
 80118be:	e020      	b.n	8011902 <tcp_input+0x77a>
              goto aborted;
 80118c0:	bf00      	nop
 80118c2:	e01e      	b.n	8011902 <tcp_input+0x77a>
          goto aborted;
 80118c4:	bf00      	nop
 80118c6:	e01c      	b.n	8011902 <tcp_input+0x77a>
            goto aborted;
 80118c8:	bf00      	nop
 80118ca:	e01a      	b.n	8011902 <tcp_input+0x77a>
              goto aborted;
 80118cc:	bf00      	nop
 80118ce:	e018      	b.n	8011902 <tcp_input+0x77a>
 80118d0:	20013d88 	.word	0x20013d88
 80118d4:	20013d9c 	.word	0x20013d9c
 80118d8:	20013dbc 	.word	0x20013dbc
 80118dc:	20013db9 	.word	0x20013db9
 80118e0:	20013db4 	.word	0x20013db4
 80118e4:	20013db8 	.word	0x20013db8
 80118e8:	20013db6 	.word	0x20013db6
 80118ec:	20013dc0 	.word	0x20013dc0
 80118f0:	20013d7c 	.word	0x20013d7c
 80118f4:	0801ecac 	.word	0x0801ecac
 80118f8:	0801ee60 	.word	0x0801ee60
 80118fc:	0801ecf8 	.word	0x0801ecf8
          goto aborted;
 8011900:	bf00      	nop
    tcp_input_pcb = NULL;
 8011902:	4b28      	ldr	r3, [pc, #160]	@ (80119a4 <tcp_input+0x81c>)
 8011904:	2200      	movs	r2, #0
 8011906:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011908:	4b27      	ldr	r3, [pc, #156]	@ (80119a8 <tcp_input+0x820>)
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801190e:	4b27      	ldr	r3, [pc, #156]	@ (80119ac <tcp_input+0x824>)
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d041      	beq.n	801199a <tcp_input+0x812>
      pbuf_free(inseg.p);
 8011916:	4b25      	ldr	r3, [pc, #148]	@ (80119ac <tcp_input+0x824>)
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	4618      	mov	r0, r3
 801191c:	f7fd fd52 	bl	800f3c4 <pbuf_free>
      inseg.p = NULL;
 8011920:	4b22      	ldr	r3, [pc, #136]	@ (80119ac <tcp_input+0x824>)
 8011922:	2200      	movs	r2, #0
 8011924:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011926:	e038      	b.n	801199a <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011928:	4b21      	ldr	r3, [pc, #132]	@ (80119b0 <tcp_input+0x828>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	899b      	ldrh	r3, [r3, #12]
 801192e:	b29b      	uxth	r3, r3
 8011930:	4618      	mov	r0, r3
 8011932:	f7fc f825 	bl	800d980 <lwip_htons>
 8011936:	4603      	mov	r3, r0
 8011938:	b2db      	uxtb	r3, r3
 801193a:	f003 0304 	and.w	r3, r3, #4
 801193e:	2b00      	cmp	r3, #0
 8011940:	d118      	bne.n	8011974 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011942:	4b1c      	ldr	r3, [pc, #112]	@ (80119b4 <tcp_input+0x82c>)
 8011944:	6819      	ldr	r1, [r3, #0]
 8011946:	4b1c      	ldr	r3, [pc, #112]	@ (80119b8 <tcp_input+0x830>)
 8011948:	881b      	ldrh	r3, [r3, #0]
 801194a:	461a      	mov	r2, r3
 801194c:	4b1b      	ldr	r3, [pc, #108]	@ (80119bc <tcp_input+0x834>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011952:	4b17      	ldr	r3, [pc, #92]	@ (80119b0 <tcp_input+0x828>)
 8011954:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011956:	885b      	ldrh	r3, [r3, #2]
 8011958:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801195a:	4a15      	ldr	r2, [pc, #84]	@ (80119b0 <tcp_input+0x828>)
 801195c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801195e:	8812      	ldrh	r2, [r2, #0]
 8011960:	b292      	uxth	r2, r2
 8011962:	9202      	str	r2, [sp, #8]
 8011964:	9301      	str	r3, [sp, #4]
 8011966:	4b16      	ldr	r3, [pc, #88]	@ (80119c0 <tcp_input+0x838>)
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	4b16      	ldr	r3, [pc, #88]	@ (80119c4 <tcp_input+0x83c>)
 801196c:	4602      	mov	r2, r0
 801196e:	2000      	movs	r0, #0
 8011970:	f003 f850 	bl	8014a14 <tcp_rst>
    pbuf_free(p);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7fd fd25 	bl	800f3c4 <pbuf_free>
  return;
 801197a:	e00e      	b.n	801199a <tcp_input+0x812>
    goto dropped;
 801197c:	bf00      	nop
 801197e:	e008      	b.n	8011992 <tcp_input+0x80a>
    goto dropped;
 8011980:	bf00      	nop
 8011982:	e006      	b.n	8011992 <tcp_input+0x80a>
      goto dropped;
 8011984:	bf00      	nop
 8011986:	e004      	b.n	8011992 <tcp_input+0x80a>
    goto dropped;
 8011988:	bf00      	nop
 801198a:	e002      	b.n	8011992 <tcp_input+0x80a>
      goto dropped;
 801198c:	bf00      	nop
 801198e:	e000      	b.n	8011992 <tcp_input+0x80a>
      goto dropped;
 8011990:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7fd fd16 	bl	800f3c4 <pbuf_free>
 8011998:	e000      	b.n	801199c <tcp_input+0x814>
  return;
 801199a:	bf00      	nop
}
 801199c:	3724      	adds	r7, #36	@ 0x24
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd90      	pop	{r4, r7, pc}
 80119a2:	bf00      	nop
 80119a4:	20013dc0 	.word	0x20013dc0
 80119a8:	20013dbc 	.word	0x20013dbc
 80119ac:	20013d88 	.word	0x20013d88
 80119b0:	20013d9c 	.word	0x20013d9c
 80119b4:	20013db0 	.word	0x20013db0
 80119b8:	20013db6 	.word	0x20013db6
 80119bc:	20013dac 	.word	0x20013dac
 80119c0:	2000a30c 	.word	0x2000a30c
 80119c4:	2000a310 	.word	0x2000a310

080119c8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b082      	sub	sp, #8
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d106      	bne.n	80119e4 <tcp_input_delayed_close+0x1c>
 80119d6:	4b17      	ldr	r3, [pc, #92]	@ (8011a34 <tcp_input_delayed_close+0x6c>)
 80119d8:	f240 225a 	movw	r2, #602	@ 0x25a
 80119dc:	4916      	ldr	r1, [pc, #88]	@ (8011a38 <tcp_input_delayed_close+0x70>)
 80119de:	4817      	ldr	r0, [pc, #92]	@ (8011a3c <tcp_input_delayed_close+0x74>)
 80119e0:	f009 fb2e 	bl	801b040 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80119e4:	4b16      	ldr	r3, [pc, #88]	@ (8011a40 <tcp_input_delayed_close+0x78>)
 80119e6:	781b      	ldrb	r3, [r3, #0]
 80119e8:	f003 0310 	and.w	r3, r3, #16
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d01c      	beq.n	8011a2a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	8b5b      	ldrh	r3, [r3, #26]
 80119f4:	f003 0310 	and.w	r3, r3, #16
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d10d      	bne.n	8011a18 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d008      	beq.n	8011a18 <tcp_input_delayed_close+0x50>
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	6912      	ldr	r2, [r2, #16]
 8011a10:	f06f 010e 	mvn.w	r1, #14
 8011a14:	4610      	mov	r0, r2
 8011a16:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011a18:	6879      	ldr	r1, [r7, #4]
 8011a1a:	480a      	ldr	r0, [pc, #40]	@ (8011a44 <tcp_input_delayed_close+0x7c>)
 8011a1c:	f7ff fa3c 	bl	8010e98 <tcp_pcb_remove>
    tcp_free(pcb);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7fe f823 	bl	800fa6c <tcp_free>
    return 1;
 8011a26:	2301      	movs	r3, #1
 8011a28:	e000      	b.n	8011a2c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011a2a:	2300      	movs	r3, #0
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3708      	adds	r7, #8
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	0801ecac 	.word	0x0801ecac
 8011a38:	0801ee7c 	.word	0x0801ee7c
 8011a3c:	0801ecf8 	.word	0x0801ecf8
 8011a40:	20013db9 	.word	0x20013db9
 8011a44:	20013d7c 	.word	0x20013d7c

08011a48 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011a48:	b590      	push	{r4, r7, lr}
 8011a4a:	b08b      	sub	sp, #44	@ 0x2c
 8011a4c:	af04      	add	r7, sp, #16
 8011a4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011a50:	4b6f      	ldr	r3, [pc, #444]	@ (8011c10 <tcp_listen_input+0x1c8>)
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f040 80d2 	bne.w	8011c02 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d106      	bne.n	8011a72 <tcp_listen_input+0x2a>
 8011a64:	4b6b      	ldr	r3, [pc, #428]	@ (8011c14 <tcp_listen_input+0x1cc>)
 8011a66:	f240 2281 	movw	r2, #641	@ 0x281
 8011a6a:	496b      	ldr	r1, [pc, #428]	@ (8011c18 <tcp_listen_input+0x1d0>)
 8011a6c:	486b      	ldr	r0, [pc, #428]	@ (8011c1c <tcp_listen_input+0x1d4>)
 8011a6e:	f009 fae7 	bl	801b040 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011a72:	4b67      	ldr	r3, [pc, #412]	@ (8011c10 <tcp_listen_input+0x1c8>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	f003 0310 	and.w	r3, r3, #16
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d019      	beq.n	8011ab2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a7e:	4b68      	ldr	r3, [pc, #416]	@ (8011c20 <tcp_listen_input+0x1d8>)
 8011a80:	6819      	ldr	r1, [r3, #0]
 8011a82:	4b68      	ldr	r3, [pc, #416]	@ (8011c24 <tcp_listen_input+0x1dc>)
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	461a      	mov	r2, r3
 8011a88:	4b67      	ldr	r3, [pc, #412]	@ (8011c28 <tcp_listen_input+0x1e0>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a8e:	4b67      	ldr	r3, [pc, #412]	@ (8011c2c <tcp_listen_input+0x1e4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a92:	885b      	ldrh	r3, [r3, #2]
 8011a94:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a96:	4a65      	ldr	r2, [pc, #404]	@ (8011c2c <tcp_listen_input+0x1e4>)
 8011a98:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a9a:	8812      	ldrh	r2, [r2, #0]
 8011a9c:	b292      	uxth	r2, r2
 8011a9e:	9202      	str	r2, [sp, #8]
 8011aa0:	9301      	str	r3, [sp, #4]
 8011aa2:	4b63      	ldr	r3, [pc, #396]	@ (8011c30 <tcp_listen_input+0x1e8>)
 8011aa4:	9300      	str	r3, [sp, #0]
 8011aa6:	4b63      	ldr	r3, [pc, #396]	@ (8011c34 <tcp_listen_input+0x1ec>)
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f002 ffb2 	bl	8014a14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011ab0:	e0a9      	b.n	8011c06 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011ab2:	4b57      	ldr	r3, [pc, #348]	@ (8011c10 <tcp_listen_input+0x1c8>)
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	f003 0302 	and.w	r3, r3, #2
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f000 80a3 	beq.w	8011c06 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	7d5b      	ldrb	r3, [r3, #21]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7ff f913 	bl	8010cf0 <tcp_alloc>
 8011aca:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d111      	bne.n	8011af6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	699b      	ldr	r3, [r3, #24]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00a      	beq.n	8011af0 <tcp_listen_input+0xa8>
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	699b      	ldr	r3, [r3, #24]
 8011ade:	687a      	ldr	r2, [r7, #4]
 8011ae0:	6910      	ldr	r0, [r2, #16]
 8011ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae6:	2100      	movs	r1, #0
 8011ae8:	4798      	blx	r3
 8011aea:	4603      	mov	r3, r0
 8011aec:	73bb      	strb	r3, [r7, #14]
      return;
 8011aee:	e08b      	b.n	8011c08 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011af0:	23f0      	movs	r3, #240	@ 0xf0
 8011af2:	73bb      	strb	r3, [r7, #14]
      return;
 8011af4:	e088      	b.n	8011c08 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011af6:	4b50      	ldr	r3, [pc, #320]	@ (8011c38 <tcp_listen_input+0x1f0>)
 8011af8:	695a      	ldr	r2, [r3, #20]
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011afe:	4b4e      	ldr	r3, [pc, #312]	@ (8011c38 <tcp_listen_input+0x1f0>)
 8011b00:	691a      	ldr	r2, [r3, #16]
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8ada      	ldrh	r2, [r3, #22]
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011b0e:	4b47      	ldr	r3, [pc, #284]	@ (8011c2c <tcp_listen_input+0x1e4>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	881b      	ldrh	r3, [r3, #0]
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	697b      	ldr	r3, [r7, #20]
 8011b18:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	2203      	movs	r2, #3
 8011b1e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011b20:	4b41      	ldr	r3, [pc, #260]	@ (8011c28 <tcp_listen_input+0x1e0>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	1c5a      	adds	r2, r3, #1
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8011b32:	6978      	ldr	r0, [r7, #20]
 8011b34:	f7ff fa44 	bl	8010fc0 <tcp_next_iss>
 8011b38:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	693a      	ldr	r2, [r7, #16]
 8011b3e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	693a      	ldr	r2, [r7, #16]
 8011b44:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011b52:	4b35      	ldr	r3, [pc, #212]	@ (8011c28 <tcp_listen_input+0x1e0>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	1e5a      	subs	r2, r3, #1
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	691a      	ldr	r2, [r3, #16]
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	7a5b      	ldrb	r3, [r3, #9]
 8011b6e:	f003 030c 	and.w	r3, r3, #12
 8011b72:	b2da      	uxtb	r2, r3
 8011b74:	697b      	ldr	r3, [r7, #20]
 8011b76:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	7a1a      	ldrb	r2, [r3, #8]
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011b80:	4b2e      	ldr	r3, [pc, #184]	@ (8011c3c <tcp_listen_input+0x1f4>)
 8011b82:	681a      	ldr	r2, [r3, #0]
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	60da      	str	r2, [r3, #12]
 8011b88:	4a2c      	ldr	r2, [pc, #176]	@ (8011c3c <tcp_listen_input+0x1f4>)
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	6013      	str	r3, [r2, #0]
 8011b8e:	f003 f903 	bl	8014d98 <tcp_timer_needed>
 8011b92:	4b2b      	ldr	r3, [pc, #172]	@ (8011c40 <tcp_listen_input+0x1f8>)
 8011b94:	2201      	movs	r2, #1
 8011b96:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011b98:	6978      	ldr	r0, [r7, #20]
 8011b9a:	f001 fd8b 	bl	80136b4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011b9e:	4b23      	ldr	r3, [pc, #140]	@ (8011c2c <tcp_listen_input+0x1e4>)
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	89db      	ldrh	r3, [r3, #14]
 8011ba4:	b29a      	uxth	r2, r3
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f006 fff9 	bl	8018bb8 <ip4_route>
 8011bc6:	4601      	mov	r1, r0
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	461a      	mov	r2, r3
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f7ff fa1c 	bl	801100c <tcp_eff_send_mss_netif>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011bdc:	2112      	movs	r1, #18
 8011bde:	6978      	ldr	r0, [r7, #20]
 8011be0:	f002 f848 	bl	8013c74 <tcp_enqueue_flags>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d004      	beq.n	8011bfa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	6978      	ldr	r0, [r7, #20]
 8011bf4:	f7fe f964 	bl	800fec0 <tcp_abandon>
      return;
 8011bf8:	e006      	b.n	8011c08 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011bfa:	6978      	ldr	r0, [r7, #20]
 8011bfc:	f002 f928 	bl	8013e50 <tcp_output>
  return;
 8011c00:	e001      	b.n	8011c06 <tcp_listen_input+0x1be>
    return;
 8011c02:	bf00      	nop
 8011c04:	e000      	b.n	8011c08 <tcp_listen_input+0x1c0>
  return;
 8011c06:	bf00      	nop
}
 8011c08:	371c      	adds	r7, #28
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd90      	pop	{r4, r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	20013db8 	.word	0x20013db8
 8011c14:	0801ecac 	.word	0x0801ecac
 8011c18:	0801eea4 	.word	0x0801eea4
 8011c1c:	0801ecf8 	.word	0x0801ecf8
 8011c20:	20013db0 	.word	0x20013db0
 8011c24:	20013db6 	.word	0x20013db6
 8011c28:	20013dac 	.word	0x20013dac
 8011c2c:	20013d9c 	.word	0x20013d9c
 8011c30:	2000a30c 	.word	0x2000a30c
 8011c34:	2000a310 	.word	0x2000a310
 8011c38:	2000a2fc 	.word	0x2000a2fc
 8011c3c:	20013d7c 	.word	0x20013d7c
 8011c40:	20013d84 	.word	0x20013d84

08011c44 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011c44:	b580      	push	{r7, lr}
 8011c46:	b086      	sub	sp, #24
 8011c48:	af04      	add	r7, sp, #16
 8011c4a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8011d0c <tcp_timewait_input+0xc8>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d153      	bne.n	8011d00 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d106      	bne.n	8011c6c <tcp_timewait_input+0x28>
 8011c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8011d10 <tcp_timewait_input+0xcc>)
 8011c60:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011c64:	492b      	ldr	r1, [pc, #172]	@ (8011d14 <tcp_timewait_input+0xd0>)
 8011c66:	482c      	ldr	r0, [pc, #176]	@ (8011d18 <tcp_timewait_input+0xd4>)
 8011c68:	f009 f9ea 	bl	801b040 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011c6c:	4b27      	ldr	r3, [pc, #156]	@ (8011d0c <tcp_timewait_input+0xc8>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 0302 	and.w	r3, r3, #2
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d02a      	beq.n	8011cce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011c78:	4b28      	ldr	r3, [pc, #160]	@ (8011d1c <tcp_timewait_input+0xd8>)
 8011c7a:	681a      	ldr	r2, [r3, #0]
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	db2d      	blt.n	8011ce2 <tcp_timewait_input+0x9e>
 8011c86:	4b25      	ldr	r3, [pc, #148]	@ (8011d1c <tcp_timewait_input+0xd8>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c8e:	6879      	ldr	r1, [r7, #4]
 8011c90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011c92:	440b      	add	r3, r1
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	dc23      	bgt.n	8011ce2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c9a:	4b21      	ldr	r3, [pc, #132]	@ (8011d20 <tcp_timewait_input+0xdc>)
 8011c9c:	6819      	ldr	r1, [r3, #0]
 8011c9e:	4b21      	ldr	r3, [pc, #132]	@ (8011d24 <tcp_timewait_input+0xe0>)
 8011ca0:	881b      	ldrh	r3, [r3, #0]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8011d1c <tcp_timewait_input+0xd8>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011caa:	4b1f      	ldr	r3, [pc, #124]	@ (8011d28 <tcp_timewait_input+0xe4>)
 8011cac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cae:	885b      	ldrh	r3, [r3, #2]
 8011cb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8011d28 <tcp_timewait_input+0xe4>)
 8011cb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cb6:	8812      	ldrh	r2, [r2, #0]
 8011cb8:	b292      	uxth	r2, r2
 8011cba:	9202      	str	r2, [sp, #8]
 8011cbc:	9301      	str	r3, [sp, #4]
 8011cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8011d2c <tcp_timewait_input+0xe8>)
 8011cc0:	9300      	str	r3, [sp, #0]
 8011cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8011d30 <tcp_timewait_input+0xec>)
 8011cc4:	4602      	mov	r2, r0
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f002 fea4 	bl	8014a14 <tcp_rst>
      return;
 8011ccc:	e01b      	b.n	8011d06 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011cce:	4b0f      	ldr	r3, [pc, #60]	@ (8011d0c <tcp_timewait_input+0xc8>)
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f003 0301 	and.w	r3, r3, #1
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d003      	beq.n	8011ce2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011cda:	4b16      	ldr	r3, [pc, #88]	@ (8011d34 <tcp_timewait_input+0xf0>)
 8011cdc:	681a      	ldr	r2, [r3, #0]
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011ce2:	4b10      	ldr	r3, [pc, #64]	@ (8011d24 <tcp_timewait_input+0xe0>)
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d00c      	beq.n	8011d04 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8b5b      	ldrh	r3, [r3, #26]
 8011cee:	f043 0302 	orr.w	r3, r3, #2
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f002 f8a9 	bl	8013e50 <tcp_output>
  }
  return;
 8011cfe:	e001      	b.n	8011d04 <tcp_timewait_input+0xc0>
    return;
 8011d00:	bf00      	nop
 8011d02:	e000      	b.n	8011d06 <tcp_timewait_input+0xc2>
  return;
 8011d04:	bf00      	nop
}
 8011d06:	3708      	adds	r7, #8
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20013db8 	.word	0x20013db8
 8011d10:	0801ecac 	.word	0x0801ecac
 8011d14:	0801eec4 	.word	0x0801eec4
 8011d18:	0801ecf8 	.word	0x0801ecf8
 8011d1c:	20013dac 	.word	0x20013dac
 8011d20:	20013db0 	.word	0x20013db0
 8011d24:	20013db6 	.word	0x20013db6
 8011d28:	20013d9c 	.word	0x20013d9c
 8011d2c:	2000a30c 	.word	0x2000a30c
 8011d30:	2000a310 	.word	0x2000a310
 8011d34:	20013d70 	.word	0x20013d70

08011d38 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011d38:	b590      	push	{r4, r7, lr}
 8011d3a:	b08d      	sub	sp, #52	@ 0x34
 8011d3c:	af04      	add	r7, sp, #16
 8011d3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011d40:	2300      	movs	r3, #0
 8011d42:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8011d44:	2300      	movs	r3, #0
 8011d46:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <tcp_process+0x24>
 8011d4e:	4b9d      	ldr	r3, [pc, #628]	@ (8011fc4 <tcp_process+0x28c>)
 8011d50:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011d54:	499c      	ldr	r1, [pc, #624]	@ (8011fc8 <tcp_process+0x290>)
 8011d56:	489d      	ldr	r0, [pc, #628]	@ (8011fcc <tcp_process+0x294>)
 8011d58:	f009 f972 	bl	801b040 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011d5c:	4b9c      	ldr	r3, [pc, #624]	@ (8011fd0 <tcp_process+0x298>)
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	f003 0304 	and.w	r3, r3, #4
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d04e      	beq.n	8011e06 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	7d1b      	ldrb	r3, [r3, #20]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d108      	bne.n	8011d82 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d74:	4b97      	ldr	r3, [pc, #604]	@ (8011fd4 <tcp_process+0x29c>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d123      	bne.n	8011dc4 <tcp_process+0x8c>
        acceptable = 1;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	77fb      	strb	r3, [r7, #31]
 8011d80:	e020      	b.n	8011dc4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d86:	4b94      	ldr	r3, [pc, #592]	@ (8011fd8 <tcp_process+0x2a0>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d102      	bne.n	8011d94 <tcp_process+0x5c>
        acceptable = 1;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	77fb      	strb	r3, [r7, #31]
 8011d92:	e017      	b.n	8011dc4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d94:	4b90      	ldr	r3, [pc, #576]	@ (8011fd8 <tcp_process+0x2a0>)
 8011d96:	681a      	ldr	r2, [r3, #0]
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	db10      	blt.n	8011dc4 <tcp_process+0x8c>
 8011da2:	4b8d      	ldr	r3, [pc, #564]	@ (8011fd8 <tcp_process+0x2a0>)
 8011da4:	681a      	ldr	r2, [r3, #0]
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011daa:	6879      	ldr	r1, [r7, #4]
 8011dac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011dae:	440b      	add	r3, r1
 8011db0:	1ad3      	subs	r3, r2, r3
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	dc06      	bgt.n	8011dc4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	8b5b      	ldrh	r3, [r3, #26]
 8011dba:	f043 0302 	orr.w	r3, r3, #2
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011dc4:	7ffb      	ldrb	r3, [r7, #31]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d01b      	beq.n	8011e02 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	7d1b      	ldrb	r3, [r3, #20]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d106      	bne.n	8011de0 <tcp_process+0xa8>
 8011dd2:	4b7c      	ldr	r3, [pc, #496]	@ (8011fc4 <tcp_process+0x28c>)
 8011dd4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8011dd8:	4980      	ldr	r1, [pc, #512]	@ (8011fdc <tcp_process+0x2a4>)
 8011dda:	487c      	ldr	r0, [pc, #496]	@ (8011fcc <tcp_process+0x294>)
 8011ddc:	f009 f930 	bl	801b040 <iprintf>
      recv_flags |= TF_RESET;
 8011de0:	4b7f      	ldr	r3, [pc, #508]	@ (8011fe0 <tcp_process+0x2a8>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	f043 0308 	orr.w	r3, r3, #8
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	4b7d      	ldr	r3, [pc, #500]	@ (8011fe0 <tcp_process+0x2a8>)
 8011dec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	8b5b      	ldrh	r3, [r3, #26]
 8011df2:	f023 0301 	bic.w	r3, r3, #1
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011dfc:	f06f 030d 	mvn.w	r3, #13
 8011e00:	e37a      	b.n	80124f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011e02:	2300      	movs	r3, #0
 8011e04:	e378      	b.n	80124f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011e06:	4b72      	ldr	r3, [pc, #456]	@ (8011fd0 <tcp_process+0x298>)
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	f003 0302 	and.w	r3, r3, #2
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d010      	beq.n	8011e34 <tcp_process+0xfc>
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	7d1b      	ldrb	r3, [r3, #20]
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	d00c      	beq.n	8011e34 <tcp_process+0xfc>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	7d1b      	ldrb	r3, [r3, #20]
 8011e1e:	2b03      	cmp	r3, #3
 8011e20:	d008      	beq.n	8011e34 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	8b5b      	ldrh	r3, [r3, #26]
 8011e26:	f043 0302 	orr.w	r3, r3, #2
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011e30:	2300      	movs	r3, #0
 8011e32:	e361      	b.n	80124f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	8b5b      	ldrh	r3, [r3, #26]
 8011e38:	f003 0310 	and.w	r3, r3, #16
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d103      	bne.n	8011e48 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011e40:	4b68      	ldr	r3, [pc, #416]	@ (8011fe4 <tcp_process+0x2ac>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2200      	movs	r2, #0
 8011e54:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f001 fc2b 	bl	80136b4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	7d1b      	ldrb	r3, [r3, #20]
 8011e62:	3b02      	subs	r3, #2
 8011e64:	2b07      	cmp	r3, #7
 8011e66:	f200 8337 	bhi.w	80124d8 <tcp_process+0x7a0>
 8011e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8011e70 <tcp_process+0x138>)
 8011e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e70:	08011e91 	.word	0x08011e91
 8011e74:	080120c1 	.word	0x080120c1
 8011e78:	08012239 	.word	0x08012239
 8011e7c:	08012263 	.word	0x08012263
 8011e80:	08012387 	.word	0x08012387
 8011e84:	08012239 	.word	0x08012239
 8011e88:	08012413 	.word	0x08012413
 8011e8c:	080124a3 	.word	0x080124a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011e90:	4b4f      	ldr	r3, [pc, #316]	@ (8011fd0 <tcp_process+0x298>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f003 0310 	and.w	r3, r3, #16
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f000 80e4 	beq.w	8012066 <tcp_process+0x32e>
 8011e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8011fd0 <tcp_process+0x298>)
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	f003 0302 	and.w	r3, r3, #2
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f000 80dd 	beq.w	8012066 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011eb0:	1c5a      	adds	r2, r3, #1
 8011eb2:	4b48      	ldr	r3, [pc, #288]	@ (8011fd4 <tcp_process+0x29c>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	f040 80d5 	bne.w	8012066 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011ebc:	4b46      	ldr	r3, [pc, #280]	@ (8011fd8 <tcp_process+0x2a0>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	1c5a      	adds	r2, r3, #1
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8011ece:	4b41      	ldr	r3, [pc, #260]	@ (8011fd4 <tcp_process+0x29c>)
 8011ed0:	681a      	ldr	r2, [r3, #0]
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011ed6:	4b44      	ldr	r3, [pc, #272]	@ (8011fe8 <tcp_process+0x2b0>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	89db      	ldrh	r3, [r3, #14]
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011ef0:	4b39      	ldr	r3, [pc, #228]	@ (8011fd8 <tcp_process+0x2a0>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	1e5a      	subs	r2, r3, #1
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2204      	movs	r2, #4
 8011efe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	3304      	adds	r3, #4
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f006 fe55 	bl	8018bb8 <ip4_route>
 8011f0e:	4601      	mov	r1, r0
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	3304      	adds	r3, #4
 8011f14:	461a      	mov	r2, r3
 8011f16:	4620      	mov	r0, r4
 8011f18:	f7ff f878 	bl	801100c <tcp_eff_send_mss_netif>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	461a      	mov	r2, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f28:	009a      	lsls	r2, r3, #2
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f2e:	005b      	lsls	r3, r3, #1
 8011f30:	f241 111c 	movw	r1, #4380	@ 0x111c
 8011f34:	428b      	cmp	r3, r1
 8011f36:	bf38      	it	cc
 8011f38:	460b      	movcc	r3, r1
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d204      	bcs.n	8011f48 <tcp_process+0x210>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f42:	009b      	lsls	r3, r3, #2
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	e00d      	b.n	8011f64 <tcp_process+0x22c>
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d904      	bls.n	8011f60 <tcp_process+0x228>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011f5a:	005b      	lsls	r3, r3, #1
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	e001      	b.n	8011f64 <tcp_process+0x22c>
 8011f60:	f241 131c 	movw	r3, #4380	@ 0x111c
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d106      	bne.n	8011f82 <tcp_process+0x24a>
 8011f74:	4b13      	ldr	r3, [pc, #76]	@ (8011fc4 <tcp_process+0x28c>)
 8011f76:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8011f7a:	491c      	ldr	r1, [pc, #112]	@ (8011fec <tcp_process+0x2b4>)
 8011f7c:	4813      	ldr	r0, [pc, #76]	@ (8011fcc <tcp_process+0x294>)
 8011f7e:	f009 f85f 	bl	801b040 <iprintf>
        --pcb->snd_queuelen;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011f88:	3b01      	subs	r3, #1
 8011f8a:	b29a      	uxth	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011f96:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d12a      	bne.n	8011ff4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011fa2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d106      	bne.n	8011fb8 <tcp_process+0x280>
 8011faa:	4b06      	ldr	r3, [pc, #24]	@ (8011fc4 <tcp_process+0x28c>)
 8011fac:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8011fb0:	490f      	ldr	r1, [pc, #60]	@ (8011ff0 <tcp_process+0x2b8>)
 8011fb2:	4806      	ldr	r0, [pc, #24]	@ (8011fcc <tcp_process+0x294>)
 8011fb4:	f009 f844 	bl	801b040 <iprintf>
          pcb->unsent = rseg->next;
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011fc0:	e01c      	b.n	8011ffc <tcp_process+0x2c4>
 8011fc2:	bf00      	nop
 8011fc4:	0801ecac 	.word	0x0801ecac
 8011fc8:	0801eee4 	.word	0x0801eee4
 8011fcc:	0801ecf8 	.word	0x0801ecf8
 8011fd0:	20013db8 	.word	0x20013db8
 8011fd4:	20013db0 	.word	0x20013db0
 8011fd8:	20013dac 	.word	0x20013dac
 8011fdc:	0801ef00 	.word	0x0801ef00
 8011fe0:	20013db9 	.word	0x20013db9
 8011fe4:	20013d70 	.word	0x20013d70
 8011fe8:	20013d9c 	.word	0x20013d9c
 8011fec:	0801ef20 	.word	0x0801ef20
 8011ff0:	0801ef38 	.word	0x0801ef38
        } else {
          pcb->unacked = rseg->next;
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8011ffc:	6978      	ldr	r0, [r7, #20]
 8011ffe:	f7fe fd0e 	bl	8010a1e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012006:	2b00      	cmp	r3, #0
 8012008:	d104      	bne.n	8012014 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012010:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012012:	e006      	b.n	8012022 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2200      	movs	r2, #0
 801201e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00a      	beq.n	8012042 <tcp_process+0x30a>
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012032:	687a      	ldr	r2, [r7, #4]
 8012034:	6910      	ldr	r0, [r2, #16]
 8012036:	2200      	movs	r2, #0
 8012038:	6879      	ldr	r1, [r7, #4]
 801203a:	4798      	blx	r3
 801203c:	4603      	mov	r3, r0
 801203e:	77bb      	strb	r3, [r7, #30]
 8012040:	e001      	b.n	8012046 <tcp_process+0x30e>
 8012042:	2300      	movs	r3, #0
 8012044:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8012046:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801204a:	f113 0f0d 	cmn.w	r3, #13
 801204e:	d102      	bne.n	8012056 <tcp_process+0x31e>
          return ERR_ABRT;
 8012050:	f06f 030c 	mvn.w	r3, #12
 8012054:	e250      	b.n	80124f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	8b5b      	ldrh	r3, [r3, #26]
 801205a:	f043 0302 	orr.w	r3, r3, #2
 801205e:	b29a      	uxth	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012064:	e23a      	b.n	80124dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012066:	4b98      	ldr	r3, [pc, #608]	@ (80122c8 <tcp_process+0x590>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	f003 0310 	and.w	r3, r3, #16
 801206e:	2b00      	cmp	r3, #0
 8012070:	f000 8234 	beq.w	80124dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012074:	4b95      	ldr	r3, [pc, #596]	@ (80122cc <tcp_process+0x594>)
 8012076:	6819      	ldr	r1, [r3, #0]
 8012078:	4b95      	ldr	r3, [pc, #596]	@ (80122d0 <tcp_process+0x598>)
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	461a      	mov	r2, r3
 801207e:	4b95      	ldr	r3, [pc, #596]	@ (80122d4 <tcp_process+0x59c>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012084:	4b94      	ldr	r3, [pc, #592]	@ (80122d8 <tcp_process+0x5a0>)
 8012086:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012088:	885b      	ldrh	r3, [r3, #2]
 801208a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801208c:	4a92      	ldr	r2, [pc, #584]	@ (80122d8 <tcp_process+0x5a0>)
 801208e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	b292      	uxth	r2, r2
 8012094:	9202      	str	r2, [sp, #8]
 8012096:	9301      	str	r3, [sp, #4]
 8012098:	4b90      	ldr	r3, [pc, #576]	@ (80122dc <tcp_process+0x5a4>)
 801209a:	9300      	str	r3, [sp, #0]
 801209c:	4b90      	ldr	r3, [pc, #576]	@ (80122e0 <tcp_process+0x5a8>)
 801209e:	4602      	mov	r2, r0
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	f002 fcb7 	bl	8014a14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80120ac:	2b05      	cmp	r3, #5
 80120ae:	f200 8215 	bhi.w	80124dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2200      	movs	r2, #0
 80120b6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f002 fa73 	bl	80145a4 <tcp_rexmit_rto>
      break;
 80120be:	e20d      	b.n	80124dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80120c0:	4b81      	ldr	r3, [pc, #516]	@ (80122c8 <tcp_process+0x590>)
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	f003 0310 	and.w	r3, r3, #16
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f000 80a1 	beq.w	8012210 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120ce:	4b7f      	ldr	r3, [pc, #508]	@ (80122cc <tcp_process+0x594>)
 80120d0:	681a      	ldr	r2, [r3, #0]
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	3b01      	subs	r3, #1
 80120da:	2b00      	cmp	r3, #0
 80120dc:	db7e      	blt.n	80121dc <tcp_process+0x4a4>
 80120de:	4b7b      	ldr	r3, [pc, #492]	@ (80122cc <tcp_process+0x594>)
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	dc77      	bgt.n	80121dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2204      	movs	r2, #4
 80120f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d102      	bne.n	8012100 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80120fa:	23fa      	movs	r3, #250	@ 0xfa
 80120fc:	77bb      	strb	r3, [r7, #30]
 80120fe:	e01d      	b.n	801213c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012104:	699b      	ldr	r3, [r3, #24]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <tcp_process+0x3e0>
 801210a:	4b76      	ldr	r3, [pc, #472]	@ (80122e4 <tcp_process+0x5ac>)
 801210c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8012110:	4975      	ldr	r1, [pc, #468]	@ (80122e8 <tcp_process+0x5b0>)
 8012112:	4876      	ldr	r0, [pc, #472]	@ (80122ec <tcp_process+0x5b4>)
 8012114:	f008 ff94 	bl	801b040 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801211c:	699b      	ldr	r3, [r3, #24]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00a      	beq.n	8012138 <tcp_process+0x400>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012126:	699b      	ldr	r3, [r3, #24]
 8012128:	687a      	ldr	r2, [r7, #4]
 801212a:	6910      	ldr	r0, [r2, #16]
 801212c:	2200      	movs	r2, #0
 801212e:	6879      	ldr	r1, [r7, #4]
 8012130:	4798      	blx	r3
 8012132:	4603      	mov	r3, r0
 8012134:	77bb      	strb	r3, [r7, #30]
 8012136:	e001      	b.n	801213c <tcp_process+0x404>
 8012138:	23f0      	movs	r3, #240	@ 0xf0
 801213a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801213c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00a      	beq.n	801215a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012144:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012148:	f113 0f0d 	cmn.w	r3, #13
 801214c:	d002      	beq.n	8012154 <tcp_process+0x41c>
              tcp_abort(pcb);
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7fd ff74 	bl	801003c <tcp_abort>
            }
            return ERR_ABRT;
 8012154:	f06f 030c 	mvn.w	r3, #12
 8012158:	e1ce      	b.n	80124f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 fae0 	bl	8012720 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012160:	4b63      	ldr	r3, [pc, #396]	@ (80122f0 <tcp_process+0x5b8>)
 8012162:	881b      	ldrh	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d005      	beq.n	8012174 <tcp_process+0x43c>
            recv_acked--;
 8012168:	4b61      	ldr	r3, [pc, #388]	@ (80122f0 <tcp_process+0x5b8>)
 801216a:	881b      	ldrh	r3, [r3, #0]
 801216c:	3b01      	subs	r3, #1
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b5f      	ldr	r3, [pc, #380]	@ (80122f0 <tcp_process+0x5b8>)
 8012172:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012178:	009a      	lsls	r2, r3, #2
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801217e:	005b      	lsls	r3, r3, #1
 8012180:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012184:	428b      	cmp	r3, r1
 8012186:	bf38      	it	cc
 8012188:	460b      	movcc	r3, r1
 801218a:	429a      	cmp	r2, r3
 801218c:	d204      	bcs.n	8012198 <tcp_process+0x460>
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	b29b      	uxth	r3, r3
 8012196:	e00d      	b.n	80121b4 <tcp_process+0x47c>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801219c:	005b      	lsls	r3, r3, #1
 801219e:	f241 121c 	movw	r2, #4380	@ 0x111c
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d904      	bls.n	80121b0 <tcp_process+0x478>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	e001      	b.n	80121b4 <tcp_process+0x47c>
 80121b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80121ba:	4b4e      	ldr	r3, [pc, #312]	@ (80122f4 <tcp_process+0x5bc>)
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	f003 0320 	and.w	r3, r3, #32
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d037      	beq.n	8012236 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f043 0302 	orr.w	r3, r3, #2
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2207      	movs	r2, #7
 80121d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80121da:	e02c      	b.n	8012236 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121dc:	4b3b      	ldr	r3, [pc, #236]	@ (80122cc <tcp_process+0x594>)
 80121de:	6819      	ldr	r1, [r3, #0]
 80121e0:	4b3b      	ldr	r3, [pc, #236]	@ (80122d0 <tcp_process+0x598>)
 80121e2:	881b      	ldrh	r3, [r3, #0]
 80121e4:	461a      	mov	r2, r3
 80121e6:	4b3b      	ldr	r3, [pc, #236]	@ (80122d4 <tcp_process+0x59c>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121ec:	4b3a      	ldr	r3, [pc, #232]	@ (80122d8 <tcp_process+0x5a0>)
 80121ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121f0:	885b      	ldrh	r3, [r3, #2]
 80121f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121f4:	4a38      	ldr	r2, [pc, #224]	@ (80122d8 <tcp_process+0x5a0>)
 80121f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121f8:	8812      	ldrh	r2, [r2, #0]
 80121fa:	b292      	uxth	r2, r2
 80121fc:	9202      	str	r2, [sp, #8]
 80121fe:	9301      	str	r3, [sp, #4]
 8012200:	4b36      	ldr	r3, [pc, #216]	@ (80122dc <tcp_process+0x5a4>)
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4b36      	ldr	r3, [pc, #216]	@ (80122e0 <tcp_process+0x5a8>)
 8012206:	4602      	mov	r2, r0
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f002 fc03 	bl	8014a14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801220e:	e167      	b.n	80124e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012210:	4b2d      	ldr	r3, [pc, #180]	@ (80122c8 <tcp_process+0x590>)
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	f003 0302 	and.w	r3, r3, #2
 8012218:	2b00      	cmp	r3, #0
 801221a:	f000 8161 	beq.w	80124e0 <tcp_process+0x7a8>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012222:	1e5a      	subs	r2, r3, #1
 8012224:	4b2b      	ldr	r3, [pc, #172]	@ (80122d4 <tcp_process+0x59c>)
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	429a      	cmp	r2, r3
 801222a:	f040 8159 	bne.w	80124e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801222e:	6878      	ldr	r0, [r7, #4]
 8012230:	f002 f9da 	bl	80145e8 <tcp_rexmit>
      break;
 8012234:	e154      	b.n	80124e0 <tcp_process+0x7a8>
 8012236:	e153      	b.n	80124e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f000 fa71 	bl	8012720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801223e:	4b2d      	ldr	r3, [pc, #180]	@ (80122f4 <tcp_process+0x5bc>)
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	f003 0320 	and.w	r3, r3, #32
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 814c 	beq.w	80124e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	8b5b      	ldrh	r3, [r3, #26]
 8012250:	f043 0302 	orr.w	r3, r3, #2
 8012254:	b29a      	uxth	r2, r3
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2207      	movs	r2, #7
 801225e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012260:	e140      	b.n	80124e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f000 fa5c 	bl	8012720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012268:	4b22      	ldr	r3, [pc, #136]	@ (80122f4 <tcp_process+0x5bc>)
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	f003 0320 	and.w	r3, r3, #32
 8012270:	2b00      	cmp	r3, #0
 8012272:	d071      	beq.n	8012358 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012274:	4b14      	ldr	r3, [pc, #80]	@ (80122c8 <tcp_process+0x590>)
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	f003 0310 	and.w	r3, r3, #16
 801227c:	2b00      	cmp	r3, #0
 801227e:	d060      	beq.n	8012342 <tcp_process+0x60a>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012284:	4b11      	ldr	r3, [pc, #68]	@ (80122cc <tcp_process+0x594>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	429a      	cmp	r2, r3
 801228a:	d15a      	bne.n	8012342 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012290:	2b00      	cmp	r3, #0
 8012292:	d156      	bne.n	8012342 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	8b5b      	ldrh	r3, [r3, #26]
 8012298:	f043 0302 	orr.w	r3, r3, #2
 801229c:	b29a      	uxth	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7fe fda8 	bl	8010df8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80122a8:	4b13      	ldr	r3, [pc, #76]	@ (80122f8 <tcp_process+0x5c0>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d105      	bne.n	80122be <tcp_process+0x586>
 80122b2:	4b11      	ldr	r3, [pc, #68]	@ (80122f8 <tcp_process+0x5c0>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	4a0f      	ldr	r2, [pc, #60]	@ (80122f8 <tcp_process+0x5c0>)
 80122ba:	6013      	str	r3, [r2, #0]
 80122bc:	e02e      	b.n	801231c <tcp_process+0x5e4>
 80122be:	4b0e      	ldr	r3, [pc, #56]	@ (80122f8 <tcp_process+0x5c0>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	613b      	str	r3, [r7, #16]
 80122c4:	e027      	b.n	8012316 <tcp_process+0x5de>
 80122c6:	bf00      	nop
 80122c8:	20013db8 	.word	0x20013db8
 80122cc:	20013db0 	.word	0x20013db0
 80122d0:	20013db6 	.word	0x20013db6
 80122d4:	20013dac 	.word	0x20013dac
 80122d8:	20013d9c 	.word	0x20013d9c
 80122dc:	2000a30c 	.word	0x2000a30c
 80122e0:	2000a310 	.word	0x2000a310
 80122e4:	0801ecac 	.word	0x0801ecac
 80122e8:	0801ef4c 	.word	0x0801ef4c
 80122ec:	0801ecf8 	.word	0x0801ecf8
 80122f0:	20013db4 	.word	0x20013db4
 80122f4:	20013db9 	.word	0x20013db9
 80122f8:	20013d7c 	.word	0x20013d7c
 80122fc:	693b      	ldr	r3, [r7, #16]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	429a      	cmp	r2, r3
 8012304:	d104      	bne.n	8012310 <tcp_process+0x5d8>
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	68da      	ldr	r2, [r3, #12]
 801230a:	693b      	ldr	r3, [r7, #16]
 801230c:	60da      	str	r2, [r3, #12]
 801230e:	e005      	b.n	801231c <tcp_process+0x5e4>
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	68db      	ldr	r3, [r3, #12]
 8012314:	613b      	str	r3, [r7, #16]
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d1ef      	bne.n	80122fc <tcp_process+0x5c4>
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	60da      	str	r2, [r3, #12]
 8012322:	4b77      	ldr	r3, [pc, #476]	@ (8012500 <tcp_process+0x7c8>)
 8012324:	2201      	movs	r2, #1
 8012326:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	220a      	movs	r2, #10
 801232c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801232e:	4b75      	ldr	r3, [pc, #468]	@ (8012504 <tcp_process+0x7cc>)
 8012330:	681a      	ldr	r2, [r3, #0]
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	60da      	str	r2, [r3, #12]
 8012336:	4a73      	ldr	r2, [pc, #460]	@ (8012504 <tcp_process+0x7cc>)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6013      	str	r3, [r2, #0]
 801233c:	f002 fd2c 	bl	8014d98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012340:	e0d2      	b.n	80124e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	8b5b      	ldrh	r3, [r3, #26]
 8012346:	f043 0302 	orr.w	r3, r3, #2
 801234a:	b29a      	uxth	r2, r3
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2208      	movs	r2, #8
 8012354:	751a      	strb	r2, [r3, #20]
      break;
 8012356:	e0c7      	b.n	80124e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012358:	4b6b      	ldr	r3, [pc, #428]	@ (8012508 <tcp_process+0x7d0>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f003 0310 	and.w	r3, r3, #16
 8012360:	2b00      	cmp	r3, #0
 8012362:	f000 80c1 	beq.w	80124e8 <tcp_process+0x7b0>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801236a:	4b68      	ldr	r3, [pc, #416]	@ (801250c <tcp_process+0x7d4>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	429a      	cmp	r2, r3
 8012370:	f040 80ba 	bne.w	80124e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012378:	2b00      	cmp	r3, #0
 801237a:	f040 80b5 	bne.w	80124e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2206      	movs	r2, #6
 8012382:	751a      	strb	r2, [r3, #20]
      break;
 8012384:	e0b0      	b.n	80124e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 f9ca 	bl	8012720 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801238c:	4b60      	ldr	r3, [pc, #384]	@ (8012510 <tcp_process+0x7d8>)
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 0320 	and.w	r3, r3, #32
 8012394:	2b00      	cmp	r3, #0
 8012396:	f000 80a9 	beq.w	80124ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	8b5b      	ldrh	r3, [r3, #26]
 801239e:	f043 0302 	orr.w	r3, r3, #2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80123a8:	6878      	ldr	r0, [r7, #4]
 80123aa:	f7fe fd25 	bl	8010df8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80123ae:	4b59      	ldr	r3, [pc, #356]	@ (8012514 <tcp_process+0x7dc>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	687a      	ldr	r2, [r7, #4]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d105      	bne.n	80123c4 <tcp_process+0x68c>
 80123b8:	4b56      	ldr	r3, [pc, #344]	@ (8012514 <tcp_process+0x7dc>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	4a55      	ldr	r2, [pc, #340]	@ (8012514 <tcp_process+0x7dc>)
 80123c0:	6013      	str	r3, [r2, #0]
 80123c2:	e013      	b.n	80123ec <tcp_process+0x6b4>
 80123c4:	4b53      	ldr	r3, [pc, #332]	@ (8012514 <tcp_process+0x7dc>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	60fb      	str	r3, [r7, #12]
 80123ca:	e00c      	b.n	80123e6 <tcp_process+0x6ae>
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	68db      	ldr	r3, [r3, #12]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d104      	bne.n	80123e0 <tcp_process+0x6a8>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	68da      	ldr	r2, [r3, #12]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	60da      	str	r2, [r3, #12]
 80123de:	e005      	b.n	80123ec <tcp_process+0x6b4>
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	68db      	ldr	r3, [r3, #12]
 80123e4:	60fb      	str	r3, [r7, #12]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1ef      	bne.n	80123cc <tcp_process+0x694>
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	60da      	str	r2, [r3, #12]
 80123f2:	4b43      	ldr	r3, [pc, #268]	@ (8012500 <tcp_process+0x7c8>)
 80123f4:	2201      	movs	r2, #1
 80123f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	220a      	movs	r2, #10
 80123fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80123fe:	4b41      	ldr	r3, [pc, #260]	@ (8012504 <tcp_process+0x7cc>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	60da      	str	r2, [r3, #12]
 8012406:	4a3f      	ldr	r2, [pc, #252]	@ (8012504 <tcp_process+0x7cc>)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6013      	str	r3, [r2, #0]
 801240c:	f002 fcc4 	bl	8014d98 <tcp_timer_needed>
      }
      break;
 8012410:	e06c      	b.n	80124ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f000 f984 	bl	8012720 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012418:	4b3b      	ldr	r3, [pc, #236]	@ (8012508 <tcp_process+0x7d0>)
 801241a:	781b      	ldrb	r3, [r3, #0]
 801241c:	f003 0310 	and.w	r3, r3, #16
 8012420:	2b00      	cmp	r3, #0
 8012422:	d065      	beq.n	80124f0 <tcp_process+0x7b8>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012428:	4b38      	ldr	r3, [pc, #224]	@ (801250c <tcp_process+0x7d4>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	429a      	cmp	r2, r3
 801242e:	d15f      	bne.n	80124f0 <tcp_process+0x7b8>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012434:	2b00      	cmp	r3, #0
 8012436:	d15b      	bne.n	80124f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7fe fcdd 	bl	8010df8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801243e:	4b35      	ldr	r3, [pc, #212]	@ (8012514 <tcp_process+0x7dc>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	429a      	cmp	r2, r3
 8012446:	d105      	bne.n	8012454 <tcp_process+0x71c>
 8012448:	4b32      	ldr	r3, [pc, #200]	@ (8012514 <tcp_process+0x7dc>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	68db      	ldr	r3, [r3, #12]
 801244e:	4a31      	ldr	r2, [pc, #196]	@ (8012514 <tcp_process+0x7dc>)
 8012450:	6013      	str	r3, [r2, #0]
 8012452:	e013      	b.n	801247c <tcp_process+0x744>
 8012454:	4b2f      	ldr	r3, [pc, #188]	@ (8012514 <tcp_process+0x7dc>)
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	61bb      	str	r3, [r7, #24]
 801245a:	e00c      	b.n	8012476 <tcp_process+0x73e>
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	429a      	cmp	r2, r3
 8012464:	d104      	bne.n	8012470 <tcp_process+0x738>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	68da      	ldr	r2, [r3, #12]
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	60da      	str	r2, [r3, #12]
 801246e:	e005      	b.n	801247c <tcp_process+0x744>
 8012470:	69bb      	ldr	r3, [r7, #24]
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	61bb      	str	r3, [r7, #24]
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1ef      	bne.n	801245c <tcp_process+0x724>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2200      	movs	r2, #0
 8012480:	60da      	str	r2, [r3, #12]
 8012482:	4b1f      	ldr	r3, [pc, #124]	@ (8012500 <tcp_process+0x7c8>)
 8012484:	2201      	movs	r2, #1
 8012486:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	220a      	movs	r2, #10
 801248c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801248e:	4b1d      	ldr	r3, [pc, #116]	@ (8012504 <tcp_process+0x7cc>)
 8012490:	681a      	ldr	r2, [r3, #0]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	60da      	str	r2, [r3, #12]
 8012496:	4a1b      	ldr	r2, [pc, #108]	@ (8012504 <tcp_process+0x7cc>)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6013      	str	r3, [r2, #0]
 801249c:	f002 fc7c 	bl	8014d98 <tcp_timer_needed>
      }
      break;
 80124a0:	e026      	b.n	80124f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 f93c 	bl	8012720 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80124a8:	4b17      	ldr	r3, [pc, #92]	@ (8012508 <tcp_process+0x7d0>)
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	f003 0310 	and.w	r3, r3, #16
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d01f      	beq.n	80124f4 <tcp_process+0x7bc>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80124b8:	4b14      	ldr	r3, [pc, #80]	@ (801250c <tcp_process+0x7d4>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d119      	bne.n	80124f4 <tcp_process+0x7bc>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d115      	bne.n	80124f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80124c8:	4b11      	ldr	r3, [pc, #68]	@ (8012510 <tcp_process+0x7d8>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	f043 0310 	orr.w	r3, r3, #16
 80124d0:	b2da      	uxtb	r2, r3
 80124d2:	4b0f      	ldr	r3, [pc, #60]	@ (8012510 <tcp_process+0x7d8>)
 80124d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80124d6:	e00d      	b.n	80124f4 <tcp_process+0x7bc>
    default:
      break;
 80124d8:	bf00      	nop
 80124da:	e00c      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124dc:	bf00      	nop
 80124de:	e00a      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124e0:	bf00      	nop
 80124e2:	e008      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124e4:	bf00      	nop
 80124e6:	e006      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124e8:	bf00      	nop
 80124ea:	e004      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124ec:	bf00      	nop
 80124ee:	e002      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124f0:	bf00      	nop
 80124f2:	e000      	b.n	80124f6 <tcp_process+0x7be>
      break;
 80124f4:	bf00      	nop
  }
  return ERR_OK;
 80124f6:	2300      	movs	r3, #0
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3724      	adds	r7, #36	@ 0x24
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd90      	pop	{r4, r7, pc}
 8012500:	20013d84 	.word	0x20013d84
 8012504:	20013d80 	.word	0x20013d80
 8012508:	20013db8 	.word	0x20013db8
 801250c:	20013db0 	.word	0x20013db0
 8012510:	20013db9 	.word	0x20013db9
 8012514:	20013d7c 	.word	0x20013d7c

08012518 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012518:	b590      	push	{r4, r7, lr}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <tcp_oos_insert_segment+0x1e>
 8012528:	4b3b      	ldr	r3, [pc, #236]	@ (8012618 <tcp_oos_insert_segment+0x100>)
 801252a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801252e:	493b      	ldr	r1, [pc, #236]	@ (801261c <tcp_oos_insert_segment+0x104>)
 8012530:	483b      	ldr	r0, [pc, #236]	@ (8012620 <tcp_oos_insert_segment+0x108>)
 8012532:	f008 fd85 	bl	801b040 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	691b      	ldr	r3, [r3, #16]
 801253a:	899b      	ldrh	r3, [r3, #12]
 801253c:	b29b      	uxth	r3, r3
 801253e:	4618      	mov	r0, r3
 8012540:	f7fb fa1e 	bl	800d980 <lwip_htons>
 8012544:	4603      	mov	r3, r0
 8012546:	b2db      	uxtb	r3, r3
 8012548:	f003 0301 	and.w	r3, r3, #1
 801254c:	2b00      	cmp	r3, #0
 801254e:	d028      	beq.n	80125a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012550:	6838      	ldr	r0, [r7, #0]
 8012552:	f7fe fa4f 	bl	80109f4 <tcp_segs_free>
    next = NULL;
 8012556:	2300      	movs	r3, #0
 8012558:	603b      	str	r3, [r7, #0]
 801255a:	e056      	b.n	801260a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801255c:	683b      	ldr	r3, [r7, #0]
 801255e:	691b      	ldr	r3, [r3, #16]
 8012560:	899b      	ldrh	r3, [r3, #12]
 8012562:	b29b      	uxth	r3, r3
 8012564:	4618      	mov	r0, r3
 8012566:	f7fb fa0b 	bl	800d980 <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	b2db      	uxtb	r3, r3
 801256e:	f003 0301 	and.w	r3, r3, #1
 8012572:	2b00      	cmp	r3, #0
 8012574:	d00d      	beq.n	8012592 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	691b      	ldr	r3, [r3, #16]
 801257a:	899b      	ldrh	r3, [r3, #12]
 801257c:	b29c      	uxth	r4, r3
 801257e:	2001      	movs	r0, #1
 8012580:	f7fb f9fe 	bl	800d980 <lwip_htons>
 8012584:	4603      	mov	r3, r0
 8012586:	461a      	mov	r2, r3
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	691b      	ldr	r3, [r3, #16]
 801258c:	4322      	orrs	r2, r4
 801258e:	b292      	uxth	r2, r2
 8012590:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801259c:	68f8      	ldr	r0, [r7, #12]
 801259e:	f7fe fa3e 	bl	8010a1e <tcp_seg_free>
    while (next &&
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00e      	beq.n	80125c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	891b      	ldrh	r3, [r3, #8]
 80125ac:	461a      	mov	r2, r3
 80125ae:	4b1d      	ldr	r3, [pc, #116]	@ (8012624 <tcp_oos_insert_segment+0x10c>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	441a      	add	r2, r3
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	691b      	ldr	r3, [r3, #16]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	6839      	ldr	r1, [r7, #0]
 80125bc:	8909      	ldrh	r1, [r1, #8]
 80125be:	440b      	add	r3, r1
 80125c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	daca      	bge.n	801255c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80125c6:	683b      	ldr	r3, [r7, #0]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d01e      	beq.n	801260a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	891b      	ldrh	r3, [r3, #8]
 80125d0:	461a      	mov	r2, r3
 80125d2:	4b14      	ldr	r3, [pc, #80]	@ (8012624 <tcp_oos_insert_segment+0x10c>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	441a      	add	r2, r3
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	691b      	ldr	r3, [r3, #16]
 80125dc:	685b      	ldr	r3, [r3, #4]
 80125de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	dd12      	ble.n	801260a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	691b      	ldr	r3, [r3, #16]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012624 <tcp_oos_insert_segment+0x10c>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	1ad3      	subs	r3, r2, r3
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685a      	ldr	r2, [r3, #4]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	891b      	ldrh	r3, [r3, #8]
 8012602:	4619      	mov	r1, r3
 8012604:	4610      	mov	r0, r2
 8012606:	f7fc fd57 	bl	800f0b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	601a      	str	r2, [r3, #0]
}
 8012610:	bf00      	nop
 8012612:	3714      	adds	r7, #20
 8012614:	46bd      	mov	sp, r7
 8012616:	bd90      	pop	{r4, r7, pc}
 8012618:	0801ecac 	.word	0x0801ecac
 801261c:	0801ef6c 	.word	0x0801ef6c
 8012620:	0801ecf8 	.word	0x0801ecf8
 8012624:	20013dac 	.word	0x20013dac

08012628 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012628:	b5b0      	push	{r4, r5, r7, lr}
 801262a:	b086      	sub	sp, #24
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012636:	e03e      	b.n	80126b6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012638:	68bb      	ldr	r3, [r7, #8]
 801263a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	685b      	ldr	r3, [r3, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	f7fc ff4a 	bl	800f4e0 <pbuf_clen>
 801264c:	4603      	mov	r3, r0
 801264e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012656:	8a7a      	ldrh	r2, [r7, #18]
 8012658:	429a      	cmp	r2, r3
 801265a:	d906      	bls.n	801266a <tcp_free_acked_segments+0x42>
 801265c:	4b2a      	ldr	r3, [pc, #168]	@ (8012708 <tcp_free_acked_segments+0xe0>)
 801265e:	f240 4257 	movw	r2, #1111	@ 0x457
 8012662:	492a      	ldr	r1, [pc, #168]	@ (801270c <tcp_free_acked_segments+0xe4>)
 8012664:	482a      	ldr	r0, [pc, #168]	@ (8012710 <tcp_free_acked_segments+0xe8>)
 8012666:	f008 fceb 	bl	801b040 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012670:	8a7b      	ldrh	r3, [r7, #18]
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	b29a      	uxth	r2, r3
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801267c:	697b      	ldr	r3, [r7, #20]
 801267e:	891a      	ldrh	r2, [r3, #8]
 8012680:	4b24      	ldr	r3, [pc, #144]	@ (8012714 <tcp_free_acked_segments+0xec>)
 8012682:	881b      	ldrh	r3, [r3, #0]
 8012684:	4413      	add	r3, r2
 8012686:	b29a      	uxth	r2, r3
 8012688:	4b22      	ldr	r3, [pc, #136]	@ (8012714 <tcp_free_acked_segments+0xec>)
 801268a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801268c:	6978      	ldr	r0, [r7, #20]
 801268e:	f7fe f9c6 	bl	8010a1e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012698:	2b00      	cmp	r3, #0
 801269a:	d00c      	beq.n	80126b6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801269c:	68bb      	ldr	r3, [r7, #8]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d109      	bne.n	80126b6 <tcp_free_acked_segments+0x8e>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d106      	bne.n	80126b6 <tcp_free_acked_segments+0x8e>
 80126a8:	4b17      	ldr	r3, [pc, #92]	@ (8012708 <tcp_free_acked_segments+0xe0>)
 80126aa:	f240 4261 	movw	r2, #1121	@ 0x461
 80126ae:	491a      	ldr	r1, [pc, #104]	@ (8012718 <tcp_free_acked_segments+0xf0>)
 80126b0:	4817      	ldr	r0, [pc, #92]	@ (8012710 <tcp_free_acked_segments+0xe8>)
 80126b2:	f008 fcc5 	bl	801b040 <iprintf>
  while (seg_list != NULL &&
 80126b6:	68bb      	ldr	r3, [r7, #8]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d020      	beq.n	80126fe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	691b      	ldr	r3, [r3, #16]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7fb f971 	bl	800d9aa <lwip_htonl>
 80126c8:	4604      	mov	r4, r0
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	891b      	ldrh	r3, [r3, #8]
 80126ce:	461d      	mov	r5, r3
 80126d0:	68bb      	ldr	r3, [r7, #8]
 80126d2:	691b      	ldr	r3, [r3, #16]
 80126d4:	899b      	ldrh	r3, [r3, #12]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fb f951 	bl	800d980 <lwip_htons>
 80126de:	4603      	mov	r3, r0
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	f003 0303 	and.w	r3, r3, #3
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d001      	beq.n	80126ee <tcp_free_acked_segments+0xc6>
 80126ea:	2301      	movs	r3, #1
 80126ec:	e000      	b.n	80126f0 <tcp_free_acked_segments+0xc8>
 80126ee:	2300      	movs	r3, #0
 80126f0:	442b      	add	r3, r5
 80126f2:	18e2      	adds	r2, r4, r3
 80126f4:	4b09      	ldr	r3, [pc, #36]	@ (801271c <tcp_free_acked_segments+0xf4>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	dd9c      	ble.n	8012638 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80126fe:	68bb      	ldr	r3, [r7, #8]
}
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bdb0      	pop	{r4, r5, r7, pc}
 8012708:	0801ecac 	.word	0x0801ecac
 801270c:	0801ef94 	.word	0x0801ef94
 8012710:	0801ecf8 	.word	0x0801ecf8
 8012714:	20013db4 	.word	0x20013db4
 8012718:	0801efbc 	.word	0x0801efbc
 801271c:	20013db0 	.word	0x20013db0

08012720 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012720:	b5b0      	push	{r4, r5, r7, lr}
 8012722:	b094      	sub	sp, #80	@ 0x50
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012728:	2300      	movs	r3, #0
 801272a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <tcp_receive+0x20>
 8012732:	4b91      	ldr	r3, [pc, #580]	@ (8012978 <tcp_receive+0x258>)
 8012734:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012738:	4990      	ldr	r1, [pc, #576]	@ (801297c <tcp_receive+0x25c>)
 801273a:	4891      	ldr	r0, [pc, #580]	@ (8012980 <tcp_receive+0x260>)
 801273c:	f008 fc80 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	7d1b      	ldrb	r3, [r3, #20]
 8012744:	2b03      	cmp	r3, #3
 8012746:	d806      	bhi.n	8012756 <tcp_receive+0x36>
 8012748:	4b8b      	ldr	r3, [pc, #556]	@ (8012978 <tcp_receive+0x258>)
 801274a:	f240 427c 	movw	r2, #1148	@ 0x47c
 801274e:	498d      	ldr	r1, [pc, #564]	@ (8012984 <tcp_receive+0x264>)
 8012750:	488b      	ldr	r0, [pc, #556]	@ (8012980 <tcp_receive+0x260>)
 8012752:	f008 fc75 	bl	801b040 <iprintf>

  if (flags & TCP_ACK) {
 8012756:	4b8c      	ldr	r3, [pc, #560]	@ (8012988 <tcp_receive+0x268>)
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	f003 0310 	and.w	r3, r3, #16
 801275e:	2b00      	cmp	r3, #0
 8012760:	f000 8264 	beq.w	8012c2c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801276a:	461a      	mov	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012770:	4413      	add	r3, r2
 8012772:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012778:	4b84      	ldr	r3, [pc, #528]	@ (801298c <tcp_receive+0x26c>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	1ad3      	subs	r3, r2, r3
 801277e:	2b00      	cmp	r3, #0
 8012780:	db1b      	blt.n	80127ba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012786:	4b81      	ldr	r3, [pc, #516]	@ (801298c <tcp_receive+0x26c>)
 8012788:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801278a:	429a      	cmp	r2, r3
 801278c:	d106      	bne.n	801279c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012792:	4b7f      	ldr	r3, [pc, #508]	@ (8012990 <tcp_receive+0x270>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	1ad3      	subs	r3, r2, r3
 8012798:	2b00      	cmp	r3, #0
 801279a:	db0e      	blt.n	80127ba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80127a0:	4b7b      	ldr	r3, [pc, #492]	@ (8012990 <tcp_receive+0x270>)
 80127a2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d125      	bne.n	80127f4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80127a8:	4b7a      	ldr	r3, [pc, #488]	@ (8012994 <tcp_receive+0x274>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	89db      	ldrh	r3, [r3, #14]
 80127ae:	b29a      	uxth	r2, r3
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d91c      	bls.n	80127f4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80127ba:	4b76      	ldr	r3, [pc, #472]	@ (8012994 <tcp_receive+0x274>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	89db      	ldrh	r3, [r3, #14]
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d205      	bcs.n	80127e4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 80127e4:	4b69      	ldr	r3, [pc, #420]	@ (801298c <tcp_receive+0x26c>)
 80127e6:	681a      	ldr	r2, [r3, #0]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80127ec:	4b68      	ldr	r3, [pc, #416]	@ (8012990 <tcp_receive+0x270>)
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80127f4:	4b66      	ldr	r3, [pc, #408]	@ (8012990 <tcp_receive+0x270>)
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80127fc:	1ad3      	subs	r3, r2, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	dc58      	bgt.n	80128b4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012802:	4b65      	ldr	r3, [pc, #404]	@ (8012998 <tcp_receive+0x278>)
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d14b      	bne.n	80128a2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012814:	4413      	add	r3, r2
 8012816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012818:	429a      	cmp	r2, r3
 801281a:	d142      	bne.n	80128a2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012822:	2b00      	cmp	r3, #0
 8012824:	db3d      	blt.n	80128a2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801282a:	4b59      	ldr	r3, [pc, #356]	@ (8012990 <tcp_receive+0x270>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	429a      	cmp	r2, r3
 8012830:	d137      	bne.n	80128a2 <tcp_receive+0x182>
              found_dupack = 1;
 8012832:	2301      	movs	r3, #1
 8012834:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801283c:	2bff      	cmp	r3, #255	@ 0xff
 801283e:	d007      	beq.n	8012850 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012846:	3301      	adds	r3, #1
 8012848:	b2da      	uxtb	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012856:	2b03      	cmp	r3, #3
 8012858:	d91b      	bls.n	8012892 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012864:	4413      	add	r3, r2
 8012866:	b29a      	uxth	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801286e:	429a      	cmp	r2, r3
 8012870:	d30a      	bcc.n	8012888 <tcp_receive+0x168>
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801287c:	4413      	add	r3, r2
 801287e:	b29a      	uxth	r2, r3
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012886:	e004      	b.n	8012892 <tcp_receive+0x172>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801288e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012898:	2b02      	cmp	r3, #2
 801289a:	d902      	bls.n	80128a2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f001 ff0f 	bl	80146c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80128a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	f040 8161 	bne.w	8012b6c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80128b2:	e15b      	b.n	8012b6c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128b4:	4b36      	ldr	r3, [pc, #216]	@ (8012990 <tcp_receive+0x270>)
 80128b6:	681a      	ldr	r2, [r3, #0]
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80128bc:	1ad3      	subs	r3, r2, r3
 80128be:	3b01      	subs	r3, #1
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	f2c0 814e 	blt.w	8012b62 <tcp_receive+0x442>
 80128c6:	4b32      	ldr	r3, [pc, #200]	@ (8012990 <tcp_receive+0x270>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128ce:	1ad3      	subs	r3, r2, r3
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f300 8146 	bgt.w	8012b62 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	8b5b      	ldrh	r3, [r3, #26]
 80128da:	f003 0304 	and.w	r3, r3, #4
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d010      	beq.n	8012904 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	8b5b      	ldrh	r3, [r3, #26]
 80128e6:	f023 0304 	bic.w	r3, r3, #4
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2200      	movs	r2, #0
 8012900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012912:	10db      	asrs	r3, r3, #3
 8012914:	b21b      	sxth	r3, r3
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801291e:	b29b      	uxth	r3, r3
 8012920:	4413      	add	r3, r2
 8012922:	b29b      	uxth	r3, r3
 8012924:	b21a      	sxth	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801292c:	4b18      	ldr	r3, [pc, #96]	@ (8012990 <tcp_receive+0x270>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	b29a      	uxth	r2, r3
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012936:	b29b      	uxth	r3, r3
 8012938:	1ad3      	subs	r3, r2, r3
 801293a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2200      	movs	r2, #0
 8012940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012944:	4b12      	ldr	r3, [pc, #72]	@ (8012990 <tcp_receive+0x270>)
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	7d1b      	ldrb	r3, [r3, #20]
 8012950:	2b03      	cmp	r3, #3
 8012952:	f240 8097 	bls.w	8012a84 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012962:	429a      	cmp	r2, r3
 8012964:	d245      	bcs.n	80129f2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	8b5b      	ldrh	r3, [r3, #26]
 801296a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801296e:	2b00      	cmp	r3, #0
 8012970:	d014      	beq.n	801299c <tcp_receive+0x27c>
 8012972:	2301      	movs	r3, #1
 8012974:	e013      	b.n	801299e <tcp_receive+0x27e>
 8012976:	bf00      	nop
 8012978:	0801ecac 	.word	0x0801ecac
 801297c:	0801efdc 	.word	0x0801efdc
 8012980:	0801ecf8 	.word	0x0801ecf8
 8012984:	0801eff8 	.word	0x0801eff8
 8012988:	20013db8 	.word	0x20013db8
 801298c:	20013dac 	.word	0x20013dac
 8012990:	20013db0 	.word	0x20013db0
 8012994:	20013d9c 	.word	0x20013d9c
 8012998:	20013db6 	.word	0x20013db6
 801299c:	2302      	movs	r3, #2
 801299e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80129a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80129a6:	b29a      	uxth	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80129ac:	fb12 f303 	smulbb	r3, r2, r3
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80129b4:	4293      	cmp	r3, r2
 80129b6:	bf28      	it	cs
 80129b8:	4613      	movcs	r3, r2
 80129ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80129c2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80129c4:	4413      	add	r3, r2
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d309      	bcc.n	80129e6 <tcp_receive+0x2c6>
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80129d8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80129da:	4413      	add	r3, r2
 80129dc:	b29a      	uxth	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80129e4:	e04e      	b.n	8012a84 <tcp_receive+0x364>
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80129ec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80129f0:	e048      	b.n	8012a84 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80129f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80129fa:	4413      	add	r3, r2
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d309      	bcc.n	8012a1c <tcp_receive+0x2fc>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012a0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a10:	4413      	add	r3, r2
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012a1a:	e004      	b.n	8012a26 <tcp_receive+0x306>
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d326      	bcc.n	8012a84 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a42:	1ad3      	subs	r3, r2, r3
 8012a44:	b29a      	uxth	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a56:	4413      	add	r3, r2
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d30a      	bcc.n	8012a7a <tcp_receive+0x35a>
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012a6e:	4413      	add	r3, r2
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012a78:	e004      	b.n	8012a84 <tcp_receive+0x364>
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a8c:	4a98      	ldr	r2, [pc, #608]	@ (8012cf0 <tcp_receive+0x5d0>)
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f7ff fdca 	bl	8012628 <tcp_free_acked_segments>
 8012a94:	4602      	mov	r2, r0
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aa2:	4a94      	ldr	r2, [pc, #592]	@ (8012cf4 <tcp_receive+0x5d4>)
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7ff fdbf 	bl	8012628 <tcp_free_acked_segments>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d104      	bne.n	8012ac2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012abe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8012ac0:	e002      	b.n	8012ac8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2200      	movs	r2, #0
 8012acc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d103      	bne.n	8012ade <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	2200      	movs	r2, #0
 8012ada:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012ae4:	4b84      	ldr	r3, [pc, #528]	@ (8012cf8 <tcp_receive+0x5d8>)
 8012ae6:	881b      	ldrh	r3, [r3, #0]
 8012ae8:	4413      	add	r3, r2
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	8b5b      	ldrh	r3, [r3, #26]
 8012af6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d035      	beq.n	8012b6a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d118      	bne.n	8012b38 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00c      	beq.n	8012b28 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fa ff45 	bl	800d9aa <lwip_htonl>
 8012b20:	4603      	mov	r3, r0
 8012b22:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	dc20      	bgt.n	8012b6a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	8b5b      	ldrh	r3, [r3, #26]
 8012b2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b36:	e018      	b.n	8012b6a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b40:	691b      	ldr	r3, [r3, #16]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7fa ff30 	bl	800d9aa <lwip_htonl>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	1ae3      	subs	r3, r4, r3
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	dc0b      	bgt.n	8012b6a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	8b5b      	ldrh	r3, [r3, #26]
 8012b56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b60:	e003      	b.n	8012b6a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f001 ffa8 	bl	8014ab8 <tcp_send_empty_ack>
 8012b68:	e000      	b.n	8012b6c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b6a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d05b      	beq.n	8012c2c <tcp_receive+0x50c>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012b78:	4b60      	ldr	r3, [pc, #384]	@ (8012cfc <tcp_receive+0x5dc>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	1ad3      	subs	r3, r2, r3
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	da54      	bge.n	8012c2c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012b82:	4b5f      	ldr	r3, [pc, #380]	@ (8012d00 <tcp_receive+0x5e0>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	1ad3      	subs	r3, r2, r3
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012b96:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012ba0:	10db      	asrs	r3, r3, #3
 8012ba2:	b21b      	sxth	r3, r3
 8012ba4:	b29b      	uxth	r3, r3
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012bba:	4413      	add	r3, r2
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	b21a      	sxth	r2, r3
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8012bc4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	da05      	bge.n	8012bd8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012bd0:	425b      	negs	r3, r3
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012bd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012be2:	109b      	asrs	r3, r3, #2
 8012be4:	b21b      	sxth	r3, r3
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	1ad3      	subs	r3, r2, r3
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8012bfc:	4413      	add	r3, r2
 8012bfe:	b29b      	uxth	r3, r3
 8012c00:	b21a      	sxth	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012c0c:	10db      	asrs	r3, r3, #3
 8012c0e:	b21b      	sxth	r3, r3
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	4413      	add	r3, r2
 8012c1c:	b29b      	uxth	r3, r3
 8012c1e:	b21a      	sxth	r2, r3
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	2200      	movs	r2, #0
 8012c2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012c2c:	4b35      	ldr	r3, [pc, #212]	@ (8012d04 <tcp_receive+0x5e4>)
 8012c2e:	881b      	ldrh	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 84df 	beq.w	80135f4 <tcp_receive+0xed4>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	7d1b      	ldrb	r3, [r3, #20]
 8012c3a:	2b06      	cmp	r3, #6
 8012c3c:	f200 84da 	bhi.w	80135f4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c44:	4b30      	ldr	r3, [pc, #192]	@ (8012d08 <tcp_receive+0x5e8>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	1ad3      	subs	r3, r2, r3
 8012c4a:	3b01      	subs	r3, #1
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	f2c0 808f 	blt.w	8012d70 <tcp_receive+0x650>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c56:	4b2b      	ldr	r3, [pc, #172]	@ (8012d04 <tcp_receive+0x5e4>)
 8012c58:	881b      	ldrh	r3, [r3, #0]
 8012c5a:	4619      	mov	r1, r3
 8012c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8012d08 <tcp_receive+0x5e8>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	440b      	add	r3, r1
 8012c62:	1ad3      	subs	r3, r2, r3
 8012c64:	3301      	adds	r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f300 8082 	bgt.w	8012d70 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012c6c:	4b27      	ldr	r3, [pc, #156]	@ (8012d0c <tcp_receive+0x5ec>)
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012c76:	4b24      	ldr	r3, [pc, #144]	@ (8012d08 <tcp_receive+0x5e8>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012c7e:	4b23      	ldr	r3, [pc, #140]	@ (8012d0c <tcp_receive+0x5ec>)
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d106      	bne.n	8012c94 <tcp_receive+0x574>
 8012c86:	4b22      	ldr	r3, [pc, #136]	@ (8012d10 <tcp_receive+0x5f0>)
 8012c88:	f240 5294 	movw	r2, #1428	@ 0x594
 8012c8c:	4921      	ldr	r1, [pc, #132]	@ (8012d14 <tcp_receive+0x5f4>)
 8012c8e:	4822      	ldr	r0, [pc, #136]	@ (8012d18 <tcp_receive+0x5f8>)
 8012c90:	f008 f9d6 	bl	801b040 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c96:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d906      	bls.n	8012cac <tcp_receive+0x58c>
 8012c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8012d10 <tcp_receive+0x5f0>)
 8012ca0:	f240 5295 	movw	r2, #1429	@ 0x595
 8012ca4:	491d      	ldr	r1, [pc, #116]	@ (8012d1c <tcp_receive+0x5fc>)
 8012ca6:	481c      	ldr	r0, [pc, #112]	@ (8012d18 <tcp_receive+0x5f8>)
 8012ca8:	f008 f9ca 	bl	801b040 <iprintf>
      off = (u16_t)off32;
 8012cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012cb2:	4b16      	ldr	r3, [pc, #88]	@ (8012d0c <tcp_receive+0x5ec>)
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	891b      	ldrh	r3, [r3, #8]
 8012cb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	d906      	bls.n	8012cce <tcp_receive+0x5ae>
 8012cc0:	4b13      	ldr	r3, [pc, #76]	@ (8012d10 <tcp_receive+0x5f0>)
 8012cc2:	f240 5297 	movw	r2, #1431	@ 0x597
 8012cc6:	4916      	ldr	r1, [pc, #88]	@ (8012d20 <tcp_receive+0x600>)
 8012cc8:	4813      	ldr	r0, [pc, #76]	@ (8012d18 <tcp_receive+0x5f8>)
 8012cca:	f008 f9b9 	bl	801b040 <iprintf>
      inseg.len -= off;
 8012cce:	4b0f      	ldr	r3, [pc, #60]	@ (8012d0c <tcp_receive+0x5ec>)
 8012cd0:	891a      	ldrh	r2, [r3, #8]
 8012cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012cd6:	1ad3      	subs	r3, r2, r3
 8012cd8:	b29a      	uxth	r2, r3
 8012cda:	4b0c      	ldr	r3, [pc, #48]	@ (8012d0c <tcp_receive+0x5ec>)
 8012cdc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012cde:	4b0b      	ldr	r3, [pc, #44]	@ (8012d0c <tcp_receive+0x5ec>)
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	891a      	ldrh	r2, [r3, #8]
 8012ce4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8012cec:	e02a      	b.n	8012d44 <tcp_receive+0x624>
 8012cee:	bf00      	nop
 8012cf0:	0801f014 	.word	0x0801f014
 8012cf4:	0801f01c 	.word	0x0801f01c
 8012cf8:	20013db4 	.word	0x20013db4
 8012cfc:	20013db0 	.word	0x20013db0
 8012d00:	20013d70 	.word	0x20013d70
 8012d04:	20013db6 	.word	0x20013db6
 8012d08:	20013dac 	.word	0x20013dac
 8012d0c:	20013d88 	.word	0x20013d88
 8012d10:	0801ecac 	.word	0x0801ecac
 8012d14:	0801f024 	.word	0x0801f024
 8012d18:	0801ecf8 	.word	0x0801ecf8
 8012d1c:	0801f034 	.word	0x0801f034
 8012d20:	0801f044 	.word	0x0801f044
        off -= p->len;
 8012d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d26:	895b      	ldrh	r3, [r3, #10]
 8012d28:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012d32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d34:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012d36:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8012d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d46:	895b      	ldrh	r3, [r3, #10]
 8012d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d8e9      	bhi.n	8012d24 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012d50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012d54:	4619      	mov	r1, r3
 8012d56:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012d58:	f7fc faae 	bl	800f2b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d60:	4a90      	ldr	r2, [pc, #576]	@ (8012fa4 <tcp_receive+0x884>)
 8012d62:	6013      	str	r3, [r2, #0]
 8012d64:	4b90      	ldr	r3, [pc, #576]	@ (8012fa8 <tcp_receive+0x888>)
 8012d66:	691b      	ldr	r3, [r3, #16]
 8012d68:	4a8e      	ldr	r2, [pc, #568]	@ (8012fa4 <tcp_receive+0x884>)
 8012d6a:	6812      	ldr	r2, [r2, #0]
 8012d6c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012d6e:	e00d      	b.n	8012d8c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012d70:	4b8c      	ldr	r3, [pc, #560]	@ (8012fa4 <tcp_receive+0x884>)
 8012d72:	681a      	ldr	r2, [r3, #0]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	da06      	bge.n	8012d8c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	8b5b      	ldrh	r3, [r3, #26]
 8012d82:	f043 0302 	orr.w	r3, r3, #2
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d8c:	4b85      	ldr	r3, [pc, #532]	@ (8012fa4 <tcp_receive+0x884>)
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	f2c0 8427 	blt.w	80135ea <tcp_receive+0xeca>
 8012d9c:	4b81      	ldr	r3, [pc, #516]	@ (8012fa4 <tcp_receive+0x884>)
 8012d9e:	681a      	ldr	r2, [r3, #0]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012da4:	6879      	ldr	r1, [r7, #4]
 8012da6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012da8:	440b      	add	r3, r1
 8012daa:	1ad3      	subs	r3, r2, r3
 8012dac:	3301      	adds	r3, #1
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	f300 841b 	bgt.w	80135ea <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012db8:	4b7a      	ldr	r3, [pc, #488]	@ (8012fa4 <tcp_receive+0x884>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	f040 8298 	bne.w	80132f2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012dc2:	4b79      	ldr	r3, [pc, #484]	@ (8012fa8 <tcp_receive+0x888>)
 8012dc4:	891c      	ldrh	r4, [r3, #8]
 8012dc6:	4b78      	ldr	r3, [pc, #480]	@ (8012fa8 <tcp_receive+0x888>)
 8012dc8:	691b      	ldr	r3, [r3, #16]
 8012dca:	899b      	ldrh	r3, [r3, #12]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fa fdd6 	bl	800d980 <lwip_htons>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	f003 0303 	and.w	r3, r3, #3
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <tcp_receive+0x6c4>
 8012de0:	2301      	movs	r3, #1
 8012de2:	e000      	b.n	8012de6 <tcp_receive+0x6c6>
 8012de4:	2300      	movs	r3, #0
 8012de6:	4423      	add	r3, r4
 8012de8:	b29a      	uxth	r2, r3
 8012dea:	4b70      	ldr	r3, [pc, #448]	@ (8012fac <tcp_receive+0x88c>)
 8012dec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012df2:	4b6e      	ldr	r3, [pc, #440]	@ (8012fac <tcp_receive+0x88c>)
 8012df4:	881b      	ldrh	r3, [r3, #0]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d274      	bcs.n	8012ee4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8012fa8 <tcp_receive+0x888>)
 8012dfc:	691b      	ldr	r3, [r3, #16]
 8012dfe:	899b      	ldrh	r3, [r3, #12]
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	4618      	mov	r0, r3
 8012e04:	f7fa fdbc 	bl	800d980 <lwip_htons>
 8012e08:	4603      	mov	r3, r0
 8012e0a:	b2db      	uxtb	r3, r3
 8012e0c:	f003 0301 	and.w	r3, r3, #1
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d01e      	beq.n	8012e52 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012e14:	4b64      	ldr	r3, [pc, #400]	@ (8012fa8 <tcp_receive+0x888>)
 8012e16:	691b      	ldr	r3, [r3, #16]
 8012e18:	899b      	ldrh	r3, [r3, #12]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	b21b      	sxth	r3, r3
 8012e1e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012e22:	b21c      	sxth	r4, r3
 8012e24:	4b60      	ldr	r3, [pc, #384]	@ (8012fa8 <tcp_receive+0x888>)
 8012e26:	691b      	ldr	r3, [r3, #16]
 8012e28:	899b      	ldrh	r3, [r3, #12]
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fa fda7 	bl	800d980 <lwip_htons>
 8012e32:	4603      	mov	r3, r0
 8012e34:	b2db      	uxtb	r3, r3
 8012e36:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f7fa fd9f 	bl	800d980 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	b21b      	sxth	r3, r3
 8012e46:	4323      	orrs	r3, r4
 8012e48:	b21a      	sxth	r2, r3
 8012e4a:	4b57      	ldr	r3, [pc, #348]	@ (8012fa8 <tcp_receive+0x888>)
 8012e4c:	691b      	ldr	r3, [r3, #16]
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012e56:	4b54      	ldr	r3, [pc, #336]	@ (8012fa8 <tcp_receive+0x888>)
 8012e58:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012e5a:	4b53      	ldr	r3, [pc, #332]	@ (8012fa8 <tcp_receive+0x888>)
 8012e5c:	691b      	ldr	r3, [r3, #16]
 8012e5e:	899b      	ldrh	r3, [r3, #12]
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fa fd8c 	bl	800d980 <lwip_htons>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	f003 0302 	and.w	r3, r3, #2
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d005      	beq.n	8012e80 <tcp_receive+0x760>
            inseg.len -= 1;
 8012e74:	4b4c      	ldr	r3, [pc, #304]	@ (8012fa8 <tcp_receive+0x888>)
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8012fa8 <tcp_receive+0x888>)
 8012e7e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012e80:	4b49      	ldr	r3, [pc, #292]	@ (8012fa8 <tcp_receive+0x888>)
 8012e82:	685b      	ldr	r3, [r3, #4]
 8012e84:	4a48      	ldr	r2, [pc, #288]	@ (8012fa8 <tcp_receive+0x888>)
 8012e86:	8912      	ldrh	r2, [r2, #8]
 8012e88:	4611      	mov	r1, r2
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fc f914 	bl	800f0b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012e90:	4b45      	ldr	r3, [pc, #276]	@ (8012fa8 <tcp_receive+0x888>)
 8012e92:	891c      	ldrh	r4, [r3, #8]
 8012e94:	4b44      	ldr	r3, [pc, #272]	@ (8012fa8 <tcp_receive+0x888>)
 8012e96:	691b      	ldr	r3, [r3, #16]
 8012e98:	899b      	ldrh	r3, [r3, #12]
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fa fd6f 	bl	800d980 <lwip_htons>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	b2db      	uxtb	r3, r3
 8012ea6:	f003 0303 	and.w	r3, r3, #3
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <tcp_receive+0x792>
 8012eae:	2301      	movs	r3, #1
 8012eb0:	e000      	b.n	8012eb4 <tcp_receive+0x794>
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4423      	add	r3, r4
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8012fac <tcp_receive+0x88c>)
 8012eba:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8012fac <tcp_receive+0x88c>)
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	461a      	mov	r2, r3
 8012ec2:	4b38      	ldr	r3, [pc, #224]	@ (8012fa4 <tcp_receive+0x884>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	441a      	add	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ecc:	6879      	ldr	r1, [r7, #4]
 8012ece:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012ed0:	440b      	add	r3, r1
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d006      	beq.n	8012ee4 <tcp_receive+0x7c4>
 8012ed6:	4b36      	ldr	r3, [pc, #216]	@ (8012fb0 <tcp_receive+0x890>)
 8012ed8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8012edc:	4935      	ldr	r1, [pc, #212]	@ (8012fb4 <tcp_receive+0x894>)
 8012ede:	4836      	ldr	r0, [pc, #216]	@ (8012fb8 <tcp_receive+0x898>)
 8012ee0:	f008 f8ae 	bl	801b040 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	f000 80e6 	beq.w	80130ba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012eee:	4b2e      	ldr	r3, [pc, #184]	@ (8012fa8 <tcp_receive+0x888>)
 8012ef0:	691b      	ldr	r3, [r3, #16]
 8012ef2:	899b      	ldrh	r3, [r3, #12]
 8012ef4:	b29b      	uxth	r3, r3
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fa fd42 	bl	800d980 <lwip_htons>
 8012efc:	4603      	mov	r3, r0
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	f003 0301 	and.w	r3, r3, #1
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d010      	beq.n	8012f2a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012f08:	e00a      	b.n	8012f20 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f0e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f14:	681a      	ldr	r2, [r3, #0]
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	f7fd fd7f 	bl	8010a1e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d1f0      	bne.n	8012f0a <tcp_receive+0x7ea>
 8012f28:	e0c7      	b.n	80130ba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012f30:	e051      	b.n	8012fd6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f34:	691b      	ldr	r3, [r3, #16]
 8012f36:	899b      	ldrh	r3, [r3, #12]
 8012f38:	b29b      	uxth	r3, r3
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fa fd20 	bl	800d980 <lwip_htons>
 8012f40:	4603      	mov	r3, r0
 8012f42:	b2db      	uxtb	r3, r3
 8012f44:	f003 0301 	and.w	r3, r3, #1
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d03c      	beq.n	8012fc6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012f4c:	4b16      	ldr	r3, [pc, #88]	@ (8012fa8 <tcp_receive+0x888>)
 8012f4e:	691b      	ldr	r3, [r3, #16]
 8012f50:	899b      	ldrh	r3, [r3, #12]
 8012f52:	b29b      	uxth	r3, r3
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7fa fd13 	bl	800d980 <lwip_htons>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d12f      	bne.n	8012fc6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012f66:	4b10      	ldr	r3, [pc, #64]	@ (8012fa8 <tcp_receive+0x888>)
 8012f68:	691b      	ldr	r3, [r3, #16]
 8012f6a:	899b      	ldrh	r3, [r3, #12]
 8012f6c:	b29c      	uxth	r4, r3
 8012f6e:	2001      	movs	r0, #1
 8012f70:	f7fa fd06 	bl	800d980 <lwip_htons>
 8012f74:	4603      	mov	r3, r0
 8012f76:	461a      	mov	r2, r3
 8012f78:	4b0b      	ldr	r3, [pc, #44]	@ (8012fa8 <tcp_receive+0x888>)
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	4322      	orrs	r2, r4
 8012f7e:	b292      	uxth	r2, r2
 8012f80:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012f82:	4b09      	ldr	r3, [pc, #36]	@ (8012fa8 <tcp_receive+0x888>)
 8012f84:	891c      	ldrh	r4, [r3, #8]
 8012f86:	4b08      	ldr	r3, [pc, #32]	@ (8012fa8 <tcp_receive+0x888>)
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	899b      	ldrh	r3, [r3, #12]
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	4618      	mov	r0, r3
 8012f90:	f7fa fcf6 	bl	800d980 <lwip_htons>
 8012f94:	4603      	mov	r3, r0
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	f003 0303 	and.w	r3, r3, #3
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d00d      	beq.n	8012fbc <tcp_receive+0x89c>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	e00c      	b.n	8012fbe <tcp_receive+0x89e>
 8012fa4:	20013dac 	.word	0x20013dac
 8012fa8:	20013d88 	.word	0x20013d88
 8012fac:	20013db6 	.word	0x20013db6
 8012fb0:	0801ecac 	.word	0x0801ecac
 8012fb4:	0801f054 	.word	0x0801f054
 8012fb8:	0801ecf8 	.word	0x0801ecf8
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	4423      	add	r3, r4
 8012fc0:	b29a      	uxth	r2, r3
 8012fc2:	4b98      	ldr	r3, [pc, #608]	@ (8013224 <tcp_receive+0xb04>)
 8012fc4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fc8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8012fd0:	6938      	ldr	r0, [r7, #16]
 8012fd2:	f7fd fd24 	bl	8010a1e <tcp_seg_free>
            while (next &&
 8012fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d00e      	beq.n	8012ffa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012fdc:	4b91      	ldr	r3, [pc, #580]	@ (8013224 <tcp_receive+0xb04>)
 8012fde:	881b      	ldrh	r3, [r3, #0]
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	4b91      	ldr	r3, [pc, #580]	@ (8013228 <tcp_receive+0xb08>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	441a      	add	r2, r3
 8012fe8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012ff0:	8909      	ldrh	r1, [r1, #8]
 8012ff2:	440b      	add	r3, r1
 8012ff4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	da9b      	bge.n	8012f32 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d059      	beq.n	80130b4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013000:	4b88      	ldr	r3, [pc, #544]	@ (8013224 <tcp_receive+0xb04>)
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	461a      	mov	r2, r3
 8013006:	4b88      	ldr	r3, [pc, #544]	@ (8013228 <tcp_receive+0xb08>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	441a      	add	r2, r3
 801300c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013014:	2b00      	cmp	r3, #0
 8013016:	dd4d      	ble.n	80130b4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801301a:	691b      	ldr	r3, [r3, #16]
 801301c:	685b      	ldr	r3, [r3, #4]
 801301e:	b29a      	uxth	r2, r3
 8013020:	4b81      	ldr	r3, [pc, #516]	@ (8013228 <tcp_receive+0xb08>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	b29b      	uxth	r3, r3
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	b29a      	uxth	r2, r3
 801302a:	4b80      	ldr	r3, [pc, #512]	@ (801322c <tcp_receive+0xb0c>)
 801302c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801302e:	4b7f      	ldr	r3, [pc, #508]	@ (801322c <tcp_receive+0xb0c>)
 8013030:	691b      	ldr	r3, [r3, #16]
 8013032:	899b      	ldrh	r3, [r3, #12]
 8013034:	b29b      	uxth	r3, r3
 8013036:	4618      	mov	r0, r3
 8013038:	f7fa fca2 	bl	800d980 <lwip_htons>
 801303c:	4603      	mov	r3, r0
 801303e:	b2db      	uxtb	r3, r3
 8013040:	f003 0302 	and.w	r3, r3, #2
 8013044:	2b00      	cmp	r3, #0
 8013046:	d005      	beq.n	8013054 <tcp_receive+0x934>
                inseg.len -= 1;
 8013048:	4b78      	ldr	r3, [pc, #480]	@ (801322c <tcp_receive+0xb0c>)
 801304a:	891b      	ldrh	r3, [r3, #8]
 801304c:	3b01      	subs	r3, #1
 801304e:	b29a      	uxth	r2, r3
 8013050:	4b76      	ldr	r3, [pc, #472]	@ (801322c <tcp_receive+0xb0c>)
 8013052:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013054:	4b75      	ldr	r3, [pc, #468]	@ (801322c <tcp_receive+0xb0c>)
 8013056:	685b      	ldr	r3, [r3, #4]
 8013058:	4a74      	ldr	r2, [pc, #464]	@ (801322c <tcp_receive+0xb0c>)
 801305a:	8912      	ldrh	r2, [r2, #8]
 801305c:	4611      	mov	r1, r2
 801305e:	4618      	mov	r0, r3
 8013060:	f7fc f82a 	bl	800f0b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013064:	4b71      	ldr	r3, [pc, #452]	@ (801322c <tcp_receive+0xb0c>)
 8013066:	891c      	ldrh	r4, [r3, #8]
 8013068:	4b70      	ldr	r3, [pc, #448]	@ (801322c <tcp_receive+0xb0c>)
 801306a:	691b      	ldr	r3, [r3, #16]
 801306c:	899b      	ldrh	r3, [r3, #12]
 801306e:	b29b      	uxth	r3, r3
 8013070:	4618      	mov	r0, r3
 8013072:	f7fa fc85 	bl	800d980 <lwip_htons>
 8013076:	4603      	mov	r3, r0
 8013078:	b2db      	uxtb	r3, r3
 801307a:	f003 0303 	and.w	r3, r3, #3
 801307e:	2b00      	cmp	r3, #0
 8013080:	d001      	beq.n	8013086 <tcp_receive+0x966>
 8013082:	2301      	movs	r3, #1
 8013084:	e000      	b.n	8013088 <tcp_receive+0x968>
 8013086:	2300      	movs	r3, #0
 8013088:	4423      	add	r3, r4
 801308a:	b29a      	uxth	r2, r3
 801308c:	4b65      	ldr	r3, [pc, #404]	@ (8013224 <tcp_receive+0xb04>)
 801308e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013090:	4b64      	ldr	r3, [pc, #400]	@ (8013224 <tcp_receive+0xb04>)
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	461a      	mov	r2, r3
 8013096:	4b64      	ldr	r3, [pc, #400]	@ (8013228 <tcp_receive+0xb08>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	441a      	add	r2, r3
 801309c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d006      	beq.n	80130b4 <tcp_receive+0x994>
 80130a6:	4b62      	ldr	r3, [pc, #392]	@ (8013230 <tcp_receive+0xb10>)
 80130a8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80130ac:	4961      	ldr	r1, [pc, #388]	@ (8013234 <tcp_receive+0xb14>)
 80130ae:	4862      	ldr	r0, [pc, #392]	@ (8013238 <tcp_receive+0xb18>)
 80130b0:	f007 ffc6 	bl	801b040 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80130b8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80130ba:	4b5a      	ldr	r3, [pc, #360]	@ (8013224 <tcp_receive+0xb04>)
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	461a      	mov	r2, r3
 80130c0:	4b59      	ldr	r3, [pc, #356]	@ (8013228 <tcp_receive+0xb08>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	441a      	add	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80130ce:	4b55      	ldr	r3, [pc, #340]	@ (8013224 <tcp_receive+0xb04>)
 80130d0:	881b      	ldrh	r3, [r3, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d206      	bcs.n	80130e4 <tcp_receive+0x9c4>
 80130d6:	4b56      	ldr	r3, [pc, #344]	@ (8013230 <tcp_receive+0xb10>)
 80130d8:	f240 6207 	movw	r2, #1543	@ 0x607
 80130dc:	4957      	ldr	r1, [pc, #348]	@ (801323c <tcp_receive+0xb1c>)
 80130de:	4856      	ldr	r0, [pc, #344]	@ (8013238 <tcp_receive+0xb18>)
 80130e0:	f007 ffae 	bl	801b040 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80130e8:	4b4e      	ldr	r3, [pc, #312]	@ (8013224 <tcp_receive+0xb04>)
 80130ea:	881b      	ldrh	r3, [r3, #0]
 80130ec:	1ad3      	subs	r3, r2, r3
 80130ee:	b29a      	uxth	r2, r3
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f7fc ffad 	bl	8010054 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80130fa:	4b4c      	ldr	r3, [pc, #304]	@ (801322c <tcp_receive+0xb0c>)
 80130fc:	685b      	ldr	r3, [r3, #4]
 80130fe:	891b      	ldrh	r3, [r3, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d006      	beq.n	8013112 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013104:	4b49      	ldr	r3, [pc, #292]	@ (801322c <tcp_receive+0xb0c>)
 8013106:	685b      	ldr	r3, [r3, #4]
 8013108:	4a4d      	ldr	r2, [pc, #308]	@ (8013240 <tcp_receive+0xb20>)
 801310a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801310c:	4b47      	ldr	r3, [pc, #284]	@ (801322c <tcp_receive+0xb0c>)
 801310e:	2200      	movs	r2, #0
 8013110:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013112:	4b46      	ldr	r3, [pc, #280]	@ (801322c <tcp_receive+0xb0c>)
 8013114:	691b      	ldr	r3, [r3, #16]
 8013116:	899b      	ldrh	r3, [r3, #12]
 8013118:	b29b      	uxth	r3, r3
 801311a:	4618      	mov	r0, r3
 801311c:	f7fa fc30 	bl	800d980 <lwip_htons>
 8013120:	4603      	mov	r3, r0
 8013122:	b2db      	uxtb	r3, r3
 8013124:	f003 0301 	and.w	r3, r3, #1
 8013128:	2b00      	cmp	r3, #0
 801312a:	f000 80b8 	beq.w	801329e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801312e:	4b45      	ldr	r3, [pc, #276]	@ (8013244 <tcp_receive+0xb24>)
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	f043 0320 	orr.w	r3, r3, #32
 8013136:	b2da      	uxtb	r2, r3
 8013138:	4b42      	ldr	r3, [pc, #264]	@ (8013244 <tcp_receive+0xb24>)
 801313a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801313c:	e0af      	b.n	801329e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013142:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	4a36      	ldr	r2, [pc, #216]	@ (8013228 <tcp_receive+0xb08>)
 801314e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	891b      	ldrh	r3, [r3, #8]
 8013154:	461c      	mov	r4, r3
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	691b      	ldr	r3, [r3, #16]
 801315a:	899b      	ldrh	r3, [r3, #12]
 801315c:	b29b      	uxth	r3, r3
 801315e:	4618      	mov	r0, r3
 8013160:	f7fa fc0e 	bl	800d980 <lwip_htons>
 8013164:	4603      	mov	r3, r0
 8013166:	b2db      	uxtb	r3, r3
 8013168:	f003 0303 	and.w	r3, r3, #3
 801316c:	2b00      	cmp	r3, #0
 801316e:	d001      	beq.n	8013174 <tcp_receive+0xa54>
 8013170:	2301      	movs	r3, #1
 8013172:	e000      	b.n	8013176 <tcp_receive+0xa56>
 8013174:	2300      	movs	r3, #0
 8013176:	191a      	adds	r2, r3, r4
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801317c:	441a      	add	r2, r3
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013186:	461c      	mov	r4, r3
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	891b      	ldrh	r3, [r3, #8]
 801318c:	461d      	mov	r5, r3
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	691b      	ldr	r3, [r3, #16]
 8013192:	899b      	ldrh	r3, [r3, #12]
 8013194:	b29b      	uxth	r3, r3
 8013196:	4618      	mov	r0, r3
 8013198:	f7fa fbf2 	bl	800d980 <lwip_htons>
 801319c:	4603      	mov	r3, r0
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	f003 0303 	and.w	r3, r3, #3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d001      	beq.n	80131ac <tcp_receive+0xa8c>
 80131a8:	2301      	movs	r3, #1
 80131aa:	e000      	b.n	80131ae <tcp_receive+0xa8e>
 80131ac:	2300      	movs	r3, #0
 80131ae:	442b      	add	r3, r5
 80131b0:	429c      	cmp	r4, r3
 80131b2:	d206      	bcs.n	80131c2 <tcp_receive+0xaa2>
 80131b4:	4b1e      	ldr	r3, [pc, #120]	@ (8013230 <tcp_receive+0xb10>)
 80131b6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80131ba:	4923      	ldr	r1, [pc, #140]	@ (8013248 <tcp_receive+0xb28>)
 80131bc:	481e      	ldr	r0, [pc, #120]	@ (8013238 <tcp_receive+0xb18>)
 80131be:	f007 ff3f 	bl	801b040 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80131c2:	68bb      	ldr	r3, [r7, #8]
 80131c4:	891b      	ldrh	r3, [r3, #8]
 80131c6:	461c      	mov	r4, r3
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	691b      	ldr	r3, [r3, #16]
 80131cc:	899b      	ldrh	r3, [r3, #12]
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fa fbd5 	bl	800d980 <lwip_htons>
 80131d6:	4603      	mov	r3, r0
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	f003 0303 	and.w	r3, r3, #3
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d001      	beq.n	80131e6 <tcp_receive+0xac6>
 80131e2:	2301      	movs	r3, #1
 80131e4:	e000      	b.n	80131e8 <tcp_receive+0xac8>
 80131e6:	2300      	movs	r3, #0
 80131e8:	1919      	adds	r1, r3, r4
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80131ee:	b28b      	uxth	r3, r1
 80131f0:	1ad3      	subs	r3, r2, r3
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7fc ff2b 	bl	8010054 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	891b      	ldrh	r3, [r3, #8]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d028      	beq.n	801325a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013208:	4b0d      	ldr	r3, [pc, #52]	@ (8013240 <tcp_receive+0xb20>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d01d      	beq.n	801324c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013210:	4b0b      	ldr	r3, [pc, #44]	@ (8013240 <tcp_receive+0xb20>)
 8013212:	681a      	ldr	r2, [r3, #0]
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	4619      	mov	r1, r3
 801321a:	4610      	mov	r0, r2
 801321c:	f7fc f9a0 	bl	800f560 <pbuf_cat>
 8013220:	e018      	b.n	8013254 <tcp_receive+0xb34>
 8013222:	bf00      	nop
 8013224:	20013db6 	.word	0x20013db6
 8013228:	20013dac 	.word	0x20013dac
 801322c:	20013d88 	.word	0x20013d88
 8013230:	0801ecac 	.word	0x0801ecac
 8013234:	0801f08c 	.word	0x0801f08c
 8013238:	0801ecf8 	.word	0x0801ecf8
 801323c:	0801f0c8 	.word	0x0801f0c8
 8013240:	20013dbc 	.word	0x20013dbc
 8013244:	20013db9 	.word	0x20013db9
 8013248:	0801f0e8 	.word	0x0801f0e8
            } else {
              recv_data = cseg->p;
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	4a70      	ldr	r2, [pc, #448]	@ (8013414 <tcp_receive+0xcf4>)
 8013252:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2200      	movs	r2, #0
 8013258:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	691b      	ldr	r3, [r3, #16]
 801325e:	899b      	ldrh	r3, [r3, #12]
 8013260:	b29b      	uxth	r3, r3
 8013262:	4618      	mov	r0, r3
 8013264:	f7fa fb8c 	bl	800d980 <lwip_htons>
 8013268:	4603      	mov	r3, r0
 801326a:	b2db      	uxtb	r3, r3
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d00d      	beq.n	8013290 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013274:	4b68      	ldr	r3, [pc, #416]	@ (8013418 <tcp_receive+0xcf8>)
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	f043 0320 	orr.w	r3, r3, #32
 801327c:	b2da      	uxtb	r2, r3
 801327e:	4b66      	ldr	r3, [pc, #408]	@ (8013418 <tcp_receive+0xcf8>)
 8013280:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	7d1b      	ldrb	r3, [r3, #20]
 8013286:	2b04      	cmp	r3, #4
 8013288:	d102      	bne.n	8013290 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2207      	movs	r2, #7
 801328e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013298:	68b8      	ldr	r0, [r7, #8]
 801329a:	f7fd fbc0 	bl	8010a1e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d008      	beq.n	80132b8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132aa:	691b      	ldr	r3, [r3, #16]
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80132b2:	429a      	cmp	r2, r3
 80132b4:	f43f af43 	beq.w	801313e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8b5b      	ldrh	r3, [r3, #26]
 80132bc:	f003 0301 	and.w	r3, r3, #1
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00e      	beq.n	80132e2 <tcp_receive+0xbc2>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	8b5b      	ldrh	r3, [r3, #26]
 80132c8:	f023 0301 	bic.w	r3, r3, #1
 80132cc:	b29a      	uxth	r2, r3
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	835a      	strh	r2, [r3, #26]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	8b5b      	ldrh	r3, [r3, #26]
 80132d6:	f043 0302 	orr.w	r3, r3, #2
 80132da:	b29a      	uxth	r2, r3
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80132e0:	e187      	b.n	80135f2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	8b5b      	ldrh	r3, [r3, #26]
 80132e6:	f043 0301 	orr.w	r3, r3, #1
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80132f0:	e17f      	b.n	80135f2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d106      	bne.n	8013308 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80132fa:	4848      	ldr	r0, [pc, #288]	@ (801341c <tcp_receive+0xcfc>)
 80132fc:	f7fd fba8 	bl	8010a50 <tcp_seg_copy>
 8013300:	4602      	mov	r2, r0
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	675a      	str	r2, [r3, #116]	@ 0x74
 8013306:	e16c      	b.n	80135e2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013308:	2300      	movs	r3, #0
 801330a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013310:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013312:	e156      	b.n	80135c2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8013314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013316:	691b      	ldr	r3, [r3, #16]
 8013318:	685a      	ldr	r2, [r3, #4]
 801331a:	4b41      	ldr	r3, [pc, #260]	@ (8013420 <tcp_receive+0xd00>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	429a      	cmp	r2, r3
 8013320:	d11d      	bne.n	801335e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013322:	4b3e      	ldr	r3, [pc, #248]	@ (801341c <tcp_receive+0xcfc>)
 8013324:	891a      	ldrh	r2, [r3, #8]
 8013326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013328:	891b      	ldrh	r3, [r3, #8]
 801332a:	429a      	cmp	r2, r3
 801332c:	f240 814e 	bls.w	80135cc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013330:	483a      	ldr	r0, [pc, #232]	@ (801341c <tcp_receive+0xcfc>)
 8013332:	f7fd fb8d 	bl	8010a50 <tcp_seg_copy>
 8013336:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	f000 8148 	beq.w	80135d0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8013340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013342:	2b00      	cmp	r3, #0
 8013344:	d003      	beq.n	801334e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	601a      	str	r2, [r3, #0]
 801334c:	e002      	b.n	8013354 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	697a      	ldr	r2, [r7, #20]
 8013352:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013354:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013356:	6978      	ldr	r0, [r7, #20]
 8013358:	f7ff f8de 	bl	8012518 <tcp_oos_insert_segment>
                }
                break;
 801335c:	e138      	b.n	80135d0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801335e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013360:	2b00      	cmp	r3, #0
 8013362:	d117      	bne.n	8013394 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013364:	4b2e      	ldr	r3, [pc, #184]	@ (8013420 <tcp_receive+0xd00>)
 8013366:	681a      	ldr	r2, [r3, #0]
 8013368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	685b      	ldr	r3, [r3, #4]
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	2b00      	cmp	r3, #0
 8013372:	da57      	bge.n	8013424 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013374:	4829      	ldr	r0, [pc, #164]	@ (801341c <tcp_receive+0xcfc>)
 8013376:	f7fd fb6b 	bl	8010a50 <tcp_seg_copy>
 801337a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	2b00      	cmp	r3, #0
 8013380:	f000 8128 	beq.w	80135d4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	69ba      	ldr	r2, [r7, #24]
 8013388:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801338a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801338c:	69b8      	ldr	r0, [r7, #24]
 801338e:	f7ff f8c3 	bl	8012518 <tcp_oos_insert_segment>
                  }
                  break;
 8013392:	e11f      	b.n	80135d4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013394:	4b22      	ldr	r3, [pc, #136]	@ (8013420 <tcp_receive+0xd00>)
 8013396:	681a      	ldr	r2, [r3, #0]
 8013398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	685b      	ldr	r3, [r3, #4]
 801339e:	1ad3      	subs	r3, r2, r3
 80133a0:	3b01      	subs	r3, #1
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	db3e      	blt.n	8013424 <tcp_receive+0xd04>
 80133a6:	4b1e      	ldr	r3, [pc, #120]	@ (8013420 <tcp_receive+0xd00>)
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133ac:	691b      	ldr	r3, [r3, #16]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	3301      	adds	r3, #1
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	dc35      	bgt.n	8013424 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80133b8:	4818      	ldr	r0, [pc, #96]	@ (801341c <tcp_receive+0xcfc>)
 80133ba:	f7fd fb49 	bl	8010a50 <tcp_seg_copy>
 80133be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80133c0:	69fb      	ldr	r3, [r7, #28]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f000 8108 	beq.w	80135d8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80133c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	685b      	ldr	r3, [r3, #4]
 80133ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80133d0:	8912      	ldrh	r2, [r2, #8]
 80133d2:	441a      	add	r2, r3
 80133d4:	4b12      	ldr	r3, [pc, #72]	@ (8013420 <tcp_receive+0xd00>)
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	1ad3      	subs	r3, r2, r3
 80133da:	2b00      	cmp	r3, #0
 80133dc:	dd12      	ble.n	8013404 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80133de:	4b10      	ldr	r3, [pc, #64]	@ (8013420 <tcp_receive+0xd00>)
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e6:	691b      	ldr	r3, [r3, #16]
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	1ad3      	subs	r3, r2, r3
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80133f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133f6:	685a      	ldr	r2, [r3, #4]
 80133f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133fa:	891b      	ldrh	r3, [r3, #8]
 80133fc:	4619      	mov	r1, r3
 80133fe:	4610      	mov	r0, r2
 8013400:	f7fb fe5a 	bl	800f0b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013406:	69fa      	ldr	r2, [r7, #28]
 8013408:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801340a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801340c:	69f8      	ldr	r0, [r7, #28]
 801340e:	f7ff f883 	bl	8012518 <tcp_oos_insert_segment>
                  }
                  break;
 8013412:	e0e1      	b.n	80135d8 <tcp_receive+0xeb8>
 8013414:	20013dbc 	.word	0x20013dbc
 8013418:	20013db9 	.word	0x20013db9
 801341c:	20013d88 	.word	0x20013d88
 8013420:	20013dac 	.word	0x20013dac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013426:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	2b00      	cmp	r3, #0
 801342e:	f040 80c5 	bne.w	80135bc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013432:	4b7f      	ldr	r3, [pc, #508]	@ (8013630 <tcp_receive+0xf10>)
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013438:	691b      	ldr	r3, [r3, #16]
 801343a:	685b      	ldr	r3, [r3, #4]
 801343c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801343e:	2b00      	cmp	r3, #0
 8013440:	f340 80bc 	ble.w	80135bc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	899b      	ldrh	r3, [r3, #12]
 801344a:	b29b      	uxth	r3, r3
 801344c:	4618      	mov	r0, r3
 801344e:	f7fa fa97 	bl	800d980 <lwip_htons>
 8013452:	4603      	mov	r3, r0
 8013454:	b2db      	uxtb	r3, r3
 8013456:	f003 0301 	and.w	r3, r3, #1
 801345a:	2b00      	cmp	r3, #0
 801345c:	f040 80be 	bne.w	80135dc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013460:	4874      	ldr	r0, [pc, #464]	@ (8013634 <tcp_receive+0xf14>)
 8013462:	f7fd faf5 	bl	8010a50 <tcp_seg_copy>
 8013466:	4602      	mov	r2, r0
 8013468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	f000 80b5 	beq.w	80135e0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013478:	691b      	ldr	r3, [r3, #16]
 801347a:	685b      	ldr	r3, [r3, #4]
 801347c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801347e:	8912      	ldrh	r2, [r2, #8]
 8013480:	441a      	add	r2, r3
 8013482:	4b6b      	ldr	r3, [pc, #428]	@ (8013630 <tcp_receive+0xf10>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	1ad3      	subs	r3, r2, r3
 8013488:	2b00      	cmp	r3, #0
 801348a:	dd12      	ble.n	80134b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801348c:	4b68      	ldr	r3, [pc, #416]	@ (8013630 <tcp_receive+0xf10>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	b29a      	uxth	r2, r3
 8013492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	b29b      	uxth	r3, r3
 801349a:	1ad3      	subs	r3, r2, r3
 801349c:	b29a      	uxth	r2, r3
 801349e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80134a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a4:	685a      	ldr	r2, [r3, #4]
 80134a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a8:	891b      	ldrh	r3, [r3, #8]
 80134aa:	4619      	mov	r1, r3
 80134ac:	4610      	mov	r0, r2
 80134ae:	f7fb fe03 	bl	800f0b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80134b2:	4b61      	ldr	r3, [pc, #388]	@ (8013638 <tcp_receive+0xf18>)
 80134b4:	881b      	ldrh	r3, [r3, #0]
 80134b6:	461a      	mov	r2, r3
 80134b8:	4b5d      	ldr	r3, [pc, #372]	@ (8013630 <tcp_receive+0xf10>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	441a      	add	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134c2:	6879      	ldr	r1, [r7, #4]
 80134c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80134c6:	440b      	add	r3, r1
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f340 8088 	ble.w	80135e0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80134d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	691b      	ldr	r3, [r3, #16]
 80134d6:	899b      	ldrh	r3, [r3, #12]
 80134d8:	b29b      	uxth	r3, r3
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fa fa50 	bl	800d980 <lwip_htons>
 80134e0:	4603      	mov	r3, r0
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	f003 0301 	and.w	r3, r3, #1
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d021      	beq.n	8013530 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80134ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	691b      	ldr	r3, [r3, #16]
 80134f2:	899b      	ldrh	r3, [r3, #12]
 80134f4:	b29b      	uxth	r3, r3
 80134f6:	b21b      	sxth	r3, r3
 80134f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80134fc:	b21c      	sxth	r4, r3
 80134fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	899b      	ldrh	r3, [r3, #12]
 8013506:	b29b      	uxth	r3, r3
 8013508:	4618      	mov	r0, r3
 801350a:	f7fa fa39 	bl	800d980 <lwip_htons>
 801350e:	4603      	mov	r3, r0
 8013510:	b2db      	uxtb	r3, r3
 8013512:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013516:	b29b      	uxth	r3, r3
 8013518:	4618      	mov	r0, r3
 801351a:	f7fa fa31 	bl	800d980 <lwip_htons>
 801351e:	4603      	mov	r3, r0
 8013520:	b21b      	sxth	r3, r3
 8013522:	4323      	orrs	r3, r4
 8013524:	b21a      	sxth	r2, r3
 8013526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	691b      	ldr	r3, [r3, #16]
 801352c:	b292      	uxth	r2, r2
 801352e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013534:	b29a      	uxth	r2, r3
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801353a:	4413      	add	r3, r2
 801353c:	b299      	uxth	r1, r3
 801353e:	4b3c      	ldr	r3, [pc, #240]	@ (8013630 <tcp_receive+0xf10>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	b29a      	uxth	r2, r3
 8013544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	1a8a      	subs	r2, r1, r2
 801354a:	b292      	uxth	r2, r2
 801354c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801354e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	685a      	ldr	r2, [r3, #4]
 8013554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	891b      	ldrh	r3, [r3, #8]
 801355a:	4619      	mov	r1, r3
 801355c:	4610      	mov	r0, r2
 801355e:	f7fb fdab 	bl	800f0b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	891c      	ldrh	r4, [r3, #8]
 8013568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	691b      	ldr	r3, [r3, #16]
 801356e:	899b      	ldrh	r3, [r3, #12]
 8013570:	b29b      	uxth	r3, r3
 8013572:	4618      	mov	r0, r3
 8013574:	f7fa fa04 	bl	800d980 <lwip_htons>
 8013578:	4603      	mov	r3, r0
 801357a:	b2db      	uxtb	r3, r3
 801357c:	f003 0303 	and.w	r3, r3, #3
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <tcp_receive+0xe68>
 8013584:	2301      	movs	r3, #1
 8013586:	e000      	b.n	801358a <tcp_receive+0xe6a>
 8013588:	2300      	movs	r3, #0
 801358a:	4423      	add	r3, r4
 801358c:	b29a      	uxth	r2, r3
 801358e:	4b2a      	ldr	r3, [pc, #168]	@ (8013638 <tcp_receive+0xf18>)
 8013590:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013592:	4b29      	ldr	r3, [pc, #164]	@ (8013638 <tcp_receive+0xf18>)
 8013594:	881b      	ldrh	r3, [r3, #0]
 8013596:	461a      	mov	r2, r3
 8013598:	4b25      	ldr	r3, [pc, #148]	@ (8013630 <tcp_receive+0xf10>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	441a      	add	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135a2:	6879      	ldr	r1, [r7, #4]
 80135a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80135a6:	440b      	add	r3, r1
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d019      	beq.n	80135e0 <tcp_receive+0xec0>
 80135ac:	4b23      	ldr	r3, [pc, #140]	@ (801363c <tcp_receive+0xf1c>)
 80135ae:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80135b2:	4923      	ldr	r1, [pc, #140]	@ (8013640 <tcp_receive+0xf20>)
 80135b4:	4823      	ldr	r0, [pc, #140]	@ (8013644 <tcp_receive+0xf24>)
 80135b6:	f007 fd43 	bl	801b040 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80135ba:	e011      	b.n	80135e0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80135bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80135c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	f47f aea5 	bne.w	8013314 <tcp_receive+0xbf4>
 80135ca:	e00a      	b.n	80135e2 <tcp_receive+0xec2>
                break;
 80135cc:	bf00      	nop
 80135ce:	e008      	b.n	80135e2 <tcp_receive+0xec2>
                break;
 80135d0:	bf00      	nop
 80135d2:	e006      	b.n	80135e2 <tcp_receive+0xec2>
                  break;
 80135d4:	bf00      	nop
 80135d6:	e004      	b.n	80135e2 <tcp_receive+0xec2>
                  break;
 80135d8:	bf00      	nop
 80135da:	e002      	b.n	80135e2 <tcp_receive+0xec2>
                  break;
 80135dc:	bf00      	nop
 80135de:	e000      	b.n	80135e2 <tcp_receive+0xec2>
                break;
 80135e0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f001 fa68 	bl	8014ab8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80135e8:	e003      	b.n	80135f2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f001 fa64 	bl	8014ab8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80135f0:	e01a      	b.n	8013628 <tcp_receive+0xf08>
 80135f2:	e019      	b.n	8013628 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80135f4:	4b0e      	ldr	r3, [pc, #56]	@ (8013630 <tcp_receive+0xf10>)
 80135f6:	681a      	ldr	r2, [r3, #0]
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135fc:	1ad3      	subs	r3, r2, r3
 80135fe:	2b00      	cmp	r3, #0
 8013600:	db0a      	blt.n	8013618 <tcp_receive+0xef8>
 8013602:	4b0b      	ldr	r3, [pc, #44]	@ (8013630 <tcp_receive+0xf10>)
 8013604:	681a      	ldr	r2, [r3, #0]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801360a:	6879      	ldr	r1, [r7, #4]
 801360c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801360e:	440b      	add	r3, r1
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	3301      	adds	r3, #1
 8013614:	2b00      	cmp	r3, #0
 8013616:	dd07      	ble.n	8013628 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	8b5b      	ldrh	r3, [r3, #26]
 801361c:	f043 0302 	orr.w	r3, r3, #2
 8013620:	b29a      	uxth	r2, r3
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013626:	e7ff      	b.n	8013628 <tcp_receive+0xf08>
 8013628:	bf00      	nop
 801362a:	3750      	adds	r7, #80	@ 0x50
 801362c:	46bd      	mov	sp, r7
 801362e:	bdb0      	pop	{r4, r5, r7, pc}
 8013630:	20013dac 	.word	0x20013dac
 8013634:	20013d88 	.word	0x20013d88
 8013638:	20013db6 	.word	0x20013db6
 801363c:	0801ecac 	.word	0x0801ecac
 8013640:	0801f054 	.word	0x0801f054
 8013644:	0801ecf8 	.word	0x0801ecf8

08013648 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013648:	b480      	push	{r7}
 801364a:	b083      	sub	sp, #12
 801364c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801364e:	4b15      	ldr	r3, [pc, #84]	@ (80136a4 <tcp_get_next_optbyte+0x5c>)
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	1c5a      	adds	r2, r3, #1
 8013654:	b291      	uxth	r1, r2
 8013656:	4a13      	ldr	r2, [pc, #76]	@ (80136a4 <tcp_get_next_optbyte+0x5c>)
 8013658:	8011      	strh	r1, [r2, #0]
 801365a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801365c:	4b12      	ldr	r3, [pc, #72]	@ (80136a8 <tcp_get_next_optbyte+0x60>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d004      	beq.n	801366e <tcp_get_next_optbyte+0x26>
 8013664:	4b11      	ldr	r3, [pc, #68]	@ (80136ac <tcp_get_next_optbyte+0x64>)
 8013666:	881b      	ldrh	r3, [r3, #0]
 8013668:	88fa      	ldrh	r2, [r7, #6]
 801366a:	429a      	cmp	r2, r3
 801366c:	d208      	bcs.n	8013680 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801366e:	4b10      	ldr	r3, [pc, #64]	@ (80136b0 <tcp_get_next_optbyte+0x68>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	3314      	adds	r3, #20
 8013674:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013676:	88fb      	ldrh	r3, [r7, #6]
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	4413      	add	r3, r2
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	e00b      	b.n	8013698 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013680:	88fb      	ldrh	r3, [r7, #6]
 8013682:	b2da      	uxtb	r2, r3
 8013684:	4b09      	ldr	r3, [pc, #36]	@ (80136ac <tcp_get_next_optbyte+0x64>)
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	b2db      	uxtb	r3, r3
 801368a:	1ad3      	subs	r3, r2, r3
 801368c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801368e:	4b06      	ldr	r3, [pc, #24]	@ (80136a8 <tcp_get_next_optbyte+0x60>)
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	797b      	ldrb	r3, [r7, #5]
 8013694:	4413      	add	r3, r2
 8013696:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013698:	4618      	mov	r0, r3
 801369a:	370c      	adds	r7, #12
 801369c:	46bd      	mov	sp, r7
 801369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136a2:	4770      	bx	lr
 80136a4:	20013da8 	.word	0x20013da8
 80136a8:	20013da4 	.word	0x20013da4
 80136ac:	20013da2 	.word	0x20013da2
 80136b0:	20013d9c 	.word	0x20013d9c

080136b4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b084      	sub	sp, #16
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d106      	bne.n	80136d0 <tcp_parseopt+0x1c>
 80136c2:	4b33      	ldr	r3, [pc, #204]	@ (8013790 <tcp_parseopt+0xdc>)
 80136c4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80136c8:	4932      	ldr	r1, [pc, #200]	@ (8013794 <tcp_parseopt+0xe0>)
 80136ca:	4833      	ldr	r0, [pc, #204]	@ (8013798 <tcp_parseopt+0xe4>)
 80136cc:	f007 fcb8 	bl	801b040 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80136d0:	4b32      	ldr	r3, [pc, #200]	@ (801379c <tcp_parseopt+0xe8>)
 80136d2:	881b      	ldrh	r3, [r3, #0]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d057      	beq.n	8013788 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80136d8:	4b31      	ldr	r3, [pc, #196]	@ (80137a0 <tcp_parseopt+0xec>)
 80136da:	2200      	movs	r2, #0
 80136dc:	801a      	strh	r2, [r3, #0]
 80136de:	e047      	b.n	8013770 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 80136e0:	f7ff ffb2 	bl	8013648 <tcp_get_next_optbyte>
 80136e4:	4603      	mov	r3, r0
 80136e6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80136e8:	7bfb      	ldrb	r3, [r7, #15]
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	d006      	beq.n	80136fc <tcp_parseopt+0x48>
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	dc2b      	bgt.n	801374a <tcp_parseopt+0x96>
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d043      	beq.n	801377e <tcp_parseopt+0xca>
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d039      	beq.n	801376e <tcp_parseopt+0xba>
 80136fa:	e026      	b.n	801374a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80136fc:	f7ff ffa4 	bl	8013648 <tcp_get_next_optbyte>
 8013700:	4603      	mov	r3, r0
 8013702:	2b04      	cmp	r3, #4
 8013704:	d13d      	bne.n	8013782 <tcp_parseopt+0xce>
 8013706:	4b26      	ldr	r3, [pc, #152]	@ (80137a0 <tcp_parseopt+0xec>)
 8013708:	881b      	ldrh	r3, [r3, #0]
 801370a:	3301      	adds	r3, #1
 801370c:	4a23      	ldr	r2, [pc, #140]	@ (801379c <tcp_parseopt+0xe8>)
 801370e:	8812      	ldrh	r2, [r2, #0]
 8013710:	4293      	cmp	r3, r2
 8013712:	da36      	bge.n	8013782 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013714:	f7ff ff98 	bl	8013648 <tcp_get_next_optbyte>
 8013718:	4603      	mov	r3, r0
 801371a:	021b      	lsls	r3, r3, #8
 801371c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801371e:	f7ff ff93 	bl	8013648 <tcp_get_next_optbyte>
 8013722:	4603      	mov	r3, r0
 8013724:	461a      	mov	r2, r3
 8013726:	89bb      	ldrh	r3, [r7, #12]
 8013728:	4313      	orrs	r3, r2
 801372a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801372c:	89bb      	ldrh	r3, [r7, #12]
 801372e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013732:	4293      	cmp	r3, r2
 8013734:	d804      	bhi.n	8013740 <tcp_parseopt+0x8c>
 8013736:	89bb      	ldrh	r3, [r7, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d001      	beq.n	8013740 <tcp_parseopt+0x8c>
 801373c:	89ba      	ldrh	r2, [r7, #12]
 801373e:	e001      	b.n	8013744 <tcp_parseopt+0x90>
 8013740:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013748:	e012      	b.n	8013770 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801374a:	f7ff ff7d 	bl	8013648 <tcp_get_next_optbyte>
 801374e:	4603      	mov	r3, r0
 8013750:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013752:	7afb      	ldrb	r3, [r7, #11]
 8013754:	2b01      	cmp	r3, #1
 8013756:	d916      	bls.n	8013786 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013758:	7afb      	ldrb	r3, [r7, #11]
 801375a:	b29a      	uxth	r2, r3
 801375c:	4b10      	ldr	r3, [pc, #64]	@ (80137a0 <tcp_parseopt+0xec>)
 801375e:	881b      	ldrh	r3, [r3, #0]
 8013760:	4413      	add	r3, r2
 8013762:	b29b      	uxth	r3, r3
 8013764:	3b02      	subs	r3, #2
 8013766:	b29a      	uxth	r2, r3
 8013768:	4b0d      	ldr	r3, [pc, #52]	@ (80137a0 <tcp_parseopt+0xec>)
 801376a:	801a      	strh	r2, [r3, #0]
 801376c:	e000      	b.n	8013770 <tcp_parseopt+0xbc>
          break;
 801376e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013770:	4b0b      	ldr	r3, [pc, #44]	@ (80137a0 <tcp_parseopt+0xec>)
 8013772:	881a      	ldrh	r2, [r3, #0]
 8013774:	4b09      	ldr	r3, [pc, #36]	@ (801379c <tcp_parseopt+0xe8>)
 8013776:	881b      	ldrh	r3, [r3, #0]
 8013778:	429a      	cmp	r2, r3
 801377a:	d3b1      	bcc.n	80136e0 <tcp_parseopt+0x2c>
 801377c:	e004      	b.n	8013788 <tcp_parseopt+0xd4>
          return;
 801377e:	bf00      	nop
 8013780:	e002      	b.n	8013788 <tcp_parseopt+0xd4>
            return;
 8013782:	bf00      	nop
 8013784:	e000      	b.n	8013788 <tcp_parseopt+0xd4>
            return;
 8013786:	bf00      	nop
      }
    }
  }
}
 8013788:	3710      	adds	r7, #16
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	0801ecac 	.word	0x0801ecac
 8013794:	0801f110 	.word	0x0801f110
 8013798:	0801ecf8 	.word	0x0801ecf8
 801379c:	20013da0 	.word	0x20013da0
 80137a0:	20013da8 	.word	0x20013da8

080137a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80137a4:	b480      	push	{r7}
 80137a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80137a8:	4b05      	ldr	r3, [pc, #20]	@ (80137c0 <tcp_trigger_input_pcb_close+0x1c>)
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	f043 0310 	orr.w	r3, r3, #16
 80137b0:	b2da      	uxtb	r2, r3
 80137b2:	4b03      	ldr	r3, [pc, #12]	@ (80137c0 <tcp_trigger_input_pcb_close+0x1c>)
 80137b4:	701a      	strb	r2, [r3, #0]
}
 80137b6:	bf00      	nop
 80137b8:	46bd      	mov	sp, r7
 80137ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137be:	4770      	bx	lr
 80137c0:	20013db9 	.word	0x20013db9

080137c4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b084      	sub	sp, #16
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	60f8      	str	r0, [r7, #12]
 80137cc:	60b9      	str	r1, [r7, #8]
 80137ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d00a      	beq.n	80137ec <tcp_route+0x28>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	7a1b      	ldrb	r3, [r3, #8]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d006      	beq.n	80137ec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	7a1b      	ldrb	r3, [r3, #8]
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fb fa5c 	bl	800eca0 <netif_get_by_index>
 80137e8:	4603      	mov	r3, r0
 80137ea:	e003      	b.n	80137f4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f005 f9e3 	bl	8018bb8 <ip4_route>
 80137f2:	4603      	mov	r3, r0
  }
}
 80137f4:	4618      	mov	r0, r3
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80137fc:	b590      	push	{r4, r7, lr}
 80137fe:	b087      	sub	sp, #28
 8013800:	af00      	add	r7, sp, #0
 8013802:	60f8      	str	r0, [r7, #12]
 8013804:	60b9      	str	r1, [r7, #8]
 8013806:	603b      	str	r3, [r7, #0]
 8013808:	4613      	mov	r3, r2
 801380a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d105      	bne.n	801381e <tcp_create_segment+0x22>
 8013812:	4b45      	ldr	r3, [pc, #276]	@ (8013928 <tcp_create_segment+0x12c>)
 8013814:	22a3      	movs	r2, #163	@ 0xa3
 8013816:	4945      	ldr	r1, [pc, #276]	@ (801392c <tcp_create_segment+0x130>)
 8013818:	4845      	ldr	r0, [pc, #276]	@ (8013930 <tcp_create_segment+0x134>)
 801381a:	f007 fc11 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d105      	bne.n	8013830 <tcp_create_segment+0x34>
 8013824:	4b40      	ldr	r3, [pc, #256]	@ (8013928 <tcp_create_segment+0x12c>)
 8013826:	22a4      	movs	r2, #164	@ 0xa4
 8013828:	4942      	ldr	r1, [pc, #264]	@ (8013934 <tcp_create_segment+0x138>)
 801382a:	4841      	ldr	r0, [pc, #260]	@ (8013930 <tcp_create_segment+0x134>)
 801382c:	f007 fc08 	bl	801b040 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013830:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	b2db      	uxtb	r3, r3
 8013838:	f003 0304 	and.w	r3, r3, #4
 801383c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801383e:	2003      	movs	r0, #3
 8013840:	f7fa fecc 	bl	800e5dc <memp_malloc>
 8013844:	6138      	str	r0, [r7, #16]
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d104      	bne.n	8013856 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801384c:	68b8      	ldr	r0, [r7, #8]
 801384e:	f7fb fdb9 	bl	800f3c4 <pbuf_free>
    return NULL;
 8013852:	2300      	movs	r3, #0
 8013854:	e063      	b.n	801391e <tcp_create_segment+0x122>
  }
  seg->flags = optflags;
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801385c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	2200      	movs	r2, #0
 8013862:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	68ba      	ldr	r2, [r7, #8]
 8013868:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	891a      	ldrh	r2, [r3, #8]
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	b29b      	uxth	r3, r3
 8013872:	429a      	cmp	r2, r3
 8013874:	d205      	bcs.n	8013882 <tcp_create_segment+0x86>
 8013876:	4b2c      	ldr	r3, [pc, #176]	@ (8013928 <tcp_create_segment+0x12c>)
 8013878:	22b0      	movs	r2, #176	@ 0xb0
 801387a:	492f      	ldr	r1, [pc, #188]	@ (8013938 <tcp_create_segment+0x13c>)
 801387c:	482c      	ldr	r0, [pc, #176]	@ (8013930 <tcp_create_segment+0x134>)
 801387e:	f007 fbdf 	bl	801b040 <iprintf>
  seg->len = p->tot_len - optlen;
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	891a      	ldrh	r2, [r3, #8]
 8013886:	7dfb      	ldrb	r3, [r7, #23]
 8013888:	b29b      	uxth	r3, r3
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	b29a      	uxth	r2, r3
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	2200      	movs	r2, #0
 8013896:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013898:	2114      	movs	r1, #20
 801389a:	68b8      	ldr	r0, [r7, #8]
 801389c:	f7fb fcfc 	bl	800f298 <pbuf_add_header>
 80138a0:	4603      	mov	r3, r0
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d004      	beq.n	80138b0 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80138a6:	6938      	ldr	r0, [r7, #16]
 80138a8:	f7fd f8b9 	bl	8010a1e <tcp_seg_free>
    return NULL;
 80138ac:	2300      	movs	r3, #0
 80138ae:	e036      	b.n	801391e <tcp_create_segment+0x122>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	685a      	ldr	r2, [r3, #4]
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	8ada      	ldrh	r2, [r3, #22]
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	691c      	ldr	r4, [r3, #16]
 80138c2:	4610      	mov	r0, r2
 80138c4:	f7fa f85c 	bl	800d980 <lwip_htons>
 80138c8:	4603      	mov	r3, r0
 80138ca:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	8b1a      	ldrh	r2, [r3, #24]
 80138d0:	693b      	ldr	r3, [r7, #16]
 80138d2:	691c      	ldr	r4, [r3, #16]
 80138d4:	4610      	mov	r0, r2
 80138d6:	f7fa f853 	bl	800d980 <lwip_htons>
 80138da:	4603      	mov	r3, r0
 80138dc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80138de:	693b      	ldr	r3, [r7, #16]
 80138e0:	691c      	ldr	r4, [r3, #16]
 80138e2:	6838      	ldr	r0, [r7, #0]
 80138e4:	f7fa f861 	bl	800d9aa <lwip_htonl>
 80138e8:	4603      	mov	r3, r0
 80138ea:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80138ec:	7dfb      	ldrb	r3, [r7, #23]
 80138ee:	089b      	lsrs	r3, r3, #2
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	3305      	adds	r3, #5
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	031b      	lsls	r3, r3, #12
 80138f8:	b29a      	uxth	r2, r3
 80138fa:	79fb      	ldrb	r3, [r7, #7]
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	4313      	orrs	r3, r2
 8013900:	b29a      	uxth	r2, r3
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	691c      	ldr	r4, [r3, #16]
 8013906:	4610      	mov	r0, r2
 8013908:	f7fa f83a 	bl	800d980 <lwip_htons>
 801390c:	4603      	mov	r3, r0
 801390e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	691b      	ldr	r3, [r3, #16]
 8013914:	2200      	movs	r2, #0
 8013916:	749a      	strb	r2, [r3, #18]
 8013918:	2200      	movs	r2, #0
 801391a:	74da      	strb	r2, [r3, #19]
  return seg;
 801391c:	693b      	ldr	r3, [r7, #16]
}
 801391e:	4618      	mov	r0, r3
 8013920:	371c      	adds	r7, #28
 8013922:	46bd      	mov	sp, r7
 8013924:	bd90      	pop	{r4, r7, pc}
 8013926:	bf00      	nop
 8013928:	0801f12c 	.word	0x0801f12c
 801392c:	0801f160 	.word	0x0801f160
 8013930:	0801f180 	.word	0x0801f180
 8013934:	0801f1a8 	.word	0x0801f1a8
 8013938:	0801f1cc 	.word	0x0801f1cc

0801393c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801393c:	b590      	push	{r4, r7, lr}
 801393e:	b08b      	sub	sp, #44	@ 0x2c
 8013940:	af02      	add	r7, sp, #8
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	460b      	mov	r3, r1
 8013946:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013948:	2300      	movs	r3, #0
 801394a:	61bb      	str	r3, [r7, #24]
 801394c:	2300      	movs	r3, #0
 801394e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013950:	2300      	movs	r3, #0
 8013952:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d106      	bne.n	8013968 <tcp_split_unsent_seg+0x2c>
 801395a:	4b97      	ldr	r3, [pc, #604]	@ (8013bb8 <tcp_split_unsent_seg+0x27c>)
 801395c:	f240 324b 	movw	r2, #843	@ 0x34b
 8013960:	4996      	ldr	r1, [pc, #600]	@ (8013bbc <tcp_split_unsent_seg+0x280>)
 8013962:	4897      	ldr	r0, [pc, #604]	@ (8013bc0 <tcp_split_unsent_seg+0x284>)
 8013964:	f007 fb6c 	bl	801b040 <iprintf>

  useg = pcb->unsent;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801396c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d102      	bne.n	801397a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013974:	f04f 33ff 	mov.w	r3, #4294967295
 8013978:	e119      	b.n	8013bae <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801397a:	887b      	ldrh	r3, [r7, #2]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d109      	bne.n	8013994 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013980:	4b8d      	ldr	r3, [pc, #564]	@ (8013bb8 <tcp_split_unsent_seg+0x27c>)
 8013982:	f240 3253 	movw	r2, #851	@ 0x353
 8013986:	498f      	ldr	r1, [pc, #572]	@ (8013bc4 <tcp_split_unsent_seg+0x288>)
 8013988:	488d      	ldr	r0, [pc, #564]	@ (8013bc0 <tcp_split_unsent_seg+0x284>)
 801398a:	f007 fb59 	bl	801b040 <iprintf>
    return ERR_VAL;
 801398e:	f06f 0305 	mvn.w	r3, #5
 8013992:	e10c      	b.n	8013bae <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	891b      	ldrh	r3, [r3, #8]
 8013998:	887a      	ldrh	r2, [r7, #2]
 801399a:	429a      	cmp	r2, r3
 801399c:	d301      	bcc.n	80139a2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801399e:	2300      	movs	r3, #0
 80139a0:	e105      	b.n	8013bae <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80139a6:	887a      	ldrh	r2, [r7, #2]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d906      	bls.n	80139ba <tcp_split_unsent_seg+0x7e>
 80139ac:	4b82      	ldr	r3, [pc, #520]	@ (8013bb8 <tcp_split_unsent_seg+0x27c>)
 80139ae:	f240 325b 	movw	r2, #859	@ 0x35b
 80139b2:	4985      	ldr	r1, [pc, #532]	@ (8013bc8 <tcp_split_unsent_seg+0x28c>)
 80139b4:	4882      	ldr	r0, [pc, #520]	@ (8013bc0 <tcp_split_unsent_seg+0x284>)
 80139b6:	f007 fb43 	bl	801b040 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80139ba:	697b      	ldr	r3, [r7, #20]
 80139bc:	891b      	ldrh	r3, [r3, #8]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d106      	bne.n	80139d0 <tcp_split_unsent_seg+0x94>
 80139c2:	4b7d      	ldr	r3, [pc, #500]	@ (8013bb8 <tcp_split_unsent_seg+0x27c>)
 80139c4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80139c8:	4980      	ldr	r1, [pc, #512]	@ (8013bcc <tcp_split_unsent_seg+0x290>)
 80139ca:	487d      	ldr	r0, [pc, #500]	@ (8013bc0 <tcp_split_unsent_seg+0x284>)
 80139cc:	f007 fb38 	bl	801b040 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	7b1b      	ldrb	r3, [r3, #12]
 80139d4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80139d6:	7bfb      	ldrb	r3, [r7, #15]
 80139d8:	009b      	lsls	r3, r3, #2
 80139da:	b2db      	uxtb	r3, r3
 80139dc:	f003 0304 	and.w	r3, r3, #4
 80139e0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	891a      	ldrh	r2, [r3, #8]
 80139e6:	887b      	ldrh	r3, [r7, #2]
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80139ec:	7bbb      	ldrb	r3, [r7, #14]
 80139ee:	b29a      	uxth	r2, r3
 80139f0:	89bb      	ldrh	r3, [r7, #12]
 80139f2:	4413      	add	r3, r2
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80139fa:	4619      	mov	r1, r3
 80139fc:	2036      	movs	r0, #54	@ 0x36
 80139fe:	f7fb f9f9 	bl	800edf4 <pbuf_alloc>
 8013a02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	f000 80ba 	beq.w	8013b80 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	891a      	ldrh	r2, [r3, #8]
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	891b      	ldrh	r3, [r3, #8]
 8013a16:	1ad3      	subs	r3, r2, r3
 8013a18:	b29a      	uxth	r2, r3
 8013a1a:	887b      	ldrh	r3, [r7, #2]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013a20:	697b      	ldr	r3, [r7, #20]
 8013a22:	6858      	ldr	r0, [r3, #4]
 8013a24:	693b      	ldr	r3, [r7, #16]
 8013a26:	685a      	ldr	r2, [r3, #4]
 8013a28:	7bbb      	ldrb	r3, [r7, #14]
 8013a2a:	18d1      	adds	r1, r2, r3
 8013a2c:	897b      	ldrh	r3, [r7, #10]
 8013a2e:	89ba      	ldrh	r2, [r7, #12]
 8013a30:	f7fb fece 	bl	800f7d0 <pbuf_copy_partial>
 8013a34:	4603      	mov	r3, r0
 8013a36:	461a      	mov	r2, r3
 8013a38:	89bb      	ldrh	r3, [r7, #12]
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	f040 80a2 	bne.w	8013b84 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	691b      	ldr	r3, [r3, #16]
 8013a44:	899b      	ldrh	r3, [r3, #12]
 8013a46:	b29b      	uxth	r3, r3
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7f9 ff99 	bl	800d980 <lwip_htons>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	b2db      	uxtb	r3, r3
 8013a52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013a56:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a58:	2300      	movs	r3, #0
 8013a5a:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013a5c:	7ffb      	ldrb	r3, [r7, #31]
 8013a5e:	f003 0308 	and.w	r3, r3, #8
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d007      	beq.n	8013a76 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a66:	7ffb      	ldrb	r3, [r7, #31]
 8013a68:	f023 0308 	bic.w	r3, r3, #8
 8013a6c:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013a6e:	7fbb      	ldrb	r3, [r7, #30]
 8013a70:	f043 0308 	orr.w	r3, r3, #8
 8013a74:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013a76:	7ffb      	ldrb	r3, [r7, #31]
 8013a78:	f003 0301 	and.w	r3, r3, #1
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d007      	beq.n	8013a90 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013a80:	7ffb      	ldrb	r3, [r7, #31]
 8013a82:	f023 0301 	bic.w	r3, r3, #1
 8013a86:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013a88:	7fbb      	ldrb	r3, [r7, #30]
 8013a8a:	f043 0301 	orr.w	r3, r3, #1
 8013a8e:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	691b      	ldr	r3, [r3, #16]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7f9 ff87 	bl	800d9aa <lwip_htonl>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	887b      	ldrh	r3, [r7, #2]
 8013aa0:	18d1      	adds	r1, r2, r3
 8013aa2:	7fba      	ldrb	r2, [r7, #30]
 8013aa4:	7bfb      	ldrb	r3, [r7, #15]
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	460b      	mov	r3, r1
 8013aaa:	6939      	ldr	r1, [r7, #16]
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7ff fea5 	bl	80137fc <tcp_create_segment>
 8013ab2:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013ab4:	69bb      	ldr	r3, [r7, #24]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d066      	beq.n	8013b88 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fb fd0e 	bl	800f4e0 <pbuf_clen>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013ace:	1a9b      	subs	r3, r3, r2
 8013ad0:	b29a      	uxth	r2, r3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	6858      	ldr	r0, [r3, #4]
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	891a      	ldrh	r2, [r3, #8]
 8013ae2:	89bb      	ldrh	r3, [r7, #12]
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	b29b      	uxth	r3, r3
 8013ae8:	4619      	mov	r1, r3
 8013aea:	f7fb fae5 	bl	800f0b8 <pbuf_realloc>
  useg->len -= remainder;
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	891a      	ldrh	r2, [r3, #8]
 8013af2:	89bb      	ldrh	r3, [r7, #12]
 8013af4:	1ad3      	subs	r3, r2, r3
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	691b      	ldr	r3, [r3, #16]
 8013b00:	899b      	ldrh	r3, [r3, #12]
 8013b02:	b29c      	uxth	r4, r3
 8013b04:	7ffb      	ldrb	r3, [r7, #31]
 8013b06:	b29b      	uxth	r3, r3
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7f9 ff39 	bl	800d980 <lwip_htons>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	461a      	mov	r2, r3
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	691b      	ldr	r3, [r3, #16]
 8013b16:	4322      	orrs	r2, r4
 8013b18:	b292      	uxth	r2, r2
 8013b1a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013b22:	697b      	ldr	r3, [r7, #20]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7fb fcda 	bl	800f4e0 <pbuf_clen>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	461a      	mov	r2, r3
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b36:	4413      	add	r3, r2
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b40:	69bb      	ldr	r3, [r7, #24]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fb fccb 	bl	800f4e0 <pbuf_clen>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013b54:	4413      	add	r3, r2
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	69ba      	ldr	r2, [r7, #24]
 8013b6a:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d103      	bne.n	8013b7c <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	e016      	b.n	8013bae <tcp_split_unsent_seg+0x272>
    goto memerr;
 8013b80:	bf00      	nop
 8013b82:	e002      	b.n	8013b8a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013b84:	bf00      	nop
 8013b86:	e000      	b.n	8013b8a <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013b88:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013b8a:	69bb      	ldr	r3, [r7, #24]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d006      	beq.n	8013b9e <tcp_split_unsent_seg+0x262>
 8013b90:	4b09      	ldr	r3, [pc, #36]	@ (8013bb8 <tcp_split_unsent_seg+0x27c>)
 8013b92:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013b96:	490e      	ldr	r1, [pc, #56]	@ (8013bd0 <tcp_split_unsent_seg+0x294>)
 8013b98:	4809      	ldr	r0, [pc, #36]	@ (8013bc0 <tcp_split_unsent_seg+0x284>)
 8013b9a:	f007 fa51 	bl	801b040 <iprintf>
  if (p != NULL) {
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d002      	beq.n	8013baa <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013ba4:	6938      	ldr	r0, [r7, #16]
 8013ba6:	f7fb fc0d 	bl	800f3c4 <pbuf_free>
  }

  return ERR_MEM;
 8013baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3724      	adds	r7, #36	@ 0x24
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd90      	pop	{r4, r7, pc}
 8013bb6:	bf00      	nop
 8013bb8:	0801f12c 	.word	0x0801f12c
 8013bbc:	0801f51c 	.word	0x0801f51c
 8013bc0:	0801f180 	.word	0x0801f180
 8013bc4:	0801f540 	.word	0x0801f540
 8013bc8:	0801f564 	.word	0x0801f564
 8013bcc:	0801f574 	.word	0x0801f574
 8013bd0:	0801f584 	.word	0x0801f584

08013bd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013bd4:	b590      	push	{r4, r7, lr}
 8013bd6:	b085      	sub	sp, #20
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d106      	bne.n	8013bf0 <tcp_send_fin+0x1c>
 8013be2:	4b21      	ldr	r3, [pc, #132]	@ (8013c68 <tcp_send_fin+0x94>)
 8013be4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013be8:	4920      	ldr	r1, [pc, #128]	@ (8013c6c <tcp_send_fin+0x98>)
 8013bea:	4821      	ldr	r0, [pc, #132]	@ (8013c70 <tcp_send_fin+0x9c>)
 8013bec:	f007 fa28 	bl	801b040 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d02e      	beq.n	8013c56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013bfc:	60fb      	str	r3, [r7, #12]
 8013bfe:	e002      	b.n	8013c06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d1f8      	bne.n	8013c00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	691b      	ldr	r3, [r3, #16]
 8013c12:	899b      	ldrh	r3, [r3, #12]
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7f9 feb2 	bl	800d980 <lwip_htons>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	f003 0307 	and.w	r3, r3, #7
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d116      	bne.n	8013c56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	691b      	ldr	r3, [r3, #16]
 8013c2c:	899b      	ldrh	r3, [r3, #12]
 8013c2e:	b29c      	uxth	r4, r3
 8013c30:	2001      	movs	r0, #1
 8013c32:	f7f9 fea5 	bl	800d980 <lwip_htons>
 8013c36:	4603      	mov	r3, r0
 8013c38:	461a      	mov	r2, r3
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	691b      	ldr	r3, [r3, #16]
 8013c3e:	4322      	orrs	r2, r4
 8013c40:	b292      	uxth	r2, r2
 8013c42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	8b5b      	ldrh	r3, [r3, #26]
 8013c48:	f043 0320 	orr.w	r3, r3, #32
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	e004      	b.n	8013c60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c56:	2101      	movs	r1, #1
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 f80b 	bl	8013c74 <tcp_enqueue_flags>
 8013c5e:	4603      	mov	r3, r0
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3714      	adds	r7, #20
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd90      	pop	{r4, r7, pc}
 8013c68:	0801f12c 	.word	0x0801f12c
 8013c6c:	0801f590 	.word	0x0801f590
 8013c70:	0801f180 	.word	0x0801f180

08013c74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b088      	sub	sp, #32
 8013c78:	af02      	add	r7, sp, #8
 8013c7a:	6078      	str	r0, [r7, #4]
 8013c7c:	460b      	mov	r3, r1
 8013c7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013c84:	2300      	movs	r3, #0
 8013c86:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013c88:	78fb      	ldrb	r3, [r7, #3]
 8013c8a:	f003 0303 	and.w	r3, r3, #3
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d106      	bne.n	8013ca0 <tcp_enqueue_flags+0x2c>
 8013c92:	4b67      	ldr	r3, [pc, #412]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013c94:	f240 4211 	movw	r2, #1041	@ 0x411
 8013c98:	4966      	ldr	r1, [pc, #408]	@ (8013e34 <tcp_enqueue_flags+0x1c0>)
 8013c9a:	4867      	ldr	r0, [pc, #412]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013c9c:	f007 f9d0 	bl	801b040 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d106      	bne.n	8013cb4 <tcp_enqueue_flags+0x40>
 8013ca6:	4b62      	ldr	r3, [pc, #392]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013ca8:	f240 4213 	movw	r2, #1043	@ 0x413
 8013cac:	4963      	ldr	r1, [pc, #396]	@ (8013e3c <tcp_enqueue_flags+0x1c8>)
 8013cae:	4862      	ldr	r0, [pc, #392]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013cb0:	f007 f9c6 	bl	801b040 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013cb4:	78fb      	ldrb	r3, [r7, #3]
 8013cb6:	f003 0302 	and.w	r3, r3, #2
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d001      	beq.n	8013cc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
 8013cc4:	009b      	lsls	r3, r3, #2
 8013cc6:	b2db      	uxtb	r3, r3
 8013cc8:	f003 0304 	and.w	r3, r3, #4
 8013ccc:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013cce:	7dbb      	ldrb	r3, [r7, #22]
 8013cd0:	b29b      	uxth	r3, r3
 8013cd2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	2036      	movs	r0, #54	@ 0x36
 8013cda:	f7fb f88b 	bl	800edf4 <pbuf_alloc>
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d109      	bne.n	8013cfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	8b5b      	ldrh	r3, [r3, #26]
 8013cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf8:	e095      	b.n	8013e26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	895a      	ldrh	r2, [r3, #10]
 8013cfe:	7dbb      	ldrb	r3, [r7, #22]
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	429a      	cmp	r2, r3
 8013d04:	d206      	bcs.n	8013d14 <tcp_enqueue_flags+0xa0>
 8013d06:	4b4a      	ldr	r3, [pc, #296]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013d08:	f240 4239 	movw	r2, #1081	@ 0x439
 8013d0c:	494c      	ldr	r1, [pc, #304]	@ (8013e40 <tcp_enqueue_flags+0x1cc>)
 8013d0e:	484a      	ldr	r0, [pc, #296]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013d10:	f007 f996 	bl	801b040 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8013d18:	78fa      	ldrb	r2, [r7, #3]
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	9300      	str	r3, [sp, #0]
 8013d1e:	460b      	mov	r3, r1
 8013d20:	68f9      	ldr	r1, [r7, #12]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7ff fd6a 	bl	80137fc <tcp_create_segment>
 8013d28:	60b8      	str	r0, [r7, #8]
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d109      	bne.n	8013d44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	8b5b      	ldrh	r3, [r3, #26]
 8013d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d38:	b29a      	uxth	r2, r3
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8013d42:	e070      	b.n	8013e26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	691b      	ldr	r3, [r3, #16]
 8013d48:	f003 0303 	and.w	r3, r3, #3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d006      	beq.n	8013d5e <tcp_enqueue_flags+0xea>
 8013d50:	4b37      	ldr	r3, [pc, #220]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013d52:	f240 4242 	movw	r2, #1090	@ 0x442
 8013d56:	493b      	ldr	r1, [pc, #236]	@ (8013e44 <tcp_enqueue_flags+0x1d0>)
 8013d58:	4837      	ldr	r0, [pc, #220]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013d5a:	f007 f971 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	891b      	ldrh	r3, [r3, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d006      	beq.n	8013d74 <tcp_enqueue_flags+0x100>
 8013d66:	4b32      	ldr	r3, [pc, #200]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013d68:	f240 4243 	movw	r2, #1091	@ 0x443
 8013d6c:	4936      	ldr	r1, [pc, #216]	@ (8013e48 <tcp_enqueue_flags+0x1d4>)
 8013d6e:	4832      	ldr	r0, [pc, #200]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013d70:	f007 f966 	bl	801b040 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d103      	bne.n	8013d84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	68ba      	ldr	r2, [r7, #8]
 8013d80:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013d82:	e00d      	b.n	8013da0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d88:	613b      	str	r3, [r7, #16]
 8013d8a:	e002      	b.n	8013d92 <tcp_enqueue_flags+0x11e>
 8013d8c:	693b      	ldr	r3, [r7, #16]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	613b      	str	r3, [r7, #16]
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d1f8      	bne.n	8013d8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013da8:	78fb      	ldrb	r3, [r7, #3]
 8013daa:	f003 0302 	and.w	r3, r3, #2
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d104      	bne.n	8013dbc <tcp_enqueue_flags+0x148>
 8013db2:	78fb      	ldrb	r3, [r7, #3]
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d004      	beq.n	8013dc6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013dc0:	1c5a      	adds	r2, r3, #1
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013dc6:	78fb      	ldrb	r3, [r7, #3]
 8013dc8:	f003 0301 	and.w	r3, r3, #1
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d006      	beq.n	8013dde <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	8b5b      	ldrh	r3, [r3, #26]
 8013dd4:	f043 0320 	orr.w	r3, r3, #32
 8013dd8:	b29a      	uxth	r2, r3
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7fb fb7c 	bl	800f4e0 <pbuf_clen>
 8013de8:	4603      	mov	r3, r0
 8013dea:	461a      	mov	r2, r3
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013df2:	4413      	add	r3, r2
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d00e      	beq.n	8013e24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d10a      	bne.n	8013e24 <tcp_enqueue_flags+0x1b0>
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d106      	bne.n	8013e24 <tcp_enqueue_flags+0x1b0>
 8013e16:	4b06      	ldr	r3, [pc, #24]	@ (8013e30 <tcp_enqueue_flags+0x1bc>)
 8013e18:	f240 4265 	movw	r2, #1125	@ 0x465
 8013e1c:	490b      	ldr	r1, [pc, #44]	@ (8013e4c <tcp_enqueue_flags+0x1d8>)
 8013e1e:	4806      	ldr	r0, [pc, #24]	@ (8013e38 <tcp_enqueue_flags+0x1c4>)
 8013e20:	f007 f90e 	bl	801b040 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013e24:	2300      	movs	r3, #0
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3718      	adds	r7, #24
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	0801f12c 	.word	0x0801f12c
 8013e34:	0801f5ac 	.word	0x0801f5ac
 8013e38:	0801f180 	.word	0x0801f180
 8013e3c:	0801f604 	.word	0x0801f604
 8013e40:	0801f624 	.word	0x0801f624
 8013e44:	0801f660 	.word	0x0801f660
 8013e48:	0801f678 	.word	0x0801f678
 8013e4c:	0801f6a4 	.word	0x0801f6a4

08013e50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e50:	b5b0      	push	{r4, r5, r7, lr}
 8013e52:	b08a      	sub	sp, #40	@ 0x28
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d106      	bne.n	8013e6c <tcp_output+0x1c>
 8013e5e:	4b8a      	ldr	r3, [pc, #552]	@ (8014088 <tcp_output+0x238>)
 8013e60:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013e64:	4989      	ldr	r1, [pc, #548]	@ (801408c <tcp_output+0x23c>)
 8013e66:	488a      	ldr	r0, [pc, #552]	@ (8014090 <tcp_output+0x240>)
 8013e68:	f007 f8ea 	bl	801b040 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	7d1b      	ldrb	r3, [r3, #20]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d106      	bne.n	8013e82 <tcp_output+0x32>
 8013e74:	4b84      	ldr	r3, [pc, #528]	@ (8014088 <tcp_output+0x238>)
 8013e76:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8013e7a:	4986      	ldr	r1, [pc, #536]	@ (8014094 <tcp_output+0x244>)
 8013e7c:	4884      	ldr	r0, [pc, #528]	@ (8014090 <tcp_output+0x240>)
 8013e7e:	f007 f8df 	bl	801b040 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013e82:	4b85      	ldr	r3, [pc, #532]	@ (8014098 <tcp_output+0x248>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d101      	bne.n	8013e90 <tcp_output+0x40>
    return ERR_OK;
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	e1d1      	b.n	8014234 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	bf28      	it	cs
 8013ea0:	4613      	movcs	r3, r2
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eaa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8013eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d10b      	bne.n	8013eca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	8b5b      	ldrh	r3, [r3, #26]
 8013eb6:	f003 0302 	and.w	r3, r3, #2
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	f000 81ad 	beq.w	801421a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	f000 fdf9 	bl	8014ab8 <tcp_send_empty_ack>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	e1b4      	b.n	8014234 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013eca:	6879      	ldr	r1, [r7, #4]
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	6878      	ldr	r0, [r7, #4]
 8013ed4:	f7ff fc76 	bl	80137c4 <tcp_route>
 8013ed8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d102      	bne.n	8013ee6 <tcp_output+0x96>
    return ERR_RTE;
 8013ee0:	f06f 0303 	mvn.w	r3, #3
 8013ee4:	e1a6      	b.n	8014234 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d003      	beq.n	8013ef4 <tcp_output+0xa4>
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d111      	bne.n	8013f18 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d002      	beq.n	8013f00 <tcp_output+0xb0>
 8013efa:	697b      	ldr	r3, [r7, #20]
 8013efc:	3304      	adds	r3, #4
 8013efe:	e000      	b.n	8013f02 <tcp_output+0xb2>
 8013f00:	2300      	movs	r3, #0
 8013f02:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d102      	bne.n	8013f10 <tcp_output+0xc0>
      return ERR_RTE;
 8013f0a:	f06f 0303 	mvn.w	r3, #3
 8013f0e:	e191      	b.n	8014234 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f1a:	691b      	ldr	r3, [r3, #16]
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7f9 fd43 	bl	800d9aa <lwip_htonl>
 8013f24:	4602      	mov	r2, r0
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f2a:	1ad3      	subs	r3, r2, r3
 8013f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f2e:	8912      	ldrh	r2, [r2, #8]
 8013f30:	4413      	add	r3, r2
 8013f32:	69ba      	ldr	r2, [r7, #24]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d227      	bcs.n	8013f88 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013f3e:	461a      	mov	r2, r3
 8013f40:	69bb      	ldr	r3, [r7, #24]
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d114      	bne.n	8013f70 <tcp_output+0x120>
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d110      	bne.n	8013f70 <tcp_output+0x120>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d10b      	bne.n	8013f70 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2201      	movs	r2, #1
 8013f64:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	8b5b      	ldrh	r3, [r3, #26]
 8013f74:	f003 0302 	and.w	r3, r3, #2
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f000 8150 	beq.w	801421e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f000 fd9a 	bl	8014ab8 <tcp_send_empty_ack>
 8013f84:	4603      	mov	r3, r0
 8013f86:	e155      	b.n	8014234 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013f94:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013f96:	6a3b      	ldr	r3, [r7, #32]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f000 811f 	beq.w	80141dc <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8013f9e:	e002      	b.n	8013fa6 <tcp_output+0x156>
 8013fa0:	6a3b      	ldr	r3, [r7, #32]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	623b      	str	r3, [r7, #32]
 8013fa6:	6a3b      	ldr	r3, [r7, #32]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d1f8      	bne.n	8013fa0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013fae:	e115      	b.n	80141dc <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fb2:	691b      	ldr	r3, [r3, #16]
 8013fb4:	899b      	ldrh	r3, [r3, #12]
 8013fb6:	b29b      	uxth	r3, r3
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7f9 fce1 	bl	800d980 <lwip_htons>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	f003 0304 	and.w	r3, r3, #4
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d006      	beq.n	8013fd8 <tcp_output+0x188>
 8013fca:	4b2f      	ldr	r3, [pc, #188]	@ (8014088 <tcp_output+0x238>)
 8013fcc:	f240 5236 	movw	r2, #1334	@ 0x536
 8013fd0:	4932      	ldr	r1, [pc, #200]	@ (801409c <tcp_output+0x24c>)
 8013fd2:	482f      	ldr	r0, [pc, #188]	@ (8014090 <tcp_output+0x240>)
 8013fd4:	f007 f834 	bl	801b040 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d01f      	beq.n	8014020 <tcp_output+0x1d0>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	8b5b      	ldrh	r3, [r3, #26]
 8013fe4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d119      	bne.n	8014020 <tcp_output+0x1d0>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d00b      	beq.n	801400c <tcp_output+0x1bc>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d110      	bne.n	8014020 <tcp_output+0x1d0>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014002:	891a      	ldrh	r2, [r3, #8]
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014008:	429a      	cmp	r2, r3
 801400a:	d209      	bcs.n	8014020 <tcp_output+0x1d0>
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014012:	2b00      	cmp	r3, #0
 8014014:	d004      	beq.n	8014020 <tcp_output+0x1d0>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801401c:	2b0f      	cmp	r3, #15
 801401e:	d901      	bls.n	8014024 <tcp_output+0x1d4>
 8014020:	2301      	movs	r3, #1
 8014022:	e000      	b.n	8014026 <tcp_output+0x1d6>
 8014024:	2300      	movs	r3, #0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d106      	bne.n	8014038 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	8b5b      	ldrh	r3, [r3, #26]
 801402e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014032:	2b00      	cmp	r3, #0
 8014034:	f000 80e7 	beq.w	8014206 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	7d1b      	ldrb	r3, [r3, #20]
 801403c:	2b02      	cmp	r3, #2
 801403e:	d00d      	beq.n	801405c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014042:	691b      	ldr	r3, [r3, #16]
 8014044:	899b      	ldrh	r3, [r3, #12]
 8014046:	b29c      	uxth	r4, r3
 8014048:	2010      	movs	r0, #16
 801404a:	f7f9 fc99 	bl	800d980 <lwip_htons>
 801404e:	4603      	mov	r3, r0
 8014050:	461a      	mov	r2, r3
 8014052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014054:	691b      	ldr	r3, [r3, #16]
 8014056:	4322      	orrs	r2, r4
 8014058:	b292      	uxth	r2, r2
 801405a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801405c:	697a      	ldr	r2, [r7, #20]
 801405e:	6879      	ldr	r1, [r7, #4]
 8014060:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014062:	f000 f90b 	bl	801427c <tcp_output_segment>
 8014066:	4603      	mov	r3, r0
 8014068:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801406a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d016      	beq.n	80140a0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	8b5b      	ldrh	r3, [r3, #26]
 8014076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801407a:	b29a      	uxth	r2, r3
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	835a      	strh	r2, [r3, #26]
      return err;
 8014080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014084:	e0d6      	b.n	8014234 <tcp_output+0x3e4>
 8014086:	bf00      	nop
 8014088:	0801f12c 	.word	0x0801f12c
 801408c:	0801f6cc 	.word	0x0801f6cc
 8014090:	0801f180 	.word	0x0801f180
 8014094:	0801f6e4 	.word	0x0801f6e4
 8014098:	20013dc0 	.word	0x20013dc0
 801409c:	0801f70c 	.word	0x0801f70c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80140a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a2:	2200      	movs	r2, #0
 80140a4:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80140a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140a8:	681a      	ldr	r2, [r3, #0]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	7d1b      	ldrb	r3, [r3, #20]
 80140b2:	2b02      	cmp	r3, #2
 80140b4:	d006      	beq.n	80140c4 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	8b5b      	ldrh	r3, [r3, #26]
 80140ba:	f023 0303 	bic.w	r3, r3, #3
 80140be:	b29a      	uxth	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80140c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c6:	691b      	ldr	r3, [r3, #16]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7f9 fc6d 	bl	800d9aa <lwip_htonl>
 80140d0:	4604      	mov	r4, r0
 80140d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140d4:	891b      	ldrh	r3, [r3, #8]
 80140d6:	461d      	mov	r5, r3
 80140d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140da:	691b      	ldr	r3, [r3, #16]
 80140dc:	899b      	ldrh	r3, [r3, #12]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7f9 fc4d 	bl	800d980 <lwip_htons>
 80140e6:	4603      	mov	r3, r0
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	f003 0303 	and.w	r3, r3, #3
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d001      	beq.n	80140f6 <tcp_output+0x2a6>
 80140f2:	2301      	movs	r3, #1
 80140f4:	e000      	b.n	80140f8 <tcp_output+0x2a8>
 80140f6:	2300      	movs	r3, #0
 80140f8:	442b      	add	r3, r5
 80140fa:	4423      	add	r3, r4
 80140fc:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014102:	68bb      	ldr	r3, [r7, #8]
 8014104:	1ad3      	subs	r3, r2, r3
 8014106:	2b00      	cmp	r3, #0
 8014108:	da02      	bge.n	8014110 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	68ba      	ldr	r2, [r7, #8]
 801410e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014112:	891b      	ldrh	r3, [r3, #8]
 8014114:	461c      	mov	r4, r3
 8014116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014118:	691b      	ldr	r3, [r3, #16]
 801411a:	899b      	ldrh	r3, [r3, #12]
 801411c:	b29b      	uxth	r3, r3
 801411e:	4618      	mov	r0, r3
 8014120:	f7f9 fc2e 	bl	800d980 <lwip_htons>
 8014124:	4603      	mov	r3, r0
 8014126:	b2db      	uxtb	r3, r3
 8014128:	f003 0303 	and.w	r3, r3, #3
 801412c:	2b00      	cmp	r3, #0
 801412e:	d001      	beq.n	8014134 <tcp_output+0x2e4>
 8014130:	2301      	movs	r3, #1
 8014132:	e000      	b.n	8014136 <tcp_output+0x2e6>
 8014134:	2300      	movs	r3, #0
 8014136:	4423      	add	r3, r4
 8014138:	2b00      	cmp	r3, #0
 801413a:	d049      	beq.n	80141d0 <tcp_output+0x380>
      seg->next = NULL;
 801413c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801413e:	2200      	movs	r2, #0
 8014140:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014146:	2b00      	cmp	r3, #0
 8014148:	d105      	bne.n	8014156 <tcp_output+0x306>
        pcb->unacked = seg;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801414e:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014152:	623b      	str	r3, [r7, #32]
 8014154:	e03f      	b.n	80141d6 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	4618      	mov	r0, r3
 801415e:	f7f9 fc24 	bl	800d9aa <lwip_htonl>
 8014162:	4604      	mov	r4, r0
 8014164:	6a3b      	ldr	r3, [r7, #32]
 8014166:	691b      	ldr	r3, [r3, #16]
 8014168:	685b      	ldr	r3, [r3, #4]
 801416a:	4618      	mov	r0, r3
 801416c:	f7f9 fc1d 	bl	800d9aa <lwip_htonl>
 8014170:	4603      	mov	r3, r0
 8014172:	1ae3      	subs	r3, r4, r3
 8014174:	2b00      	cmp	r3, #0
 8014176:	da24      	bge.n	80141c2 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	3370      	adds	r3, #112	@ 0x70
 801417c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801417e:	e002      	b.n	8014186 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d011      	beq.n	80141b2 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	691b      	ldr	r3, [r3, #16]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	4618      	mov	r0, r3
 8014198:	f7f9 fc07 	bl	800d9aa <lwip_htonl>
 801419c:	4604      	mov	r4, r0
 801419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141a0:	691b      	ldr	r3, [r3, #16]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7f9 fc00 	bl	800d9aa <lwip_htonl>
 80141aa:	4603      	mov	r3, r0
 80141ac:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	dbe6      	blt.n	8014180 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80141ba:	69fb      	ldr	r3, [r7, #28]
 80141bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141be:	601a      	str	r2, [r3, #0]
 80141c0:	e009      	b.n	80141d6 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80141c2:	6a3b      	ldr	r3, [r7, #32]
 80141c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141c6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80141c8:	6a3b      	ldr	r3, [r7, #32]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	623b      	str	r3, [r7, #32]
 80141ce:	e002      	b.n	80141d6 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80141d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80141d2:	f7fc fc24 	bl	8010a1e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80141dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d012      	beq.n	8014208 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80141e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e4:	691b      	ldr	r3, [r3, #16]
 80141e6:	685b      	ldr	r3, [r3, #4]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7f9 fbde 	bl	800d9aa <lwip_htonl>
 80141ee:	4602      	mov	r2, r0
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80141f8:	8912      	ldrh	r2, [r2, #8]
 80141fa:	4413      	add	r3, r2
  while (seg != NULL &&
 80141fc:	69ba      	ldr	r2, [r7, #24]
 80141fe:	429a      	cmp	r2, r3
 8014200:	f4bf aed6 	bcs.w	8013fb0 <tcp_output+0x160>
 8014204:	e000      	b.n	8014208 <tcp_output+0x3b8>
      break;
 8014206:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801420c:	2b00      	cmp	r3, #0
 801420e:	d108      	bne.n	8014222 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8014218:	e004      	b.n	8014224 <tcp_output+0x3d4>
    goto output_done;
 801421a:	bf00      	nop
 801421c:	e002      	b.n	8014224 <tcp_output+0x3d4>
    goto output_done;
 801421e:	bf00      	nop
 8014220:	e000      	b.n	8014224 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014222:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	8b5b      	ldrh	r3, [r3, #26]
 8014228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801422c:	b29a      	uxth	r2, r3
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014232:	2300      	movs	r3, #0
}
 8014234:	4618      	mov	r0, r3
 8014236:	3728      	adds	r7, #40	@ 0x28
 8014238:	46bd      	mov	sp, r7
 801423a:	bdb0      	pop	{r4, r5, r7, pc}

0801423c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b082      	sub	sp, #8
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <tcp_output_segment_busy+0x1c>
 801424a:	4b09      	ldr	r3, [pc, #36]	@ (8014270 <tcp_output_segment_busy+0x34>)
 801424c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014250:	4908      	ldr	r1, [pc, #32]	@ (8014274 <tcp_output_segment_busy+0x38>)
 8014252:	4809      	ldr	r0, [pc, #36]	@ (8014278 <tcp_output_segment_busy+0x3c>)
 8014254:	f006 fef4 	bl	801b040 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	7b9b      	ldrb	r3, [r3, #14]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d001      	beq.n	8014266 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014262:	2301      	movs	r3, #1
 8014264:	e000      	b.n	8014268 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014266:	2300      	movs	r3, #0
}
 8014268:	4618      	mov	r0, r3
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}
 8014270:	0801f12c 	.word	0x0801f12c
 8014274:	0801f724 	.word	0x0801f724
 8014278:	0801f180 	.word	0x0801f180

0801427c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801427c:	b5b0      	push	{r4, r5, r7, lr}
 801427e:	b08c      	sub	sp, #48	@ 0x30
 8014280:	af04      	add	r7, sp, #16
 8014282:	60f8      	str	r0, [r7, #12]
 8014284:	60b9      	str	r1, [r7, #8]
 8014286:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d106      	bne.n	801429c <tcp_output_segment+0x20>
 801428e:	4b6d      	ldr	r3, [pc, #436]	@ (8014444 <tcp_output_segment+0x1c8>)
 8014290:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8014294:	496c      	ldr	r1, [pc, #432]	@ (8014448 <tcp_output_segment+0x1cc>)
 8014296:	486d      	ldr	r0, [pc, #436]	@ (801444c <tcp_output_segment+0x1d0>)
 8014298:	f006 fed2 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801429c:	68bb      	ldr	r3, [r7, #8]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <tcp_output_segment+0x34>
 80142a2:	4b68      	ldr	r3, [pc, #416]	@ (8014444 <tcp_output_segment+0x1c8>)
 80142a4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80142a8:	4969      	ldr	r1, [pc, #420]	@ (8014450 <tcp_output_segment+0x1d4>)
 80142aa:	4868      	ldr	r0, [pc, #416]	@ (801444c <tcp_output_segment+0x1d0>)
 80142ac:	f006 fec8 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d106      	bne.n	80142c4 <tcp_output_segment+0x48>
 80142b6:	4b63      	ldr	r3, [pc, #396]	@ (8014444 <tcp_output_segment+0x1c8>)
 80142b8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80142bc:	4965      	ldr	r1, [pc, #404]	@ (8014454 <tcp_output_segment+0x1d8>)
 80142be:	4863      	ldr	r0, [pc, #396]	@ (801444c <tcp_output_segment+0x1d0>)
 80142c0:	f006 febe 	bl	801b040 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80142c4:	68f8      	ldr	r0, [r7, #12]
 80142c6:	f7ff ffb9 	bl	801423c <tcp_output_segment_busy>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80142d0:	2300      	movs	r3, #0
 80142d2:	e0b3      	b.n	801443c <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	691c      	ldr	r4, [r3, #16]
 80142dc:	4610      	mov	r0, r2
 80142de:	f7f9 fb64 	bl	800d9aa <lwip_htonl>
 80142e2:	4603      	mov	r3, r0
 80142e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80142e6:	68bb      	ldr	r3, [r7, #8]
 80142e8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	691c      	ldr	r4, [r3, #16]
 80142ee:	4610      	mov	r0, r2
 80142f0:	f7f9 fb46 	bl	800d980 <lwip_htons>
 80142f4:	4603      	mov	r3, r0
 80142f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142fc:	68ba      	ldr	r2, [r7, #8]
 80142fe:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014300:	441a      	add	r2, r3
 8014302:	68bb      	ldr	r3, [r7, #8]
 8014304:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	691b      	ldr	r3, [r3, #16]
 801430a:	3314      	adds	r3, #20
 801430c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	7b1b      	ldrb	r3, [r3, #12]
 8014312:	f003 0301 	and.w	r3, r3, #1
 8014316:	2b00      	cmp	r3, #0
 8014318:	d015      	beq.n	8014346 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	3304      	adds	r3, #4
 801431e:	461a      	mov	r2, r3
 8014320:	6879      	ldr	r1, [r7, #4]
 8014322:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8014326:	f7fc fe71 	bl	801100c <tcp_eff_send_mss_netif>
 801432a:	4603      	mov	r3, r0
 801432c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801432e:	8b7b      	ldrh	r3, [r7, #26]
 8014330:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8014334:	4618      	mov	r0, r3
 8014336:	f7f9 fb38 	bl	800d9aa <lwip_htonl>
 801433a:	4602      	mov	r2, r0
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	3304      	adds	r3, #4
 8014344:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014346:	68bb      	ldr	r3, [r7, #8]
 8014348:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801434c:	2b00      	cmp	r3, #0
 801434e:	da02      	bge.n	8014356 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	2200      	movs	r2, #0
 8014354:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801435a:	2b00      	cmp	r3, #0
 801435c:	d10c      	bne.n	8014378 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801435e:	4b3e      	ldr	r3, [pc, #248]	@ (8014458 <tcp_output_segment+0x1dc>)
 8014360:	681a      	ldr	r2, [r3, #0]
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	691b      	ldr	r3, [r3, #16]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	4618      	mov	r0, r3
 801436e:	f7f9 fb1c 	bl	800d9aa <lwip_htonl>
 8014372:	4602      	mov	r2, r0
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	691a      	ldr	r2, [r3, #16]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	685b      	ldr	r3, [r3, #4]
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	1ad3      	subs	r3, r2, r3
 8014384:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	8959      	ldrh	r1, [r3, #10]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	8b3a      	ldrh	r2, [r7, #24]
 8014392:	1a8a      	subs	r2, r1, r2
 8014394:	b292      	uxth	r2, r2
 8014396:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	8919      	ldrh	r1, [r3, #8]
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	685b      	ldr	r3, [r3, #4]
 80143a2:	8b3a      	ldrh	r2, [r7, #24]
 80143a4:	1a8a      	subs	r2, r1, r2
 80143a6:	b292      	uxth	r2, r2
 80143a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	68fa      	ldr	r2, [r7, #12]
 80143b0:	6912      	ldr	r2, [r2, #16]
 80143b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	2200      	movs	r2, #0
 80143ba:	741a      	strb	r2, [r3, #16]
 80143bc:	2200      	movs	r2, #0
 80143be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	691a      	ldr	r2, [r3, #16]
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	7b1b      	ldrb	r3, [r3, #12]
 80143c8:	f003 0301 	and.w	r3, r3, #1
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d001      	beq.n	80143d4 <tcp_output_segment+0x158>
 80143d0:	2318      	movs	r3, #24
 80143d2:	e000      	b.n	80143d6 <tcp_output_segment+0x15a>
 80143d4:	2314      	movs	r3, #20
 80143d6:	4413      	add	r3, r2
 80143d8:	69fa      	ldr	r2, [r7, #28]
 80143da:	429a      	cmp	r2, r3
 80143dc:	d006      	beq.n	80143ec <tcp_output_segment+0x170>
 80143de:	4b19      	ldr	r3, [pc, #100]	@ (8014444 <tcp_output_segment+0x1c8>)
 80143e0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80143e4:	491d      	ldr	r1, [pc, #116]	@ (801445c <tcp_output_segment+0x1e0>)
 80143e6:	4819      	ldr	r0, [pc, #100]	@ (801444c <tcp_output_segment+0x1d0>)
 80143e8:	f006 fe2a 	bl	801b040 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80143f4:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 80143f6:	68bd      	ldr	r5, [r7, #8]
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	6914      	ldr	r4, [r2, #16]
 8014400:	9300      	str	r3, [sp, #0]
 8014402:	462b      	mov	r3, r5
 8014404:	460a      	mov	r2, r1
 8014406:	2106      	movs	r1, #6
 8014408:	f7f9 fbec 	bl	800dbe4 <ip_chksum_pseudo>
 801440c:	4603      	mov	r3, r0
 801440e:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6858      	ldr	r0, [r3, #4]
 8014414:	68b9      	ldr	r1, [r7, #8]
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	1d1c      	adds	r4, r3, #4
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	7add      	ldrb	r5, [r3, #11]
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	7a9b      	ldrb	r3, [r3, #10]
 8014422:	687a      	ldr	r2, [r7, #4]
 8014424:	9202      	str	r2, [sp, #8]
 8014426:	2206      	movs	r2, #6
 8014428:	9201      	str	r2, [sp, #4]
 801442a:	9300      	str	r3, [sp, #0]
 801442c:	462b      	mov	r3, r5
 801442e:	4622      	mov	r2, r4
 8014430:	f004 fdaa 	bl	8018f88 <ip4_output_if>
 8014434:	4603      	mov	r3, r0
 8014436:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801443c:	4618      	mov	r0, r3
 801443e:	3720      	adds	r7, #32
 8014440:	46bd      	mov	sp, r7
 8014442:	bdb0      	pop	{r4, r5, r7, pc}
 8014444:	0801f12c 	.word	0x0801f12c
 8014448:	0801f74c 	.word	0x0801f74c
 801444c:	0801f180 	.word	0x0801f180
 8014450:	0801f76c 	.word	0x0801f76c
 8014454:	0801f78c 	.word	0x0801f78c
 8014458:	20013d70 	.word	0x20013d70
 801445c:	0801f7b0 	.word	0x0801f7b0

08014460 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014460:	b5b0      	push	{r4, r5, r7, lr}
 8014462:	b084      	sub	sp, #16
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d106      	bne.n	801447c <tcp_rexmit_rto_prepare+0x1c>
 801446e:	4b36      	ldr	r3, [pc, #216]	@ (8014548 <tcp_rexmit_rto_prepare+0xe8>)
 8014470:	f240 6263 	movw	r2, #1635	@ 0x663
 8014474:	4935      	ldr	r1, [pc, #212]	@ (801454c <tcp_rexmit_rto_prepare+0xec>)
 8014476:	4836      	ldr	r0, [pc, #216]	@ (8014550 <tcp_rexmit_rto_prepare+0xf0>)
 8014478:	f006 fde2 	bl	801b040 <iprintf>

  if (pcb->unacked == NULL) {
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014480:	2b00      	cmp	r3, #0
 8014482:	d102      	bne.n	801448a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014484:	f06f 0305 	mvn.w	r3, #5
 8014488:	e059      	b.n	801453e <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801448e:	60fb      	str	r3, [r7, #12]
 8014490:	e00b      	b.n	80144aa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014492:	68f8      	ldr	r0, [r7, #12]
 8014494:	f7ff fed2 	bl	801423c <tcp_output_segment_busy>
 8014498:	4603      	mov	r3, r0
 801449a:	2b00      	cmp	r3, #0
 801449c:	d002      	beq.n	80144a4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801449e:	f06f 0305 	mvn.w	r3, #5
 80144a2:	e04c      	b.n	801453e <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	60fb      	str	r3, [r7, #12]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d1ef      	bne.n	8014492 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80144b2:	68f8      	ldr	r0, [r7, #12]
 80144b4:	f7ff fec2 	bl	801423c <tcp_output_segment_busy>
 80144b8:	4603      	mov	r3, r0
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d002      	beq.n	80144c4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80144be:	f06f 0305 	mvn.w	r3, #5
 80144c2:	e03c      	b.n	801453e <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d104      	bne.n	80144de <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	895a      	ldrh	r2, [r3, #10]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	8b5b      	ldrh	r3, [r3, #26]
 80144f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80144f4:	b29a      	uxth	r2, r3
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	691b      	ldr	r3, [r3, #16]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	4618      	mov	r0, r3
 8014502:	f7f9 fa52 	bl	800d9aa <lwip_htonl>
 8014506:	4604      	mov	r4, r0
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	891b      	ldrh	r3, [r3, #8]
 801450c:	461d      	mov	r5, r3
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	691b      	ldr	r3, [r3, #16]
 8014512:	899b      	ldrh	r3, [r3, #12]
 8014514:	b29b      	uxth	r3, r3
 8014516:	4618      	mov	r0, r3
 8014518:	f7f9 fa32 	bl	800d980 <lwip_htons>
 801451c:	4603      	mov	r3, r0
 801451e:	b2db      	uxtb	r3, r3
 8014520:	f003 0303 	and.w	r3, r3, #3
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <tcp_rexmit_rto_prepare+0xcc>
 8014528:	2301      	movs	r3, #1
 801452a:	e000      	b.n	801452e <tcp_rexmit_rto_prepare+0xce>
 801452c:	2300      	movs	r3, #0
 801452e:	442b      	add	r3, r5
 8014530:	18e2      	adds	r2, r4, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2200      	movs	r2, #0
 801453a:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801453c:	2300      	movs	r3, #0
}
 801453e:	4618      	mov	r0, r3
 8014540:	3710      	adds	r7, #16
 8014542:	46bd      	mov	sp, r7
 8014544:	bdb0      	pop	{r4, r5, r7, pc}
 8014546:	bf00      	nop
 8014548:	0801f12c 	.word	0x0801f12c
 801454c:	0801f7c4 	.word	0x0801f7c4
 8014550:	0801f180 	.word	0x0801f180

08014554 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d106      	bne.n	8014570 <tcp_rexmit_rto_commit+0x1c>
 8014562:	4b0d      	ldr	r3, [pc, #52]	@ (8014598 <tcp_rexmit_rto_commit+0x44>)
 8014564:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014568:	490c      	ldr	r1, [pc, #48]	@ (801459c <tcp_rexmit_rto_commit+0x48>)
 801456a:	480d      	ldr	r0, [pc, #52]	@ (80145a0 <tcp_rexmit_rto_commit+0x4c>)
 801456c:	f006 fd68 	bl	801b040 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014576:	2bff      	cmp	r3, #255	@ 0xff
 8014578:	d007      	beq.n	801458a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014580:	3301      	adds	r3, #1
 8014582:	b2da      	uxtb	r2, r3
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	f7ff fc60 	bl	8013e50 <tcp_output>
}
 8014590:	bf00      	nop
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	0801f12c 	.word	0x0801f12c
 801459c:	0801f7e8 	.word	0x0801f7e8
 80145a0:	0801f180 	.word	0x0801f180

080145a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d106      	bne.n	80145c0 <tcp_rexmit_rto+0x1c>
 80145b2:	4b0a      	ldr	r3, [pc, #40]	@ (80145dc <tcp_rexmit_rto+0x38>)
 80145b4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80145b8:	4909      	ldr	r1, [pc, #36]	@ (80145e0 <tcp_rexmit_rto+0x3c>)
 80145ba:	480a      	ldr	r0, [pc, #40]	@ (80145e4 <tcp_rexmit_rto+0x40>)
 80145bc:	f006 fd40 	bl	801b040 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f7ff ff4d 	bl	8014460 <tcp_rexmit_rto_prepare>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d102      	bne.n	80145d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f7ff ffc1 	bl	8014554 <tcp_rexmit_rto_commit>
  }
}
 80145d2:	bf00      	nop
 80145d4:	3708      	adds	r7, #8
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	0801f12c 	.word	0x0801f12c
 80145e0:	0801f80c 	.word	0x0801f80c
 80145e4:	0801f180 	.word	0x0801f180

080145e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80145e8:	b590      	push	{r4, r7, lr}
 80145ea:	b085      	sub	sp, #20
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d106      	bne.n	8014604 <tcp_rexmit+0x1c>
 80145f6:	4b2f      	ldr	r3, [pc, #188]	@ (80146b4 <tcp_rexmit+0xcc>)
 80145f8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80145fc:	492e      	ldr	r1, [pc, #184]	@ (80146b8 <tcp_rexmit+0xd0>)
 80145fe:	482f      	ldr	r0, [pc, #188]	@ (80146bc <tcp_rexmit+0xd4>)
 8014600:	f006 fd1e 	bl	801b040 <iprintf>

  if (pcb->unacked == NULL) {
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014608:	2b00      	cmp	r3, #0
 801460a:	d102      	bne.n	8014612 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801460c:	f06f 0305 	mvn.w	r3, #5
 8014610:	e04c      	b.n	80146ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014616:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014618:	68b8      	ldr	r0, [r7, #8]
 801461a:	f7ff fe0f 	bl	801423c <tcp_output_segment_busy>
 801461e:	4603      	mov	r3, r0
 8014620:	2b00      	cmp	r3, #0
 8014622:	d002      	beq.n	801462a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014624:	f06f 0305 	mvn.w	r3, #5
 8014628:	e040      	b.n	80146ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	336c      	adds	r3, #108	@ 0x6c
 8014636:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014638:	e002      	b.n	8014640 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d011      	beq.n	801466c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	691b      	ldr	r3, [r3, #16]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	4618      	mov	r0, r3
 8014652:	f7f9 f9aa 	bl	800d9aa <lwip_htonl>
 8014656:	4604      	mov	r4, r0
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	691b      	ldr	r3, [r3, #16]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	4618      	mov	r0, r3
 8014660:	f7f9 f9a3 	bl	800d9aa <lwip_htonl>
 8014664:	4603      	mov	r3, r0
 8014666:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014668:	2b00      	cmp	r3, #0
 801466a:	dbe6      	blt.n	801463a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	68ba      	ldr	r2, [r7, #8]
 8014678:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d103      	bne.n	801468a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014690:	2bff      	cmp	r3, #255	@ 0xff
 8014692:	d007      	beq.n	80146a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801469a:	3301      	adds	r3, #1
 801469c:	b2da      	uxtb	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80146aa:	2300      	movs	r3, #0
}
 80146ac:	4618      	mov	r0, r3
 80146ae:	3714      	adds	r7, #20
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bd90      	pop	{r4, r7, pc}
 80146b4:	0801f12c 	.word	0x0801f12c
 80146b8:	0801f828 	.word	0x0801f828
 80146bc:	0801f180 	.word	0x0801f180

080146c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b082      	sub	sp, #8
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d106      	bne.n	80146dc <tcp_rexmit_fast+0x1c>
 80146ce:	4b2a      	ldr	r3, [pc, #168]	@ (8014778 <tcp_rexmit_fast+0xb8>)
 80146d0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80146d4:	4929      	ldr	r1, [pc, #164]	@ (801477c <tcp_rexmit_fast+0xbc>)
 80146d6:	482a      	ldr	r0, [pc, #168]	@ (8014780 <tcp_rexmit_fast+0xc0>)
 80146d8:	f006 fcb2 	bl	801b040 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d044      	beq.n	801476e <tcp_rexmit_fast+0xae>
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	8b5b      	ldrh	r3, [r3, #26]
 80146e8:	f003 0304 	and.w	r3, r3, #4
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d13e      	bne.n	801476e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80146f0:	6878      	ldr	r0, [r7, #4]
 80146f2:	f7ff ff79 	bl	80145e8 <tcp_rexmit>
 80146f6:	4603      	mov	r3, r0
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d138      	bne.n	801476e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014708:	4293      	cmp	r3, r2
 801470a:	bf28      	it	cs
 801470c:	4613      	movcs	r3, r2
 801470e:	b29b      	uxth	r3, r3
 8014710:	0fda      	lsrs	r2, r3, #31
 8014712:	4413      	add	r3, r2
 8014714:	105b      	asrs	r3, r3, #1
 8014716:	b29a      	uxth	r2, r3
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014724:	461a      	mov	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801472a:	005b      	lsls	r3, r3, #1
 801472c:	429a      	cmp	r2, r3
 801472e:	d206      	bcs.n	801473e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014734:	005b      	lsls	r3, r3, #1
 8014736:	b29a      	uxth	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014748:	4619      	mov	r1, r3
 801474a:	0049      	lsls	r1, r1, #1
 801474c:	440b      	add	r3, r1
 801474e:	b29b      	uxth	r3, r3
 8014750:	4413      	add	r3, r2
 8014752:	b29a      	uxth	r2, r3
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	8b5b      	ldrh	r3, [r3, #26]
 801475e:	f043 0304 	orr.w	r3, r3, #4
 8014762:	b29a      	uxth	r2, r3
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2200      	movs	r2, #0
 801476c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801476e:	bf00      	nop
 8014770:	3708      	adds	r7, #8
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop
 8014778:	0801f12c 	.word	0x0801f12c
 801477c:	0801f840 	.word	0x0801f840
 8014780:	0801f180 	.word	0x0801f180

08014784 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b086      	sub	sp, #24
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	607b      	str	r3, [r7, #4]
 801478e:	460b      	mov	r3, r1
 8014790:	817b      	strh	r3, [r7, #10]
 8014792:	4613      	mov	r3, r2
 8014794:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014796:	897a      	ldrh	r2, [r7, #10]
 8014798:	893b      	ldrh	r3, [r7, #8]
 801479a:	4413      	add	r3, r2
 801479c:	b29b      	uxth	r3, r3
 801479e:	3314      	adds	r3, #20
 80147a0:	b29b      	uxth	r3, r3
 80147a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80147a6:	4619      	mov	r1, r3
 80147a8:	2022      	movs	r0, #34	@ 0x22
 80147aa:	f7fa fb23 	bl	800edf4 <pbuf_alloc>
 80147ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d04d      	beq.n	8014852 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80147b6:	897b      	ldrh	r3, [r7, #10]
 80147b8:	3313      	adds	r3, #19
 80147ba:	697a      	ldr	r2, [r7, #20]
 80147bc:	8952      	ldrh	r2, [r2, #10]
 80147be:	4293      	cmp	r3, r2
 80147c0:	db06      	blt.n	80147d0 <tcp_output_alloc_header_common+0x4c>
 80147c2:	4b26      	ldr	r3, [pc, #152]	@ (801485c <tcp_output_alloc_header_common+0xd8>)
 80147c4:	f240 7223 	movw	r2, #1827	@ 0x723
 80147c8:	4925      	ldr	r1, [pc, #148]	@ (8014860 <tcp_output_alloc_header_common+0xdc>)
 80147ca:	4826      	ldr	r0, [pc, #152]	@ (8014864 <tcp_output_alloc_header_common+0xe0>)
 80147cc:	f006 fc38 	bl	801b040 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	685b      	ldr	r3, [r3, #4]
 80147d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80147d6:	8c3b      	ldrh	r3, [r7, #32]
 80147d8:	4618      	mov	r0, r3
 80147da:	f7f9 f8d1 	bl	800d980 <lwip_htons>
 80147de:	4603      	mov	r3, r0
 80147e0:	461a      	mov	r2, r3
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80147e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7f9 f8c9 	bl	800d980 <lwip_htons>
 80147ee:	4603      	mov	r3, r0
 80147f0:	461a      	mov	r2, r3
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f7f9 f8d4 	bl	800d9aa <lwip_htonl>
 8014802:	4602      	mov	r2, r0
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014808:	897b      	ldrh	r3, [r7, #10]
 801480a:	089b      	lsrs	r3, r3, #2
 801480c:	b29b      	uxth	r3, r3
 801480e:	3305      	adds	r3, #5
 8014810:	b29b      	uxth	r3, r3
 8014812:	031b      	lsls	r3, r3, #12
 8014814:	b29a      	uxth	r2, r3
 8014816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801481a:	b29b      	uxth	r3, r3
 801481c:	4313      	orrs	r3, r2
 801481e:	b29b      	uxth	r3, r3
 8014820:	4618      	mov	r0, r3
 8014822:	f7f9 f8ad 	bl	800d980 <lwip_htons>
 8014826:	4603      	mov	r3, r0
 8014828:	461a      	mov	r2, r3
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801482e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014830:	4618      	mov	r0, r3
 8014832:	f7f9 f8a5 	bl	800d980 <lwip_htons>
 8014836:	4603      	mov	r3, r0
 8014838:	461a      	mov	r2, r3
 801483a:	693b      	ldr	r3, [r7, #16]
 801483c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	2200      	movs	r2, #0
 8014842:	741a      	strb	r2, [r3, #16]
 8014844:	2200      	movs	r2, #0
 8014846:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	2200      	movs	r2, #0
 801484c:	749a      	strb	r2, [r3, #18]
 801484e:	2200      	movs	r2, #0
 8014850:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014852:	697b      	ldr	r3, [r7, #20]
}
 8014854:	4618      	mov	r0, r3
 8014856:	3718      	adds	r7, #24
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	0801f12c 	.word	0x0801f12c
 8014860:	0801f860 	.word	0x0801f860
 8014864:	0801f180 	.word	0x0801f180

08014868 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014868:	b5b0      	push	{r4, r5, r7, lr}
 801486a:	b08a      	sub	sp, #40	@ 0x28
 801486c:	af04      	add	r7, sp, #16
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	607b      	str	r3, [r7, #4]
 8014872:	460b      	mov	r3, r1
 8014874:	817b      	strh	r3, [r7, #10]
 8014876:	4613      	mov	r3, r2
 8014878:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	2b00      	cmp	r3, #0
 801487e:	d106      	bne.n	801488e <tcp_output_alloc_header+0x26>
 8014880:	4b15      	ldr	r3, [pc, #84]	@ (80148d8 <tcp_output_alloc_header+0x70>)
 8014882:	f240 7242 	movw	r2, #1858	@ 0x742
 8014886:	4915      	ldr	r1, [pc, #84]	@ (80148dc <tcp_output_alloc_header+0x74>)
 8014888:	4815      	ldr	r0, [pc, #84]	@ (80148e0 <tcp_output_alloc_header+0x78>)
 801488a:	f006 fbd9 	bl	801b040 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	8adb      	ldrh	r3, [r3, #22]
 8014896:	68fa      	ldr	r2, [r7, #12]
 8014898:	8b12      	ldrh	r2, [r2, #24]
 801489a:	68f9      	ldr	r1, [r7, #12]
 801489c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801489e:	893d      	ldrh	r5, [r7, #8]
 80148a0:	897c      	ldrh	r4, [r7, #10]
 80148a2:	9103      	str	r1, [sp, #12]
 80148a4:	2110      	movs	r1, #16
 80148a6:	9102      	str	r1, [sp, #8]
 80148a8:	9201      	str	r2, [sp, #4]
 80148aa:	9300      	str	r3, [sp, #0]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	462a      	mov	r2, r5
 80148b0:	4621      	mov	r1, r4
 80148b2:	f7ff ff67 	bl	8014784 <tcp_output_alloc_header_common>
 80148b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d006      	beq.n	80148cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148c2:	68fa      	ldr	r2, [r7, #12]
 80148c4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80148c6:	441a      	add	r2, r3
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80148cc:	697b      	ldr	r3, [r7, #20]
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	3718      	adds	r7, #24
 80148d2:	46bd      	mov	sp, r7
 80148d4:	bdb0      	pop	{r4, r5, r7, pc}
 80148d6:	bf00      	nop
 80148d8:	0801f12c 	.word	0x0801f12c
 80148dc:	0801f890 	.word	0x0801f890
 80148e0:	0801f180 	.word	0x0801f180

080148e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80148e4:	b580      	push	{r7, lr}
 80148e6:	b088      	sub	sp, #32
 80148e8:	af00      	add	r7, sp, #0
 80148ea:	60f8      	str	r0, [r7, #12]
 80148ec:	60b9      	str	r1, [r7, #8]
 80148ee:	4611      	mov	r1, r2
 80148f0:	461a      	mov	r2, r3
 80148f2:	460b      	mov	r3, r1
 80148f4:	71fb      	strb	r3, [r7, #7]
 80148f6:	4613      	mov	r3, r2
 80148f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80148fa:	2300      	movs	r3, #0
 80148fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d106      	bne.n	8014912 <tcp_output_fill_options+0x2e>
 8014904:	4b12      	ldr	r3, [pc, #72]	@ (8014950 <tcp_output_fill_options+0x6c>)
 8014906:	f240 7256 	movw	r2, #1878	@ 0x756
 801490a:	4912      	ldr	r1, [pc, #72]	@ (8014954 <tcp_output_fill_options+0x70>)
 801490c:	4812      	ldr	r0, [pc, #72]	@ (8014958 <tcp_output_fill_options+0x74>)
 801490e:	f006 fb97 	bl	801b040 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014912:	68bb      	ldr	r3, [r7, #8]
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	3314      	adds	r3, #20
 801491c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801491e:	8bfb      	ldrh	r3, [r7, #30]
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	461a      	mov	r2, r3
 8014924:	79fb      	ldrb	r3, [r7, #7]
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	f003 0304 	and.w	r3, r3, #4
 801492c:	4413      	add	r3, r2
 801492e:	3314      	adds	r3, #20
 8014930:	69ba      	ldr	r2, [r7, #24]
 8014932:	4413      	add	r3, r2
 8014934:	697a      	ldr	r2, [r7, #20]
 8014936:	429a      	cmp	r2, r3
 8014938:	d006      	beq.n	8014948 <tcp_output_fill_options+0x64>
 801493a:	4b05      	ldr	r3, [pc, #20]	@ (8014950 <tcp_output_fill_options+0x6c>)
 801493c:	f240 7275 	movw	r2, #1909	@ 0x775
 8014940:	4906      	ldr	r1, [pc, #24]	@ (801495c <tcp_output_fill_options+0x78>)
 8014942:	4805      	ldr	r0, [pc, #20]	@ (8014958 <tcp_output_fill_options+0x74>)
 8014944:	f006 fb7c 	bl	801b040 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014948:	bf00      	nop
 801494a:	3720      	adds	r7, #32
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	0801f12c 	.word	0x0801f12c
 8014954:	0801f8b8 	.word	0x0801f8b8
 8014958:	0801f180 	.word	0x0801f180
 801495c:	0801f7b0 	.word	0x0801f7b0

08014960 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b08c      	sub	sp, #48	@ 0x30
 8014964:	af04      	add	r7, sp, #16
 8014966:	60f8      	str	r0, [r7, #12]
 8014968:	60b9      	str	r1, [r7, #8]
 801496a:	607a      	str	r2, [r7, #4]
 801496c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d106      	bne.n	8014982 <tcp_output_control_segment+0x22>
 8014974:	4b24      	ldr	r3, [pc, #144]	@ (8014a08 <tcp_output_control_segment+0xa8>)
 8014976:	f240 7287 	movw	r2, #1927	@ 0x787
 801497a:	4924      	ldr	r1, [pc, #144]	@ (8014a0c <tcp_output_control_segment+0xac>)
 801497c:	4824      	ldr	r0, [pc, #144]	@ (8014a10 <tcp_output_control_segment+0xb0>)
 801497e:	f006 fb5f 	bl	801b040 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014982:	683a      	ldr	r2, [r7, #0]
 8014984:	6879      	ldr	r1, [r7, #4]
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7fe ff1c 	bl	80137c4 <tcp_route>
 801498c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d102      	bne.n	801499a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014994:	23fc      	movs	r3, #252	@ 0xfc
 8014996:	77fb      	strb	r3, [r7, #31]
 8014998:	e02c      	b.n	80149f4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801499a:	68bb      	ldr	r3, [r7, #8]
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	891a      	ldrh	r2, [r3, #8]
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	9300      	str	r3, [sp, #0]
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2106      	movs	r1, #6
 80149ac:	68b8      	ldr	r0, [r7, #8]
 80149ae:	f7f9 f919 	bl	800dbe4 <ip_chksum_pseudo>
 80149b2:	4603      	mov	r3, r0
 80149b4:	461a      	mov	r2, r3
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d006      	beq.n	80149ce <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	7adb      	ldrb	r3, [r3, #11]
 80149c4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	7a9b      	ldrb	r3, [r3, #10]
 80149ca:	777b      	strb	r3, [r7, #29]
 80149cc:	e003      	b.n	80149d6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80149ce:	23ff      	movs	r3, #255	@ 0xff
 80149d0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80149d2:	2300      	movs	r3, #0
 80149d4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80149d6:	7fba      	ldrb	r2, [r7, #30]
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	9302      	str	r3, [sp, #8]
 80149dc:	2306      	movs	r3, #6
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	7f7b      	ldrb	r3, [r7, #29]
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	4613      	mov	r3, r2
 80149e6:	683a      	ldr	r2, [r7, #0]
 80149e8:	6879      	ldr	r1, [r7, #4]
 80149ea:	68b8      	ldr	r0, [r7, #8]
 80149ec:	f004 facc 	bl	8018f88 <ip4_output_if>
 80149f0:	4603      	mov	r3, r0
 80149f2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80149f4:	68b8      	ldr	r0, [r7, #8]
 80149f6:	f7fa fce5 	bl	800f3c4 <pbuf_free>
  return err;
 80149fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3720      	adds	r7, #32
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	0801f12c 	.word	0x0801f12c
 8014a0c:	0801f8e0 	.word	0x0801f8e0
 8014a10:	0801f180 	.word	0x0801f180

08014a14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b08b      	sub	sp, #44	@ 0x2c
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
 8014a20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d106      	bne.n	8014a36 <tcp_rst+0x22>
 8014a28:	4b1f      	ldr	r3, [pc, #124]	@ (8014aa8 <tcp_rst+0x94>)
 8014a2a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014a2e:	491f      	ldr	r1, [pc, #124]	@ (8014aac <tcp_rst+0x98>)
 8014a30:	481f      	ldr	r0, [pc, #124]	@ (8014ab0 <tcp_rst+0x9c>)
 8014a32:	f006 fb05 	bl	801b040 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d106      	bne.n	8014a4a <tcp_rst+0x36>
 8014a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8014aa8 <tcp_rst+0x94>)
 8014a3e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014a42:	491c      	ldr	r1, [pc, #112]	@ (8014ab4 <tcp_rst+0xa0>)
 8014a44:	481a      	ldr	r0, [pc, #104]	@ (8014ab0 <tcp_rst+0x9c>)
 8014a46:	f006 fafb 	bl	801b040 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014a4e:	f24a 032d 	movw	r3, #41005	@ 0xa02d
 8014a52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	b29c      	uxth	r4, r3
 8014a58:	68b8      	ldr	r0, [r7, #8]
 8014a5a:	f7f8 ffa6 	bl	800d9aa <lwip_htonl>
 8014a5e:	4602      	mov	r2, r0
 8014a60:	8abb      	ldrh	r3, [r7, #20]
 8014a62:	9303      	str	r3, [sp, #12]
 8014a64:	2314      	movs	r3, #20
 8014a66:	9302      	str	r3, [sp, #8]
 8014a68:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014a6a:	9301      	str	r3, [sp, #4]
 8014a6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014a6e:	9300      	str	r3, [sp, #0]
 8014a70:	4613      	mov	r3, r2
 8014a72:	2200      	movs	r2, #0
 8014a74:	4621      	mov	r1, r4
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7ff fe84 	bl	8014784 <tcp_output_alloc_header_common>
 8014a7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00c      	beq.n	8014a9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
 8014a86:	2200      	movs	r2, #0
 8014a88:	6939      	ldr	r1, [r7, #16]
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f7ff ff2a 	bl	80148e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014a92:	683a      	ldr	r2, [r7, #0]
 8014a94:	6939      	ldr	r1, [r7, #16]
 8014a96:	68f8      	ldr	r0, [r7, #12]
 8014a98:	f7ff ff62 	bl	8014960 <tcp_output_control_segment>
 8014a9c:	e000      	b.n	8014aa0 <tcp_rst+0x8c>
    return;
 8014a9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014aa0:	371c      	adds	r7, #28
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd90      	pop	{r4, r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	0801f12c 	.word	0x0801f12c
 8014aac:	0801f90c 	.word	0x0801f90c
 8014ab0:	0801f180 	.word	0x0801f180
 8014ab4:	0801f928 	.word	0x0801f928

08014ab8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014ab8:	b590      	push	{r4, r7, lr}
 8014aba:	b087      	sub	sp, #28
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d106      	bne.n	8014adc <tcp_send_empty_ack+0x24>
 8014ace:	4b28      	ldr	r3, [pc, #160]	@ (8014b70 <tcp_send_empty_ack+0xb8>)
 8014ad0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8014ad4:	4927      	ldr	r1, [pc, #156]	@ (8014b74 <tcp_send_empty_ack+0xbc>)
 8014ad6:	4828      	ldr	r0, [pc, #160]	@ (8014b78 <tcp_send_empty_ack+0xc0>)
 8014ad8:	f006 fab2 	bl	801b040 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014adc:	7dfb      	ldrb	r3, [r7, #23]
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	f003 0304 	and.w	r3, r3, #4
 8014ae6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014ae8:	7d7b      	ldrb	r3, [r7, #21]
 8014aea:	b29c      	uxth	r4, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f8 ff5a 	bl	800d9aa <lwip_htonl>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2200      	movs	r2, #0
 8014afa:	4621      	mov	r1, r4
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff feb3 	bl	8014868 <tcp_output_alloc_header>
 8014b02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d109      	bne.n	8014b1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	8b5b      	ldrh	r3, [r3, #26]
 8014b0e:	f043 0303 	orr.w	r3, r3, #3
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014b18:	f06f 0301 	mvn.w	r3, #1
 8014b1c:	e023      	b.n	8014b66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014b1e:	7dbb      	ldrb	r3, [r7, #22]
 8014b20:	7dfa      	ldrb	r2, [r7, #23]
 8014b22:	6939      	ldr	r1, [r7, #16]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7ff fedd 	bl	80148e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3304      	adds	r3, #4
 8014b30:	6939      	ldr	r1, [r7, #16]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f7ff ff14 	bl	8014960 <tcp_output_control_segment>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d007      	beq.n	8014b54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	f043 0303 	orr.w	r3, r3, #3
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	835a      	strh	r2, [r3, #26]
 8014b52:	e006      	b.n	8014b62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	8b5b      	ldrh	r3, [r3, #26]
 8014b58:	f023 0303 	bic.w	r3, r3, #3
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	371c      	adds	r7, #28
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd90      	pop	{r4, r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	0801f12c 	.word	0x0801f12c
 8014b74:	0801f944 	.word	0x0801f944
 8014b78:	0801f180 	.word	0x0801f180

08014b7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014b7c:	b590      	push	{r4, r7, lr}
 8014b7e:	b085      	sub	sp, #20
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b84:	2300      	movs	r3, #0
 8014b86:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <tcp_keepalive+0x20>
 8014b8e:	4b18      	ldr	r3, [pc, #96]	@ (8014bf0 <tcp_keepalive+0x74>)
 8014b90:	f640 0224 	movw	r2, #2084	@ 0x824
 8014b94:	4917      	ldr	r1, [pc, #92]	@ (8014bf4 <tcp_keepalive+0x78>)
 8014b96:	4818      	ldr	r0, [pc, #96]	@ (8014bf8 <tcp_keepalive+0x7c>)
 8014b98:	f006 fa52 	bl	801b040 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014b9c:	7abb      	ldrb	r3, [r7, #10]
 8014b9e:	b29c      	uxth	r4, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f8 feff 	bl	800d9aa <lwip_htonl>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2200      	movs	r2, #0
 8014bb0:	4621      	mov	r1, r4
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7ff fe58 	bl	8014868 <tcp_output_alloc_header>
 8014bb8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d102      	bne.n	8014bc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bc4:	e010      	b.n	8014be8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bc6:	7abb      	ldrb	r3, [r7, #10]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	68f9      	ldr	r1, [r7, #12]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7ff fe89 	bl	80148e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	68f9      	ldr	r1, [r7, #12]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f7ff fec0 	bl	8014960 <tcp_output_control_segment>
 8014be0:	4603      	mov	r3, r0
 8014be2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014be4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	3714      	adds	r7, #20
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd90      	pop	{r4, r7, pc}
 8014bf0:	0801f12c 	.word	0x0801f12c
 8014bf4:	0801f964 	.word	0x0801f964
 8014bf8:	0801f180 	.word	0x0801f180

08014bfc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014bfc:	b590      	push	{r4, r7, lr}
 8014bfe:	b08b      	sub	sp, #44	@ 0x2c
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c04:	2300      	movs	r3, #0
 8014c06:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d106      	bne.n	8014c1c <tcp_zero_window_probe+0x20>
 8014c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8014d44 <tcp_zero_window_probe+0x148>)
 8014c10:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014c14:	494c      	ldr	r1, [pc, #304]	@ (8014d48 <tcp_zero_window_probe+0x14c>)
 8014c16:	484d      	ldr	r0, [pc, #308]	@ (8014d4c <tcp_zero_window_probe+0x150>)
 8014c18:	f006 fa12 	bl	801b040 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014c20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 8014c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d101      	bne.n	8014c2c <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	e087      	b.n	8014d3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014c32:	2bff      	cmp	r3, #255	@ 0xff
 8014c34:	d007      	beq.n	8014c46 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	b2da      	uxtb	r2, r3
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c48:	691b      	ldr	r3, [r3, #16]
 8014c4a:	899b      	ldrh	r3, [r3, #12]
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7f8 fe96 	bl	800d980 <lwip_htons>
 8014c54:	4603      	mov	r3, r0
 8014c56:	b2db      	uxtb	r3, r3
 8014c58:	f003 0301 	and.w	r3, r3, #1
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d005      	beq.n	8014c6c <tcp_zero_window_probe+0x70>
 8014c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c62:	891b      	ldrh	r3, [r3, #8]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d101      	bne.n	8014c6c <tcp_zero_window_probe+0x70>
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e000      	b.n	8014c6e <tcp_zero_window_probe+0x72>
 8014c6c:	2300      	movs	r3, #0
 8014c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014c72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	bf0c      	ite	eq
 8014c7a:	2301      	moveq	r3, #1
 8014c7c:	2300      	movne	r3, #0
 8014c7e:	b2db      	uxtb	r3, r3
 8014c80:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014c82:	7cfb      	ldrb	r3, [r7, #19]
 8014c84:	b299      	uxth	r1, r3
 8014c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c88:	691b      	ldr	r3, [r3, #16]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	8c3a      	ldrh	r2, [r7, #32]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7ff fdea 	bl	8014868 <tcp_output_alloc_header>
 8014c94:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014c96:	69fb      	ldr	r3, [r7, #28]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d102      	bne.n	8014ca2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014ca0:	e04c      	b.n	8014d3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014ca2:	69fb      	ldr	r3, [r7, #28]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d011      	beq.n	8014cd4 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	899b      	ldrh	r3, [r3, #12]
 8014cb4:	b29b      	uxth	r3, r3
 8014cb6:	b21b      	sxth	r3, r3
 8014cb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014cbc:	b21c      	sxth	r4, r3
 8014cbe:	2011      	movs	r0, #17
 8014cc0:	f7f8 fe5e 	bl	800d980 <lwip_htons>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	b21b      	sxth	r3, r3
 8014cc8:	4323      	orrs	r3, r4
 8014cca:	b21b      	sxth	r3, r3
 8014ccc:	b29a      	uxth	r2, r3
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	819a      	strh	r2, [r3, #12]
 8014cd2:	e010      	b.n	8014cf6 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	3314      	adds	r3, #20
 8014cda:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cde:	6858      	ldr	r0, [r3, #4]
 8014ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	891a      	ldrh	r2, [r3, #8]
 8014ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce8:	891b      	ldrh	r3, [r3, #8]
 8014cea:	1ad3      	subs	r3, r2, r3
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	2201      	movs	r2, #1
 8014cf0:	6979      	ldr	r1, [r7, #20]
 8014cf2:	f7fa fd6d 	bl	800f7d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cf8:	691b      	ldr	r3, [r3, #16]
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7f8 fe54 	bl	800d9aa <lwip_htonl>
 8014d02:	4603      	mov	r3, r0
 8014d04:	3301      	adds	r3, #1
 8014d06:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	da02      	bge.n	8014d1a <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d1a:	7cfb      	ldrb	r3, [r7, #19]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	69f9      	ldr	r1, [r7, #28]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7ff fddf 	bl	80148e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	69f9      	ldr	r1, [r7, #28]
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f7ff fe16 	bl	8014960 <tcp_output_control_segment>
 8014d34:	4603      	mov	r3, r0
 8014d36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	372c      	adds	r7, #44	@ 0x2c
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd90      	pop	{r4, r7, pc}
 8014d44:	0801f12c 	.word	0x0801f12c
 8014d48:	0801f980 	.word	0x0801f980
 8014d4c:	0801f180 	.word	0x0801f180

08014d50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014d58:	f7fa fec0 	bl	800fadc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8014d88 <tcpip_tcp_timer+0x38>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d103      	bne.n	8014d6c <tcpip_tcp_timer+0x1c>
 8014d64:	4b09      	ldr	r3, [pc, #36]	@ (8014d8c <tcpip_tcp_timer+0x3c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d005      	beq.n	8014d78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	4908      	ldr	r1, [pc, #32]	@ (8014d90 <tcpip_tcp_timer+0x40>)
 8014d70:	20fa      	movs	r0, #250	@ 0xfa
 8014d72:	f000 f8f3 	bl	8014f5c <sys_timeout>
 8014d76:	e003      	b.n	8014d80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014d78:	4b06      	ldr	r3, [pc, #24]	@ (8014d94 <tcpip_tcp_timer+0x44>)
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	601a      	str	r2, [r3, #0]
  }
}
 8014d7e:	bf00      	nop
 8014d80:	bf00      	nop
 8014d82:	3708      	adds	r7, #8
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	20013d7c 	.word	0x20013d7c
 8014d8c:	20013d80 	.word	0x20013d80
 8014d90:	08014d51 	.word	0x08014d51
 8014d94:	20013dcc 	.word	0x20013dcc

08014d98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8014dc8 <tcp_timer_needed+0x30>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d10f      	bne.n	8014dc4 <tcp_timer_needed+0x2c>
 8014da4:	4b09      	ldr	r3, [pc, #36]	@ (8014dcc <tcp_timer_needed+0x34>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d103      	bne.n	8014db4 <tcp_timer_needed+0x1c>
 8014dac:	4b08      	ldr	r3, [pc, #32]	@ (8014dd0 <tcp_timer_needed+0x38>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d007      	beq.n	8014dc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014db4:	4b04      	ldr	r3, [pc, #16]	@ (8014dc8 <tcp_timer_needed+0x30>)
 8014db6:	2201      	movs	r2, #1
 8014db8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4905      	ldr	r1, [pc, #20]	@ (8014dd4 <tcp_timer_needed+0x3c>)
 8014dbe:	20fa      	movs	r0, #250	@ 0xfa
 8014dc0:	f000 f8cc 	bl	8014f5c <sys_timeout>
  }
}
 8014dc4:	bf00      	nop
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	20013dcc 	.word	0x20013dcc
 8014dcc:	20013d7c 	.word	0x20013d7c
 8014dd0:	20013d80 	.word	0x20013d80
 8014dd4:	08014d51 	.word	0x08014d51

08014dd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014de4:	200a      	movs	r0, #10
 8014de6:	f7f9 fbf9 	bl	800e5dc <memp_malloc>
 8014dea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d109      	bne.n	8014e06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d151      	bne.n	8014e9c <sys_timeout_abs+0xc4>
 8014df8:	4b2a      	ldr	r3, [pc, #168]	@ (8014ea4 <sys_timeout_abs+0xcc>)
 8014dfa:	22be      	movs	r2, #190	@ 0xbe
 8014dfc:	492a      	ldr	r1, [pc, #168]	@ (8014ea8 <sys_timeout_abs+0xd0>)
 8014dfe:	482b      	ldr	r0, [pc, #172]	@ (8014eac <sys_timeout_abs+0xd4>)
 8014e00:	f006 f91e 	bl	801b040 <iprintf>
    return;
 8014e04:	e04a      	b.n	8014e9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	68fa      	ldr	r2, [r7, #12]
 8014e1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014e1e:	4b24      	ldr	r3, [pc, #144]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d103      	bne.n	8014e2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014e26:	4a22      	ldr	r2, [pc, #136]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	6013      	str	r3, [r2, #0]
    return;
 8014e2c:	e037      	b.n	8014e9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	685a      	ldr	r2, [r3, #4]
 8014e32:	4b1f      	ldr	r3, [pc, #124]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	0fdb      	lsrs	r3, r3, #31
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d007      	beq.n	8014e56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014e46:	4b1a      	ldr	r3, [pc, #104]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014e4e:	4a18      	ldr	r2, [pc, #96]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	6013      	str	r3, [r2, #0]
 8014e54:	e023      	b.n	8014e9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e56:	4b16      	ldr	r3, [pc, #88]	@ (8014eb0 <sys_timeout_abs+0xd8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	617b      	str	r3, [r7, #20]
 8014e5c:	e01a      	b.n	8014e94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00b      	beq.n	8014e7e <sys_timeout_abs+0xa6>
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	685a      	ldr	r2, [r3, #4]
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	0fdb      	lsrs	r3, r3, #31
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d007      	beq.n	8014e8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	601a      	str	r2, [r3, #0]
        break;
 8014e8c:	e007      	b.n	8014e9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	617b      	str	r3, [r7, #20]
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d1e1      	bne.n	8014e5e <sys_timeout_abs+0x86>
 8014e9a:	e000      	b.n	8014e9e <sys_timeout_abs+0xc6>
    return;
 8014e9c:	bf00      	nop
      }
    }
  }
}
 8014e9e:	3718      	adds	r7, #24
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	0801f9a4 	.word	0x0801f9a4
 8014ea8:	0801f9d8 	.word	0x0801f9d8
 8014eac:	0801fa18 	.word	0x0801fa18
 8014eb0:	20013dc4 	.word	0x20013dc4

08014eb4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	4798      	blx	r3

  now = sys_now();
 8014ec6:	f7ee f957 	bl	8003178 <sys_now>
 8014eca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8014f10 <lwip_cyclic_timer+0x5c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4413      	add	r3, r2
 8014ed6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	1ad3      	subs	r3, r2, r3
 8014ede:	0fdb      	lsrs	r3, r3, #31
 8014ee0:	f003 0301 	and.w	r3, r3, #1
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d009      	beq.n	8014efe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	4907      	ldr	r1, [pc, #28]	@ (8014f14 <lwip_cyclic_timer+0x60>)
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7ff ff6e 	bl	8014dd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014efc:	e004      	b.n	8014f08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	4904      	ldr	r1, [pc, #16]	@ (8014f14 <lwip_cyclic_timer+0x60>)
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f7ff ff68 	bl	8014dd8 <sys_timeout_abs>
}
 8014f08:	bf00      	nop
 8014f0a:	3718      	adds	r7, #24
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	20013dc8 	.word	0x20013dc8
 8014f14:	08014eb5 	.word	0x08014eb5

08014f18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f1e:	2301      	movs	r3, #1
 8014f20:	607b      	str	r3, [r7, #4]
 8014f22:	e00e      	b.n	8014f42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014f24:	4a0b      	ldr	r2, [pc, #44]	@ (8014f54 <sys_timeouts_init+0x3c>)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	4a08      	ldr	r2, [pc, #32]	@ (8014f54 <sys_timeouts_init+0x3c>)
 8014f32:	4413      	add	r3, r2
 8014f34:	461a      	mov	r2, r3
 8014f36:	4908      	ldr	r1, [pc, #32]	@ (8014f58 <sys_timeouts_init+0x40>)
 8014f38:	f000 f810 	bl	8014f5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	607b      	str	r3, [r7, #4]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b04      	cmp	r3, #4
 8014f46:	d9ed      	bls.n	8014f24 <sys_timeouts_init+0xc>
  }
}
 8014f48:	bf00      	nop
 8014f4a:	bf00      	nop
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	0806c620 	.word	0x0806c620
 8014f58:	08014eb5 	.word	0x08014eb5

08014f5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014f6e:	d306      	bcc.n	8014f7e <sys_timeout+0x22>
 8014f70:	4b0a      	ldr	r3, [pc, #40]	@ (8014f9c <sys_timeout+0x40>)
 8014f72:	f240 1229 	movw	r2, #297	@ 0x129
 8014f76:	490a      	ldr	r1, [pc, #40]	@ (8014fa0 <sys_timeout+0x44>)
 8014f78:	480a      	ldr	r0, [pc, #40]	@ (8014fa4 <sys_timeout+0x48>)
 8014f7a:	f006 f861 	bl	801b040 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014f7e:	f7ee f8fb 	bl	8003178 <sys_now>
 8014f82:	4602      	mov	r2, r0
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	4413      	add	r3, r2
 8014f88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	68b9      	ldr	r1, [r7, #8]
 8014f8e:	6978      	ldr	r0, [r7, #20]
 8014f90:	f7ff ff22 	bl	8014dd8 <sys_timeout_abs>
#endif
}
 8014f94:	bf00      	nop
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	0801f9a4 	.word	0x0801f9a4
 8014fa0:	0801fa40 	.word	0x0801fa40
 8014fa4:	0801fa18 	.word	0x0801fa18

08014fa8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014fae:	f7ee f8e3 	bl	8003178 <sys_now>
 8014fb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014fb4:	4b17      	ldr	r3, [pc, #92]	@ (8015014 <sys_check_timeouts+0x6c>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d022      	beq.n	8015006 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	0fdb      	lsrs	r3, r3, #31
 8014fca:	f003 0301 	and.w	r3, r3, #1
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d11a      	bne.n	801500a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4a0e      	ldr	r2, [pc, #56]	@ (8015014 <sys_check_timeouts+0x6c>)
 8014fda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	689b      	ldr	r3, [r3, #8]
 8014fe0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	68db      	ldr	r3, [r3, #12]
 8014fe6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	4a0a      	ldr	r2, [pc, #40]	@ (8015018 <sys_check_timeouts+0x70>)
 8014fee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ff0:	68b9      	ldr	r1, [r7, #8]
 8014ff2:	200a      	movs	r0, #10
 8014ff4:	f7f9 fb44 	bl	800e680 <memp_free>
    if (handler != NULL) {
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d0da      	beq.n	8014fb4 <sys_check_timeouts+0xc>
      handler(arg);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6838      	ldr	r0, [r7, #0]
 8015002:	4798      	blx	r3
  do {
 8015004:	e7d6      	b.n	8014fb4 <sys_check_timeouts+0xc>
      return;
 8015006:	bf00      	nop
 8015008:	e000      	b.n	801500c <sys_check_timeouts+0x64>
      return;
 801500a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	20013dc4 	.word	0x20013dc4
 8015018:	20013dc8 	.word	0x20013dc8

0801501c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015022:	4b16      	ldr	r3, [pc, #88]	@ (801507c <sys_timeouts_sleeptime+0x60>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d102      	bne.n	8015030 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801502a:	f04f 33ff 	mov.w	r3, #4294967295
 801502e:	e020      	b.n	8015072 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015030:	f7ee f8a2 	bl	8003178 <sys_now>
 8015034:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015036:	4b11      	ldr	r3, [pc, #68]	@ (801507c <sys_timeouts_sleeptime+0x60>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	685a      	ldr	r2, [r3, #4]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	0fdb      	lsrs	r3, r3, #31
 8015042:	f003 0301 	and.w	r3, r3, #1
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <sys_timeouts_sleeptime+0x34>
    return 0;
 801504c:	2300      	movs	r3, #0
 801504e:	e010      	b.n	8015072 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015050:	4b0a      	ldr	r3, [pc, #40]	@ (801507c <sys_timeouts_sleeptime+0x60>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	685a      	ldr	r2, [r3, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	da06      	bge.n	8015070 <sys_timeouts_sleeptime+0x54>
 8015062:	4b07      	ldr	r3, [pc, #28]	@ (8015080 <sys_timeouts_sleeptime+0x64>)
 8015064:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8015068:	4906      	ldr	r1, [pc, #24]	@ (8015084 <sys_timeouts_sleeptime+0x68>)
 801506a:	4807      	ldr	r0, [pc, #28]	@ (8015088 <sys_timeouts_sleeptime+0x6c>)
 801506c:	f005 ffe8 	bl	801b040 <iprintf>
    return ret;
 8015070:	683b      	ldr	r3, [r7, #0]
  }
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	20013dc4 	.word	0x20013dc4
 8015080:	0801f9a4 	.word	0x0801f9a4
 8015084:	0801fa78 	.word	0x0801fa78
 8015088:	0801fa18 	.word	0x0801fa18

0801508c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015090:	f005 fa06 	bl	801a4a0 <rand>
 8015094:	4603      	mov	r3, r0
 8015096:	b29b      	uxth	r3, r3
 8015098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801509c:	b29b      	uxth	r3, r3
 801509e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80150a2:	b29a      	uxth	r2, r3
 80150a4:	4b01      	ldr	r3, [pc, #4]	@ (80150ac <udp_init+0x20>)
 80150a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80150a8:	bf00      	nop
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	200000b8 	.word	0x200000b8

080150b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80150ba:	4b17      	ldr	r3, [pc, #92]	@ (8015118 <udp_new_port+0x68>)
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	1c5a      	adds	r2, r3, #1
 80150c0:	b291      	uxth	r1, r2
 80150c2:	4a15      	ldr	r2, [pc, #84]	@ (8015118 <udp_new_port+0x68>)
 80150c4:	8011      	strh	r1, [r2, #0]
 80150c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d103      	bne.n	80150d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80150ce:	4b12      	ldr	r3, [pc, #72]	@ (8015118 <udp_new_port+0x68>)
 80150d0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80150d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150d6:	4b11      	ldr	r3, [pc, #68]	@ (801511c <udp_new_port+0x6c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	603b      	str	r3, [r7, #0]
 80150dc:	e011      	b.n	8015102 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	8a5a      	ldrh	r2, [r3, #18]
 80150e2:	4b0d      	ldr	r3, [pc, #52]	@ (8015118 <udp_new_port+0x68>)
 80150e4:	881b      	ldrh	r3, [r3, #0]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d108      	bne.n	80150fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80150ea:	88fb      	ldrh	r3, [r7, #6]
 80150ec:	3301      	adds	r3, #1
 80150ee:	80fb      	strh	r3, [r7, #6]
 80150f0:	88fb      	ldrh	r3, [r7, #6]
 80150f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80150f6:	d3e0      	bcc.n	80150ba <udp_new_port+0xa>
        return 0;
 80150f8:	2300      	movs	r3, #0
 80150fa:	e007      	b.n	801510c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	603b      	str	r3, [r7, #0]
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1ea      	bne.n	80150de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015108:	4b03      	ldr	r3, [pc, #12]	@ (8015118 <udp_new_port+0x68>)
 801510a:	881b      	ldrh	r3, [r3, #0]
}
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr
 8015118:	200000b8 	.word	0x200000b8
 801511c:	20013dd0 	.word	0x20013dd0

08015120 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	4613      	mov	r3, r2
 801512c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d105      	bne.n	8015140 <udp_input_local_match+0x20>
 8015134:	4b27      	ldr	r3, [pc, #156]	@ (80151d4 <udp_input_local_match+0xb4>)
 8015136:	2287      	movs	r2, #135	@ 0x87
 8015138:	4927      	ldr	r1, [pc, #156]	@ (80151d8 <udp_input_local_match+0xb8>)
 801513a:	4828      	ldr	r0, [pc, #160]	@ (80151dc <udp_input_local_match+0xbc>)
 801513c:	f005 ff80 	bl	801b040 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d105      	bne.n	8015152 <udp_input_local_match+0x32>
 8015146:	4b23      	ldr	r3, [pc, #140]	@ (80151d4 <udp_input_local_match+0xb4>)
 8015148:	2288      	movs	r2, #136	@ 0x88
 801514a:	4925      	ldr	r1, [pc, #148]	@ (80151e0 <udp_input_local_match+0xc0>)
 801514c:	4823      	ldr	r0, [pc, #140]	@ (80151dc <udp_input_local_match+0xbc>)
 801514e:	f005 ff77 	bl	801b040 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	7a1b      	ldrb	r3, [r3, #8]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00b      	beq.n	8015172 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	7a1a      	ldrb	r2, [r3, #8]
 801515e:	4b21      	ldr	r3, [pc, #132]	@ (80151e4 <udp_input_local_match+0xc4>)
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015166:	3301      	adds	r3, #1
 8015168:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801516a:	429a      	cmp	r2, r3
 801516c:	d001      	beq.n	8015172 <udp_input_local_match+0x52>
    return 0;
 801516e:	2300      	movs	r3, #0
 8015170:	e02b      	b.n	80151ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015172:	79fb      	ldrb	r3, [r7, #7]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d018      	beq.n	80151aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d013      	beq.n	80151a6 <udp_input_local_match+0x86>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00f      	beq.n	80151a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015186:	4b17      	ldr	r3, [pc, #92]	@ (80151e4 <udp_input_local_match+0xc4>)
 8015188:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801518e:	d00a      	beq.n	80151a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	4b13      	ldr	r3, [pc, #76]	@ (80151e4 <udp_input_local_match+0xc4>)
 8015196:	695b      	ldr	r3, [r3, #20]
 8015198:	405a      	eors	r2, r3
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	3308      	adds	r3, #8
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d110      	bne.n	80151c8 <udp_input_local_match+0xa8>
          return 1;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e00f      	b.n	80151ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d009      	beq.n	80151c4 <udp_input_local_match+0xa4>
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d005      	beq.n	80151c4 <udp_input_local_match+0xa4>
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	4b09      	ldr	r3, [pc, #36]	@ (80151e4 <udp_input_local_match+0xc4>)
 80151be:	695b      	ldr	r3, [r3, #20]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d101      	bne.n	80151c8 <udp_input_local_match+0xa8>
        return 1;
 80151c4:	2301      	movs	r3, #1
 80151c6:	e000      	b.n	80151ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80151c8:	2300      	movs	r3, #0
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3710      	adds	r7, #16
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	0801fa8c 	.word	0x0801fa8c
 80151d8:	0801fabc 	.word	0x0801fabc
 80151dc:	0801fae0 	.word	0x0801fae0
 80151e0:	0801fb08 	.word	0x0801fb08
 80151e4:	2000a2fc 	.word	0x2000a2fc

080151e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80151e8:	b590      	push	{r4, r7, lr}
 80151ea:	b08d      	sub	sp, #52	@ 0x34
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80151f2:	2300      	movs	r3, #0
 80151f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d105      	bne.n	8015208 <udp_input+0x20>
 80151fc:	4b87      	ldr	r3, [pc, #540]	@ (801541c <udp_input+0x234>)
 80151fe:	22cf      	movs	r2, #207	@ 0xcf
 8015200:	4987      	ldr	r1, [pc, #540]	@ (8015420 <udp_input+0x238>)
 8015202:	4888      	ldr	r0, [pc, #544]	@ (8015424 <udp_input+0x23c>)
 8015204:	f005 ff1c 	bl	801b040 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d105      	bne.n	801521a <udp_input+0x32>
 801520e:	4b83      	ldr	r3, [pc, #524]	@ (801541c <udp_input+0x234>)
 8015210:	22d0      	movs	r2, #208	@ 0xd0
 8015212:	4985      	ldr	r1, [pc, #532]	@ (8015428 <udp_input+0x240>)
 8015214:	4883      	ldr	r0, [pc, #524]	@ (8015424 <udp_input+0x23c>)
 8015216:	f005 ff13 	bl	801b040 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	895b      	ldrh	r3, [r3, #10]
 801521e:	2b07      	cmp	r3, #7
 8015220:	d803      	bhi.n	801522a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7fa f8ce 	bl	800f3c4 <pbuf_free>
    goto end;
 8015228:	e0f0      	b.n	801540c <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015230:	4b7e      	ldr	r3, [pc, #504]	@ (801542c <udp_input+0x244>)
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	4a7d      	ldr	r2, [pc, #500]	@ (801542c <udp_input+0x244>)
 8015236:	6812      	ldr	r2, [r2, #0]
 8015238:	4611      	mov	r1, r2
 801523a:	4618      	mov	r0, r3
 801523c:	f003 ffe2 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8015240:	4603      	mov	r3, r0
 8015242:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	881b      	ldrh	r3, [r3, #0]
 8015248:	b29b      	uxth	r3, r3
 801524a:	4618      	mov	r0, r3
 801524c:	f7f8 fb98 	bl	800d980 <lwip_htons>
 8015250:	4603      	mov	r3, r0
 8015252:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	885b      	ldrh	r3, [r3, #2]
 8015258:	b29b      	uxth	r3, r3
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 fb90 	bl	800d980 <lwip_htons>
 8015260:	4603      	mov	r3, r0
 8015262:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015264:	2300      	movs	r3, #0
 8015266:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8015268:	2300      	movs	r3, #0
 801526a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801526c:	2300      	movs	r3, #0
 801526e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015270:	4b6f      	ldr	r3, [pc, #444]	@ (8015430 <udp_input+0x248>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	61fb      	str	r3, [r7, #28]
 8015276:	e054      	b.n	8015322 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015278:	69fb      	ldr	r3, [r7, #28]
 801527a:	8a5b      	ldrh	r3, [r3, #18]
 801527c:	89fa      	ldrh	r2, [r7, #14]
 801527e:	429a      	cmp	r2, r3
 8015280:	d14a      	bne.n	8015318 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015282:	7cfb      	ldrb	r3, [r7, #19]
 8015284:	461a      	mov	r2, r3
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	69f8      	ldr	r0, [r7, #28]
 801528a:	f7ff ff49 	bl	8015120 <udp_input_local_match>
 801528e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015290:	2b00      	cmp	r3, #0
 8015292:	d041      	beq.n	8015318 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	7c1b      	ldrb	r3, [r3, #16]
 8015298:	f003 0304 	and.w	r3, r3, #4
 801529c:	2b00      	cmp	r3, #0
 801529e:	d11d      	bne.n	80152dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80152a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d102      	bne.n	80152ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80152aa:	e017      	b.n	80152dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80152ac:	7cfb      	ldrb	r3, [r7, #19]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d014      	beq.n	80152dc <udp_input+0xf4>
 80152b2:	4b5e      	ldr	r3, [pc, #376]	@ (801542c <udp_input+0x244>)
 80152b4:	695b      	ldr	r3, [r3, #20]
 80152b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ba:	d10f      	bne.n	80152dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80152bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d008      	beq.n	80152dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	3304      	adds	r3, #4
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d101      	bne.n	80152dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	8a9b      	ldrh	r3, [r3, #20]
 80152e0:	8a3a      	ldrh	r2, [r7, #16]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d118      	bne.n	8015318 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d005      	beq.n	80152fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	685a      	ldr	r2, [r3, #4]
 80152f2:	4b4e      	ldr	r3, [pc, #312]	@ (801542c <udp_input+0x244>)
 80152f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d10e      	bne.n	8015318 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80152fa:	6a3b      	ldr	r3, [r7, #32]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d014      	beq.n	801532a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	68da      	ldr	r2, [r3, #12]
 8015304:	6a3b      	ldr	r3, [r7, #32]
 8015306:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015308:	4b49      	ldr	r3, [pc, #292]	@ (8015430 <udp_input+0x248>)
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015310:	4a47      	ldr	r2, [pc, #284]	@ (8015430 <udp_input+0x248>)
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015316:	e008      	b.n	801532a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015318:	69fb      	ldr	r3, [r7, #28]
 801531a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	61fb      	str	r3, [r7, #28]
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1a7      	bne.n	8015278 <udp_input+0x90>
 8015328:	e000      	b.n	801532c <udp_input+0x144>
        break;
 801532a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015334:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015336:	69fb      	ldr	r3, [r7, #28]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d002      	beq.n	8015342 <udp_input+0x15a>
    for_us = 1;
 801533c:	2301      	movs	r3, #1
 801533e:	76fb      	strb	r3, [r7, #27]
 8015340:	e00a      	b.n	8015358 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	3304      	adds	r3, #4
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	4b38      	ldr	r3, [pc, #224]	@ (801542c <udp_input+0x244>)
 801534a:	695b      	ldr	r3, [r3, #20]
 801534c:	429a      	cmp	r2, r3
 801534e:	bf0c      	ite	eq
 8015350:	2301      	moveq	r3, #1
 8015352:	2300      	movne	r3, #0
 8015354:	b2db      	uxtb	r3, r3
 8015356:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015358:	7efb      	ldrb	r3, [r7, #27]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d052      	beq.n	8015404 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 801535e:	697b      	ldr	r3, [r7, #20]
 8015360:	88db      	ldrh	r3, [r3, #6]
 8015362:	b29b      	uxth	r3, r3
 8015364:	2b00      	cmp	r3, #0
 8015366:	d00b      	beq.n	8015380 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	891a      	ldrh	r2, [r3, #8]
 801536c:	4b31      	ldr	r3, [pc, #196]	@ (8015434 <udp_input+0x24c>)
 801536e:	9300      	str	r3, [sp, #0]
 8015370:	4b31      	ldr	r3, [pc, #196]	@ (8015438 <udp_input+0x250>)
 8015372:	2111      	movs	r1, #17
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f7f8 fc35 	bl	800dbe4 <ip_chksum_pseudo>
 801537a:	4603      	mov	r3, r0
 801537c:	2b00      	cmp	r3, #0
 801537e:	d146      	bne.n	801540e <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015380:	2108      	movs	r1, #8
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f7f9 ff98 	bl	800f2b8 <pbuf_remove_header>
 8015388:	4603      	mov	r3, r0
 801538a:	2b00      	cmp	r3, #0
 801538c:	d00a      	beq.n	80153a4 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801538e:	4b23      	ldr	r3, [pc, #140]	@ (801541c <udp_input+0x234>)
 8015390:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8015394:	4929      	ldr	r1, [pc, #164]	@ (801543c <udp_input+0x254>)
 8015396:	4823      	ldr	r0, [pc, #140]	@ (8015424 <udp_input+0x23c>)
 8015398:	f005 fe52 	bl	801b040 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7fa f811 	bl	800f3c4 <pbuf_free>
      goto end;
 80153a2:	e033      	b.n	801540c <udp_input+0x224>
    }

    if (pcb != NULL) {
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d012      	beq.n	80153d0 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80153aa:	69fb      	ldr	r3, [r7, #28]
 80153ac:	699b      	ldr	r3, [r3, #24]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d00a      	beq.n	80153c8 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80153b2:	69fb      	ldr	r3, [r7, #28]
 80153b4:	699c      	ldr	r4, [r3, #24]
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	69d8      	ldr	r0, [r3, #28]
 80153ba:	8a3b      	ldrh	r3, [r7, #16]
 80153bc:	9300      	str	r3, [sp, #0]
 80153be:	4b1e      	ldr	r3, [pc, #120]	@ (8015438 <udp_input+0x250>)
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	69f9      	ldr	r1, [r7, #28]
 80153c4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80153c6:	e026      	b.n	8015416 <udp_input+0x22e>
        pbuf_free(p);
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7f9 fffb 	bl	800f3c4 <pbuf_free>
        goto end;
 80153ce:	e01d      	b.n	801540c <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80153d0:	7cfb      	ldrb	r3, [r7, #19]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d112      	bne.n	80153fc <udp_input+0x214>
 80153d6:	4b15      	ldr	r3, [pc, #84]	@ (801542c <udp_input+0x244>)
 80153d8:	695b      	ldr	r3, [r3, #20]
 80153da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80153de:	2be0      	cmp	r3, #224	@ 0xe0
 80153e0:	d00c      	beq.n	80153fc <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80153e2:	4b12      	ldr	r3, [pc, #72]	@ (801542c <udp_input+0x244>)
 80153e4:	899b      	ldrh	r3, [r3, #12]
 80153e6:	3308      	adds	r3, #8
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	b21b      	sxth	r3, r3
 80153ec:	4619      	mov	r1, r3
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f7f9 ffd5 	bl	800f39e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80153f4:	2103      	movs	r1, #3
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f003 fb4a 	bl	8018a90 <icmp_dest_unreach>
      pbuf_free(p);
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7f9 ffe1 	bl	800f3c4 <pbuf_free>
  return;
 8015402:	e008      	b.n	8015416 <udp_input+0x22e>
    pbuf_free(p);
 8015404:	6878      	ldr	r0, [r7, #4]
 8015406:	f7f9 ffdd 	bl	800f3c4 <pbuf_free>
  return;
 801540a:	e004      	b.n	8015416 <udp_input+0x22e>
 801540c:	e003      	b.n	8015416 <udp_input+0x22e>
            goto chkerr;
 801540e:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8015410:	6878      	ldr	r0, [r7, #4]
 8015412:	f7f9 ffd7 	bl	800f3c4 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015416:	372c      	adds	r7, #44	@ 0x2c
 8015418:	46bd      	mov	sp, r7
 801541a:	bd90      	pop	{r4, r7, pc}
 801541c:	0801fa8c 	.word	0x0801fa8c
 8015420:	0801fb30 	.word	0x0801fb30
 8015424:	0801fae0 	.word	0x0801fae0
 8015428:	0801fb48 	.word	0x0801fb48
 801542c:	2000a2fc 	.word	0x2000a2fc
 8015430:	20013dd0 	.word	0x20013dd0
 8015434:	2000a310 	.word	0x2000a310
 8015438:	2000a30c 	.word	0x2000a30c
 801543c:	0801fb64 	.word	0x0801fb64

08015440 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b088      	sub	sp, #32
 8015444:	af02      	add	r7, sp, #8
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
 801544c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d109      	bne.n	8015468 <udp_sendto+0x28>
 8015454:	4b23      	ldr	r3, [pc, #140]	@ (80154e4 <udp_sendto+0xa4>)
 8015456:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801545a:	4923      	ldr	r1, [pc, #140]	@ (80154e8 <udp_sendto+0xa8>)
 801545c:	4823      	ldr	r0, [pc, #140]	@ (80154ec <udp_sendto+0xac>)
 801545e:	f005 fdef 	bl	801b040 <iprintf>
 8015462:	f06f 030f 	mvn.w	r3, #15
 8015466:	e038      	b.n	80154da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d109      	bne.n	8015482 <udp_sendto+0x42>
 801546e:	4b1d      	ldr	r3, [pc, #116]	@ (80154e4 <udp_sendto+0xa4>)
 8015470:	f240 2219 	movw	r2, #537	@ 0x219
 8015474:	491e      	ldr	r1, [pc, #120]	@ (80154f0 <udp_sendto+0xb0>)
 8015476:	481d      	ldr	r0, [pc, #116]	@ (80154ec <udp_sendto+0xac>)
 8015478:	f005 fde2 	bl	801b040 <iprintf>
 801547c:	f06f 030f 	mvn.w	r3, #15
 8015480:	e02b      	b.n	80154da <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d109      	bne.n	801549c <udp_sendto+0x5c>
 8015488:	4b16      	ldr	r3, [pc, #88]	@ (80154e4 <udp_sendto+0xa4>)
 801548a:	f240 221a 	movw	r2, #538	@ 0x21a
 801548e:	4919      	ldr	r1, [pc, #100]	@ (80154f4 <udp_sendto+0xb4>)
 8015490:	4816      	ldr	r0, [pc, #88]	@ (80154ec <udp_sendto+0xac>)
 8015492:	f005 fdd5 	bl	801b040 <iprintf>
 8015496:	f06f 030f 	mvn.w	r3, #15
 801549a:	e01e      	b.n	80154da <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	7a1b      	ldrb	r3, [r3, #8]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d006      	beq.n	80154b2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	7a1b      	ldrb	r3, [r3, #8]
 80154a8:	4618      	mov	r0, r3
 80154aa:	f7f9 fbf9 	bl	800eca0 <netif_get_by_index>
 80154ae:	6178      	str	r0, [r7, #20]
 80154b0:	e003      	b.n	80154ba <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80154b2:	6878      	ldr	r0, [r7, #4]
 80154b4:	f003 fb80 	bl	8018bb8 <ip4_route>
 80154b8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d102      	bne.n	80154c6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80154c0:	f06f 0303 	mvn.w	r3, #3
 80154c4:	e009      	b.n	80154da <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80154c6:	887a      	ldrh	r2, [r7, #2]
 80154c8:	697b      	ldr	r3, [r7, #20]
 80154ca:	9300      	str	r3, [sp, #0]
 80154cc:	4613      	mov	r3, r2
 80154ce:	687a      	ldr	r2, [r7, #4]
 80154d0:	68b9      	ldr	r1, [r7, #8]
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	f000 f810 	bl	80154f8 <udp_sendto_if>
 80154d8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3718      	adds	r7, #24
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
 80154e2:	bf00      	nop
 80154e4:	0801fa8c 	.word	0x0801fa8c
 80154e8:	0801fbb0 	.word	0x0801fbb0
 80154ec:	0801fae0 	.word	0x0801fae0
 80154f0:	0801fbc8 	.word	0x0801fbc8
 80154f4:	0801fbe4 	.word	0x0801fbe4

080154f8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b088      	sub	sp, #32
 80154fc:	af02      	add	r7, sp, #8
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d109      	bne.n	8015520 <udp_sendto_if+0x28>
 801550c:	4b2e      	ldr	r3, [pc, #184]	@ (80155c8 <udp_sendto_if+0xd0>)
 801550e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015512:	492e      	ldr	r1, [pc, #184]	@ (80155cc <udp_sendto_if+0xd4>)
 8015514:	482e      	ldr	r0, [pc, #184]	@ (80155d0 <udp_sendto_if+0xd8>)
 8015516:	f005 fd93 	bl	801b040 <iprintf>
 801551a:	f06f 030f 	mvn.w	r3, #15
 801551e:	e04f      	b.n	80155c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d109      	bne.n	801553a <udp_sendto_if+0x42>
 8015526:	4b28      	ldr	r3, [pc, #160]	@ (80155c8 <udp_sendto_if+0xd0>)
 8015528:	f240 2281 	movw	r2, #641	@ 0x281
 801552c:	4929      	ldr	r1, [pc, #164]	@ (80155d4 <udp_sendto_if+0xdc>)
 801552e:	4828      	ldr	r0, [pc, #160]	@ (80155d0 <udp_sendto_if+0xd8>)
 8015530:	f005 fd86 	bl	801b040 <iprintf>
 8015534:	f06f 030f 	mvn.w	r3, #15
 8015538:	e042      	b.n	80155c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d109      	bne.n	8015554 <udp_sendto_if+0x5c>
 8015540:	4b21      	ldr	r3, [pc, #132]	@ (80155c8 <udp_sendto_if+0xd0>)
 8015542:	f240 2282 	movw	r2, #642	@ 0x282
 8015546:	4924      	ldr	r1, [pc, #144]	@ (80155d8 <udp_sendto_if+0xe0>)
 8015548:	4821      	ldr	r0, [pc, #132]	@ (80155d0 <udp_sendto_if+0xd8>)
 801554a:	f005 fd79 	bl	801b040 <iprintf>
 801554e:	f06f 030f 	mvn.w	r3, #15
 8015552:	e035      	b.n	80155c0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015554:	6a3b      	ldr	r3, [r7, #32]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d109      	bne.n	801556e <udp_sendto_if+0x76>
 801555a:	4b1b      	ldr	r3, [pc, #108]	@ (80155c8 <udp_sendto_if+0xd0>)
 801555c:	f240 2283 	movw	r2, #643	@ 0x283
 8015560:	491e      	ldr	r1, [pc, #120]	@ (80155dc <udp_sendto_if+0xe4>)
 8015562:	481b      	ldr	r0, [pc, #108]	@ (80155d0 <udp_sendto_if+0xd8>)
 8015564:	f005 fd6c 	bl	801b040 <iprintf>
 8015568:	f06f 030f 	mvn.w	r3, #15
 801556c:	e028      	b.n	80155c0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d009      	beq.n	8015588 <udp_sendto_if+0x90>
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d005      	beq.n	8015588 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015584:	2be0      	cmp	r3, #224	@ 0xe0
 8015586:	d103      	bne.n	8015590 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015588:	6a3b      	ldr	r3, [r7, #32]
 801558a:	3304      	adds	r3, #4
 801558c:	617b      	str	r3, [r7, #20]
 801558e:	e00b      	b.n	80155a8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	681a      	ldr	r2, [r3, #0]
 8015594:	6a3b      	ldr	r3, [r7, #32]
 8015596:	3304      	adds	r3, #4
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	429a      	cmp	r2, r3
 801559c:	d002      	beq.n	80155a4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801559e:	f06f 0303 	mvn.w	r3, #3
 80155a2:	e00d      	b.n	80155c0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80155a8:	887a      	ldrh	r2, [r7, #2]
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	9301      	str	r3, [sp, #4]
 80155ae:	6a3b      	ldr	r3, [r7, #32]
 80155b0:	9300      	str	r3, [sp, #0]
 80155b2:	4613      	mov	r3, r2
 80155b4:	687a      	ldr	r2, [r7, #4]
 80155b6:	68b9      	ldr	r1, [r7, #8]
 80155b8:	68f8      	ldr	r0, [r7, #12]
 80155ba:	f000 f811 	bl	80155e0 <udp_sendto_if_src>
 80155be:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3718      	adds	r7, #24
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}
 80155c8:	0801fa8c 	.word	0x0801fa8c
 80155cc:	0801fc00 	.word	0x0801fc00
 80155d0:	0801fae0 	.word	0x0801fae0
 80155d4:	0801fc1c 	.word	0x0801fc1c
 80155d8:	0801fc38 	.word	0x0801fc38
 80155dc:	0801fc58 	.word	0x0801fc58

080155e0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b08c      	sub	sp, #48	@ 0x30
 80155e4:	af04      	add	r7, sp, #16
 80155e6:	60f8      	str	r0, [r7, #12]
 80155e8:	60b9      	str	r1, [r7, #8]
 80155ea:	607a      	str	r2, [r7, #4]
 80155ec:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d109      	bne.n	8015608 <udp_sendto_if_src+0x28>
 80155f4:	4b65      	ldr	r3, [pc, #404]	@ (801578c <udp_sendto_if_src+0x1ac>)
 80155f6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80155fa:	4965      	ldr	r1, [pc, #404]	@ (8015790 <udp_sendto_if_src+0x1b0>)
 80155fc:	4865      	ldr	r0, [pc, #404]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 80155fe:	f005 fd1f 	bl	801b040 <iprintf>
 8015602:	f06f 030f 	mvn.w	r3, #15
 8015606:	e0bc      	b.n	8015782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d109      	bne.n	8015622 <udp_sendto_if_src+0x42>
 801560e:	4b5f      	ldr	r3, [pc, #380]	@ (801578c <udp_sendto_if_src+0x1ac>)
 8015610:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015614:	4960      	ldr	r1, [pc, #384]	@ (8015798 <udp_sendto_if_src+0x1b8>)
 8015616:	485f      	ldr	r0, [pc, #380]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 8015618:	f005 fd12 	bl	801b040 <iprintf>
 801561c:	f06f 030f 	mvn.w	r3, #15
 8015620:	e0af      	b.n	8015782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d109      	bne.n	801563c <udp_sendto_if_src+0x5c>
 8015628:	4b58      	ldr	r3, [pc, #352]	@ (801578c <udp_sendto_if_src+0x1ac>)
 801562a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801562e:	495b      	ldr	r1, [pc, #364]	@ (801579c <udp_sendto_if_src+0x1bc>)
 8015630:	4858      	ldr	r0, [pc, #352]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 8015632:	f005 fd05 	bl	801b040 <iprintf>
 8015636:	f06f 030f 	mvn.w	r3, #15
 801563a:	e0a2      	b.n	8015782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801563c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563e:	2b00      	cmp	r3, #0
 8015640:	d109      	bne.n	8015656 <udp_sendto_if_src+0x76>
 8015642:	4b52      	ldr	r3, [pc, #328]	@ (801578c <udp_sendto_if_src+0x1ac>)
 8015644:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015648:	4955      	ldr	r1, [pc, #340]	@ (80157a0 <udp_sendto_if_src+0x1c0>)
 801564a:	4852      	ldr	r0, [pc, #328]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 801564c:	f005 fcf8 	bl	801b040 <iprintf>
 8015650:	f06f 030f 	mvn.w	r3, #15
 8015654:	e095      	b.n	8015782 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015658:	2b00      	cmp	r3, #0
 801565a:	d109      	bne.n	8015670 <udp_sendto_if_src+0x90>
 801565c:	4b4b      	ldr	r3, [pc, #300]	@ (801578c <udp_sendto_if_src+0x1ac>)
 801565e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015662:	4950      	ldr	r1, [pc, #320]	@ (80157a4 <udp_sendto_if_src+0x1c4>)
 8015664:	484b      	ldr	r0, [pc, #300]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 8015666:	f005 fceb 	bl	801b040 <iprintf>
 801566a:	f06f 030f 	mvn.w	r3, #15
 801566e:	e088      	b.n	8015782 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	8a5b      	ldrh	r3, [r3, #18]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d10f      	bne.n	8015698 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015678:	68f9      	ldr	r1, [r7, #12]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	8a5b      	ldrh	r3, [r3, #18]
 801567e:	461a      	mov	r2, r3
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f000 f893 	bl	80157ac <udp_bind>
 8015686:	4603      	mov	r3, r0
 8015688:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801568a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d002      	beq.n	8015698 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015692:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015696:	e074      	b.n	8015782 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	891b      	ldrh	r3, [r3, #8]
 801569c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80156a0:	4293      	cmp	r3, r2
 80156a2:	d902      	bls.n	80156aa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80156a4:	f04f 33ff 	mov.w	r3, #4294967295
 80156a8:	e06b      	b.n	8015782 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80156aa:	2108      	movs	r1, #8
 80156ac:	68b8      	ldr	r0, [r7, #8]
 80156ae:	f7f9 fdf3 	bl	800f298 <pbuf_add_header>
 80156b2:	4603      	mov	r3, r0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d015      	beq.n	80156e4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80156b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80156bc:	2108      	movs	r1, #8
 80156be:	2022      	movs	r0, #34	@ 0x22
 80156c0:	f7f9 fb98 	bl	800edf4 <pbuf_alloc>
 80156c4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d102      	bne.n	80156d2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80156cc:	f04f 33ff 	mov.w	r3, #4294967295
 80156d0:	e057      	b.n	8015782 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	891b      	ldrh	r3, [r3, #8]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d006      	beq.n	80156e8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80156da:	68b9      	ldr	r1, [r7, #8]
 80156dc:	69f8      	ldr	r0, [r7, #28]
 80156de:	f7f9 ff95 	bl	800f60c <pbuf_chain>
 80156e2:	e001      	b.n	80156e8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	895b      	ldrh	r3, [r3, #10]
 80156ec:	2b07      	cmp	r3, #7
 80156ee:	d806      	bhi.n	80156fe <udp_sendto_if_src+0x11e>
 80156f0:	4b26      	ldr	r3, [pc, #152]	@ (801578c <udp_sendto_if_src+0x1ac>)
 80156f2:	f240 320d 	movw	r2, #781	@ 0x30d
 80156f6:	492c      	ldr	r1, [pc, #176]	@ (80157a8 <udp_sendto_if_src+0x1c8>)
 80156f8:	4826      	ldr	r0, [pc, #152]	@ (8015794 <udp_sendto_if_src+0x1b4>)
 80156fa:	f005 fca1 	bl	801b040 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80156fe:	69fb      	ldr	r3, [r7, #28]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	8a5b      	ldrh	r3, [r3, #18]
 8015708:	4618      	mov	r0, r3
 801570a:	f7f8 f939 	bl	800d980 <lwip_htons>
 801570e:	4603      	mov	r3, r0
 8015710:	461a      	mov	r2, r3
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015716:	887b      	ldrh	r3, [r7, #2]
 8015718:	4618      	mov	r0, r3
 801571a:	f7f8 f931 	bl	800d980 <lwip_htons>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	2200      	movs	r2, #0
 801572a:	719a      	strb	r2, [r3, #6]
 801572c:	2200      	movs	r2, #0
 801572e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	891b      	ldrh	r3, [r3, #8]
 8015734:	4618      	mov	r0, r3
 8015736:	f7f8 f923 	bl	800d980 <lwip_htons>
 801573a:	4603      	mov	r3, r0
 801573c:	461a      	mov	r2, r3
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015742:	2311      	movs	r3, #17
 8015744:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	7adb      	ldrb	r3, [r3, #11]
 801574a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	7a9b      	ldrb	r3, [r3, #10]
 8015750:	7cb9      	ldrb	r1, [r7, #18]
 8015752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015754:	9202      	str	r2, [sp, #8]
 8015756:	7cfa      	ldrb	r2, [r7, #19]
 8015758:	9201      	str	r2, [sp, #4]
 801575a:	9300      	str	r3, [sp, #0]
 801575c:	460b      	mov	r3, r1
 801575e:	687a      	ldr	r2, [r7, #4]
 8015760:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015762:	69f8      	ldr	r0, [r7, #28]
 8015764:	f003 fc3a 	bl	8018fdc <ip4_output_if_src>
 8015768:	4603      	mov	r3, r0
 801576a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801576c:	69fa      	ldr	r2, [r7, #28]
 801576e:	68bb      	ldr	r3, [r7, #8]
 8015770:	429a      	cmp	r2, r3
 8015772:	d004      	beq.n	801577e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015774:	69f8      	ldr	r0, [r7, #28]
 8015776:	f7f9 fe25 	bl	800f3c4 <pbuf_free>
    q = NULL;
 801577a:	2300      	movs	r3, #0
 801577c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801577e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015782:	4618      	mov	r0, r3
 8015784:	3720      	adds	r7, #32
 8015786:	46bd      	mov	sp, r7
 8015788:	bd80      	pop	{r7, pc}
 801578a:	bf00      	nop
 801578c:	0801fa8c 	.word	0x0801fa8c
 8015790:	0801fc78 	.word	0x0801fc78
 8015794:	0801fae0 	.word	0x0801fae0
 8015798:	0801fc98 	.word	0x0801fc98
 801579c:	0801fcb8 	.word	0x0801fcb8
 80157a0:	0801fcdc 	.word	0x0801fcdc
 80157a4:	0801fd00 	.word	0x0801fd00
 80157a8:	0801fd24 	.word	0x0801fd24

080157ac <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	4613      	mov	r3, r2
 80157b8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d101      	bne.n	80157c4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80157c0:	4b39      	ldr	r3, [pc, #228]	@ (80158a8 <udp_bind+0xfc>)
 80157c2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d109      	bne.n	80157de <udp_bind+0x32>
 80157ca:	4b38      	ldr	r3, [pc, #224]	@ (80158ac <udp_bind+0x100>)
 80157cc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80157d0:	4937      	ldr	r1, [pc, #220]	@ (80158b0 <udp_bind+0x104>)
 80157d2:	4838      	ldr	r0, [pc, #224]	@ (80158b4 <udp_bind+0x108>)
 80157d4:	f005 fc34 	bl	801b040 <iprintf>
 80157d8:	f06f 030f 	mvn.w	r3, #15
 80157dc:	e060      	b.n	80158a0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80157de:	2300      	movs	r3, #0
 80157e0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157e2:	4b35      	ldr	r3, [pc, #212]	@ (80158b8 <udp_bind+0x10c>)
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	617b      	str	r3, [r7, #20]
 80157e8:	e009      	b.n	80157fe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80157ea:	68fa      	ldr	r2, [r7, #12]
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d102      	bne.n	80157f8 <udp_bind+0x4c>
      rebind = 1;
 80157f2:	2301      	movs	r3, #1
 80157f4:	74fb      	strb	r3, [r7, #19]
      break;
 80157f6:	e005      	b.n	8015804 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	68db      	ldr	r3, [r3, #12]
 80157fc:	617b      	str	r3, [r7, #20]
 80157fe:	697b      	ldr	r3, [r7, #20]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d1f2      	bne.n	80157ea <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015804:	88fb      	ldrh	r3, [r7, #6]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d109      	bne.n	801581e <udp_bind+0x72>
    port = udp_new_port();
 801580a:	f7ff fc51 	bl	80150b0 <udp_new_port>
 801580e:	4603      	mov	r3, r0
 8015810:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015812:	88fb      	ldrh	r3, [r7, #6]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d12c      	bne.n	8015872 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015818:	f06f 0307 	mvn.w	r3, #7
 801581c:	e040      	b.n	80158a0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801581e:	4b26      	ldr	r3, [pc, #152]	@ (80158b8 <udp_bind+0x10c>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	617b      	str	r3, [r7, #20]
 8015824:	e022      	b.n	801586c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015826:	68fa      	ldr	r2, [r7, #12]
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	429a      	cmp	r2, r3
 801582c:	d01b      	beq.n	8015866 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	8a5b      	ldrh	r3, [r3, #18]
 8015832:	88fa      	ldrh	r2, [r7, #6]
 8015834:	429a      	cmp	r2, r3
 8015836:	d116      	bne.n	8015866 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	681a      	ldr	r2, [r3, #0]
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015840:	429a      	cmp	r2, r3
 8015842:	d00d      	beq.n	8015860 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00a      	beq.n	8015860 <udp_bind+0xb4>
 801584a:	68bb      	ldr	r3, [r7, #8]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d006      	beq.n	8015860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015852:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015854:	2b00      	cmp	r3, #0
 8015856:	d003      	beq.n	8015860 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015858:	697b      	ldr	r3, [r7, #20]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d102      	bne.n	8015866 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015860:	f06f 0307 	mvn.w	r3, #7
 8015864:	e01c      	b.n	80158a0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015866:	697b      	ldr	r3, [r7, #20]
 8015868:	68db      	ldr	r3, [r3, #12]
 801586a:	617b      	str	r3, [r7, #20]
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d1d9      	bne.n	8015826 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d002      	beq.n	801587e <udp_bind+0xd2>
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	e000      	b.n	8015880 <udp_bind+0xd4>
 801587e:	2300      	movs	r3, #0
 8015880:	68fa      	ldr	r2, [r7, #12]
 8015882:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	88fa      	ldrh	r2, [r7, #6]
 8015888:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801588a:	7cfb      	ldrb	r3, [r7, #19]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d106      	bne.n	801589e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015890:	4b09      	ldr	r3, [pc, #36]	@ (80158b8 <udp_bind+0x10c>)
 8015892:	681a      	ldr	r2, [r3, #0]
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015898:	4a07      	ldr	r2, [pc, #28]	@ (80158b8 <udp_bind+0x10c>)
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801589e:	2300      	movs	r3, #0
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	3718      	adds	r7, #24
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}
 80158a8:	0806c648 	.word	0x0806c648
 80158ac:	0801fa8c 	.word	0x0801fa8c
 80158b0:	0801fd54 	.word	0x0801fd54
 80158b4:	0801fae0 	.word	0x0801fae0
 80158b8:	20013dd0 	.word	0x20013dd0

080158bc <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d007      	beq.n	80158dc <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80158cc:	683b      	ldr	r3, [r7, #0]
 80158ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80158d2:	3301      	adds	r3, #1
 80158d4:	b2da      	uxtb	r2, r3
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80158da:	e002      	b.n	80158e2 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2200      	movs	r2, #0
 80158e0:	721a      	strb	r2, [r3, #8]
}
 80158e2:	bf00      	nop
 80158e4:	370c      	adds	r7, #12
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr
	...

080158f0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b086      	sub	sp, #24
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	4613      	mov	r3, r2
 80158fc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d109      	bne.n	8015918 <udp_connect+0x28>
 8015904:	4b2c      	ldr	r3, [pc, #176]	@ (80159b8 <udp_connect+0xc8>)
 8015906:	f240 4235 	movw	r2, #1077	@ 0x435
 801590a:	492c      	ldr	r1, [pc, #176]	@ (80159bc <udp_connect+0xcc>)
 801590c:	482c      	ldr	r0, [pc, #176]	@ (80159c0 <udp_connect+0xd0>)
 801590e:	f005 fb97 	bl	801b040 <iprintf>
 8015912:	f06f 030f 	mvn.w	r3, #15
 8015916:	e04b      	b.n	80159b0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d109      	bne.n	8015932 <udp_connect+0x42>
 801591e:	4b26      	ldr	r3, [pc, #152]	@ (80159b8 <udp_connect+0xc8>)
 8015920:	f240 4236 	movw	r2, #1078	@ 0x436
 8015924:	4927      	ldr	r1, [pc, #156]	@ (80159c4 <udp_connect+0xd4>)
 8015926:	4826      	ldr	r0, [pc, #152]	@ (80159c0 <udp_connect+0xd0>)
 8015928:	f005 fb8a 	bl	801b040 <iprintf>
 801592c:	f06f 030f 	mvn.w	r3, #15
 8015930:	e03e      	b.n	80159b0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	8a5b      	ldrh	r3, [r3, #18]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d10f      	bne.n	801595a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801593a:	68f9      	ldr	r1, [r7, #12]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	8a5b      	ldrh	r3, [r3, #18]
 8015940:	461a      	mov	r2, r3
 8015942:	68f8      	ldr	r0, [r7, #12]
 8015944:	f7ff ff32 	bl	80157ac <udp_bind>
 8015948:	4603      	mov	r3, r0
 801594a:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 801594c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d002      	beq.n	801595a <udp_connect+0x6a>
      return err;
 8015954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015958:	e02a      	b.n	80159b0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <udp_connect+0x76>
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	e000      	b.n	8015968 <udp_connect+0x78>
 8015966:	2300      	movs	r3, #0
 8015968:	68fa      	ldr	r2, [r7, #12]
 801596a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	88fa      	ldrh	r2, [r7, #6]
 8015970:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	7c1b      	ldrb	r3, [r3, #16]
 8015976:	f043 0304 	orr.w	r3, r3, #4
 801597a:	b2da      	uxtb	r2, r3
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015980:	4b11      	ldr	r3, [pc, #68]	@ (80159c8 <udp_connect+0xd8>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	613b      	str	r3, [r7, #16]
 8015986:	e008      	b.n	801599a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015988:	68fa      	ldr	r2, [r7, #12]
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	429a      	cmp	r2, r3
 801598e:	d101      	bne.n	8015994 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015990:	2300      	movs	r3, #0
 8015992:	e00d      	b.n	80159b0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	613b      	str	r3, [r7, #16]
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1f3      	bne.n	8015988 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80159a0:	4b09      	ldr	r3, [pc, #36]	@ (80159c8 <udp_connect+0xd8>)
 80159a2:	681a      	ldr	r2, [r3, #0]
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80159a8:	4a07      	ldr	r2, [pc, #28]	@ (80159c8 <udp_connect+0xd8>)
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80159ae:	2300      	movs	r3, #0
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	3718      	adds	r7, #24
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bd80      	pop	{r7, pc}
 80159b8:	0801fa8c 	.word	0x0801fa8c
 80159bc:	0801fd6c 	.word	0x0801fd6c
 80159c0:	0801fae0 	.word	0x0801fae0
 80159c4:	0801fd88 	.word	0x0801fd88
 80159c8:	20013dd0 	.word	0x20013dd0

080159cc <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d107      	bne.n	80159ea <udp_disconnect+0x1e>
 80159da:	4b0d      	ldr	r3, [pc, #52]	@ (8015a10 <udp_disconnect+0x44>)
 80159dc:	f240 426a 	movw	r2, #1130	@ 0x46a
 80159e0:	490c      	ldr	r1, [pc, #48]	@ (8015a14 <udp_disconnect+0x48>)
 80159e2:	480d      	ldr	r0, [pc, #52]	@ (8015a18 <udp_disconnect+0x4c>)
 80159e4:	f005 fb2c 	bl	801b040 <iprintf>
 80159e8:	e00f      	b.n	8015a0a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	2200      	movs	r2, #0
 80159ee:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2200      	movs	r2, #0
 80159f4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2200      	movs	r2, #0
 80159fa:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	7c1b      	ldrb	r3, [r3, #16]
 8015a00:	f023 0304 	bic.w	r3, r3, #4
 8015a04:	b2da      	uxtb	r2, r3
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	741a      	strb	r2, [r3, #16]
}
 8015a0a:	3708      	adds	r7, #8
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	0801fa8c 	.word	0x0801fa8c
 8015a14:	0801fda4 	.word	0x0801fda4
 8015a18:	0801fae0 	.word	0x0801fae0

08015a1c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015a1c:	b580      	push	{r7, lr}
 8015a1e:	b084      	sub	sp, #16
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	60f8      	str	r0, [r7, #12]
 8015a24:	60b9      	str	r1, [r7, #8]
 8015a26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d107      	bne.n	8015a3e <udp_recv+0x22>
 8015a2e:	4b08      	ldr	r3, [pc, #32]	@ (8015a50 <udp_recv+0x34>)
 8015a30:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015a34:	4907      	ldr	r1, [pc, #28]	@ (8015a54 <udp_recv+0x38>)
 8015a36:	4808      	ldr	r0, [pc, #32]	@ (8015a58 <udp_recv+0x3c>)
 8015a38:	f005 fb02 	bl	801b040 <iprintf>
 8015a3c:	e005      	b.n	8015a4a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	68ba      	ldr	r2, [r7, #8]
 8015a42:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	687a      	ldr	r2, [r7, #4]
 8015a48:	61da      	str	r2, [r3, #28]
}
 8015a4a:	3710      	adds	r7, #16
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}
 8015a50:	0801fa8c 	.word	0x0801fa8c
 8015a54:	0801fdc0 	.word	0x0801fdc0
 8015a58:	0801fae0 	.word	0x0801fae0

08015a5c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b084      	sub	sp, #16
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d107      	bne.n	8015a7a <udp_remove+0x1e>
 8015a6a:	4b19      	ldr	r3, [pc, #100]	@ (8015ad0 <udp_remove+0x74>)
 8015a6c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8015a70:	4918      	ldr	r1, [pc, #96]	@ (8015ad4 <udp_remove+0x78>)
 8015a72:	4819      	ldr	r0, [pc, #100]	@ (8015ad8 <udp_remove+0x7c>)
 8015a74:	f005 fae4 	bl	801b040 <iprintf>
 8015a78:	e026      	b.n	8015ac8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a7a:	4b18      	ldr	r3, [pc, #96]	@ (8015adc <udp_remove+0x80>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d105      	bne.n	8015a90 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015a84:	4b15      	ldr	r3, [pc, #84]	@ (8015adc <udp_remove+0x80>)
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	4a14      	ldr	r2, [pc, #80]	@ (8015adc <udp_remove+0x80>)
 8015a8c:	6013      	str	r3, [r2, #0]
 8015a8e:	e017      	b.n	8015ac0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015a90:	4b12      	ldr	r3, [pc, #72]	@ (8015adc <udp_remove+0x80>)
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	60fb      	str	r3, [r7, #12]
 8015a96:	e010      	b.n	8015aba <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	68db      	ldr	r3, [r3, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d009      	beq.n	8015ab4 <udp_remove+0x58>
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	68db      	ldr	r3, [r3, #12]
 8015aa4:	687a      	ldr	r2, [r7, #4]
 8015aa6:	429a      	cmp	r2, r3
 8015aa8:	d104      	bne.n	8015ab4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	68da      	ldr	r2, [r3, #12]
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	60da      	str	r2, [r3, #12]
        break;
 8015ab2:	e005      	b.n	8015ac0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68db      	ldr	r3, [r3, #12]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d1eb      	bne.n	8015a98 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015ac0:	6879      	ldr	r1, [r7, #4]
 8015ac2:	2000      	movs	r0, #0
 8015ac4:	f7f8 fddc 	bl	800e680 <memp_free>
}
 8015ac8:	3710      	adds	r7, #16
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	0801fa8c 	.word	0x0801fa8c
 8015ad4:	0801fdd8 	.word	0x0801fdd8
 8015ad8:	0801fae0 	.word	0x0801fae0
 8015adc:	20013dd0 	.word	0x20013dd0

08015ae0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	f7f8 fd78 	bl	800e5dc <memp_malloc>
 8015aec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d007      	beq.n	8015b04 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015af4:	2220      	movs	r2, #32
 8015af6:	2100      	movs	r1, #0
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f005 fc03 	bl	801b304 <memset>
    pcb->ttl = UDP_TTL;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	22ff      	movs	r2, #255	@ 0xff
 8015b02:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015b04:	687b      	ldr	r3, [r7, #4]
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	3708      	adds	r7, #8
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
	...

08015b10 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d01e      	beq.n	8015b5e <udp_netif_ip_addr_changed+0x4e>
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d01a      	beq.n	8015b5e <udp_netif_ip_addr_changed+0x4e>
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d017      	beq.n	8015b5e <udp_netif_ip_addr_changed+0x4e>
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d013      	beq.n	8015b5e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b36:	4b0d      	ldr	r3, [pc, #52]	@ (8015b6c <udp_netif_ip_addr_changed+0x5c>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	60fb      	str	r3, [r7, #12]
 8015b3c:	e00c      	b.n	8015b58 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d103      	bne.n	8015b52 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	681a      	ldr	r2, [r3, #0]
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	68db      	ldr	r3, [r3, #12]
 8015b56:	60fb      	str	r3, [r7, #12]
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1ef      	bne.n	8015b3e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015b5e:	bf00      	nop
 8015b60:	3714      	adds	r7, #20
 8015b62:	46bd      	mov	sp, r7
 8015b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b68:	4770      	bx	lr
 8015b6a:	bf00      	nop
 8015b6c:	20013dd0 	.word	0x20013dd0

08015b70 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015b74:	4b20      	ldr	r3, [pc, #128]	@ (8015bf8 <dhcp_inc_pcb_refcount+0x88>)
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d133      	bne.n	8015be4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d005      	beq.n	8015b90 <dhcp_inc_pcb_refcount+0x20>
 8015b84:	4b1e      	ldr	r3, [pc, #120]	@ (8015c00 <dhcp_inc_pcb_refcount+0x90>)
 8015b86:	22e5      	movs	r2, #229	@ 0xe5
 8015b88:	491e      	ldr	r1, [pc, #120]	@ (8015c04 <dhcp_inc_pcb_refcount+0x94>)
 8015b8a:	481f      	ldr	r0, [pc, #124]	@ (8015c08 <dhcp_inc_pcb_refcount+0x98>)
 8015b8c:	f005 fa58 	bl	801b040 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015b90:	f7ff ffa6 	bl	8015ae0 <udp_new>
 8015b94:	4603      	mov	r3, r0
 8015b96:	4a19      	ldr	r2, [pc, #100]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015b98:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015b9a:	4b18      	ldr	r3, [pc, #96]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d102      	bne.n	8015ba8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba6:	e024      	b.n	8015bf2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015ba8:	4b14      	ldr	r3, [pc, #80]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	7a5a      	ldrb	r2, [r3, #9]
 8015bae:	4b13      	ldr	r3, [pc, #76]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	f042 0220 	orr.w	r2, r2, #32
 8015bb6:	b2d2      	uxtb	r2, r2
 8015bb8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015bba:	4b10      	ldr	r3, [pc, #64]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2244      	movs	r2, #68	@ 0x44
 8015bc0:	4912      	ldr	r1, [pc, #72]	@ (8015c0c <dhcp_inc_pcb_refcount+0x9c>)
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f7ff fdf2 	bl	80157ac <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	2243      	movs	r2, #67	@ 0x43
 8015bce:	490f      	ldr	r1, [pc, #60]	@ (8015c0c <dhcp_inc_pcb_refcount+0x9c>)
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ff fe8d 	bl	80158f0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015bd6:	4b09      	ldr	r3, [pc, #36]	@ (8015bfc <dhcp_inc_pcb_refcount+0x8c>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	490c      	ldr	r1, [pc, #48]	@ (8015c10 <dhcp_inc_pcb_refcount+0xa0>)
 8015bde:	4618      	mov	r0, r3
 8015be0:	f7ff ff1c 	bl	8015a1c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015be4:	4b04      	ldr	r3, [pc, #16]	@ (8015bf8 <dhcp_inc_pcb_refcount+0x88>)
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	3301      	adds	r3, #1
 8015bea:	b2da      	uxtb	r2, r3
 8015bec:	4b02      	ldr	r3, [pc, #8]	@ (8015bf8 <dhcp_inc_pcb_refcount+0x88>)
 8015bee:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015bf0:	2300      	movs	r3, #0
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	bd80      	pop	{r7, pc}
 8015bf6:	bf00      	nop
 8015bf8:	20013e00 	.word	0x20013e00
 8015bfc:	20013dfc 	.word	0x20013dfc
 8015c00:	0801fdf0 	.word	0x0801fdf0
 8015c04:	0801fe28 	.word	0x0801fe28
 8015c08:	0801fe50 	.word	0x0801fe50
 8015c0c:	0806c648 	.word	0x0806c648
 8015c10:	080174d1 	.word	0x080174d1

08015c14 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015c18:	4b0e      	ldr	r3, [pc, #56]	@ (8015c54 <dhcp_dec_pcb_refcount+0x40>)
 8015c1a:	781b      	ldrb	r3, [r3, #0]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d105      	bne.n	8015c2c <dhcp_dec_pcb_refcount+0x18>
 8015c20:	4b0d      	ldr	r3, [pc, #52]	@ (8015c58 <dhcp_dec_pcb_refcount+0x44>)
 8015c22:	22ff      	movs	r2, #255	@ 0xff
 8015c24:	490d      	ldr	r1, [pc, #52]	@ (8015c5c <dhcp_dec_pcb_refcount+0x48>)
 8015c26:	480e      	ldr	r0, [pc, #56]	@ (8015c60 <dhcp_dec_pcb_refcount+0x4c>)
 8015c28:	f005 fa0a 	bl	801b040 <iprintf>
  dhcp_pcb_refcount--;
 8015c2c:	4b09      	ldr	r3, [pc, #36]	@ (8015c54 <dhcp_dec_pcb_refcount+0x40>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	3b01      	subs	r3, #1
 8015c32:	b2da      	uxtb	r2, r3
 8015c34:	4b07      	ldr	r3, [pc, #28]	@ (8015c54 <dhcp_dec_pcb_refcount+0x40>)
 8015c36:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015c38:	4b06      	ldr	r3, [pc, #24]	@ (8015c54 <dhcp_dec_pcb_refcount+0x40>)
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d107      	bne.n	8015c50 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015c40:	4b08      	ldr	r3, [pc, #32]	@ (8015c64 <dhcp_dec_pcb_refcount+0x50>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	4618      	mov	r0, r3
 8015c46:	f7ff ff09 	bl	8015a5c <udp_remove>
    dhcp_pcb = NULL;
 8015c4a:	4b06      	ldr	r3, [pc, #24]	@ (8015c64 <dhcp_dec_pcb_refcount+0x50>)
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	601a      	str	r2, [r3, #0]
  }
}
 8015c50:	bf00      	nop
 8015c52:	bd80      	pop	{r7, pc}
 8015c54:	20013e00 	.word	0x20013e00
 8015c58:	0801fdf0 	.word	0x0801fdf0
 8015c5c:	0801fe78 	.word	0x0801fe78
 8015c60:	0801fe50 	.word	0x0801fe50
 8015c64:	20013dfc 	.word	0x20013dfc

08015c68 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c74:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015c76:	210c      	movs	r1, #12
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f001 f85a 	bl	8016d32 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015c7e:	4b06      	ldr	r3, [pc, #24]	@ (8015c98 <dhcp_handle_nak+0x30>)
 8015c80:	4a05      	ldr	r2, [pc, #20]	@ (8015c98 <dhcp_handle_nak+0x30>)
 8015c82:	4905      	ldr	r1, [pc, #20]	@ (8015c98 <dhcp_handle_nak+0x30>)
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f7f8 fe9d 	bl	800e9c4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f000 fc48 	bl	8016520 <dhcp_discover>
}
 8015c90:	bf00      	nop
 8015c92:	3710      	adds	r7, #16
 8015c94:	46bd      	mov	sp, r7
 8015c96:	bd80      	pop	{r7, pc}
 8015c98:	0806c648 	.word	0x0806c648

08015c9c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b084      	sub	sp, #16
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ca8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015caa:	2108      	movs	r1, #8
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f001 f840 	bl	8016d32 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	331c      	adds	r3, #28
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	4619      	mov	r1, r3
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f002 fbbc 	bl	8018438 <etharp_query>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	799b      	ldrb	r3, [r3, #6]
 8015cc8:	2bff      	cmp	r3, #255	@ 0xff
 8015cca:	d005      	beq.n	8015cd8 <dhcp_check+0x3c>
    dhcp->tries++;
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	799b      	ldrb	r3, [r3, #6]
 8015cd0:	3301      	adds	r3, #1
 8015cd2:	b2da      	uxtb	r2, r3
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015cd8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015cdc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015cde:	893b      	ldrh	r3, [r7, #8]
 8015ce0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015ce4:	4a06      	ldr	r2, [pc, #24]	@ (8015d00 <dhcp_check+0x64>)
 8015ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8015cea:	1152      	asrs	r2, r2, #5
 8015cec:	17db      	asrs	r3, r3, #31
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015cf6:	bf00      	nop
 8015cf8:	3710      	adds	r7, #16
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	10624dd3 	.word	0x10624dd3

08015d04 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b084      	sub	sp, #16
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d12:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015d14:	4b0c      	ldr	r3, [pc, #48]	@ (8015d48 <dhcp_handle_offer+0x44>)
 8015d16:	789b      	ldrb	r3, [r3, #2]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d011      	beq.n	8015d40 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015d22:	4b0a      	ldr	r3, [pc, #40]	@ (8015d4c <dhcp_handle_offer+0x48>)
 8015d24:	689b      	ldr	r3, [r3, #8]
 8015d26:	4618      	mov	r0, r3
 8015d28:	f7f7 fe3f 	bl	800d9aa <lwip_htonl>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015d32:	683b      	ldr	r3, [r7, #0]
 8015d34:	691a      	ldr	r2, [r3, #16]
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 f808 	bl	8015d50 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015d40:	bf00      	nop
 8015d42:	3710      	adds	r7, #16
 8015d44:	46bd      	mov	sp, r7
 8015d46:	bd80      	pop	{r7, pc}
 8015d48:	20013df4 	.word	0x20013df4
 8015d4c:	20013dd4 	.word	0x20013dd4

08015d50 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015d50:	b5b0      	push	{r4, r5, r7, lr}
 8015d52:	b08a      	sub	sp, #40	@ 0x28
 8015d54:	af02      	add	r7, sp, #8
 8015d56:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d109      	bne.n	8015d72 <dhcp_select+0x22>
 8015d5e:	4b71      	ldr	r3, [pc, #452]	@ (8015f24 <dhcp_select+0x1d4>)
 8015d60:	f240 1277 	movw	r2, #375	@ 0x177
 8015d64:	4970      	ldr	r1, [pc, #448]	@ (8015f28 <dhcp_select+0x1d8>)
 8015d66:	4871      	ldr	r0, [pc, #452]	@ (8015f2c <dhcp_select+0x1dc>)
 8015d68:	f005 f96a 	bl	801b040 <iprintf>
 8015d6c:	f06f 030f 	mvn.w	r3, #15
 8015d70:	e0d3      	b.n	8015f1a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d76:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015d78:	69bb      	ldr	r3, [r7, #24]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d109      	bne.n	8015d92 <dhcp_select+0x42>
 8015d7e:	4b69      	ldr	r3, [pc, #420]	@ (8015f24 <dhcp_select+0x1d4>)
 8015d80:	f240 1279 	movw	r2, #377	@ 0x179
 8015d84:	496a      	ldr	r1, [pc, #424]	@ (8015f30 <dhcp_select+0x1e0>)
 8015d86:	4869      	ldr	r0, [pc, #420]	@ (8015f2c <dhcp_select+0x1dc>)
 8015d88:	f005 f95a 	bl	801b040 <iprintf>
 8015d8c:	f06f 0305 	mvn.w	r3, #5
 8015d90:	e0c3      	b.n	8015f1a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015d92:	2101      	movs	r1, #1
 8015d94:	69b8      	ldr	r0, [r7, #24]
 8015d96:	f000 ffcc 	bl	8016d32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015d9a:	f107 030c 	add.w	r3, r7, #12
 8015d9e:	2203      	movs	r2, #3
 8015da0:	69b9      	ldr	r1, [r7, #24]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f001 fc5e 	bl	8017664 <dhcp_create_msg>
 8015da8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015daa:	697b      	ldr	r3, [r7, #20]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	f000 8085 	beq.w	8015ebc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	685b      	ldr	r3, [r3, #4]
 8015db6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015db8:	89b8      	ldrh	r0, [r7, #12]
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015dc0:	2302      	movs	r3, #2
 8015dc2:	2239      	movs	r2, #57	@ 0x39
 8015dc4:	f000 ffd0 	bl	8016d68 <dhcp_option>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015dcc:	89b8      	ldrh	r0, [r7, #12]
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015dd8:	461a      	mov	r2, r3
 8015dda:	f001 f81f 	bl	8016e1c <dhcp_option_short>
 8015dde:	4603      	mov	r3, r0
 8015de0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015de2:	89b8      	ldrh	r0, [r7, #12]
 8015de4:	693b      	ldr	r3, [r7, #16]
 8015de6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015dea:	2304      	movs	r3, #4
 8015dec:	2232      	movs	r2, #50	@ 0x32
 8015dee:	f000 ffbb 	bl	8016d68 <dhcp_option>
 8015df2:	4603      	mov	r3, r0
 8015df4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015df6:	89bc      	ldrh	r4, [r7, #12]
 8015df8:	693b      	ldr	r3, [r7, #16]
 8015dfa:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015dfe:	69bb      	ldr	r3, [r7, #24]
 8015e00:	69db      	ldr	r3, [r3, #28]
 8015e02:	4618      	mov	r0, r3
 8015e04:	f7f7 fdd1 	bl	800d9aa <lwip_htonl>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	4629      	mov	r1, r5
 8015e0e:	4620      	mov	r0, r4
 8015e10:	f001 f836 	bl	8016e80 <dhcp_option_long>
 8015e14:	4603      	mov	r3, r0
 8015e16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015e18:	89b8      	ldrh	r0, [r7, #12]
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015e20:	2304      	movs	r3, #4
 8015e22:	2236      	movs	r2, #54	@ 0x36
 8015e24:	f000 ffa0 	bl	8016d68 <dhcp_option>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015e2c:	89bc      	ldrh	r4, [r7, #12]
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	699b      	ldr	r3, [r3, #24]
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7f7 fdb6 	bl	800d9aa <lwip_htonl>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	461a      	mov	r2, r3
 8015e42:	4629      	mov	r1, r5
 8015e44:	4620      	mov	r0, r4
 8015e46:	f001 f81b 	bl	8016e80 <dhcp_option_long>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015e4e:	89b8      	ldrh	r0, [r7, #12]
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015e56:	2303      	movs	r3, #3
 8015e58:	2237      	movs	r2, #55	@ 0x37
 8015e5a:	f000 ff85 	bl	8016d68 <dhcp_option>
 8015e5e:	4603      	mov	r3, r0
 8015e60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e62:	2300      	movs	r3, #0
 8015e64:	77fb      	strb	r3, [r7, #31]
 8015e66:	e00e      	b.n	8015e86 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015e68:	89b8      	ldrh	r0, [r7, #12]
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015e70:	7ffb      	ldrb	r3, [r7, #31]
 8015e72:	4a30      	ldr	r2, [pc, #192]	@ (8015f34 <dhcp_select+0x1e4>)
 8015e74:	5cd3      	ldrb	r3, [r2, r3]
 8015e76:	461a      	mov	r2, r3
 8015e78:	f000 ffaa 	bl	8016dd0 <dhcp_option_byte>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e80:	7ffb      	ldrb	r3, [r7, #31]
 8015e82:	3301      	adds	r3, #1
 8015e84:	77fb      	strb	r3, [r7, #31]
 8015e86:	7ffb      	ldrb	r3, [r7, #31]
 8015e88:	2b02      	cmp	r3, #2
 8015e8a:	d9ed      	bls.n	8015e68 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015e8c:	89b8      	ldrh	r0, [r7, #12]
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	33f0      	adds	r3, #240	@ 0xf0
 8015e92:	697a      	ldr	r2, [r7, #20]
 8015e94:	4619      	mov	r1, r3
 8015e96:	f001 fcbb 	bl	8017810 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015e9a:	4b27      	ldr	r3, [pc, #156]	@ (8015f38 <dhcp_select+0x1e8>)
 8015e9c:	6818      	ldr	r0, [r3, #0]
 8015e9e:	4b27      	ldr	r3, [pc, #156]	@ (8015f3c <dhcp_select+0x1ec>)
 8015ea0:	9301      	str	r3, [sp, #4]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	9300      	str	r3, [sp, #0]
 8015ea6:	2343      	movs	r3, #67	@ 0x43
 8015ea8:	4a25      	ldr	r2, [pc, #148]	@ (8015f40 <dhcp_select+0x1f0>)
 8015eaa:	6979      	ldr	r1, [r7, #20]
 8015eac:	f7ff fb98 	bl	80155e0 <udp_sendto_if_src>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8015eb4:	6978      	ldr	r0, [r7, #20]
 8015eb6:	f7f9 fa85 	bl	800f3c4 <pbuf_free>
 8015eba:	e001      	b.n	8015ec0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015ebc:	23ff      	movs	r3, #255	@ 0xff
 8015ebe:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	799b      	ldrb	r3, [r3, #6]
 8015ec4:	2bff      	cmp	r3, #255	@ 0xff
 8015ec6:	d005      	beq.n	8015ed4 <dhcp_select+0x184>
    dhcp->tries++;
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	799b      	ldrb	r3, [r3, #6]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	b2da      	uxtb	r2, r3
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015ed4:	69bb      	ldr	r3, [r7, #24]
 8015ed6:	799b      	ldrb	r3, [r3, #6]
 8015ed8:	2b05      	cmp	r3, #5
 8015eda:	d80d      	bhi.n	8015ef8 <dhcp_select+0x1a8>
 8015edc:	69bb      	ldr	r3, [r7, #24]
 8015ede:	799b      	ldrb	r3, [r3, #6]
 8015ee0:	461a      	mov	r2, r3
 8015ee2:	2301      	movs	r3, #1
 8015ee4:	4093      	lsls	r3, r2
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	461a      	mov	r2, r3
 8015eea:	0152      	lsls	r2, r2, #5
 8015eec:	1ad2      	subs	r2, r2, r3
 8015eee:	0092      	lsls	r2, r2, #2
 8015ef0:	4413      	add	r3, r2
 8015ef2:	00db      	lsls	r3, r3, #3
 8015ef4:	b29b      	uxth	r3, r3
 8015ef6:	e001      	b.n	8015efc <dhcp_select+0x1ac>
 8015ef8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8015efc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015efe:	89fb      	ldrh	r3, [r7, #14]
 8015f00:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015f04:	4a0f      	ldr	r2, [pc, #60]	@ (8015f44 <dhcp_select+0x1f4>)
 8015f06:	fb82 1203 	smull	r1, r2, r2, r3
 8015f0a:	1152      	asrs	r2, r2, #5
 8015f0c:	17db      	asrs	r3, r3, #31
 8015f0e:	1ad3      	subs	r3, r2, r3
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	69bb      	ldr	r3, [r7, #24]
 8015f14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015f16:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3720      	adds	r7, #32
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bdb0      	pop	{r4, r5, r7, pc}
 8015f22:	bf00      	nop
 8015f24:	0801fdf0 	.word	0x0801fdf0
 8015f28:	0801fe9c 	.word	0x0801fe9c
 8015f2c:	0801fe50 	.word	0x0801fe50
 8015f30:	0801feb8 	.word	0x0801feb8
 8015f34:	200000bc 	.word	0x200000bc
 8015f38:	20013dfc 	.word	0x20013dfc
 8015f3c:	0806c648 	.word	0x0806c648
 8015f40:	0806c64c 	.word	0x0806c64c
 8015f44:	10624dd3 	.word	0x10624dd3

08015f48 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b082      	sub	sp, #8
 8015f4c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015f4e:	4b27      	ldr	r3, [pc, #156]	@ (8015fec <dhcp_coarse_tmr+0xa4>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	607b      	str	r3, [r7, #4]
 8015f54:	e042      	b.n	8015fdc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f5a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d039      	beq.n	8015fd6 <dhcp_coarse_tmr+0x8e>
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	795b      	ldrb	r3, [r3, #5]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d035      	beq.n	8015fd6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	8a9b      	ldrh	r3, [r3, #20]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d012      	beq.n	8015f98 <dhcp_coarse_tmr+0x50>
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	8a5b      	ldrh	r3, [r3, #18]
 8015f76:	3301      	adds	r3, #1
 8015f78:	b29a      	uxth	r2, r3
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	825a      	strh	r2, [r3, #18]
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	8a5a      	ldrh	r2, [r3, #18]
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	8a9b      	ldrh	r3, [r3, #20]
 8015f86:	429a      	cmp	r2, r3
 8015f88:	d106      	bne.n	8015f98 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f000 fe2c 	bl	8016be8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 f969 	bl	8016268 <dhcp_start>
 8015f96:	e01e      	b.n	8015fd6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015f98:	683b      	ldr	r3, [r7, #0]
 8015f9a:	8a1b      	ldrh	r3, [r3, #16]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <dhcp_coarse_tmr+0x70>
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	8a1b      	ldrh	r3, [r3, #16]
 8015fa4:	1e5a      	subs	r2, r3, #1
 8015fa6:	b291      	uxth	r1, r2
 8015fa8:	683a      	ldr	r2, [r7, #0]
 8015faa:	8211      	strh	r1, [r2, #16]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d103      	bne.n	8015fb8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 f8c6 	bl	8016142 <dhcp_t2_timeout>
 8015fb6:	e00e      	b.n	8015fd6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	89db      	ldrh	r3, [r3, #14]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d00a      	beq.n	8015fd6 <dhcp_coarse_tmr+0x8e>
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	89db      	ldrh	r3, [r3, #14]
 8015fc4:	1e5a      	subs	r2, r3, #1
 8015fc6:	b291      	uxth	r1, r2
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	81d1      	strh	r1, [r2, #14]
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	d102      	bne.n	8015fd6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f000 f888 	bl	80160e6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	607b      	str	r3, [r7, #4]
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1b9      	bne.n	8015f56 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015fe2:	bf00      	nop
 8015fe4:	bf00      	nop
 8015fe6:	3708      	adds	r7, #8
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}
 8015fec:	20013d64 	.word	0x20013d64

08015ff0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015ff6:	4b16      	ldr	r3, [pc, #88]	@ (8016050 <dhcp_fine_tmr+0x60>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	607b      	str	r3, [r7, #4]
 8015ffc:	e020      	b.n	8016040 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016002:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d017      	beq.n	801603a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801600a:	683b      	ldr	r3, [r7, #0]
 801600c:	891b      	ldrh	r3, [r3, #8]
 801600e:	2b01      	cmp	r3, #1
 8016010:	d906      	bls.n	8016020 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	891b      	ldrh	r3, [r3, #8]
 8016016:	3b01      	subs	r3, #1
 8016018:	b29a      	uxth	r2, r3
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	811a      	strh	r2, [r3, #8]
 801601e:	e00c      	b.n	801603a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	891b      	ldrh	r3, [r3, #8]
 8016024:	2b01      	cmp	r3, #1
 8016026:	d108      	bne.n	801603a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	891b      	ldrh	r3, [r3, #8]
 801602c:	3b01      	subs	r3, #1
 801602e:	b29a      	uxth	r2, r3
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f000 f80d 	bl	8016054 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	607b      	str	r3, [r7, #4]
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d1db      	bne.n	8015ffe <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016046:	bf00      	nop
 8016048:	bf00      	nop
 801604a:	3708      	adds	r7, #8
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}
 8016050:	20013d64 	.word	0x20013d64

08016054 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016060:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	795b      	ldrb	r3, [r3, #5]
 8016066:	2b0c      	cmp	r3, #12
 8016068:	d003      	beq.n	8016072 <dhcp_timeout+0x1e>
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	795b      	ldrb	r3, [r3, #5]
 801606e:	2b06      	cmp	r3, #6
 8016070:	d103      	bne.n	801607a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016072:	6878      	ldr	r0, [r7, #4]
 8016074:	f000 fa54 	bl	8016520 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016078:	e031      	b.n	80160de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801607a:	68fb      	ldr	r3, [r7, #12]
 801607c:	795b      	ldrb	r3, [r3, #5]
 801607e:	2b01      	cmp	r3, #1
 8016080:	d10e      	bne.n	80160a0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	799b      	ldrb	r3, [r3, #6]
 8016086:	2b05      	cmp	r3, #5
 8016088:	d803      	bhi.n	8016092 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7ff fe60 	bl	8015d50 <dhcp_select>
}
 8016090:	e025      	b.n	80160de <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 fda8 	bl	8016be8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f000 f8e5 	bl	8016268 <dhcp_start>
}
 801609e:	e01e      	b.n	80160de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	795b      	ldrb	r3, [r3, #5]
 80160a4:	2b08      	cmp	r3, #8
 80160a6:	d10b      	bne.n	80160c0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	799b      	ldrb	r3, [r3, #6]
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d803      	bhi.n	80160b8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7ff fdf3 	bl	8015c9c <dhcp_check>
}
 80160b6:	e012      	b.n	80160de <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 fad3 	bl	8016664 <dhcp_bind>
}
 80160be:	e00e      	b.n	80160de <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	795b      	ldrb	r3, [r3, #5]
 80160c4:	2b03      	cmp	r3, #3
 80160c6:	d10a      	bne.n	80160de <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	799b      	ldrb	r3, [r3, #6]
 80160cc:	2b01      	cmp	r3, #1
 80160ce:	d803      	bhi.n	80160d8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 fcd5 	bl	8016a80 <dhcp_reboot>
}
 80160d6:	e002      	b.n	80160de <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 fa21 	bl	8016520 <dhcp_discover>
}
 80160de:	bf00      	nop
 80160e0:	3710      	adds	r7, #16
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}

080160e6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80160e6:	b580      	push	{r7, lr}
 80160e8:	b084      	sub	sp, #16
 80160ea:	af00      	add	r7, sp, #0
 80160ec:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	795b      	ldrb	r3, [r3, #5]
 80160f8:	2b01      	cmp	r3, #1
 80160fa:	d007      	beq.n	801610c <dhcp_t1_timeout+0x26>
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	795b      	ldrb	r3, [r3, #5]
 8016100:	2b0a      	cmp	r3, #10
 8016102:	d003      	beq.n	801610c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016108:	2b05      	cmp	r3, #5
 801610a:	d116      	bne.n	801613a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 fb83 	bl	8016818 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	899b      	ldrh	r3, [r3, #12]
 8016116:	461a      	mov	r2, r3
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	8a5b      	ldrh	r3, [r3, #18]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	2b01      	cmp	r3, #1
 8016120:	dd0b      	ble.n	801613a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	899b      	ldrh	r3, [r3, #12]
 8016126:	461a      	mov	r2, r3
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	8a5b      	ldrh	r3, [r3, #18]
 801612c:	1ad3      	subs	r3, r2, r3
 801612e:	0fda      	lsrs	r2, r3, #31
 8016130:	4413      	add	r3, r2
 8016132:	105b      	asrs	r3, r3, #1
 8016134:	b29a      	uxth	r2, r3
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801613a:	bf00      	nop
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016142:	b580      	push	{r7, lr}
 8016144:	b084      	sub	sp, #16
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801614e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	795b      	ldrb	r3, [r3, #5]
 8016154:	2b01      	cmp	r3, #1
 8016156:	d00b      	beq.n	8016170 <dhcp_t2_timeout+0x2e>
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	795b      	ldrb	r3, [r3, #5]
 801615c:	2b0a      	cmp	r3, #10
 801615e:	d007      	beq.n	8016170 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016164:	2b05      	cmp	r3, #5
 8016166:	d003      	beq.n	8016170 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	795b      	ldrb	r3, [r3, #5]
 801616c:	2b04      	cmp	r3, #4
 801616e:	d116      	bne.n	801619e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f000 fbeb 	bl	801694c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	8a9b      	ldrh	r3, [r3, #20]
 801617a:	461a      	mov	r2, r3
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	8a5b      	ldrh	r3, [r3, #18]
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	2b01      	cmp	r3, #1
 8016184:	dd0b      	ble.n	801619e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	8a9b      	ldrh	r3, [r3, #20]
 801618a:	461a      	mov	r2, r3
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	8a5b      	ldrh	r3, [r3, #18]
 8016190:	1ad3      	subs	r3, r2, r3
 8016192:	0fda      	lsrs	r2, r3, #31
 8016194:	4413      	add	r3, r2
 8016196:	105b      	asrs	r3, r3, #1
 8016198:	b29a      	uxth	r2, r3
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801619e:	bf00      	nop
 80161a0:	3710      	adds	r7, #16
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}
	...

080161a8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b084      	sub	sp, #16
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
 80161b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161b6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	2200      	movs	r2, #0
 80161bc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2200      	movs	r2, #0
 80161c2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80161c4:	4b26      	ldr	r3, [pc, #152]	@ (8016260 <dhcp_handle_ack+0xb8>)
 80161c6:	78db      	ldrb	r3, [r3, #3]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d003      	beq.n	80161d4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80161cc:	4b25      	ldr	r3, [pc, #148]	@ (8016264 <dhcp_handle_ack+0xbc>)
 80161ce:	68da      	ldr	r2, [r3, #12]
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80161d4:	4b22      	ldr	r3, [pc, #136]	@ (8016260 <dhcp_handle_ack+0xb8>)
 80161d6:	791b      	ldrb	r3, [r3, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d004      	beq.n	80161e6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80161dc:	4b21      	ldr	r3, [pc, #132]	@ (8016264 <dhcp_handle_ack+0xbc>)
 80161de:	691a      	ldr	r2, [r3, #16]
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80161e4:	e004      	b.n	80161f0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161ea:	085a      	lsrs	r2, r3, #1
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80161f0:	4b1b      	ldr	r3, [pc, #108]	@ (8016260 <dhcp_handle_ack+0xb8>)
 80161f2:	795b      	ldrb	r3, [r3, #5]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d004      	beq.n	8016202 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80161f8:	4b1a      	ldr	r3, [pc, #104]	@ (8016264 <dhcp_handle_ack+0xbc>)
 80161fa:	695a      	ldr	r2, [r3, #20]
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8016200:	e007      	b.n	8016212 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016206:	4613      	mov	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	1a9b      	subs	r3, r3, r2
 801620c:	08da      	lsrs	r2, r3, #3
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016212:	683b      	ldr	r3, [r7, #0]
 8016214:	691a      	ldr	r2, [r3, #16]
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801621a:	4b11      	ldr	r3, [pc, #68]	@ (8016260 <dhcp_handle_ack+0xb8>)
 801621c:	799b      	ldrb	r3, [r3, #6]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d00b      	beq.n	801623a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016222:	4b10      	ldr	r3, [pc, #64]	@ (8016264 <dhcp_handle_ack+0xbc>)
 8016224:	699b      	ldr	r3, [r3, #24]
 8016226:	4618      	mov	r0, r3
 8016228:	f7f7 fbbf 	bl	800d9aa <lwip_htonl>
 801622c:	4602      	mov	r2, r0
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	2201      	movs	r2, #1
 8016236:	71da      	strb	r2, [r3, #7]
 8016238:	e002      	b.n	8016240 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	2200      	movs	r2, #0
 801623e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016240:	4b07      	ldr	r3, [pc, #28]	@ (8016260 <dhcp_handle_ack+0xb8>)
 8016242:	79db      	ldrb	r3, [r3, #7]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d007      	beq.n	8016258 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016248:	4b06      	ldr	r3, [pc, #24]	@ (8016264 <dhcp_handle_ack+0xbc>)
 801624a:	69db      	ldr	r3, [r3, #28]
 801624c:	4618      	mov	r0, r3
 801624e:	f7f7 fbac 	bl	800d9aa <lwip_htonl>
 8016252:	4602      	mov	r2, r0
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016258:	bf00      	nop
 801625a:	3710      	adds	r7, #16
 801625c:	46bd      	mov	sp, r7
 801625e:	bd80      	pop	{r7, pc}
 8016260:	20013df4 	.word	0x20013df4
 8016264:	20013dd4 	.word	0x20013dd4

08016268 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b084      	sub	sp, #16
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d109      	bne.n	801628a <dhcp_start+0x22>
 8016276:	4b37      	ldr	r3, [pc, #220]	@ (8016354 <dhcp_start+0xec>)
 8016278:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801627c:	4936      	ldr	r1, [pc, #216]	@ (8016358 <dhcp_start+0xf0>)
 801627e:	4837      	ldr	r0, [pc, #220]	@ (801635c <dhcp_start+0xf4>)
 8016280:	f004 fede 	bl	801b040 <iprintf>
 8016284:	f06f 030f 	mvn.w	r3, #15
 8016288:	e060      	b.n	801634c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016290:	f003 0301 	and.w	r3, r3, #1
 8016294:	2b00      	cmp	r3, #0
 8016296:	d109      	bne.n	80162ac <dhcp_start+0x44>
 8016298:	4b2e      	ldr	r3, [pc, #184]	@ (8016354 <dhcp_start+0xec>)
 801629a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801629e:	4930      	ldr	r1, [pc, #192]	@ (8016360 <dhcp_start+0xf8>)
 80162a0:	482e      	ldr	r0, [pc, #184]	@ (801635c <dhcp_start+0xf4>)
 80162a2:	f004 fecd 	bl	801b040 <iprintf>
 80162a6:	f06f 030f 	mvn.w	r3, #15
 80162aa:	e04f      	b.n	801634c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80162b6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80162ba:	d202      	bcs.n	80162c2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80162bc:	f04f 33ff 	mov.w	r3, #4294967295
 80162c0:	e044      	b.n	801634c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d10d      	bne.n	80162e4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80162c8:	2034      	movs	r0, #52	@ 0x34
 80162ca:	f7f8 f805 	bl	800e2d8 <mem_malloc>
 80162ce:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d102      	bne.n	80162dc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80162d6:	f04f 33ff 	mov.w	r3, #4294967295
 80162da:	e037      	b.n	801634c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80162e2:	e005      	b.n	80162f0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	791b      	ldrb	r3, [r3, #4]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d001      	beq.n	80162f0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80162ec:	f7ff fc92 	bl	8015c14 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80162f0:	2234      	movs	r2, #52	@ 0x34
 80162f2:	2100      	movs	r1, #0
 80162f4:	68f8      	ldr	r0, [r7, #12]
 80162f6:	f005 f805 	bl	801b304 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80162fa:	f7ff fc39 	bl	8015b70 <dhcp_inc_pcb_refcount>
 80162fe:	4603      	mov	r3, r0
 8016300:	2b00      	cmp	r3, #0
 8016302:	d002      	beq.n	801630a <dhcp_start+0xa2>
    return ERR_MEM;
 8016304:	f04f 33ff 	mov.w	r3, #4294967295
 8016308:	e020      	b.n	801634c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	2201      	movs	r2, #1
 801630e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016316:	f003 0304 	and.w	r3, r3, #4
 801631a:	2b00      	cmp	r3, #0
 801631c:	d105      	bne.n	801632a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801631e:	2102      	movs	r1, #2
 8016320:	68f8      	ldr	r0, [r7, #12]
 8016322:	f000 fd06 	bl	8016d32 <dhcp_set_state>
    return ERR_OK;
 8016326:	2300      	movs	r3, #0
 8016328:	e010      	b.n	801634c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801632a:	6878      	ldr	r0, [r7, #4]
 801632c:	f000 f8f8 	bl	8016520 <dhcp_discover>
 8016330:	4603      	mov	r3, r0
 8016332:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016334:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d005      	beq.n	8016348 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f000 fc53 	bl	8016be8 <dhcp_release_and_stop>
    return ERR_MEM;
 8016342:	f04f 33ff 	mov.w	r3, #4294967295
 8016346:	e001      	b.n	801634c <dhcp_start+0xe4>
  }
  return result;
 8016348:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}
 8016354:	0801fdf0 	.word	0x0801fdf0
 8016358:	0801fed4 	.word	0x0801fed4
 801635c:	0801fe50 	.word	0x0801fe50
 8016360:	0801ff18 	.word	0x0801ff18

08016364 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b084      	sub	sp, #16
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016370:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d025      	beq.n	80163c4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	795b      	ldrb	r3, [r3, #5]
 801637c:	2b0a      	cmp	r3, #10
 801637e:	d008      	beq.n	8016392 <dhcp_network_changed+0x2e>
 8016380:	2b0a      	cmp	r3, #10
 8016382:	dc0d      	bgt.n	80163a0 <dhcp_network_changed+0x3c>
 8016384:	2b00      	cmp	r3, #0
 8016386:	d01f      	beq.n	80163c8 <dhcp_network_changed+0x64>
 8016388:	2b00      	cmp	r3, #0
 801638a:	db09      	blt.n	80163a0 <dhcp_network_changed+0x3c>
 801638c:	3b03      	subs	r3, #3
 801638e:	2b02      	cmp	r3, #2
 8016390:	d806      	bhi.n	80163a0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	2200      	movs	r2, #0
 8016396:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fb71 	bl	8016a80 <dhcp_reboot>
      break;
 801639e:	e014      	b.n	80163ca <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	795b      	ldrb	r3, [r3, #5]
 80163a4:	2b0c      	cmp	r3, #12
 80163a6:	d906      	bls.n	80163b6 <dhcp_network_changed+0x52>
 80163a8:	4b09      	ldr	r3, [pc, #36]	@ (80163d0 <dhcp_network_changed+0x6c>)
 80163aa:	f240 326d 	movw	r2, #877	@ 0x36d
 80163ae:	4909      	ldr	r1, [pc, #36]	@ (80163d4 <dhcp_network_changed+0x70>)
 80163b0:	4809      	ldr	r0, [pc, #36]	@ (80163d8 <dhcp_network_changed+0x74>)
 80163b2:	f004 fe45 	bl	801b040 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2200      	movs	r2, #0
 80163ba:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 f8af 	bl	8016520 <dhcp_discover>
      break;
 80163c2:	e002      	b.n	80163ca <dhcp_network_changed+0x66>
    return;
 80163c4:	bf00      	nop
 80163c6:	e000      	b.n	80163ca <dhcp_network_changed+0x66>
      break;
 80163c8:	bf00      	nop
  }
}
 80163ca:	3710      	adds	r7, #16
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	0801fdf0 	.word	0x0801fdf0
 80163d4:	0801ff3c 	.word	0x0801ff3c
 80163d8:	0801fe50 	.word	0x0801fe50

080163dc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d107      	bne.n	80163fc <dhcp_arp_reply+0x20>
 80163ec:	4b0e      	ldr	r3, [pc, #56]	@ (8016428 <dhcp_arp_reply+0x4c>)
 80163ee:	f240 328b 	movw	r2, #907	@ 0x38b
 80163f2:	490e      	ldr	r1, [pc, #56]	@ (801642c <dhcp_arp_reply+0x50>)
 80163f4:	480e      	ldr	r0, [pc, #56]	@ (8016430 <dhcp_arp_reply+0x54>)
 80163f6:	f004 fe23 	bl	801b040 <iprintf>
 80163fa:	e012      	b.n	8016422 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016400:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d00c      	beq.n	8016422 <dhcp_arp_reply+0x46>
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	795b      	ldrb	r3, [r3, #5]
 801640c:	2b08      	cmp	r3, #8
 801640e:	d108      	bne.n	8016422 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	681a      	ldr	r2, [r3, #0]
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	69db      	ldr	r3, [r3, #28]
 8016418:	429a      	cmp	r2, r3
 801641a:	d102      	bne.n	8016422 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f000 f809 	bl	8016434 <dhcp_decline>
    }
  }
}
 8016422:	3710      	adds	r7, #16
 8016424:	46bd      	mov	sp, r7
 8016426:	bd80      	pop	{r7, pc}
 8016428:	0801fdf0 	.word	0x0801fdf0
 801642c:	0801fed4 	.word	0x0801fed4
 8016430:	0801fe50 	.word	0x0801fe50

08016434 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016434:	b5b0      	push	{r4, r5, r7, lr}
 8016436:	b08a      	sub	sp, #40	@ 0x28
 8016438:	af02      	add	r7, sp, #8
 801643a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016440:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016442:	210c      	movs	r1, #12
 8016444:	69b8      	ldr	r0, [r7, #24]
 8016446:	f000 fc74 	bl	8016d32 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801644a:	f107 030c 	add.w	r3, r7, #12
 801644e:	2204      	movs	r2, #4
 8016450:	69b9      	ldr	r1, [r7, #24]
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f001 f906 	bl	8017664 <dhcp_create_msg>
 8016458:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801645a:	697b      	ldr	r3, [r7, #20]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d035      	beq.n	80164cc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016466:	89b8      	ldrh	r0, [r7, #12]
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801646e:	2304      	movs	r3, #4
 8016470:	2232      	movs	r2, #50	@ 0x32
 8016472:	f000 fc79 	bl	8016d68 <dhcp_option>
 8016476:	4603      	mov	r3, r0
 8016478:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801647a:	89bc      	ldrh	r4, [r7, #12]
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016482:	69bb      	ldr	r3, [r7, #24]
 8016484:	69db      	ldr	r3, [r3, #28]
 8016486:	4618      	mov	r0, r3
 8016488:	f7f7 fa8f 	bl	800d9aa <lwip_htonl>
 801648c:	4603      	mov	r3, r0
 801648e:	461a      	mov	r2, r3
 8016490:	4629      	mov	r1, r5
 8016492:	4620      	mov	r0, r4
 8016494:	f000 fcf4 	bl	8016e80 <dhcp_option_long>
 8016498:	4603      	mov	r3, r0
 801649a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801649c:	89b8      	ldrh	r0, [r7, #12]
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	33f0      	adds	r3, #240	@ 0xf0
 80164a2:	697a      	ldr	r2, [r7, #20]
 80164a4:	4619      	mov	r1, r3
 80164a6:	f001 f9b3 	bl	8017810 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80164aa:	4b19      	ldr	r3, [pc, #100]	@ (8016510 <dhcp_decline+0xdc>)
 80164ac:	6818      	ldr	r0, [r3, #0]
 80164ae:	4b19      	ldr	r3, [pc, #100]	@ (8016514 <dhcp_decline+0xe0>)
 80164b0:	9301      	str	r3, [sp, #4]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	9300      	str	r3, [sp, #0]
 80164b6:	2343      	movs	r3, #67	@ 0x43
 80164b8:	4a17      	ldr	r2, [pc, #92]	@ (8016518 <dhcp_decline+0xe4>)
 80164ba:	6979      	ldr	r1, [r7, #20]
 80164bc:	f7ff f890 	bl	80155e0 <udp_sendto_if_src>
 80164c0:	4603      	mov	r3, r0
 80164c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80164c4:	6978      	ldr	r0, [r7, #20]
 80164c6:	f7f8 ff7d 	bl	800f3c4 <pbuf_free>
 80164ca:	e001      	b.n	80164d0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80164cc:	23ff      	movs	r3, #255	@ 0xff
 80164ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80164d0:	69bb      	ldr	r3, [r7, #24]
 80164d2:	799b      	ldrb	r3, [r3, #6]
 80164d4:	2bff      	cmp	r3, #255	@ 0xff
 80164d6:	d005      	beq.n	80164e4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80164d8:	69bb      	ldr	r3, [r7, #24]
 80164da:	799b      	ldrb	r3, [r3, #6]
 80164dc:	3301      	adds	r3, #1
 80164de:	b2da      	uxtb	r2, r3
 80164e0:	69bb      	ldr	r3, [r7, #24]
 80164e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80164e4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80164e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80164ea:	89fb      	ldrh	r3, [r7, #14]
 80164ec:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80164f0:	4a0a      	ldr	r2, [pc, #40]	@ (801651c <dhcp_decline+0xe8>)
 80164f2:	fb82 1203 	smull	r1, r2, r2, r3
 80164f6:	1152      	asrs	r2, r2, #5
 80164f8:	17db      	asrs	r3, r3, #31
 80164fa:	1ad3      	subs	r3, r2, r3
 80164fc:	b29a      	uxth	r2, r3
 80164fe:	69bb      	ldr	r3, [r7, #24]
 8016500:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016502:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016506:	4618      	mov	r0, r3
 8016508:	3720      	adds	r7, #32
 801650a:	46bd      	mov	sp, r7
 801650c:	bdb0      	pop	{r4, r5, r7, pc}
 801650e:	bf00      	nop
 8016510:	20013dfc 	.word	0x20013dfc
 8016514:	0806c648 	.word	0x0806c648
 8016518:	0806c64c 	.word	0x0806c64c
 801651c:	10624dd3 	.word	0x10624dd3

08016520 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b08a      	sub	sp, #40	@ 0x28
 8016524:	af02      	add	r7, sp, #8
 8016526:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801652c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801652e:	2300      	movs	r3, #0
 8016530:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016532:	69bb      	ldr	r3, [r7, #24]
 8016534:	2200      	movs	r2, #0
 8016536:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8016538:	2106      	movs	r1, #6
 801653a:	69b8      	ldr	r0, [r7, #24]
 801653c:	f000 fbf9 	bl	8016d32 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016540:	f107 0308 	add.w	r3, r7, #8
 8016544:	2201      	movs	r2, #1
 8016546:	69b9      	ldr	r1, [r7, #24]
 8016548:	6878      	ldr	r0, [r7, #4]
 801654a:	f001 f88b 	bl	8017664 <dhcp_create_msg>
 801654e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016550:	693b      	ldr	r3, [r7, #16]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d04b      	beq.n	80165ee <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801655c:	8938      	ldrh	r0, [r7, #8]
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016564:	2302      	movs	r3, #2
 8016566:	2239      	movs	r2, #57	@ 0x39
 8016568:	f000 fbfe 	bl	8016d68 <dhcp_option>
 801656c:	4603      	mov	r3, r0
 801656e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016570:	8938      	ldrh	r0, [r7, #8]
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801657c:	461a      	mov	r2, r3
 801657e:	f000 fc4d 	bl	8016e1c <dhcp_option_short>
 8016582:	4603      	mov	r3, r0
 8016584:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016586:	8938      	ldrh	r0, [r7, #8]
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801658e:	2303      	movs	r3, #3
 8016590:	2237      	movs	r2, #55	@ 0x37
 8016592:	f000 fbe9 	bl	8016d68 <dhcp_option>
 8016596:	4603      	mov	r3, r0
 8016598:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801659a:	2300      	movs	r3, #0
 801659c:	77fb      	strb	r3, [r7, #31]
 801659e:	e00e      	b.n	80165be <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80165a0:	8938      	ldrh	r0, [r7, #8]
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80165a8:	7ffb      	ldrb	r3, [r7, #31]
 80165aa:	4a29      	ldr	r2, [pc, #164]	@ (8016650 <dhcp_discover+0x130>)
 80165ac:	5cd3      	ldrb	r3, [r2, r3]
 80165ae:	461a      	mov	r2, r3
 80165b0:	f000 fc0e 	bl	8016dd0 <dhcp_option_byte>
 80165b4:	4603      	mov	r3, r0
 80165b6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80165b8:	7ffb      	ldrb	r3, [r7, #31]
 80165ba:	3301      	adds	r3, #1
 80165bc:	77fb      	strb	r3, [r7, #31]
 80165be:	7ffb      	ldrb	r3, [r7, #31]
 80165c0:	2b02      	cmp	r3, #2
 80165c2:	d9ed      	bls.n	80165a0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80165c4:	8938      	ldrh	r0, [r7, #8]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	33f0      	adds	r3, #240	@ 0xf0
 80165ca:	693a      	ldr	r2, [r7, #16]
 80165cc:	4619      	mov	r1, r3
 80165ce:	f001 f91f 	bl	8017810 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80165d2:	4b20      	ldr	r3, [pc, #128]	@ (8016654 <dhcp_discover+0x134>)
 80165d4:	6818      	ldr	r0, [r3, #0]
 80165d6:	4b20      	ldr	r3, [pc, #128]	@ (8016658 <dhcp_discover+0x138>)
 80165d8:	9301      	str	r3, [sp, #4]
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	9300      	str	r3, [sp, #0]
 80165de:	2343      	movs	r3, #67	@ 0x43
 80165e0:	4a1e      	ldr	r2, [pc, #120]	@ (801665c <dhcp_discover+0x13c>)
 80165e2:	6939      	ldr	r1, [r7, #16]
 80165e4:	f7fe fffc 	bl	80155e0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80165e8:	6938      	ldr	r0, [r7, #16]
 80165ea:	f7f8 feeb 	bl	800f3c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80165ee:	69bb      	ldr	r3, [r7, #24]
 80165f0:	799b      	ldrb	r3, [r3, #6]
 80165f2:	2bff      	cmp	r3, #255	@ 0xff
 80165f4:	d005      	beq.n	8016602 <dhcp_discover+0xe2>
    dhcp->tries++;
 80165f6:	69bb      	ldr	r3, [r7, #24]
 80165f8:	799b      	ldrb	r3, [r3, #6]
 80165fa:	3301      	adds	r3, #1
 80165fc:	b2da      	uxtb	r2, r3
 80165fe:	69bb      	ldr	r3, [r7, #24]
 8016600:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016602:	69bb      	ldr	r3, [r7, #24]
 8016604:	799b      	ldrb	r3, [r3, #6]
 8016606:	2b05      	cmp	r3, #5
 8016608:	d80d      	bhi.n	8016626 <dhcp_discover+0x106>
 801660a:	69bb      	ldr	r3, [r7, #24]
 801660c:	799b      	ldrb	r3, [r3, #6]
 801660e:	461a      	mov	r2, r3
 8016610:	2301      	movs	r3, #1
 8016612:	4093      	lsls	r3, r2
 8016614:	b29b      	uxth	r3, r3
 8016616:	461a      	mov	r2, r3
 8016618:	0152      	lsls	r2, r2, #5
 801661a:	1ad2      	subs	r2, r2, r3
 801661c:	0092      	lsls	r2, r2, #2
 801661e:	4413      	add	r3, r2
 8016620:	00db      	lsls	r3, r3, #3
 8016622:	b29b      	uxth	r3, r3
 8016624:	e001      	b.n	801662a <dhcp_discover+0x10a>
 8016626:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801662a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801662c:	897b      	ldrh	r3, [r7, #10]
 801662e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016632:	4a0b      	ldr	r2, [pc, #44]	@ (8016660 <dhcp_discover+0x140>)
 8016634:	fb82 1203 	smull	r1, r2, r2, r3
 8016638:	1152      	asrs	r2, r2, #5
 801663a:	17db      	asrs	r3, r3, #31
 801663c:	1ad3      	subs	r3, r2, r3
 801663e:	b29a      	uxth	r2, r3
 8016640:	69bb      	ldr	r3, [r7, #24]
 8016642:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016648:	4618      	mov	r0, r3
 801664a:	3720      	adds	r7, #32
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}
 8016650:	200000bc 	.word	0x200000bc
 8016654:	20013dfc 	.word	0x20013dfc
 8016658:	0806c648 	.word	0x0806c648
 801665c:	0806c64c 	.word	0x0806c64c
 8016660:	10624dd3 	.word	0x10624dd3

08016664 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b088      	sub	sp, #32
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d107      	bne.n	8016682 <dhcp_bind+0x1e>
 8016672:	4b64      	ldr	r3, [pc, #400]	@ (8016804 <dhcp_bind+0x1a0>)
 8016674:	f240 4215 	movw	r2, #1045	@ 0x415
 8016678:	4963      	ldr	r1, [pc, #396]	@ (8016808 <dhcp_bind+0x1a4>)
 801667a:	4864      	ldr	r0, [pc, #400]	@ (801680c <dhcp_bind+0x1a8>)
 801667c:	f004 fce0 	bl	801b040 <iprintf>
 8016680:	e0bc      	b.n	80167fc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016686:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016688:	69fb      	ldr	r3, [r7, #28]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d107      	bne.n	801669e <dhcp_bind+0x3a>
 801668e:	4b5d      	ldr	r3, [pc, #372]	@ (8016804 <dhcp_bind+0x1a0>)
 8016690:	f240 4217 	movw	r2, #1047	@ 0x417
 8016694:	495e      	ldr	r1, [pc, #376]	@ (8016810 <dhcp_bind+0x1ac>)
 8016696:	485d      	ldr	r0, [pc, #372]	@ (801680c <dhcp_bind+0x1a8>)
 8016698:	f004 fcd2 	bl	801b040 <iprintf>
 801669c:	e0ae      	b.n	80167fc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801669e:	69fb      	ldr	r3, [r7, #28]
 80166a0:	2200      	movs	r2, #0
 80166a2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80166a4:	69fb      	ldr	r3, [r7, #28]
 80166a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ac:	d019      	beq.n	80166e2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80166ae:	69fb      	ldr	r3, [r7, #28]
 80166b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166b2:	331e      	adds	r3, #30
 80166b4:	4a57      	ldr	r2, [pc, #348]	@ (8016814 <dhcp_bind+0x1b0>)
 80166b6:	fba2 2303 	umull	r2, r3, r2, r3
 80166ba:	095b      	lsrs	r3, r3, #5
 80166bc:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80166be:	69bb      	ldr	r3, [r7, #24]
 80166c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80166c4:	d302      	bcc.n	80166cc <dhcp_bind+0x68>
      timeout = 0xffff;
 80166c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80166ca:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	b29a      	uxth	r2, r3
 80166d0:	69fb      	ldr	r3, [r7, #28]
 80166d2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80166d4:	69fb      	ldr	r3, [r7, #28]
 80166d6:	8a9b      	ldrh	r3, [r3, #20]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d102      	bne.n	80166e2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	2201      	movs	r2, #1
 80166e0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80166e2:	69fb      	ldr	r3, [r7, #28]
 80166e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166ea:	d01d      	beq.n	8016728 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80166ec:	69fb      	ldr	r3, [r7, #28]
 80166ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166f0:	331e      	adds	r3, #30
 80166f2:	4a48      	ldr	r2, [pc, #288]	@ (8016814 <dhcp_bind+0x1b0>)
 80166f4:	fba2 2303 	umull	r2, r3, r2, r3
 80166f8:	095b      	lsrs	r3, r3, #5
 80166fa:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016702:	d302      	bcc.n	801670a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016708:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	b29a      	uxth	r2, r3
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016712:	69fb      	ldr	r3, [r7, #28]
 8016714:	895b      	ldrh	r3, [r3, #10]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d102      	bne.n	8016720 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	2201      	movs	r2, #1
 801671e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	895a      	ldrh	r2, [r3, #10]
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016730:	d01d      	beq.n	801676e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016736:	331e      	adds	r3, #30
 8016738:	4a36      	ldr	r2, [pc, #216]	@ (8016814 <dhcp_bind+0x1b0>)
 801673a:	fba2 2303 	umull	r2, r3, r2, r3
 801673e:	095b      	lsrs	r3, r3, #5
 8016740:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016742:	69bb      	ldr	r3, [r7, #24]
 8016744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016748:	d302      	bcc.n	8016750 <dhcp_bind+0xec>
      timeout = 0xffff;
 801674a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801674e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016750:	69bb      	ldr	r3, [r7, #24]
 8016752:	b29a      	uxth	r2, r3
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	899b      	ldrh	r3, [r3, #12]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d102      	bne.n	8016766 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	2201      	movs	r2, #1
 8016764:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016766:	69fb      	ldr	r3, [r7, #28]
 8016768:	899a      	ldrh	r2, [r3, #12]
 801676a:	69fb      	ldr	r3, [r7, #28]
 801676c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801676e:	69fb      	ldr	r3, [r7, #28]
 8016770:	895a      	ldrh	r2, [r3, #10]
 8016772:	69fb      	ldr	r3, [r7, #28]
 8016774:	899b      	ldrh	r3, [r3, #12]
 8016776:	429a      	cmp	r2, r3
 8016778:	d306      	bcc.n	8016788 <dhcp_bind+0x124>
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	899b      	ldrh	r3, [r3, #12]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d002      	beq.n	8016788 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8016782:	69fb      	ldr	r3, [r7, #28]
 8016784:	2200      	movs	r2, #0
 8016786:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016788:	69fb      	ldr	r3, [r7, #28]
 801678a:	79db      	ldrb	r3, [r3, #7]
 801678c:	2b00      	cmp	r3, #0
 801678e:	d003      	beq.n	8016798 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016790:	69fb      	ldr	r3, [r7, #28]
 8016792:	6a1b      	ldr	r3, [r3, #32]
 8016794:	613b      	str	r3, [r7, #16]
 8016796:	e014      	b.n	80167c2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	331c      	adds	r3, #28
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80167a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	db02      	blt.n	80167ae <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80167a8:	23ff      	movs	r3, #255	@ 0xff
 80167aa:	613b      	str	r3, [r7, #16]
 80167ac:	e009      	b.n	80167c2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80167ae:	7dfb      	ldrb	r3, [r7, #23]
 80167b0:	2bbf      	cmp	r3, #191	@ 0xbf
 80167b2:	d903      	bls.n	80167bc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80167b4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80167b8:	613b      	str	r3, [r7, #16]
 80167ba:	e002      	b.n	80167c2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80167bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80167c0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80167c2:	69fb      	ldr	r3, [r7, #28]
 80167c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167c6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d108      	bne.n	80167e0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	69da      	ldr	r2, [r3, #28]
 80167d2:	693b      	ldr	r3, [r7, #16]
 80167d4:	4013      	ands	r3, r2
 80167d6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80167de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80167e0:	210a      	movs	r1, #10
 80167e2:	69f8      	ldr	r0, [r7, #28]
 80167e4:	f000 faa5 	bl	8016d32 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	f103 011c 	add.w	r1, r3, #28
 80167ee:	f107 030c 	add.w	r3, r7, #12
 80167f2:	f107 0210 	add.w	r2, r7, #16
 80167f6:	6878      	ldr	r0, [r7, #4]
 80167f8:	f7f8 f8e4 	bl	800e9c4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80167fc:	3720      	adds	r7, #32
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
 8016802:	bf00      	nop
 8016804:	0801fdf0 	.word	0x0801fdf0
 8016808:	0801ff50 	.word	0x0801ff50
 801680c:	0801fe50 	.word	0x0801fe50
 8016810:	0801ff6c 	.word	0x0801ff6c
 8016814:	88888889 	.word	0x88888889

08016818 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b08a      	sub	sp, #40	@ 0x28
 801681c:	af02      	add	r7, sp, #8
 801681e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016824:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016826:	2105      	movs	r1, #5
 8016828:	69b8      	ldr	r0, [r7, #24]
 801682a:	f000 fa82 	bl	8016d32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801682e:	f107 030c 	add.w	r3, r7, #12
 8016832:	2203      	movs	r2, #3
 8016834:	69b9      	ldr	r1, [r7, #24]
 8016836:	6878      	ldr	r0, [r7, #4]
 8016838:	f000 ff14 	bl	8017664 <dhcp_create_msg>
 801683c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d04e      	beq.n	80168e2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	685b      	ldr	r3, [r3, #4]
 8016848:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801684a:	89b8      	ldrh	r0, [r7, #12]
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016852:	2302      	movs	r3, #2
 8016854:	2239      	movs	r2, #57	@ 0x39
 8016856:	f000 fa87 	bl	8016d68 <dhcp_option>
 801685a:	4603      	mov	r3, r0
 801685c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801685e:	89b8      	ldrh	r0, [r7, #12]
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801686a:	461a      	mov	r2, r3
 801686c:	f000 fad6 	bl	8016e1c <dhcp_option_short>
 8016870:	4603      	mov	r3, r0
 8016872:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016874:	89b8      	ldrh	r0, [r7, #12]
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801687c:	2303      	movs	r3, #3
 801687e:	2237      	movs	r2, #55	@ 0x37
 8016880:	f000 fa72 	bl	8016d68 <dhcp_option>
 8016884:	4603      	mov	r3, r0
 8016886:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016888:	2300      	movs	r3, #0
 801688a:	77bb      	strb	r3, [r7, #30]
 801688c:	e00e      	b.n	80168ac <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801688e:	89b8      	ldrh	r0, [r7, #12]
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016896:	7fbb      	ldrb	r3, [r7, #30]
 8016898:	4a29      	ldr	r2, [pc, #164]	@ (8016940 <dhcp_renew+0x128>)
 801689a:	5cd3      	ldrb	r3, [r2, r3]
 801689c:	461a      	mov	r2, r3
 801689e:	f000 fa97 	bl	8016dd0 <dhcp_option_byte>
 80168a2:	4603      	mov	r3, r0
 80168a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168a6:	7fbb      	ldrb	r3, [r7, #30]
 80168a8:	3301      	adds	r3, #1
 80168aa:	77bb      	strb	r3, [r7, #30]
 80168ac:	7fbb      	ldrb	r3, [r7, #30]
 80168ae:	2b02      	cmp	r3, #2
 80168b0:	d9ed      	bls.n	801688e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80168b2:	89b8      	ldrh	r0, [r7, #12]
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	33f0      	adds	r3, #240	@ 0xf0
 80168b8:	697a      	ldr	r2, [r7, #20]
 80168ba:	4619      	mov	r1, r3
 80168bc:	f000 ffa8 	bl	8017810 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80168c0:	4b20      	ldr	r3, [pc, #128]	@ (8016944 <dhcp_renew+0x12c>)
 80168c2:	6818      	ldr	r0, [r3, #0]
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	f103 0218 	add.w	r2, r3, #24
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	9300      	str	r3, [sp, #0]
 80168ce:	2343      	movs	r3, #67	@ 0x43
 80168d0:	6979      	ldr	r1, [r7, #20]
 80168d2:	f7fe fe11 	bl	80154f8 <udp_sendto_if>
 80168d6:	4603      	mov	r3, r0
 80168d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80168da:	6978      	ldr	r0, [r7, #20]
 80168dc:	f7f8 fd72 	bl	800f3c4 <pbuf_free>
 80168e0:	e001      	b.n	80168e6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80168e2:	23ff      	movs	r3, #255	@ 0xff
 80168e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80168e6:	69bb      	ldr	r3, [r7, #24]
 80168e8:	799b      	ldrb	r3, [r3, #6]
 80168ea:	2bff      	cmp	r3, #255	@ 0xff
 80168ec:	d005      	beq.n	80168fa <dhcp_renew+0xe2>
    dhcp->tries++;
 80168ee:	69bb      	ldr	r3, [r7, #24]
 80168f0:	799b      	ldrb	r3, [r3, #6]
 80168f2:	3301      	adds	r3, #1
 80168f4:	b2da      	uxtb	r2, r3
 80168f6:	69bb      	ldr	r3, [r7, #24]
 80168f8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80168fa:	69bb      	ldr	r3, [r7, #24]
 80168fc:	799b      	ldrb	r3, [r3, #6]
 80168fe:	2b09      	cmp	r3, #9
 8016900:	d809      	bhi.n	8016916 <dhcp_renew+0xfe>
 8016902:	69bb      	ldr	r3, [r7, #24]
 8016904:	799b      	ldrb	r3, [r3, #6]
 8016906:	461a      	mov	r2, r3
 8016908:	0152      	lsls	r2, r2, #5
 801690a:	1ad2      	subs	r2, r2, r3
 801690c:	0092      	lsls	r2, r2, #2
 801690e:	4413      	add	r3, r2
 8016910:	011b      	lsls	r3, r3, #4
 8016912:	b29b      	uxth	r3, r3
 8016914:	e001      	b.n	801691a <dhcp_renew+0x102>
 8016916:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801691a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801691c:	89fb      	ldrh	r3, [r7, #14]
 801691e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016922:	4a09      	ldr	r2, [pc, #36]	@ (8016948 <dhcp_renew+0x130>)
 8016924:	fb82 1203 	smull	r1, r2, r2, r3
 8016928:	1152      	asrs	r2, r2, #5
 801692a:	17db      	asrs	r3, r3, #31
 801692c:	1ad3      	subs	r3, r2, r3
 801692e:	b29a      	uxth	r2, r3
 8016930:	69bb      	ldr	r3, [r7, #24]
 8016932:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016934:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016938:	4618      	mov	r0, r3
 801693a:	3720      	adds	r7, #32
 801693c:	46bd      	mov	sp, r7
 801693e:	bd80      	pop	{r7, pc}
 8016940:	200000bc 	.word	0x200000bc
 8016944:	20013dfc 	.word	0x20013dfc
 8016948:	10624dd3 	.word	0x10624dd3

0801694c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b08a      	sub	sp, #40	@ 0x28
 8016950:	af02      	add	r7, sp, #8
 8016952:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016958:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801695a:	2104      	movs	r1, #4
 801695c:	69b8      	ldr	r0, [r7, #24]
 801695e:	f000 f9e8 	bl	8016d32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016962:	f107 030c 	add.w	r3, r7, #12
 8016966:	2203      	movs	r2, #3
 8016968:	69b9      	ldr	r1, [r7, #24]
 801696a:	6878      	ldr	r0, [r7, #4]
 801696c:	f000 fe7a 	bl	8017664 <dhcp_create_msg>
 8016970:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016972:	697b      	ldr	r3, [r7, #20]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d04c      	beq.n	8016a12 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	685b      	ldr	r3, [r3, #4]
 801697c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801697e:	89b8      	ldrh	r0, [r7, #12]
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016986:	2302      	movs	r3, #2
 8016988:	2239      	movs	r2, #57	@ 0x39
 801698a:	f000 f9ed 	bl	8016d68 <dhcp_option>
 801698e:	4603      	mov	r3, r0
 8016990:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016992:	89b8      	ldrh	r0, [r7, #12]
 8016994:	693b      	ldr	r3, [r7, #16]
 8016996:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801699e:	461a      	mov	r2, r3
 80169a0:	f000 fa3c 	bl	8016e1c <dhcp_option_short>
 80169a4:	4603      	mov	r3, r0
 80169a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80169a8:	89b8      	ldrh	r0, [r7, #12]
 80169aa:	693b      	ldr	r3, [r7, #16]
 80169ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80169b0:	2303      	movs	r3, #3
 80169b2:	2237      	movs	r2, #55	@ 0x37
 80169b4:	f000 f9d8 	bl	8016d68 <dhcp_option>
 80169b8:	4603      	mov	r3, r0
 80169ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169bc:	2300      	movs	r3, #0
 80169be:	77bb      	strb	r3, [r7, #30]
 80169c0:	e00e      	b.n	80169e0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80169c2:	89b8      	ldrh	r0, [r7, #12]
 80169c4:	693b      	ldr	r3, [r7, #16]
 80169c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80169ca:	7fbb      	ldrb	r3, [r7, #30]
 80169cc:	4a28      	ldr	r2, [pc, #160]	@ (8016a70 <dhcp_rebind+0x124>)
 80169ce:	5cd3      	ldrb	r3, [r2, r3]
 80169d0:	461a      	mov	r2, r3
 80169d2:	f000 f9fd 	bl	8016dd0 <dhcp_option_byte>
 80169d6:	4603      	mov	r3, r0
 80169d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169da:	7fbb      	ldrb	r3, [r7, #30]
 80169dc:	3301      	adds	r3, #1
 80169de:	77bb      	strb	r3, [r7, #30]
 80169e0:	7fbb      	ldrb	r3, [r7, #30]
 80169e2:	2b02      	cmp	r3, #2
 80169e4:	d9ed      	bls.n	80169c2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80169e6:	89b8      	ldrh	r0, [r7, #12]
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	33f0      	adds	r3, #240	@ 0xf0
 80169ec:	697a      	ldr	r2, [r7, #20]
 80169ee:	4619      	mov	r1, r3
 80169f0:	f000 ff0e 	bl	8017810 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80169f4:	4b1f      	ldr	r3, [pc, #124]	@ (8016a74 <dhcp_rebind+0x128>)
 80169f6:	6818      	ldr	r0, [r3, #0]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	9300      	str	r3, [sp, #0]
 80169fc:	2343      	movs	r3, #67	@ 0x43
 80169fe:	4a1e      	ldr	r2, [pc, #120]	@ (8016a78 <dhcp_rebind+0x12c>)
 8016a00:	6979      	ldr	r1, [r7, #20]
 8016a02:	f7fe fd79 	bl	80154f8 <udp_sendto_if>
 8016a06:	4603      	mov	r3, r0
 8016a08:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016a0a:	6978      	ldr	r0, [r7, #20]
 8016a0c:	f7f8 fcda 	bl	800f3c4 <pbuf_free>
 8016a10:	e001      	b.n	8016a16 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016a12:	23ff      	movs	r3, #255	@ 0xff
 8016a14:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016a16:	69bb      	ldr	r3, [r7, #24]
 8016a18:	799b      	ldrb	r3, [r3, #6]
 8016a1a:	2bff      	cmp	r3, #255	@ 0xff
 8016a1c:	d005      	beq.n	8016a2a <dhcp_rebind+0xde>
    dhcp->tries++;
 8016a1e:	69bb      	ldr	r3, [r7, #24]
 8016a20:	799b      	ldrb	r3, [r3, #6]
 8016a22:	3301      	adds	r3, #1
 8016a24:	b2da      	uxtb	r2, r3
 8016a26:	69bb      	ldr	r3, [r7, #24]
 8016a28:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016a2a:	69bb      	ldr	r3, [r7, #24]
 8016a2c:	799b      	ldrb	r3, [r3, #6]
 8016a2e:	2b09      	cmp	r3, #9
 8016a30:	d809      	bhi.n	8016a46 <dhcp_rebind+0xfa>
 8016a32:	69bb      	ldr	r3, [r7, #24]
 8016a34:	799b      	ldrb	r3, [r3, #6]
 8016a36:	461a      	mov	r2, r3
 8016a38:	0152      	lsls	r2, r2, #5
 8016a3a:	1ad2      	subs	r2, r2, r3
 8016a3c:	0092      	lsls	r2, r2, #2
 8016a3e:	4413      	add	r3, r2
 8016a40:	00db      	lsls	r3, r3, #3
 8016a42:	b29b      	uxth	r3, r3
 8016a44:	e001      	b.n	8016a4a <dhcp_rebind+0xfe>
 8016a46:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016a4a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a4c:	89fb      	ldrh	r3, [r7, #14]
 8016a4e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016a52:	4a0a      	ldr	r2, [pc, #40]	@ (8016a7c <dhcp_rebind+0x130>)
 8016a54:	fb82 1203 	smull	r1, r2, r2, r3
 8016a58:	1152      	asrs	r2, r2, #5
 8016a5a:	17db      	asrs	r3, r3, #31
 8016a5c:	1ad3      	subs	r3, r2, r3
 8016a5e:	b29a      	uxth	r2, r3
 8016a60:	69bb      	ldr	r3, [r7, #24]
 8016a62:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016a64:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3720      	adds	r7, #32
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	200000bc 	.word	0x200000bc
 8016a74:	20013dfc 	.word	0x20013dfc
 8016a78:	0806c64c 	.word	0x0806c64c
 8016a7c:	10624dd3 	.word	0x10624dd3

08016a80 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016a80:	b5b0      	push	{r4, r5, r7, lr}
 8016a82:	b08a      	sub	sp, #40	@ 0x28
 8016a84:	af02      	add	r7, sp, #8
 8016a86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a8c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016a8e:	2103      	movs	r1, #3
 8016a90:	69b8      	ldr	r0, [r7, #24]
 8016a92:	f000 f94e 	bl	8016d32 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016a96:	f107 030c 	add.w	r3, r7, #12
 8016a9a:	2203      	movs	r2, #3
 8016a9c:	69b9      	ldr	r1, [r7, #24]
 8016a9e:	6878      	ldr	r0, [r7, #4]
 8016aa0:	f000 fde0 	bl	8017664 <dhcp_create_msg>
 8016aa4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016aa6:	697b      	ldr	r3, [r7, #20]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d066      	beq.n	8016b7a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	685b      	ldr	r3, [r3, #4]
 8016ab0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016ab2:	89b8      	ldrh	r0, [r7, #12]
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016aba:	2302      	movs	r3, #2
 8016abc:	2239      	movs	r2, #57	@ 0x39
 8016abe:	f000 f953 	bl	8016d68 <dhcp_option>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016ac6:	89b8      	ldrh	r0, [r7, #12]
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	33f0      	adds	r3, #240	@ 0xf0
 8016acc:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	f000 f9a3 	bl	8016e1c <dhcp_option_short>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016ada:	89b8      	ldrh	r0, [r7, #12]
 8016adc:	693b      	ldr	r3, [r7, #16]
 8016ade:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016ae2:	2304      	movs	r3, #4
 8016ae4:	2232      	movs	r2, #50	@ 0x32
 8016ae6:	f000 f93f 	bl	8016d68 <dhcp_option>
 8016aea:	4603      	mov	r3, r0
 8016aec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016aee:	89bc      	ldrh	r4, [r7, #12]
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	69db      	ldr	r3, [r3, #28]
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7f6 ff55 	bl	800d9aa <lwip_htonl>
 8016b00:	4603      	mov	r3, r0
 8016b02:	461a      	mov	r2, r3
 8016b04:	4629      	mov	r1, r5
 8016b06:	4620      	mov	r0, r4
 8016b08:	f000 f9ba 	bl	8016e80 <dhcp_option_long>
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016b10:	89b8      	ldrh	r0, [r7, #12]
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b18:	2303      	movs	r3, #3
 8016b1a:	2237      	movs	r2, #55	@ 0x37
 8016b1c:	f000 f924 	bl	8016d68 <dhcp_option>
 8016b20:	4603      	mov	r3, r0
 8016b22:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b24:	2300      	movs	r3, #0
 8016b26:	77bb      	strb	r3, [r7, #30]
 8016b28:	e00e      	b.n	8016b48 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016b2a:	89b8      	ldrh	r0, [r7, #12]
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b32:	7fbb      	ldrb	r3, [r7, #30]
 8016b34:	4a28      	ldr	r2, [pc, #160]	@ (8016bd8 <dhcp_reboot+0x158>)
 8016b36:	5cd3      	ldrb	r3, [r2, r3]
 8016b38:	461a      	mov	r2, r3
 8016b3a:	f000 f949 	bl	8016dd0 <dhcp_option_byte>
 8016b3e:	4603      	mov	r3, r0
 8016b40:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b42:	7fbb      	ldrb	r3, [r7, #30]
 8016b44:	3301      	adds	r3, #1
 8016b46:	77bb      	strb	r3, [r7, #30]
 8016b48:	7fbb      	ldrb	r3, [r7, #30]
 8016b4a:	2b02      	cmp	r3, #2
 8016b4c:	d9ed      	bls.n	8016b2a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b4e:	89b8      	ldrh	r0, [r7, #12]
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	33f0      	adds	r3, #240	@ 0xf0
 8016b54:	697a      	ldr	r2, [r7, #20]
 8016b56:	4619      	mov	r1, r3
 8016b58:	f000 fe5a 	bl	8017810 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8016bdc <dhcp_reboot+0x15c>)
 8016b5e:	6818      	ldr	r0, [r3, #0]
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	9300      	str	r3, [sp, #0]
 8016b64:	2343      	movs	r3, #67	@ 0x43
 8016b66:	4a1e      	ldr	r2, [pc, #120]	@ (8016be0 <dhcp_reboot+0x160>)
 8016b68:	6979      	ldr	r1, [r7, #20]
 8016b6a:	f7fe fcc5 	bl	80154f8 <udp_sendto_if>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016b72:	6978      	ldr	r0, [r7, #20]
 8016b74:	f7f8 fc26 	bl	800f3c4 <pbuf_free>
 8016b78:	e001      	b.n	8016b7e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016b7a:	23ff      	movs	r3, #255	@ 0xff
 8016b7c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016b7e:	69bb      	ldr	r3, [r7, #24]
 8016b80:	799b      	ldrb	r3, [r3, #6]
 8016b82:	2bff      	cmp	r3, #255	@ 0xff
 8016b84:	d005      	beq.n	8016b92 <dhcp_reboot+0x112>
    dhcp->tries++;
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	799b      	ldrb	r3, [r3, #6]
 8016b8a:	3301      	adds	r3, #1
 8016b8c:	b2da      	uxtb	r2, r3
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016b92:	69bb      	ldr	r3, [r7, #24]
 8016b94:	799b      	ldrb	r3, [r3, #6]
 8016b96:	2b09      	cmp	r3, #9
 8016b98:	d809      	bhi.n	8016bae <dhcp_reboot+0x12e>
 8016b9a:	69bb      	ldr	r3, [r7, #24]
 8016b9c:	799b      	ldrb	r3, [r3, #6]
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	0152      	lsls	r2, r2, #5
 8016ba2:	1ad2      	subs	r2, r2, r3
 8016ba4:	0092      	lsls	r2, r2, #2
 8016ba6:	4413      	add	r3, r2
 8016ba8:	00db      	lsls	r3, r3, #3
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	e001      	b.n	8016bb2 <dhcp_reboot+0x132>
 8016bae:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016bb2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016bb4:	89fb      	ldrh	r3, [r7, #14]
 8016bb6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016bba:	4a0a      	ldr	r2, [pc, #40]	@ (8016be4 <dhcp_reboot+0x164>)
 8016bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8016bc0:	1152      	asrs	r2, r2, #5
 8016bc2:	17db      	asrs	r3, r3, #31
 8016bc4:	1ad3      	subs	r3, r2, r3
 8016bc6:	b29a      	uxth	r2, r3
 8016bc8:	69bb      	ldr	r3, [r7, #24]
 8016bca:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016bcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3720      	adds	r7, #32
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8016bd8:	200000bc 	.word	0x200000bc
 8016bdc:	20013dfc 	.word	0x20013dfc
 8016be0:	0806c64c 	.word	0x0806c64c
 8016be4:	10624dd3 	.word	0x10624dd3

08016be8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016be8:	b5b0      	push	{r4, r5, r7, lr}
 8016bea:	b08a      	sub	sp, #40	@ 0x28
 8016bec:	af02      	add	r7, sp, #8
 8016bee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016bf6:	69fb      	ldr	r3, [r7, #28]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	f000 8084 	beq.w	8016d06 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	795b      	ldrb	r3, [r3, #5]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	f000 8081 	beq.w	8016d0a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016c08:	69fb      	ldr	r3, [r7, #28]
 8016c0a:	699b      	ldr	r3, [r3, #24]
 8016c0c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	2200      	movs	r2, #0
 8016c12:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016c14:	69fb      	ldr	r3, [r7, #28]
 8016c16:	2200      	movs	r2, #0
 8016c18:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016c1a:	69fb      	ldr	r3, [r7, #28]
 8016c1c:	2200      	movs	r2, #0
 8016c1e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016c20:	69fb      	ldr	r3, [r7, #28]
 8016c22:	2200      	movs	r2, #0
 8016c24:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8016c2c:	69fb      	ldr	r3, [r7, #28]
 8016c2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016c30:	69fb      	ldr	r3, [r7, #28]
 8016c32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016c3c:	69fb      	ldr	r3, [r7, #28]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	829a      	strh	r2, [r3, #20]
 8016c42:	69fb      	ldr	r3, [r7, #28]
 8016c44:	8a9a      	ldrh	r2, [r3, #20]
 8016c46:	69fb      	ldr	r3, [r7, #28]
 8016c48:	825a      	strh	r2, [r3, #18]
 8016c4a:	69fb      	ldr	r3, [r7, #28]
 8016c4c:	8a5a      	ldrh	r2, [r3, #18]
 8016c4e:	69fb      	ldr	r3, [r7, #28]
 8016c50:	821a      	strh	r2, [r3, #16]
 8016c52:	69fb      	ldr	r3, [r7, #28]
 8016c54:	8a1a      	ldrh	r2, [r3, #16]
 8016c56:	69fb      	ldr	r3, [r7, #28]
 8016c58:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016c5a:	6878      	ldr	r0, [r7, #4]
 8016c5c:	f000 fe06 	bl	801786c <dhcp_supplied_address>
 8016c60:	4603      	mov	r3, r0
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d03b      	beq.n	8016cde <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016c66:	f107 030e 	add.w	r3, r7, #14
 8016c6a:	2207      	movs	r2, #7
 8016c6c:	69f9      	ldr	r1, [r7, #28]
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 fcf8 	bl	8017664 <dhcp_create_msg>
 8016c74:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016c76:	69bb      	ldr	r3, [r7, #24]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d030      	beq.n	8016cde <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c7c:	69bb      	ldr	r3, [r7, #24]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016c82:	89f8      	ldrh	r0, [r7, #14]
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c8a:	2304      	movs	r3, #4
 8016c8c:	2236      	movs	r2, #54	@ 0x36
 8016c8e:	f000 f86b 	bl	8016d68 <dhcp_option>
 8016c92:	4603      	mov	r3, r0
 8016c94:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016c96:	89fc      	ldrh	r4, [r7, #14]
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016c9e:	693b      	ldr	r3, [r7, #16]
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	f7f6 fe82 	bl	800d9aa <lwip_htonl>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	461a      	mov	r2, r3
 8016caa:	4629      	mov	r1, r5
 8016cac:	4620      	mov	r0, r4
 8016cae:	f000 f8e7 	bl	8016e80 <dhcp_option_long>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016cb6:	89f8      	ldrh	r0, [r7, #14]
 8016cb8:	697b      	ldr	r3, [r7, #20]
 8016cba:	33f0      	adds	r3, #240	@ 0xf0
 8016cbc:	69ba      	ldr	r2, [r7, #24]
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	f000 fda6 	bl	8017810 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016cc4:	4b13      	ldr	r3, [pc, #76]	@ (8016d14 <dhcp_release_and_stop+0x12c>)
 8016cc6:	6818      	ldr	r0, [r3, #0]
 8016cc8:	f107 0210 	add.w	r2, r7, #16
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	2343      	movs	r3, #67	@ 0x43
 8016cd2:	69b9      	ldr	r1, [r7, #24]
 8016cd4:	f7fe fc10 	bl	80154f8 <udp_sendto_if>
      pbuf_free(p_out);
 8016cd8:	69b8      	ldr	r0, [r7, #24]
 8016cda:	f7f8 fb73 	bl	800f3c4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016cde:	4b0e      	ldr	r3, [pc, #56]	@ (8016d18 <dhcp_release_and_stop+0x130>)
 8016ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8016d18 <dhcp_release_and_stop+0x130>)
 8016ce2:	490d      	ldr	r1, [pc, #52]	@ (8016d18 <dhcp_release_and_stop+0x130>)
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f7f7 fe6d 	bl	800e9c4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016cea:	2100      	movs	r1, #0
 8016cec:	69f8      	ldr	r0, [r7, #28]
 8016cee:	f000 f820 	bl	8016d32 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	791b      	ldrb	r3, [r3, #4]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d008      	beq.n	8016d0c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016cfa:	f7fe ff8b 	bl	8015c14 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016cfe:	69fb      	ldr	r3, [r7, #28]
 8016d00:	2200      	movs	r2, #0
 8016d02:	711a      	strb	r2, [r3, #4]
 8016d04:	e002      	b.n	8016d0c <dhcp_release_and_stop+0x124>
    return;
 8016d06:	bf00      	nop
 8016d08:	e000      	b.n	8016d0c <dhcp_release_and_stop+0x124>
    return;
 8016d0a:	bf00      	nop
  }
}
 8016d0c:	3720      	adds	r7, #32
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bdb0      	pop	{r4, r5, r7, pc}
 8016d12:	bf00      	nop
 8016d14:	20013dfc 	.word	0x20013dfc
 8016d18:	0806c648 	.word	0x0806c648

08016d1c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016d24:	6878      	ldr	r0, [r7, #4]
 8016d26:	f7ff ff5f 	bl	8016be8 <dhcp_release_and_stop>
}
 8016d2a:	bf00      	nop
 8016d2c:	3708      	adds	r7, #8
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}

08016d32 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016d32:	b480      	push	{r7}
 8016d34:	b083      	sub	sp, #12
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	6078      	str	r0, [r7, #4]
 8016d3a:	460b      	mov	r3, r1
 8016d3c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	795b      	ldrb	r3, [r3, #5]
 8016d42:	78fa      	ldrb	r2, [r7, #3]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d008      	beq.n	8016d5a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	78fa      	ldrb	r2, [r7, #3]
 8016d4c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2200      	movs	r2, #0
 8016d52:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2200      	movs	r2, #0
 8016d58:	811a      	strh	r2, [r3, #8]
  }
}
 8016d5a:	bf00      	nop
 8016d5c:	370c      	adds	r7, #12
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d64:	4770      	bx	lr
	...

08016d68 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6039      	str	r1, [r7, #0]
 8016d70:	4611      	mov	r1, r2
 8016d72:	461a      	mov	r2, r3
 8016d74:	4603      	mov	r3, r0
 8016d76:	80fb      	strh	r3, [r7, #6]
 8016d78:	460b      	mov	r3, r1
 8016d7a:	717b      	strb	r3, [r7, #5]
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016d80:	88fa      	ldrh	r2, [r7, #6]
 8016d82:	793b      	ldrb	r3, [r7, #4]
 8016d84:	4413      	add	r3, r2
 8016d86:	3302      	adds	r3, #2
 8016d88:	2b44      	cmp	r3, #68	@ 0x44
 8016d8a:	d906      	bls.n	8016d9a <dhcp_option+0x32>
 8016d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8016dc4 <dhcp_option+0x5c>)
 8016d8e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016d92:	490d      	ldr	r1, [pc, #52]	@ (8016dc8 <dhcp_option+0x60>)
 8016d94:	480d      	ldr	r0, [pc, #52]	@ (8016dcc <dhcp_option+0x64>)
 8016d96:	f004 f953 	bl	801b040 <iprintf>
  options[options_out_len++] = option_type;
 8016d9a:	88fb      	ldrh	r3, [r7, #6]
 8016d9c:	1c5a      	adds	r2, r3, #1
 8016d9e:	80fa      	strh	r2, [r7, #6]
 8016da0:	461a      	mov	r2, r3
 8016da2:	683b      	ldr	r3, [r7, #0]
 8016da4:	4413      	add	r3, r2
 8016da6:	797a      	ldrb	r2, [r7, #5]
 8016da8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016daa:	88fb      	ldrh	r3, [r7, #6]
 8016dac:	1c5a      	adds	r2, r3, #1
 8016dae:	80fa      	strh	r2, [r7, #6]
 8016db0:	461a      	mov	r2, r3
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	4413      	add	r3, r2
 8016db6:	793a      	ldrb	r2, [r7, #4]
 8016db8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016dba:	88fb      	ldrh	r3, [r7, #6]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3708      	adds	r7, #8
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	0801fdf0 	.word	0x0801fdf0
 8016dc8:	0801ff84 	.word	0x0801ff84
 8016dcc:	0801fe50 	.word	0x0801fe50

08016dd0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	6039      	str	r1, [r7, #0]
 8016dda:	80fb      	strh	r3, [r7, #6]
 8016ddc:	4613      	mov	r3, r2
 8016dde:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016de0:	88fb      	ldrh	r3, [r7, #6]
 8016de2:	2b43      	cmp	r3, #67	@ 0x43
 8016de4:	d906      	bls.n	8016df4 <dhcp_option_byte+0x24>
 8016de6:	4b0a      	ldr	r3, [pc, #40]	@ (8016e10 <dhcp_option_byte+0x40>)
 8016de8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8016dec:	4909      	ldr	r1, [pc, #36]	@ (8016e14 <dhcp_option_byte+0x44>)
 8016dee:	480a      	ldr	r0, [pc, #40]	@ (8016e18 <dhcp_option_byte+0x48>)
 8016df0:	f004 f926 	bl	801b040 <iprintf>
  options[options_out_len++] = value;
 8016df4:	88fb      	ldrh	r3, [r7, #6]
 8016df6:	1c5a      	adds	r2, r3, #1
 8016df8:	80fa      	strh	r2, [r7, #6]
 8016dfa:	461a      	mov	r2, r3
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	4413      	add	r3, r2
 8016e00:	797a      	ldrb	r2, [r7, #5]
 8016e02:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e04:	88fb      	ldrh	r3, [r7, #6]
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3708      	adds	r7, #8
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}
 8016e0e:	bf00      	nop
 8016e10:	0801fdf0 	.word	0x0801fdf0
 8016e14:	0801ffc8 	.word	0x0801ffc8
 8016e18:	0801fe50 	.word	0x0801fe50

08016e1c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	4603      	mov	r3, r0
 8016e24:	6039      	str	r1, [r7, #0]
 8016e26:	80fb      	strh	r3, [r7, #6]
 8016e28:	4613      	mov	r3, r2
 8016e2a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016e2c:	88fb      	ldrh	r3, [r7, #6]
 8016e2e:	3302      	adds	r3, #2
 8016e30:	2b44      	cmp	r3, #68	@ 0x44
 8016e32:	d906      	bls.n	8016e42 <dhcp_option_short+0x26>
 8016e34:	4b0f      	ldr	r3, [pc, #60]	@ (8016e74 <dhcp_option_short+0x58>)
 8016e36:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8016e3a:	490f      	ldr	r1, [pc, #60]	@ (8016e78 <dhcp_option_short+0x5c>)
 8016e3c:	480f      	ldr	r0, [pc, #60]	@ (8016e7c <dhcp_option_short+0x60>)
 8016e3e:	f004 f8ff 	bl	801b040 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016e42:	88bb      	ldrh	r3, [r7, #4]
 8016e44:	0a1b      	lsrs	r3, r3, #8
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	88fb      	ldrh	r3, [r7, #6]
 8016e4a:	1c59      	adds	r1, r3, #1
 8016e4c:	80f9      	strh	r1, [r7, #6]
 8016e4e:	4619      	mov	r1, r3
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	440b      	add	r3, r1
 8016e54:	b2d2      	uxtb	r2, r2
 8016e56:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016e58:	88fb      	ldrh	r3, [r7, #6]
 8016e5a:	1c5a      	adds	r2, r3, #1
 8016e5c:	80fa      	strh	r2, [r7, #6]
 8016e5e:	461a      	mov	r2, r3
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	4413      	add	r3, r2
 8016e64:	88ba      	ldrh	r2, [r7, #4]
 8016e66:	b2d2      	uxtb	r2, r2
 8016e68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e6a:	88fb      	ldrh	r3, [r7, #6]
}
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	3708      	adds	r7, #8
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}
 8016e74:	0801fdf0 	.word	0x0801fdf0
 8016e78:	08020000 	.word	0x08020000
 8016e7c:	0801fe50 	.word	0x0801fe50

08016e80 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b084      	sub	sp, #16
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	4603      	mov	r3, r0
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
 8016e8c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016e8e:	89fb      	ldrh	r3, [r7, #14]
 8016e90:	3304      	adds	r3, #4
 8016e92:	2b44      	cmp	r3, #68	@ 0x44
 8016e94:	d906      	bls.n	8016ea4 <dhcp_option_long+0x24>
 8016e96:	4b19      	ldr	r3, [pc, #100]	@ (8016efc <dhcp_option_long+0x7c>)
 8016e98:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8016e9c:	4918      	ldr	r1, [pc, #96]	@ (8016f00 <dhcp_option_long+0x80>)
 8016e9e:	4819      	ldr	r0, [pc, #100]	@ (8016f04 <dhcp_option_long+0x84>)
 8016ea0:	f004 f8ce 	bl	801b040 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	0e1a      	lsrs	r2, r3, #24
 8016ea8:	89fb      	ldrh	r3, [r7, #14]
 8016eaa:	1c59      	adds	r1, r3, #1
 8016eac:	81f9      	strh	r1, [r7, #14]
 8016eae:	4619      	mov	r1, r3
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	440b      	add	r3, r1
 8016eb4:	b2d2      	uxtb	r2, r2
 8016eb6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	0c1a      	lsrs	r2, r3, #16
 8016ebc:	89fb      	ldrh	r3, [r7, #14]
 8016ebe:	1c59      	adds	r1, r3, #1
 8016ec0:	81f9      	strh	r1, [r7, #14]
 8016ec2:	4619      	mov	r1, r3
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	440b      	add	r3, r1
 8016ec8:	b2d2      	uxtb	r2, r2
 8016eca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	0a1a      	lsrs	r2, r3, #8
 8016ed0:	89fb      	ldrh	r3, [r7, #14]
 8016ed2:	1c59      	adds	r1, r3, #1
 8016ed4:	81f9      	strh	r1, [r7, #14]
 8016ed6:	4619      	mov	r1, r3
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	440b      	add	r3, r1
 8016edc:	b2d2      	uxtb	r2, r2
 8016ede:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016ee0:	89fb      	ldrh	r3, [r7, #14]
 8016ee2:	1c5a      	adds	r2, r3, #1
 8016ee4:	81fa      	strh	r2, [r7, #14]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	4413      	add	r3, r2
 8016eec:	687a      	ldr	r2, [r7, #4]
 8016eee:	b2d2      	uxtb	r2, r2
 8016ef0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3710      	adds	r7, #16
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}
 8016efc:	0801fdf0 	.word	0x0801fdf0
 8016f00:	0802003c 	.word	0x0802003c
 8016f04:	0801fe50 	.word	0x0801fe50

08016f08 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016f08:	b580      	push	{r7, lr}
 8016f0a:	b092      	sub	sp, #72	@ 0x48
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
 8016f10:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016f12:	2300      	movs	r3, #0
 8016f14:	633b      	str	r3, [r7, #48]	@ 0x30
  int parse_sname_as_options = 0;
 8016f16:	2300      	movs	r3, #0
 8016f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016f1a:	2208      	movs	r2, #8
 8016f1c:	2100      	movs	r1, #0
 8016f1e:	48b8      	ldr	r0, [pc, #736]	@ (8017200 <dhcp_parse_reply+0x2f8>)
 8016f20:	f004 f9f0 	bl	801b304 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	895b      	ldrh	r3, [r3, #10]
 8016f28:	2b2b      	cmp	r3, #43	@ 0x2b
 8016f2a:	d802      	bhi.n	8016f32 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016f2c:	f06f 0301 	mvn.w	r3, #1
 8016f30:	e2b8      	b.n	80174a4 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016f38:	23f0      	movs	r3, #240	@ 0xf0
 8016f3a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	891b      	ldrh	r3, [r3, #8]
 8016f40:	877b      	strh	r3, [r7, #58]	@ 0x3a
again:
  q = p;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016f46:	e00c      	b.n	8016f62 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f4a:	895b      	ldrh	r3, [r3, #10]
 8016f4c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f54:	895b      	ldrh	r3, [r3, #10]
 8016f56:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016f58:	1ad3      	subs	r3, r2, r3
 8016f5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    q = q->next;
 8016f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	637b      	str	r3, [r7, #52]	@ 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d004      	beq.n	8016f72 <dhcp_parse_reply+0x6a>
 8016f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f6a:	895b      	ldrh	r3, [r3, #10]
 8016f6c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d2ea      	bcs.n	8016f48 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d102      	bne.n	8016f7e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016f78:	f06f 0301 	mvn.w	r3, #1
 8016f7c:	e292      	b.n	80174a4 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 8016f7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016f80:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  offset_max = options_idx_max;
 8016f84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016f86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  options = (u8_t *)q->payload;
 8016f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016f8e:	e247      	b.n	8017420 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8016f90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016f94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016f96:	4413      	add	r3, r2
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    int decode_idx = -1;
 8016fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8016fa8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016fac:	3302      	adds	r3, #2
 8016fae:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (val_offset < offset) {
 8016fb0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016fb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d202      	bcs.n	8016fc0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 8016fba:	f06f 0301 	mvn.w	r3, #1
 8016fbe:	e271      	b.n	80174a4 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016fc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016fc4:	3301      	adds	r3, #1
 8016fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016fc8:	8952      	ldrh	r2, [r2, #10]
 8016fca:	4293      	cmp	r3, r2
 8016fcc:	da08      	bge.n	8016fe0 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 8016fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016fd2:	3301      	adds	r3, #1
 8016fd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016fd6:	4413      	add	r3, r2
 8016fd8:	781b      	ldrb	r3, [r3, #0]
 8016fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016fde:	e00b      	b.n	8016ff8 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d004      	beq.n	8016ff2 <dhcp_parse_reply+0xea>
 8016fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	781b      	ldrb	r3, [r3, #0]
 8016ff0:	e000      	b.n	8016ff4 <dhcp_parse_reply+0xec>
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    switch (op) {
 8017000:	7efb      	ldrb	r3, [r7, #27]
 8017002:	2b3b      	cmp	r3, #59	@ 0x3b
 8017004:	f200 812c 	bhi.w	8017260 <dhcp_parse_reply+0x358>
 8017008:	a201      	add	r2, pc, #4	@ (adr r2, 8017010 <dhcp_parse_reply+0x108>)
 801700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801700e:	bf00      	nop
 8017010:	08017101 	.word	0x08017101
 8017014:	08017111 	.word	0x08017111
 8017018:	08017261 	.word	0x08017261
 801701c:	08017133 	.word	0x08017133
 8017020:	08017261 	.word	0x08017261
 8017024:	08017261 	.word	0x08017261
 8017028:	08017261 	.word	0x08017261
 801702c:	08017261 	.word	0x08017261
 8017030:	08017261 	.word	0x08017261
 8017034:	08017261 	.word	0x08017261
 8017038:	08017261 	.word	0x08017261
 801703c:	08017261 	.word	0x08017261
 8017040:	08017261 	.word	0x08017261
 8017044:	08017261 	.word	0x08017261
 8017048:	08017261 	.word	0x08017261
 801704c:	08017261 	.word	0x08017261
 8017050:	08017261 	.word	0x08017261
 8017054:	08017261 	.word	0x08017261
 8017058:	08017261 	.word	0x08017261
 801705c:	08017261 	.word	0x08017261
 8017060:	08017261 	.word	0x08017261
 8017064:	08017261 	.word	0x08017261
 8017068:	08017261 	.word	0x08017261
 801706c:	08017261 	.word	0x08017261
 8017070:	08017261 	.word	0x08017261
 8017074:	08017261 	.word	0x08017261
 8017078:	08017261 	.word	0x08017261
 801707c:	08017261 	.word	0x08017261
 8017080:	08017261 	.word	0x08017261
 8017084:	08017261 	.word	0x08017261
 8017088:	08017261 	.word	0x08017261
 801708c:	08017261 	.word	0x08017261
 8017090:	08017261 	.word	0x08017261
 8017094:	08017261 	.word	0x08017261
 8017098:	08017261 	.word	0x08017261
 801709c:	08017261 	.word	0x08017261
 80170a0:	08017261 	.word	0x08017261
 80170a4:	08017261 	.word	0x08017261
 80170a8:	08017261 	.word	0x08017261
 80170ac:	08017261 	.word	0x08017261
 80170b0:	08017261 	.word	0x08017261
 80170b4:	08017261 	.word	0x08017261
 80170b8:	08017261 	.word	0x08017261
 80170bc:	08017261 	.word	0x08017261
 80170c0:	08017261 	.word	0x08017261
 80170c4:	08017261 	.word	0x08017261
 80170c8:	08017261 	.word	0x08017261
 80170cc:	08017261 	.word	0x08017261
 80170d0:	08017261 	.word	0x08017261
 80170d4:	08017261 	.word	0x08017261
 80170d8:	08017261 	.word	0x08017261
 80170dc:	0801715f 	.word	0x0801715f
 80170e0:	08017181 	.word	0x08017181
 80170e4:	080171bd 	.word	0x080171bd
 80170e8:	080171df 	.word	0x080171df
 80170ec:	08017261 	.word	0x08017261
 80170f0:	08017261 	.word	0x08017261
 80170f4:	08017261 	.word	0x08017261
 80170f8:	0801721d 	.word	0x0801721d
 80170fc:	0801723f 	.word	0x0801723f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017100:	2300      	movs	r3, #0
 8017102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8017106:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801710a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        /* will be increased below */
        break;
 801710e:	e0ab      	b.n	8017268 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017114:	2b04      	cmp	r3, #4
 8017116:	d009      	beq.n	801712c <dhcp_parse_reply+0x224>
 8017118:	4b3a      	ldr	r3, [pc, #232]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 801711a:	f240 622e 	movw	r2, #1582	@ 0x62e
 801711e:	493a      	ldr	r1, [pc, #232]	@ (8017208 <dhcp_parse_reply+0x300>)
 8017120:	483a      	ldr	r0, [pc, #232]	@ (801720c <dhcp_parse_reply+0x304>)
 8017122:	f003 ff8d 	bl	801b040 <iprintf>
 8017126:	f06f 0305 	mvn.w	r3, #5
 801712a:	e1bb      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801712c:	2306      	movs	r3, #6
 801712e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8017130:	e09a      	b.n	8017268 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017132:	2304      	movs	r3, #4
 8017134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017138:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 801713c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017140:	429a      	cmp	r2, r3
 8017142:	d209      	bcs.n	8017158 <dhcp_parse_reply+0x250>
 8017144:	4b2f      	ldr	r3, [pc, #188]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 8017146:	f240 6233 	movw	r2, #1587	@ 0x633
 801714a:	4931      	ldr	r1, [pc, #196]	@ (8017210 <dhcp_parse_reply+0x308>)
 801714c:	482f      	ldr	r0, [pc, #188]	@ (801720c <dhcp_parse_reply+0x304>)
 801714e:	f003 ff77 	bl	801b040 <iprintf>
 8017152:	f06f 0305 	mvn.w	r3, #5
 8017156:	e1a5      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017158:	2307      	movs	r3, #7
 801715a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801715c:	e084      	b.n	8017268 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801715e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017162:	2b04      	cmp	r3, #4
 8017164:	d009      	beq.n	801717a <dhcp_parse_reply+0x272>
 8017166:	4b27      	ldr	r3, [pc, #156]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 8017168:	f240 6241 	movw	r2, #1601	@ 0x641
 801716c:	4926      	ldr	r1, [pc, #152]	@ (8017208 <dhcp_parse_reply+0x300>)
 801716e:	4827      	ldr	r0, [pc, #156]	@ (801720c <dhcp_parse_reply+0x304>)
 8017170:	f003 ff66 	bl	801b040 <iprintf>
 8017174:	f06f 0305 	mvn.w	r3, #5
 8017178:	e194      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801717a:	2303      	movs	r3, #3
 801717c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801717e:	e073      	b.n	8017268 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017180:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017184:	2b01      	cmp	r3, #1
 8017186:	d009      	beq.n	801719c <dhcp_parse_reply+0x294>
 8017188:	4b1e      	ldr	r3, [pc, #120]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 801718a:	f240 624f 	movw	r2, #1615	@ 0x64f
 801718e:	4921      	ldr	r1, [pc, #132]	@ (8017214 <dhcp_parse_reply+0x30c>)
 8017190:	481e      	ldr	r0, [pc, #120]	@ (801720c <dhcp_parse_reply+0x304>)
 8017192:	f003 ff55 	bl	801b040 <iprintf>
 8017196:	f06f 0305 	mvn.w	r3, #5
 801719a:	e183      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801719c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801719e:	2bf0      	cmp	r3, #240	@ 0xf0
 80171a0:	d009      	beq.n	80171b6 <dhcp_parse_reply+0x2ae>
 80171a2:	4b18      	ldr	r3, [pc, #96]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 80171a4:	f240 6251 	movw	r2, #1617	@ 0x651
 80171a8:	491b      	ldr	r1, [pc, #108]	@ (8017218 <dhcp_parse_reply+0x310>)
 80171aa:	4818      	ldr	r0, [pc, #96]	@ (801720c <dhcp_parse_reply+0x304>)
 80171ac:	f003 ff48 	bl	801b040 <iprintf>
 80171b0:	f06f 0305 	mvn.w	r3, #5
 80171b4:	e176      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80171b6:	2300      	movs	r3, #0
 80171b8:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80171ba:	e055      	b.n	8017268 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80171bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80171c0:	2b01      	cmp	r3, #1
 80171c2:	d009      	beq.n	80171d8 <dhcp_parse_reply+0x2d0>
 80171c4:	4b0f      	ldr	r3, [pc, #60]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 80171c6:	f240 6255 	movw	r2, #1621	@ 0x655
 80171ca:	4912      	ldr	r1, [pc, #72]	@ (8017214 <dhcp_parse_reply+0x30c>)
 80171cc:	480f      	ldr	r0, [pc, #60]	@ (801720c <dhcp_parse_reply+0x304>)
 80171ce:	f003 ff37 	bl	801b040 <iprintf>
 80171d2:	f06f 0305 	mvn.w	r3, #5
 80171d6:	e165      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80171d8:	2301      	movs	r3, #1
 80171da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80171dc:	e044      	b.n	8017268 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80171de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80171e2:	2b04      	cmp	r3, #4
 80171e4:	d009      	beq.n	80171fa <dhcp_parse_reply+0x2f2>
 80171e6:	4b07      	ldr	r3, [pc, #28]	@ (8017204 <dhcp_parse_reply+0x2fc>)
 80171e8:	f240 6259 	movw	r2, #1625	@ 0x659
 80171ec:	4906      	ldr	r1, [pc, #24]	@ (8017208 <dhcp_parse_reply+0x300>)
 80171ee:	4807      	ldr	r0, [pc, #28]	@ (801720c <dhcp_parse_reply+0x304>)
 80171f0:	f003 ff26 	bl	801b040 <iprintf>
 80171f4:	f06f 0305 	mvn.w	r3, #5
 80171f8:	e154      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80171fa:	2302      	movs	r3, #2
 80171fc:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80171fe:	e033      	b.n	8017268 <dhcp_parse_reply+0x360>
 8017200:	20013df4 	.word	0x20013df4
 8017204:	0801fdf0 	.word	0x0801fdf0
 8017208:	08020078 	.word	0x08020078
 801720c:	0801fe50 	.word	0x0801fe50
 8017210:	08020084 	.word	0x08020084
 8017214:	08020098 	.word	0x08020098
 8017218:	080200a4 	.word	0x080200a4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801721c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017220:	2b04      	cmp	r3, #4
 8017222:	d009      	beq.n	8017238 <dhcp_parse_reply+0x330>
 8017224:	4ba1      	ldr	r3, [pc, #644]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 8017226:	f240 625d 	movw	r2, #1629	@ 0x65d
 801722a:	49a1      	ldr	r1, [pc, #644]	@ (80174b0 <dhcp_parse_reply+0x5a8>)
 801722c:	48a1      	ldr	r0, [pc, #644]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 801722e:	f003 ff07 	bl	801b040 <iprintf>
 8017232:	f06f 0305 	mvn.w	r3, #5
 8017236:	e135      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017238:	2304      	movs	r3, #4
 801723a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801723c:	e014      	b.n	8017268 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801723e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017242:	2b04      	cmp	r3, #4
 8017244:	d009      	beq.n	801725a <dhcp_parse_reply+0x352>
 8017246:	4b99      	ldr	r3, [pc, #612]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 8017248:	f240 6261 	movw	r2, #1633	@ 0x661
 801724c:	4998      	ldr	r1, [pc, #608]	@ (80174b0 <dhcp_parse_reply+0x5a8>)
 801724e:	4899      	ldr	r0, [pc, #612]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 8017250:	f003 fef6 	bl	801b040 <iprintf>
 8017254:	f06f 0305 	mvn.w	r3, #5
 8017258:	e124      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801725a:	2305      	movs	r3, #5
 801725c:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801725e:	e003      	b.n	8017268 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8017260:	2300      	movs	r3, #0
 8017262:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017266:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017268:	7efb      	ldrb	r3, [r7, #27]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d105      	bne.n	801727a <dhcp_parse_reply+0x372>
      offset++;
 801726e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017272:	3301      	adds	r3, #1
 8017274:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8017278:	e0a4      	b.n	80173c4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801727a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801727e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017282:	4413      	add	r3, r2
 8017284:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8017288:	4293      	cmp	r3, r2
 801728a:	dd02      	ble.n	8017292 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 801728c:	f06f 0301 	mvn.w	r3, #1
 8017290:	e108      	b.n	80174a4 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8017292:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8017296:	b29a      	uxth	r2, r3
 8017298:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801729c:	4413      	add	r3, r2
 801729e:	b29b      	uxth	r3, r3
 80172a0:	3302      	adds	r3, #2
 80172a2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      if (decode_len > 0) {
 80172a6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 808a 	beq.w	80173c4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 80172b0:	2300      	movs	r3, #0
 80172b2:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80172b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	db02      	blt.n	80172c0 <dhcp_parse_reply+0x3b8>
 80172ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172bc:	2b07      	cmp	r3, #7
 80172be:	dd06      	ble.n	80172ce <dhcp_parse_reply+0x3c6>
 80172c0:	4b7a      	ldr	r3, [pc, #488]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 80172c2:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80172c6:	497c      	ldr	r1, [pc, #496]	@ (80174b8 <dhcp_parse_reply+0x5b0>)
 80172c8:	487a      	ldr	r0, [pc, #488]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 80172ca:	f003 feb9 	bl	801b040 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80172ce:	4a7b      	ldr	r2, [pc, #492]	@ (80174bc <dhcp_parse_reply+0x5b4>)
 80172d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172d2:	4413      	add	r3, r2
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d174      	bne.n	80173c4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 80172da:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80172de:	2b04      	cmp	r3, #4
 80172e0:	bf28      	it	cs
 80172e2:	2304      	movcs	r3, #4
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80172e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80172ea:	8b3a      	ldrh	r2, [r7, #24]
 80172ec:	f107 010c 	add.w	r1, r7, #12
 80172f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80172f2:	f7f8 fa6d 	bl	800f7d0 <pbuf_copy_partial>
 80172f6:	4603      	mov	r3, r0
 80172f8:	461a      	mov	r2, r3
 80172fa:	8b3b      	ldrh	r3, [r7, #24]
 80172fc:	4293      	cmp	r3, r2
 80172fe:	d002      	beq.n	8017306 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8017300:	f06f 0301 	mvn.w	r3, #1
 8017304:	e0ce      	b.n	80174a4 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8017306:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801730a:	2b04      	cmp	r3, #4
 801730c:	d933      	bls.n	8017376 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801730e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017312:	f003 0303 	and.w	r3, r3, #3
 8017316:	b2db      	uxtb	r3, r3
 8017318:	2b00      	cmp	r3, #0
 801731a:	d009      	beq.n	8017330 <dhcp_parse_reply+0x428>
 801731c:	4b63      	ldr	r3, [pc, #396]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 801731e:	f240 6281 	movw	r2, #1665	@ 0x681
 8017322:	4967      	ldr	r1, [pc, #412]	@ (80174c0 <dhcp_parse_reply+0x5b8>)
 8017324:	4863      	ldr	r0, [pc, #396]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 8017326:	f003 fe8b 	bl	801b040 <iprintf>
 801732a:	f06f 0305 	mvn.w	r3, #5
 801732e:	e0b9      	b.n	80174a4 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8017330:	4a62      	ldr	r2, [pc, #392]	@ (80174bc <dhcp_parse_reply+0x5b4>)
 8017332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017334:	4413      	add	r3, r2
 8017336:	2201      	movs	r2, #1
 8017338:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	4618      	mov	r0, r3
 801733e:	f7f6 fb34 	bl	800d9aa <lwip_htonl>
 8017342:	4602      	mov	r2, r0
 8017344:	495f      	ldr	r1, [pc, #380]	@ (80174c4 <dhcp_parse_reply+0x5bc>)
 8017346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801734c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017350:	3b04      	subs	r3, #4
 8017352:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017356:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017358:	3304      	adds	r3, #4
 801735a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801735c:	8afa      	ldrh	r2, [r7, #22]
 801735e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017360:	429a      	cmp	r2, r3
 8017362:	d202      	bcs.n	801736a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8017364:	f06f 0301 	mvn.w	r3, #1
 8017368:	e09c      	b.n	80174a4 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801736a:	8afb      	ldrh	r3, [r7, #22]
 801736c:	847b      	strh	r3, [r7, #34]	@ 0x22
            decode_idx++;
 801736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017370:	3301      	adds	r3, #1
 8017372:	627b      	str	r3, [r7, #36]	@ 0x24
            goto decode_next;
 8017374:	e79e      	b.n	80172b4 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8017376:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801737a:	2b04      	cmp	r3, #4
 801737c:	d106      	bne.n	801738c <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	4618      	mov	r0, r3
 8017382:	f7f6 fb12 	bl	800d9aa <lwip_htonl>
 8017386:	4603      	mov	r3, r0
 8017388:	60fb      	str	r3, [r7, #12]
 801738a:	e011      	b.n	80173b0 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801738c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8017390:	2b01      	cmp	r3, #1
 8017392:	d009      	beq.n	80173a8 <dhcp_parse_reply+0x4a0>
 8017394:	4b45      	ldr	r3, [pc, #276]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 8017396:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801739a:	494b      	ldr	r1, [pc, #300]	@ (80174c8 <dhcp_parse_reply+0x5c0>)
 801739c:	4845      	ldr	r0, [pc, #276]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 801739e:	f003 fe4f 	bl	801b040 <iprintf>
 80173a2:	f06f 0305 	mvn.w	r3, #5
 80173a6:	e07d      	b.n	80174a4 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 80173a8:	f107 030c 	add.w	r3, r7, #12
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 80173b0:	4a42      	ldr	r2, [pc, #264]	@ (80174bc <dhcp_parse_reply+0x5b4>)
 80173b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b4:	4413      	add	r3, r2
 80173b6:	2201      	movs	r2, #1
 80173b8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80173ba:	68fa      	ldr	r2, [r7, #12]
 80173bc:	4941      	ldr	r1, [pc, #260]	@ (80174c4 <dhcp_parse_reply+0x5bc>)
 80173be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80173c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173c6:	895b      	ldrh	r3, [r3, #10]
 80173c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d327      	bcc.n	8017420 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 80173d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173d2:	895b      	ldrh	r3, [r3, #10]
 80173d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173d8:	1ad3      	subs	r3, r2, r3
 80173da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      offset_max = (u16_t)(offset_max - q->len);
 80173de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173e0:	895b      	ldrh	r3, [r3, #10]
 80173e2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80173e4:	1ad3      	subs	r3, r2, r3
 80173e6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      if (offset < offset_max) {
 80173e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80173ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80173ee:	429a      	cmp	r2, r3
 80173f0:	d213      	bcs.n	801741a <dhcp_parse_reply+0x512>
        q = q->next;
 80173f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	637b      	str	r3, [r7, #52]	@ 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80173f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d109      	bne.n	8017412 <dhcp_parse_reply+0x50a>
 80173fe:	4b2b      	ldr	r3, [pc, #172]	@ (80174ac <dhcp_parse_reply+0x5a4>)
 8017400:	f240 629d 	movw	r2, #1693	@ 0x69d
 8017404:	4931      	ldr	r1, [pc, #196]	@ (80174cc <dhcp_parse_reply+0x5c4>)
 8017406:	482b      	ldr	r0, [pc, #172]	@ (80174b4 <dhcp_parse_reply+0x5ac>)
 8017408:	f003 fe1a 	bl	801b040 <iprintf>
 801740c:	f06f 0305 	mvn.w	r3, #5
 8017410:	e048      	b.n	80174a4 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8017412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017414:	685b      	ldr	r3, [r3, #4]
 8017416:	643b      	str	r3, [r7, #64]	@ 0x40
 8017418:	e002      	b.n	8017420 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801741a:	f06f 0301 	mvn.w	r3, #1
 801741e:	e041      	b.n	80174a4 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017422:	2b00      	cmp	r3, #0
 8017424:	d00c      	beq.n	8017440 <dhcp_parse_reply+0x538>
 8017426:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801742a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801742c:	429a      	cmp	r2, r3
 801742e:	d207      	bcs.n	8017440 <dhcp_parse_reply+0x538>
 8017430:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017434:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017436:	4413      	add	r3, r2
 8017438:	781b      	ldrb	r3, [r3, #0]
 801743a:	2bff      	cmp	r3, #255	@ 0xff
 801743c:	f47f ada8 	bne.w	8016f90 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017440:	4b1e      	ldr	r3, [pc, #120]	@ (80174bc <dhcp_parse_reply+0x5b4>)
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d018      	beq.n	801747a <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017448:	4b1e      	ldr	r3, [pc, #120]	@ (80174c4 <dhcp_parse_reply+0x5bc>)
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801744e:	4b1b      	ldr	r3, [pc, #108]	@ (80174bc <dhcp_parse_reply+0x5b4>)
 8017450:	2200      	movs	r2, #0
 8017452:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017454:	693b      	ldr	r3, [r7, #16]
 8017456:	2b01      	cmp	r3, #1
 8017458:	d102      	bne.n	8017460 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801745a:	2301      	movs	r3, #1
 801745c:	633b      	str	r3, [r7, #48]	@ 0x30
 801745e:	e00c      	b.n	801747a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	2b02      	cmp	r3, #2
 8017464:	d102      	bne.n	801746c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8017466:	2301      	movs	r3, #1
 8017468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801746a:	e006      	b.n	801747a <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	2b03      	cmp	r3, #3
 8017470:	d103      	bne.n	801747a <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8017472:	2301      	movs	r3, #1
 8017474:	62fb      	str	r3, [r7, #44]	@ 0x2c
      parse_file_as_options = 1;
 8017476:	2301      	movs	r3, #1
 8017478:	633b      	str	r3, [r7, #48]	@ 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801747a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801747c:	2b00      	cmp	r3, #0
 801747e:	d006      	beq.n	801748e <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017480:	2300      	movs	r3, #0
 8017482:	633b      	str	r3, [r7, #48]	@ 0x30
    options_idx = DHCP_FILE_OFS;
 8017484:	236c      	movs	r3, #108	@ 0x6c
 8017486:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017488:	23ec      	movs	r3, #236	@ 0xec
 801748a:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801748c:	e559      	b.n	8016f42 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801748e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017490:	2b00      	cmp	r3, #0
 8017492:	d006      	beq.n	80174a2 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8017494:	2300      	movs	r3, #0
 8017496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_SNAME_OFS;
 8017498:	232c      	movs	r3, #44	@ 0x2c
 801749a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801749c:	236c      	movs	r3, #108	@ 0x6c
 801749e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    goto again;
 80174a0:	e54f      	b.n	8016f42 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80174a2:	2300      	movs	r3, #0
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3748      	adds	r7, #72	@ 0x48
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}
 80174ac:	0801fdf0 	.word	0x0801fdf0
 80174b0:	08020078 	.word	0x08020078
 80174b4:	0801fe50 	.word	0x0801fe50
 80174b8:	080200bc 	.word	0x080200bc
 80174bc:	20013df4 	.word	0x20013df4
 80174c0:	080200d0 	.word	0x080200d0
 80174c4:	20013dd4 	.word	0x20013dd4
 80174c8:	080200e8 	.word	0x080200e8
 80174cc:	080200fc 	.word	0x080200fc

080174d0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b08a      	sub	sp, #40	@ 0x28
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	60f8      	str	r0, [r7, #12]
 80174d8:	60b9      	str	r1, [r7, #8]
 80174da:	607a      	str	r2, [r7, #4]
 80174dc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80174de:	4b5e      	ldr	r3, [pc, #376]	@ (8017658 <dhcp_recv+0x188>)
 80174e0:	685b      	ldr	r3, [r3, #4]
 80174e2:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174e8:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	685b      	ldr	r3, [r3, #4]
 80174ee:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80174f0:	69bb      	ldr	r3, [r7, #24]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	f000 809a 	beq.w	801762c <dhcp_recv+0x15c>
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	791b      	ldrb	r3, [r3, #4]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	f000 8095 	beq.w	801762c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	895b      	ldrh	r3, [r3, #10]
 8017506:	2b2b      	cmp	r3, #43	@ 0x2b
 8017508:	f240 8092 	bls.w	8017630 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	2b02      	cmp	r3, #2
 8017512:	f040 808f 	bne.w	8017634 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017516:	2300      	movs	r3, #0
 8017518:	74fb      	strb	r3, [r7, #19]
 801751a:	e00e      	b.n	801753a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801751c:	7cfb      	ldrb	r3, [r7, #19]
 801751e:	69fa      	ldr	r2, [r7, #28]
 8017520:	4413      	add	r3, r2
 8017522:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8017526:	7cfb      	ldrb	r3, [r7, #19]
 8017528:	6979      	ldr	r1, [r7, #20]
 801752a:	440b      	add	r3, r1
 801752c:	7f1b      	ldrb	r3, [r3, #28]
 801752e:	429a      	cmp	r2, r3
 8017530:	f040 8082 	bne.w	8017638 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017534:	7cfb      	ldrb	r3, [r7, #19]
 8017536:	3301      	adds	r3, #1
 8017538:	74fb      	strb	r3, [r7, #19]
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017540:	7cfa      	ldrb	r2, [r7, #19]
 8017542:	429a      	cmp	r2, r3
 8017544:	d202      	bcs.n	801754c <dhcp_recv+0x7c>
 8017546:	7cfb      	ldrb	r3, [r7, #19]
 8017548:	2b05      	cmp	r3, #5
 801754a:	d9e7      	bls.n	801751c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801754c:	697b      	ldr	r3, [r7, #20]
 801754e:	685b      	ldr	r3, [r3, #4]
 8017550:	4618      	mov	r0, r3
 8017552:	f7f6 fa2a 	bl	800d9aa <lwip_htonl>
 8017556:	4602      	mov	r2, r0
 8017558:	69bb      	ldr	r3, [r7, #24]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	429a      	cmp	r2, r3
 801755e:	d16d      	bne.n	801763c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017560:	69b9      	ldr	r1, [r7, #24]
 8017562:	6878      	ldr	r0, [r7, #4]
 8017564:	f7ff fcd0 	bl	8016f08 <dhcp_parse_reply>
 8017568:	4603      	mov	r3, r0
 801756a:	2b00      	cmp	r3, #0
 801756c:	d168      	bne.n	8017640 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801756e:	4b3b      	ldr	r3, [pc, #236]	@ (801765c <dhcp_recv+0x18c>)
 8017570:	785b      	ldrb	r3, [r3, #1]
 8017572:	2b00      	cmp	r3, #0
 8017574:	d066      	beq.n	8017644 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	685b      	ldr	r3, [r3, #4]
 801757a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801757c:	4b38      	ldr	r3, [pc, #224]	@ (8017660 <dhcp_recv+0x190>)
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017584:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017588:	2b05      	cmp	r3, #5
 801758a:	d12a      	bne.n	80175e2 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801758c:	69bb      	ldr	r3, [r7, #24]
 801758e:	795b      	ldrb	r3, [r3, #5]
 8017590:	2b01      	cmp	r3, #1
 8017592:	d112      	bne.n	80175ba <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8017594:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017596:	69f8      	ldr	r0, [r7, #28]
 8017598:	f7fe fe06 	bl	80161a8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80175a2:	f003 0308 	and.w	r3, r3, #8
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d003      	beq.n	80175b2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80175aa:	69f8      	ldr	r0, [r7, #28]
 80175ac:	f7fe fb76 	bl	8015c9c <dhcp_check>
 80175b0:	e04b      	b.n	801764a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80175b2:	69f8      	ldr	r0, [r7, #28]
 80175b4:	f7ff f856 	bl	8016664 <dhcp_bind>
 80175b8:	e047      	b.n	801764a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80175ba:	69bb      	ldr	r3, [r7, #24]
 80175bc:	795b      	ldrb	r3, [r3, #5]
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d007      	beq.n	80175d2 <dhcp_recv+0x102>
 80175c2:	69bb      	ldr	r3, [r7, #24]
 80175c4:	795b      	ldrb	r3, [r3, #5]
 80175c6:	2b04      	cmp	r3, #4
 80175c8:	d003      	beq.n	80175d2 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80175ca:	69bb      	ldr	r3, [r7, #24]
 80175cc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80175ce:	2b05      	cmp	r3, #5
 80175d0:	d13b      	bne.n	801764a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 80175d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80175d4:	69f8      	ldr	r0, [r7, #28]
 80175d6:	f7fe fde7 	bl	80161a8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80175da:	69f8      	ldr	r0, [r7, #28]
 80175dc:	f7ff f842 	bl	8016664 <dhcp_bind>
 80175e0:	e033      	b.n	801764a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80175e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80175e6:	2b06      	cmp	r3, #6
 80175e8:	d113      	bne.n	8017612 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80175ea:	69bb      	ldr	r3, [r7, #24]
 80175ec:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80175ee:	2b03      	cmp	r3, #3
 80175f0:	d00b      	beq.n	801760a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	795b      	ldrb	r3, [r3, #5]
 80175f6:	2b01      	cmp	r3, #1
 80175f8:	d007      	beq.n	801760a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80175fe:	2b04      	cmp	r3, #4
 8017600:	d003      	beq.n	801760a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	795b      	ldrb	r3, [r3, #5]
 8017606:	2b05      	cmp	r3, #5
 8017608:	d103      	bne.n	8017612 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801760a:	69f8      	ldr	r0, [r7, #28]
 801760c:	f7fe fb2c 	bl	8015c68 <dhcp_handle_nak>
 8017610:	e01b      	b.n	801764a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017612:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017616:	2b02      	cmp	r3, #2
 8017618:	d116      	bne.n	8017648 <dhcp_recv+0x178>
 801761a:	69bb      	ldr	r3, [r7, #24]
 801761c:	795b      	ldrb	r3, [r3, #5]
 801761e:	2b06      	cmp	r3, #6
 8017620:	d112      	bne.n	8017648 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017622:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017624:	69f8      	ldr	r0, [r7, #28]
 8017626:	f7fe fb6d 	bl	8015d04 <dhcp_handle_offer>
 801762a:	e00e      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801762c:	bf00      	nop
 801762e:	e00c      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017630:	bf00      	nop
 8017632:	e00a      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017634:	bf00      	nop
 8017636:	e008      	b.n	801764a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017638:	bf00      	nop
 801763a:	e006      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801763c:	bf00      	nop
 801763e:	e004      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017640:	bf00      	nop
 8017642:	e002      	b.n	801764a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017644:	bf00      	nop
 8017646:	e000      	b.n	801764a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017648:	bf00      	nop
  pbuf_free(p);
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f7f7 feba 	bl	800f3c4 <pbuf_free>
}
 8017650:	bf00      	nop
 8017652:	3728      	adds	r7, #40	@ 0x28
 8017654:	46bd      	mov	sp, r7
 8017656:	bd80      	pop	{r7, pc}
 8017658:	2000a2fc 	.word	0x2000a2fc
 801765c:	20013df4 	.word	0x20013df4
 8017660:	20013dd4 	.word	0x20013dd4

08017664 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b088      	sub	sp, #32
 8017668:	af00      	add	r7, sp, #0
 801766a:	60f8      	str	r0, [r7, #12]
 801766c:	60b9      	str	r1, [r7, #8]
 801766e:	603b      	str	r3, [r7, #0]
 8017670:	4613      	mov	r3, r2
 8017672:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d108      	bne.n	801768c <dhcp_create_msg+0x28>
 801767a:	4b5f      	ldr	r3, [pc, #380]	@ (80177f8 <dhcp_create_msg+0x194>)
 801767c:	f240 7269 	movw	r2, #1897	@ 0x769
 8017680:	495e      	ldr	r1, [pc, #376]	@ (80177fc <dhcp_create_msg+0x198>)
 8017682:	485f      	ldr	r0, [pc, #380]	@ (8017800 <dhcp_create_msg+0x19c>)
 8017684:	f003 fcdc 	bl	801b040 <iprintf>
 8017688:	2300      	movs	r3, #0
 801768a:	e0b1      	b.n	80177f0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d108      	bne.n	80176a4 <dhcp_create_msg+0x40>
 8017692:	4b59      	ldr	r3, [pc, #356]	@ (80177f8 <dhcp_create_msg+0x194>)
 8017694:	f240 726a 	movw	r2, #1898	@ 0x76a
 8017698:	495a      	ldr	r1, [pc, #360]	@ (8017804 <dhcp_create_msg+0x1a0>)
 801769a:	4859      	ldr	r0, [pc, #356]	@ (8017800 <dhcp_create_msg+0x19c>)
 801769c:	f003 fcd0 	bl	801b040 <iprintf>
 80176a0:	2300      	movs	r3, #0
 80176a2:	e0a5      	b.n	80177f0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80176a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80176a8:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80176ac:	2036      	movs	r0, #54	@ 0x36
 80176ae:	f7f7 fba1 	bl	800edf4 <pbuf_alloc>
 80176b2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80176b4:	69bb      	ldr	r3, [r7, #24]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d101      	bne.n	80176be <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80176ba:	2300      	movs	r3, #0
 80176bc:	e098      	b.n	80177f0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80176be:	69bb      	ldr	r3, [r7, #24]
 80176c0:	895b      	ldrh	r3, [r3, #10]
 80176c2:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80176c6:	d206      	bcs.n	80176d6 <dhcp_create_msg+0x72>
 80176c8:	4b4b      	ldr	r3, [pc, #300]	@ (80177f8 <dhcp_create_msg+0x194>)
 80176ca:	f240 7271 	movw	r2, #1905	@ 0x771
 80176ce:	494e      	ldr	r1, [pc, #312]	@ (8017808 <dhcp_create_msg+0x1a4>)
 80176d0:	484b      	ldr	r0, [pc, #300]	@ (8017800 <dhcp_create_msg+0x19c>)
 80176d2:	f003 fcb5 	bl	801b040 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80176d6:	79fb      	ldrb	r3, [r7, #7]
 80176d8:	2b03      	cmp	r3, #3
 80176da:	d103      	bne.n	80176e4 <dhcp_create_msg+0x80>
 80176dc:	68bb      	ldr	r3, [r7, #8]
 80176de:	795b      	ldrb	r3, [r3, #5]
 80176e0:	2b03      	cmp	r3, #3
 80176e2:	d10d      	bne.n	8017700 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	799b      	ldrb	r3, [r3, #6]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d105      	bne.n	80176f8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80176ec:	f002 fed8 	bl	801a4a0 <rand>
 80176f0:	4603      	mov	r3, r0
 80176f2:	461a      	mov	r2, r3
 80176f4:	4b45      	ldr	r3, [pc, #276]	@ (801780c <dhcp_create_msg+0x1a8>)
 80176f6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80176f8:	4b44      	ldr	r3, [pc, #272]	@ (801780c <dhcp_create_msg+0x1a8>)
 80176fa:	681a      	ldr	r2, [r3, #0]
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017700:	69bb      	ldr	r3, [r7, #24]
 8017702:	685b      	ldr	r3, [r3, #4]
 8017704:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017706:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801770a:	2100      	movs	r1, #0
 801770c:	6978      	ldr	r0, [r7, #20]
 801770e:	f003 fdf9 	bl	801b304 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017712:	697b      	ldr	r3, [r7, #20]
 8017714:	2201      	movs	r2, #1
 8017716:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017718:	697b      	ldr	r3, [r7, #20]
 801771a:	2201      	movs	r2, #1
 801771c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8017724:	697b      	ldr	r3, [r7, #20]
 8017726:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	4618      	mov	r0, r3
 801772e:	f7f6 f93c 	bl	800d9aa <lwip_htonl>
 8017732:	4602      	mov	r2, r0
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	2b08      	cmp	r3, #8
 801773c:	d010      	beq.n	8017760 <dhcp_create_msg+0xfc>
 801773e:	79fb      	ldrb	r3, [r7, #7]
 8017740:	2b04      	cmp	r3, #4
 8017742:	d00d      	beq.n	8017760 <dhcp_create_msg+0xfc>
 8017744:	79fb      	ldrb	r3, [r7, #7]
 8017746:	2b07      	cmp	r3, #7
 8017748:	d00a      	beq.n	8017760 <dhcp_create_msg+0xfc>
 801774a:	79fb      	ldrb	r3, [r7, #7]
 801774c:	2b03      	cmp	r3, #3
 801774e:	d10c      	bne.n	801776a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017754:	2b05      	cmp	r3, #5
 8017756:	d003      	beq.n	8017760 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	795b      	ldrb	r3, [r3, #5]
 801775c:	2b04      	cmp	r3, #4
 801775e:	d104      	bne.n	801776a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	3304      	adds	r3, #4
 8017764:	681a      	ldr	r2, [r3, #0]
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801776a:	2300      	movs	r3, #0
 801776c:	83fb      	strh	r3, [r7, #30]
 801776e:	e00c      	b.n	801778a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017770:	8bfa      	ldrh	r2, [r7, #30]
 8017772:	8bfb      	ldrh	r3, [r7, #30]
 8017774:	68f9      	ldr	r1, [r7, #12]
 8017776:	440a      	add	r2, r1
 8017778:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801777c:	697a      	ldr	r2, [r7, #20]
 801777e:	4413      	add	r3, r2
 8017780:	460a      	mov	r2, r1
 8017782:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017784:	8bfb      	ldrh	r3, [r7, #30]
 8017786:	3301      	adds	r3, #1
 8017788:	83fb      	strh	r3, [r7, #30]
 801778a:	8bfb      	ldrh	r3, [r7, #30]
 801778c:	2b05      	cmp	r3, #5
 801778e:	d9ef      	bls.n	8017770 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017790:	697b      	ldr	r3, [r7, #20]
 8017792:	2200      	movs	r2, #0
 8017794:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017798:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801779c:	2200      	movs	r2, #0
 801779e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80177a2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80177a6:	2200      	movs	r2, #0
 80177a8:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80177ac:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80177b0:	2200      	movs	r2, #0
 80177b2:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80177b6:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80177c0:	2301      	movs	r3, #1
 80177c2:	2235      	movs	r2, #53	@ 0x35
 80177c4:	2000      	movs	r0, #0
 80177c6:	f7ff facf 	bl	8016d68 <dhcp_option>
 80177ca:	4603      	mov	r3, r0
 80177cc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80177d4:	79fa      	ldrb	r2, [r7, #7]
 80177d6:	8a7b      	ldrh	r3, [r7, #18]
 80177d8:	4618      	mov	r0, r3
 80177da:	f7ff faf9 	bl	8016dd0 <dhcp_option_byte>
 80177de:	4603      	mov	r3, r0
 80177e0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80177e2:	683b      	ldr	r3, [r7, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d002      	beq.n	80177ee <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	8a7a      	ldrh	r2, [r7, #18]
 80177ec:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80177ee:	69bb      	ldr	r3, [r7, #24]
}
 80177f0:	4618      	mov	r0, r3
 80177f2:	3720      	adds	r7, #32
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	0801fdf0 	.word	0x0801fdf0
 80177fc:	08020110 	.word	0x08020110
 8017800:	0801fe50 	.word	0x0801fe50
 8017804:	08020130 	.word	0x08020130
 8017808:	08020150 	.word	0x08020150
 801780c:	20013e04 	.word	0x20013e04

08017810 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017810:	b580      	push	{r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af00      	add	r7, sp, #0
 8017816:	4603      	mov	r3, r0
 8017818:	60b9      	str	r1, [r7, #8]
 801781a:	607a      	str	r2, [r7, #4]
 801781c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801781e:	89fb      	ldrh	r3, [r7, #14]
 8017820:	1c5a      	adds	r2, r3, #1
 8017822:	81fa      	strh	r2, [r7, #14]
 8017824:	461a      	mov	r2, r3
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	4413      	add	r3, r2
 801782a:	22ff      	movs	r2, #255	@ 0xff
 801782c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801782e:	e007      	b.n	8017840 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017830:	89fb      	ldrh	r3, [r7, #14]
 8017832:	1c5a      	adds	r2, r3, #1
 8017834:	81fa      	strh	r2, [r7, #14]
 8017836:	461a      	mov	r2, r3
 8017838:	68bb      	ldr	r3, [r7, #8]
 801783a:	4413      	add	r3, r2
 801783c:	2200      	movs	r2, #0
 801783e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017840:	89fb      	ldrh	r3, [r7, #14]
 8017842:	2b43      	cmp	r3, #67	@ 0x43
 8017844:	d904      	bls.n	8017850 <dhcp_option_trailer+0x40>
 8017846:	89fb      	ldrh	r3, [r7, #14]
 8017848:	f003 0303 	and.w	r3, r3, #3
 801784c:	2b00      	cmp	r3, #0
 801784e:	d002      	beq.n	8017856 <dhcp_option_trailer+0x46>
 8017850:	89fb      	ldrh	r3, [r7, #14]
 8017852:	2b43      	cmp	r3, #67	@ 0x43
 8017854:	d9ec      	bls.n	8017830 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017856:	89fb      	ldrh	r3, [r7, #14]
 8017858:	33f0      	adds	r3, #240	@ 0xf0
 801785a:	b29b      	uxth	r3, r3
 801785c:	4619      	mov	r1, r3
 801785e:	6878      	ldr	r0, [r7, #4]
 8017860:	f7f7 fc2a 	bl	800f0b8 <pbuf_realloc>
}
 8017864:	bf00      	nop
 8017866:	3710      	adds	r7, #16
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801786c:	b480      	push	{r7}
 801786e:	b085      	sub	sp, #20
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d017      	beq.n	80178aa <dhcp_supplied_address+0x3e>
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801787e:	2b00      	cmp	r3, #0
 8017880:	d013      	beq.n	80178aa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017886:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	795b      	ldrb	r3, [r3, #5]
 801788c:	2b0a      	cmp	r3, #10
 801788e:	d007      	beq.n	80178a0 <dhcp_supplied_address+0x34>
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	795b      	ldrb	r3, [r3, #5]
 8017894:	2b05      	cmp	r3, #5
 8017896:	d003      	beq.n	80178a0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801789c:	2b04      	cmp	r3, #4
 801789e:	d101      	bne.n	80178a4 <dhcp_supplied_address+0x38>
 80178a0:	2301      	movs	r3, #1
 80178a2:	e000      	b.n	80178a6 <dhcp_supplied_address+0x3a>
 80178a4:	2300      	movs	r3, #0
 80178a6:	b2db      	uxtb	r3, r3
 80178a8:	e000      	b.n	80178ac <dhcp_supplied_address+0x40>
  }
  return 0;
 80178aa:	2300      	movs	r3, #0
}
 80178ac:	4618      	mov	r0, r3
 80178ae:	3714      	adds	r7, #20
 80178b0:	46bd      	mov	sp, r7
 80178b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b6:	4770      	bx	lr

080178b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b082      	sub	sp, #8
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80178c0:	492b      	ldr	r1, [pc, #172]	@ (8017970 <etharp_free_entry+0xb8>)
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	4613      	mov	r3, r2
 80178c6:	005b      	lsls	r3, r3, #1
 80178c8:	4413      	add	r3, r2
 80178ca:	00db      	lsls	r3, r3, #3
 80178cc:	440b      	add	r3, r1
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d013      	beq.n	80178fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80178d4:	4926      	ldr	r1, [pc, #152]	@ (8017970 <etharp_free_entry+0xb8>)
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	4613      	mov	r3, r2
 80178da:	005b      	lsls	r3, r3, #1
 80178dc:	4413      	add	r3, r2
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	440b      	add	r3, r1
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7f7 fd6d 	bl	800f3c4 <pbuf_free>
    arp_table[i].q = NULL;
 80178ea:	4921      	ldr	r1, [pc, #132]	@ (8017970 <etharp_free_entry+0xb8>)
 80178ec:	687a      	ldr	r2, [r7, #4]
 80178ee:	4613      	mov	r3, r2
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	4413      	add	r3, r2
 80178f4:	00db      	lsls	r3, r3, #3
 80178f6:	440b      	add	r3, r1
 80178f8:	2200      	movs	r2, #0
 80178fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80178fc:	491c      	ldr	r1, [pc, #112]	@ (8017970 <etharp_free_entry+0xb8>)
 80178fe:	687a      	ldr	r2, [r7, #4]
 8017900:	4613      	mov	r3, r2
 8017902:	005b      	lsls	r3, r3, #1
 8017904:	4413      	add	r3, r2
 8017906:	00db      	lsls	r3, r3, #3
 8017908:	440b      	add	r3, r1
 801790a:	3314      	adds	r3, #20
 801790c:	2200      	movs	r2, #0
 801790e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017910:	4917      	ldr	r1, [pc, #92]	@ (8017970 <etharp_free_entry+0xb8>)
 8017912:	687a      	ldr	r2, [r7, #4]
 8017914:	4613      	mov	r3, r2
 8017916:	005b      	lsls	r3, r3, #1
 8017918:	4413      	add	r3, r2
 801791a:	00db      	lsls	r3, r3, #3
 801791c:	440b      	add	r3, r1
 801791e:	3312      	adds	r3, #18
 8017920:	2200      	movs	r2, #0
 8017922:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017924:	4912      	ldr	r1, [pc, #72]	@ (8017970 <etharp_free_entry+0xb8>)
 8017926:	687a      	ldr	r2, [r7, #4]
 8017928:	4613      	mov	r3, r2
 801792a:	005b      	lsls	r3, r3, #1
 801792c:	4413      	add	r3, r2
 801792e:	00db      	lsls	r3, r3, #3
 8017930:	440b      	add	r3, r1
 8017932:	3308      	adds	r3, #8
 8017934:	2200      	movs	r2, #0
 8017936:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017938:	490d      	ldr	r1, [pc, #52]	@ (8017970 <etharp_free_entry+0xb8>)
 801793a:	687a      	ldr	r2, [r7, #4]
 801793c:	4613      	mov	r3, r2
 801793e:	005b      	lsls	r3, r3, #1
 8017940:	4413      	add	r3, r2
 8017942:	00db      	lsls	r3, r3, #3
 8017944:	440b      	add	r3, r1
 8017946:	3304      	adds	r3, #4
 8017948:	2200      	movs	r2, #0
 801794a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801794c:	4908      	ldr	r1, [pc, #32]	@ (8017970 <etharp_free_entry+0xb8>)
 801794e:	687a      	ldr	r2, [r7, #4]
 8017950:	4613      	mov	r3, r2
 8017952:	005b      	lsls	r3, r3, #1
 8017954:	4413      	add	r3, r2
 8017956:	00db      	lsls	r3, r3, #3
 8017958:	440b      	add	r3, r1
 801795a:	3308      	adds	r3, #8
 801795c:	4a05      	ldr	r2, [pc, #20]	@ (8017974 <etharp_free_entry+0xbc>)
 801795e:	3304      	adds	r3, #4
 8017960:	6810      	ldr	r0, [r2, #0]
 8017962:	6018      	str	r0, [r3, #0]
 8017964:	8892      	ldrh	r2, [r2, #4]
 8017966:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017968:	bf00      	nop
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	20013e08 	.word	0x20013e08
 8017974:	0806c658 	.word	0x0806c658

08017978 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801797e:	2300      	movs	r3, #0
 8017980:	607b      	str	r3, [r7, #4]
 8017982:	e09a      	b.n	8017aba <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 8017984:	4951      	ldr	r1, [pc, #324]	@ (8017acc <etharp_tmr+0x154>)
 8017986:	687a      	ldr	r2, [r7, #4]
 8017988:	4613      	mov	r3, r2
 801798a:	005b      	lsls	r3, r3, #1
 801798c:	4413      	add	r3, r2
 801798e:	00db      	lsls	r3, r3, #3
 8017990:	440b      	add	r3, r1
 8017992:	3314      	adds	r3, #20
 8017994:	781b      	ldrb	r3, [r3, #0]
 8017996:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017998:	78fb      	ldrb	r3, [r7, #3]
 801799a:	2b00      	cmp	r3, #0
 801799c:	f000 808a 	beq.w	8017ab4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80179a0:	78fb      	ldrb	r3, [r7, #3]
 80179a2:	2b05      	cmp	r3, #5
 80179a4:	f000 8086 	beq.w	8017ab4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80179a8:	4948      	ldr	r1, [pc, #288]	@ (8017acc <etharp_tmr+0x154>)
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	4613      	mov	r3, r2
 80179ae:	005b      	lsls	r3, r3, #1
 80179b0:	4413      	add	r3, r2
 80179b2:	00db      	lsls	r3, r3, #3
 80179b4:	440b      	add	r3, r1
 80179b6:	3312      	adds	r3, #18
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	3301      	adds	r3, #1
 80179bc:	b298      	uxth	r0, r3
 80179be:	4943      	ldr	r1, [pc, #268]	@ (8017acc <etharp_tmr+0x154>)
 80179c0:	687a      	ldr	r2, [r7, #4]
 80179c2:	4613      	mov	r3, r2
 80179c4:	005b      	lsls	r3, r3, #1
 80179c6:	4413      	add	r3, r2
 80179c8:	00db      	lsls	r3, r3, #3
 80179ca:	440b      	add	r3, r1
 80179cc:	3312      	adds	r3, #18
 80179ce:	4602      	mov	r2, r0
 80179d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80179d2:	493e      	ldr	r1, [pc, #248]	@ (8017acc <etharp_tmr+0x154>)
 80179d4:	687a      	ldr	r2, [r7, #4]
 80179d6:	4613      	mov	r3, r2
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	4413      	add	r3, r2
 80179dc:	00db      	lsls	r3, r3, #3
 80179de:	440b      	add	r3, r1
 80179e0:	3312      	adds	r3, #18
 80179e2:	881b      	ldrh	r3, [r3, #0]
 80179e4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80179e8:	d215      	bcs.n	8017a16 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80179ea:	4938      	ldr	r1, [pc, #224]	@ (8017acc <etharp_tmr+0x154>)
 80179ec:	687a      	ldr	r2, [r7, #4]
 80179ee:	4613      	mov	r3, r2
 80179f0:	005b      	lsls	r3, r3, #1
 80179f2:	4413      	add	r3, r2
 80179f4:	00db      	lsls	r3, r3, #3
 80179f6:	440b      	add	r3, r1
 80179f8:	3314      	adds	r3, #20
 80179fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80179fc:	2b01      	cmp	r3, #1
 80179fe:	d10e      	bne.n	8017a1e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017a00:	4932      	ldr	r1, [pc, #200]	@ (8017acc <etharp_tmr+0x154>)
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	4613      	mov	r3, r2
 8017a06:	005b      	lsls	r3, r3, #1
 8017a08:	4413      	add	r3, r2
 8017a0a:	00db      	lsls	r3, r3, #3
 8017a0c:	440b      	add	r3, r1
 8017a0e:	3312      	adds	r3, #18
 8017a10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017a12:	2b04      	cmp	r3, #4
 8017a14:	d903      	bls.n	8017a1e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f7ff ff4e 	bl	80178b8 <etharp_free_entry>
 8017a1c:	e04a      	b.n	8017ab4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017a1e:	492b      	ldr	r1, [pc, #172]	@ (8017acc <etharp_tmr+0x154>)
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	4613      	mov	r3, r2
 8017a24:	005b      	lsls	r3, r3, #1
 8017a26:	4413      	add	r3, r2
 8017a28:	00db      	lsls	r3, r3, #3
 8017a2a:	440b      	add	r3, r1
 8017a2c:	3314      	adds	r3, #20
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	2b03      	cmp	r3, #3
 8017a32:	d10a      	bne.n	8017a4a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017a34:	4925      	ldr	r1, [pc, #148]	@ (8017acc <etharp_tmr+0x154>)
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	4613      	mov	r3, r2
 8017a3a:	005b      	lsls	r3, r3, #1
 8017a3c:	4413      	add	r3, r2
 8017a3e:	00db      	lsls	r3, r3, #3
 8017a40:	440b      	add	r3, r1
 8017a42:	3314      	adds	r3, #20
 8017a44:	2204      	movs	r2, #4
 8017a46:	701a      	strb	r2, [r3, #0]
 8017a48:	e034      	b.n	8017ab4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017a4a:	4920      	ldr	r1, [pc, #128]	@ (8017acc <etharp_tmr+0x154>)
 8017a4c:	687a      	ldr	r2, [r7, #4]
 8017a4e:	4613      	mov	r3, r2
 8017a50:	005b      	lsls	r3, r3, #1
 8017a52:	4413      	add	r3, r2
 8017a54:	00db      	lsls	r3, r3, #3
 8017a56:	440b      	add	r3, r1
 8017a58:	3314      	adds	r3, #20
 8017a5a:	781b      	ldrb	r3, [r3, #0]
 8017a5c:	2b04      	cmp	r3, #4
 8017a5e:	d10a      	bne.n	8017a76 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017a60:	491a      	ldr	r1, [pc, #104]	@ (8017acc <etharp_tmr+0x154>)
 8017a62:	687a      	ldr	r2, [r7, #4]
 8017a64:	4613      	mov	r3, r2
 8017a66:	005b      	lsls	r3, r3, #1
 8017a68:	4413      	add	r3, r2
 8017a6a:	00db      	lsls	r3, r3, #3
 8017a6c:	440b      	add	r3, r1
 8017a6e:	3314      	adds	r3, #20
 8017a70:	2202      	movs	r2, #2
 8017a72:	701a      	strb	r2, [r3, #0]
 8017a74:	e01e      	b.n	8017ab4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017a76:	4915      	ldr	r1, [pc, #84]	@ (8017acc <etharp_tmr+0x154>)
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	4613      	mov	r3, r2
 8017a7c:	005b      	lsls	r3, r3, #1
 8017a7e:	4413      	add	r3, r2
 8017a80:	00db      	lsls	r3, r3, #3
 8017a82:	440b      	add	r3, r1
 8017a84:	3314      	adds	r3, #20
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	2b01      	cmp	r3, #1
 8017a8a:	d113      	bne.n	8017ab4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017a8c:	490f      	ldr	r1, [pc, #60]	@ (8017acc <etharp_tmr+0x154>)
 8017a8e:	687a      	ldr	r2, [r7, #4]
 8017a90:	4613      	mov	r3, r2
 8017a92:	005b      	lsls	r3, r3, #1
 8017a94:	4413      	add	r3, r2
 8017a96:	00db      	lsls	r3, r3, #3
 8017a98:	440b      	add	r3, r1
 8017a9a:	3308      	adds	r3, #8
 8017a9c:	6818      	ldr	r0, [r3, #0]
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	4613      	mov	r3, r2
 8017aa2:	005b      	lsls	r3, r3, #1
 8017aa4:	4413      	add	r3, r2
 8017aa6:	00db      	lsls	r3, r3, #3
 8017aa8:	4a08      	ldr	r2, [pc, #32]	@ (8017acc <etharp_tmr+0x154>)
 8017aaa:	4413      	add	r3, r2
 8017aac:	3304      	adds	r3, #4
 8017aae:	4619      	mov	r1, r3
 8017ab0:	f000 feae 	bl	8018810 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	3301      	adds	r3, #1
 8017ab8:	607b      	str	r3, [r7, #4]
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	2b09      	cmp	r3, #9
 8017abe:	f77f af61 	ble.w	8017984 <etharp_tmr+0xc>
      }
    }
  }
}
 8017ac2:	bf00      	nop
 8017ac4:	bf00      	nop
 8017ac6:	3708      	adds	r7, #8
 8017ac8:	46bd      	mov	sp, r7
 8017aca:	bd80      	pop	{r7, pc}
 8017acc:	20013e08 	.word	0x20013e08

08017ad0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b08a      	sub	sp, #40	@ 0x28
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	60f8      	str	r0, [r7, #12]
 8017ad8:	460b      	mov	r3, r1
 8017ada:	607a      	str	r2, [r7, #4]
 8017adc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017ade:	230a      	movs	r3, #10
 8017ae0:	843b      	strh	r3, [r7, #32]
 8017ae2:	230a      	movs	r3, #10
 8017ae4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8017ae6:	230a      	movs	r3, #10
 8017ae8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 8017aea:	2300      	movs	r3, #0
 8017aec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017aee:	230a      	movs	r3, #10
 8017af0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017af2:	2300      	movs	r3, #0
 8017af4:	83bb      	strh	r3, [r7, #28]
 8017af6:	2300      	movs	r3, #0
 8017af8:	837b      	strh	r3, [r7, #26]
 8017afa:	2300      	movs	r3, #0
 8017afc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017afe:	2300      	movs	r3, #0
 8017b00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017b02:	e0b1      	b.n	8017c68 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017b04:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017b08:	49a7      	ldr	r1, [pc, #668]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017b0a:	4613      	mov	r3, r2
 8017b0c:	005b      	lsls	r3, r3, #1
 8017b0e:	4413      	add	r3, r2
 8017b10:	00db      	lsls	r3, r3, #3
 8017b12:	440b      	add	r3, r1
 8017b14:	3314      	adds	r3, #20
 8017b16:	781b      	ldrb	r3, [r3, #0]
 8017b18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017b1a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017b1e:	2b0a      	cmp	r3, #10
 8017b20:	d105      	bne.n	8017b2e <etharp_find_entry+0x5e>
 8017b22:	7dfb      	ldrb	r3, [r7, #23]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d102      	bne.n	8017b2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017b28:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017b2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8017b2c:	e098      	b.n	8017c60 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017b2e:	7dfb      	ldrb	r3, [r7, #23]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	f000 8095 	beq.w	8017c60 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017b36:	7dfb      	ldrb	r3, [r7, #23]
 8017b38:	2b01      	cmp	r3, #1
 8017b3a:	d009      	beq.n	8017b50 <etharp_find_entry+0x80>
 8017b3c:	7dfb      	ldrb	r3, [r7, #23]
 8017b3e:	2b01      	cmp	r3, #1
 8017b40:	d806      	bhi.n	8017b50 <etharp_find_entry+0x80>
 8017b42:	4b9a      	ldr	r3, [pc, #616]	@ (8017dac <etharp_find_entry+0x2dc>)
 8017b44:	f240 1223 	movw	r2, #291	@ 0x123
 8017b48:	4999      	ldr	r1, [pc, #612]	@ (8017db0 <etharp_find_entry+0x2e0>)
 8017b4a:	489a      	ldr	r0, [pc, #616]	@ (8017db4 <etharp_find_entry+0x2e4>)
 8017b4c:	f003 fa78 	bl	801b040 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d020      	beq.n	8017b98 <etharp_find_entry+0xc8>
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	6819      	ldr	r1, [r3, #0]
 8017b5a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017b5e:	4892      	ldr	r0, [pc, #584]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017b60:	4613      	mov	r3, r2
 8017b62:	005b      	lsls	r3, r3, #1
 8017b64:	4413      	add	r3, r2
 8017b66:	00db      	lsls	r3, r3, #3
 8017b68:	4403      	add	r3, r0
 8017b6a:	3304      	adds	r3, #4
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4299      	cmp	r1, r3
 8017b70:	d112      	bne.n	8017b98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d00c      	beq.n	8017b92 <etharp_find_entry+0xc2>
 8017b78:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017b7c:	498a      	ldr	r1, [pc, #552]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017b7e:	4613      	mov	r3, r2
 8017b80:	005b      	lsls	r3, r3, #1
 8017b82:	4413      	add	r3, r2
 8017b84:	00db      	lsls	r3, r3, #3
 8017b86:	440b      	add	r3, r1
 8017b88:	3308      	adds	r3, #8
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	687a      	ldr	r2, [r7, #4]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d102      	bne.n	8017b98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017b92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017b96:	e103      	b.n	8017da0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017b98:	7dfb      	ldrb	r3, [r7, #23]
 8017b9a:	2b01      	cmp	r3, #1
 8017b9c:	d140      	bne.n	8017c20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017b9e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017ba2:	4981      	ldr	r1, [pc, #516]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017ba4:	4613      	mov	r3, r2
 8017ba6:	005b      	lsls	r3, r3, #1
 8017ba8:	4413      	add	r3, r2
 8017baa:	00db      	lsls	r3, r3, #3
 8017bac:	440b      	add	r3, r1
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d01a      	beq.n	8017bea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017bb4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017bb8:	497b      	ldr	r1, [pc, #492]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017bba:	4613      	mov	r3, r2
 8017bbc:	005b      	lsls	r3, r3, #1
 8017bbe:	4413      	add	r3, r2
 8017bc0:	00db      	lsls	r3, r3, #3
 8017bc2:	440b      	add	r3, r1
 8017bc4:	3312      	adds	r3, #18
 8017bc6:	881b      	ldrh	r3, [r3, #0]
 8017bc8:	8bba      	ldrh	r2, [r7, #28]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d848      	bhi.n	8017c60 <etharp_find_entry+0x190>
            old_queue = i;
 8017bce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017bd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017bd2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017bd6:	4974      	ldr	r1, [pc, #464]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017bd8:	4613      	mov	r3, r2
 8017bda:	005b      	lsls	r3, r3, #1
 8017bdc:	4413      	add	r3, r2
 8017bde:	00db      	lsls	r3, r3, #3
 8017be0:	440b      	add	r3, r1
 8017be2:	3312      	adds	r3, #18
 8017be4:	881b      	ldrh	r3, [r3, #0]
 8017be6:	83bb      	strh	r3, [r7, #28]
 8017be8:	e03a      	b.n	8017c60 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017bea:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017bee:	496e      	ldr	r1, [pc, #440]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	005b      	lsls	r3, r3, #1
 8017bf4:	4413      	add	r3, r2
 8017bf6:	00db      	lsls	r3, r3, #3
 8017bf8:	440b      	add	r3, r1
 8017bfa:	3312      	adds	r3, #18
 8017bfc:	881b      	ldrh	r3, [r3, #0]
 8017bfe:	8b7a      	ldrh	r2, [r7, #26]
 8017c00:	429a      	cmp	r2, r3
 8017c02:	d82d      	bhi.n	8017c60 <etharp_find_entry+0x190>
            old_pending = i;
 8017c04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c06:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017c08:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017c0c:	4966      	ldr	r1, [pc, #408]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	440b      	add	r3, r1
 8017c18:	3312      	adds	r3, #18
 8017c1a:	881b      	ldrh	r3, [r3, #0]
 8017c1c:	837b      	strh	r3, [r7, #26]
 8017c1e:	e01f      	b.n	8017c60 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017c20:	7dfb      	ldrb	r3, [r7, #23]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d91c      	bls.n	8017c60 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017c26:	7dfb      	ldrb	r3, [r7, #23]
 8017c28:	2b04      	cmp	r3, #4
 8017c2a:	d819      	bhi.n	8017c60 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017c2c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017c30:	495d      	ldr	r1, [pc, #372]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017c32:	4613      	mov	r3, r2
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3312      	adds	r3, #18
 8017c3e:	881b      	ldrh	r3, [r3, #0]
 8017c40:	8b3a      	ldrh	r2, [r7, #24]
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d80c      	bhi.n	8017c60 <etharp_find_entry+0x190>
            old_stable = i;
 8017c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c48:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 8017c4a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017c4e:	4956      	ldr	r1, [pc, #344]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017c50:	4613      	mov	r3, r2
 8017c52:	005b      	lsls	r3, r3, #1
 8017c54:	4413      	add	r3, r2
 8017c56:	00db      	lsls	r3, r3, #3
 8017c58:	440b      	add	r3, r1
 8017c5a:	3312      	adds	r3, #18
 8017c5c:	881b      	ldrh	r3, [r3, #0]
 8017c5e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c60:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017c62:	3301      	adds	r3, #1
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017c68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017c6c:	2b09      	cmp	r3, #9
 8017c6e:	f77f af49 	ble.w	8017b04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017c72:	7afb      	ldrb	r3, [r7, #11]
 8017c74:	f003 0302 	and.w	r3, r3, #2
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d108      	bne.n	8017c8e <etharp_find_entry+0x1be>
 8017c7c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017c80:	2b0a      	cmp	r3, #10
 8017c82:	d107      	bne.n	8017c94 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017c84:	7afb      	ldrb	r3, [r7, #11]
 8017c86:	f003 0301 	and.w	r3, r3, #1
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d102      	bne.n	8017c94 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c92:	e085      	b.n	8017da0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017c94:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8017c98:	2b09      	cmp	r3, #9
 8017c9a:	dc02      	bgt.n	8017ca2 <etharp_find_entry+0x1d2>
    i = empty;
 8017c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017c9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017ca0:	e039      	b.n	8017d16 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017ca2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8017ca6:	2b09      	cmp	r3, #9
 8017ca8:	dc14      	bgt.n	8017cd4 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8017caa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017cac:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017cae:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017cb2:	493d      	ldr	r1, [pc, #244]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	4413      	add	r3, r2
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	440b      	add	r3, r1
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d018      	beq.n	8017cf6 <etharp_find_entry+0x226>
 8017cc4:	4b39      	ldr	r3, [pc, #228]	@ (8017dac <etharp_find_entry+0x2dc>)
 8017cc6:	f240 126d 	movw	r2, #365	@ 0x16d
 8017cca:	493b      	ldr	r1, [pc, #236]	@ (8017db8 <etharp_find_entry+0x2e8>)
 8017ccc:	4839      	ldr	r0, [pc, #228]	@ (8017db4 <etharp_find_entry+0x2e4>)
 8017cce:	f003 f9b7 	bl	801b040 <iprintf>
 8017cd2:	e010      	b.n	8017cf6 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017cd4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017cd8:	2b09      	cmp	r3, #9
 8017cda:	dc02      	bgt.n	8017ce2 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8017cdc:	8c3b      	ldrh	r3, [r7, #32]
 8017cde:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017ce0:	e009      	b.n	8017cf6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017ce2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017ce6:	2b09      	cmp	r3, #9
 8017ce8:	dc02      	bgt.n	8017cf0 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017cea:	8bfb      	ldrh	r3, [r7, #30]
 8017cec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8017cee:	e002      	b.n	8017cf6 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8017cf4:	e054      	b.n	8017da0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017cf6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017cfa:	2b09      	cmp	r3, #9
 8017cfc:	dd06      	ble.n	8017d0c <etharp_find_entry+0x23c>
 8017cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8017dac <etharp_find_entry+0x2dc>)
 8017d00:	f240 127f 	movw	r2, #383	@ 0x17f
 8017d04:	492d      	ldr	r1, [pc, #180]	@ (8017dbc <etharp_find_entry+0x2ec>)
 8017d06:	482b      	ldr	r0, [pc, #172]	@ (8017db4 <etharp_find_entry+0x2e4>)
 8017d08:	f003 f99a 	bl	801b040 <iprintf>
    etharp_free_entry(i);
 8017d0c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017d10:	4618      	mov	r0, r3
 8017d12:	f7ff fdd1 	bl	80178b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017d16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8017d1a:	2b09      	cmp	r3, #9
 8017d1c:	dd06      	ble.n	8017d2c <etharp_find_entry+0x25c>
 8017d1e:	4b23      	ldr	r3, [pc, #140]	@ (8017dac <etharp_find_entry+0x2dc>)
 8017d20:	f240 1283 	movw	r2, #387	@ 0x183
 8017d24:	4925      	ldr	r1, [pc, #148]	@ (8017dbc <etharp_find_entry+0x2ec>)
 8017d26:	4823      	ldr	r0, [pc, #140]	@ (8017db4 <etharp_find_entry+0x2e4>)
 8017d28:	f003 f98a 	bl	801b040 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017d2c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d30:	491d      	ldr	r1, [pc, #116]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017d32:	4613      	mov	r3, r2
 8017d34:	005b      	lsls	r3, r3, #1
 8017d36:	4413      	add	r3, r2
 8017d38:	00db      	lsls	r3, r3, #3
 8017d3a:	440b      	add	r3, r1
 8017d3c:	3314      	adds	r3, #20
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d006      	beq.n	8017d52 <etharp_find_entry+0x282>
 8017d44:	4b19      	ldr	r3, [pc, #100]	@ (8017dac <etharp_find_entry+0x2dc>)
 8017d46:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8017d4a:	491d      	ldr	r1, [pc, #116]	@ (8017dc0 <etharp_find_entry+0x2f0>)
 8017d4c:	4819      	ldr	r0, [pc, #100]	@ (8017db4 <etharp_find_entry+0x2e4>)
 8017d4e:	f003 f977 	bl	801b040 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d00b      	beq.n	8017d70 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017d58:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	6819      	ldr	r1, [r3, #0]
 8017d60:	4811      	ldr	r0, [pc, #68]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017d62:	4613      	mov	r3, r2
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	4413      	add	r3, r2
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	4403      	add	r3, r0
 8017d6c:	3304      	adds	r3, #4
 8017d6e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017d70:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d74:	490c      	ldr	r1, [pc, #48]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017d76:	4613      	mov	r3, r2
 8017d78:	005b      	lsls	r3, r3, #1
 8017d7a:	4413      	add	r3, r2
 8017d7c:	00db      	lsls	r3, r3, #3
 8017d7e:	440b      	add	r3, r1
 8017d80:	3312      	adds	r3, #18
 8017d82:	2200      	movs	r2, #0
 8017d84:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017d86:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8017d8a:	4907      	ldr	r1, [pc, #28]	@ (8017da8 <etharp_find_entry+0x2d8>)
 8017d8c:	4613      	mov	r3, r2
 8017d8e:	005b      	lsls	r3, r3, #1
 8017d90:	4413      	add	r3, r2
 8017d92:	00db      	lsls	r3, r3, #3
 8017d94:	440b      	add	r3, r1
 8017d96:	3308      	adds	r3, #8
 8017d98:	687a      	ldr	r2, [r7, #4]
 8017d9a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017d9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3728      	adds	r7, #40	@ 0x28
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}
 8017da8:	20013e08 	.word	0x20013e08
 8017dac:	08020190 	.word	0x08020190
 8017db0:	080201c8 	.word	0x080201c8
 8017db4:	08020208 	.word	0x08020208
 8017db8:	08020230 	.word	0x08020230
 8017dbc:	08020248 	.word	0x08020248
 8017dc0:	0802025c 	.word	0x0802025c

08017dc4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b088      	sub	sp, #32
 8017dc8:	af02      	add	r7, sp, #8
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
 8017dd0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017dd8:	2b06      	cmp	r3, #6
 8017dda:	d006      	beq.n	8017dea <etharp_update_arp_entry+0x26>
 8017ddc:	4b58      	ldr	r3, [pc, #352]	@ (8017f40 <etharp_update_arp_entry+0x17c>)
 8017dde:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8017de2:	4958      	ldr	r1, [pc, #352]	@ (8017f44 <etharp_update_arp_entry+0x180>)
 8017de4:	4858      	ldr	r0, [pc, #352]	@ (8017f48 <etharp_update_arp_entry+0x184>)
 8017de6:	f003 f92b 	bl	801b040 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d012      	beq.n	8017e16 <etharp_update_arp_entry+0x52>
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d00e      	beq.n	8017e16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	68f9      	ldr	r1, [r7, #12]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f001 fa00 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8017e04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d105      	bne.n	8017e16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017e12:	2be0      	cmp	r3, #224	@ 0xe0
 8017e14:	d102      	bne.n	8017e1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017e16:	f06f 030f 	mvn.w	r3, #15
 8017e1a:	e08c      	b.n	8017f36 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017e1c:	78fb      	ldrb	r3, [r7, #3]
 8017e1e:	68fa      	ldr	r2, [r7, #12]
 8017e20:	4619      	mov	r1, r3
 8017e22:	68b8      	ldr	r0, [r7, #8]
 8017e24:	f7ff fe54 	bl	8017ad0 <etharp_find_entry>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017e2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	da02      	bge.n	8017e3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017e34:	8afb      	ldrh	r3, [r7, #22]
 8017e36:	b25b      	sxtb	r3, r3
 8017e38:	e07d      	b.n	8017f36 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8017e3a:	78fb      	ldrb	r3, [r7, #3]
 8017e3c:	f003 0304 	and.w	r3, r3, #4
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d00b      	beq.n	8017e5c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8017e44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e48:	4940      	ldr	r1, [pc, #256]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017e4a:	4613      	mov	r3, r2
 8017e4c:	005b      	lsls	r3, r3, #1
 8017e4e:	4413      	add	r3, r2
 8017e50:	00db      	lsls	r3, r3, #3
 8017e52:	440b      	add	r3, r1
 8017e54:	3314      	adds	r3, #20
 8017e56:	2205      	movs	r2, #5
 8017e58:	701a      	strb	r2, [r3, #0]
 8017e5a:	e019      	b.n	8017e90 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8017e5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e60:	493a      	ldr	r1, [pc, #232]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017e62:	4613      	mov	r3, r2
 8017e64:	005b      	lsls	r3, r3, #1
 8017e66:	4413      	add	r3, r2
 8017e68:	00db      	lsls	r3, r3, #3
 8017e6a:	440b      	add	r3, r1
 8017e6c:	3314      	adds	r3, #20
 8017e6e:	781b      	ldrb	r3, [r3, #0]
 8017e70:	2b05      	cmp	r3, #5
 8017e72:	d102      	bne.n	8017e7a <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8017e74:	f06f 0305 	mvn.w	r3, #5
 8017e78:	e05d      	b.n	8017f36 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017e7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e7e:	4933      	ldr	r1, [pc, #204]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017e80:	4613      	mov	r3, r2
 8017e82:	005b      	lsls	r3, r3, #1
 8017e84:	4413      	add	r3, r2
 8017e86:	00db      	lsls	r3, r3, #3
 8017e88:	440b      	add	r3, r1
 8017e8a:	3314      	adds	r3, #20
 8017e8c:	2202      	movs	r2, #2
 8017e8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017e90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e94:	492d      	ldr	r1, [pc, #180]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017e96:	4613      	mov	r3, r2
 8017e98:	005b      	lsls	r3, r3, #1
 8017e9a:	4413      	add	r3, r2
 8017e9c:	00db      	lsls	r3, r3, #3
 8017e9e:	440b      	add	r3, r1
 8017ea0:	3308      	adds	r3, #8
 8017ea2:	68fa      	ldr	r2, [r7, #12]
 8017ea4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017ea6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017eaa:	4613      	mov	r3, r2
 8017eac:	005b      	lsls	r3, r3, #1
 8017eae:	4413      	add	r3, r2
 8017eb0:	00db      	lsls	r3, r3, #3
 8017eb2:	3308      	adds	r3, #8
 8017eb4:	4a25      	ldr	r2, [pc, #148]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017eb6:	4413      	add	r3, r2
 8017eb8:	3304      	adds	r3, #4
 8017eba:	2206      	movs	r2, #6
 8017ebc:	6879      	ldr	r1, [r7, #4]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f003 fadd 	bl	801b47e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017ec4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ec8:	4920      	ldr	r1, [pc, #128]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017eca:	4613      	mov	r3, r2
 8017ecc:	005b      	lsls	r3, r3, #1
 8017ece:	4413      	add	r3, r2
 8017ed0:	00db      	lsls	r3, r3, #3
 8017ed2:	440b      	add	r3, r1
 8017ed4:	3312      	adds	r3, #18
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017eda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ede:	491b      	ldr	r1, [pc, #108]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	4413      	add	r3, r2
 8017ee6:	00db      	lsls	r3, r3, #3
 8017ee8:	440b      	add	r3, r1
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d021      	beq.n	8017f34 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8017ef0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ef4:	4915      	ldr	r1, [pc, #84]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017ef6:	4613      	mov	r3, r2
 8017ef8:	005b      	lsls	r3, r3, #1
 8017efa:	4413      	add	r3, r2
 8017efc:	00db      	lsls	r3, r3, #3
 8017efe:	440b      	add	r3, r1
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017f04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f08:	4910      	ldr	r1, [pc, #64]	@ (8017f4c <etharp_update_arp_entry+0x188>)
 8017f0a:	4613      	mov	r3, r2
 8017f0c:	005b      	lsls	r3, r3, #1
 8017f0e:	4413      	add	r3, r2
 8017f10:	00db      	lsls	r3, r3, #3
 8017f12:	440b      	add	r3, r1
 8017f14:	2200      	movs	r2, #0
 8017f16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017f18:	68fb      	ldr	r3, [r7, #12]
 8017f1a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8017f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8017f22:	9300      	str	r3, [sp, #0]
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	6939      	ldr	r1, [r7, #16]
 8017f28:	68f8      	ldr	r0, [r7, #12]
 8017f2a:	f002 f889 	bl	801a040 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017f2e:	6938      	ldr	r0, [r7, #16]
 8017f30:	f7f7 fa48 	bl	800f3c4 <pbuf_free>
  }
  return ERR_OK;
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3718      	adds	r7, #24
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	08020190 	.word	0x08020190
 8017f44:	08020288 	.word	0x08020288
 8017f48:	08020208 	.word	0x08020208
 8017f4c:	20013e08 	.word	0x20013e08

08017f50 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b084      	sub	sp, #16
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f000 fe2c 	bl	8018bb8 <ip4_route>
 8017f60:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d102      	bne.n	8017f6e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8017f68:	f06f 0303 	mvn.w	r3, #3
 8017f6c:	e006      	b.n	8017f7c <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 8017f6e:	2305      	movs	r3, #5
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	6879      	ldr	r1, [r7, #4]
 8017f74:	68f8      	ldr	r0, [r7, #12]
 8017f76:	f7ff ff25 	bl	8017dc4 <etharp_update_arp_entry>
 8017f7a:	4603      	mov	r3, r0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3710      	adds	r7, #16
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}

08017f84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b084      	sub	sp, #16
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	60fb      	str	r3, [r7, #12]
 8017f90:	e01e      	b.n	8017fd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017f92:	4913      	ldr	r1, [pc, #76]	@ (8017fe0 <etharp_cleanup_netif+0x5c>)
 8017f94:	68fa      	ldr	r2, [r7, #12]
 8017f96:	4613      	mov	r3, r2
 8017f98:	005b      	lsls	r3, r3, #1
 8017f9a:	4413      	add	r3, r2
 8017f9c:	00db      	lsls	r3, r3, #3
 8017f9e:	440b      	add	r3, r1
 8017fa0:	3314      	adds	r3, #20
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017fa6:	7afb      	ldrb	r3, [r7, #11]
 8017fa8:	2b00      	cmp	r3, #0
 8017faa:	d00e      	beq.n	8017fca <etharp_cleanup_netif+0x46>
 8017fac:	490c      	ldr	r1, [pc, #48]	@ (8017fe0 <etharp_cleanup_netif+0x5c>)
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	4613      	mov	r3, r2
 8017fb2:	005b      	lsls	r3, r3, #1
 8017fb4:	4413      	add	r3, r2
 8017fb6:	00db      	lsls	r3, r3, #3
 8017fb8:	440b      	add	r3, r1
 8017fba:	3308      	adds	r3, #8
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	687a      	ldr	r2, [r7, #4]
 8017fc0:	429a      	cmp	r2, r3
 8017fc2:	d102      	bne.n	8017fca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017fc4:	68f8      	ldr	r0, [r7, #12]
 8017fc6:	f7ff fc77 	bl	80178b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	3301      	adds	r3, #1
 8017fce:	60fb      	str	r3, [r7, #12]
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	2b09      	cmp	r3, #9
 8017fd4:	dddd      	ble.n	8017f92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017fd6:	bf00      	nop
 8017fd8:	bf00      	nop
 8017fda:	3710      	adds	r7, #16
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}
 8017fe0:	20013e08 	.word	0x20013e08

08017fe4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017fe4:	b5b0      	push	{r4, r5, r7, lr}
 8017fe6:	b08a      	sub	sp, #40	@ 0x28
 8017fe8:	af04      	add	r7, sp, #16
 8017fea:	6078      	str	r0, [r7, #4]
 8017fec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017fee:	683b      	ldr	r3, [r7, #0]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d107      	bne.n	8018004 <etharp_input+0x20>
 8017ff4:	4b3f      	ldr	r3, [pc, #252]	@ (80180f4 <etharp_input+0x110>)
 8017ff6:	f240 228a 	movw	r2, #650	@ 0x28a
 8017ffa:	493f      	ldr	r1, [pc, #252]	@ (80180f8 <etharp_input+0x114>)
 8017ffc:	483f      	ldr	r0, [pc, #252]	@ (80180fc <etharp_input+0x118>)
 8017ffe:	f003 f81f 	bl	801b040 <iprintf>
 8018002:	e074      	b.n	80180ee <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	685b      	ldr	r3, [r3, #4]
 8018008:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	b29b      	uxth	r3, r3
 8018010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018014:	d10c      	bne.n	8018030 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801801a:	2b06      	cmp	r3, #6
 801801c:	d108      	bne.n	8018030 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018022:	2b04      	cmp	r3, #4
 8018024:	d104      	bne.n	8018030 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	885b      	ldrh	r3, [r3, #2]
 801802a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801802c:	2b08      	cmp	r3, #8
 801802e:	d003      	beq.n	8018038 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018030:	6878      	ldr	r0, [r7, #4]
 8018032:	f7f7 f9c7 	bl	800f3c4 <pbuf_free>
    return;
 8018036:	e05a      	b.n	80180ee <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018038:	697b      	ldr	r3, [r7, #20]
 801803a:	330e      	adds	r3, #14
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018040:	697b      	ldr	r3, [r7, #20]
 8018042:	3318      	adds	r3, #24
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	3304      	adds	r3, #4
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d102      	bne.n	8018058 <etharp_input+0x74>
    for_us = 0;
 8018052:	2300      	movs	r3, #0
 8018054:	74fb      	strb	r3, [r7, #19]
 8018056:	e009      	b.n	801806c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018058:	68ba      	ldr	r2, [r7, #8]
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	3304      	adds	r3, #4
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	429a      	cmp	r2, r3
 8018062:	bf0c      	ite	eq
 8018064:	2301      	moveq	r3, #1
 8018066:	2300      	movne	r3, #0
 8018068:	b2db      	uxtb	r3, r3
 801806a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801806c:	697b      	ldr	r3, [r7, #20]
 801806e:	f103 0208 	add.w	r2, r3, #8
 8018072:	7cfb      	ldrb	r3, [r7, #19]
 8018074:	2b00      	cmp	r3, #0
 8018076:	d001      	beq.n	801807c <etharp_input+0x98>
 8018078:	2301      	movs	r3, #1
 801807a:	e000      	b.n	801807e <etharp_input+0x9a>
 801807c:	2302      	movs	r3, #2
 801807e:	f107 010c 	add.w	r1, r7, #12
 8018082:	6838      	ldr	r0, [r7, #0]
 8018084:	f7ff fe9e 	bl	8017dc4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018088:	697b      	ldr	r3, [r7, #20]
 801808a:	88db      	ldrh	r3, [r3, #6]
 801808c:	b29b      	uxth	r3, r3
 801808e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018092:	d003      	beq.n	801809c <etharp_input+0xb8>
 8018094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018098:	d01e      	beq.n	80180d8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801809a:	e025      	b.n	80180e8 <etharp_input+0x104>
      if (for_us) {
 801809c:	7cfb      	ldrb	r3, [r7, #19]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d021      	beq.n	80180e6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80180b8:	697a      	ldr	r2, [r7, #20]
 80180ba:	3208      	adds	r2, #8
        etharp_raw(netif,
 80180bc:	2102      	movs	r1, #2
 80180be:	9103      	str	r1, [sp, #12]
 80180c0:	f107 010c 	add.w	r1, r7, #12
 80180c4:	9102      	str	r1, [sp, #8]
 80180c6:	9201      	str	r2, [sp, #4]
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	462b      	mov	r3, r5
 80180cc:	4622      	mov	r2, r4
 80180ce:	4601      	mov	r1, r0
 80180d0:	6838      	ldr	r0, [r7, #0]
 80180d2:	f000 faef 	bl	80186b4 <etharp_raw>
      break;
 80180d6:	e006      	b.n	80180e6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80180d8:	f107 030c 	add.w	r3, r7, #12
 80180dc:	4619      	mov	r1, r3
 80180de:	6838      	ldr	r0, [r7, #0]
 80180e0:	f7fe f97c 	bl	80163dc <dhcp_arp_reply>
      break;
 80180e4:	e000      	b.n	80180e8 <etharp_input+0x104>
      break;
 80180e6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f7f7 f96b 	bl	800f3c4 <pbuf_free>
}
 80180ee:	3718      	adds	r7, #24
 80180f0:	46bd      	mov	sp, r7
 80180f2:	bdb0      	pop	{r4, r5, r7, pc}
 80180f4:	08020190 	.word	0x08020190
 80180f8:	080202e0 	.word	0x080202e0
 80180fc:	08020208 	.word	0x08020208

08018100 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b086      	sub	sp, #24
 8018104:	af02      	add	r7, sp, #8
 8018106:	60f8      	str	r0, [r7, #12]
 8018108:	60b9      	str	r1, [r7, #8]
 801810a:	4613      	mov	r3, r2
 801810c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801810e:	79fa      	ldrb	r2, [r7, #7]
 8018110:	4944      	ldr	r1, [pc, #272]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 8018112:	4613      	mov	r3, r2
 8018114:	005b      	lsls	r3, r3, #1
 8018116:	4413      	add	r3, r2
 8018118:	00db      	lsls	r3, r3, #3
 801811a:	440b      	add	r3, r1
 801811c:	3314      	adds	r3, #20
 801811e:	781b      	ldrb	r3, [r3, #0]
 8018120:	2b01      	cmp	r3, #1
 8018122:	d806      	bhi.n	8018132 <etharp_output_to_arp_index+0x32>
 8018124:	4b40      	ldr	r3, [pc, #256]	@ (8018228 <etharp_output_to_arp_index+0x128>)
 8018126:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801812a:	4940      	ldr	r1, [pc, #256]	@ (801822c <etharp_output_to_arp_index+0x12c>)
 801812c:	4840      	ldr	r0, [pc, #256]	@ (8018230 <etharp_output_to_arp_index+0x130>)
 801812e:	f002 ff87 	bl	801b040 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018132:	79fa      	ldrb	r2, [r7, #7]
 8018134:	493b      	ldr	r1, [pc, #236]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 8018136:	4613      	mov	r3, r2
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	4413      	add	r3, r2
 801813c:	00db      	lsls	r3, r3, #3
 801813e:	440b      	add	r3, r1
 8018140:	3314      	adds	r3, #20
 8018142:	781b      	ldrb	r3, [r3, #0]
 8018144:	2b02      	cmp	r3, #2
 8018146:	d153      	bne.n	80181f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018148:	79fa      	ldrb	r2, [r7, #7]
 801814a:	4936      	ldr	r1, [pc, #216]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 801814c:	4613      	mov	r3, r2
 801814e:	005b      	lsls	r3, r3, #1
 8018150:	4413      	add	r3, r2
 8018152:	00db      	lsls	r3, r3, #3
 8018154:	440b      	add	r3, r1
 8018156:	3312      	adds	r3, #18
 8018158:	881b      	ldrh	r3, [r3, #0]
 801815a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801815e:	d919      	bls.n	8018194 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018160:	79fa      	ldrb	r2, [r7, #7]
 8018162:	4613      	mov	r3, r2
 8018164:	005b      	lsls	r3, r3, #1
 8018166:	4413      	add	r3, r2
 8018168:	00db      	lsls	r3, r3, #3
 801816a:	4a2e      	ldr	r2, [pc, #184]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 801816c:	4413      	add	r3, r2
 801816e:	3304      	adds	r3, #4
 8018170:	4619      	mov	r1, r3
 8018172:	68f8      	ldr	r0, [r7, #12]
 8018174:	f000 fb4c 	bl	8018810 <etharp_request>
 8018178:	4603      	mov	r3, r0
 801817a:	2b00      	cmp	r3, #0
 801817c:	d138      	bne.n	80181f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801817e:	79fa      	ldrb	r2, [r7, #7]
 8018180:	4928      	ldr	r1, [pc, #160]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 8018182:	4613      	mov	r3, r2
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	4413      	add	r3, r2
 8018188:	00db      	lsls	r3, r3, #3
 801818a:	440b      	add	r3, r1
 801818c:	3314      	adds	r3, #20
 801818e:	2203      	movs	r2, #3
 8018190:	701a      	strb	r2, [r3, #0]
 8018192:	e02d      	b.n	80181f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018194:	79fa      	ldrb	r2, [r7, #7]
 8018196:	4923      	ldr	r1, [pc, #140]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 8018198:	4613      	mov	r3, r2
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	440b      	add	r3, r1
 80181a2:	3312      	adds	r3, #18
 80181a4:	881b      	ldrh	r3, [r3, #0]
 80181a6:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80181aa:	d321      	bcc.n	80181f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80181ac:	79fa      	ldrb	r2, [r7, #7]
 80181ae:	4613      	mov	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	4413      	add	r3, r2
 80181b4:	00db      	lsls	r3, r3, #3
 80181b6:	4a1b      	ldr	r2, [pc, #108]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 80181b8:	4413      	add	r3, r2
 80181ba:	1d19      	adds	r1, r3, #4
 80181bc:	79fa      	ldrb	r2, [r7, #7]
 80181be:	4613      	mov	r3, r2
 80181c0:	005b      	lsls	r3, r3, #1
 80181c2:	4413      	add	r3, r2
 80181c4:	00db      	lsls	r3, r3, #3
 80181c6:	3308      	adds	r3, #8
 80181c8:	4a16      	ldr	r2, [pc, #88]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 80181ca:	4413      	add	r3, r2
 80181cc:	3304      	adds	r3, #4
 80181ce:	461a      	mov	r2, r3
 80181d0:	68f8      	ldr	r0, [r7, #12]
 80181d2:	f000 fafb 	bl	80187cc <etharp_request_dst>
 80181d6:	4603      	mov	r3, r0
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d109      	bne.n	80181f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80181dc:	79fa      	ldrb	r2, [r7, #7]
 80181de:	4911      	ldr	r1, [pc, #68]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 80181e0:	4613      	mov	r3, r2
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	4413      	add	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	440b      	add	r3, r1
 80181ea:	3314      	adds	r3, #20
 80181ec:	2203      	movs	r2, #3
 80181ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80181f6:	79fa      	ldrb	r2, [r7, #7]
 80181f8:	4613      	mov	r3, r2
 80181fa:	005b      	lsls	r3, r3, #1
 80181fc:	4413      	add	r3, r2
 80181fe:	00db      	lsls	r3, r3, #3
 8018200:	3308      	adds	r3, #8
 8018202:	4a08      	ldr	r2, [pc, #32]	@ (8018224 <etharp_output_to_arp_index+0x124>)
 8018204:	4413      	add	r3, r2
 8018206:	3304      	adds	r3, #4
 8018208:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801820c:	9200      	str	r2, [sp, #0]
 801820e:	460a      	mov	r2, r1
 8018210:	68b9      	ldr	r1, [r7, #8]
 8018212:	68f8      	ldr	r0, [r7, #12]
 8018214:	f001 ff14 	bl	801a040 <ethernet_output>
 8018218:	4603      	mov	r3, r0
}
 801821a:	4618      	mov	r0, r3
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	20013e08 	.word	0x20013e08
 8018228:	08020190 	.word	0x08020190
 801822c:	08020300 	.word	0x08020300
 8018230:	08020208 	.word	0x08020208

08018234 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b08a      	sub	sp, #40	@ 0x28
 8018238:	af02      	add	r7, sp, #8
 801823a:	60f8      	str	r0, [r7, #12]
 801823c:	60b9      	str	r1, [r7, #8]
 801823e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <etharp_output+0x24>
 801824a:	4b73      	ldr	r3, [pc, #460]	@ (8018418 <etharp_output+0x1e4>)
 801824c:	f240 321e 	movw	r2, #798	@ 0x31e
 8018250:	4972      	ldr	r1, [pc, #456]	@ (801841c <etharp_output+0x1e8>)
 8018252:	4873      	ldr	r0, [pc, #460]	@ (8018420 <etharp_output+0x1ec>)
 8018254:	f002 fef4 	bl	801b040 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d106      	bne.n	801826c <etharp_output+0x38>
 801825e:	4b6e      	ldr	r3, [pc, #440]	@ (8018418 <etharp_output+0x1e4>)
 8018260:	f240 321f 	movw	r2, #799	@ 0x31f
 8018264:	496f      	ldr	r1, [pc, #444]	@ (8018424 <etharp_output+0x1f0>)
 8018266:	486e      	ldr	r0, [pc, #440]	@ (8018420 <etharp_output+0x1ec>)
 8018268:	f002 feea 	bl	801b040 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d106      	bne.n	8018280 <etharp_output+0x4c>
 8018272:	4b69      	ldr	r3, [pc, #420]	@ (8018418 <etharp_output+0x1e4>)
 8018274:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018278:	496b      	ldr	r1, [pc, #428]	@ (8018428 <etharp_output+0x1f4>)
 801827a:	4869      	ldr	r0, [pc, #420]	@ (8018420 <etharp_output+0x1ec>)
 801827c:	f002 fee0 	bl	801b040 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	681b      	ldr	r3, [r3, #0]
 8018284:	68f9      	ldr	r1, [r7, #12]
 8018286:	4618      	mov	r0, r3
 8018288:	f000 ffbc 	bl	8019204 <ip4_addr_isbroadcast_u32>
 801828c:	4603      	mov	r3, r0
 801828e:	2b00      	cmp	r3, #0
 8018290:	d002      	beq.n	8018298 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018292:	4b66      	ldr	r3, [pc, #408]	@ (801842c <etharp_output+0x1f8>)
 8018294:	61fb      	str	r3, [r7, #28]
 8018296:	e0af      	b.n	80183f8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80182a0:	2be0      	cmp	r3, #224	@ 0xe0
 80182a2:	d118      	bne.n	80182d6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80182a4:	2301      	movs	r3, #1
 80182a6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80182a8:	2300      	movs	r3, #0
 80182aa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80182ac:	235e      	movs	r3, #94	@ 0x5e
 80182ae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	3301      	adds	r3, #1
 80182b4:	781b      	ldrb	r3, [r3, #0]
 80182b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	3302      	adds	r3, #2
 80182c2:	781b      	ldrb	r3, [r3, #0]
 80182c4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	3303      	adds	r3, #3
 80182ca:	781b      	ldrb	r3, [r3, #0]
 80182cc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80182ce:	f107 0310 	add.w	r3, r7, #16
 80182d2:	61fb      	str	r3, [r7, #28]
 80182d4:	e090      	b.n	80183f8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681a      	ldr	r2, [r3, #0]
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	3304      	adds	r3, #4
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	405a      	eors	r2, r3
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	3308      	adds	r3, #8
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	4013      	ands	r3, r2
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d012      	beq.n	8018314 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80182f4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80182f8:	4293      	cmp	r3, r2
 80182fa:	d00b      	beq.n	8018314 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	330c      	adds	r3, #12
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d003      	beq.n	801830e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	330c      	adds	r3, #12
 801830a:	61bb      	str	r3, [r7, #24]
 801830c:	e002      	b.n	8018314 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801830e:	f06f 0303 	mvn.w	r3, #3
 8018312:	e07d      	b.n	8018410 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018314:	4b46      	ldr	r3, [pc, #280]	@ (8018430 <etharp_output+0x1fc>)
 8018316:	781b      	ldrb	r3, [r3, #0]
 8018318:	4619      	mov	r1, r3
 801831a:	4a46      	ldr	r2, [pc, #280]	@ (8018434 <etharp_output+0x200>)
 801831c:	460b      	mov	r3, r1
 801831e:	005b      	lsls	r3, r3, #1
 8018320:	440b      	add	r3, r1
 8018322:	00db      	lsls	r3, r3, #3
 8018324:	4413      	add	r3, r2
 8018326:	3314      	adds	r3, #20
 8018328:	781b      	ldrb	r3, [r3, #0]
 801832a:	2b01      	cmp	r3, #1
 801832c:	d925      	bls.n	801837a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801832e:	4b40      	ldr	r3, [pc, #256]	@ (8018430 <etharp_output+0x1fc>)
 8018330:	781b      	ldrb	r3, [r3, #0]
 8018332:	4619      	mov	r1, r3
 8018334:	4a3f      	ldr	r2, [pc, #252]	@ (8018434 <etharp_output+0x200>)
 8018336:	460b      	mov	r3, r1
 8018338:	005b      	lsls	r3, r3, #1
 801833a:	440b      	add	r3, r1
 801833c:	00db      	lsls	r3, r3, #3
 801833e:	4413      	add	r3, r2
 8018340:	3308      	adds	r3, #8
 8018342:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018344:	68fa      	ldr	r2, [r7, #12]
 8018346:	429a      	cmp	r2, r3
 8018348:	d117      	bne.n	801837a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801834a:	69bb      	ldr	r3, [r7, #24]
 801834c:	681a      	ldr	r2, [r3, #0]
 801834e:	4b38      	ldr	r3, [pc, #224]	@ (8018430 <etharp_output+0x1fc>)
 8018350:	781b      	ldrb	r3, [r3, #0]
 8018352:	4618      	mov	r0, r3
 8018354:	4937      	ldr	r1, [pc, #220]	@ (8018434 <etharp_output+0x200>)
 8018356:	4603      	mov	r3, r0
 8018358:	005b      	lsls	r3, r3, #1
 801835a:	4403      	add	r3, r0
 801835c:	00db      	lsls	r3, r3, #3
 801835e:	440b      	add	r3, r1
 8018360:	3304      	adds	r3, #4
 8018362:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018364:	429a      	cmp	r2, r3
 8018366:	d108      	bne.n	801837a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018368:	4b31      	ldr	r3, [pc, #196]	@ (8018430 <etharp_output+0x1fc>)
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	461a      	mov	r2, r3
 801836e:	68b9      	ldr	r1, [r7, #8]
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f7ff fec5 	bl	8018100 <etharp_output_to_arp_index>
 8018376:	4603      	mov	r3, r0
 8018378:	e04a      	b.n	8018410 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801837a:	2300      	movs	r3, #0
 801837c:	75fb      	strb	r3, [r7, #23]
 801837e:	e031      	b.n	80183e4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018380:	7dfa      	ldrb	r2, [r7, #23]
 8018382:	492c      	ldr	r1, [pc, #176]	@ (8018434 <etharp_output+0x200>)
 8018384:	4613      	mov	r3, r2
 8018386:	005b      	lsls	r3, r3, #1
 8018388:	4413      	add	r3, r2
 801838a:	00db      	lsls	r3, r3, #3
 801838c:	440b      	add	r3, r1
 801838e:	3314      	adds	r3, #20
 8018390:	781b      	ldrb	r3, [r3, #0]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d923      	bls.n	80183de <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018396:	7dfa      	ldrb	r2, [r7, #23]
 8018398:	4926      	ldr	r1, [pc, #152]	@ (8018434 <etharp_output+0x200>)
 801839a:	4613      	mov	r3, r2
 801839c:	005b      	lsls	r3, r3, #1
 801839e:	4413      	add	r3, r2
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	440b      	add	r3, r1
 80183a4:	3308      	adds	r3, #8
 80183a6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183a8:	68fa      	ldr	r2, [r7, #12]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d117      	bne.n	80183de <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80183ae:	69bb      	ldr	r3, [r7, #24]
 80183b0:	6819      	ldr	r1, [r3, #0]
 80183b2:	7dfa      	ldrb	r2, [r7, #23]
 80183b4:	481f      	ldr	r0, [pc, #124]	@ (8018434 <etharp_output+0x200>)
 80183b6:	4613      	mov	r3, r2
 80183b8:	005b      	lsls	r3, r3, #1
 80183ba:	4413      	add	r3, r2
 80183bc:	00db      	lsls	r3, r3, #3
 80183be:	4403      	add	r3, r0
 80183c0:	3304      	adds	r3, #4
 80183c2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80183c4:	4299      	cmp	r1, r3
 80183c6:	d10a      	bne.n	80183de <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80183c8:	4a19      	ldr	r2, [pc, #100]	@ (8018430 <etharp_output+0x1fc>)
 80183ca:	7dfb      	ldrb	r3, [r7, #23]
 80183cc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80183ce:	7dfb      	ldrb	r3, [r7, #23]
 80183d0:	461a      	mov	r2, r3
 80183d2:	68b9      	ldr	r1, [r7, #8]
 80183d4:	68f8      	ldr	r0, [r7, #12]
 80183d6:	f7ff fe93 	bl	8018100 <etharp_output_to_arp_index>
 80183da:	4603      	mov	r3, r0
 80183dc:	e018      	b.n	8018410 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183de:	7dfb      	ldrb	r3, [r7, #23]
 80183e0:	3301      	adds	r3, #1
 80183e2:	75fb      	strb	r3, [r7, #23]
 80183e4:	7dfb      	ldrb	r3, [r7, #23]
 80183e6:	2b09      	cmp	r3, #9
 80183e8:	d9ca      	bls.n	8018380 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80183ea:	68ba      	ldr	r2, [r7, #8]
 80183ec:	69b9      	ldr	r1, [r7, #24]
 80183ee:	68f8      	ldr	r0, [r7, #12]
 80183f0:	f000 f822 	bl	8018438 <etharp_query>
 80183f4:	4603      	mov	r3, r0
 80183f6:	e00b      	b.n	8018410 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80183fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018402:	9300      	str	r3, [sp, #0]
 8018404:	69fb      	ldr	r3, [r7, #28]
 8018406:	68b9      	ldr	r1, [r7, #8]
 8018408:	68f8      	ldr	r0, [r7, #12]
 801840a:	f001 fe19 	bl	801a040 <ethernet_output>
 801840e:	4603      	mov	r3, r0
}
 8018410:	4618      	mov	r0, r3
 8018412:	3720      	adds	r7, #32
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	08020190 	.word	0x08020190
 801841c:	080202e0 	.word	0x080202e0
 8018420:	08020208 	.word	0x08020208
 8018424:	08020330 	.word	0x08020330
 8018428:	080202d0 	.word	0x080202d0
 801842c:	0806c650 	.word	0x0806c650
 8018430:	20013ef8 	.word	0x20013ef8
 8018434:	20013e08 	.word	0x20013e08

08018438 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b08c      	sub	sp, #48	@ 0x30
 801843c:	af02      	add	r7, sp, #8
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	332a      	adds	r3, #42	@ 0x2a
 8018448:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801844a:	23ff      	movs	r3, #255	@ 0xff
 801844c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018450:	2300      	movs	r3, #0
 8018452:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018454:	68bb      	ldr	r3, [r7, #8]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	68f9      	ldr	r1, [r7, #12]
 801845a:	4618      	mov	r0, r3
 801845c:	f000 fed2 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018460:	4603      	mov	r3, r0
 8018462:	2b00      	cmp	r3, #0
 8018464:	d10c      	bne.n	8018480 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801846e:	2be0      	cmp	r3, #224	@ 0xe0
 8018470:	d006      	beq.n	8018480 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018472:	68bb      	ldr	r3, [r7, #8]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d003      	beq.n	8018480 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018478:	68bb      	ldr	r3, [r7, #8]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d102      	bne.n	8018486 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018480:	f06f 030f 	mvn.w	r3, #15
 8018484:	e101      	b.n	801868a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018486:	68fa      	ldr	r2, [r7, #12]
 8018488:	2101      	movs	r1, #1
 801848a:	68b8      	ldr	r0, [r7, #8]
 801848c:	f7ff fb20 	bl	8017ad0 <etharp_find_entry>
 8018490:	4603      	mov	r3, r0
 8018492:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018494:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018498:	2b00      	cmp	r3, #0
 801849a:	da02      	bge.n	80184a2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801849c:	8a7b      	ldrh	r3, [r7, #18]
 801849e:	b25b      	sxtb	r3, r3
 80184a0:	e0f3      	b.n	801868a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80184a2:	8a7b      	ldrh	r3, [r7, #18]
 80184a4:	2b7e      	cmp	r3, #126	@ 0x7e
 80184a6:	d906      	bls.n	80184b6 <etharp_query+0x7e>
 80184a8:	4b7a      	ldr	r3, [pc, #488]	@ (8018694 <etharp_query+0x25c>)
 80184aa:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80184ae:	497a      	ldr	r1, [pc, #488]	@ (8018698 <etharp_query+0x260>)
 80184b0:	487a      	ldr	r0, [pc, #488]	@ (801869c <etharp_query+0x264>)
 80184b2:	f002 fdc5 	bl	801b040 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80184b6:	8a7b      	ldrh	r3, [r7, #18]
 80184b8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80184ba:	7c7a      	ldrb	r2, [r7, #17]
 80184bc:	4978      	ldr	r1, [pc, #480]	@ (80186a0 <etharp_query+0x268>)
 80184be:	4613      	mov	r3, r2
 80184c0:	005b      	lsls	r3, r3, #1
 80184c2:	4413      	add	r3, r2
 80184c4:	00db      	lsls	r3, r3, #3
 80184c6:	440b      	add	r3, r1
 80184c8:	3314      	adds	r3, #20
 80184ca:	781b      	ldrb	r3, [r3, #0]
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d115      	bne.n	80184fc <etharp_query+0xc4>
    is_new_entry = 1;
 80184d0:	2301      	movs	r3, #1
 80184d2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80184d4:	7c7a      	ldrb	r2, [r7, #17]
 80184d6:	4972      	ldr	r1, [pc, #456]	@ (80186a0 <etharp_query+0x268>)
 80184d8:	4613      	mov	r3, r2
 80184da:	005b      	lsls	r3, r3, #1
 80184dc:	4413      	add	r3, r2
 80184de:	00db      	lsls	r3, r3, #3
 80184e0:	440b      	add	r3, r1
 80184e2:	3314      	adds	r3, #20
 80184e4:	2201      	movs	r2, #1
 80184e6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80184e8:	7c7a      	ldrb	r2, [r7, #17]
 80184ea:	496d      	ldr	r1, [pc, #436]	@ (80186a0 <etharp_query+0x268>)
 80184ec:	4613      	mov	r3, r2
 80184ee:	005b      	lsls	r3, r3, #1
 80184f0:	4413      	add	r3, r2
 80184f2:	00db      	lsls	r3, r3, #3
 80184f4:	440b      	add	r3, r1
 80184f6:	3308      	adds	r3, #8
 80184f8:	68fa      	ldr	r2, [r7, #12]
 80184fa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80184fc:	7c7a      	ldrb	r2, [r7, #17]
 80184fe:	4968      	ldr	r1, [pc, #416]	@ (80186a0 <etharp_query+0x268>)
 8018500:	4613      	mov	r3, r2
 8018502:	005b      	lsls	r3, r3, #1
 8018504:	4413      	add	r3, r2
 8018506:	00db      	lsls	r3, r3, #3
 8018508:	440b      	add	r3, r1
 801850a:	3314      	adds	r3, #20
 801850c:	781b      	ldrb	r3, [r3, #0]
 801850e:	2b01      	cmp	r3, #1
 8018510:	d011      	beq.n	8018536 <etharp_query+0xfe>
 8018512:	7c7a      	ldrb	r2, [r7, #17]
 8018514:	4962      	ldr	r1, [pc, #392]	@ (80186a0 <etharp_query+0x268>)
 8018516:	4613      	mov	r3, r2
 8018518:	005b      	lsls	r3, r3, #1
 801851a:	4413      	add	r3, r2
 801851c:	00db      	lsls	r3, r3, #3
 801851e:	440b      	add	r3, r1
 8018520:	3314      	adds	r3, #20
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	2b01      	cmp	r3, #1
 8018526:	d806      	bhi.n	8018536 <etharp_query+0xfe>
 8018528:	4b5a      	ldr	r3, [pc, #360]	@ (8018694 <etharp_query+0x25c>)
 801852a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801852e:	495d      	ldr	r1, [pc, #372]	@ (80186a4 <etharp_query+0x26c>)
 8018530:	485a      	ldr	r0, [pc, #360]	@ (801869c <etharp_query+0x264>)
 8018532:	f002 fd85 	bl	801b040 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018536:	6a3b      	ldr	r3, [r7, #32]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d102      	bne.n	8018542 <etharp_query+0x10a>
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d10c      	bne.n	801855c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018542:	68b9      	ldr	r1, [r7, #8]
 8018544:	68f8      	ldr	r0, [r7, #12]
 8018546:	f000 f963 	bl	8018810 <etharp_request>
 801854a:	4603      	mov	r3, r0
 801854c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d102      	bne.n	801855c <etharp_query+0x124>
      return result;
 8018556:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801855a:	e096      	b.n	801868a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d106      	bne.n	8018570 <etharp_query+0x138>
 8018562:	4b4c      	ldr	r3, [pc, #304]	@ (8018694 <etharp_query+0x25c>)
 8018564:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018568:	494f      	ldr	r1, [pc, #316]	@ (80186a8 <etharp_query+0x270>)
 801856a:	484c      	ldr	r0, [pc, #304]	@ (801869c <etharp_query+0x264>)
 801856c:	f002 fd68 	bl	801b040 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018570:	7c7a      	ldrb	r2, [r7, #17]
 8018572:	494b      	ldr	r1, [pc, #300]	@ (80186a0 <etharp_query+0x268>)
 8018574:	4613      	mov	r3, r2
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	4413      	add	r3, r2
 801857a:	00db      	lsls	r3, r3, #3
 801857c:	440b      	add	r3, r1
 801857e:	3314      	adds	r3, #20
 8018580:	781b      	ldrb	r3, [r3, #0]
 8018582:	2b01      	cmp	r3, #1
 8018584:	d917      	bls.n	80185b6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018586:	4a49      	ldr	r2, [pc, #292]	@ (80186ac <etharp_query+0x274>)
 8018588:	7c7b      	ldrb	r3, [r7, #17]
 801858a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801858c:	7c7a      	ldrb	r2, [r7, #17]
 801858e:	4613      	mov	r3, r2
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4413      	add	r3, r2
 8018594:	00db      	lsls	r3, r3, #3
 8018596:	3308      	adds	r3, #8
 8018598:	4a41      	ldr	r2, [pc, #260]	@ (80186a0 <etharp_query+0x268>)
 801859a:	4413      	add	r3, r2
 801859c:	3304      	adds	r3, #4
 801859e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80185a2:	9200      	str	r2, [sp, #0]
 80185a4:	697a      	ldr	r2, [r7, #20]
 80185a6:	6879      	ldr	r1, [r7, #4]
 80185a8:	68f8      	ldr	r0, [r7, #12]
 80185aa:	f001 fd49 	bl	801a040 <ethernet_output>
 80185ae:	4603      	mov	r3, r0
 80185b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80185b4:	e067      	b.n	8018686 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80185b6:	7c7a      	ldrb	r2, [r7, #17]
 80185b8:	4939      	ldr	r1, [pc, #228]	@ (80186a0 <etharp_query+0x268>)
 80185ba:	4613      	mov	r3, r2
 80185bc:	005b      	lsls	r3, r3, #1
 80185be:	4413      	add	r3, r2
 80185c0:	00db      	lsls	r3, r3, #3
 80185c2:	440b      	add	r3, r1
 80185c4:	3314      	adds	r3, #20
 80185c6:	781b      	ldrb	r3, [r3, #0]
 80185c8:	2b01      	cmp	r3, #1
 80185ca:	d15c      	bne.n	8018686 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80185cc:	2300      	movs	r3, #0
 80185ce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80185d4:	e01c      	b.n	8018610 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	895a      	ldrh	r2, [r3, #10]
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	891b      	ldrh	r3, [r3, #8]
 80185de:	429a      	cmp	r2, r3
 80185e0:	d10a      	bne.n	80185f8 <etharp_query+0x1c0>
 80185e2:	69fb      	ldr	r3, [r7, #28]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d006      	beq.n	80185f8 <etharp_query+0x1c0>
 80185ea:	4b2a      	ldr	r3, [pc, #168]	@ (8018694 <etharp_query+0x25c>)
 80185ec:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80185f0:	492f      	ldr	r1, [pc, #188]	@ (80186b0 <etharp_query+0x278>)
 80185f2:	482a      	ldr	r0, [pc, #168]	@ (801869c <etharp_query+0x264>)
 80185f4:	f002 fd24 	bl	801b040 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80185f8:	69fb      	ldr	r3, [r7, #28]
 80185fa:	7b1b      	ldrb	r3, [r3, #12]
 80185fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018600:	2b00      	cmp	r3, #0
 8018602:	d002      	beq.n	801860a <etharp_query+0x1d2>
        copy_needed = 1;
 8018604:	2301      	movs	r3, #1
 8018606:	61bb      	str	r3, [r7, #24]
        break;
 8018608:	e005      	b.n	8018616 <etharp_query+0x1de>
      }
      p = p->next;
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018610:	69fb      	ldr	r3, [r7, #28]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d1df      	bne.n	80185d6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018616:	69bb      	ldr	r3, [r7, #24]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d007      	beq.n	801862c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801861c:	687a      	ldr	r2, [r7, #4]
 801861e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018622:	200e      	movs	r0, #14
 8018624:	f7f7 f982 	bl	800f92c <pbuf_clone>
 8018628:	61f8      	str	r0, [r7, #28]
 801862a:	e004      	b.n	8018636 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018630:	69f8      	ldr	r0, [r7, #28]
 8018632:	f7f6 ff6d 	bl	800f510 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018636:	69fb      	ldr	r3, [r7, #28]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d021      	beq.n	8018680 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801863c:	7c7a      	ldrb	r2, [r7, #17]
 801863e:	4918      	ldr	r1, [pc, #96]	@ (80186a0 <etharp_query+0x268>)
 8018640:	4613      	mov	r3, r2
 8018642:	005b      	lsls	r3, r3, #1
 8018644:	4413      	add	r3, r2
 8018646:	00db      	lsls	r3, r3, #3
 8018648:	440b      	add	r3, r1
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d00a      	beq.n	8018666 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018650:	7c7a      	ldrb	r2, [r7, #17]
 8018652:	4913      	ldr	r1, [pc, #76]	@ (80186a0 <etharp_query+0x268>)
 8018654:	4613      	mov	r3, r2
 8018656:	005b      	lsls	r3, r3, #1
 8018658:	4413      	add	r3, r2
 801865a:	00db      	lsls	r3, r3, #3
 801865c:	440b      	add	r3, r1
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	4618      	mov	r0, r3
 8018662:	f7f6 feaf 	bl	800f3c4 <pbuf_free>
      }
      arp_table[i].q = p;
 8018666:	7c7a      	ldrb	r2, [r7, #17]
 8018668:	490d      	ldr	r1, [pc, #52]	@ (80186a0 <etharp_query+0x268>)
 801866a:	4613      	mov	r3, r2
 801866c:	005b      	lsls	r3, r3, #1
 801866e:	4413      	add	r3, r2
 8018670:	00db      	lsls	r3, r3, #3
 8018672:	440b      	add	r3, r1
 8018674:	69fa      	ldr	r2, [r7, #28]
 8018676:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018678:	2300      	movs	r3, #0
 801867a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801867e:	e002      	b.n	8018686 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018680:	23ff      	movs	r3, #255	@ 0xff
 8018682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018686:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801868a:	4618      	mov	r0, r3
 801868c:	3728      	adds	r7, #40	@ 0x28
 801868e:	46bd      	mov	sp, r7
 8018690:	bd80      	pop	{r7, pc}
 8018692:	bf00      	nop
 8018694:	08020190 	.word	0x08020190
 8018698:	0802033c 	.word	0x0802033c
 801869c:	08020208 	.word	0x08020208
 80186a0:	20013e08 	.word	0x20013e08
 80186a4:	0802034c 	.word	0x0802034c
 80186a8:	08020330 	.word	0x08020330
 80186ac:	20013ef8 	.word	0x20013ef8
 80186b0:	08020374 	.word	0x08020374

080186b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b08a      	sub	sp, #40	@ 0x28
 80186b8:	af02      	add	r7, sp, #8
 80186ba:	60f8      	str	r0, [r7, #12]
 80186bc:	60b9      	str	r1, [r7, #8]
 80186be:	607a      	str	r2, [r7, #4]
 80186c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d106      	bne.n	80186da <etharp_raw+0x26>
 80186cc:	4b3a      	ldr	r3, [pc, #232]	@ (80187b8 <etharp_raw+0x104>)
 80186ce:	f240 4257 	movw	r2, #1111	@ 0x457
 80186d2:	493a      	ldr	r1, [pc, #232]	@ (80187bc <etharp_raw+0x108>)
 80186d4:	483a      	ldr	r0, [pc, #232]	@ (80187c0 <etharp_raw+0x10c>)
 80186d6:	f002 fcb3 	bl	801b040 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80186da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80186de:	211c      	movs	r1, #28
 80186e0:	200e      	movs	r0, #14
 80186e2:	f7f6 fb87 	bl	800edf4 <pbuf_alloc>
 80186e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80186e8:	69bb      	ldr	r3, [r7, #24]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d102      	bne.n	80186f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80186ee:	f04f 33ff 	mov.w	r3, #4294967295
 80186f2:	e05d      	b.n	80187b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80186f4:	69bb      	ldr	r3, [r7, #24]
 80186f6:	895b      	ldrh	r3, [r3, #10]
 80186f8:	2b1b      	cmp	r3, #27
 80186fa:	d806      	bhi.n	801870a <etharp_raw+0x56>
 80186fc:	4b2e      	ldr	r3, [pc, #184]	@ (80187b8 <etharp_raw+0x104>)
 80186fe:	f240 4262 	movw	r2, #1122	@ 0x462
 8018702:	4930      	ldr	r1, [pc, #192]	@ (80187c4 <etharp_raw+0x110>)
 8018704:	482e      	ldr	r0, [pc, #184]	@ (80187c0 <etharp_raw+0x10c>)
 8018706:	f002 fc9b 	bl	801b040 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801870a:	69bb      	ldr	r3, [r7, #24]
 801870c:	685b      	ldr	r3, [r3, #4]
 801870e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018710:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018712:	4618      	mov	r0, r3
 8018714:	f7f5 f934 	bl	800d980 <lwip_htons>
 8018718:	4603      	mov	r3, r0
 801871a:	461a      	mov	r2, r3
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018726:	2b06      	cmp	r3, #6
 8018728:	d006      	beq.n	8018738 <etharp_raw+0x84>
 801872a:	4b23      	ldr	r3, [pc, #140]	@ (80187b8 <etharp_raw+0x104>)
 801872c:	f240 4269 	movw	r2, #1129	@ 0x469
 8018730:	4925      	ldr	r1, [pc, #148]	@ (80187c8 <etharp_raw+0x114>)
 8018732:	4823      	ldr	r0, [pc, #140]	@ (80187c0 <etharp_raw+0x10c>)
 8018734:	f002 fc84 	bl	801b040 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018738:	697b      	ldr	r3, [r7, #20]
 801873a:	3308      	adds	r3, #8
 801873c:	2206      	movs	r2, #6
 801873e:	6839      	ldr	r1, [r7, #0]
 8018740:	4618      	mov	r0, r3
 8018742:	f002 fe9c 	bl	801b47e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018746:	697b      	ldr	r3, [r7, #20]
 8018748:	3312      	adds	r3, #18
 801874a:	2206      	movs	r2, #6
 801874c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801874e:	4618      	mov	r0, r3
 8018750:	f002 fe95 	bl	801b47e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018754:	697b      	ldr	r3, [r7, #20]
 8018756:	330e      	adds	r3, #14
 8018758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801875a:	6812      	ldr	r2, [r2, #0]
 801875c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	3318      	adds	r3, #24
 8018762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018764:	6812      	ldr	r2, [r2, #0]
 8018766:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	2200      	movs	r2, #0
 801876c:	701a      	strb	r2, [r3, #0]
 801876e:	2200      	movs	r2, #0
 8018770:	f042 0201 	orr.w	r2, r2, #1
 8018774:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	2200      	movs	r2, #0
 801877a:	f042 0208 	orr.w	r2, r2, #8
 801877e:	709a      	strb	r2, [r3, #2]
 8018780:	2200      	movs	r2, #0
 8018782:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	2206      	movs	r2, #6
 8018788:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	2204      	movs	r2, #4
 801878e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018790:	f640 0306 	movw	r3, #2054	@ 0x806
 8018794:	9300      	str	r3, [sp, #0]
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	68ba      	ldr	r2, [r7, #8]
 801879a:	69b9      	ldr	r1, [r7, #24]
 801879c:	68f8      	ldr	r0, [r7, #12]
 801879e:	f001 fc4f 	bl	801a040 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80187a2:	69b8      	ldr	r0, [r7, #24]
 80187a4:	f7f6 fe0e 	bl	800f3c4 <pbuf_free>
  p = NULL;
 80187a8:	2300      	movs	r3, #0
 80187aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80187ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3720      	adds	r7, #32
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}
 80187b8:	08020190 	.word	0x08020190
 80187bc:	080202e0 	.word	0x080202e0
 80187c0:	08020208 	.word	0x08020208
 80187c4:	08020390 	.word	0x08020390
 80187c8:	080203c4 	.word	0x080203c4

080187cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b088      	sub	sp, #32
 80187d0:	af04      	add	r7, sp, #16
 80187d2:	60f8      	str	r0, [r7, #12]
 80187d4:	60b9      	str	r1, [r7, #8]
 80187d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80187e8:	2201      	movs	r2, #1
 80187ea:	9203      	str	r2, [sp, #12]
 80187ec:	68ba      	ldr	r2, [r7, #8]
 80187ee:	9202      	str	r2, [sp, #8]
 80187f0:	4a06      	ldr	r2, [pc, #24]	@ (801880c <etharp_request_dst+0x40>)
 80187f2:	9201      	str	r2, [sp, #4]
 80187f4:	9300      	str	r3, [sp, #0]
 80187f6:	4603      	mov	r3, r0
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	68f8      	ldr	r0, [r7, #12]
 80187fc:	f7ff ff5a 	bl	80186b4 <etharp_raw>
 8018800:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018802:	4618      	mov	r0, r3
 8018804:	3710      	adds	r7, #16
 8018806:	46bd      	mov	sp, r7
 8018808:	bd80      	pop	{r7, pc}
 801880a:	bf00      	nop
 801880c:	0806c658 	.word	0x0806c658

08018810 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b082      	sub	sp, #8
 8018814:	af00      	add	r7, sp, #0
 8018816:	6078      	str	r0, [r7, #4]
 8018818:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801881a:	4a05      	ldr	r2, [pc, #20]	@ (8018830 <etharp_request+0x20>)
 801881c:	6839      	ldr	r1, [r7, #0]
 801881e:	6878      	ldr	r0, [r7, #4]
 8018820:	f7ff ffd4 	bl	80187cc <etharp_request_dst>
 8018824:	4603      	mov	r3, r0
}
 8018826:	4618      	mov	r0, r3
 8018828:	3708      	adds	r7, #8
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	0806c650 	.word	0x0806c650

08018834 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018834:	b580      	push	{r7, lr}
 8018836:	b08e      	sub	sp, #56	@ 0x38
 8018838:	af04      	add	r7, sp, #16
 801883a:	6078      	str	r0, [r7, #4]
 801883c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801883e:	4b8e      	ldr	r3, [pc, #568]	@ (8018a78 <icmp_input+0x244>)
 8018840:	689b      	ldr	r3, [r3, #8]
 8018842:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018846:	781b      	ldrb	r3, [r3, #0]
 8018848:	f003 030f 	and.w	r3, r3, #15
 801884c:	b2db      	uxtb	r3, r3
 801884e:	009b      	lsls	r3, r3, #2
 8018850:	b2db      	uxtb	r3, r3
 8018852:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8018854:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018856:	2b13      	cmp	r3, #19
 8018858:	f240 80f6 	bls.w	8018a48 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	895b      	ldrh	r3, [r3, #10]
 8018860:	2b03      	cmp	r3, #3
 8018862:	f240 80f3 	bls.w	8018a4c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	685b      	ldr	r3, [r3, #4]
 801886a:	781b      	ldrb	r3, [r3, #0]
 801886c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	685b      	ldr	r3, [r3, #4]
 8018874:	785b      	ldrb	r3, [r3, #1]
 8018876:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801887a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801887e:	2b00      	cmp	r3, #0
 8018880:	f000 80db 	beq.w	8018a3a <icmp_input+0x206>
 8018884:	2b08      	cmp	r3, #8
 8018886:	f040 80db 	bne.w	8018a40 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801888a:	4b7c      	ldr	r3, [pc, #496]	@ (8018a7c <icmp_input+0x248>)
 801888c:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801888e:	4b7a      	ldr	r3, [pc, #488]	@ (8018a78 <icmp_input+0x244>)
 8018890:	695b      	ldr	r3, [r3, #20]
 8018892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018896:	2be0      	cmp	r3, #224	@ 0xe0
 8018898:	f000 80df 	beq.w	8018a5a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801889c:	4b76      	ldr	r3, [pc, #472]	@ (8018a78 <icmp_input+0x244>)
 801889e:	695b      	ldr	r3, [r3, #20]
 80188a0:	4a75      	ldr	r2, [pc, #468]	@ (8018a78 <icmp_input+0x244>)
 80188a2:	6812      	ldr	r2, [r2, #0]
 80188a4:	4611      	mov	r1, r2
 80188a6:	4618      	mov	r0, r3
 80188a8:	f000 fcac 	bl	8019204 <ip4_addr_isbroadcast_u32>
 80188ac:	4603      	mov	r3, r0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	f040 80d5 	bne.w	8018a5e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	891b      	ldrh	r3, [r3, #8]
 80188b8:	2b07      	cmp	r3, #7
 80188ba:	f240 80c9 	bls.w	8018a50 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80188be:	6878      	ldr	r0, [r7, #4]
 80188c0:	f7f5 f9b8 	bl	800dc34 <inet_chksum_pbuf>
 80188c4:	4603      	mov	r3, r0
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d003      	beq.n	80188d2 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80188ca:	6878      	ldr	r0, [r7, #4]
 80188cc:	f7f6 fd7a 	bl	800f3c4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80188d0:	e0ce      	b.n	8018a70 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80188d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80188d4:	330e      	adds	r3, #14
 80188d6:	4619      	mov	r1, r3
 80188d8:	6878      	ldr	r0, [r7, #4]
 80188da:	f7f6 fcdd 	bl	800f298 <pbuf_add_header>
 80188de:	4603      	mov	r3, r0
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d04b      	beq.n	801897c <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	891a      	ldrh	r2, [r3, #8]
 80188e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80188ea:	4413      	add	r3, r2
 80188ec:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	891b      	ldrh	r3, [r3, #8]
 80188f2:	8b7a      	ldrh	r2, [r7, #26]
 80188f4:	429a      	cmp	r2, r3
 80188f6:	f0c0 80b4 	bcc.w	8018a62 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80188fa:	8b7b      	ldrh	r3, [r7, #26]
 80188fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018900:	4619      	mov	r1, r3
 8018902:	200e      	movs	r0, #14
 8018904:	f7f6 fa76 	bl	800edf4 <pbuf_alloc>
 8018908:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801890a:	697b      	ldr	r3, [r7, #20]
 801890c:	2b00      	cmp	r3, #0
 801890e:	f000 80aa 	beq.w	8018a66 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018912:	697b      	ldr	r3, [r7, #20]
 8018914:	895b      	ldrh	r3, [r3, #10]
 8018916:	461a      	mov	r2, r3
 8018918:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801891a:	3308      	adds	r3, #8
 801891c:	429a      	cmp	r2, r3
 801891e:	d203      	bcs.n	8018928 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018920:	6978      	ldr	r0, [r7, #20]
 8018922:	f7f6 fd4f 	bl	800f3c4 <pbuf_free>
          goto icmperr;
 8018926:	e09f      	b.n	8018a68 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018928:	697b      	ldr	r3, [r7, #20]
 801892a:	685b      	ldr	r3, [r3, #4]
 801892c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801892e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018930:	4618      	mov	r0, r3
 8018932:	f002 fda4 	bl	801b47e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018936:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018938:	4619      	mov	r1, r3
 801893a:	6978      	ldr	r0, [r7, #20]
 801893c:	f7f6 fcbc 	bl	800f2b8 <pbuf_remove_header>
 8018940:	4603      	mov	r3, r0
 8018942:	2b00      	cmp	r3, #0
 8018944:	d009      	beq.n	801895a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018946:	4b4e      	ldr	r3, [pc, #312]	@ (8018a80 <icmp_input+0x24c>)
 8018948:	22b6      	movs	r2, #182	@ 0xb6
 801894a:	494e      	ldr	r1, [pc, #312]	@ (8018a84 <icmp_input+0x250>)
 801894c:	484e      	ldr	r0, [pc, #312]	@ (8018a88 <icmp_input+0x254>)
 801894e:	f002 fb77 	bl	801b040 <iprintf>
          pbuf_free(r);
 8018952:	6978      	ldr	r0, [r7, #20]
 8018954:	f7f6 fd36 	bl	800f3c4 <pbuf_free>
          goto icmperr;
 8018958:	e086      	b.n	8018a68 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801895a:	6879      	ldr	r1, [r7, #4]
 801895c:	6978      	ldr	r0, [r7, #20]
 801895e:	f7f6 fe65 	bl	800f62c <pbuf_copy>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d003      	beq.n	8018970 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018968:	6978      	ldr	r0, [r7, #20]
 801896a:	f7f6 fd2b 	bl	800f3c4 <pbuf_free>
          goto icmperr;
 801896e:	e07b      	b.n	8018a68 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 8018970:	6878      	ldr	r0, [r7, #4]
 8018972:	f7f6 fd27 	bl	800f3c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018976:	697b      	ldr	r3, [r7, #20]
 8018978:	607b      	str	r3, [r7, #4]
 801897a:	e00f      	b.n	801899c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801897c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801897e:	330e      	adds	r3, #14
 8018980:	4619      	mov	r1, r3
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f7f6 fc98 	bl	800f2b8 <pbuf_remove_header>
 8018988:	4603      	mov	r3, r0
 801898a:	2b00      	cmp	r3, #0
 801898c:	d006      	beq.n	801899c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801898e:	4b3c      	ldr	r3, [pc, #240]	@ (8018a80 <icmp_input+0x24c>)
 8018990:	22c7      	movs	r2, #199	@ 0xc7
 8018992:	493e      	ldr	r1, [pc, #248]	@ (8018a8c <icmp_input+0x258>)
 8018994:	483c      	ldr	r0, [pc, #240]	@ (8018a88 <icmp_input+0x254>)
 8018996:	f002 fb53 	bl	801b040 <iprintf>
          goto icmperr;
 801899a:	e065      	b.n	8018a68 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	685b      	ldr	r3, [r3, #4]
 80189a0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80189a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80189a4:	4619      	mov	r1, r3
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f7f6 fc76 	bl	800f298 <pbuf_add_header>
 80189ac:	4603      	mov	r3, r0
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d145      	bne.n	8018a3e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	685b      	ldr	r3, [r3, #4]
 80189b6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80189b8:	69fb      	ldr	r3, [r7, #28]
 80189ba:	681a      	ldr	r2, [r3, #0]
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80189c0:	4b2d      	ldr	r3, [pc, #180]	@ (8018a78 <icmp_input+0x244>)
 80189c2:	691a      	ldr	r2, [r3, #16]
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	2200      	movs	r2, #0
 80189cc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80189ce:	693b      	ldr	r3, [r7, #16]
 80189d0:	885b      	ldrh	r3, [r3, #2]
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80189d8:	4293      	cmp	r3, r2
 80189da:	d907      	bls.n	80189ec <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80189dc:	693b      	ldr	r3, [r7, #16]
 80189de:	885b      	ldrh	r3, [r3, #2]
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	3309      	adds	r3, #9
 80189e4:	b29a      	uxth	r2, r3
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	805a      	strh	r2, [r3, #2]
 80189ea:	e006      	b.n	80189fa <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80189ec:	693b      	ldr	r3, [r7, #16]
 80189ee:	885b      	ldrh	r3, [r3, #2]
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	3308      	adds	r3, #8
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	693b      	ldr	r3, [r7, #16]
 80189f8:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	22ff      	movs	r2, #255	@ 0xff
 80189fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2200      	movs	r2, #0
 8018a04:	729a      	strb	r2, [r3, #10]
 8018a06:	2200      	movs	r2, #0
 8018a08:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8018a0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8018a0c:	4619      	mov	r1, r3
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f7f5 f8fe 	bl	800dc10 <inet_chksum>
 8018a14:	4603      	mov	r3, r0
 8018a16:	461a      	mov	r2, r3
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018a1c:	683b      	ldr	r3, [r7, #0]
 8018a1e:	9302      	str	r3, [sp, #8]
 8018a20:	2301      	movs	r3, #1
 8018a22:	9301      	str	r3, [sp, #4]
 8018a24:	2300      	movs	r3, #0
 8018a26:	9300      	str	r3, [sp, #0]
 8018a28:	23ff      	movs	r3, #255	@ 0xff
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	69f9      	ldr	r1, [r7, #28]
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f000 faaa 	bl	8018f88 <ip4_output_if>
 8018a34:	4603      	mov	r3, r0
 8018a36:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018a38:	e001      	b.n	8018a3e <icmp_input+0x20a>
      break;
 8018a3a:	bf00      	nop
 8018a3c:	e000      	b.n	8018a40 <icmp_input+0x20c>
      break;
 8018a3e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7f6 fcbf 	bl	800f3c4 <pbuf_free>
  return;
 8018a46:	e013      	b.n	8018a70 <icmp_input+0x23c>
    goto lenerr;
 8018a48:	bf00      	nop
 8018a4a:	e002      	b.n	8018a52 <icmp_input+0x21e>
    goto lenerr;
 8018a4c:	bf00      	nop
 8018a4e:	e000      	b.n	8018a52 <icmp_input+0x21e>
        goto lenerr;
 8018a50:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f7f6 fcb6 	bl	800f3c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a58:	e00a      	b.n	8018a70 <icmp_input+0x23c>
        goto icmperr;
 8018a5a:	bf00      	nop
 8018a5c:	e004      	b.n	8018a68 <icmp_input+0x234>
        goto icmperr;
 8018a5e:	bf00      	nop
 8018a60:	e002      	b.n	8018a68 <icmp_input+0x234>
          goto icmperr;
 8018a62:	bf00      	nop
 8018a64:	e000      	b.n	8018a68 <icmp_input+0x234>
          goto icmperr;
 8018a66:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018a68:	6878      	ldr	r0, [r7, #4]
 8018a6a:	f7f6 fcab 	bl	800f3c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a6e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018a70:	3728      	adds	r7, #40	@ 0x28
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}
 8018a76:	bf00      	nop
 8018a78:	2000a2fc 	.word	0x2000a2fc
 8018a7c:	2000a310 	.word	0x2000a310
 8018a80:	08020408 	.word	0x08020408
 8018a84:	08020440 	.word	0x08020440
 8018a88:	08020478 	.word	0x08020478
 8018a8c:	080204a0 	.word	0x080204a0

08018a90 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	460b      	mov	r3, r1
 8018a9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018a9c:	78fb      	ldrb	r3, [r7, #3]
 8018a9e:	461a      	mov	r2, r3
 8018aa0:	2103      	movs	r1, #3
 8018aa2:	6878      	ldr	r0, [r7, #4]
 8018aa4:	f000 f814 	bl	8018ad0 <icmp_send_response>
}
 8018aa8:	bf00      	nop
 8018aaa:	3708      	adds	r7, #8
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
 8018ab8:	460b      	mov	r3, r1
 8018aba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018abc:	78fb      	ldrb	r3, [r7, #3]
 8018abe:	461a      	mov	r2, r3
 8018ac0:	210b      	movs	r1, #11
 8018ac2:	6878      	ldr	r0, [r7, #4]
 8018ac4:	f000 f804 	bl	8018ad0 <icmp_send_response>
}
 8018ac8:	bf00      	nop
 8018aca:	3708      	adds	r7, #8
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b08c      	sub	sp, #48	@ 0x30
 8018ad4:	af04      	add	r7, sp, #16
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	460b      	mov	r3, r1
 8018ada:	70fb      	strb	r3, [r7, #3]
 8018adc:	4613      	mov	r3, r2
 8018ade:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018ae0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018ae4:	2124      	movs	r1, #36	@ 0x24
 8018ae6:	2022      	movs	r0, #34	@ 0x22
 8018ae8:	f7f6 f984 	bl	800edf4 <pbuf_alloc>
 8018aec:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8018aee:	69bb      	ldr	r3, [r7, #24]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d056      	beq.n	8018ba2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018af4:	69bb      	ldr	r3, [r7, #24]
 8018af6:	895b      	ldrh	r3, [r3, #10]
 8018af8:	2b23      	cmp	r3, #35	@ 0x23
 8018afa:	d806      	bhi.n	8018b0a <icmp_send_response+0x3a>
 8018afc:	4b2b      	ldr	r3, [pc, #172]	@ (8018bac <icmp_send_response+0xdc>)
 8018afe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018b02:	492b      	ldr	r1, [pc, #172]	@ (8018bb0 <icmp_send_response+0xe0>)
 8018b04:	482b      	ldr	r0, [pc, #172]	@ (8018bb4 <icmp_send_response+0xe4>)
 8018b06:	f002 fa9b 	bl	801b040 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018b10:	69bb      	ldr	r3, [r7, #24]
 8018b12:	685b      	ldr	r3, [r3, #4]
 8018b14:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018b16:	693b      	ldr	r3, [r7, #16]
 8018b18:	78fa      	ldrb	r2, [r7, #3]
 8018b1a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018b1c:	693b      	ldr	r3, [r7, #16]
 8018b1e:	78ba      	ldrb	r2, [r7, #2]
 8018b20:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018b22:	693b      	ldr	r3, [r7, #16]
 8018b24:	2200      	movs	r2, #0
 8018b26:	711a      	strb	r2, [r3, #4]
 8018b28:	2200      	movs	r2, #0
 8018b2a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018b2c:	693b      	ldr	r3, [r7, #16]
 8018b2e:	2200      	movs	r2, #0
 8018b30:	719a      	strb	r2, [r3, #6]
 8018b32:	2200      	movs	r2, #0
 8018b34:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018b36:	69bb      	ldr	r3, [r7, #24]
 8018b38:	685b      	ldr	r3, [r3, #4]
 8018b3a:	f103 0008 	add.w	r0, r3, #8
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	221c      	movs	r2, #28
 8018b44:	4619      	mov	r1, r3
 8018b46:	f002 fc9a 	bl	801b47e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018b4a:	697b      	ldr	r3, [r7, #20]
 8018b4c:	68db      	ldr	r3, [r3, #12]
 8018b4e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018b50:	f107 030c 	add.w	r3, r7, #12
 8018b54:	4618      	mov	r0, r3
 8018b56:	f000 f82f 	bl	8018bb8 <ip4_route>
 8018b5a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8018b5c:	69fb      	ldr	r3, [r7, #28]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d01b      	beq.n	8018b9a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	2200      	movs	r2, #0
 8018b66:	709a      	strb	r2, [r3, #2]
 8018b68:	2200      	movs	r2, #0
 8018b6a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018b6c:	69bb      	ldr	r3, [r7, #24]
 8018b6e:	895b      	ldrh	r3, [r3, #10]
 8018b70:	4619      	mov	r1, r3
 8018b72:	6938      	ldr	r0, [r7, #16]
 8018b74:	f7f5 f84c 	bl	800dc10 <inet_chksum>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	461a      	mov	r2, r3
 8018b7c:	693b      	ldr	r3, [r7, #16]
 8018b7e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018b80:	f107 020c 	add.w	r2, r7, #12
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	9302      	str	r3, [sp, #8]
 8018b88:	2301      	movs	r3, #1
 8018b8a:	9301      	str	r3, [sp, #4]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	23ff      	movs	r3, #255	@ 0xff
 8018b92:	2100      	movs	r1, #0
 8018b94:	69b8      	ldr	r0, [r7, #24]
 8018b96:	f000 f9f7 	bl	8018f88 <ip4_output_if>
  }
  pbuf_free(q);
 8018b9a:	69b8      	ldr	r0, [r7, #24]
 8018b9c:	f7f6 fc12 	bl	800f3c4 <pbuf_free>
 8018ba0:	e000      	b.n	8018ba4 <icmp_send_response+0xd4>
    return;
 8018ba2:	bf00      	nop
}
 8018ba4:	3720      	adds	r7, #32
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	08020408 	.word	0x08020408
 8018bb0:	080204d4 	.word	0x080204d4
 8018bb4:	08020478 	.word	0x08020478

08018bb8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018bb8:	b480      	push	{r7}
 8018bba:	b085      	sub	sp, #20
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018bc0:	4b33      	ldr	r3, [pc, #204]	@ (8018c90 <ip4_route+0xd8>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	60fb      	str	r3, [r7, #12]
 8018bc6:	e036      	b.n	8018c36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018bce:	f003 0301 	and.w	r3, r3, #1
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d02b      	beq.n	8018c30 <ip4_route+0x78>
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018bde:	089b      	lsrs	r3, r3, #2
 8018be0:	f003 0301 	and.w	r3, r3, #1
 8018be4:	b2db      	uxtb	r3, r3
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d022      	beq.n	8018c30 <ip4_route+0x78>
 8018bea:	68fb      	ldr	r3, [r7, #12]
 8018bec:	3304      	adds	r3, #4
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d01d      	beq.n	8018c30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	3304      	adds	r3, #4
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	405a      	eors	r2, r3
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	3308      	adds	r3, #8
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	4013      	ands	r3, r2
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d101      	bne.n	8018c10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	e038      	b.n	8018c82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018c16:	f003 0302 	and.w	r3, r3, #2
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d108      	bne.n	8018c30 <ip4_route+0x78>
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	681a      	ldr	r2, [r3, #0]
 8018c22:	68fb      	ldr	r3, [r7, #12]
 8018c24:	330c      	adds	r3, #12
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	d101      	bne.n	8018c30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	e028      	b.n	8018c82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	60fb      	str	r3, [r7, #12]
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d1c5      	bne.n	8018bc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c3c:	4b15      	ldr	r3, [pc, #84]	@ (8018c94 <ip4_route+0xdc>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d01a      	beq.n	8018c7a <ip4_route+0xc2>
 8018c44:	4b13      	ldr	r3, [pc, #76]	@ (8018c94 <ip4_route+0xdc>)
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018c4c:	f003 0301 	and.w	r3, r3, #1
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d012      	beq.n	8018c7a <ip4_route+0xc2>
 8018c54:	4b0f      	ldr	r3, [pc, #60]	@ (8018c94 <ip4_route+0xdc>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018c5c:	f003 0304 	and.w	r3, r3, #4
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d00a      	beq.n	8018c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018c64:	4b0b      	ldr	r3, [pc, #44]	@ (8018c94 <ip4_route+0xdc>)
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	3304      	adds	r3, #4
 8018c6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d004      	beq.n	8018c7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	b2db      	uxtb	r3, r3
 8018c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8018c78:	d101      	bne.n	8018c7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	e001      	b.n	8018c82 <ip4_route+0xca>
  }

  return netif_default;
 8018c7e:	4b05      	ldr	r3, [pc, #20]	@ (8018c94 <ip4_route+0xdc>)
 8018c80:	681b      	ldr	r3, [r3, #0]
}
 8018c82:	4618      	mov	r0, r3
 8018c84:	3714      	adds	r7, #20
 8018c86:	46bd      	mov	sp, r7
 8018c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8c:	4770      	bx	lr
 8018c8e:	bf00      	nop
 8018c90:	20013d64 	.word	0x20013d64
 8018c94:	20013d68 	.word	0x20013d68

08018c98 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b082      	sub	sp, #8
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018ca6:	f003 0301 	and.w	r3, r3, #1
 8018caa:	b2db      	uxtb	r3, r3
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d016      	beq.n	8018cde <ip4_input_accept+0x46>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	3304      	adds	r3, #4
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d011      	beq.n	8018cde <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018cba:	4b0b      	ldr	r3, [pc, #44]	@ (8018ce8 <ip4_input_accept+0x50>)
 8018cbc:	695a      	ldr	r2, [r3, #20]
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	3304      	adds	r3, #4
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	429a      	cmp	r2, r3
 8018cc6:	d008      	beq.n	8018cda <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018cc8:	4b07      	ldr	r3, [pc, #28]	@ (8018ce8 <ip4_input_accept+0x50>)
 8018cca:	695b      	ldr	r3, [r3, #20]
 8018ccc:	6879      	ldr	r1, [r7, #4]
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f000 fa98 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018cd4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d001      	beq.n	8018cde <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e000      	b.n	8018ce0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3708      	adds	r7, #8
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	2000a2fc 	.word	0x2000a2fc

08018cec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b088      	sub	sp, #32
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018cf6:	2301      	movs	r3, #1
 8018cf8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	685b      	ldr	r3, [r3, #4]
 8018cfe:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018d00:	693b      	ldr	r3, [r7, #16]
 8018d02:	781b      	ldrb	r3, [r3, #0]
 8018d04:	091b      	lsrs	r3, r3, #4
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	2b04      	cmp	r3, #4
 8018d0a:	d004      	beq.n	8018d16 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7f6 fb59 	bl	800f3c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018d12:	2300      	movs	r3, #0
 8018d14:	e130      	b.n	8018f78 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	f003 030f 	and.w	r3, r3, #15
 8018d1e:	b2db      	uxtb	r3, r3
 8018d20:	009b      	lsls	r3, r3, #2
 8018d22:	b2db      	uxtb	r3, r3
 8018d24:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	885b      	ldrh	r3, [r3, #2]
 8018d2a:	b29b      	uxth	r3, r3
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	f7f4 fe27 	bl	800d980 <lwip_htons>
 8018d32:	4603      	mov	r3, r0
 8018d34:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	891b      	ldrh	r3, [r3, #8]
 8018d3a:	89ba      	ldrh	r2, [r7, #12]
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d204      	bcs.n	8018d4a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018d40:	89bb      	ldrh	r3, [r7, #12]
 8018d42:	4619      	mov	r1, r3
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	f7f6 f9b7 	bl	800f0b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	895b      	ldrh	r3, [r3, #10]
 8018d4e:	89fa      	ldrh	r2, [r7, #14]
 8018d50:	429a      	cmp	r2, r3
 8018d52:	d807      	bhi.n	8018d64 <ip4_input+0x78>
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	891b      	ldrh	r3, [r3, #8]
 8018d58:	89ba      	ldrh	r2, [r7, #12]
 8018d5a:	429a      	cmp	r2, r3
 8018d5c:	d802      	bhi.n	8018d64 <ip4_input+0x78>
 8018d5e:	89fb      	ldrh	r3, [r7, #14]
 8018d60:	2b13      	cmp	r3, #19
 8018d62:	d804      	bhi.n	8018d6e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018d64:	6878      	ldr	r0, [r7, #4]
 8018d66:	f7f6 fb2d 	bl	800f3c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	e104      	b.n	8018f78 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8018d6e:	89fb      	ldrh	r3, [r7, #14]
 8018d70:	4619      	mov	r1, r3
 8018d72:	6938      	ldr	r0, [r7, #16]
 8018d74:	f7f4 ff4c 	bl	800dc10 <inet_chksum>
 8018d78:	4603      	mov	r3, r0
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d004      	beq.n	8018d88 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8018d7e:	6878      	ldr	r0, [r7, #4]
 8018d80:	f7f6 fb20 	bl	800f3c4 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8018d84:	2300      	movs	r3, #0
 8018d86:	e0f7      	b.n	8018f78 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018d88:	693b      	ldr	r3, [r7, #16]
 8018d8a:	691b      	ldr	r3, [r3, #16]
 8018d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8018f80 <ip4_input+0x294>)
 8018d8e:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018d90:	693b      	ldr	r3, [r7, #16]
 8018d92:	68db      	ldr	r3, [r3, #12]
 8018d94:	4a7a      	ldr	r2, [pc, #488]	@ (8018f80 <ip4_input+0x294>)
 8018d96:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018d98:	4b79      	ldr	r3, [pc, #484]	@ (8018f80 <ip4_input+0x294>)
 8018d9a:	695b      	ldr	r3, [r3, #20]
 8018d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018da0:	2be0      	cmp	r3, #224	@ 0xe0
 8018da2:	d112      	bne.n	8018dca <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018daa:	f003 0301 	and.w	r3, r3, #1
 8018dae:	b2db      	uxtb	r3, r3
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d007      	beq.n	8018dc4 <ip4_input+0xd8>
 8018db4:	683b      	ldr	r3, [r7, #0]
 8018db6:	3304      	adds	r3, #4
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d002      	beq.n	8018dc4 <ip4_input+0xd8>
      netif = inp;
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	61fb      	str	r3, [r7, #28]
 8018dc2:	e02a      	b.n	8018e1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	61fb      	str	r3, [r7, #28]
 8018dc8:	e027      	b.n	8018e1a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018dca:	6838      	ldr	r0, [r7, #0]
 8018dcc:	f7ff ff64 	bl	8018c98 <ip4_input_accept>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d002      	beq.n	8018ddc <ip4_input+0xf0>
      netif = inp;
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	61fb      	str	r3, [r7, #28]
 8018dda:	e01e      	b.n	8018e1a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018de0:	4b67      	ldr	r3, [pc, #412]	@ (8018f80 <ip4_input+0x294>)
 8018de2:	695b      	ldr	r3, [r3, #20]
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8018de8:	d017      	beq.n	8018e1a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018dea:	4b66      	ldr	r3, [pc, #408]	@ (8018f84 <ip4_input+0x298>)
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	61fb      	str	r3, [r7, #28]
 8018df0:	e00e      	b.n	8018e10 <ip4_input+0x124>
          if (netif == inp) {
 8018df2:	69fa      	ldr	r2, [r7, #28]
 8018df4:	683b      	ldr	r3, [r7, #0]
 8018df6:	429a      	cmp	r2, r3
 8018df8:	d006      	beq.n	8018e08 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018dfa:	69f8      	ldr	r0, [r7, #28]
 8018dfc:	f7ff ff4c 	bl	8018c98 <ip4_input_accept>
 8018e00:	4603      	mov	r3, r0
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d108      	bne.n	8018e18 <ip4_input+0x12c>
 8018e06:	e000      	b.n	8018e0a <ip4_input+0x11e>
            continue;
 8018e08:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018e0a:	69fb      	ldr	r3, [r7, #28]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	61fb      	str	r3, [r7, #28]
 8018e10:	69fb      	ldr	r3, [r7, #28]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d1ed      	bne.n	8018df2 <ip4_input+0x106>
 8018e16:	e000      	b.n	8018e1a <ip4_input+0x12e>
            break;
 8018e18:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018e1a:	69fb      	ldr	r3, [r7, #28]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d111      	bne.n	8018e44 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	7a5b      	ldrb	r3, [r3, #9]
 8018e24:	2b11      	cmp	r3, #17
 8018e26:	d10d      	bne.n	8018e44 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018e28:	89fb      	ldrh	r3, [r7, #14]
 8018e2a:	693a      	ldr	r2, [r7, #16]
 8018e2c:	4413      	add	r3, r2
 8018e2e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018e30:	69bb      	ldr	r3, [r7, #24]
 8018e32:	885b      	ldrh	r3, [r3, #2]
 8018e34:	b29b      	uxth	r3, r3
 8018e36:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8018e3a:	d103      	bne.n	8018e44 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018e3c:	683b      	ldr	r3, [r7, #0]
 8018e3e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018e40:	2300      	movs	r3, #0
 8018e42:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d017      	beq.n	8018e7a <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8018f80 <ip4_input+0x294>)
 8018e4c:	691b      	ldr	r3, [r3, #16]
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d013      	beq.n	8018e7a <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e52:	4b4b      	ldr	r3, [pc, #300]	@ (8018f80 <ip4_input+0x294>)
 8018e54:	691b      	ldr	r3, [r3, #16]
 8018e56:	6839      	ldr	r1, [r7, #0]
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f000 f9d3 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018e5e:	4603      	mov	r3, r0
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d105      	bne.n	8018e70 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018e64:	4b46      	ldr	r3, [pc, #280]	@ (8018f80 <ip4_input+0x294>)
 8018e66:	691b      	ldr	r3, [r3, #16]
 8018e68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e6c:	2be0      	cmp	r3, #224	@ 0xe0
 8018e6e:	d104      	bne.n	8018e7a <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f7f6 faa7 	bl	800f3c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018e76:	2300      	movs	r3, #0
 8018e78:	e07e      	b.n	8018f78 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018e7a:	69fb      	ldr	r3, [r7, #28]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	d104      	bne.n	8018e8a <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018e80:	6878      	ldr	r0, [r7, #4]
 8018e82:	f7f6 fa9f 	bl	800f3c4 <pbuf_free>
    return ERR_OK;
 8018e86:	2300      	movs	r3, #0
 8018e88:	e076      	b.n	8018f78 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018e8a:	693b      	ldr	r3, [r7, #16]
 8018e8c:	88db      	ldrh	r3, [r3, #6]
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	461a      	mov	r2, r3
 8018e92:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8018e96:	4013      	ands	r3, r2
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d00b      	beq.n	8018eb4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f000 fcf7 	bl	8019890 <ip4_reass>
 8018ea2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d101      	bne.n	8018eae <ip4_input+0x1c2>
      return ERR_OK;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	e064      	b.n	8018f78 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	685b      	ldr	r3, [r3, #4]
 8018eb2:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018eb4:	4a32      	ldr	r2, [pc, #200]	@ (8018f80 <ip4_input+0x294>)
 8018eb6:	69fb      	ldr	r3, [r7, #28]
 8018eb8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018eba:	4a31      	ldr	r2, [pc, #196]	@ (8018f80 <ip4_input+0x294>)
 8018ebc:	683b      	ldr	r3, [r7, #0]
 8018ebe:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018ec0:	4a2f      	ldr	r2, [pc, #188]	@ (8018f80 <ip4_input+0x294>)
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018ec6:	693b      	ldr	r3, [r7, #16]
 8018ec8:	781b      	ldrb	r3, [r3, #0]
 8018eca:	f003 030f 	and.w	r3, r3, #15
 8018ece:	b2db      	uxtb	r3, r3
 8018ed0:	009b      	lsls	r3, r3, #2
 8018ed2:	b2db      	uxtb	r3, r3
 8018ed4:	461a      	mov	r2, r3
 8018ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8018f80 <ip4_input+0x294>)
 8018ed8:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018eda:	89fb      	ldrh	r3, [r7, #14]
 8018edc:	4619      	mov	r1, r3
 8018ede:	6878      	ldr	r0, [r7, #4]
 8018ee0:	f7f6 f9ea 	bl	800f2b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	7a5b      	ldrb	r3, [r3, #9]
 8018ee8:	2b11      	cmp	r3, #17
 8018eea:	d006      	beq.n	8018efa <ip4_input+0x20e>
 8018eec:	2b11      	cmp	r3, #17
 8018eee:	dc13      	bgt.n	8018f18 <ip4_input+0x22c>
 8018ef0:	2b01      	cmp	r3, #1
 8018ef2:	d00c      	beq.n	8018f0e <ip4_input+0x222>
 8018ef4:	2b06      	cmp	r3, #6
 8018ef6:	d005      	beq.n	8018f04 <ip4_input+0x218>
 8018ef8:	e00e      	b.n	8018f18 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018efa:	6839      	ldr	r1, [r7, #0]
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f7fc f973 	bl	80151e8 <udp_input>
        break;
 8018f02:	e026      	b.n	8018f52 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018f04:	6839      	ldr	r1, [r7, #0]
 8018f06:	6878      	ldr	r0, [r7, #4]
 8018f08:	f7f8 f93e 	bl	8011188 <tcp_input>
        break;
 8018f0c:	e021      	b.n	8018f52 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018f0e:	6839      	ldr	r1, [r7, #0]
 8018f10:	6878      	ldr	r0, [r7, #4]
 8018f12:	f7ff fc8f 	bl	8018834 <icmp_input>
        break;
 8018f16:	e01c      	b.n	8018f52 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018f18:	4b19      	ldr	r3, [pc, #100]	@ (8018f80 <ip4_input+0x294>)
 8018f1a:	695b      	ldr	r3, [r3, #20]
 8018f1c:	69f9      	ldr	r1, [r7, #28]
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f000 f970 	bl	8019204 <ip4_addr_isbroadcast_u32>
 8018f24:	4603      	mov	r3, r0
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d10f      	bne.n	8018f4a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018f2a:	4b15      	ldr	r3, [pc, #84]	@ (8018f80 <ip4_input+0x294>)
 8018f2c:	695b      	ldr	r3, [r3, #20]
 8018f2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018f32:	2be0      	cmp	r3, #224	@ 0xe0
 8018f34:	d009      	beq.n	8018f4a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018f36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f3a:	4619      	mov	r1, r3
 8018f3c:	6878      	ldr	r0, [r7, #4]
 8018f3e:	f7f6 fa2e 	bl	800f39e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018f42:	2102      	movs	r1, #2
 8018f44:	6878      	ldr	r0, [r7, #4]
 8018f46:	f7ff fda3 	bl	8018a90 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018f4a:	6878      	ldr	r0, [r7, #4]
 8018f4c:	f7f6 fa3a 	bl	800f3c4 <pbuf_free>
        break;
 8018f50:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018f52:	4b0b      	ldr	r3, [pc, #44]	@ (8018f80 <ip4_input+0x294>)
 8018f54:	2200      	movs	r2, #0
 8018f56:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018f58:	4b09      	ldr	r3, [pc, #36]	@ (8018f80 <ip4_input+0x294>)
 8018f5a:	2200      	movs	r2, #0
 8018f5c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018f5e:	4b08      	ldr	r3, [pc, #32]	@ (8018f80 <ip4_input+0x294>)
 8018f60:	2200      	movs	r2, #0
 8018f62:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018f64:	4b06      	ldr	r3, [pc, #24]	@ (8018f80 <ip4_input+0x294>)
 8018f66:	2200      	movs	r2, #0
 8018f68:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018f6a:	4b05      	ldr	r3, [pc, #20]	@ (8018f80 <ip4_input+0x294>)
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018f70:	4b03      	ldr	r3, [pc, #12]	@ (8018f80 <ip4_input+0x294>)
 8018f72:	2200      	movs	r2, #0
 8018f74:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018f76:	2300      	movs	r3, #0
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	3720      	adds	r7, #32
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	2000a2fc 	.word	0x2000a2fc
 8018f84:	20013d64 	.word	0x20013d64

08018f88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b08a      	sub	sp, #40	@ 0x28
 8018f8c:	af04      	add	r7, sp, #16
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	60b9      	str	r1, [r7, #8]
 8018f92:	607a      	str	r2, [r7, #4]
 8018f94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018f96:	68bb      	ldr	r3, [r7, #8]
 8018f98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d009      	beq.n	8018fb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d003      	beq.n	8018fae <ip4_output_if+0x26>
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d102      	bne.n	8018fb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fb0:	3304      	adds	r3, #4
 8018fb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018fb4:	78fa      	ldrb	r2, [r7, #3]
 8018fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018fb8:	9302      	str	r3, [sp, #8]
 8018fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018fbe:	9301      	str	r3, [sp, #4]
 8018fc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018fc4:	9300      	str	r3, [sp, #0]
 8018fc6:	4613      	mov	r3, r2
 8018fc8:	687a      	ldr	r2, [r7, #4]
 8018fca:	6979      	ldr	r1, [r7, #20]
 8018fcc:	68f8      	ldr	r0, [r7, #12]
 8018fce:	f000 f805 	bl	8018fdc <ip4_output_if_src>
 8018fd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	3718      	adds	r7, #24
 8018fd8:	46bd      	mov	sp, r7
 8018fda:	bd80      	pop	{r7, pc}

08018fdc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b088      	sub	sp, #32
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	60f8      	str	r0, [r7, #12]
 8018fe4:	60b9      	str	r1, [r7, #8]
 8018fe6:	607a      	str	r2, [r7, #4]
 8018fe8:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8018fea:	2300      	movs	r3, #0
 8018fec:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	7b9b      	ldrb	r3, [r3, #14]
 8018ff2:	2b01      	cmp	r3, #1
 8018ff4:	d006      	beq.n	8019004 <ip4_output_if_src+0x28>
 8018ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80191ec <ip4_output_if_src+0x210>)
 8018ff8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8018ffc:	497c      	ldr	r1, [pc, #496]	@ (80191f0 <ip4_output_if_src+0x214>)
 8018ffe:	487d      	ldr	r0, [pc, #500]	@ (80191f4 <ip4_output_if_src+0x218>)
 8019000:	f002 f81e 	bl	801b040 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2b00      	cmp	r3, #0
 8019008:	f000 80c4 	beq.w	8019194 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801900c:	2314      	movs	r3, #20
 801900e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019010:	2114      	movs	r1, #20
 8019012:	68f8      	ldr	r0, [r7, #12]
 8019014:	f7f6 f940 	bl	800f298 <pbuf_add_header>
 8019018:	4603      	mov	r3, r0
 801901a:	2b00      	cmp	r3, #0
 801901c:	d002      	beq.n	8019024 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801901e:	f06f 0301 	mvn.w	r3, #1
 8019022:	e0df      	b.n	80191e4 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	685b      	ldr	r3, [r3, #4]
 8019028:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	895b      	ldrh	r3, [r3, #10]
 801902e:	2b13      	cmp	r3, #19
 8019030:	d806      	bhi.n	8019040 <ip4_output_if_src+0x64>
 8019032:	4b6e      	ldr	r3, [pc, #440]	@ (80191ec <ip4_output_if_src+0x210>)
 8019034:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019038:	496f      	ldr	r1, [pc, #444]	@ (80191f8 <ip4_output_if_src+0x21c>)
 801903a:	486e      	ldr	r0, [pc, #440]	@ (80191f4 <ip4_output_if_src+0x218>)
 801903c:	f002 f800 	bl	801b040 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019040:	69bb      	ldr	r3, [r7, #24]
 8019042:	78fa      	ldrb	r2, [r7, #3]
 8019044:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019046:	69bb      	ldr	r3, [r7, #24]
 8019048:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801904c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801904e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019052:	78fb      	ldrb	r3, [r7, #3]
 8019054:	021b      	lsls	r3, r3, #8
 8019056:	4313      	orrs	r3, r2
 8019058:	021b      	lsls	r3, r3, #8
 801905a:	b21a      	sxth	r2, r3
 801905c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8019060:	78fb      	ldrb	r3, [r7, #3]
 8019062:	021b      	lsls	r3, r3, #8
 8019064:	430b      	orrs	r3, r1
 8019066:	121b      	asrs	r3, r3, #8
 8019068:	b21b      	sxth	r3, r3
 801906a:	b2db      	uxtb	r3, r3
 801906c:	b21b      	sxth	r3, r3
 801906e:	4313      	orrs	r3, r2
 8019070:	b21b      	sxth	r3, r3
 8019072:	b29b      	uxth	r3, r3
 8019074:	461a      	mov	r2, r3
 8019076:	69fb      	ldr	r3, [r7, #28]
 8019078:	4413      	add	r3, r2
 801907a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	681a      	ldr	r2, [r3, #0]
 8019080:	69bb      	ldr	r3, [r7, #24]
 8019082:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8019084:	69bb      	ldr	r3, [r7, #24]
 8019086:	691b      	ldr	r3, [r3, #16]
 8019088:	b29b      	uxth	r3, r3
 801908a:	69fa      	ldr	r2, [r7, #28]
 801908c:	4413      	add	r3, r2
 801908e:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8019090:	69bb      	ldr	r3, [r7, #24]
 8019092:	691b      	ldr	r3, [r3, #16]
 8019094:	0c1b      	lsrs	r3, r3, #16
 8019096:	69fa      	ldr	r2, [r7, #28]
 8019098:	4413      	add	r3, r2
 801909a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801909c:	8afb      	ldrh	r3, [r7, #22]
 801909e:	089b      	lsrs	r3, r3, #2
 80190a0:	b29b      	uxth	r3, r3
 80190a2:	b2db      	uxtb	r3, r3
 80190a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80190a8:	b2da      	uxtb	r2, r3
 80190aa:	69bb      	ldr	r3, [r7, #24]
 80190ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80190b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80190b6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80190ba:	69bb      	ldr	r3, [r7, #24]
 80190bc:	781b      	ldrb	r3, [r3, #0]
 80190be:	021b      	lsls	r3, r3, #8
 80190c0:	4313      	orrs	r3, r2
 80190c2:	021b      	lsls	r3, r3, #8
 80190c4:	b21a      	sxth	r2, r3
 80190c6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80190ca:	69bb      	ldr	r3, [r7, #24]
 80190cc:	781b      	ldrb	r3, [r3, #0]
 80190ce:	021b      	lsls	r3, r3, #8
 80190d0:	430b      	orrs	r3, r1
 80190d2:	121b      	asrs	r3, r3, #8
 80190d4:	b21b      	sxth	r3, r3
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	b21b      	sxth	r3, r3
 80190da:	4313      	orrs	r3, r2
 80190dc:	b21b      	sxth	r3, r3
 80190de:	b29b      	uxth	r3, r3
 80190e0:	461a      	mov	r2, r3
 80190e2:	69fb      	ldr	r3, [r7, #28]
 80190e4:	4413      	add	r3, r2
 80190e6:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	891b      	ldrh	r3, [r3, #8]
 80190ec:	4618      	mov	r0, r3
 80190ee:	f7f4 fc47 	bl	800d980 <lwip_htons>
 80190f2:	4603      	mov	r3, r0
 80190f4:	461a      	mov	r2, r3
 80190f6:	69bb      	ldr	r3, [r7, #24]
 80190f8:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80190fa:	69bb      	ldr	r3, [r7, #24]
 80190fc:	885b      	ldrh	r3, [r3, #2]
 80190fe:	b29b      	uxth	r3, r3
 8019100:	461a      	mov	r2, r3
 8019102:	69fb      	ldr	r3, [r7, #28]
 8019104:	4413      	add	r3, r2
 8019106:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019108:	69bb      	ldr	r3, [r7, #24]
 801910a:	2200      	movs	r2, #0
 801910c:	719a      	strb	r2, [r3, #6]
 801910e:	2200      	movs	r2, #0
 8019110:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019112:	4b3a      	ldr	r3, [pc, #232]	@ (80191fc <ip4_output_if_src+0x220>)
 8019114:	881b      	ldrh	r3, [r3, #0]
 8019116:	4618      	mov	r0, r3
 8019118:	f7f4 fc32 	bl	800d980 <lwip_htons>
 801911c:	4603      	mov	r3, r0
 801911e:	461a      	mov	r2, r3
 8019120:	69bb      	ldr	r3, [r7, #24]
 8019122:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8019124:	69bb      	ldr	r3, [r7, #24]
 8019126:	889b      	ldrh	r3, [r3, #4]
 8019128:	b29b      	uxth	r3, r3
 801912a:	461a      	mov	r2, r3
 801912c:	69fb      	ldr	r3, [r7, #28]
 801912e:	4413      	add	r3, r2
 8019130:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019132:	4b32      	ldr	r3, [pc, #200]	@ (80191fc <ip4_output_if_src+0x220>)
 8019134:	881b      	ldrh	r3, [r3, #0]
 8019136:	3301      	adds	r3, #1
 8019138:	b29a      	uxth	r2, r3
 801913a:	4b30      	ldr	r3, [pc, #192]	@ (80191fc <ip4_output_if_src+0x220>)
 801913c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d104      	bne.n	801914e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019144:	4b2e      	ldr	r3, [pc, #184]	@ (8019200 <ip4_output_if_src+0x224>)
 8019146:	681a      	ldr	r2, [r3, #0]
 8019148:	69bb      	ldr	r3, [r7, #24]
 801914a:	60da      	str	r2, [r3, #12]
 801914c:	e003      	b.n	8019156 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801914e:	68bb      	ldr	r3, [r7, #8]
 8019150:	681a      	ldr	r2, [r3, #0]
 8019152:	69bb      	ldr	r3, [r7, #24]
 8019154:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8019156:	69bb      	ldr	r3, [r7, #24]
 8019158:	68db      	ldr	r3, [r3, #12]
 801915a:	b29b      	uxth	r3, r3
 801915c:	69fa      	ldr	r2, [r7, #28]
 801915e:	4413      	add	r3, r2
 8019160:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8019162:	69bb      	ldr	r3, [r7, #24]
 8019164:	68db      	ldr	r3, [r3, #12]
 8019166:	0c1b      	lsrs	r3, r3, #16
 8019168:	69fa      	ldr	r2, [r7, #28]
 801916a:	4413      	add	r3, r2
 801916c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801916e:	69fb      	ldr	r3, [r7, #28]
 8019170:	0c1a      	lsrs	r2, r3, #16
 8019172:	69fb      	ldr	r3, [r7, #28]
 8019174:	b29b      	uxth	r3, r3
 8019176:	4413      	add	r3, r2
 8019178:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801917a:	69fb      	ldr	r3, [r7, #28]
 801917c:	0c1b      	lsrs	r3, r3, #16
 801917e:	69fa      	ldr	r2, [r7, #28]
 8019180:	4413      	add	r3, r2
 8019182:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8019184:	69fb      	ldr	r3, [r7, #28]
 8019186:	43db      	mvns	r3, r3
 8019188:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801918a:	69fb      	ldr	r3, [r7, #28]
 801918c:	b29a      	uxth	r2, r3
 801918e:	69bb      	ldr	r3, [r7, #24]
 8019190:	815a      	strh	r2, [r3, #10]
 8019192:	e00f      	b.n	80191b4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	895b      	ldrh	r3, [r3, #10]
 8019198:	2b13      	cmp	r3, #19
 801919a:	d802      	bhi.n	80191a2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801919c:	f06f 0301 	mvn.w	r3, #1
 80191a0:	e020      	b.n	80191e4 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	685b      	ldr	r3, [r3, #4]
 80191a6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80191a8:	69bb      	ldr	r3, [r7, #24]
 80191aa:	691b      	ldr	r3, [r3, #16]
 80191ac:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80191ae:	f107 0310 	add.w	r3, r7, #16
 80191b2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80191b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d00c      	beq.n	80191d6 <ip4_output_if_src+0x1fa>
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	891a      	ldrh	r2, [r3, #8]
 80191c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d906      	bls.n	80191d6 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80191cc:	68f8      	ldr	r0, [r7, #12]
 80191ce:	f000 fd5b 	bl	8019c88 <ip4_frag>
 80191d2:	4603      	mov	r3, r0
 80191d4:	e006      	b.n	80191e4 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80191d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d8:	695b      	ldr	r3, [r3, #20]
 80191da:	687a      	ldr	r2, [r7, #4]
 80191dc:	68f9      	ldr	r1, [r7, #12]
 80191de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80191e0:	4798      	blx	r3
 80191e2:	4603      	mov	r3, r0
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3720      	adds	r7, #32
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	08020500 	.word	0x08020500
 80191f0:	08020534 	.word	0x08020534
 80191f4:	08020540 	.word	0x08020540
 80191f8:	08020568 	.word	0x08020568
 80191fc:	20013efa 	.word	0x20013efa
 8019200:	0806c648 	.word	0x0806c648

08019204 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019204:	b480      	push	{r7}
 8019206:	b085      	sub	sp, #20
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019218:	d002      	beq.n	8019220 <ip4_addr_isbroadcast_u32+0x1c>
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d101      	bne.n	8019224 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019220:	2301      	movs	r3, #1
 8019222:	e02a      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019224:	683b      	ldr	r3, [r7, #0]
 8019226:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801922a:	f003 0302 	and.w	r3, r3, #2
 801922e:	2b00      	cmp	r3, #0
 8019230:	d101      	bne.n	8019236 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019232:	2300      	movs	r3, #0
 8019234:	e021      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	3304      	adds	r3, #4
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	687a      	ldr	r2, [r7, #4]
 801923e:	429a      	cmp	r2, r3
 8019240:	d101      	bne.n	8019246 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019242:	2300      	movs	r3, #0
 8019244:	e019      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019246:	68fa      	ldr	r2, [r7, #12]
 8019248:	683b      	ldr	r3, [r7, #0]
 801924a:	3304      	adds	r3, #4
 801924c:	681b      	ldr	r3, [r3, #0]
 801924e:	405a      	eors	r2, r3
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	3308      	adds	r3, #8
 8019254:	681b      	ldr	r3, [r3, #0]
 8019256:	4013      	ands	r3, r2
 8019258:	2b00      	cmp	r3, #0
 801925a:	d10d      	bne.n	8019278 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801925c:	683b      	ldr	r3, [r7, #0]
 801925e:	3308      	adds	r3, #8
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	43da      	mvns	r2, r3
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	3308      	adds	r3, #8
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019270:	429a      	cmp	r2, r3
 8019272:	d101      	bne.n	8019278 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019274:	2301      	movs	r3, #1
 8019276:	e000      	b.n	801927a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019278:	2300      	movs	r3, #0
  }
}
 801927a:	4618      	mov	r0, r3
 801927c:	3714      	adds	r7, #20
 801927e:	46bd      	mov	sp, r7
 8019280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019284:	4770      	bx	lr
	...

08019288 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b084      	sub	sp, #16
 801928c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801928e:	2300      	movs	r3, #0
 8019290:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019292:	4b12      	ldr	r3, [pc, #72]	@ (80192dc <ip_reass_tmr+0x54>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019298:	e018      	b.n	80192cc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	7fdb      	ldrb	r3, [r3, #31]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d00b      	beq.n	80192ba <ip_reass_tmr+0x32>
      r->timer--;
 80192a2:	68fb      	ldr	r3, [r7, #12]
 80192a4:	7fdb      	ldrb	r3, [r3, #31]
 80192a6:	3b01      	subs	r3, #1
 80192a8:	b2da      	uxtb	r2, r3
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	60fb      	str	r3, [r7, #12]
 80192b8:	e008      	b.n	80192cc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80192ba:	68fb      	ldr	r3, [r7, #12]
 80192bc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80192c4:	68b9      	ldr	r1, [r7, #8]
 80192c6:	6878      	ldr	r0, [r7, #4]
 80192c8:	f000 f80a 	bl	80192e0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d1e3      	bne.n	801929a <ip_reass_tmr+0x12>
    }
  }
}
 80192d2:	bf00      	nop
 80192d4:	bf00      	nop
 80192d6:	3710      	adds	r7, #16
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	20013efc 	.word	0x20013efc

080192e0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b088      	sub	sp, #32
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
 80192e8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80192ea:	2300      	movs	r3, #0
 80192ec:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80192ee:	683a      	ldr	r2, [r7, #0]
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d105      	bne.n	8019302 <ip_reass_free_complete_datagram+0x22>
 80192f6:	4b45      	ldr	r3, [pc, #276]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80192f8:	22ab      	movs	r2, #171	@ 0xab
 80192fa:	4945      	ldr	r1, [pc, #276]	@ (8019410 <ip_reass_free_complete_datagram+0x130>)
 80192fc:	4845      	ldr	r0, [pc, #276]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80192fe:	f001 fe9f 	bl	801b040 <iprintf>
  if (prev != NULL) {
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d00a      	beq.n	801931e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	429a      	cmp	r2, r3
 8019310:	d005      	beq.n	801931e <ip_reass_free_complete_datagram+0x3e>
 8019312:	4b3e      	ldr	r3, [pc, #248]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 8019314:	22ad      	movs	r2, #173	@ 0xad
 8019316:	4940      	ldr	r1, [pc, #256]	@ (8019418 <ip_reass_free_complete_datagram+0x138>)
 8019318:	483e      	ldr	r0, [pc, #248]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 801931a:	f001 fe91 	bl	801b040 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	685b      	ldr	r3, [r3, #4]
 8019324:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019326:	697b      	ldr	r3, [r7, #20]
 8019328:	889b      	ldrh	r3, [r3, #4]
 801932a:	b29b      	uxth	r3, r3
 801932c:	2b00      	cmp	r3, #0
 801932e:	d12a      	bne.n	8019386 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	685b      	ldr	r3, [r3, #4]
 8019334:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019336:	697b      	ldr	r3, [r7, #20]
 8019338:	681a      	ldr	r2, [r3, #0]
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801933e:	69bb      	ldr	r3, [r7, #24]
 8019340:	6858      	ldr	r0, [r3, #4]
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	3308      	adds	r3, #8
 8019346:	2214      	movs	r2, #20
 8019348:	4619      	mov	r1, r3
 801934a:	f002 f898 	bl	801b47e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801934e:	2101      	movs	r1, #1
 8019350:	69b8      	ldr	r0, [r7, #24]
 8019352:	f7ff fbad 	bl	8018ab0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019356:	69b8      	ldr	r0, [r7, #24]
 8019358:	f7f6 f8c2 	bl	800f4e0 <pbuf_clen>
 801935c:	4603      	mov	r3, r0
 801935e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019360:	8bfa      	ldrh	r2, [r7, #30]
 8019362:	8a7b      	ldrh	r3, [r7, #18]
 8019364:	4413      	add	r3, r2
 8019366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801936a:	db05      	blt.n	8019378 <ip_reass_free_complete_datagram+0x98>
 801936c:	4b27      	ldr	r3, [pc, #156]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 801936e:	22bc      	movs	r2, #188	@ 0xbc
 8019370:	492a      	ldr	r1, [pc, #168]	@ (801941c <ip_reass_free_complete_datagram+0x13c>)
 8019372:	4828      	ldr	r0, [pc, #160]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 8019374:	f001 fe64 	bl	801b040 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019378:	8bfa      	ldrh	r2, [r7, #30]
 801937a:	8a7b      	ldrh	r3, [r7, #18]
 801937c:	4413      	add	r3, r2
 801937e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019380:	69b8      	ldr	r0, [r7, #24]
 8019382:	f7f6 f81f 	bl	800f3c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	685b      	ldr	r3, [r3, #4]
 801938a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801938c:	e01f      	b.n	80193ce <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801938e:	69bb      	ldr	r3, [r7, #24]
 8019390:	685b      	ldr	r3, [r3, #4]
 8019392:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019394:	69bb      	ldr	r3, [r7, #24]
 8019396:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019398:	697b      	ldr	r3, [r7, #20]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801939e:	68f8      	ldr	r0, [r7, #12]
 80193a0:	f7f6 f89e 	bl	800f4e0 <pbuf_clen>
 80193a4:	4603      	mov	r3, r0
 80193a6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80193a8:	8bfa      	ldrh	r2, [r7, #30]
 80193aa:	8a7b      	ldrh	r3, [r7, #18]
 80193ac:	4413      	add	r3, r2
 80193ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80193b2:	db05      	blt.n	80193c0 <ip_reass_free_complete_datagram+0xe0>
 80193b4:	4b15      	ldr	r3, [pc, #84]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80193b6:	22cc      	movs	r2, #204	@ 0xcc
 80193b8:	4918      	ldr	r1, [pc, #96]	@ (801941c <ip_reass_free_complete_datagram+0x13c>)
 80193ba:	4816      	ldr	r0, [pc, #88]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80193bc:	f001 fe40 	bl	801b040 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80193c0:	8bfa      	ldrh	r2, [r7, #30]
 80193c2:	8a7b      	ldrh	r3, [r7, #18]
 80193c4:	4413      	add	r3, r2
 80193c6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80193c8:	68f8      	ldr	r0, [r7, #12]
 80193ca:	f7f5 fffb 	bl	800f3c4 <pbuf_free>
  while (p != NULL) {
 80193ce:	69bb      	ldr	r3, [r7, #24]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d1dc      	bne.n	801938e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80193d4:	6839      	ldr	r1, [r7, #0]
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f000 f8c2 	bl	8019560 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80193dc:	4b10      	ldr	r3, [pc, #64]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	8bfa      	ldrh	r2, [r7, #30]
 80193e2:	429a      	cmp	r2, r3
 80193e4:	d905      	bls.n	80193f2 <ip_reass_free_complete_datagram+0x112>
 80193e6:	4b09      	ldr	r3, [pc, #36]	@ (801940c <ip_reass_free_complete_datagram+0x12c>)
 80193e8:	22d2      	movs	r2, #210	@ 0xd2
 80193ea:	490e      	ldr	r1, [pc, #56]	@ (8019424 <ip_reass_free_complete_datagram+0x144>)
 80193ec:	4809      	ldr	r0, [pc, #36]	@ (8019414 <ip_reass_free_complete_datagram+0x134>)
 80193ee:	f001 fe27 	bl	801b040 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80193f2:	4b0b      	ldr	r3, [pc, #44]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193f4:	881a      	ldrh	r2, [r3, #0]
 80193f6:	8bfb      	ldrh	r3, [r7, #30]
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	b29a      	uxth	r2, r3
 80193fc:	4b08      	ldr	r3, [pc, #32]	@ (8019420 <ip_reass_free_complete_datagram+0x140>)
 80193fe:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019400:	8bfb      	ldrh	r3, [r7, #30]
}
 8019402:	4618      	mov	r0, r3
 8019404:	3720      	adds	r7, #32
 8019406:	46bd      	mov	sp, r7
 8019408:	bd80      	pop	{r7, pc}
 801940a:	bf00      	nop
 801940c:	08020598 	.word	0x08020598
 8019410:	080205d4 	.word	0x080205d4
 8019414:	080205e0 	.word	0x080205e0
 8019418:	08020608 	.word	0x08020608
 801941c:	0802061c 	.word	0x0802061c
 8019420:	20013f00 	.word	0x20013f00
 8019424:	0802063c 	.word	0x0802063c

08019428 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b08a      	sub	sp, #40	@ 0x28
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019432:	2300      	movs	r3, #0
 8019434:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019436:	2300      	movs	r3, #0
 8019438:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801943a:	2300      	movs	r3, #0
 801943c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801943e:	2300      	movs	r3, #0
 8019440:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019442:	2300      	movs	r3, #0
 8019444:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019446:	4b28      	ldr	r3, [pc, #160]	@ (80194e8 <ip_reass_remove_oldest_datagram+0xc0>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801944c:	e030      	b.n	80194b0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019450:	695a      	ldr	r2, [r3, #20]
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	68db      	ldr	r3, [r3, #12]
 8019456:	429a      	cmp	r2, r3
 8019458:	d10c      	bne.n	8019474 <ip_reass_remove_oldest_datagram+0x4c>
 801945a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801945c:	699a      	ldr	r2, [r3, #24]
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	691b      	ldr	r3, [r3, #16]
 8019462:	429a      	cmp	r2, r3
 8019464:	d106      	bne.n	8019474 <ip_reass_remove_oldest_datagram+0x4c>
 8019466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019468:	899a      	ldrh	r2, [r3, #12]
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	889b      	ldrh	r3, [r3, #4]
 801946e:	b29b      	uxth	r3, r3
 8019470:	429a      	cmp	r2, r3
 8019472:	d014      	beq.n	801949e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019474:	693b      	ldr	r3, [r7, #16]
 8019476:	3301      	adds	r3, #1
 8019478:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801947a:	6a3b      	ldr	r3, [r7, #32]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d104      	bne.n	801948a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019482:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019484:	69fb      	ldr	r3, [r7, #28]
 8019486:	61bb      	str	r3, [r7, #24]
 8019488:	e009      	b.n	801949e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801948a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801948c:	7fda      	ldrb	r2, [r3, #31]
 801948e:	6a3b      	ldr	r3, [r7, #32]
 8019490:	7fdb      	ldrb	r3, [r3, #31]
 8019492:	429a      	cmp	r2, r3
 8019494:	d803      	bhi.n	801949e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019498:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801949a:	69fb      	ldr	r3, [r7, #28]
 801949c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d001      	beq.n	80194aa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80194a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194a8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80194aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80194b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d1cb      	bne.n	801944e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80194b6:	6a3b      	ldr	r3, [r7, #32]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d008      	beq.n	80194ce <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80194bc:	69b9      	ldr	r1, [r7, #24]
 80194be:	6a38      	ldr	r0, [r7, #32]
 80194c0:	f7ff ff0e 	bl	80192e0 <ip_reass_free_complete_datagram>
 80194c4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80194c6:	697a      	ldr	r2, [r7, #20]
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	4413      	add	r3, r2
 80194cc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80194ce:	697a      	ldr	r2, [r7, #20]
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	da02      	bge.n	80194dc <ip_reass_remove_oldest_datagram+0xb4>
 80194d6:	693b      	ldr	r3, [r7, #16]
 80194d8:	2b01      	cmp	r3, #1
 80194da:	dcac      	bgt.n	8019436 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80194dc:	697b      	ldr	r3, [r7, #20]
}
 80194de:	4618      	mov	r0, r3
 80194e0:	3728      	adds	r7, #40	@ 0x28
 80194e2:	46bd      	mov	sp, r7
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	bf00      	nop
 80194e8:	20013efc 	.word	0x20013efc

080194ec <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b084      	sub	sp, #16
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
 80194f4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80194f6:	2004      	movs	r0, #4
 80194f8:	f7f5 f870 	bl	800e5dc <memp_malloc>
 80194fc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d110      	bne.n	8019526 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019504:	6839      	ldr	r1, [r7, #0]
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f7ff ff8e 	bl	8019428 <ip_reass_remove_oldest_datagram>
 801950c:	4602      	mov	r2, r0
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	4293      	cmp	r3, r2
 8019512:	dc03      	bgt.n	801951c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019514:	2004      	movs	r0, #4
 8019516:	f7f5 f861 	bl	800e5dc <memp_malloc>
 801951a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801951c:	68fb      	ldr	r3, [r7, #12]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d101      	bne.n	8019526 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019522:	2300      	movs	r3, #0
 8019524:	e016      	b.n	8019554 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019526:	2220      	movs	r2, #32
 8019528:	2100      	movs	r1, #0
 801952a:	68f8      	ldr	r0, [r7, #12]
 801952c:	f001 feea 	bl	801b304 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	220f      	movs	r2, #15
 8019534:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019536:	4b09      	ldr	r3, [pc, #36]	@ (801955c <ip_reass_enqueue_new_datagram+0x70>)
 8019538:	681a      	ldr	r2, [r3, #0]
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801953e:	4a07      	ldr	r2, [pc, #28]	@ (801955c <ip_reass_enqueue_new_datagram+0x70>)
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019544:	68fb      	ldr	r3, [r7, #12]
 8019546:	3308      	adds	r3, #8
 8019548:	2214      	movs	r2, #20
 801954a:	6879      	ldr	r1, [r7, #4]
 801954c:	4618      	mov	r0, r3
 801954e:	f001 ff96 	bl	801b47e <memcpy>
  return ipr;
 8019552:	68fb      	ldr	r3, [r7, #12]
}
 8019554:	4618      	mov	r0, r3
 8019556:	3710      	adds	r7, #16
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}
 801955c:	20013efc 	.word	0x20013efc

08019560 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019560:	b580      	push	{r7, lr}
 8019562:	b082      	sub	sp, #8
 8019564:	af00      	add	r7, sp, #0
 8019566:	6078      	str	r0, [r7, #4]
 8019568:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801956a:	4b10      	ldr	r3, [pc, #64]	@ (80195ac <ip_reass_dequeue_datagram+0x4c>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	687a      	ldr	r2, [r7, #4]
 8019570:	429a      	cmp	r2, r3
 8019572:	d104      	bne.n	801957e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	4a0c      	ldr	r2, [pc, #48]	@ (80195ac <ip_reass_dequeue_datagram+0x4c>)
 801957a:	6013      	str	r3, [r2, #0]
 801957c:	e00d      	b.n	801959a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801957e:	683b      	ldr	r3, [r7, #0]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d106      	bne.n	8019592 <ip_reass_dequeue_datagram+0x32>
 8019584:	4b0a      	ldr	r3, [pc, #40]	@ (80195b0 <ip_reass_dequeue_datagram+0x50>)
 8019586:	f240 1245 	movw	r2, #325	@ 0x145
 801958a:	490a      	ldr	r1, [pc, #40]	@ (80195b4 <ip_reass_dequeue_datagram+0x54>)
 801958c:	480a      	ldr	r0, [pc, #40]	@ (80195b8 <ip_reass_dequeue_datagram+0x58>)
 801958e:	f001 fd57 	bl	801b040 <iprintf>
    prev->next = ipr->next;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	683b      	ldr	r3, [r7, #0]
 8019598:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801959a:	6879      	ldr	r1, [r7, #4]
 801959c:	2004      	movs	r0, #4
 801959e:	f7f5 f86f 	bl	800e680 <memp_free>
}
 80195a2:	bf00      	nop
 80195a4:	3708      	adds	r7, #8
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}
 80195aa:	bf00      	nop
 80195ac:	20013efc 	.word	0x20013efc
 80195b0:	08020598 	.word	0x08020598
 80195b4:	08020660 	.word	0x08020660
 80195b8:	080205e0 	.word	0x080205e0

080195bc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80195bc:	b580      	push	{r7, lr}
 80195be:	b08c      	sub	sp, #48	@ 0x30
 80195c0:	af00      	add	r7, sp, #0
 80195c2:	60f8      	str	r0, [r7, #12]
 80195c4:	60b9      	str	r1, [r7, #8]
 80195c6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80195c8:	2300      	movs	r3, #0
 80195ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80195cc:	2301      	movs	r3, #1
 80195ce:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80195d0:	68bb      	ldr	r3, [r7, #8]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	885b      	ldrh	r3, [r3, #2]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	4618      	mov	r0, r3
 80195de:	f7f4 f9cf 	bl	800d980 <lwip_htons>
 80195e2:	4603      	mov	r3, r0
 80195e4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	781b      	ldrb	r3, [r3, #0]
 80195ea:	f003 030f 	and.w	r3, r3, #15
 80195ee:	b2db      	uxtb	r3, r3
 80195f0:	009b      	lsls	r3, r3, #2
 80195f2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80195f4:	7e7b      	ldrb	r3, [r7, #25]
 80195f6:	b29b      	uxth	r3, r3
 80195f8:	8b7a      	ldrh	r2, [r7, #26]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d202      	bcs.n	8019604 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80195fe:	f04f 33ff 	mov.w	r3, #4294967295
 8019602:	e135      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019604:	7e7b      	ldrb	r3, [r7, #25]
 8019606:	b29b      	uxth	r3, r3
 8019608:	8b7a      	ldrh	r2, [r7, #26]
 801960a:	1ad3      	subs	r3, r2, r3
 801960c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801960e:	69fb      	ldr	r3, [r7, #28]
 8019610:	88db      	ldrh	r3, [r3, #6]
 8019612:	b29b      	uxth	r3, r3
 8019614:	4618      	mov	r0, r3
 8019616:	f7f4 f9b3 	bl	800d980 <lwip_htons>
 801961a:	4603      	mov	r3, r0
 801961c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019620:	b29b      	uxth	r3, r3
 8019622:	00db      	lsls	r3, r3, #3
 8019624:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	685b      	ldr	r3, [r3, #4]
 801962a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801962c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801962e:	2200      	movs	r2, #0
 8019630:	701a      	strb	r2, [r3, #0]
 8019632:	2200      	movs	r2, #0
 8019634:	705a      	strb	r2, [r3, #1]
 8019636:	2200      	movs	r2, #0
 8019638:	709a      	strb	r2, [r3, #2]
 801963a:	2200      	movs	r2, #0
 801963c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801963e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019640:	8afa      	ldrh	r2, [r7, #22]
 8019642:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019644:	8afa      	ldrh	r2, [r7, #22]
 8019646:	8b7b      	ldrh	r3, [r7, #26]
 8019648:	4413      	add	r3, r2
 801964a:	b29a      	uxth	r2, r3
 801964c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801964e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019652:	88db      	ldrh	r3, [r3, #6]
 8019654:	b29b      	uxth	r3, r3
 8019656:	8afa      	ldrh	r2, [r7, #22]
 8019658:	429a      	cmp	r2, r3
 801965a:	d902      	bls.n	8019662 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801965c:	f04f 33ff 	mov.w	r3, #4294967295
 8019660:	e106      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019662:	68fb      	ldr	r3, [r7, #12]
 8019664:	685b      	ldr	r3, [r3, #4]
 8019666:	627b      	str	r3, [r7, #36]	@ 0x24
 8019668:	e068      	b.n	801973c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801966a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801966c:	685b      	ldr	r3, [r3, #4]
 801966e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019672:	889b      	ldrh	r3, [r3, #4]
 8019674:	b29a      	uxth	r2, r3
 8019676:	693b      	ldr	r3, [r7, #16]
 8019678:	889b      	ldrh	r3, [r3, #4]
 801967a:	b29b      	uxth	r3, r3
 801967c:	429a      	cmp	r2, r3
 801967e:	d235      	bcs.n	80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019684:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019688:	2b00      	cmp	r3, #0
 801968a:	d020      	beq.n	80196ce <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801968c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801968e:	889b      	ldrh	r3, [r3, #4]
 8019690:	b29a      	uxth	r2, r3
 8019692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019694:	88db      	ldrh	r3, [r3, #6]
 8019696:	b29b      	uxth	r3, r3
 8019698:	429a      	cmp	r2, r3
 801969a:	d307      	bcc.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801969c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801969e:	88db      	ldrh	r3, [r3, #6]
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	693b      	ldr	r3, [r7, #16]
 80196a4:	889b      	ldrh	r3, [r3, #4]
 80196a6:	b29b      	uxth	r3, r3
 80196a8:	429a      	cmp	r2, r3
 80196aa:	d902      	bls.n	80196b2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196ac:	f04f 33ff 	mov.w	r3, #4294967295
 80196b0:	e0de      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80196b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196b4:	68ba      	ldr	r2, [r7, #8]
 80196b6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80196b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80196ba:	88db      	ldrh	r3, [r3, #6]
 80196bc:	b29a      	uxth	r2, r3
 80196be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196c0:	889b      	ldrh	r3, [r3, #4]
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d03d      	beq.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80196c8:	2300      	movs	r3, #0
 80196ca:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80196cc:	e03a      	b.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80196ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196d0:	88db      	ldrh	r3, [r3, #6]
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	693b      	ldr	r3, [r7, #16]
 80196d6:	889b      	ldrh	r3, [r3, #4]
 80196d8:	b29b      	uxth	r3, r3
 80196da:	429a      	cmp	r2, r3
 80196dc:	d902      	bls.n	80196e4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196de:	f04f 33ff 	mov.w	r3, #4294967295
 80196e2:	e0c5      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	68ba      	ldr	r2, [r7, #8]
 80196e8:	605a      	str	r2, [r3, #4]
      break;
 80196ea:	e02b      	b.n	8019744 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80196ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80196ee:	889b      	ldrh	r3, [r3, #4]
 80196f0:	b29a      	uxth	r2, r3
 80196f2:	693b      	ldr	r3, [r7, #16]
 80196f4:	889b      	ldrh	r3, [r3, #4]
 80196f6:	b29b      	uxth	r3, r3
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d102      	bne.n	8019702 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196fc:	f04f 33ff 	mov.w	r3, #4294967295
 8019700:	e0b6      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019704:	889b      	ldrh	r3, [r3, #4]
 8019706:	b29a      	uxth	r2, r3
 8019708:	693b      	ldr	r3, [r7, #16]
 801970a:	88db      	ldrh	r3, [r3, #6]
 801970c:	b29b      	uxth	r3, r3
 801970e:	429a      	cmp	r2, r3
 8019710:	d202      	bcs.n	8019718 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019712:	f04f 33ff 	mov.w	r3, #4294967295
 8019716:	e0ab      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801971a:	2b00      	cmp	r3, #0
 801971c:	d009      	beq.n	8019732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801971e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019720:	88db      	ldrh	r3, [r3, #6]
 8019722:	b29a      	uxth	r2, r3
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	889b      	ldrh	r3, [r3, #4]
 8019728:	b29b      	uxth	r3, r3
 801972a:	429a      	cmp	r2, r3
 801972c:	d001      	beq.n	8019732 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801972e:	2300      	movs	r3, #0
 8019730:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019732:	693b      	ldr	r3, [r7, #16]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801973e:	2b00      	cmp	r3, #0
 8019740:	d193      	bne.n	801966a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019742:	e000      	b.n	8019746 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019744:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019748:	2b00      	cmp	r3, #0
 801974a:	d12d      	bne.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801974c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801974e:	2b00      	cmp	r3, #0
 8019750:	d01c      	beq.n	801978c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019754:	88db      	ldrh	r3, [r3, #6]
 8019756:	b29a      	uxth	r2, r3
 8019758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801975a:	889b      	ldrh	r3, [r3, #4]
 801975c:	b29b      	uxth	r3, r3
 801975e:	429a      	cmp	r2, r3
 8019760:	d906      	bls.n	8019770 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019762:	4b45      	ldr	r3, [pc, #276]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019764:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8019768:	4944      	ldr	r1, [pc, #272]	@ (801987c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801976a:	4845      	ldr	r0, [pc, #276]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801976c:	f001 fc68 	bl	801b040 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019772:	68ba      	ldr	r2, [r7, #8]
 8019774:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019778:	88db      	ldrh	r3, [r3, #6]
 801977a:	b29a      	uxth	r2, r3
 801977c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801977e:	889b      	ldrh	r3, [r3, #4]
 8019780:	b29b      	uxth	r3, r3
 8019782:	429a      	cmp	r2, r3
 8019784:	d010      	beq.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019786:	2300      	movs	r3, #0
 8019788:	623b      	str	r3, [r7, #32]
 801978a:	e00d      	b.n	80197a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	685b      	ldr	r3, [r3, #4]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d006      	beq.n	80197a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019794:	4b38      	ldr	r3, [pc, #224]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019796:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801979a:	493a      	ldr	r1, [pc, #232]	@ (8019884 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801979c:	4838      	ldr	r0, [pc, #224]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801979e:	f001 fc4f 	bl	801b040 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80197a2:	68fb      	ldr	r3, [r7, #12]
 80197a4:	68ba      	ldr	r2, [r7, #8]
 80197a6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d105      	bne.n	80197ba <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	7f9b      	ldrb	r3, [r3, #30]
 80197b2:	f003 0301 	and.w	r3, r3, #1
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	d059      	beq.n	801986e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80197ba:	6a3b      	ldr	r3, [r7, #32]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d04f      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80197c0:	68fb      	ldr	r3, [r7, #12]
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d006      	beq.n	80197d6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	685b      	ldr	r3, [r3, #4]
 80197cc:	685b      	ldr	r3, [r3, #4]
 80197ce:	889b      	ldrh	r3, [r3, #4]
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d002      	beq.n	80197dc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80197d6:	2300      	movs	r3, #0
 80197d8:	623b      	str	r3, [r7, #32]
 80197da:	e041      	b.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80197dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197de:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80197e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80197e6:	e012      	b.n	801980e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80197e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80197ea:	685b      	ldr	r3, [r3, #4]
 80197ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80197ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80197f0:	88db      	ldrh	r3, [r3, #6]
 80197f2:	b29a      	uxth	r2, r3
 80197f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80197f6:	889b      	ldrh	r3, [r3, #4]
 80197f8:	b29b      	uxth	r3, r3
 80197fa:	429a      	cmp	r2, r3
 80197fc:	d002      	beq.n	8019804 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	623b      	str	r3, [r7, #32]
            break;
 8019802:	e007      	b.n	8019814 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019806:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8019808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019810:	2b00      	cmp	r3, #0
 8019812:	d1e9      	bne.n	80197e8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019814:	6a3b      	ldr	r3, [r7, #32]
 8019816:	2b00      	cmp	r3, #0
 8019818:	d022      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d106      	bne.n	8019830 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019822:	4b15      	ldr	r3, [pc, #84]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019824:	f240 12df 	movw	r2, #479	@ 0x1df
 8019828:	4917      	ldr	r1, [pc, #92]	@ (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801982a:	4815      	ldr	r0, [pc, #84]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801982c:	f001 fc08 	bl	801b040 <iprintf>
          LWIP_ASSERT("sanity check",
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	685b      	ldr	r3, [r3, #4]
 8019834:	685b      	ldr	r3, [r3, #4]
 8019836:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019838:	429a      	cmp	r2, r3
 801983a:	d106      	bne.n	801984a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801983c:	4b0e      	ldr	r3, [pc, #56]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801983e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8019842:	4911      	ldr	r1, [pc, #68]	@ (8019888 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019844:	480e      	ldr	r0, [pc, #56]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019846:	f001 fbfb 	bl	801b040 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801984a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d006      	beq.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019852:	4b09      	ldr	r3, [pc, #36]	@ (8019878 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019854:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8019858:	490c      	ldr	r1, [pc, #48]	@ (801988c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801985a:	4809      	ldr	r0, [pc, #36]	@ (8019880 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801985c:	f001 fbf0 	bl	801b040 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019860:	6a3b      	ldr	r3, [r7, #32]
 8019862:	2b00      	cmp	r3, #0
 8019864:	bf14      	ite	ne
 8019866:	2301      	movne	r3, #1
 8019868:	2300      	moveq	r3, #0
 801986a:	b2db      	uxtb	r3, r3
 801986c:	e000      	b.n	8019870 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801986e:	2300      	movs	r3, #0
}
 8019870:	4618      	mov	r0, r3
 8019872:	3730      	adds	r7, #48	@ 0x30
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}
 8019878:	08020598 	.word	0x08020598
 801987c:	0802067c 	.word	0x0802067c
 8019880:	080205e0 	.word	0x080205e0
 8019884:	0802069c 	.word	0x0802069c
 8019888:	080206d4 	.word	0x080206d4
 801988c:	080206e4 	.word	0x080206e4

08019890 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b08e      	sub	sp, #56	@ 0x38
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	685b      	ldr	r3, [r3, #4]
 801989c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198a0:	781b      	ldrb	r3, [r3, #0]
 80198a2:	f003 030f 	and.w	r3, r3, #15
 80198a6:	b2db      	uxtb	r3, r3
 80198a8:	009b      	lsls	r3, r3, #2
 80198aa:	b2db      	uxtb	r3, r3
 80198ac:	2b14      	cmp	r3, #20
 80198ae:	f040 8179 	bne.w	8019ba4 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80198b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198b4:	88db      	ldrh	r3, [r3, #6]
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	4618      	mov	r0, r3
 80198ba:	f7f4 f861 	bl	800d980 <lwip_htons>
 80198be:	4603      	mov	r3, r0
 80198c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	00db      	lsls	r3, r3, #3
 80198c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80198ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198cc:	885b      	ldrh	r3, [r3, #2]
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	4618      	mov	r0, r3
 80198d2:	f7f4 f855 	bl	800d980 <lwip_htons>
 80198d6:	4603      	mov	r3, r0
 80198d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80198da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80198dc:	781b      	ldrb	r3, [r3, #0]
 80198de:	f003 030f 	and.w	r3, r3, #15
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80198ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80198f2:	429a      	cmp	r2, r3
 80198f4:	f0c0 8158 	bcc.w	8019ba8 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80198f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80198fc:	b29b      	uxth	r3, r3
 80198fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019900:	1ad3      	subs	r3, r2, r3
 8019902:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f7f5 fdeb 	bl	800f4e0 <pbuf_clen>
 801990a:	4603      	mov	r3, r0
 801990c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801990e:	4b90      	ldr	r3, [pc, #576]	@ (8019b50 <ip4_reass+0x2c0>)
 8019910:	881b      	ldrh	r3, [r3, #0]
 8019912:	461a      	mov	r2, r3
 8019914:	8c3b      	ldrh	r3, [r7, #32]
 8019916:	4413      	add	r3, r2
 8019918:	2b0a      	cmp	r3, #10
 801991a:	dd10      	ble.n	801993e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801991c:	8c3b      	ldrh	r3, [r7, #32]
 801991e:	4619      	mov	r1, r3
 8019920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019922:	f7ff fd81 	bl	8019428 <ip_reass_remove_oldest_datagram>
 8019926:	4603      	mov	r3, r0
 8019928:	2b00      	cmp	r3, #0
 801992a:	f000 813f 	beq.w	8019bac <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801992e:	4b88      	ldr	r3, [pc, #544]	@ (8019b50 <ip4_reass+0x2c0>)
 8019930:	881b      	ldrh	r3, [r3, #0]
 8019932:	461a      	mov	r2, r3
 8019934:	8c3b      	ldrh	r3, [r7, #32]
 8019936:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019938:	2b0a      	cmp	r3, #10
 801993a:	f300 8137 	bgt.w	8019bac <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801993e:	4b85      	ldr	r3, [pc, #532]	@ (8019b54 <ip4_reass+0x2c4>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	633b      	str	r3, [r7, #48]	@ 0x30
 8019944:	e015      	b.n	8019972 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019948:	695a      	ldr	r2, [r3, #20]
 801994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	429a      	cmp	r2, r3
 8019950:	d10c      	bne.n	801996c <ip4_reass+0xdc>
 8019952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019954:	699a      	ldr	r2, [r3, #24]
 8019956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019958:	691b      	ldr	r3, [r3, #16]
 801995a:	429a      	cmp	r2, r3
 801995c:	d106      	bne.n	801996c <ip4_reass+0xdc>
 801995e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019960:	899a      	ldrh	r2, [r3, #12]
 8019962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019964:	889b      	ldrh	r3, [r3, #4]
 8019966:	b29b      	uxth	r3, r3
 8019968:	429a      	cmp	r2, r3
 801996a:	d006      	beq.n	801997a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	633b      	str	r3, [r7, #48]	@ 0x30
 8019972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019974:	2b00      	cmp	r3, #0
 8019976:	d1e6      	bne.n	8019946 <ip4_reass+0xb6>
 8019978:	e000      	b.n	801997c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801997a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801997c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801997e:	2b00      	cmp	r3, #0
 8019980:	d109      	bne.n	8019996 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8019982:	8c3b      	ldrh	r3, [r7, #32]
 8019984:	4619      	mov	r1, r3
 8019986:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019988:	f7ff fdb0 	bl	80194ec <ip_reass_enqueue_new_datagram>
 801998c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801998e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019990:	2b00      	cmp	r3, #0
 8019992:	d11c      	bne.n	80199ce <ip4_reass+0x13e>
      goto nullreturn;
 8019994:	e10d      	b.n	8019bb2 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019998:	88db      	ldrh	r3, [r3, #6]
 801999a:	b29b      	uxth	r3, r3
 801999c:	4618      	mov	r0, r3
 801999e:	f7f3 ffef 	bl	800d980 <lwip_htons>
 80199a2:	4603      	mov	r3, r0
 80199a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d110      	bne.n	80199ce <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80199ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199ae:	89db      	ldrh	r3, [r3, #14]
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7f3 ffe5 	bl	800d980 <lwip_htons>
 80199b6:	4603      	mov	r3, r0
 80199b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d006      	beq.n	80199ce <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80199c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80199c2:	3308      	adds	r3, #8
 80199c4:	2214      	movs	r2, #20
 80199c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80199c8:	4618      	mov	r0, r3
 80199ca:	f001 fd58 	bl	801b47e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80199ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199d0:	88db      	ldrh	r3, [r3, #6]
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	f003 0320 	and.w	r3, r3, #32
 80199d8:	2b00      	cmp	r3, #0
 80199da:	bf0c      	ite	eq
 80199dc:	2301      	moveq	r3, #1
 80199de:	2300      	movne	r3, #0
 80199e0:	b2db      	uxtb	r3, r3
 80199e2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80199e4:	69fb      	ldr	r3, [r7, #28]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d00e      	beq.n	8019a08 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80199ea:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80199ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80199ee:	4413      	add	r3, r2
 80199f0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80199f2:	8b7a      	ldrh	r2, [r7, #26]
 80199f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80199f6:	429a      	cmp	r2, r3
 80199f8:	f0c0 80a8 	bcc.w	8019b4c <ip4_reass+0x2bc>
 80199fc:	8b7b      	ldrh	r3, [r7, #26]
 80199fe:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8019a02:	4293      	cmp	r3, r2
 8019a04:	f200 80a2 	bhi.w	8019b4c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019a08:	69fa      	ldr	r2, [r7, #28]
 8019a0a:	6879      	ldr	r1, [r7, #4]
 8019a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019a0e:	f7ff fdd5 	bl	80195bc <ip_reass_chain_frag_into_datagram_and_validate>
 8019a12:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019a14:	697b      	ldr	r3, [r7, #20]
 8019a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a1a:	f000 80a3 	beq.w	8019b64 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8019b50 <ip4_reass+0x2c0>)
 8019a20:	881a      	ldrh	r2, [r3, #0]
 8019a22:	8c3b      	ldrh	r3, [r7, #32]
 8019a24:	4413      	add	r3, r2
 8019a26:	b29a      	uxth	r2, r3
 8019a28:	4b49      	ldr	r3, [pc, #292]	@ (8019b50 <ip4_reass+0x2c0>)
 8019a2a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019a2c:	69fb      	ldr	r3, [r7, #28]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d00d      	beq.n	8019a4e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a32:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8019a34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019a36:	4413      	add	r3, r2
 8019a38:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a3c:	8a7a      	ldrh	r2, [r7, #18]
 8019a3e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a42:	7f9b      	ldrb	r3, [r3, #30]
 8019a44:	f043 0301 	orr.w	r3, r3, #1
 8019a48:	b2da      	uxtb	r2, r3
 8019a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a4c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019a4e:	697b      	ldr	r3, [r7, #20]
 8019a50:	2b01      	cmp	r3, #1
 8019a52:	d179      	bne.n	8019b48 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a56:	8b9b      	ldrh	r3, [r3, #28]
 8019a58:	3314      	adds	r3, #20
 8019a5a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a68:	685b      	ldr	r3, [r3, #4]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019a70:	3308      	adds	r3, #8
 8019a72:	2214      	movs	r2, #20
 8019a74:	4619      	mov	r1, r3
 8019a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019a78:	f001 fd01 	bl	801b47e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019a7c:	8a3b      	ldrh	r3, [r7, #16]
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f7f3 ff7e 	bl	800d980 <lwip_htons>
 8019a84:	4603      	mov	r3, r0
 8019a86:	461a      	mov	r2, r3
 8019a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a8a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a8e:	2200      	movs	r2, #0
 8019a90:	719a      	strb	r2, [r3, #6]
 8019a92:	2200      	movs	r2, #0
 8019a94:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019a98:	2200      	movs	r2, #0
 8019a9a:	729a      	strb	r2, [r3, #10]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8019aa0:	2114      	movs	r1, #20
 8019aa2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8019aa4:	f7f4 f8b4 	bl	800dc10 <inet_chksum>
 8019aa8:	4603      	mov	r3, r0
 8019aaa:	461a      	mov	r2, r3
 8019aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019aae:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019ab6:	e00d      	b.n	8019ad4 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8019ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aba:	685b      	ldr	r3, [r3, #4]
 8019abc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019abe:	2114      	movs	r1, #20
 8019ac0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019ac2:	f7f5 fbf9 	bl	800f2b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019ac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019ac8:	6878      	ldr	r0, [r7, #4]
 8019aca:	f7f5 fd49 	bl	800f560 <pbuf_cat>
      r = iprh->next_pbuf;
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 8019ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d1ee      	bne.n	8019ab8 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019ada:	4b1e      	ldr	r3, [pc, #120]	@ (8019b54 <ip4_reass+0x2c4>)
 8019adc:	681b      	ldr	r3, [r3, #0]
 8019ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ae0:	429a      	cmp	r2, r3
 8019ae2:	d102      	bne.n	8019aea <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ae8:	e010      	b.n	8019b0c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019aea:	4b1a      	ldr	r3, [pc, #104]	@ (8019b54 <ip4_reass+0x2c4>)
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8019af0:	e007      	b.n	8019b02 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af4:	681b      	ldr	r3, [r3, #0]
 8019af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d006      	beq.n	8019b0a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8019b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d1f4      	bne.n	8019af2 <ip4_reass+0x262>
 8019b08:	e000      	b.n	8019b0c <ip4_reass+0x27c>
          break;
 8019b0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019b0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019b0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b10:	f7ff fd26 	bl	8019560 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f7f5 fce3 	bl	800f4e0 <pbuf_clen>
 8019b1a:	4603      	mov	r3, r0
 8019b1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8019b50 <ip4_reass+0x2c0>)
 8019b20:	881b      	ldrh	r3, [r3, #0]
 8019b22:	8c3a      	ldrh	r2, [r7, #32]
 8019b24:	429a      	cmp	r2, r3
 8019b26:	d906      	bls.n	8019b36 <ip4_reass+0x2a6>
 8019b28:	4b0b      	ldr	r3, [pc, #44]	@ (8019b58 <ip4_reass+0x2c8>)
 8019b2a:	f240 229b 	movw	r2, #667	@ 0x29b
 8019b2e:	490b      	ldr	r1, [pc, #44]	@ (8019b5c <ip4_reass+0x2cc>)
 8019b30:	480b      	ldr	r0, [pc, #44]	@ (8019b60 <ip4_reass+0x2d0>)
 8019b32:	f001 fa85 	bl	801b040 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019b36:	4b06      	ldr	r3, [pc, #24]	@ (8019b50 <ip4_reass+0x2c0>)
 8019b38:	881a      	ldrh	r2, [r3, #0]
 8019b3a:	8c3b      	ldrh	r3, [r7, #32]
 8019b3c:	1ad3      	subs	r3, r2, r3
 8019b3e:	b29a      	uxth	r2, r3
 8019b40:	4b03      	ldr	r3, [pc, #12]	@ (8019b50 <ip4_reass+0x2c0>)
 8019b42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	e038      	b.n	8019bba <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	e036      	b.n	8019bba <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8019b4c:	bf00      	nop
 8019b4e:	e00a      	b.n	8019b66 <ip4_reass+0x2d6>
 8019b50:	20013f00 	.word	0x20013f00
 8019b54:	20013efc 	.word	0x20013efc
 8019b58:	08020598 	.word	0x08020598
 8019b5c:	08020708 	.word	0x08020708
 8019b60:	080205e0 	.word	0x080205e0
    goto nullreturn_ipr;
 8019b64:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d106      	bne.n	8019b7a <ip4_reass+0x2ea>
 8019b6c:	4b15      	ldr	r3, [pc, #84]	@ (8019bc4 <ip4_reass+0x334>)
 8019b6e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8019b72:	4915      	ldr	r1, [pc, #84]	@ (8019bc8 <ip4_reass+0x338>)
 8019b74:	4815      	ldr	r0, [pc, #84]	@ (8019bcc <ip4_reass+0x33c>)
 8019b76:	f001 fa63 	bl	801b040 <iprintf>
  if (ipr->p == NULL) {
 8019b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b7c:	685b      	ldr	r3, [r3, #4]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d116      	bne.n	8019bb0 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019b82:	4b13      	ldr	r3, [pc, #76]	@ (8019bd0 <ip4_reass+0x340>)
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d006      	beq.n	8019b9a <ip4_reass+0x30a>
 8019b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8019bc4 <ip4_reass+0x334>)
 8019b8e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019b92:	4910      	ldr	r1, [pc, #64]	@ (8019bd4 <ip4_reass+0x344>)
 8019b94:	480d      	ldr	r0, [pc, #52]	@ (8019bcc <ip4_reass+0x33c>)
 8019b96:	f001 fa53 	bl	801b040 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019b9e:	f7ff fcdf 	bl	8019560 <ip_reass_dequeue_datagram>
 8019ba2:	e006      	b.n	8019bb2 <ip4_reass+0x322>
    goto nullreturn;
 8019ba4:	bf00      	nop
 8019ba6:	e004      	b.n	8019bb2 <ip4_reass+0x322>
    goto nullreturn;
 8019ba8:	bf00      	nop
 8019baa:	e002      	b.n	8019bb2 <ip4_reass+0x322>
      goto nullreturn;
 8019bac:	bf00      	nop
 8019bae:	e000      	b.n	8019bb2 <ip4_reass+0x322>
  }

nullreturn:
 8019bb0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f7f5 fc06 	bl	800f3c4 <pbuf_free>
  return NULL;
 8019bb8:	2300      	movs	r3, #0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3738      	adds	r7, #56	@ 0x38
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	08020598 	.word	0x08020598
 8019bc8:	08020724 	.word	0x08020724
 8019bcc:	080205e0 	.word	0x080205e0
 8019bd0:	20013efc 	.word	0x20013efc
 8019bd4:	08020730 	.word	0x08020730

08019bd8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019bdc:	2005      	movs	r0, #5
 8019bde:	f7f4 fcfd 	bl	800e5dc <memp_malloc>
 8019be2:	4603      	mov	r3, r0
}
 8019be4:	4618      	mov	r0, r3
 8019be6:	bd80      	pop	{r7, pc}

08019be8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b082      	sub	sp, #8
 8019bec:	af00      	add	r7, sp, #0
 8019bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d106      	bne.n	8019c04 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019bf6:	4b07      	ldr	r3, [pc, #28]	@ (8019c14 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019bf8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8019bfc:	4906      	ldr	r1, [pc, #24]	@ (8019c18 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019bfe:	4807      	ldr	r0, [pc, #28]	@ (8019c1c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019c00:	f001 fa1e 	bl	801b040 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019c04:	6879      	ldr	r1, [r7, #4]
 8019c06:	2005      	movs	r0, #5
 8019c08:	f7f4 fd3a 	bl	800e680 <memp_free>
}
 8019c0c:	bf00      	nop
 8019c0e:	3708      	adds	r7, #8
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	08020598 	.word	0x08020598
 8019c18:	08020750 	.word	0x08020750
 8019c1c:	080205e0 	.word	0x080205e0

08019c20 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b084      	sub	sp, #16
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d106      	bne.n	8019c40 <ipfrag_free_pbuf_custom+0x20>
 8019c32:	4b11      	ldr	r3, [pc, #68]	@ (8019c78 <ipfrag_free_pbuf_custom+0x58>)
 8019c34:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8019c38:	4910      	ldr	r1, [pc, #64]	@ (8019c7c <ipfrag_free_pbuf_custom+0x5c>)
 8019c3a:	4811      	ldr	r0, [pc, #68]	@ (8019c80 <ipfrag_free_pbuf_custom+0x60>)
 8019c3c:	f001 fa00 	bl	801b040 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019c40:	68fa      	ldr	r2, [r7, #12]
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d006      	beq.n	8019c56 <ipfrag_free_pbuf_custom+0x36>
 8019c48:	4b0b      	ldr	r3, [pc, #44]	@ (8019c78 <ipfrag_free_pbuf_custom+0x58>)
 8019c4a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8019c4e:	490d      	ldr	r1, [pc, #52]	@ (8019c84 <ipfrag_free_pbuf_custom+0x64>)
 8019c50:	480b      	ldr	r0, [pc, #44]	@ (8019c80 <ipfrag_free_pbuf_custom+0x60>)
 8019c52:	f001 f9f5 	bl	801b040 <iprintf>
  if (pcr->original != NULL) {
 8019c56:	68fb      	ldr	r3, [r7, #12]
 8019c58:	695b      	ldr	r3, [r3, #20]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d004      	beq.n	8019c68 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019c5e:	68fb      	ldr	r3, [r7, #12]
 8019c60:	695b      	ldr	r3, [r3, #20]
 8019c62:	4618      	mov	r0, r3
 8019c64:	f7f5 fbae 	bl	800f3c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019c68:	68f8      	ldr	r0, [r7, #12]
 8019c6a:	f7ff ffbd 	bl	8019be8 <ip_frag_free_pbuf_custom_ref>
}
 8019c6e:	bf00      	nop
 8019c70:	3710      	adds	r7, #16
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}
 8019c76:	bf00      	nop
 8019c78:	08020598 	.word	0x08020598
 8019c7c:	0802075c 	.word	0x0802075c
 8019c80:	080205e0 	.word	0x080205e0
 8019c84:	08020768 	.word	0x08020768

08019c88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b094      	sub	sp, #80	@ 0x50
 8019c8c:	af02      	add	r7, sp, #8
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019c94:	2300      	movs	r3, #0
 8019c96:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019c9e:	3b14      	subs	r3, #20
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	da00      	bge.n	8019ca6 <ip4_frag+0x1e>
 8019ca4:	3307      	adds	r3, #7
 8019ca6:	10db      	asrs	r3, r3, #3
 8019ca8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019caa:	2314      	movs	r3, #20
 8019cac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019cae:	68fb      	ldr	r3, [r7, #12]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8019cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cba:	781b      	ldrb	r3, [r3, #0]
 8019cbc:	f003 030f 	and.w	r3, r3, #15
 8019cc0:	b2db      	uxtb	r3, r3
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	b2db      	uxtb	r3, r3
 8019cc6:	2b14      	cmp	r3, #20
 8019cc8:	d002      	beq.n	8019cd0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019cca:	f06f 0305 	mvn.w	r3, #5
 8019cce:	e118      	b.n	8019f02 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	895b      	ldrh	r3, [r3, #10]
 8019cd4:	2b13      	cmp	r3, #19
 8019cd6:	d809      	bhi.n	8019cec <ip4_frag+0x64>
 8019cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8019f0c <ip4_frag+0x284>)
 8019cda:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8019cde:	498c      	ldr	r1, [pc, #560]	@ (8019f10 <ip4_frag+0x288>)
 8019ce0:	488c      	ldr	r0, [pc, #560]	@ (8019f14 <ip4_frag+0x28c>)
 8019ce2:	f001 f9ad 	bl	801b040 <iprintf>
 8019ce6:	f06f 0305 	mvn.w	r3, #5
 8019cea:	e10a      	b.n	8019f02 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cee:	88db      	ldrh	r3, [r3, #6]
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f3 fe44 	bl	800d980 <lwip_htons>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8019cfc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019d06:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8019d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019d0e:	68fb      	ldr	r3, [r7, #12]
 8019d10:	891b      	ldrh	r3, [r3, #8]
 8019d12:	3b14      	subs	r3, #20
 8019d14:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8019d18:	e0e9      	b.n	8019eee <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019d1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019d1c:	00db      	lsls	r3, r3, #3
 8019d1e:	b29b      	uxth	r3, r3
 8019d20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d24:	4293      	cmp	r3, r2
 8019d26:	bf28      	it	cs
 8019d28:	4613      	movcs	r3, r2
 8019d2a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019d2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019d30:	2114      	movs	r1, #20
 8019d32:	200e      	movs	r0, #14
 8019d34:	f7f5 f85e 	bl	800edf4 <pbuf_alloc>
 8019d38:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8019d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f000 80dd 	beq.w	8019efc <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d44:	895b      	ldrh	r3, [r3, #10]
 8019d46:	2b13      	cmp	r3, #19
 8019d48:	d806      	bhi.n	8019d58 <ip4_frag+0xd0>
 8019d4a:	4b70      	ldr	r3, [pc, #448]	@ (8019f0c <ip4_frag+0x284>)
 8019d4c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8019d50:	4971      	ldr	r1, [pc, #452]	@ (8019f18 <ip4_frag+0x290>)
 8019d52:	4870      	ldr	r0, [pc, #448]	@ (8019f14 <ip4_frag+0x28c>)
 8019d54:	f001 f974 	bl	801b040 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d5a:	685b      	ldr	r3, [r3, #4]
 8019d5c:	2214      	movs	r2, #20
 8019d5e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8019d60:	4618      	mov	r0, r3
 8019d62:	f001 fb8c 	bl	801b47e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d68:	685b      	ldr	r3, [r3, #4]
 8019d6a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8019d6c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019d6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8019d72:	e064      	b.n	8019e3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	895a      	ldrh	r2, [r3, #10]
 8019d78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d7a:	1ad3      	subs	r3, r2, r3
 8019d7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	895b      	ldrh	r3, [r3, #10]
 8019d82:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d906      	bls.n	8019d96 <ip4_frag+0x10e>
 8019d88:	4b60      	ldr	r3, [pc, #384]	@ (8019f0c <ip4_frag+0x284>)
 8019d8a:	f240 322d 	movw	r2, #813	@ 0x32d
 8019d8e:	4963      	ldr	r1, [pc, #396]	@ (8019f1c <ip4_frag+0x294>)
 8019d90:	4860      	ldr	r0, [pc, #384]	@ (8019f14 <ip4_frag+0x28c>)
 8019d92:	f001 f955 	bl	801b040 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019d96:	8bfa      	ldrh	r2, [r7, #30]
 8019d98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019d9c:	4293      	cmp	r3, r2
 8019d9e:	bf28      	it	cs
 8019da0:	4613      	movcs	r3, r2
 8019da2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019da6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d105      	bne.n	8019dba <ip4_frag+0x132>
        poff = 0;
 8019dae:	2300      	movs	r3, #0
 8019db0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	60fb      	str	r3, [r7, #12]
        continue;
 8019db8:	e041      	b.n	8019e3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019dba:	f7ff ff0d 	bl	8019bd8 <ip_frag_alloc_pbuf_custom_ref>
 8019dbe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019dc0:	69bb      	ldr	r3, [r7, #24]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d103      	bne.n	8019dce <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019dc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019dc8:	f7f5 fafc 	bl	800f3c4 <pbuf_free>
        goto memerr;
 8019dcc:	e097      	b.n	8019efe <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dce:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dd4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019dd6:	4413      	add	r3, r2
 8019dd8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8019ddc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8019de0:	9201      	str	r2, [sp, #4]
 8019de2:	9300      	str	r3, [sp, #0]
 8019de4:	4603      	mov	r3, r0
 8019de6:	2241      	movs	r2, #65	@ 0x41
 8019de8:	2000      	movs	r0, #0
 8019dea:	f7f5 f931 	bl	800f050 <pbuf_alloced_custom>
 8019dee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019df0:	697b      	ldr	r3, [r7, #20]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d106      	bne.n	8019e04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019df6:	69b8      	ldr	r0, [r7, #24]
 8019df8:	f7ff fef6 	bl	8019be8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019dfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019dfe:	f7f5 fae1 	bl	800f3c4 <pbuf_free>
        goto memerr;
 8019e02:	e07c      	b.n	8019efe <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019e04:	68f8      	ldr	r0, [r7, #12]
 8019e06:	f7f5 fb83 	bl	800f510 <pbuf_ref>
      pcr->original = p;
 8019e0a:	69bb      	ldr	r3, [r7, #24]
 8019e0c:	68fa      	ldr	r2, [r7, #12]
 8019e0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019e10:	69bb      	ldr	r3, [r7, #24]
 8019e12:	4a43      	ldr	r2, [pc, #268]	@ (8019f20 <ip4_frag+0x298>)
 8019e14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019e16:	6979      	ldr	r1, [r7, #20]
 8019e18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019e1a:	f7f5 fba1 	bl	800f560 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019e1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8019e22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019e26:	1ad3      	subs	r3, r2, r3
 8019e28:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8019e2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d004      	beq.n	8019e3e <ip4_frag+0x1b6>
        poff = 0;
 8019e34:	2300      	movs	r3, #0
 8019e36:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8019e38:	68fb      	ldr	r3, [r7, #12]
 8019e3a:	681b      	ldr	r3, [r3, #0]
 8019e3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019e3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d196      	bne.n	8019d74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019e46:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019e48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8019e4c:	4413      	add	r3, r2
 8019e4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019e50:	68bb      	ldr	r3, [r7, #8]
 8019e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019e54:	f1a3 0213 	sub.w	r2, r3, #19
 8019e58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019e5c:	429a      	cmp	r2, r3
 8019e5e:	bfcc      	ite	gt
 8019e60:	2301      	movgt	r3, #1
 8019e62:	2300      	movle	r3, #0
 8019e64:	b2db      	uxtb	r3, r3
 8019e66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e70:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8019e72:	6a3b      	ldr	r3, [r7, #32]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d002      	beq.n	8019e7e <ip4_frag+0x1f6>
 8019e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d003      	beq.n	8019e86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019e7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019e84:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019e86:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e88:	4618      	mov	r0, r3
 8019e8a:	f7f3 fd79 	bl	800d980 <lwip_htons>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	461a      	mov	r2, r3
 8019e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019e94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019e96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019e98:	3314      	adds	r3, #20
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	f7f3 fd6f 	bl	800d980 <lwip_htons>
 8019ea2:	4603      	mov	r3, r0
 8019ea4:	461a      	mov	r2, r3
 8019ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ea8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019eac:	2200      	movs	r2, #0
 8019eae:	729a      	strb	r2, [r3, #10]
 8019eb0:	2200      	movs	r2, #0
 8019eb2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8019eb4:	2114      	movs	r1, #20
 8019eb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019eb8:	f7f3 feaa 	bl	800dc10 <inet_chksum>
 8019ebc:	4603      	mov	r3, r0
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ec2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	695b      	ldr	r3, [r3, #20]
 8019ec8:	687a      	ldr	r2, [r7, #4]
 8019eca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019ecc:	68b8      	ldr	r0, [r7, #8]
 8019ece:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019ed0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019ed2:	f7f5 fa77 	bl	800f3c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019ed6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019eda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8019edc:	1ad3      	subs	r3, r2, r3
 8019ede:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8019ee2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019ee6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019ee8:	4413      	add	r3, r2
 8019eea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8019eee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	f47f af11 	bne.w	8019d1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019ef8:	2300      	movs	r3, #0
 8019efa:	e002      	b.n	8019f02 <ip4_frag+0x27a>
      goto memerr;
 8019efc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f02:	4618      	mov	r0, r3
 8019f04:	3748      	adds	r7, #72	@ 0x48
 8019f06:	46bd      	mov	sp, r7
 8019f08:	bd80      	pop	{r7, pc}
 8019f0a:	bf00      	nop
 8019f0c:	08020598 	.word	0x08020598
 8019f10:	08020774 	.word	0x08020774
 8019f14:	080205e0 	.word	0x080205e0
 8019f18:	08020790 	.word	0x08020790
 8019f1c:	080207b0 	.word	0x080207b0
 8019f20:	08019c21 	.word	0x08019c21

08019f24 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b086      	sub	sp, #24
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
 8019f2c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019f2e:	230e      	movs	r3, #14
 8019f30:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	895b      	ldrh	r3, [r3, #10]
 8019f36:	2b0e      	cmp	r3, #14
 8019f38:	d96e      	bls.n	801a018 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	7bdb      	ldrb	r3, [r3, #15]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d106      	bne.n	8019f50 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019f42:	683b      	ldr	r3, [r7, #0]
 8019f44:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019f48:	3301      	adds	r3, #1
 8019f4a:	b2da      	uxtb	r2, r3
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019f56:	693b      	ldr	r3, [r7, #16]
 8019f58:	7b1a      	ldrb	r2, [r3, #12]
 8019f5a:	7b5b      	ldrb	r3, [r3, #13]
 8019f5c:	021b      	lsls	r3, r3, #8
 8019f5e:	4313      	orrs	r3, r2
 8019f60:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019f62:	693b      	ldr	r3, [r7, #16]
 8019f64:	781b      	ldrb	r3, [r3, #0]
 8019f66:	f003 0301 	and.w	r3, r3, #1
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d023      	beq.n	8019fb6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019f6e:	693b      	ldr	r3, [r7, #16]
 8019f70:	781b      	ldrb	r3, [r3, #0]
 8019f72:	2b01      	cmp	r3, #1
 8019f74:	d10f      	bne.n	8019f96 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f76:	693b      	ldr	r3, [r7, #16]
 8019f78:	785b      	ldrb	r3, [r3, #1]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d11b      	bne.n	8019fb6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019f7e:	693b      	ldr	r3, [r7, #16]
 8019f80:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019f82:	2b5e      	cmp	r3, #94	@ 0x5e
 8019f84:	d117      	bne.n	8019fb6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	7b5b      	ldrb	r3, [r3, #13]
 8019f8a:	f043 0310 	orr.w	r3, r3, #16
 8019f8e:	b2da      	uxtb	r2, r3
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	735a      	strb	r2, [r3, #13]
 8019f94:	e00f      	b.n	8019fb6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019f96:	693b      	ldr	r3, [r7, #16]
 8019f98:	2206      	movs	r2, #6
 8019f9a:	4928      	ldr	r1, [pc, #160]	@ (801a03c <ethernet_input+0x118>)
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f001 f9a1 	bl	801b2e4 <memcmp>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	2b00      	cmp	r3, #0
 8019fa6:	d106      	bne.n	8019fb6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	7b5b      	ldrb	r3, [r3, #13]
 8019fac:	f043 0308 	orr.w	r3, r3, #8
 8019fb0:	b2da      	uxtb	r2, r3
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019fb6:	89fb      	ldrh	r3, [r7, #14]
 8019fb8:	2b08      	cmp	r3, #8
 8019fba:	d003      	beq.n	8019fc4 <ethernet_input+0xa0>
 8019fbc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8019fc0:	d014      	beq.n	8019fec <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019fc2:	e032      	b.n	801a02a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fc4:	683b      	ldr	r3, [r7, #0]
 8019fc6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019fca:	f003 0308 	and.w	r3, r3, #8
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d024      	beq.n	801a01c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019fd2:	8afb      	ldrh	r3, [r7, #22]
 8019fd4:	4619      	mov	r1, r3
 8019fd6:	6878      	ldr	r0, [r7, #4]
 8019fd8:	f7f5 f96e 	bl	800f2b8 <pbuf_remove_header>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d11e      	bne.n	801a020 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019fe2:	6839      	ldr	r1, [r7, #0]
 8019fe4:	6878      	ldr	r0, [r7, #4]
 8019fe6:	f7fe fe81 	bl	8018cec <ip4_input>
      break;
 8019fea:	e013      	b.n	801a014 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019fec:	683b      	ldr	r3, [r7, #0]
 8019fee:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ff2:	f003 0308 	and.w	r3, r3, #8
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d014      	beq.n	801a024 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019ffa:	8afb      	ldrh	r3, [r7, #22]
 8019ffc:	4619      	mov	r1, r3
 8019ffe:	6878      	ldr	r0, [r7, #4]
 801a000:	f7f5 f95a 	bl	800f2b8 <pbuf_remove_header>
 801a004:	4603      	mov	r3, r0
 801a006:	2b00      	cmp	r3, #0
 801a008:	d10e      	bne.n	801a028 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a00a:	6839      	ldr	r1, [r7, #0]
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f7fd ffe9 	bl	8017fe4 <etharp_input>
      break;
 801a012:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a014:	2300      	movs	r3, #0
 801a016:	e00c      	b.n	801a032 <ethernet_input+0x10e>
    goto free_and_return;
 801a018:	bf00      	nop
 801a01a:	e006      	b.n	801a02a <ethernet_input+0x106>
        goto free_and_return;
 801a01c:	bf00      	nop
 801a01e:	e004      	b.n	801a02a <ethernet_input+0x106>
        goto free_and_return;
 801a020:	bf00      	nop
 801a022:	e002      	b.n	801a02a <ethernet_input+0x106>
        goto free_and_return;
 801a024:	bf00      	nop
 801a026:	e000      	b.n	801a02a <ethernet_input+0x106>
        goto free_and_return;
 801a028:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a02a:	6878      	ldr	r0, [r7, #4]
 801a02c:	f7f5 f9ca 	bl	800f3c4 <pbuf_free>
  return ERR_OK;
 801a030:	2300      	movs	r3, #0
}
 801a032:	4618      	mov	r0, r3
 801a034:	3718      	adds	r7, #24
 801a036:	46bd      	mov	sp, r7
 801a038:	bd80      	pop	{r7, pc}
 801a03a:	bf00      	nop
 801a03c:	0806c650 	.word	0x0806c650

0801a040 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a040:	b580      	push	{r7, lr}
 801a042:	b086      	sub	sp, #24
 801a044:	af00      	add	r7, sp, #0
 801a046:	60f8      	str	r0, [r7, #12]
 801a048:	60b9      	str	r1, [r7, #8]
 801a04a:	607a      	str	r2, [r7, #4]
 801a04c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a04e:	8c3b      	ldrh	r3, [r7, #32]
 801a050:	4618      	mov	r0, r3
 801a052:	f7f3 fc95 	bl	800d980 <lwip_htons>
 801a056:	4603      	mov	r3, r0
 801a058:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a05a:	210e      	movs	r1, #14
 801a05c:	68b8      	ldr	r0, [r7, #8]
 801a05e:	f7f5 f91b 	bl	800f298 <pbuf_add_header>
 801a062:	4603      	mov	r3, r0
 801a064:	2b00      	cmp	r3, #0
 801a066:	d125      	bne.n	801a0b4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	685b      	ldr	r3, [r3, #4]
 801a06c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a06e:	693b      	ldr	r3, [r7, #16]
 801a070:	8afa      	ldrh	r2, [r7, #22]
 801a072:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a074:	693b      	ldr	r3, [r7, #16]
 801a076:	2206      	movs	r2, #6
 801a078:	6839      	ldr	r1, [r7, #0]
 801a07a:	4618      	mov	r0, r3
 801a07c:	f001 f9ff 	bl	801b47e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a080:	693b      	ldr	r3, [r7, #16]
 801a082:	3306      	adds	r3, #6
 801a084:	2206      	movs	r2, #6
 801a086:	6879      	ldr	r1, [r7, #4]
 801a088:	4618      	mov	r0, r3
 801a08a:	f001 f9f8 	bl	801b47e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a094:	2b06      	cmp	r3, #6
 801a096:	d006      	beq.n	801a0a6 <ethernet_output+0x66>
 801a098:	4b0a      	ldr	r3, [pc, #40]	@ (801a0c4 <ethernet_output+0x84>)
 801a09a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801a09e:	490a      	ldr	r1, [pc, #40]	@ (801a0c8 <ethernet_output+0x88>)
 801a0a0:	480a      	ldr	r0, [pc, #40]	@ (801a0cc <ethernet_output+0x8c>)
 801a0a2:	f000 ffcd 	bl	801b040 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	699b      	ldr	r3, [r3, #24]
 801a0aa:	68b9      	ldr	r1, [r7, #8]
 801a0ac:	68f8      	ldr	r0, [r7, #12]
 801a0ae:	4798      	blx	r3
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	e002      	b.n	801a0ba <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a0b4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a0b6:	f06f 0301 	mvn.w	r3, #1
}
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	3718      	adds	r7, #24
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bd80      	pop	{r7, pc}
 801a0c2:	bf00      	nop
 801a0c4:	080207c0 	.word	0x080207c0
 801a0c8:	080207f8 	.word	0x080207f8
 801a0cc:	0802082c 	.word	0x0802082c

0801a0d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a0d0:	b580      	push	{r7, lr}
 801a0d2:	b084      	sub	sp, #16
 801a0d4:	af00      	add	r7, sp, #0
 801a0d6:	6078      	str	r0, [r7, #4]
 801a0d8:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	60bb      	str	r3, [r7, #8]
 801a0de:	2304      	movs	r3, #4
 801a0e0:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a0e2:	f107 0308 	add.w	r3, r7, #8
 801a0e6:	2100      	movs	r1, #0
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	f7ef fef4 	bl	8009ed6 <osMessageCreate>
 801a0ee:	4602      	mov	r2, r0
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d102      	bne.n	801a102 <sys_mbox_new+0x32>
  return ERR_MEM;
 801a0fc:	f04f 33ff 	mov.w	r3, #4294967295
 801a100:	e000      	b.n	801a104 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801a102:	2300      	movs	r3, #0
}
 801a104:	4618      	mov	r0, r3
 801a106:	3710      	adds	r7, #16
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}

0801a10c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a10c:	b580      	push	{r7, lr}
 801a10e:	b082      	sub	sp, #8
 801a110:	af00      	add	r7, sp, #0
 801a112:	6078      	str	r0, [r7, #4]
 801a114:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a116:	bf00      	nop
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	6839      	ldr	r1, [r7, #0]
 801a11e:	f04f 32ff 	mov.w	r2, #4294967295
 801a122:	4618      	mov	r0, r3
 801a124:	f7ef feea 	bl	8009efc <osMessagePut>
 801a128:	4603      	mov	r3, r0
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d1f4      	bne.n	801a118 <sys_mbox_post+0xc>
}
 801a12e:	bf00      	nop
 801a130:	bf00      	nop
 801a132:	3708      	adds	r7, #8
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}

0801a138 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a138:	b580      	push	{r7, lr}
 801a13a:	b084      	sub	sp, #16
 801a13c:	af00      	add	r7, sp, #0
 801a13e:	6078      	str	r0, [r7, #4]
 801a140:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	6839      	ldr	r1, [r7, #0]
 801a148:	2200      	movs	r2, #0
 801a14a:	4618      	mov	r0, r3
 801a14c:	f7ef fed6 	bl	8009efc <osMessagePut>
 801a150:	4603      	mov	r3, r0
 801a152:	2b00      	cmp	r3, #0
 801a154:	d102      	bne.n	801a15c <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801a156:	2300      	movs	r3, #0
 801a158:	73fb      	strb	r3, [r7, #15]
 801a15a:	e001      	b.n	801a160 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801a15c:	23ff      	movs	r3, #255	@ 0xff
 801a15e:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801a160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a164:	4618      	mov	r0, r3
 801a166:	3710      	adds	r7, #16
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}

0801a16c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a16c:	b580      	push	{r7, lr}
 801a16e:	b08c      	sub	sp, #48	@ 0x30
 801a170:	af00      	add	r7, sp, #0
 801a172:	61f8      	str	r0, [r7, #28]
 801a174:	61b9      	str	r1, [r7, #24]
 801a176:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801a178:	f7ef fdb1 	bl	8009cde <osKernelSysTick>
 801a17c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  
  if(timeout != 0)
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d017      	beq.n	801a1b4 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801a184:	69fb      	ldr	r3, [r7, #28]
 801a186:	6819      	ldr	r1, [r3, #0]
 801a188:	f107 0320 	add.w	r3, r7, #32
 801a18c:	697a      	ldr	r2, [r7, #20]
 801a18e:	4618      	mov	r0, r3
 801a190:	f7ef fef6 	bl	8009f80 <osMessageGet>
    
    if(event.status == osEventMessage)
 801a194:	6a3b      	ldr	r3, [r7, #32]
 801a196:	2b10      	cmp	r3, #16
 801a198:	d109      	bne.n	801a1ae <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a19c:	461a      	mov	r2, r3
 801a19e:	69bb      	ldr	r3, [r7, #24]
 801a1a0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a1a2:	f7ef fd9c 	bl	8009cde <osKernelSysTick>
 801a1a6:	4602      	mov	r2, r0
 801a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1aa:	1ad3      	subs	r3, r2, r3
 801a1ac:	e019      	b.n	801a1e2 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a1ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a1b2:	e016      	b.n	801a1e2 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801a1b4:	69fb      	ldr	r3, [r7, #28]
 801a1b6:	6819      	ldr	r1, [r3, #0]
 801a1b8:	463b      	mov	r3, r7
 801a1ba:	f04f 32ff 	mov.w	r2, #4294967295
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7ef fede 	bl	8009f80 <osMessageGet>
 801a1c4:	f107 0320 	add.w	r3, r7, #32
 801a1c8:	463a      	mov	r2, r7
 801a1ca:	ca07      	ldmia	r2, {r0, r1, r2}
 801a1cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	69bb      	ldr	r3, [r7, #24]
 801a1d6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a1d8:	f7ef fd81 	bl	8009cde <osKernelSysTick>
 801a1dc:	4602      	mov	r2, r0
 801a1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1e0:	1ad3      	subs	r3, r2, r3
  }
}
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	3730      	adds	r7, #48	@ 0x30
 801a1e6:	46bd      	mov	sp, r7
 801a1e8:	bd80      	pop	{r7, pc}

0801a1ea <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801a1ea:	b480      	push	{r7}
 801a1ec:	b083      	sub	sp, #12
 801a1ee:	af00      	add	r7, sp, #0
 801a1f0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	681b      	ldr	r3, [r3, #0]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d101      	bne.n	801a1fe <sys_mbox_valid+0x14>
    return 0;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	e000      	b.n	801a200 <sys_mbox_valid+0x16>
  else
    return 1;
 801a1fe:	2301      	movs	r3, #1
}                                             
 801a200:	4618      	mov	r0, r3
 801a202:	370c      	adds	r7, #12
 801a204:	46bd      	mov	sp, r7
 801a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a20a:	4770      	bx	lr

0801a20c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a210:	4803      	ldr	r0, [pc, #12]	@ (801a220 <sys_init+0x14>)
 801a212:	f7ef fdbc 	bl	8009d8e <osMutexCreate>
 801a216:	4603      	mov	r3, r0
 801a218:	4a02      	ldr	r2, [pc, #8]	@ (801a224 <sys_init+0x18>)
 801a21a:	6013      	str	r3, [r2, #0]
}
 801a21c:	bf00      	nop
 801a21e:	bd80      	pop	{r7, pc}
 801a220:	0806c660 	.word	0x0806c660
 801a224:	20013f04 	.word	0x20013f04

0801a228 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a228:	b580      	push	{r7, lr}
 801a22a:	b084      	sub	sp, #16
 801a22c:	af00      	add	r7, sp, #0
 801a22e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801a230:	2300      	movs	r3, #0
 801a232:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a234:	f107 030c 	add.w	r3, r7, #12
 801a238:	4618      	mov	r0, r3
 801a23a:	f7ef fda8 	bl	8009d8e <osMutexCreate>
 801a23e:	4602      	mov	r2, r0
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d102      	bne.n	801a252 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801a24c:	f04f 33ff 	mov.w	r3, #4294967295
 801a250:	e000      	b.n	801a254 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a252:	2300      	movs	r3, #0
}
 801a254:	4618      	mov	r0, r3
 801a256:	3710      	adds	r7, #16
 801a258:	46bd      	mov	sp, r7
 801a25a:	bd80      	pop	{r7, pc}

0801a25c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a25c:	b580      	push	{r7, lr}
 801a25e:	b082      	sub	sp, #8
 801a260:	af00      	add	r7, sp, #0
 801a262:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f04f 31ff 	mov.w	r1, #4294967295
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7ef fd9b 	bl	8009da8 <osMutexWait>
}
 801a272:	bf00      	nop
 801a274:	3708      	adds	r7, #8
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}

0801a27a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a27a:	b580      	push	{r7, lr}
 801a27c:	b082      	sub	sp, #8
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4618      	mov	r0, r3
 801a288:	f7ef fddc 	bl	8009e44 <osMutexRelease>
}
 801a28c:	bf00      	nop
 801a28e:	3708      	adds	r7, #8
 801a290:	46bd      	mov	sp, r7
 801a292:	bd80      	pop	{r7, pc}

0801a294 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b08a      	sub	sp, #40	@ 0x28
 801a298:	af00      	add	r7, sp, #0
 801a29a:	60f8      	str	r0, [r7, #12]
 801a29c:	60b9      	str	r1, [r7, #8]
 801a29e:	607a      	str	r2, [r7, #4]
 801a2a0:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a2a2:	68fb      	ldr	r3, [r7, #12]
 801a2a4:	617b      	str	r3, [r7, #20]
 801a2a6:	68bb      	ldr	r3, [r7, #8]
 801a2a8:	61bb      	str	r3, [r7, #24]
 801a2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ac:	b21b      	sxth	r3, r3
 801a2ae:	83bb      	strh	r3, [r7, #28]
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	623b      	str	r3, [r7, #32]
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a2b8:	f107 0314 	add.w	r3, r7, #20
 801a2bc:	6879      	ldr	r1, [r7, #4]
 801a2be:	4618      	mov	r0, r3
 801a2c0:	f7ef fd1d 	bl	8009cfe <osThreadCreate>
 801a2c4:	4603      	mov	r3, r0
}
 801a2c6:	4618      	mov	r0, r3
 801a2c8:	3728      	adds	r7, #40	@ 0x28
 801a2ca:	46bd      	mov	sp, r7
 801a2cc:	bd80      	pop	{r7, pc}
	...

0801a2d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a2d4:	4b04      	ldr	r3, [pc, #16]	@ (801a2e8 <sys_arch_protect+0x18>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	f04f 31ff 	mov.w	r1, #4294967295
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f7ef fd63 	bl	8009da8 <osMutexWait>
  return (sys_prot_t)1;
 801a2e2:	2301      	movs	r3, #1
}
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	20013f04 	.word	0x20013f04

0801a2ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a2ec:	b580      	push	{r7, lr}
 801a2ee:	b082      	sub	sp, #8
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a2f4:	4b04      	ldr	r3, [pc, #16]	@ (801a308 <sys_arch_unprotect+0x1c>)
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	f7ef fda3 	bl	8009e44 <osMutexRelease>
}
 801a2fe:	bf00      	nop
 801a300:	3708      	adds	r7, #8
 801a302:	46bd      	mov	sp, r7
 801a304:	bd80      	pop	{r7, pc}
 801a306:	bf00      	nop
 801a308:	20013f04 	.word	0x20013f04

0801a30c <_calloc_r>:
 801a30c:	b570      	push	{r4, r5, r6, lr}
 801a30e:	fba1 5402 	umull	r5, r4, r1, r2
 801a312:	b93c      	cbnz	r4, 801a324 <_calloc_r+0x18>
 801a314:	4629      	mov	r1, r5
 801a316:	f000 f837 	bl	801a388 <_malloc_r>
 801a31a:	4606      	mov	r6, r0
 801a31c:	b928      	cbnz	r0, 801a32a <_calloc_r+0x1e>
 801a31e:	2600      	movs	r6, #0
 801a320:	4630      	mov	r0, r6
 801a322:	bd70      	pop	{r4, r5, r6, pc}
 801a324:	220c      	movs	r2, #12
 801a326:	6002      	str	r2, [r0, #0]
 801a328:	e7f9      	b.n	801a31e <_calloc_r+0x12>
 801a32a:	462a      	mov	r2, r5
 801a32c:	4621      	mov	r1, r4
 801a32e:	f000 ffe9 	bl	801b304 <memset>
 801a332:	e7f5      	b.n	801a320 <_calloc_r+0x14>

0801a334 <malloc>:
 801a334:	4b02      	ldr	r3, [pc, #8]	@ (801a340 <malloc+0xc>)
 801a336:	4601      	mov	r1, r0
 801a338:	6818      	ldr	r0, [r3, #0]
 801a33a:	f000 b825 	b.w	801a388 <_malloc_r>
 801a33e:	bf00      	nop
 801a340:	200000cc 	.word	0x200000cc

0801a344 <sbrk_aligned>:
 801a344:	b570      	push	{r4, r5, r6, lr}
 801a346:	4e0f      	ldr	r6, [pc, #60]	@ (801a384 <sbrk_aligned+0x40>)
 801a348:	460c      	mov	r4, r1
 801a34a:	6831      	ldr	r1, [r6, #0]
 801a34c:	4605      	mov	r5, r0
 801a34e:	b911      	cbnz	r1, 801a356 <sbrk_aligned+0x12>
 801a350:	f001 f83e 	bl	801b3d0 <_sbrk_r>
 801a354:	6030      	str	r0, [r6, #0]
 801a356:	4621      	mov	r1, r4
 801a358:	4628      	mov	r0, r5
 801a35a:	f001 f839 	bl	801b3d0 <_sbrk_r>
 801a35e:	1c43      	adds	r3, r0, #1
 801a360:	d103      	bne.n	801a36a <sbrk_aligned+0x26>
 801a362:	f04f 34ff 	mov.w	r4, #4294967295
 801a366:	4620      	mov	r0, r4
 801a368:	bd70      	pop	{r4, r5, r6, pc}
 801a36a:	1cc4      	adds	r4, r0, #3
 801a36c:	f024 0403 	bic.w	r4, r4, #3
 801a370:	42a0      	cmp	r0, r4
 801a372:	d0f8      	beq.n	801a366 <sbrk_aligned+0x22>
 801a374:	1a21      	subs	r1, r4, r0
 801a376:	4628      	mov	r0, r5
 801a378:	f001 f82a 	bl	801b3d0 <_sbrk_r>
 801a37c:	3001      	adds	r0, #1
 801a37e:	d1f2      	bne.n	801a366 <sbrk_aligned+0x22>
 801a380:	e7ef      	b.n	801a362 <sbrk_aligned+0x1e>
 801a382:	bf00      	nop
 801a384:	20013f08 	.word	0x20013f08

0801a388 <_malloc_r>:
 801a388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a38c:	1ccd      	adds	r5, r1, #3
 801a38e:	f025 0503 	bic.w	r5, r5, #3
 801a392:	3508      	adds	r5, #8
 801a394:	2d0c      	cmp	r5, #12
 801a396:	bf38      	it	cc
 801a398:	250c      	movcc	r5, #12
 801a39a:	2d00      	cmp	r5, #0
 801a39c:	4606      	mov	r6, r0
 801a39e:	db01      	blt.n	801a3a4 <_malloc_r+0x1c>
 801a3a0:	42a9      	cmp	r1, r5
 801a3a2:	d904      	bls.n	801a3ae <_malloc_r+0x26>
 801a3a4:	230c      	movs	r3, #12
 801a3a6:	6033      	str	r3, [r6, #0]
 801a3a8:	2000      	movs	r0, #0
 801a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a484 <_malloc_r+0xfc>
 801a3b2:	f000 f869 	bl	801a488 <__malloc_lock>
 801a3b6:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ba:	461c      	mov	r4, r3
 801a3bc:	bb44      	cbnz	r4, 801a410 <_malloc_r+0x88>
 801a3be:	4629      	mov	r1, r5
 801a3c0:	4630      	mov	r0, r6
 801a3c2:	f7ff ffbf 	bl	801a344 <sbrk_aligned>
 801a3c6:	1c43      	adds	r3, r0, #1
 801a3c8:	4604      	mov	r4, r0
 801a3ca:	d158      	bne.n	801a47e <_malloc_r+0xf6>
 801a3cc:	f8d8 4000 	ldr.w	r4, [r8]
 801a3d0:	4627      	mov	r7, r4
 801a3d2:	2f00      	cmp	r7, #0
 801a3d4:	d143      	bne.n	801a45e <_malloc_r+0xd6>
 801a3d6:	2c00      	cmp	r4, #0
 801a3d8:	d04b      	beq.n	801a472 <_malloc_r+0xea>
 801a3da:	6823      	ldr	r3, [r4, #0]
 801a3dc:	4639      	mov	r1, r7
 801a3de:	4630      	mov	r0, r6
 801a3e0:	eb04 0903 	add.w	r9, r4, r3
 801a3e4:	f000 fff4 	bl	801b3d0 <_sbrk_r>
 801a3e8:	4581      	cmp	r9, r0
 801a3ea:	d142      	bne.n	801a472 <_malloc_r+0xea>
 801a3ec:	6821      	ldr	r1, [r4, #0]
 801a3ee:	1a6d      	subs	r5, r5, r1
 801a3f0:	4629      	mov	r1, r5
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f7ff ffa6 	bl	801a344 <sbrk_aligned>
 801a3f8:	3001      	adds	r0, #1
 801a3fa:	d03a      	beq.n	801a472 <_malloc_r+0xea>
 801a3fc:	6823      	ldr	r3, [r4, #0]
 801a3fe:	442b      	add	r3, r5
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	f8d8 3000 	ldr.w	r3, [r8]
 801a406:	685a      	ldr	r2, [r3, #4]
 801a408:	bb62      	cbnz	r2, 801a464 <_malloc_r+0xdc>
 801a40a:	f8c8 7000 	str.w	r7, [r8]
 801a40e:	e00f      	b.n	801a430 <_malloc_r+0xa8>
 801a410:	6822      	ldr	r2, [r4, #0]
 801a412:	1b52      	subs	r2, r2, r5
 801a414:	d420      	bmi.n	801a458 <_malloc_r+0xd0>
 801a416:	2a0b      	cmp	r2, #11
 801a418:	d917      	bls.n	801a44a <_malloc_r+0xc2>
 801a41a:	1961      	adds	r1, r4, r5
 801a41c:	42a3      	cmp	r3, r4
 801a41e:	6025      	str	r5, [r4, #0]
 801a420:	bf18      	it	ne
 801a422:	6059      	strne	r1, [r3, #4]
 801a424:	6863      	ldr	r3, [r4, #4]
 801a426:	bf08      	it	eq
 801a428:	f8c8 1000 	streq.w	r1, [r8]
 801a42c:	5162      	str	r2, [r4, r5]
 801a42e:	604b      	str	r3, [r1, #4]
 801a430:	4630      	mov	r0, r6
 801a432:	f000 f82f 	bl	801a494 <__malloc_unlock>
 801a436:	f104 000b 	add.w	r0, r4, #11
 801a43a:	1d23      	adds	r3, r4, #4
 801a43c:	f020 0007 	bic.w	r0, r0, #7
 801a440:	1ac2      	subs	r2, r0, r3
 801a442:	bf1c      	itt	ne
 801a444:	1a1b      	subne	r3, r3, r0
 801a446:	50a3      	strne	r3, [r4, r2]
 801a448:	e7af      	b.n	801a3aa <_malloc_r+0x22>
 801a44a:	6862      	ldr	r2, [r4, #4]
 801a44c:	42a3      	cmp	r3, r4
 801a44e:	bf0c      	ite	eq
 801a450:	f8c8 2000 	streq.w	r2, [r8]
 801a454:	605a      	strne	r2, [r3, #4]
 801a456:	e7eb      	b.n	801a430 <_malloc_r+0xa8>
 801a458:	4623      	mov	r3, r4
 801a45a:	6864      	ldr	r4, [r4, #4]
 801a45c:	e7ae      	b.n	801a3bc <_malloc_r+0x34>
 801a45e:	463c      	mov	r4, r7
 801a460:	687f      	ldr	r7, [r7, #4]
 801a462:	e7b6      	b.n	801a3d2 <_malloc_r+0x4a>
 801a464:	461a      	mov	r2, r3
 801a466:	685b      	ldr	r3, [r3, #4]
 801a468:	42a3      	cmp	r3, r4
 801a46a:	d1fb      	bne.n	801a464 <_malloc_r+0xdc>
 801a46c:	2300      	movs	r3, #0
 801a46e:	6053      	str	r3, [r2, #4]
 801a470:	e7de      	b.n	801a430 <_malloc_r+0xa8>
 801a472:	230c      	movs	r3, #12
 801a474:	6033      	str	r3, [r6, #0]
 801a476:	4630      	mov	r0, r6
 801a478:	f000 f80c 	bl	801a494 <__malloc_unlock>
 801a47c:	e794      	b.n	801a3a8 <_malloc_r+0x20>
 801a47e:	6005      	str	r5, [r0, #0]
 801a480:	e7d6      	b.n	801a430 <_malloc_r+0xa8>
 801a482:	bf00      	nop
 801a484:	20013f0c 	.word	0x20013f0c

0801a488 <__malloc_lock>:
 801a488:	4801      	ldr	r0, [pc, #4]	@ (801a490 <__malloc_lock+0x8>)
 801a48a:	f000 bfee 	b.w	801b46a <__retarget_lock_acquire_recursive>
 801a48e:	bf00      	nop
 801a490:	20014050 	.word	0x20014050

0801a494 <__malloc_unlock>:
 801a494:	4801      	ldr	r0, [pc, #4]	@ (801a49c <__malloc_unlock+0x8>)
 801a496:	f000 bfe9 	b.w	801b46c <__retarget_lock_release_recursive>
 801a49a:	bf00      	nop
 801a49c:	20014050 	.word	0x20014050

0801a4a0 <rand>:
 801a4a0:	4b16      	ldr	r3, [pc, #88]	@ (801a4fc <rand+0x5c>)
 801a4a2:	b510      	push	{r4, lr}
 801a4a4:	681c      	ldr	r4, [r3, #0]
 801a4a6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a4a8:	b9b3      	cbnz	r3, 801a4d8 <rand+0x38>
 801a4aa:	2018      	movs	r0, #24
 801a4ac:	f7ff ff42 	bl	801a334 <malloc>
 801a4b0:	4602      	mov	r2, r0
 801a4b2:	6320      	str	r0, [r4, #48]	@ 0x30
 801a4b4:	b920      	cbnz	r0, 801a4c0 <rand+0x20>
 801a4b6:	4b12      	ldr	r3, [pc, #72]	@ (801a500 <rand+0x60>)
 801a4b8:	4812      	ldr	r0, [pc, #72]	@ (801a504 <rand+0x64>)
 801a4ba:	2152      	movs	r1, #82	@ 0x52
 801a4bc:	f000 ffee 	bl	801b49c <__assert_func>
 801a4c0:	4911      	ldr	r1, [pc, #68]	@ (801a508 <rand+0x68>)
 801a4c2:	4b12      	ldr	r3, [pc, #72]	@ (801a50c <rand+0x6c>)
 801a4c4:	e9c0 1300 	strd	r1, r3, [r0]
 801a4c8:	4b11      	ldr	r3, [pc, #68]	@ (801a510 <rand+0x70>)
 801a4ca:	6083      	str	r3, [r0, #8]
 801a4cc:	230b      	movs	r3, #11
 801a4ce:	8183      	strh	r3, [r0, #12]
 801a4d0:	2100      	movs	r1, #0
 801a4d2:	2001      	movs	r0, #1
 801a4d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a4d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a4da:	480e      	ldr	r0, [pc, #56]	@ (801a514 <rand+0x74>)
 801a4dc:	690b      	ldr	r3, [r1, #16]
 801a4de:	694c      	ldr	r4, [r1, #20]
 801a4e0:	4a0d      	ldr	r2, [pc, #52]	@ (801a518 <rand+0x78>)
 801a4e2:	4358      	muls	r0, r3
 801a4e4:	fb02 0004 	mla	r0, r2, r4, r0
 801a4e8:	fba3 3202 	umull	r3, r2, r3, r2
 801a4ec:	3301      	adds	r3, #1
 801a4ee:	eb40 0002 	adc.w	r0, r0, r2
 801a4f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a4f6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801a4fa:	bd10      	pop	{r4, pc}
 801a4fc:	200000cc 	.word	0x200000cc
 801a500:	0806c664 	.word	0x0806c664
 801a504:	0806c67b 	.word	0x0806c67b
 801a508:	abcd330e 	.word	0xabcd330e
 801a50c:	e66d1234 	.word	0xe66d1234
 801a510:	0005deec 	.word	0x0005deec
 801a514:	5851f42d 	.word	0x5851f42d
 801a518:	4c957f2d 	.word	0x4c957f2d

0801a51c <_strtoul_l.constprop.0>:
 801a51c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a520:	4e34      	ldr	r6, [pc, #208]	@ (801a5f4 <_strtoul_l.constprop.0+0xd8>)
 801a522:	4686      	mov	lr, r0
 801a524:	460d      	mov	r5, r1
 801a526:	4628      	mov	r0, r5
 801a528:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a52c:	5d37      	ldrb	r7, [r6, r4]
 801a52e:	f017 0708 	ands.w	r7, r7, #8
 801a532:	d1f8      	bne.n	801a526 <_strtoul_l.constprop.0+0xa>
 801a534:	2c2d      	cmp	r4, #45	@ 0x2d
 801a536:	d12f      	bne.n	801a598 <_strtoul_l.constprop.0+0x7c>
 801a538:	782c      	ldrb	r4, [r5, #0]
 801a53a:	2701      	movs	r7, #1
 801a53c:	1c85      	adds	r5, r0, #2
 801a53e:	f033 0010 	bics.w	r0, r3, #16
 801a542:	d109      	bne.n	801a558 <_strtoul_l.constprop.0+0x3c>
 801a544:	2c30      	cmp	r4, #48	@ 0x30
 801a546:	d12c      	bne.n	801a5a2 <_strtoul_l.constprop.0+0x86>
 801a548:	7828      	ldrb	r0, [r5, #0]
 801a54a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801a54e:	2858      	cmp	r0, #88	@ 0x58
 801a550:	d127      	bne.n	801a5a2 <_strtoul_l.constprop.0+0x86>
 801a552:	786c      	ldrb	r4, [r5, #1]
 801a554:	2310      	movs	r3, #16
 801a556:	3502      	adds	r5, #2
 801a558:	f04f 38ff 	mov.w	r8, #4294967295
 801a55c:	2600      	movs	r6, #0
 801a55e:	fbb8 f8f3 	udiv	r8, r8, r3
 801a562:	fb03 f908 	mul.w	r9, r3, r8
 801a566:	ea6f 0909 	mvn.w	r9, r9
 801a56a:	4630      	mov	r0, r6
 801a56c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801a570:	f1bc 0f09 	cmp.w	ip, #9
 801a574:	d81c      	bhi.n	801a5b0 <_strtoul_l.constprop.0+0x94>
 801a576:	4664      	mov	r4, ip
 801a578:	42a3      	cmp	r3, r4
 801a57a:	dd2a      	ble.n	801a5d2 <_strtoul_l.constprop.0+0xb6>
 801a57c:	f1b6 3fff 	cmp.w	r6, #4294967295
 801a580:	d007      	beq.n	801a592 <_strtoul_l.constprop.0+0x76>
 801a582:	4580      	cmp	r8, r0
 801a584:	d322      	bcc.n	801a5cc <_strtoul_l.constprop.0+0xb0>
 801a586:	d101      	bne.n	801a58c <_strtoul_l.constprop.0+0x70>
 801a588:	45a1      	cmp	r9, r4
 801a58a:	db1f      	blt.n	801a5cc <_strtoul_l.constprop.0+0xb0>
 801a58c:	fb00 4003 	mla	r0, r0, r3, r4
 801a590:	2601      	movs	r6, #1
 801a592:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a596:	e7e9      	b.n	801a56c <_strtoul_l.constprop.0+0x50>
 801a598:	2c2b      	cmp	r4, #43	@ 0x2b
 801a59a:	bf04      	itt	eq
 801a59c:	782c      	ldrbeq	r4, [r5, #0]
 801a59e:	1c85      	addeq	r5, r0, #2
 801a5a0:	e7cd      	b.n	801a53e <_strtoul_l.constprop.0+0x22>
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d1d8      	bne.n	801a558 <_strtoul_l.constprop.0+0x3c>
 801a5a6:	2c30      	cmp	r4, #48	@ 0x30
 801a5a8:	bf0c      	ite	eq
 801a5aa:	2308      	moveq	r3, #8
 801a5ac:	230a      	movne	r3, #10
 801a5ae:	e7d3      	b.n	801a558 <_strtoul_l.constprop.0+0x3c>
 801a5b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801a5b4:	f1bc 0f19 	cmp.w	ip, #25
 801a5b8:	d801      	bhi.n	801a5be <_strtoul_l.constprop.0+0xa2>
 801a5ba:	3c37      	subs	r4, #55	@ 0x37
 801a5bc:	e7dc      	b.n	801a578 <_strtoul_l.constprop.0+0x5c>
 801a5be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801a5c2:	f1bc 0f19 	cmp.w	ip, #25
 801a5c6:	d804      	bhi.n	801a5d2 <_strtoul_l.constprop.0+0xb6>
 801a5c8:	3c57      	subs	r4, #87	@ 0x57
 801a5ca:	e7d5      	b.n	801a578 <_strtoul_l.constprop.0+0x5c>
 801a5cc:	f04f 36ff 	mov.w	r6, #4294967295
 801a5d0:	e7df      	b.n	801a592 <_strtoul_l.constprop.0+0x76>
 801a5d2:	1c73      	adds	r3, r6, #1
 801a5d4:	d106      	bne.n	801a5e4 <_strtoul_l.constprop.0+0xc8>
 801a5d6:	2322      	movs	r3, #34	@ 0x22
 801a5d8:	f8ce 3000 	str.w	r3, [lr]
 801a5dc:	4630      	mov	r0, r6
 801a5de:	b932      	cbnz	r2, 801a5ee <_strtoul_l.constprop.0+0xd2>
 801a5e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a5e4:	b107      	cbz	r7, 801a5e8 <_strtoul_l.constprop.0+0xcc>
 801a5e6:	4240      	negs	r0, r0
 801a5e8:	2a00      	cmp	r2, #0
 801a5ea:	d0f9      	beq.n	801a5e0 <_strtoul_l.constprop.0+0xc4>
 801a5ec:	b106      	cbz	r6, 801a5f0 <_strtoul_l.constprop.0+0xd4>
 801a5ee:	1e69      	subs	r1, r5, #1
 801a5f0:	6011      	str	r1, [r2, #0]
 801a5f2:	e7f5      	b.n	801a5e0 <_strtoul_l.constprop.0+0xc4>
 801a5f4:	0806c6d4 	.word	0x0806c6d4

0801a5f8 <strtoul>:
 801a5f8:	4613      	mov	r3, r2
 801a5fa:	460a      	mov	r2, r1
 801a5fc:	4601      	mov	r1, r0
 801a5fe:	4802      	ldr	r0, [pc, #8]	@ (801a608 <strtoul+0x10>)
 801a600:	6800      	ldr	r0, [r0, #0]
 801a602:	f7ff bf8b 	b.w	801a51c <_strtoul_l.constprop.0>
 801a606:	bf00      	nop
 801a608:	200000cc 	.word	0x200000cc

0801a60c <__cvt>:
 801a60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a610:	ec57 6b10 	vmov	r6, r7, d0
 801a614:	2f00      	cmp	r7, #0
 801a616:	460c      	mov	r4, r1
 801a618:	4619      	mov	r1, r3
 801a61a:	463b      	mov	r3, r7
 801a61c:	bfbb      	ittet	lt
 801a61e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a622:	461f      	movlt	r7, r3
 801a624:	2300      	movge	r3, #0
 801a626:	232d      	movlt	r3, #45	@ 0x2d
 801a628:	700b      	strb	r3, [r1, #0]
 801a62a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a62c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a630:	4691      	mov	r9, r2
 801a632:	f023 0820 	bic.w	r8, r3, #32
 801a636:	bfbc      	itt	lt
 801a638:	4632      	movlt	r2, r6
 801a63a:	4616      	movlt	r6, r2
 801a63c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a640:	d005      	beq.n	801a64e <__cvt+0x42>
 801a642:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a646:	d100      	bne.n	801a64a <__cvt+0x3e>
 801a648:	3401      	adds	r4, #1
 801a64a:	2102      	movs	r1, #2
 801a64c:	e000      	b.n	801a650 <__cvt+0x44>
 801a64e:	2103      	movs	r1, #3
 801a650:	ab03      	add	r3, sp, #12
 801a652:	9301      	str	r3, [sp, #4]
 801a654:	ab02      	add	r3, sp, #8
 801a656:	9300      	str	r3, [sp, #0]
 801a658:	ec47 6b10 	vmov	d0, r6, r7
 801a65c:	4653      	mov	r3, sl
 801a65e:	4622      	mov	r2, r4
 801a660:	f000 ffc2 	bl	801b5e8 <_dtoa_r>
 801a664:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a668:	4605      	mov	r5, r0
 801a66a:	d119      	bne.n	801a6a0 <__cvt+0x94>
 801a66c:	f019 0f01 	tst.w	r9, #1
 801a670:	d00e      	beq.n	801a690 <__cvt+0x84>
 801a672:	eb00 0904 	add.w	r9, r0, r4
 801a676:	2200      	movs	r2, #0
 801a678:	2300      	movs	r3, #0
 801a67a:	4630      	mov	r0, r6
 801a67c:	4639      	mov	r1, r7
 801a67e:	f7e6 fa3b 	bl	8000af8 <__aeabi_dcmpeq>
 801a682:	b108      	cbz	r0, 801a688 <__cvt+0x7c>
 801a684:	f8cd 900c 	str.w	r9, [sp, #12]
 801a688:	2230      	movs	r2, #48	@ 0x30
 801a68a:	9b03      	ldr	r3, [sp, #12]
 801a68c:	454b      	cmp	r3, r9
 801a68e:	d31e      	bcc.n	801a6ce <__cvt+0xc2>
 801a690:	9b03      	ldr	r3, [sp, #12]
 801a692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a694:	1b5b      	subs	r3, r3, r5
 801a696:	4628      	mov	r0, r5
 801a698:	6013      	str	r3, [r2, #0]
 801a69a:	b004      	add	sp, #16
 801a69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a6a4:	eb00 0904 	add.w	r9, r0, r4
 801a6a8:	d1e5      	bne.n	801a676 <__cvt+0x6a>
 801a6aa:	7803      	ldrb	r3, [r0, #0]
 801a6ac:	2b30      	cmp	r3, #48	@ 0x30
 801a6ae:	d10a      	bne.n	801a6c6 <__cvt+0xba>
 801a6b0:	2200      	movs	r2, #0
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	4630      	mov	r0, r6
 801a6b6:	4639      	mov	r1, r7
 801a6b8:	f7e6 fa1e 	bl	8000af8 <__aeabi_dcmpeq>
 801a6bc:	b918      	cbnz	r0, 801a6c6 <__cvt+0xba>
 801a6be:	f1c4 0401 	rsb	r4, r4, #1
 801a6c2:	f8ca 4000 	str.w	r4, [sl]
 801a6c6:	f8da 3000 	ldr.w	r3, [sl]
 801a6ca:	4499      	add	r9, r3
 801a6cc:	e7d3      	b.n	801a676 <__cvt+0x6a>
 801a6ce:	1c59      	adds	r1, r3, #1
 801a6d0:	9103      	str	r1, [sp, #12]
 801a6d2:	701a      	strb	r2, [r3, #0]
 801a6d4:	e7d9      	b.n	801a68a <__cvt+0x7e>

0801a6d6 <__exponent>:
 801a6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a6d8:	2900      	cmp	r1, #0
 801a6da:	bfba      	itte	lt
 801a6dc:	4249      	neglt	r1, r1
 801a6de:	232d      	movlt	r3, #45	@ 0x2d
 801a6e0:	232b      	movge	r3, #43	@ 0x2b
 801a6e2:	2909      	cmp	r1, #9
 801a6e4:	7002      	strb	r2, [r0, #0]
 801a6e6:	7043      	strb	r3, [r0, #1]
 801a6e8:	dd29      	ble.n	801a73e <__exponent+0x68>
 801a6ea:	f10d 0307 	add.w	r3, sp, #7
 801a6ee:	461d      	mov	r5, r3
 801a6f0:	270a      	movs	r7, #10
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	fbb1 f6f7 	udiv	r6, r1, r7
 801a6f8:	fb07 1416 	mls	r4, r7, r6, r1
 801a6fc:	3430      	adds	r4, #48	@ 0x30
 801a6fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a702:	460c      	mov	r4, r1
 801a704:	2c63      	cmp	r4, #99	@ 0x63
 801a706:	f103 33ff 	add.w	r3, r3, #4294967295
 801a70a:	4631      	mov	r1, r6
 801a70c:	dcf1      	bgt.n	801a6f2 <__exponent+0x1c>
 801a70e:	3130      	adds	r1, #48	@ 0x30
 801a710:	1e94      	subs	r4, r2, #2
 801a712:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a716:	1c41      	adds	r1, r0, #1
 801a718:	4623      	mov	r3, r4
 801a71a:	42ab      	cmp	r3, r5
 801a71c:	d30a      	bcc.n	801a734 <__exponent+0x5e>
 801a71e:	f10d 0309 	add.w	r3, sp, #9
 801a722:	1a9b      	subs	r3, r3, r2
 801a724:	42ac      	cmp	r4, r5
 801a726:	bf88      	it	hi
 801a728:	2300      	movhi	r3, #0
 801a72a:	3302      	adds	r3, #2
 801a72c:	4403      	add	r3, r0
 801a72e:	1a18      	subs	r0, r3, r0
 801a730:	b003      	add	sp, #12
 801a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a734:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a738:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a73c:	e7ed      	b.n	801a71a <__exponent+0x44>
 801a73e:	2330      	movs	r3, #48	@ 0x30
 801a740:	3130      	adds	r1, #48	@ 0x30
 801a742:	7083      	strb	r3, [r0, #2]
 801a744:	70c1      	strb	r1, [r0, #3]
 801a746:	1d03      	adds	r3, r0, #4
 801a748:	e7f1      	b.n	801a72e <__exponent+0x58>
	...

0801a74c <_printf_float>:
 801a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a750:	b08d      	sub	sp, #52	@ 0x34
 801a752:	460c      	mov	r4, r1
 801a754:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a758:	4616      	mov	r6, r2
 801a75a:	461f      	mov	r7, r3
 801a75c:	4605      	mov	r5, r0
 801a75e:	f000 fdff 	bl	801b360 <_localeconv_r>
 801a762:	6803      	ldr	r3, [r0, #0]
 801a764:	9304      	str	r3, [sp, #16]
 801a766:	4618      	mov	r0, r3
 801a768:	f7e5 fd9a 	bl	80002a0 <strlen>
 801a76c:	2300      	movs	r3, #0
 801a76e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a770:	f8d8 3000 	ldr.w	r3, [r8]
 801a774:	9005      	str	r0, [sp, #20]
 801a776:	3307      	adds	r3, #7
 801a778:	f023 0307 	bic.w	r3, r3, #7
 801a77c:	f103 0208 	add.w	r2, r3, #8
 801a780:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a784:	f8d4 b000 	ldr.w	fp, [r4]
 801a788:	f8c8 2000 	str.w	r2, [r8]
 801a78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a790:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a794:	9307      	str	r3, [sp, #28]
 801a796:	f8cd 8018 	str.w	r8, [sp, #24]
 801a79a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7a2:	4b9c      	ldr	r3, [pc, #624]	@ (801aa14 <_printf_float+0x2c8>)
 801a7a4:	f04f 32ff 	mov.w	r2, #4294967295
 801a7a8:	f7e6 f9d8 	bl	8000b5c <__aeabi_dcmpun>
 801a7ac:	bb70      	cbnz	r0, 801a80c <_printf_float+0xc0>
 801a7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7b2:	4b98      	ldr	r3, [pc, #608]	@ (801aa14 <_printf_float+0x2c8>)
 801a7b4:	f04f 32ff 	mov.w	r2, #4294967295
 801a7b8:	f7e6 f9b2 	bl	8000b20 <__aeabi_dcmple>
 801a7bc:	bb30      	cbnz	r0, 801a80c <_printf_float+0xc0>
 801a7be:	2200      	movs	r2, #0
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	4640      	mov	r0, r8
 801a7c4:	4649      	mov	r1, r9
 801a7c6:	f7e6 f9a1 	bl	8000b0c <__aeabi_dcmplt>
 801a7ca:	b110      	cbz	r0, 801a7d2 <_printf_float+0x86>
 801a7cc:	232d      	movs	r3, #45	@ 0x2d
 801a7ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a7d2:	4a91      	ldr	r2, [pc, #580]	@ (801aa18 <_printf_float+0x2cc>)
 801a7d4:	4b91      	ldr	r3, [pc, #580]	@ (801aa1c <_printf_float+0x2d0>)
 801a7d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a7da:	bf94      	ite	ls
 801a7dc:	4690      	movls	r8, r2
 801a7de:	4698      	movhi	r8, r3
 801a7e0:	2303      	movs	r3, #3
 801a7e2:	6123      	str	r3, [r4, #16]
 801a7e4:	f02b 0304 	bic.w	r3, fp, #4
 801a7e8:	6023      	str	r3, [r4, #0]
 801a7ea:	f04f 0900 	mov.w	r9, #0
 801a7ee:	9700      	str	r7, [sp, #0]
 801a7f0:	4633      	mov	r3, r6
 801a7f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a7f4:	4621      	mov	r1, r4
 801a7f6:	4628      	mov	r0, r5
 801a7f8:	f000 f9d2 	bl	801aba0 <_printf_common>
 801a7fc:	3001      	adds	r0, #1
 801a7fe:	f040 808d 	bne.w	801a91c <_printf_float+0x1d0>
 801a802:	f04f 30ff 	mov.w	r0, #4294967295
 801a806:	b00d      	add	sp, #52	@ 0x34
 801a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80c:	4642      	mov	r2, r8
 801a80e:	464b      	mov	r3, r9
 801a810:	4640      	mov	r0, r8
 801a812:	4649      	mov	r1, r9
 801a814:	f7e6 f9a2 	bl	8000b5c <__aeabi_dcmpun>
 801a818:	b140      	cbz	r0, 801a82c <_printf_float+0xe0>
 801a81a:	464b      	mov	r3, r9
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	bfbc      	itt	lt
 801a820:	232d      	movlt	r3, #45	@ 0x2d
 801a822:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a826:	4a7e      	ldr	r2, [pc, #504]	@ (801aa20 <_printf_float+0x2d4>)
 801a828:	4b7e      	ldr	r3, [pc, #504]	@ (801aa24 <_printf_float+0x2d8>)
 801a82a:	e7d4      	b.n	801a7d6 <_printf_float+0x8a>
 801a82c:	6863      	ldr	r3, [r4, #4]
 801a82e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a832:	9206      	str	r2, [sp, #24]
 801a834:	1c5a      	adds	r2, r3, #1
 801a836:	d13b      	bne.n	801a8b0 <_printf_float+0x164>
 801a838:	2306      	movs	r3, #6
 801a83a:	6063      	str	r3, [r4, #4]
 801a83c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a840:	2300      	movs	r3, #0
 801a842:	6022      	str	r2, [r4, #0]
 801a844:	9303      	str	r3, [sp, #12]
 801a846:	ab0a      	add	r3, sp, #40	@ 0x28
 801a848:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a84c:	ab09      	add	r3, sp, #36	@ 0x24
 801a84e:	9300      	str	r3, [sp, #0]
 801a850:	6861      	ldr	r1, [r4, #4]
 801a852:	ec49 8b10 	vmov	d0, r8, r9
 801a856:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a85a:	4628      	mov	r0, r5
 801a85c:	f7ff fed6 	bl	801a60c <__cvt>
 801a860:	9b06      	ldr	r3, [sp, #24]
 801a862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a864:	2b47      	cmp	r3, #71	@ 0x47
 801a866:	4680      	mov	r8, r0
 801a868:	d129      	bne.n	801a8be <_printf_float+0x172>
 801a86a:	1cc8      	adds	r0, r1, #3
 801a86c:	db02      	blt.n	801a874 <_printf_float+0x128>
 801a86e:	6863      	ldr	r3, [r4, #4]
 801a870:	4299      	cmp	r1, r3
 801a872:	dd41      	ble.n	801a8f8 <_printf_float+0x1ac>
 801a874:	f1aa 0a02 	sub.w	sl, sl, #2
 801a878:	fa5f fa8a 	uxtb.w	sl, sl
 801a87c:	3901      	subs	r1, #1
 801a87e:	4652      	mov	r2, sl
 801a880:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a884:	9109      	str	r1, [sp, #36]	@ 0x24
 801a886:	f7ff ff26 	bl	801a6d6 <__exponent>
 801a88a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a88c:	1813      	adds	r3, r2, r0
 801a88e:	2a01      	cmp	r2, #1
 801a890:	4681      	mov	r9, r0
 801a892:	6123      	str	r3, [r4, #16]
 801a894:	dc02      	bgt.n	801a89c <_printf_float+0x150>
 801a896:	6822      	ldr	r2, [r4, #0]
 801a898:	07d2      	lsls	r2, r2, #31
 801a89a:	d501      	bpl.n	801a8a0 <_printf_float+0x154>
 801a89c:	3301      	adds	r3, #1
 801a89e:	6123      	str	r3, [r4, #16]
 801a8a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d0a2      	beq.n	801a7ee <_printf_float+0xa2>
 801a8a8:	232d      	movs	r3, #45	@ 0x2d
 801a8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a8ae:	e79e      	b.n	801a7ee <_printf_float+0xa2>
 801a8b0:	9a06      	ldr	r2, [sp, #24]
 801a8b2:	2a47      	cmp	r2, #71	@ 0x47
 801a8b4:	d1c2      	bne.n	801a83c <_printf_float+0xf0>
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d1c0      	bne.n	801a83c <_printf_float+0xf0>
 801a8ba:	2301      	movs	r3, #1
 801a8bc:	e7bd      	b.n	801a83a <_printf_float+0xee>
 801a8be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a8c2:	d9db      	bls.n	801a87c <_printf_float+0x130>
 801a8c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a8c8:	d118      	bne.n	801a8fc <_printf_float+0x1b0>
 801a8ca:	2900      	cmp	r1, #0
 801a8cc:	6863      	ldr	r3, [r4, #4]
 801a8ce:	dd0b      	ble.n	801a8e8 <_printf_float+0x19c>
 801a8d0:	6121      	str	r1, [r4, #16]
 801a8d2:	b913      	cbnz	r3, 801a8da <_printf_float+0x18e>
 801a8d4:	6822      	ldr	r2, [r4, #0]
 801a8d6:	07d0      	lsls	r0, r2, #31
 801a8d8:	d502      	bpl.n	801a8e0 <_printf_float+0x194>
 801a8da:	3301      	adds	r3, #1
 801a8dc:	440b      	add	r3, r1
 801a8de:	6123      	str	r3, [r4, #16]
 801a8e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a8e2:	f04f 0900 	mov.w	r9, #0
 801a8e6:	e7db      	b.n	801a8a0 <_printf_float+0x154>
 801a8e8:	b913      	cbnz	r3, 801a8f0 <_printf_float+0x1a4>
 801a8ea:	6822      	ldr	r2, [r4, #0]
 801a8ec:	07d2      	lsls	r2, r2, #31
 801a8ee:	d501      	bpl.n	801a8f4 <_printf_float+0x1a8>
 801a8f0:	3302      	adds	r3, #2
 801a8f2:	e7f4      	b.n	801a8de <_printf_float+0x192>
 801a8f4:	2301      	movs	r3, #1
 801a8f6:	e7f2      	b.n	801a8de <_printf_float+0x192>
 801a8f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a8fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8fe:	4299      	cmp	r1, r3
 801a900:	db05      	blt.n	801a90e <_printf_float+0x1c2>
 801a902:	6823      	ldr	r3, [r4, #0]
 801a904:	6121      	str	r1, [r4, #16]
 801a906:	07d8      	lsls	r0, r3, #31
 801a908:	d5ea      	bpl.n	801a8e0 <_printf_float+0x194>
 801a90a:	1c4b      	adds	r3, r1, #1
 801a90c:	e7e7      	b.n	801a8de <_printf_float+0x192>
 801a90e:	2900      	cmp	r1, #0
 801a910:	bfd4      	ite	le
 801a912:	f1c1 0202 	rsble	r2, r1, #2
 801a916:	2201      	movgt	r2, #1
 801a918:	4413      	add	r3, r2
 801a91a:	e7e0      	b.n	801a8de <_printf_float+0x192>
 801a91c:	6823      	ldr	r3, [r4, #0]
 801a91e:	055a      	lsls	r2, r3, #21
 801a920:	d407      	bmi.n	801a932 <_printf_float+0x1e6>
 801a922:	6923      	ldr	r3, [r4, #16]
 801a924:	4642      	mov	r2, r8
 801a926:	4631      	mov	r1, r6
 801a928:	4628      	mov	r0, r5
 801a92a:	47b8      	blx	r7
 801a92c:	3001      	adds	r0, #1
 801a92e:	d12b      	bne.n	801a988 <_printf_float+0x23c>
 801a930:	e767      	b.n	801a802 <_printf_float+0xb6>
 801a932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a936:	f240 80dd 	bls.w	801aaf4 <_printf_float+0x3a8>
 801a93a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a93e:	2200      	movs	r2, #0
 801a940:	2300      	movs	r3, #0
 801a942:	f7e6 f8d9 	bl	8000af8 <__aeabi_dcmpeq>
 801a946:	2800      	cmp	r0, #0
 801a948:	d033      	beq.n	801a9b2 <_printf_float+0x266>
 801a94a:	4a37      	ldr	r2, [pc, #220]	@ (801aa28 <_printf_float+0x2dc>)
 801a94c:	2301      	movs	r3, #1
 801a94e:	4631      	mov	r1, r6
 801a950:	4628      	mov	r0, r5
 801a952:	47b8      	blx	r7
 801a954:	3001      	adds	r0, #1
 801a956:	f43f af54 	beq.w	801a802 <_printf_float+0xb6>
 801a95a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a95e:	4543      	cmp	r3, r8
 801a960:	db02      	blt.n	801a968 <_printf_float+0x21c>
 801a962:	6823      	ldr	r3, [r4, #0]
 801a964:	07d8      	lsls	r0, r3, #31
 801a966:	d50f      	bpl.n	801a988 <_printf_float+0x23c>
 801a968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a96c:	4631      	mov	r1, r6
 801a96e:	4628      	mov	r0, r5
 801a970:	47b8      	blx	r7
 801a972:	3001      	adds	r0, #1
 801a974:	f43f af45 	beq.w	801a802 <_printf_float+0xb6>
 801a978:	f04f 0900 	mov.w	r9, #0
 801a97c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a980:	f104 0a1a 	add.w	sl, r4, #26
 801a984:	45c8      	cmp	r8, r9
 801a986:	dc09      	bgt.n	801a99c <_printf_float+0x250>
 801a988:	6823      	ldr	r3, [r4, #0]
 801a98a:	079b      	lsls	r3, r3, #30
 801a98c:	f100 8103 	bmi.w	801ab96 <_printf_float+0x44a>
 801a990:	68e0      	ldr	r0, [r4, #12]
 801a992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a994:	4298      	cmp	r0, r3
 801a996:	bfb8      	it	lt
 801a998:	4618      	movlt	r0, r3
 801a99a:	e734      	b.n	801a806 <_printf_float+0xba>
 801a99c:	2301      	movs	r3, #1
 801a99e:	4652      	mov	r2, sl
 801a9a0:	4631      	mov	r1, r6
 801a9a2:	4628      	mov	r0, r5
 801a9a4:	47b8      	blx	r7
 801a9a6:	3001      	adds	r0, #1
 801a9a8:	f43f af2b 	beq.w	801a802 <_printf_float+0xb6>
 801a9ac:	f109 0901 	add.w	r9, r9, #1
 801a9b0:	e7e8      	b.n	801a984 <_printf_float+0x238>
 801a9b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	dc39      	bgt.n	801aa2c <_printf_float+0x2e0>
 801a9b8:	4a1b      	ldr	r2, [pc, #108]	@ (801aa28 <_printf_float+0x2dc>)
 801a9ba:	2301      	movs	r3, #1
 801a9bc:	4631      	mov	r1, r6
 801a9be:	4628      	mov	r0, r5
 801a9c0:	47b8      	blx	r7
 801a9c2:	3001      	adds	r0, #1
 801a9c4:	f43f af1d 	beq.w	801a802 <_printf_float+0xb6>
 801a9c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a9cc:	ea59 0303 	orrs.w	r3, r9, r3
 801a9d0:	d102      	bne.n	801a9d8 <_printf_float+0x28c>
 801a9d2:	6823      	ldr	r3, [r4, #0]
 801a9d4:	07d9      	lsls	r1, r3, #31
 801a9d6:	d5d7      	bpl.n	801a988 <_printf_float+0x23c>
 801a9d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9dc:	4631      	mov	r1, r6
 801a9de:	4628      	mov	r0, r5
 801a9e0:	47b8      	blx	r7
 801a9e2:	3001      	adds	r0, #1
 801a9e4:	f43f af0d 	beq.w	801a802 <_printf_float+0xb6>
 801a9e8:	f04f 0a00 	mov.w	sl, #0
 801a9ec:	f104 0b1a 	add.w	fp, r4, #26
 801a9f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9f2:	425b      	negs	r3, r3
 801a9f4:	4553      	cmp	r3, sl
 801a9f6:	dc01      	bgt.n	801a9fc <_printf_float+0x2b0>
 801a9f8:	464b      	mov	r3, r9
 801a9fa:	e793      	b.n	801a924 <_printf_float+0x1d8>
 801a9fc:	2301      	movs	r3, #1
 801a9fe:	465a      	mov	r2, fp
 801aa00:	4631      	mov	r1, r6
 801aa02:	4628      	mov	r0, r5
 801aa04:	47b8      	blx	r7
 801aa06:	3001      	adds	r0, #1
 801aa08:	f43f aefb 	beq.w	801a802 <_printf_float+0xb6>
 801aa0c:	f10a 0a01 	add.w	sl, sl, #1
 801aa10:	e7ee      	b.n	801a9f0 <_printf_float+0x2a4>
 801aa12:	bf00      	nop
 801aa14:	7fefffff 	.word	0x7fefffff
 801aa18:	0806c7d4 	.word	0x0806c7d4
 801aa1c:	0806c7d8 	.word	0x0806c7d8
 801aa20:	0806c7dc 	.word	0x0806c7dc
 801aa24:	0806c7e0 	.word	0x0806c7e0
 801aa28:	0806c7e4 	.word	0x0806c7e4
 801aa2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aa2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aa32:	4553      	cmp	r3, sl
 801aa34:	bfa8      	it	ge
 801aa36:	4653      	movge	r3, sl
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	4699      	mov	r9, r3
 801aa3c:	dc36      	bgt.n	801aaac <_printf_float+0x360>
 801aa3e:	f04f 0b00 	mov.w	fp, #0
 801aa42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aa46:	f104 021a 	add.w	r2, r4, #26
 801aa4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801aa4c:	9306      	str	r3, [sp, #24]
 801aa4e:	eba3 0309 	sub.w	r3, r3, r9
 801aa52:	455b      	cmp	r3, fp
 801aa54:	dc31      	bgt.n	801aaba <_printf_float+0x36e>
 801aa56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa58:	459a      	cmp	sl, r3
 801aa5a:	dc3a      	bgt.n	801aad2 <_printf_float+0x386>
 801aa5c:	6823      	ldr	r3, [r4, #0]
 801aa5e:	07da      	lsls	r2, r3, #31
 801aa60:	d437      	bmi.n	801aad2 <_printf_float+0x386>
 801aa62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa64:	ebaa 0903 	sub.w	r9, sl, r3
 801aa68:	9b06      	ldr	r3, [sp, #24]
 801aa6a:	ebaa 0303 	sub.w	r3, sl, r3
 801aa6e:	4599      	cmp	r9, r3
 801aa70:	bfa8      	it	ge
 801aa72:	4699      	movge	r9, r3
 801aa74:	f1b9 0f00 	cmp.w	r9, #0
 801aa78:	dc33      	bgt.n	801aae2 <_printf_float+0x396>
 801aa7a:	f04f 0800 	mov.w	r8, #0
 801aa7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aa82:	f104 0b1a 	add.w	fp, r4, #26
 801aa86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa88:	ebaa 0303 	sub.w	r3, sl, r3
 801aa8c:	eba3 0309 	sub.w	r3, r3, r9
 801aa90:	4543      	cmp	r3, r8
 801aa92:	f77f af79 	ble.w	801a988 <_printf_float+0x23c>
 801aa96:	2301      	movs	r3, #1
 801aa98:	465a      	mov	r2, fp
 801aa9a:	4631      	mov	r1, r6
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	47b8      	blx	r7
 801aaa0:	3001      	adds	r0, #1
 801aaa2:	f43f aeae 	beq.w	801a802 <_printf_float+0xb6>
 801aaa6:	f108 0801 	add.w	r8, r8, #1
 801aaaa:	e7ec      	b.n	801aa86 <_printf_float+0x33a>
 801aaac:	4642      	mov	r2, r8
 801aaae:	4631      	mov	r1, r6
 801aab0:	4628      	mov	r0, r5
 801aab2:	47b8      	blx	r7
 801aab4:	3001      	adds	r0, #1
 801aab6:	d1c2      	bne.n	801aa3e <_printf_float+0x2f2>
 801aab8:	e6a3      	b.n	801a802 <_printf_float+0xb6>
 801aaba:	2301      	movs	r3, #1
 801aabc:	4631      	mov	r1, r6
 801aabe:	4628      	mov	r0, r5
 801aac0:	9206      	str	r2, [sp, #24]
 801aac2:	47b8      	blx	r7
 801aac4:	3001      	adds	r0, #1
 801aac6:	f43f ae9c 	beq.w	801a802 <_printf_float+0xb6>
 801aaca:	9a06      	ldr	r2, [sp, #24]
 801aacc:	f10b 0b01 	add.w	fp, fp, #1
 801aad0:	e7bb      	b.n	801aa4a <_printf_float+0x2fe>
 801aad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aad6:	4631      	mov	r1, r6
 801aad8:	4628      	mov	r0, r5
 801aada:	47b8      	blx	r7
 801aadc:	3001      	adds	r0, #1
 801aade:	d1c0      	bne.n	801aa62 <_printf_float+0x316>
 801aae0:	e68f      	b.n	801a802 <_printf_float+0xb6>
 801aae2:	9a06      	ldr	r2, [sp, #24]
 801aae4:	464b      	mov	r3, r9
 801aae6:	4442      	add	r2, r8
 801aae8:	4631      	mov	r1, r6
 801aaea:	4628      	mov	r0, r5
 801aaec:	47b8      	blx	r7
 801aaee:	3001      	adds	r0, #1
 801aaf0:	d1c3      	bne.n	801aa7a <_printf_float+0x32e>
 801aaf2:	e686      	b.n	801a802 <_printf_float+0xb6>
 801aaf4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801aaf8:	f1ba 0f01 	cmp.w	sl, #1
 801aafc:	dc01      	bgt.n	801ab02 <_printf_float+0x3b6>
 801aafe:	07db      	lsls	r3, r3, #31
 801ab00:	d536      	bpl.n	801ab70 <_printf_float+0x424>
 801ab02:	2301      	movs	r3, #1
 801ab04:	4642      	mov	r2, r8
 801ab06:	4631      	mov	r1, r6
 801ab08:	4628      	mov	r0, r5
 801ab0a:	47b8      	blx	r7
 801ab0c:	3001      	adds	r0, #1
 801ab0e:	f43f ae78 	beq.w	801a802 <_printf_float+0xb6>
 801ab12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ab16:	4631      	mov	r1, r6
 801ab18:	4628      	mov	r0, r5
 801ab1a:	47b8      	blx	r7
 801ab1c:	3001      	adds	r0, #1
 801ab1e:	f43f ae70 	beq.w	801a802 <_printf_float+0xb6>
 801ab22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ab26:	2200      	movs	r2, #0
 801ab28:	2300      	movs	r3, #0
 801ab2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ab2e:	f7e5 ffe3 	bl	8000af8 <__aeabi_dcmpeq>
 801ab32:	b9c0      	cbnz	r0, 801ab66 <_printf_float+0x41a>
 801ab34:	4653      	mov	r3, sl
 801ab36:	f108 0201 	add.w	r2, r8, #1
 801ab3a:	4631      	mov	r1, r6
 801ab3c:	4628      	mov	r0, r5
 801ab3e:	47b8      	blx	r7
 801ab40:	3001      	adds	r0, #1
 801ab42:	d10c      	bne.n	801ab5e <_printf_float+0x412>
 801ab44:	e65d      	b.n	801a802 <_printf_float+0xb6>
 801ab46:	2301      	movs	r3, #1
 801ab48:	465a      	mov	r2, fp
 801ab4a:	4631      	mov	r1, r6
 801ab4c:	4628      	mov	r0, r5
 801ab4e:	47b8      	blx	r7
 801ab50:	3001      	adds	r0, #1
 801ab52:	f43f ae56 	beq.w	801a802 <_printf_float+0xb6>
 801ab56:	f108 0801 	add.w	r8, r8, #1
 801ab5a:	45d0      	cmp	r8, sl
 801ab5c:	dbf3      	blt.n	801ab46 <_printf_float+0x3fa>
 801ab5e:	464b      	mov	r3, r9
 801ab60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ab64:	e6df      	b.n	801a926 <_printf_float+0x1da>
 801ab66:	f04f 0800 	mov.w	r8, #0
 801ab6a:	f104 0b1a 	add.w	fp, r4, #26
 801ab6e:	e7f4      	b.n	801ab5a <_printf_float+0x40e>
 801ab70:	2301      	movs	r3, #1
 801ab72:	4642      	mov	r2, r8
 801ab74:	e7e1      	b.n	801ab3a <_printf_float+0x3ee>
 801ab76:	2301      	movs	r3, #1
 801ab78:	464a      	mov	r2, r9
 801ab7a:	4631      	mov	r1, r6
 801ab7c:	4628      	mov	r0, r5
 801ab7e:	47b8      	blx	r7
 801ab80:	3001      	adds	r0, #1
 801ab82:	f43f ae3e 	beq.w	801a802 <_printf_float+0xb6>
 801ab86:	f108 0801 	add.w	r8, r8, #1
 801ab8a:	68e3      	ldr	r3, [r4, #12]
 801ab8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ab8e:	1a5b      	subs	r3, r3, r1
 801ab90:	4543      	cmp	r3, r8
 801ab92:	dcf0      	bgt.n	801ab76 <_printf_float+0x42a>
 801ab94:	e6fc      	b.n	801a990 <_printf_float+0x244>
 801ab96:	f04f 0800 	mov.w	r8, #0
 801ab9a:	f104 0919 	add.w	r9, r4, #25
 801ab9e:	e7f4      	b.n	801ab8a <_printf_float+0x43e>

0801aba0 <_printf_common>:
 801aba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aba4:	4616      	mov	r6, r2
 801aba6:	4698      	mov	r8, r3
 801aba8:	688a      	ldr	r2, [r1, #8]
 801abaa:	690b      	ldr	r3, [r1, #16]
 801abac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801abb0:	4293      	cmp	r3, r2
 801abb2:	bfb8      	it	lt
 801abb4:	4613      	movlt	r3, r2
 801abb6:	6033      	str	r3, [r6, #0]
 801abb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801abbc:	4607      	mov	r7, r0
 801abbe:	460c      	mov	r4, r1
 801abc0:	b10a      	cbz	r2, 801abc6 <_printf_common+0x26>
 801abc2:	3301      	adds	r3, #1
 801abc4:	6033      	str	r3, [r6, #0]
 801abc6:	6823      	ldr	r3, [r4, #0]
 801abc8:	0699      	lsls	r1, r3, #26
 801abca:	bf42      	ittt	mi
 801abcc:	6833      	ldrmi	r3, [r6, #0]
 801abce:	3302      	addmi	r3, #2
 801abd0:	6033      	strmi	r3, [r6, #0]
 801abd2:	6825      	ldr	r5, [r4, #0]
 801abd4:	f015 0506 	ands.w	r5, r5, #6
 801abd8:	d106      	bne.n	801abe8 <_printf_common+0x48>
 801abda:	f104 0a19 	add.w	sl, r4, #25
 801abde:	68e3      	ldr	r3, [r4, #12]
 801abe0:	6832      	ldr	r2, [r6, #0]
 801abe2:	1a9b      	subs	r3, r3, r2
 801abe4:	42ab      	cmp	r3, r5
 801abe6:	dc26      	bgt.n	801ac36 <_printf_common+0x96>
 801abe8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801abec:	6822      	ldr	r2, [r4, #0]
 801abee:	3b00      	subs	r3, #0
 801abf0:	bf18      	it	ne
 801abf2:	2301      	movne	r3, #1
 801abf4:	0692      	lsls	r2, r2, #26
 801abf6:	d42b      	bmi.n	801ac50 <_printf_common+0xb0>
 801abf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801abfc:	4641      	mov	r1, r8
 801abfe:	4638      	mov	r0, r7
 801ac00:	47c8      	blx	r9
 801ac02:	3001      	adds	r0, #1
 801ac04:	d01e      	beq.n	801ac44 <_printf_common+0xa4>
 801ac06:	6823      	ldr	r3, [r4, #0]
 801ac08:	6922      	ldr	r2, [r4, #16]
 801ac0a:	f003 0306 	and.w	r3, r3, #6
 801ac0e:	2b04      	cmp	r3, #4
 801ac10:	bf02      	ittt	eq
 801ac12:	68e5      	ldreq	r5, [r4, #12]
 801ac14:	6833      	ldreq	r3, [r6, #0]
 801ac16:	1aed      	subeq	r5, r5, r3
 801ac18:	68a3      	ldr	r3, [r4, #8]
 801ac1a:	bf0c      	ite	eq
 801ac1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ac20:	2500      	movne	r5, #0
 801ac22:	4293      	cmp	r3, r2
 801ac24:	bfc4      	itt	gt
 801ac26:	1a9b      	subgt	r3, r3, r2
 801ac28:	18ed      	addgt	r5, r5, r3
 801ac2a:	2600      	movs	r6, #0
 801ac2c:	341a      	adds	r4, #26
 801ac2e:	42b5      	cmp	r5, r6
 801ac30:	d11a      	bne.n	801ac68 <_printf_common+0xc8>
 801ac32:	2000      	movs	r0, #0
 801ac34:	e008      	b.n	801ac48 <_printf_common+0xa8>
 801ac36:	2301      	movs	r3, #1
 801ac38:	4652      	mov	r2, sl
 801ac3a:	4641      	mov	r1, r8
 801ac3c:	4638      	mov	r0, r7
 801ac3e:	47c8      	blx	r9
 801ac40:	3001      	adds	r0, #1
 801ac42:	d103      	bne.n	801ac4c <_printf_common+0xac>
 801ac44:	f04f 30ff 	mov.w	r0, #4294967295
 801ac48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac4c:	3501      	adds	r5, #1
 801ac4e:	e7c6      	b.n	801abde <_printf_common+0x3e>
 801ac50:	18e1      	adds	r1, r4, r3
 801ac52:	1c5a      	adds	r2, r3, #1
 801ac54:	2030      	movs	r0, #48	@ 0x30
 801ac56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ac5a:	4422      	add	r2, r4
 801ac5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ac60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ac64:	3302      	adds	r3, #2
 801ac66:	e7c7      	b.n	801abf8 <_printf_common+0x58>
 801ac68:	2301      	movs	r3, #1
 801ac6a:	4622      	mov	r2, r4
 801ac6c:	4641      	mov	r1, r8
 801ac6e:	4638      	mov	r0, r7
 801ac70:	47c8      	blx	r9
 801ac72:	3001      	adds	r0, #1
 801ac74:	d0e6      	beq.n	801ac44 <_printf_common+0xa4>
 801ac76:	3601      	adds	r6, #1
 801ac78:	e7d9      	b.n	801ac2e <_printf_common+0x8e>
	...

0801ac7c <_printf_i>:
 801ac7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac80:	7e0f      	ldrb	r7, [r1, #24]
 801ac82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ac84:	2f78      	cmp	r7, #120	@ 0x78
 801ac86:	4691      	mov	r9, r2
 801ac88:	4680      	mov	r8, r0
 801ac8a:	460c      	mov	r4, r1
 801ac8c:	469a      	mov	sl, r3
 801ac8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ac92:	d807      	bhi.n	801aca4 <_printf_i+0x28>
 801ac94:	2f62      	cmp	r7, #98	@ 0x62
 801ac96:	d80a      	bhi.n	801acae <_printf_i+0x32>
 801ac98:	2f00      	cmp	r7, #0
 801ac9a:	f000 80d2 	beq.w	801ae42 <_printf_i+0x1c6>
 801ac9e:	2f58      	cmp	r7, #88	@ 0x58
 801aca0:	f000 80b9 	beq.w	801ae16 <_printf_i+0x19a>
 801aca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aca8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801acac:	e03a      	b.n	801ad24 <_printf_i+0xa8>
 801acae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801acb2:	2b15      	cmp	r3, #21
 801acb4:	d8f6      	bhi.n	801aca4 <_printf_i+0x28>
 801acb6:	a101      	add	r1, pc, #4	@ (adr r1, 801acbc <_printf_i+0x40>)
 801acb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801acbc:	0801ad15 	.word	0x0801ad15
 801acc0:	0801ad29 	.word	0x0801ad29
 801acc4:	0801aca5 	.word	0x0801aca5
 801acc8:	0801aca5 	.word	0x0801aca5
 801accc:	0801aca5 	.word	0x0801aca5
 801acd0:	0801aca5 	.word	0x0801aca5
 801acd4:	0801ad29 	.word	0x0801ad29
 801acd8:	0801aca5 	.word	0x0801aca5
 801acdc:	0801aca5 	.word	0x0801aca5
 801ace0:	0801aca5 	.word	0x0801aca5
 801ace4:	0801aca5 	.word	0x0801aca5
 801ace8:	0801ae29 	.word	0x0801ae29
 801acec:	0801ad53 	.word	0x0801ad53
 801acf0:	0801ade3 	.word	0x0801ade3
 801acf4:	0801aca5 	.word	0x0801aca5
 801acf8:	0801aca5 	.word	0x0801aca5
 801acfc:	0801ae4b 	.word	0x0801ae4b
 801ad00:	0801aca5 	.word	0x0801aca5
 801ad04:	0801ad53 	.word	0x0801ad53
 801ad08:	0801aca5 	.word	0x0801aca5
 801ad0c:	0801aca5 	.word	0x0801aca5
 801ad10:	0801adeb 	.word	0x0801adeb
 801ad14:	6833      	ldr	r3, [r6, #0]
 801ad16:	1d1a      	adds	r2, r3, #4
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	6032      	str	r2, [r6, #0]
 801ad1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ad20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ad24:	2301      	movs	r3, #1
 801ad26:	e09d      	b.n	801ae64 <_printf_i+0x1e8>
 801ad28:	6833      	ldr	r3, [r6, #0]
 801ad2a:	6820      	ldr	r0, [r4, #0]
 801ad2c:	1d19      	adds	r1, r3, #4
 801ad2e:	6031      	str	r1, [r6, #0]
 801ad30:	0606      	lsls	r6, r0, #24
 801ad32:	d501      	bpl.n	801ad38 <_printf_i+0xbc>
 801ad34:	681d      	ldr	r5, [r3, #0]
 801ad36:	e003      	b.n	801ad40 <_printf_i+0xc4>
 801ad38:	0645      	lsls	r5, r0, #25
 801ad3a:	d5fb      	bpl.n	801ad34 <_printf_i+0xb8>
 801ad3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ad40:	2d00      	cmp	r5, #0
 801ad42:	da03      	bge.n	801ad4c <_printf_i+0xd0>
 801ad44:	232d      	movs	r3, #45	@ 0x2d
 801ad46:	426d      	negs	r5, r5
 801ad48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ad4c:	4859      	ldr	r0, [pc, #356]	@ (801aeb4 <_printf_i+0x238>)
 801ad4e:	230a      	movs	r3, #10
 801ad50:	e011      	b.n	801ad76 <_printf_i+0xfa>
 801ad52:	6821      	ldr	r1, [r4, #0]
 801ad54:	6833      	ldr	r3, [r6, #0]
 801ad56:	0608      	lsls	r0, r1, #24
 801ad58:	f853 5b04 	ldr.w	r5, [r3], #4
 801ad5c:	d402      	bmi.n	801ad64 <_printf_i+0xe8>
 801ad5e:	0649      	lsls	r1, r1, #25
 801ad60:	bf48      	it	mi
 801ad62:	b2ad      	uxthmi	r5, r5
 801ad64:	2f6f      	cmp	r7, #111	@ 0x6f
 801ad66:	4853      	ldr	r0, [pc, #332]	@ (801aeb4 <_printf_i+0x238>)
 801ad68:	6033      	str	r3, [r6, #0]
 801ad6a:	bf14      	ite	ne
 801ad6c:	230a      	movne	r3, #10
 801ad6e:	2308      	moveq	r3, #8
 801ad70:	2100      	movs	r1, #0
 801ad72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ad76:	6866      	ldr	r6, [r4, #4]
 801ad78:	60a6      	str	r6, [r4, #8]
 801ad7a:	2e00      	cmp	r6, #0
 801ad7c:	bfa2      	ittt	ge
 801ad7e:	6821      	ldrge	r1, [r4, #0]
 801ad80:	f021 0104 	bicge.w	r1, r1, #4
 801ad84:	6021      	strge	r1, [r4, #0]
 801ad86:	b90d      	cbnz	r5, 801ad8c <_printf_i+0x110>
 801ad88:	2e00      	cmp	r6, #0
 801ad8a:	d04b      	beq.n	801ae24 <_printf_i+0x1a8>
 801ad8c:	4616      	mov	r6, r2
 801ad8e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ad92:	fb03 5711 	mls	r7, r3, r1, r5
 801ad96:	5dc7      	ldrb	r7, [r0, r7]
 801ad98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ad9c:	462f      	mov	r7, r5
 801ad9e:	42bb      	cmp	r3, r7
 801ada0:	460d      	mov	r5, r1
 801ada2:	d9f4      	bls.n	801ad8e <_printf_i+0x112>
 801ada4:	2b08      	cmp	r3, #8
 801ada6:	d10b      	bne.n	801adc0 <_printf_i+0x144>
 801ada8:	6823      	ldr	r3, [r4, #0]
 801adaa:	07df      	lsls	r7, r3, #31
 801adac:	d508      	bpl.n	801adc0 <_printf_i+0x144>
 801adae:	6923      	ldr	r3, [r4, #16]
 801adb0:	6861      	ldr	r1, [r4, #4]
 801adb2:	4299      	cmp	r1, r3
 801adb4:	bfde      	ittt	le
 801adb6:	2330      	movle	r3, #48	@ 0x30
 801adb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801adbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 801adc0:	1b92      	subs	r2, r2, r6
 801adc2:	6122      	str	r2, [r4, #16]
 801adc4:	f8cd a000 	str.w	sl, [sp]
 801adc8:	464b      	mov	r3, r9
 801adca:	aa03      	add	r2, sp, #12
 801adcc:	4621      	mov	r1, r4
 801adce:	4640      	mov	r0, r8
 801add0:	f7ff fee6 	bl	801aba0 <_printf_common>
 801add4:	3001      	adds	r0, #1
 801add6:	d14a      	bne.n	801ae6e <_printf_i+0x1f2>
 801add8:	f04f 30ff 	mov.w	r0, #4294967295
 801addc:	b004      	add	sp, #16
 801adde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ade2:	6823      	ldr	r3, [r4, #0]
 801ade4:	f043 0320 	orr.w	r3, r3, #32
 801ade8:	6023      	str	r3, [r4, #0]
 801adea:	4833      	ldr	r0, [pc, #204]	@ (801aeb8 <_printf_i+0x23c>)
 801adec:	2778      	movs	r7, #120	@ 0x78
 801adee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801adf2:	6823      	ldr	r3, [r4, #0]
 801adf4:	6831      	ldr	r1, [r6, #0]
 801adf6:	061f      	lsls	r7, r3, #24
 801adf8:	f851 5b04 	ldr.w	r5, [r1], #4
 801adfc:	d402      	bmi.n	801ae04 <_printf_i+0x188>
 801adfe:	065f      	lsls	r7, r3, #25
 801ae00:	bf48      	it	mi
 801ae02:	b2ad      	uxthmi	r5, r5
 801ae04:	6031      	str	r1, [r6, #0]
 801ae06:	07d9      	lsls	r1, r3, #31
 801ae08:	bf44      	itt	mi
 801ae0a:	f043 0320 	orrmi.w	r3, r3, #32
 801ae0e:	6023      	strmi	r3, [r4, #0]
 801ae10:	b11d      	cbz	r5, 801ae1a <_printf_i+0x19e>
 801ae12:	2310      	movs	r3, #16
 801ae14:	e7ac      	b.n	801ad70 <_printf_i+0xf4>
 801ae16:	4827      	ldr	r0, [pc, #156]	@ (801aeb4 <_printf_i+0x238>)
 801ae18:	e7e9      	b.n	801adee <_printf_i+0x172>
 801ae1a:	6823      	ldr	r3, [r4, #0]
 801ae1c:	f023 0320 	bic.w	r3, r3, #32
 801ae20:	6023      	str	r3, [r4, #0]
 801ae22:	e7f6      	b.n	801ae12 <_printf_i+0x196>
 801ae24:	4616      	mov	r6, r2
 801ae26:	e7bd      	b.n	801ada4 <_printf_i+0x128>
 801ae28:	6833      	ldr	r3, [r6, #0]
 801ae2a:	6825      	ldr	r5, [r4, #0]
 801ae2c:	6961      	ldr	r1, [r4, #20]
 801ae2e:	1d18      	adds	r0, r3, #4
 801ae30:	6030      	str	r0, [r6, #0]
 801ae32:	062e      	lsls	r6, r5, #24
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	d501      	bpl.n	801ae3c <_printf_i+0x1c0>
 801ae38:	6019      	str	r1, [r3, #0]
 801ae3a:	e002      	b.n	801ae42 <_printf_i+0x1c6>
 801ae3c:	0668      	lsls	r0, r5, #25
 801ae3e:	d5fb      	bpl.n	801ae38 <_printf_i+0x1bc>
 801ae40:	8019      	strh	r1, [r3, #0]
 801ae42:	2300      	movs	r3, #0
 801ae44:	6123      	str	r3, [r4, #16]
 801ae46:	4616      	mov	r6, r2
 801ae48:	e7bc      	b.n	801adc4 <_printf_i+0x148>
 801ae4a:	6833      	ldr	r3, [r6, #0]
 801ae4c:	1d1a      	adds	r2, r3, #4
 801ae4e:	6032      	str	r2, [r6, #0]
 801ae50:	681e      	ldr	r6, [r3, #0]
 801ae52:	6862      	ldr	r2, [r4, #4]
 801ae54:	2100      	movs	r1, #0
 801ae56:	4630      	mov	r0, r6
 801ae58:	f7e5 f9d2 	bl	8000200 <memchr>
 801ae5c:	b108      	cbz	r0, 801ae62 <_printf_i+0x1e6>
 801ae5e:	1b80      	subs	r0, r0, r6
 801ae60:	6060      	str	r0, [r4, #4]
 801ae62:	6863      	ldr	r3, [r4, #4]
 801ae64:	6123      	str	r3, [r4, #16]
 801ae66:	2300      	movs	r3, #0
 801ae68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ae6c:	e7aa      	b.n	801adc4 <_printf_i+0x148>
 801ae6e:	6923      	ldr	r3, [r4, #16]
 801ae70:	4632      	mov	r2, r6
 801ae72:	4649      	mov	r1, r9
 801ae74:	4640      	mov	r0, r8
 801ae76:	47d0      	blx	sl
 801ae78:	3001      	adds	r0, #1
 801ae7a:	d0ad      	beq.n	801add8 <_printf_i+0x15c>
 801ae7c:	6823      	ldr	r3, [r4, #0]
 801ae7e:	079b      	lsls	r3, r3, #30
 801ae80:	d413      	bmi.n	801aeaa <_printf_i+0x22e>
 801ae82:	68e0      	ldr	r0, [r4, #12]
 801ae84:	9b03      	ldr	r3, [sp, #12]
 801ae86:	4298      	cmp	r0, r3
 801ae88:	bfb8      	it	lt
 801ae8a:	4618      	movlt	r0, r3
 801ae8c:	e7a6      	b.n	801addc <_printf_i+0x160>
 801ae8e:	2301      	movs	r3, #1
 801ae90:	4632      	mov	r2, r6
 801ae92:	4649      	mov	r1, r9
 801ae94:	4640      	mov	r0, r8
 801ae96:	47d0      	blx	sl
 801ae98:	3001      	adds	r0, #1
 801ae9a:	d09d      	beq.n	801add8 <_printf_i+0x15c>
 801ae9c:	3501      	adds	r5, #1
 801ae9e:	68e3      	ldr	r3, [r4, #12]
 801aea0:	9903      	ldr	r1, [sp, #12]
 801aea2:	1a5b      	subs	r3, r3, r1
 801aea4:	42ab      	cmp	r3, r5
 801aea6:	dcf2      	bgt.n	801ae8e <_printf_i+0x212>
 801aea8:	e7eb      	b.n	801ae82 <_printf_i+0x206>
 801aeaa:	2500      	movs	r5, #0
 801aeac:	f104 0619 	add.w	r6, r4, #25
 801aeb0:	e7f5      	b.n	801ae9e <_printf_i+0x222>
 801aeb2:	bf00      	nop
 801aeb4:	0806c7e6 	.word	0x0806c7e6
 801aeb8:	0806c7f7 	.word	0x0806c7f7

0801aebc <std>:
 801aebc:	2300      	movs	r3, #0
 801aebe:	b510      	push	{r4, lr}
 801aec0:	4604      	mov	r4, r0
 801aec2:	e9c0 3300 	strd	r3, r3, [r0]
 801aec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aeca:	6083      	str	r3, [r0, #8]
 801aecc:	8181      	strh	r1, [r0, #12]
 801aece:	6643      	str	r3, [r0, #100]	@ 0x64
 801aed0:	81c2      	strh	r2, [r0, #14]
 801aed2:	6183      	str	r3, [r0, #24]
 801aed4:	4619      	mov	r1, r3
 801aed6:	2208      	movs	r2, #8
 801aed8:	305c      	adds	r0, #92	@ 0x5c
 801aeda:	f000 fa13 	bl	801b304 <memset>
 801aede:	4b0d      	ldr	r3, [pc, #52]	@ (801af14 <std+0x58>)
 801aee0:	6263      	str	r3, [r4, #36]	@ 0x24
 801aee2:	4b0d      	ldr	r3, [pc, #52]	@ (801af18 <std+0x5c>)
 801aee4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801aee6:	4b0d      	ldr	r3, [pc, #52]	@ (801af1c <std+0x60>)
 801aee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801aeea:	4b0d      	ldr	r3, [pc, #52]	@ (801af20 <std+0x64>)
 801aeec:	6323      	str	r3, [r4, #48]	@ 0x30
 801aeee:	4b0d      	ldr	r3, [pc, #52]	@ (801af24 <std+0x68>)
 801aef0:	6224      	str	r4, [r4, #32]
 801aef2:	429c      	cmp	r4, r3
 801aef4:	d006      	beq.n	801af04 <std+0x48>
 801aef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801aefa:	4294      	cmp	r4, r2
 801aefc:	d002      	beq.n	801af04 <std+0x48>
 801aefe:	33d0      	adds	r3, #208	@ 0xd0
 801af00:	429c      	cmp	r4, r3
 801af02:	d105      	bne.n	801af10 <std+0x54>
 801af04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801af08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af0c:	f000 baac 	b.w	801b468 <__retarget_lock_init_recursive>
 801af10:	bd10      	pop	{r4, pc}
 801af12:	bf00      	nop
 801af14:	0801b121 	.word	0x0801b121
 801af18:	0801b143 	.word	0x0801b143
 801af1c:	0801b17b 	.word	0x0801b17b
 801af20:	0801b19f 	.word	0x0801b19f
 801af24:	20013f10 	.word	0x20013f10

0801af28 <stdio_exit_handler>:
 801af28:	4a02      	ldr	r2, [pc, #8]	@ (801af34 <stdio_exit_handler+0xc>)
 801af2a:	4903      	ldr	r1, [pc, #12]	@ (801af38 <stdio_exit_handler+0x10>)
 801af2c:	4803      	ldr	r0, [pc, #12]	@ (801af3c <stdio_exit_handler+0x14>)
 801af2e:	f000 b869 	b.w	801b004 <_fwalk_sglue>
 801af32:	bf00      	nop
 801af34:	200000c0 	.word	0x200000c0
 801af38:	0801cc95 	.word	0x0801cc95
 801af3c:	200000d0 	.word	0x200000d0

0801af40 <cleanup_stdio>:
 801af40:	6841      	ldr	r1, [r0, #4]
 801af42:	4b0c      	ldr	r3, [pc, #48]	@ (801af74 <cleanup_stdio+0x34>)
 801af44:	4299      	cmp	r1, r3
 801af46:	b510      	push	{r4, lr}
 801af48:	4604      	mov	r4, r0
 801af4a:	d001      	beq.n	801af50 <cleanup_stdio+0x10>
 801af4c:	f001 fea2 	bl	801cc94 <_fflush_r>
 801af50:	68a1      	ldr	r1, [r4, #8]
 801af52:	4b09      	ldr	r3, [pc, #36]	@ (801af78 <cleanup_stdio+0x38>)
 801af54:	4299      	cmp	r1, r3
 801af56:	d002      	beq.n	801af5e <cleanup_stdio+0x1e>
 801af58:	4620      	mov	r0, r4
 801af5a:	f001 fe9b 	bl	801cc94 <_fflush_r>
 801af5e:	68e1      	ldr	r1, [r4, #12]
 801af60:	4b06      	ldr	r3, [pc, #24]	@ (801af7c <cleanup_stdio+0x3c>)
 801af62:	4299      	cmp	r1, r3
 801af64:	d004      	beq.n	801af70 <cleanup_stdio+0x30>
 801af66:	4620      	mov	r0, r4
 801af68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af6c:	f001 be92 	b.w	801cc94 <_fflush_r>
 801af70:	bd10      	pop	{r4, pc}
 801af72:	bf00      	nop
 801af74:	20013f10 	.word	0x20013f10
 801af78:	20013f78 	.word	0x20013f78
 801af7c:	20013fe0 	.word	0x20013fe0

0801af80 <global_stdio_init.part.0>:
 801af80:	b510      	push	{r4, lr}
 801af82:	4b0b      	ldr	r3, [pc, #44]	@ (801afb0 <global_stdio_init.part.0+0x30>)
 801af84:	4c0b      	ldr	r4, [pc, #44]	@ (801afb4 <global_stdio_init.part.0+0x34>)
 801af86:	4a0c      	ldr	r2, [pc, #48]	@ (801afb8 <global_stdio_init.part.0+0x38>)
 801af88:	601a      	str	r2, [r3, #0]
 801af8a:	4620      	mov	r0, r4
 801af8c:	2200      	movs	r2, #0
 801af8e:	2104      	movs	r1, #4
 801af90:	f7ff ff94 	bl	801aebc <std>
 801af94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801af98:	2201      	movs	r2, #1
 801af9a:	2109      	movs	r1, #9
 801af9c:	f7ff ff8e 	bl	801aebc <std>
 801afa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801afa4:	2202      	movs	r2, #2
 801afa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afaa:	2112      	movs	r1, #18
 801afac:	f7ff bf86 	b.w	801aebc <std>
 801afb0:	20014048 	.word	0x20014048
 801afb4:	20013f10 	.word	0x20013f10
 801afb8:	0801af29 	.word	0x0801af29

0801afbc <__sfp_lock_acquire>:
 801afbc:	4801      	ldr	r0, [pc, #4]	@ (801afc4 <__sfp_lock_acquire+0x8>)
 801afbe:	f000 ba54 	b.w	801b46a <__retarget_lock_acquire_recursive>
 801afc2:	bf00      	nop
 801afc4:	20014051 	.word	0x20014051

0801afc8 <__sfp_lock_release>:
 801afc8:	4801      	ldr	r0, [pc, #4]	@ (801afd0 <__sfp_lock_release+0x8>)
 801afca:	f000 ba4f 	b.w	801b46c <__retarget_lock_release_recursive>
 801afce:	bf00      	nop
 801afd0:	20014051 	.word	0x20014051

0801afd4 <__sinit>:
 801afd4:	b510      	push	{r4, lr}
 801afd6:	4604      	mov	r4, r0
 801afd8:	f7ff fff0 	bl	801afbc <__sfp_lock_acquire>
 801afdc:	6a23      	ldr	r3, [r4, #32]
 801afde:	b11b      	cbz	r3, 801afe8 <__sinit+0x14>
 801afe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afe4:	f7ff bff0 	b.w	801afc8 <__sfp_lock_release>
 801afe8:	4b04      	ldr	r3, [pc, #16]	@ (801affc <__sinit+0x28>)
 801afea:	6223      	str	r3, [r4, #32]
 801afec:	4b04      	ldr	r3, [pc, #16]	@ (801b000 <__sinit+0x2c>)
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	d1f5      	bne.n	801afe0 <__sinit+0xc>
 801aff4:	f7ff ffc4 	bl	801af80 <global_stdio_init.part.0>
 801aff8:	e7f2      	b.n	801afe0 <__sinit+0xc>
 801affa:	bf00      	nop
 801affc:	0801af41 	.word	0x0801af41
 801b000:	20014048 	.word	0x20014048

0801b004 <_fwalk_sglue>:
 801b004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b008:	4607      	mov	r7, r0
 801b00a:	4688      	mov	r8, r1
 801b00c:	4614      	mov	r4, r2
 801b00e:	2600      	movs	r6, #0
 801b010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b014:	f1b9 0901 	subs.w	r9, r9, #1
 801b018:	d505      	bpl.n	801b026 <_fwalk_sglue+0x22>
 801b01a:	6824      	ldr	r4, [r4, #0]
 801b01c:	2c00      	cmp	r4, #0
 801b01e:	d1f7      	bne.n	801b010 <_fwalk_sglue+0xc>
 801b020:	4630      	mov	r0, r6
 801b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b026:	89ab      	ldrh	r3, [r5, #12]
 801b028:	2b01      	cmp	r3, #1
 801b02a:	d907      	bls.n	801b03c <_fwalk_sglue+0x38>
 801b02c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b030:	3301      	adds	r3, #1
 801b032:	d003      	beq.n	801b03c <_fwalk_sglue+0x38>
 801b034:	4629      	mov	r1, r5
 801b036:	4638      	mov	r0, r7
 801b038:	47c0      	blx	r8
 801b03a:	4306      	orrs	r6, r0
 801b03c:	3568      	adds	r5, #104	@ 0x68
 801b03e:	e7e9      	b.n	801b014 <_fwalk_sglue+0x10>

0801b040 <iprintf>:
 801b040:	b40f      	push	{r0, r1, r2, r3}
 801b042:	b507      	push	{r0, r1, r2, lr}
 801b044:	4906      	ldr	r1, [pc, #24]	@ (801b060 <iprintf+0x20>)
 801b046:	ab04      	add	r3, sp, #16
 801b048:	6808      	ldr	r0, [r1, #0]
 801b04a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b04e:	6881      	ldr	r1, [r0, #8]
 801b050:	9301      	str	r3, [sp, #4]
 801b052:	f001 fc83 	bl	801c95c <_vfiprintf_r>
 801b056:	b003      	add	sp, #12
 801b058:	f85d eb04 	ldr.w	lr, [sp], #4
 801b05c:	b004      	add	sp, #16
 801b05e:	4770      	bx	lr
 801b060:	200000cc 	.word	0x200000cc

0801b064 <_puts_r>:
 801b064:	6a03      	ldr	r3, [r0, #32]
 801b066:	b570      	push	{r4, r5, r6, lr}
 801b068:	6884      	ldr	r4, [r0, #8]
 801b06a:	4605      	mov	r5, r0
 801b06c:	460e      	mov	r6, r1
 801b06e:	b90b      	cbnz	r3, 801b074 <_puts_r+0x10>
 801b070:	f7ff ffb0 	bl	801afd4 <__sinit>
 801b074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b076:	07db      	lsls	r3, r3, #31
 801b078:	d405      	bmi.n	801b086 <_puts_r+0x22>
 801b07a:	89a3      	ldrh	r3, [r4, #12]
 801b07c:	0598      	lsls	r0, r3, #22
 801b07e:	d402      	bmi.n	801b086 <_puts_r+0x22>
 801b080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b082:	f000 f9f2 	bl	801b46a <__retarget_lock_acquire_recursive>
 801b086:	89a3      	ldrh	r3, [r4, #12]
 801b088:	0719      	lsls	r1, r3, #28
 801b08a:	d502      	bpl.n	801b092 <_puts_r+0x2e>
 801b08c:	6923      	ldr	r3, [r4, #16]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d135      	bne.n	801b0fe <_puts_r+0x9a>
 801b092:	4621      	mov	r1, r4
 801b094:	4628      	mov	r0, r5
 801b096:	f000 f8cf 	bl	801b238 <__swsetup_r>
 801b09a:	b380      	cbz	r0, 801b0fe <_puts_r+0x9a>
 801b09c:	f04f 35ff 	mov.w	r5, #4294967295
 801b0a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b0a2:	07da      	lsls	r2, r3, #31
 801b0a4:	d405      	bmi.n	801b0b2 <_puts_r+0x4e>
 801b0a6:	89a3      	ldrh	r3, [r4, #12]
 801b0a8:	059b      	lsls	r3, r3, #22
 801b0aa:	d402      	bmi.n	801b0b2 <_puts_r+0x4e>
 801b0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b0ae:	f000 f9dd 	bl	801b46c <__retarget_lock_release_recursive>
 801b0b2:	4628      	mov	r0, r5
 801b0b4:	bd70      	pop	{r4, r5, r6, pc}
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	da04      	bge.n	801b0c4 <_puts_r+0x60>
 801b0ba:	69a2      	ldr	r2, [r4, #24]
 801b0bc:	429a      	cmp	r2, r3
 801b0be:	dc17      	bgt.n	801b0f0 <_puts_r+0x8c>
 801b0c0:	290a      	cmp	r1, #10
 801b0c2:	d015      	beq.n	801b0f0 <_puts_r+0x8c>
 801b0c4:	6823      	ldr	r3, [r4, #0]
 801b0c6:	1c5a      	adds	r2, r3, #1
 801b0c8:	6022      	str	r2, [r4, #0]
 801b0ca:	7019      	strb	r1, [r3, #0]
 801b0cc:	68a3      	ldr	r3, [r4, #8]
 801b0ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b0d2:	3b01      	subs	r3, #1
 801b0d4:	60a3      	str	r3, [r4, #8]
 801b0d6:	2900      	cmp	r1, #0
 801b0d8:	d1ed      	bne.n	801b0b6 <_puts_r+0x52>
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	da11      	bge.n	801b102 <_puts_r+0x9e>
 801b0de:	4622      	mov	r2, r4
 801b0e0:	210a      	movs	r1, #10
 801b0e2:	4628      	mov	r0, r5
 801b0e4:	f000 f86a 	bl	801b1bc <__swbuf_r>
 801b0e8:	3001      	adds	r0, #1
 801b0ea:	d0d7      	beq.n	801b09c <_puts_r+0x38>
 801b0ec:	250a      	movs	r5, #10
 801b0ee:	e7d7      	b.n	801b0a0 <_puts_r+0x3c>
 801b0f0:	4622      	mov	r2, r4
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	f000 f862 	bl	801b1bc <__swbuf_r>
 801b0f8:	3001      	adds	r0, #1
 801b0fa:	d1e7      	bne.n	801b0cc <_puts_r+0x68>
 801b0fc:	e7ce      	b.n	801b09c <_puts_r+0x38>
 801b0fe:	3e01      	subs	r6, #1
 801b100:	e7e4      	b.n	801b0cc <_puts_r+0x68>
 801b102:	6823      	ldr	r3, [r4, #0]
 801b104:	1c5a      	adds	r2, r3, #1
 801b106:	6022      	str	r2, [r4, #0]
 801b108:	220a      	movs	r2, #10
 801b10a:	701a      	strb	r2, [r3, #0]
 801b10c:	e7ee      	b.n	801b0ec <_puts_r+0x88>
	...

0801b110 <puts>:
 801b110:	4b02      	ldr	r3, [pc, #8]	@ (801b11c <puts+0xc>)
 801b112:	4601      	mov	r1, r0
 801b114:	6818      	ldr	r0, [r3, #0]
 801b116:	f7ff bfa5 	b.w	801b064 <_puts_r>
 801b11a:	bf00      	nop
 801b11c:	200000cc 	.word	0x200000cc

0801b120 <__sread>:
 801b120:	b510      	push	{r4, lr}
 801b122:	460c      	mov	r4, r1
 801b124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b128:	f000 f940 	bl	801b3ac <_read_r>
 801b12c:	2800      	cmp	r0, #0
 801b12e:	bfab      	itete	ge
 801b130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b132:	89a3      	ldrhlt	r3, [r4, #12]
 801b134:	181b      	addge	r3, r3, r0
 801b136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b13a:	bfac      	ite	ge
 801b13c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b13e:	81a3      	strhlt	r3, [r4, #12]
 801b140:	bd10      	pop	{r4, pc}

0801b142 <__swrite>:
 801b142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b146:	461f      	mov	r7, r3
 801b148:	898b      	ldrh	r3, [r1, #12]
 801b14a:	05db      	lsls	r3, r3, #23
 801b14c:	4605      	mov	r5, r0
 801b14e:	460c      	mov	r4, r1
 801b150:	4616      	mov	r6, r2
 801b152:	d505      	bpl.n	801b160 <__swrite+0x1e>
 801b154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b158:	2302      	movs	r3, #2
 801b15a:	2200      	movs	r2, #0
 801b15c:	f000 f914 	bl	801b388 <_lseek_r>
 801b160:	89a3      	ldrh	r3, [r4, #12]
 801b162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b16a:	81a3      	strh	r3, [r4, #12]
 801b16c:	4632      	mov	r2, r6
 801b16e:	463b      	mov	r3, r7
 801b170:	4628      	mov	r0, r5
 801b172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b176:	f000 b93b 	b.w	801b3f0 <_write_r>

0801b17a <__sseek>:
 801b17a:	b510      	push	{r4, lr}
 801b17c:	460c      	mov	r4, r1
 801b17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b182:	f000 f901 	bl	801b388 <_lseek_r>
 801b186:	1c43      	adds	r3, r0, #1
 801b188:	89a3      	ldrh	r3, [r4, #12]
 801b18a:	bf15      	itete	ne
 801b18c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b18e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b196:	81a3      	strheq	r3, [r4, #12]
 801b198:	bf18      	it	ne
 801b19a:	81a3      	strhne	r3, [r4, #12]
 801b19c:	bd10      	pop	{r4, pc}

0801b19e <__sclose>:
 801b19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a2:	f000 b8e1 	b.w	801b368 <_close_r>
	...

0801b1a8 <viprintf>:
 801b1a8:	460b      	mov	r3, r1
 801b1aa:	4903      	ldr	r1, [pc, #12]	@ (801b1b8 <viprintf+0x10>)
 801b1ac:	4602      	mov	r2, r0
 801b1ae:	6808      	ldr	r0, [r1, #0]
 801b1b0:	6881      	ldr	r1, [r0, #8]
 801b1b2:	f001 bbd3 	b.w	801c95c <_vfiprintf_r>
 801b1b6:	bf00      	nop
 801b1b8:	200000cc 	.word	0x200000cc

0801b1bc <__swbuf_r>:
 801b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1be:	460e      	mov	r6, r1
 801b1c0:	4614      	mov	r4, r2
 801b1c2:	4605      	mov	r5, r0
 801b1c4:	b118      	cbz	r0, 801b1ce <__swbuf_r+0x12>
 801b1c6:	6a03      	ldr	r3, [r0, #32]
 801b1c8:	b90b      	cbnz	r3, 801b1ce <__swbuf_r+0x12>
 801b1ca:	f7ff ff03 	bl	801afd4 <__sinit>
 801b1ce:	69a3      	ldr	r3, [r4, #24]
 801b1d0:	60a3      	str	r3, [r4, #8]
 801b1d2:	89a3      	ldrh	r3, [r4, #12]
 801b1d4:	071a      	lsls	r2, r3, #28
 801b1d6:	d501      	bpl.n	801b1dc <__swbuf_r+0x20>
 801b1d8:	6923      	ldr	r3, [r4, #16]
 801b1da:	b943      	cbnz	r3, 801b1ee <__swbuf_r+0x32>
 801b1dc:	4621      	mov	r1, r4
 801b1de:	4628      	mov	r0, r5
 801b1e0:	f000 f82a 	bl	801b238 <__swsetup_r>
 801b1e4:	b118      	cbz	r0, 801b1ee <__swbuf_r+0x32>
 801b1e6:	f04f 37ff 	mov.w	r7, #4294967295
 801b1ea:	4638      	mov	r0, r7
 801b1ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	6922      	ldr	r2, [r4, #16]
 801b1f2:	1a98      	subs	r0, r3, r2
 801b1f4:	6963      	ldr	r3, [r4, #20]
 801b1f6:	b2f6      	uxtb	r6, r6
 801b1f8:	4283      	cmp	r3, r0
 801b1fa:	4637      	mov	r7, r6
 801b1fc:	dc05      	bgt.n	801b20a <__swbuf_r+0x4e>
 801b1fe:	4621      	mov	r1, r4
 801b200:	4628      	mov	r0, r5
 801b202:	f001 fd47 	bl	801cc94 <_fflush_r>
 801b206:	2800      	cmp	r0, #0
 801b208:	d1ed      	bne.n	801b1e6 <__swbuf_r+0x2a>
 801b20a:	68a3      	ldr	r3, [r4, #8]
 801b20c:	3b01      	subs	r3, #1
 801b20e:	60a3      	str	r3, [r4, #8]
 801b210:	6823      	ldr	r3, [r4, #0]
 801b212:	1c5a      	adds	r2, r3, #1
 801b214:	6022      	str	r2, [r4, #0]
 801b216:	701e      	strb	r6, [r3, #0]
 801b218:	6962      	ldr	r2, [r4, #20]
 801b21a:	1c43      	adds	r3, r0, #1
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d004      	beq.n	801b22a <__swbuf_r+0x6e>
 801b220:	89a3      	ldrh	r3, [r4, #12]
 801b222:	07db      	lsls	r3, r3, #31
 801b224:	d5e1      	bpl.n	801b1ea <__swbuf_r+0x2e>
 801b226:	2e0a      	cmp	r6, #10
 801b228:	d1df      	bne.n	801b1ea <__swbuf_r+0x2e>
 801b22a:	4621      	mov	r1, r4
 801b22c:	4628      	mov	r0, r5
 801b22e:	f001 fd31 	bl	801cc94 <_fflush_r>
 801b232:	2800      	cmp	r0, #0
 801b234:	d0d9      	beq.n	801b1ea <__swbuf_r+0x2e>
 801b236:	e7d6      	b.n	801b1e6 <__swbuf_r+0x2a>

0801b238 <__swsetup_r>:
 801b238:	b538      	push	{r3, r4, r5, lr}
 801b23a:	4b29      	ldr	r3, [pc, #164]	@ (801b2e0 <__swsetup_r+0xa8>)
 801b23c:	4605      	mov	r5, r0
 801b23e:	6818      	ldr	r0, [r3, #0]
 801b240:	460c      	mov	r4, r1
 801b242:	b118      	cbz	r0, 801b24c <__swsetup_r+0x14>
 801b244:	6a03      	ldr	r3, [r0, #32]
 801b246:	b90b      	cbnz	r3, 801b24c <__swsetup_r+0x14>
 801b248:	f7ff fec4 	bl	801afd4 <__sinit>
 801b24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b250:	0719      	lsls	r1, r3, #28
 801b252:	d422      	bmi.n	801b29a <__swsetup_r+0x62>
 801b254:	06da      	lsls	r2, r3, #27
 801b256:	d407      	bmi.n	801b268 <__swsetup_r+0x30>
 801b258:	2209      	movs	r2, #9
 801b25a:	602a      	str	r2, [r5, #0]
 801b25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b260:	81a3      	strh	r3, [r4, #12]
 801b262:	f04f 30ff 	mov.w	r0, #4294967295
 801b266:	e033      	b.n	801b2d0 <__swsetup_r+0x98>
 801b268:	0758      	lsls	r0, r3, #29
 801b26a:	d512      	bpl.n	801b292 <__swsetup_r+0x5a>
 801b26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b26e:	b141      	cbz	r1, 801b282 <__swsetup_r+0x4a>
 801b270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b274:	4299      	cmp	r1, r3
 801b276:	d002      	beq.n	801b27e <__swsetup_r+0x46>
 801b278:	4628      	mov	r0, r5
 801b27a:	f000 ff79 	bl	801c170 <_free_r>
 801b27e:	2300      	movs	r3, #0
 801b280:	6363      	str	r3, [r4, #52]	@ 0x34
 801b282:	89a3      	ldrh	r3, [r4, #12]
 801b284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b288:	81a3      	strh	r3, [r4, #12]
 801b28a:	2300      	movs	r3, #0
 801b28c:	6063      	str	r3, [r4, #4]
 801b28e:	6923      	ldr	r3, [r4, #16]
 801b290:	6023      	str	r3, [r4, #0]
 801b292:	89a3      	ldrh	r3, [r4, #12]
 801b294:	f043 0308 	orr.w	r3, r3, #8
 801b298:	81a3      	strh	r3, [r4, #12]
 801b29a:	6923      	ldr	r3, [r4, #16]
 801b29c:	b94b      	cbnz	r3, 801b2b2 <__swsetup_r+0x7a>
 801b29e:	89a3      	ldrh	r3, [r4, #12]
 801b2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b2a8:	d003      	beq.n	801b2b2 <__swsetup_r+0x7a>
 801b2aa:	4621      	mov	r1, r4
 801b2ac:	4628      	mov	r0, r5
 801b2ae:	f001 fd51 	bl	801cd54 <__smakebuf_r>
 801b2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b2b6:	f013 0201 	ands.w	r2, r3, #1
 801b2ba:	d00a      	beq.n	801b2d2 <__swsetup_r+0x9a>
 801b2bc:	2200      	movs	r2, #0
 801b2be:	60a2      	str	r2, [r4, #8]
 801b2c0:	6962      	ldr	r2, [r4, #20]
 801b2c2:	4252      	negs	r2, r2
 801b2c4:	61a2      	str	r2, [r4, #24]
 801b2c6:	6922      	ldr	r2, [r4, #16]
 801b2c8:	b942      	cbnz	r2, 801b2dc <__swsetup_r+0xa4>
 801b2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b2ce:	d1c5      	bne.n	801b25c <__swsetup_r+0x24>
 801b2d0:	bd38      	pop	{r3, r4, r5, pc}
 801b2d2:	0799      	lsls	r1, r3, #30
 801b2d4:	bf58      	it	pl
 801b2d6:	6962      	ldrpl	r2, [r4, #20]
 801b2d8:	60a2      	str	r2, [r4, #8]
 801b2da:	e7f4      	b.n	801b2c6 <__swsetup_r+0x8e>
 801b2dc:	2000      	movs	r0, #0
 801b2de:	e7f7      	b.n	801b2d0 <__swsetup_r+0x98>
 801b2e0:	200000cc 	.word	0x200000cc

0801b2e4 <memcmp>:
 801b2e4:	b510      	push	{r4, lr}
 801b2e6:	3901      	subs	r1, #1
 801b2e8:	4402      	add	r2, r0
 801b2ea:	4290      	cmp	r0, r2
 801b2ec:	d101      	bne.n	801b2f2 <memcmp+0xe>
 801b2ee:	2000      	movs	r0, #0
 801b2f0:	e005      	b.n	801b2fe <memcmp+0x1a>
 801b2f2:	7803      	ldrb	r3, [r0, #0]
 801b2f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b2f8:	42a3      	cmp	r3, r4
 801b2fa:	d001      	beq.n	801b300 <memcmp+0x1c>
 801b2fc:	1b18      	subs	r0, r3, r4
 801b2fe:	bd10      	pop	{r4, pc}
 801b300:	3001      	adds	r0, #1
 801b302:	e7f2      	b.n	801b2ea <memcmp+0x6>

0801b304 <memset>:
 801b304:	4402      	add	r2, r0
 801b306:	4603      	mov	r3, r0
 801b308:	4293      	cmp	r3, r2
 801b30a:	d100      	bne.n	801b30e <memset+0xa>
 801b30c:	4770      	bx	lr
 801b30e:	f803 1b01 	strb.w	r1, [r3], #1
 801b312:	e7f9      	b.n	801b308 <memset+0x4>

0801b314 <strncmp>:
 801b314:	b510      	push	{r4, lr}
 801b316:	b16a      	cbz	r2, 801b334 <strncmp+0x20>
 801b318:	3901      	subs	r1, #1
 801b31a:	1884      	adds	r4, r0, r2
 801b31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b320:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b324:	429a      	cmp	r2, r3
 801b326:	d103      	bne.n	801b330 <strncmp+0x1c>
 801b328:	42a0      	cmp	r0, r4
 801b32a:	d001      	beq.n	801b330 <strncmp+0x1c>
 801b32c:	2a00      	cmp	r2, #0
 801b32e:	d1f5      	bne.n	801b31c <strncmp+0x8>
 801b330:	1ad0      	subs	r0, r2, r3
 801b332:	bd10      	pop	{r4, pc}
 801b334:	4610      	mov	r0, r2
 801b336:	e7fc      	b.n	801b332 <strncmp+0x1e>

0801b338 <strncpy>:
 801b338:	b510      	push	{r4, lr}
 801b33a:	3901      	subs	r1, #1
 801b33c:	4603      	mov	r3, r0
 801b33e:	b132      	cbz	r2, 801b34e <strncpy+0x16>
 801b340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b344:	f803 4b01 	strb.w	r4, [r3], #1
 801b348:	3a01      	subs	r2, #1
 801b34a:	2c00      	cmp	r4, #0
 801b34c:	d1f7      	bne.n	801b33e <strncpy+0x6>
 801b34e:	441a      	add	r2, r3
 801b350:	2100      	movs	r1, #0
 801b352:	4293      	cmp	r3, r2
 801b354:	d100      	bne.n	801b358 <strncpy+0x20>
 801b356:	bd10      	pop	{r4, pc}
 801b358:	f803 1b01 	strb.w	r1, [r3], #1
 801b35c:	e7f9      	b.n	801b352 <strncpy+0x1a>
	...

0801b360 <_localeconv_r>:
 801b360:	4800      	ldr	r0, [pc, #0]	@ (801b364 <_localeconv_r+0x4>)
 801b362:	4770      	bx	lr
 801b364:	2000020c 	.word	0x2000020c

0801b368 <_close_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d06      	ldr	r5, [pc, #24]	@ (801b384 <_close_r+0x1c>)
 801b36c:	2300      	movs	r3, #0
 801b36e:	4604      	mov	r4, r0
 801b370:	4608      	mov	r0, r1
 801b372:	602b      	str	r3, [r5, #0]
 801b374:	f7e8 ff74 	bl	8004260 <_close>
 801b378:	1c43      	adds	r3, r0, #1
 801b37a:	d102      	bne.n	801b382 <_close_r+0x1a>
 801b37c:	682b      	ldr	r3, [r5, #0]
 801b37e:	b103      	cbz	r3, 801b382 <_close_r+0x1a>
 801b380:	6023      	str	r3, [r4, #0]
 801b382:	bd38      	pop	{r3, r4, r5, pc}
 801b384:	2001404c 	.word	0x2001404c

0801b388 <_lseek_r>:
 801b388:	b538      	push	{r3, r4, r5, lr}
 801b38a:	4d07      	ldr	r5, [pc, #28]	@ (801b3a8 <_lseek_r+0x20>)
 801b38c:	4604      	mov	r4, r0
 801b38e:	4608      	mov	r0, r1
 801b390:	4611      	mov	r1, r2
 801b392:	2200      	movs	r2, #0
 801b394:	602a      	str	r2, [r5, #0]
 801b396:	461a      	mov	r2, r3
 801b398:	f7e8 ff89 	bl	80042ae <_lseek>
 801b39c:	1c43      	adds	r3, r0, #1
 801b39e:	d102      	bne.n	801b3a6 <_lseek_r+0x1e>
 801b3a0:	682b      	ldr	r3, [r5, #0]
 801b3a2:	b103      	cbz	r3, 801b3a6 <_lseek_r+0x1e>
 801b3a4:	6023      	str	r3, [r4, #0]
 801b3a6:	bd38      	pop	{r3, r4, r5, pc}
 801b3a8:	2001404c 	.word	0x2001404c

0801b3ac <_read_r>:
 801b3ac:	b538      	push	{r3, r4, r5, lr}
 801b3ae:	4d07      	ldr	r5, [pc, #28]	@ (801b3cc <_read_r+0x20>)
 801b3b0:	4604      	mov	r4, r0
 801b3b2:	4608      	mov	r0, r1
 801b3b4:	4611      	mov	r1, r2
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	602a      	str	r2, [r5, #0]
 801b3ba:	461a      	mov	r2, r3
 801b3bc:	f7e8 ff17 	bl	80041ee <_read>
 801b3c0:	1c43      	adds	r3, r0, #1
 801b3c2:	d102      	bne.n	801b3ca <_read_r+0x1e>
 801b3c4:	682b      	ldr	r3, [r5, #0]
 801b3c6:	b103      	cbz	r3, 801b3ca <_read_r+0x1e>
 801b3c8:	6023      	str	r3, [r4, #0]
 801b3ca:	bd38      	pop	{r3, r4, r5, pc}
 801b3cc:	2001404c 	.word	0x2001404c

0801b3d0 <_sbrk_r>:
 801b3d0:	b538      	push	{r3, r4, r5, lr}
 801b3d2:	4d06      	ldr	r5, [pc, #24]	@ (801b3ec <_sbrk_r+0x1c>)
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	4604      	mov	r4, r0
 801b3d8:	4608      	mov	r0, r1
 801b3da:	602b      	str	r3, [r5, #0]
 801b3dc:	f7e8 ff74 	bl	80042c8 <_sbrk>
 801b3e0:	1c43      	adds	r3, r0, #1
 801b3e2:	d102      	bne.n	801b3ea <_sbrk_r+0x1a>
 801b3e4:	682b      	ldr	r3, [r5, #0]
 801b3e6:	b103      	cbz	r3, 801b3ea <_sbrk_r+0x1a>
 801b3e8:	6023      	str	r3, [r4, #0]
 801b3ea:	bd38      	pop	{r3, r4, r5, pc}
 801b3ec:	2001404c 	.word	0x2001404c

0801b3f0 <_write_r>:
 801b3f0:	b538      	push	{r3, r4, r5, lr}
 801b3f2:	4d07      	ldr	r5, [pc, #28]	@ (801b410 <_write_r+0x20>)
 801b3f4:	4604      	mov	r4, r0
 801b3f6:	4608      	mov	r0, r1
 801b3f8:	4611      	mov	r1, r2
 801b3fa:	2200      	movs	r2, #0
 801b3fc:	602a      	str	r2, [r5, #0]
 801b3fe:	461a      	mov	r2, r3
 801b400:	f7e8 ff12 	bl	8004228 <_write>
 801b404:	1c43      	adds	r3, r0, #1
 801b406:	d102      	bne.n	801b40e <_write_r+0x1e>
 801b408:	682b      	ldr	r3, [r5, #0]
 801b40a:	b103      	cbz	r3, 801b40e <_write_r+0x1e>
 801b40c:	6023      	str	r3, [r4, #0]
 801b40e:	bd38      	pop	{r3, r4, r5, pc}
 801b410:	2001404c 	.word	0x2001404c

0801b414 <__errno>:
 801b414:	4b01      	ldr	r3, [pc, #4]	@ (801b41c <__errno+0x8>)
 801b416:	6818      	ldr	r0, [r3, #0]
 801b418:	4770      	bx	lr
 801b41a:	bf00      	nop
 801b41c:	200000cc 	.word	0x200000cc

0801b420 <__libc_init_array>:
 801b420:	b570      	push	{r4, r5, r6, lr}
 801b422:	4d0d      	ldr	r5, [pc, #52]	@ (801b458 <__libc_init_array+0x38>)
 801b424:	4c0d      	ldr	r4, [pc, #52]	@ (801b45c <__libc_init_array+0x3c>)
 801b426:	1b64      	subs	r4, r4, r5
 801b428:	10a4      	asrs	r4, r4, #2
 801b42a:	2600      	movs	r6, #0
 801b42c:	42a6      	cmp	r6, r4
 801b42e:	d109      	bne.n	801b444 <__libc_init_array+0x24>
 801b430:	4d0b      	ldr	r5, [pc, #44]	@ (801b460 <__libc_init_array+0x40>)
 801b432:	4c0c      	ldr	r4, [pc, #48]	@ (801b464 <__libc_init_array+0x44>)
 801b434:	f001 fd56 	bl	801cee4 <_init>
 801b438:	1b64      	subs	r4, r4, r5
 801b43a:	10a4      	asrs	r4, r4, #2
 801b43c:	2600      	movs	r6, #0
 801b43e:	42a6      	cmp	r6, r4
 801b440:	d105      	bne.n	801b44e <__libc_init_array+0x2e>
 801b442:	bd70      	pop	{r4, r5, r6, pc}
 801b444:	f855 3b04 	ldr.w	r3, [r5], #4
 801b448:	4798      	blx	r3
 801b44a:	3601      	adds	r6, #1
 801b44c:	e7ee      	b.n	801b42c <__libc_init_array+0xc>
 801b44e:	f855 3b04 	ldr.w	r3, [r5], #4
 801b452:	4798      	blx	r3
 801b454:	3601      	adds	r6, #1
 801b456:	e7f2      	b.n	801b43e <__libc_init_array+0x1e>
 801b458:	0806ca34 	.word	0x0806ca34
 801b45c:	0806ca34 	.word	0x0806ca34
 801b460:	0806ca34 	.word	0x0806ca34
 801b464:	0806ca38 	.word	0x0806ca38

0801b468 <__retarget_lock_init_recursive>:
 801b468:	4770      	bx	lr

0801b46a <__retarget_lock_acquire_recursive>:
 801b46a:	4770      	bx	lr

0801b46c <__retarget_lock_release_recursive>:
 801b46c:	4770      	bx	lr

0801b46e <strcpy>:
 801b46e:	4603      	mov	r3, r0
 801b470:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b474:	f803 2b01 	strb.w	r2, [r3], #1
 801b478:	2a00      	cmp	r2, #0
 801b47a:	d1f9      	bne.n	801b470 <strcpy+0x2>
 801b47c:	4770      	bx	lr

0801b47e <memcpy>:
 801b47e:	440a      	add	r2, r1
 801b480:	4291      	cmp	r1, r2
 801b482:	f100 33ff 	add.w	r3, r0, #4294967295
 801b486:	d100      	bne.n	801b48a <memcpy+0xc>
 801b488:	4770      	bx	lr
 801b48a:	b510      	push	{r4, lr}
 801b48c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b490:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b494:	4291      	cmp	r1, r2
 801b496:	d1f9      	bne.n	801b48c <memcpy+0xe>
 801b498:	bd10      	pop	{r4, pc}
	...

0801b49c <__assert_func>:
 801b49c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b49e:	4614      	mov	r4, r2
 801b4a0:	461a      	mov	r2, r3
 801b4a2:	4b09      	ldr	r3, [pc, #36]	@ (801b4c8 <__assert_func+0x2c>)
 801b4a4:	681b      	ldr	r3, [r3, #0]
 801b4a6:	4605      	mov	r5, r0
 801b4a8:	68d8      	ldr	r0, [r3, #12]
 801b4aa:	b954      	cbnz	r4, 801b4c2 <__assert_func+0x26>
 801b4ac:	4b07      	ldr	r3, [pc, #28]	@ (801b4cc <__assert_func+0x30>)
 801b4ae:	461c      	mov	r4, r3
 801b4b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4b4:	9100      	str	r1, [sp, #0]
 801b4b6:	462b      	mov	r3, r5
 801b4b8:	4905      	ldr	r1, [pc, #20]	@ (801b4d0 <__assert_func+0x34>)
 801b4ba:	f001 fc13 	bl	801cce4 <fiprintf>
 801b4be:	f001 fca7 	bl	801ce10 <abort>
 801b4c2:	4b04      	ldr	r3, [pc, #16]	@ (801b4d4 <__assert_func+0x38>)
 801b4c4:	e7f4      	b.n	801b4b0 <__assert_func+0x14>
 801b4c6:	bf00      	nop
 801b4c8:	200000cc 	.word	0x200000cc
 801b4cc:	0806c843 	.word	0x0806c843
 801b4d0:	0806c815 	.word	0x0806c815
 801b4d4:	0806c808 	.word	0x0806c808

0801b4d8 <quorem>:
 801b4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4dc:	6903      	ldr	r3, [r0, #16]
 801b4de:	690c      	ldr	r4, [r1, #16]
 801b4e0:	42a3      	cmp	r3, r4
 801b4e2:	4607      	mov	r7, r0
 801b4e4:	db7e      	blt.n	801b5e4 <quorem+0x10c>
 801b4e6:	3c01      	subs	r4, #1
 801b4e8:	f101 0814 	add.w	r8, r1, #20
 801b4ec:	00a3      	lsls	r3, r4, #2
 801b4ee:	f100 0514 	add.w	r5, r0, #20
 801b4f2:	9300      	str	r3, [sp, #0]
 801b4f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b4f8:	9301      	str	r3, [sp, #4]
 801b4fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b4fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b502:	3301      	adds	r3, #1
 801b504:	429a      	cmp	r2, r3
 801b506:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b50a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b50e:	d32e      	bcc.n	801b56e <quorem+0x96>
 801b510:	f04f 0a00 	mov.w	sl, #0
 801b514:	46c4      	mov	ip, r8
 801b516:	46ae      	mov	lr, r5
 801b518:	46d3      	mov	fp, sl
 801b51a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b51e:	b298      	uxth	r0, r3
 801b520:	fb06 a000 	mla	r0, r6, r0, sl
 801b524:	0c02      	lsrs	r2, r0, #16
 801b526:	0c1b      	lsrs	r3, r3, #16
 801b528:	fb06 2303 	mla	r3, r6, r3, r2
 801b52c:	f8de 2000 	ldr.w	r2, [lr]
 801b530:	b280      	uxth	r0, r0
 801b532:	b292      	uxth	r2, r2
 801b534:	1a12      	subs	r2, r2, r0
 801b536:	445a      	add	r2, fp
 801b538:	f8de 0000 	ldr.w	r0, [lr]
 801b53c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b540:	b29b      	uxth	r3, r3
 801b542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b546:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b54a:	b292      	uxth	r2, r2
 801b54c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b550:	45e1      	cmp	r9, ip
 801b552:	f84e 2b04 	str.w	r2, [lr], #4
 801b556:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b55a:	d2de      	bcs.n	801b51a <quorem+0x42>
 801b55c:	9b00      	ldr	r3, [sp, #0]
 801b55e:	58eb      	ldr	r3, [r5, r3]
 801b560:	b92b      	cbnz	r3, 801b56e <quorem+0x96>
 801b562:	9b01      	ldr	r3, [sp, #4]
 801b564:	3b04      	subs	r3, #4
 801b566:	429d      	cmp	r5, r3
 801b568:	461a      	mov	r2, r3
 801b56a:	d32f      	bcc.n	801b5cc <quorem+0xf4>
 801b56c:	613c      	str	r4, [r7, #16]
 801b56e:	4638      	mov	r0, r7
 801b570:	f001 f8c2 	bl	801c6f8 <__mcmp>
 801b574:	2800      	cmp	r0, #0
 801b576:	db25      	blt.n	801b5c4 <quorem+0xec>
 801b578:	4629      	mov	r1, r5
 801b57a:	2000      	movs	r0, #0
 801b57c:	f858 2b04 	ldr.w	r2, [r8], #4
 801b580:	f8d1 c000 	ldr.w	ip, [r1]
 801b584:	fa1f fe82 	uxth.w	lr, r2
 801b588:	fa1f f38c 	uxth.w	r3, ip
 801b58c:	eba3 030e 	sub.w	r3, r3, lr
 801b590:	4403      	add	r3, r0
 801b592:	0c12      	lsrs	r2, r2, #16
 801b594:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b598:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5a2:	45c1      	cmp	r9, r8
 801b5a4:	f841 3b04 	str.w	r3, [r1], #4
 801b5a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b5ac:	d2e6      	bcs.n	801b57c <quorem+0xa4>
 801b5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5b6:	b922      	cbnz	r2, 801b5c2 <quorem+0xea>
 801b5b8:	3b04      	subs	r3, #4
 801b5ba:	429d      	cmp	r5, r3
 801b5bc:	461a      	mov	r2, r3
 801b5be:	d30b      	bcc.n	801b5d8 <quorem+0x100>
 801b5c0:	613c      	str	r4, [r7, #16]
 801b5c2:	3601      	adds	r6, #1
 801b5c4:	4630      	mov	r0, r6
 801b5c6:	b003      	add	sp, #12
 801b5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5cc:	6812      	ldr	r2, [r2, #0]
 801b5ce:	3b04      	subs	r3, #4
 801b5d0:	2a00      	cmp	r2, #0
 801b5d2:	d1cb      	bne.n	801b56c <quorem+0x94>
 801b5d4:	3c01      	subs	r4, #1
 801b5d6:	e7c6      	b.n	801b566 <quorem+0x8e>
 801b5d8:	6812      	ldr	r2, [r2, #0]
 801b5da:	3b04      	subs	r3, #4
 801b5dc:	2a00      	cmp	r2, #0
 801b5de:	d1ef      	bne.n	801b5c0 <quorem+0xe8>
 801b5e0:	3c01      	subs	r4, #1
 801b5e2:	e7ea      	b.n	801b5ba <quorem+0xe2>
 801b5e4:	2000      	movs	r0, #0
 801b5e6:	e7ee      	b.n	801b5c6 <quorem+0xee>

0801b5e8 <_dtoa_r>:
 801b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ec:	69c7      	ldr	r7, [r0, #28]
 801b5ee:	b099      	sub	sp, #100	@ 0x64
 801b5f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b5f4:	ec55 4b10 	vmov	r4, r5, d0
 801b5f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 801b5fc:	4683      	mov	fp, r0
 801b5fe:	920e      	str	r2, [sp, #56]	@ 0x38
 801b600:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b602:	b97f      	cbnz	r7, 801b624 <_dtoa_r+0x3c>
 801b604:	2010      	movs	r0, #16
 801b606:	f7fe fe95 	bl	801a334 <malloc>
 801b60a:	4602      	mov	r2, r0
 801b60c:	f8cb 001c 	str.w	r0, [fp, #28]
 801b610:	b920      	cbnz	r0, 801b61c <_dtoa_r+0x34>
 801b612:	4ba7      	ldr	r3, [pc, #668]	@ (801b8b0 <_dtoa_r+0x2c8>)
 801b614:	21ef      	movs	r1, #239	@ 0xef
 801b616:	48a7      	ldr	r0, [pc, #668]	@ (801b8b4 <_dtoa_r+0x2cc>)
 801b618:	f7ff ff40 	bl	801b49c <__assert_func>
 801b61c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b620:	6007      	str	r7, [r0, #0]
 801b622:	60c7      	str	r7, [r0, #12]
 801b624:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b628:	6819      	ldr	r1, [r3, #0]
 801b62a:	b159      	cbz	r1, 801b644 <_dtoa_r+0x5c>
 801b62c:	685a      	ldr	r2, [r3, #4]
 801b62e:	604a      	str	r2, [r1, #4]
 801b630:	2301      	movs	r3, #1
 801b632:	4093      	lsls	r3, r2
 801b634:	608b      	str	r3, [r1, #8]
 801b636:	4658      	mov	r0, fp
 801b638:	f000 fe24 	bl	801c284 <_Bfree>
 801b63c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b640:	2200      	movs	r2, #0
 801b642:	601a      	str	r2, [r3, #0]
 801b644:	1e2b      	subs	r3, r5, #0
 801b646:	bfb9      	ittee	lt
 801b648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b64c:	9303      	strlt	r3, [sp, #12]
 801b64e:	2300      	movge	r3, #0
 801b650:	6033      	strge	r3, [r6, #0]
 801b652:	9f03      	ldr	r7, [sp, #12]
 801b654:	4b98      	ldr	r3, [pc, #608]	@ (801b8b8 <_dtoa_r+0x2d0>)
 801b656:	bfbc      	itt	lt
 801b658:	2201      	movlt	r2, #1
 801b65a:	6032      	strlt	r2, [r6, #0]
 801b65c:	43bb      	bics	r3, r7
 801b65e:	d112      	bne.n	801b686 <_dtoa_r+0x9e>
 801b660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b662:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b666:	6013      	str	r3, [r2, #0]
 801b668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b66c:	4323      	orrs	r3, r4
 801b66e:	f000 854d 	beq.w	801c10c <_dtoa_r+0xb24>
 801b672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801b8cc <_dtoa_r+0x2e4>
 801b678:	2b00      	cmp	r3, #0
 801b67a:	f000 854f 	beq.w	801c11c <_dtoa_r+0xb34>
 801b67e:	f10a 0303 	add.w	r3, sl, #3
 801b682:	f000 bd49 	b.w	801c118 <_dtoa_r+0xb30>
 801b686:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b68a:	2200      	movs	r2, #0
 801b68c:	ec51 0b17 	vmov	r0, r1, d7
 801b690:	2300      	movs	r3, #0
 801b692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b696:	f7e5 fa2f 	bl	8000af8 <__aeabi_dcmpeq>
 801b69a:	4680      	mov	r8, r0
 801b69c:	b158      	cbz	r0, 801b6b6 <_dtoa_r+0xce>
 801b69e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b6a0:	2301      	movs	r3, #1
 801b6a2:	6013      	str	r3, [r2, #0]
 801b6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b6a6:	b113      	cbz	r3, 801b6ae <_dtoa_r+0xc6>
 801b6a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b6aa:	4b84      	ldr	r3, [pc, #528]	@ (801b8bc <_dtoa_r+0x2d4>)
 801b6ac:	6013      	str	r3, [r2, #0]
 801b6ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801b8d0 <_dtoa_r+0x2e8>
 801b6b2:	f000 bd33 	b.w	801c11c <_dtoa_r+0xb34>
 801b6b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b6ba:	aa16      	add	r2, sp, #88	@ 0x58
 801b6bc:	a917      	add	r1, sp, #92	@ 0x5c
 801b6be:	4658      	mov	r0, fp
 801b6c0:	f001 f8ca 	bl	801c858 <__d2b>
 801b6c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b6c8:	4681      	mov	r9, r0
 801b6ca:	2e00      	cmp	r6, #0
 801b6cc:	d077      	beq.n	801b7be <_dtoa_r+0x1d6>
 801b6ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b6d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b6dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b6e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b6e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b6e8:	4619      	mov	r1, r3
 801b6ea:	2200      	movs	r2, #0
 801b6ec:	4b74      	ldr	r3, [pc, #464]	@ (801b8c0 <_dtoa_r+0x2d8>)
 801b6ee:	f7e4 fde3 	bl	80002b8 <__aeabi_dsub>
 801b6f2:	a369      	add	r3, pc, #420	@ (adr r3, 801b898 <_dtoa_r+0x2b0>)
 801b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f8:	f7e4 ff96 	bl	8000628 <__aeabi_dmul>
 801b6fc:	a368      	add	r3, pc, #416	@ (adr r3, 801b8a0 <_dtoa_r+0x2b8>)
 801b6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b702:	f7e4 fddb 	bl	80002bc <__adddf3>
 801b706:	4604      	mov	r4, r0
 801b708:	4630      	mov	r0, r6
 801b70a:	460d      	mov	r5, r1
 801b70c:	f7e4 ff22 	bl	8000554 <__aeabi_i2d>
 801b710:	a365      	add	r3, pc, #404	@ (adr r3, 801b8a8 <_dtoa_r+0x2c0>)
 801b712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b716:	f7e4 ff87 	bl	8000628 <__aeabi_dmul>
 801b71a:	4602      	mov	r2, r0
 801b71c:	460b      	mov	r3, r1
 801b71e:	4620      	mov	r0, r4
 801b720:	4629      	mov	r1, r5
 801b722:	f7e4 fdcb 	bl	80002bc <__adddf3>
 801b726:	4604      	mov	r4, r0
 801b728:	460d      	mov	r5, r1
 801b72a:	f7e5 fa2d 	bl	8000b88 <__aeabi_d2iz>
 801b72e:	2200      	movs	r2, #0
 801b730:	4607      	mov	r7, r0
 801b732:	2300      	movs	r3, #0
 801b734:	4620      	mov	r0, r4
 801b736:	4629      	mov	r1, r5
 801b738:	f7e5 f9e8 	bl	8000b0c <__aeabi_dcmplt>
 801b73c:	b140      	cbz	r0, 801b750 <_dtoa_r+0x168>
 801b73e:	4638      	mov	r0, r7
 801b740:	f7e4 ff08 	bl	8000554 <__aeabi_i2d>
 801b744:	4622      	mov	r2, r4
 801b746:	462b      	mov	r3, r5
 801b748:	f7e5 f9d6 	bl	8000af8 <__aeabi_dcmpeq>
 801b74c:	b900      	cbnz	r0, 801b750 <_dtoa_r+0x168>
 801b74e:	3f01      	subs	r7, #1
 801b750:	2f16      	cmp	r7, #22
 801b752:	d851      	bhi.n	801b7f8 <_dtoa_r+0x210>
 801b754:	4b5b      	ldr	r3, [pc, #364]	@ (801b8c4 <_dtoa_r+0x2dc>)
 801b756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b762:	f7e5 f9d3 	bl	8000b0c <__aeabi_dcmplt>
 801b766:	2800      	cmp	r0, #0
 801b768:	d048      	beq.n	801b7fc <_dtoa_r+0x214>
 801b76a:	3f01      	subs	r7, #1
 801b76c:	2300      	movs	r3, #0
 801b76e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b772:	1b9b      	subs	r3, r3, r6
 801b774:	1e5a      	subs	r2, r3, #1
 801b776:	bf44      	itt	mi
 801b778:	f1c3 0801 	rsbmi	r8, r3, #1
 801b77c:	2300      	movmi	r3, #0
 801b77e:	9208      	str	r2, [sp, #32]
 801b780:	bf54      	ite	pl
 801b782:	f04f 0800 	movpl.w	r8, #0
 801b786:	9308      	strmi	r3, [sp, #32]
 801b788:	2f00      	cmp	r7, #0
 801b78a:	db39      	blt.n	801b800 <_dtoa_r+0x218>
 801b78c:	9b08      	ldr	r3, [sp, #32]
 801b78e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b790:	443b      	add	r3, r7
 801b792:	9308      	str	r3, [sp, #32]
 801b794:	2300      	movs	r3, #0
 801b796:	930a      	str	r3, [sp, #40]	@ 0x28
 801b798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b79a:	2b09      	cmp	r3, #9
 801b79c:	d864      	bhi.n	801b868 <_dtoa_r+0x280>
 801b79e:	2b05      	cmp	r3, #5
 801b7a0:	bfc4      	itt	gt
 801b7a2:	3b04      	subgt	r3, #4
 801b7a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7a8:	f1a3 0302 	sub.w	r3, r3, #2
 801b7ac:	bfcc      	ite	gt
 801b7ae:	2400      	movgt	r4, #0
 801b7b0:	2401      	movle	r4, #1
 801b7b2:	2b03      	cmp	r3, #3
 801b7b4:	d863      	bhi.n	801b87e <_dtoa_r+0x296>
 801b7b6:	e8df f003 	tbb	[pc, r3]
 801b7ba:	372a      	.short	0x372a
 801b7bc:	5535      	.short	0x5535
 801b7be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b7c2:	441e      	add	r6, r3
 801b7c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b7c8:	2b20      	cmp	r3, #32
 801b7ca:	bfc1      	itttt	gt
 801b7cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b7d0:	409f      	lslgt	r7, r3
 801b7d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b7d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 801b7da:	bfd6      	itet	le
 801b7dc:	f1c3 0320 	rsble	r3, r3, #32
 801b7e0:	ea47 0003 	orrgt.w	r0, r7, r3
 801b7e4:	fa04 f003 	lslle.w	r0, r4, r3
 801b7e8:	f7e4 fea4 	bl	8000534 <__aeabi_ui2d>
 801b7ec:	2201      	movs	r2, #1
 801b7ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801b7f2:	3e01      	subs	r6, #1
 801b7f4:	9214      	str	r2, [sp, #80]	@ 0x50
 801b7f6:	e777      	b.n	801b6e8 <_dtoa_r+0x100>
 801b7f8:	2301      	movs	r3, #1
 801b7fa:	e7b8      	b.n	801b76e <_dtoa_r+0x186>
 801b7fc:	9012      	str	r0, [sp, #72]	@ 0x48
 801b7fe:	e7b7      	b.n	801b770 <_dtoa_r+0x188>
 801b800:	427b      	negs	r3, r7
 801b802:	930a      	str	r3, [sp, #40]	@ 0x28
 801b804:	2300      	movs	r3, #0
 801b806:	eba8 0807 	sub.w	r8, r8, r7
 801b80a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b80c:	e7c4      	b.n	801b798 <_dtoa_r+0x1b0>
 801b80e:	2300      	movs	r3, #0
 801b810:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b814:	2b00      	cmp	r3, #0
 801b816:	dc35      	bgt.n	801b884 <_dtoa_r+0x29c>
 801b818:	2301      	movs	r3, #1
 801b81a:	9300      	str	r3, [sp, #0]
 801b81c:	9307      	str	r3, [sp, #28]
 801b81e:	461a      	mov	r2, r3
 801b820:	920e      	str	r2, [sp, #56]	@ 0x38
 801b822:	e00b      	b.n	801b83c <_dtoa_r+0x254>
 801b824:	2301      	movs	r3, #1
 801b826:	e7f3      	b.n	801b810 <_dtoa_r+0x228>
 801b828:	2300      	movs	r3, #0
 801b82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b82e:	18fb      	adds	r3, r7, r3
 801b830:	9300      	str	r3, [sp, #0]
 801b832:	3301      	adds	r3, #1
 801b834:	2b01      	cmp	r3, #1
 801b836:	9307      	str	r3, [sp, #28]
 801b838:	bfb8      	it	lt
 801b83a:	2301      	movlt	r3, #1
 801b83c:	f8db 001c 	ldr.w	r0, [fp, #28]
 801b840:	2100      	movs	r1, #0
 801b842:	2204      	movs	r2, #4
 801b844:	f102 0514 	add.w	r5, r2, #20
 801b848:	429d      	cmp	r5, r3
 801b84a:	d91f      	bls.n	801b88c <_dtoa_r+0x2a4>
 801b84c:	6041      	str	r1, [r0, #4]
 801b84e:	4658      	mov	r0, fp
 801b850:	f000 fcd8 	bl	801c204 <_Balloc>
 801b854:	4682      	mov	sl, r0
 801b856:	2800      	cmp	r0, #0
 801b858:	d13c      	bne.n	801b8d4 <_dtoa_r+0x2ec>
 801b85a:	4b1b      	ldr	r3, [pc, #108]	@ (801b8c8 <_dtoa_r+0x2e0>)
 801b85c:	4602      	mov	r2, r0
 801b85e:	f240 11af 	movw	r1, #431	@ 0x1af
 801b862:	e6d8      	b.n	801b616 <_dtoa_r+0x2e>
 801b864:	2301      	movs	r3, #1
 801b866:	e7e0      	b.n	801b82a <_dtoa_r+0x242>
 801b868:	2401      	movs	r4, #1
 801b86a:	2300      	movs	r3, #0
 801b86c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b86e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b870:	f04f 33ff 	mov.w	r3, #4294967295
 801b874:	9300      	str	r3, [sp, #0]
 801b876:	9307      	str	r3, [sp, #28]
 801b878:	2200      	movs	r2, #0
 801b87a:	2312      	movs	r3, #18
 801b87c:	e7d0      	b.n	801b820 <_dtoa_r+0x238>
 801b87e:	2301      	movs	r3, #1
 801b880:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b882:	e7f5      	b.n	801b870 <_dtoa_r+0x288>
 801b884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b886:	9300      	str	r3, [sp, #0]
 801b888:	9307      	str	r3, [sp, #28]
 801b88a:	e7d7      	b.n	801b83c <_dtoa_r+0x254>
 801b88c:	3101      	adds	r1, #1
 801b88e:	0052      	lsls	r2, r2, #1
 801b890:	e7d8      	b.n	801b844 <_dtoa_r+0x25c>
 801b892:	bf00      	nop
 801b894:	f3af 8000 	nop.w
 801b898:	636f4361 	.word	0x636f4361
 801b89c:	3fd287a7 	.word	0x3fd287a7
 801b8a0:	8b60c8b3 	.word	0x8b60c8b3
 801b8a4:	3fc68a28 	.word	0x3fc68a28
 801b8a8:	509f79fb 	.word	0x509f79fb
 801b8ac:	3fd34413 	.word	0x3fd34413
 801b8b0:	0806c664 	.word	0x0806c664
 801b8b4:	0806c851 	.word	0x0806c851
 801b8b8:	7ff00000 	.word	0x7ff00000
 801b8bc:	0806c7e5 	.word	0x0806c7e5
 801b8c0:	3ff80000 	.word	0x3ff80000
 801b8c4:	0806c948 	.word	0x0806c948
 801b8c8:	0806c8a9 	.word	0x0806c8a9
 801b8cc:	0806c84d 	.word	0x0806c84d
 801b8d0:	0806c7e4 	.word	0x0806c7e4
 801b8d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b8d8:	6018      	str	r0, [r3, #0]
 801b8da:	9b07      	ldr	r3, [sp, #28]
 801b8dc:	2b0e      	cmp	r3, #14
 801b8de:	f200 80a4 	bhi.w	801ba2a <_dtoa_r+0x442>
 801b8e2:	2c00      	cmp	r4, #0
 801b8e4:	f000 80a1 	beq.w	801ba2a <_dtoa_r+0x442>
 801b8e8:	2f00      	cmp	r7, #0
 801b8ea:	dd33      	ble.n	801b954 <_dtoa_r+0x36c>
 801b8ec:	4bad      	ldr	r3, [pc, #692]	@ (801bba4 <_dtoa_r+0x5bc>)
 801b8ee:	f007 020f 	and.w	r2, r7, #15
 801b8f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b8f6:	ed93 7b00 	vldr	d7, [r3]
 801b8fa:	05f8      	lsls	r0, r7, #23
 801b8fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 801b900:	ea4f 1427 	mov.w	r4, r7, asr #4
 801b904:	d516      	bpl.n	801b934 <_dtoa_r+0x34c>
 801b906:	4ba8      	ldr	r3, [pc, #672]	@ (801bba8 <_dtoa_r+0x5c0>)
 801b908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b90c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b910:	f7e4 ffb4 	bl	800087c <__aeabi_ddiv>
 801b914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b918:	f004 040f 	and.w	r4, r4, #15
 801b91c:	2603      	movs	r6, #3
 801b91e:	4da2      	ldr	r5, [pc, #648]	@ (801bba8 <_dtoa_r+0x5c0>)
 801b920:	b954      	cbnz	r4, 801b938 <_dtoa_r+0x350>
 801b922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b92a:	f7e4 ffa7 	bl	800087c <__aeabi_ddiv>
 801b92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b932:	e028      	b.n	801b986 <_dtoa_r+0x39e>
 801b934:	2602      	movs	r6, #2
 801b936:	e7f2      	b.n	801b91e <_dtoa_r+0x336>
 801b938:	07e1      	lsls	r1, r4, #31
 801b93a:	d508      	bpl.n	801b94e <_dtoa_r+0x366>
 801b93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b940:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b944:	f7e4 fe70 	bl	8000628 <__aeabi_dmul>
 801b948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b94c:	3601      	adds	r6, #1
 801b94e:	1064      	asrs	r4, r4, #1
 801b950:	3508      	adds	r5, #8
 801b952:	e7e5      	b.n	801b920 <_dtoa_r+0x338>
 801b954:	f000 80d2 	beq.w	801bafc <_dtoa_r+0x514>
 801b958:	427c      	negs	r4, r7
 801b95a:	4b92      	ldr	r3, [pc, #584]	@ (801bba4 <_dtoa_r+0x5bc>)
 801b95c:	4d92      	ldr	r5, [pc, #584]	@ (801bba8 <_dtoa_r+0x5c0>)
 801b95e:	f004 020f 	and.w	r2, r4, #15
 801b962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b96a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b96e:	f7e4 fe5b 	bl	8000628 <__aeabi_dmul>
 801b972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b976:	1124      	asrs	r4, r4, #4
 801b978:	2300      	movs	r3, #0
 801b97a:	2602      	movs	r6, #2
 801b97c:	2c00      	cmp	r4, #0
 801b97e:	f040 80b2 	bne.w	801bae6 <_dtoa_r+0x4fe>
 801b982:	2b00      	cmp	r3, #0
 801b984:	d1d3      	bne.n	801b92e <_dtoa_r+0x346>
 801b986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	f000 80b7 	beq.w	801bb00 <_dtoa_r+0x518>
 801b992:	4b86      	ldr	r3, [pc, #536]	@ (801bbac <_dtoa_r+0x5c4>)
 801b994:	2200      	movs	r2, #0
 801b996:	4620      	mov	r0, r4
 801b998:	4629      	mov	r1, r5
 801b99a:	f7e5 f8b7 	bl	8000b0c <__aeabi_dcmplt>
 801b99e:	2800      	cmp	r0, #0
 801b9a0:	f000 80ae 	beq.w	801bb00 <_dtoa_r+0x518>
 801b9a4:	9b07      	ldr	r3, [sp, #28]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	f000 80aa 	beq.w	801bb00 <_dtoa_r+0x518>
 801b9ac:	9b00      	ldr	r3, [sp, #0]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	dd37      	ble.n	801ba22 <_dtoa_r+0x43a>
 801b9b2:	1e7b      	subs	r3, r7, #1
 801b9b4:	9304      	str	r3, [sp, #16]
 801b9b6:	4620      	mov	r0, r4
 801b9b8:	4b7d      	ldr	r3, [pc, #500]	@ (801bbb0 <_dtoa_r+0x5c8>)
 801b9ba:	2200      	movs	r2, #0
 801b9bc:	4629      	mov	r1, r5
 801b9be:	f7e4 fe33 	bl	8000628 <__aeabi_dmul>
 801b9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9c6:	9c00      	ldr	r4, [sp, #0]
 801b9c8:	3601      	adds	r6, #1
 801b9ca:	4630      	mov	r0, r6
 801b9cc:	f7e4 fdc2 	bl	8000554 <__aeabi_i2d>
 801b9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b9d4:	f7e4 fe28 	bl	8000628 <__aeabi_dmul>
 801b9d8:	4b76      	ldr	r3, [pc, #472]	@ (801bbb4 <_dtoa_r+0x5cc>)
 801b9da:	2200      	movs	r2, #0
 801b9dc:	f7e4 fc6e 	bl	80002bc <__adddf3>
 801b9e0:	4605      	mov	r5, r0
 801b9e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b9e6:	2c00      	cmp	r4, #0
 801b9e8:	f040 808d 	bne.w	801bb06 <_dtoa_r+0x51e>
 801b9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9f0:	4b71      	ldr	r3, [pc, #452]	@ (801bbb8 <_dtoa_r+0x5d0>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	f7e4 fc60 	bl	80002b8 <__aeabi_dsub>
 801b9f8:	4602      	mov	r2, r0
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ba00:	462a      	mov	r2, r5
 801ba02:	4633      	mov	r3, r6
 801ba04:	f7e5 f8a0 	bl	8000b48 <__aeabi_dcmpgt>
 801ba08:	2800      	cmp	r0, #0
 801ba0a:	f040 828b 	bne.w	801bf24 <_dtoa_r+0x93c>
 801ba0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba12:	462a      	mov	r2, r5
 801ba14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ba18:	f7e5 f878 	bl	8000b0c <__aeabi_dcmplt>
 801ba1c:	2800      	cmp	r0, #0
 801ba1e:	f040 8128 	bne.w	801bc72 <_dtoa_r+0x68a>
 801ba22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801ba26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ba2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	f2c0 815a 	blt.w	801bce6 <_dtoa_r+0x6fe>
 801ba32:	2f0e      	cmp	r7, #14
 801ba34:	f300 8157 	bgt.w	801bce6 <_dtoa_r+0x6fe>
 801ba38:	4b5a      	ldr	r3, [pc, #360]	@ (801bba4 <_dtoa_r+0x5bc>)
 801ba3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ba3e:	ed93 7b00 	vldr	d7, [r3]
 801ba42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	ed8d 7b00 	vstr	d7, [sp]
 801ba4a:	da03      	bge.n	801ba54 <_dtoa_r+0x46c>
 801ba4c:	9b07      	ldr	r3, [sp, #28]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	f340 8101 	ble.w	801bc56 <_dtoa_r+0x66e>
 801ba54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ba58:	4656      	mov	r6, sl
 801ba5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba5e:	4620      	mov	r0, r4
 801ba60:	4629      	mov	r1, r5
 801ba62:	f7e4 ff0b 	bl	800087c <__aeabi_ddiv>
 801ba66:	f7e5 f88f 	bl	8000b88 <__aeabi_d2iz>
 801ba6a:	4680      	mov	r8, r0
 801ba6c:	f7e4 fd72 	bl	8000554 <__aeabi_i2d>
 801ba70:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ba74:	f7e4 fdd8 	bl	8000628 <__aeabi_dmul>
 801ba78:	4602      	mov	r2, r0
 801ba7a:	460b      	mov	r3, r1
 801ba7c:	4620      	mov	r0, r4
 801ba7e:	4629      	mov	r1, r5
 801ba80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ba84:	f7e4 fc18 	bl	80002b8 <__aeabi_dsub>
 801ba88:	f806 4b01 	strb.w	r4, [r6], #1
 801ba8c:	9d07      	ldr	r5, [sp, #28]
 801ba8e:	eba6 040a 	sub.w	r4, r6, sl
 801ba92:	42a5      	cmp	r5, r4
 801ba94:	4602      	mov	r2, r0
 801ba96:	460b      	mov	r3, r1
 801ba98:	f040 8117 	bne.w	801bcca <_dtoa_r+0x6e2>
 801ba9c:	f7e4 fc0e 	bl	80002bc <__adddf3>
 801baa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801baa4:	4604      	mov	r4, r0
 801baa6:	460d      	mov	r5, r1
 801baa8:	f7e5 f84e 	bl	8000b48 <__aeabi_dcmpgt>
 801baac:	2800      	cmp	r0, #0
 801baae:	f040 80f9 	bne.w	801bca4 <_dtoa_r+0x6bc>
 801bab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bab6:	4620      	mov	r0, r4
 801bab8:	4629      	mov	r1, r5
 801baba:	f7e5 f81d 	bl	8000af8 <__aeabi_dcmpeq>
 801babe:	b118      	cbz	r0, 801bac8 <_dtoa_r+0x4e0>
 801bac0:	f018 0f01 	tst.w	r8, #1
 801bac4:	f040 80ee 	bne.w	801bca4 <_dtoa_r+0x6bc>
 801bac8:	4649      	mov	r1, r9
 801baca:	4658      	mov	r0, fp
 801bacc:	f000 fbda 	bl	801c284 <_Bfree>
 801bad0:	2300      	movs	r3, #0
 801bad2:	7033      	strb	r3, [r6, #0]
 801bad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bad6:	3701      	adds	r7, #1
 801bad8:	601f      	str	r7, [r3, #0]
 801bada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801badc:	2b00      	cmp	r3, #0
 801bade:	f000 831d 	beq.w	801c11c <_dtoa_r+0xb34>
 801bae2:	601e      	str	r6, [r3, #0]
 801bae4:	e31a      	b.n	801c11c <_dtoa_r+0xb34>
 801bae6:	07e2      	lsls	r2, r4, #31
 801bae8:	d505      	bpl.n	801baf6 <_dtoa_r+0x50e>
 801baea:	e9d5 2300 	ldrd	r2, r3, [r5]
 801baee:	f7e4 fd9b 	bl	8000628 <__aeabi_dmul>
 801baf2:	3601      	adds	r6, #1
 801baf4:	2301      	movs	r3, #1
 801baf6:	1064      	asrs	r4, r4, #1
 801baf8:	3508      	adds	r5, #8
 801bafa:	e73f      	b.n	801b97c <_dtoa_r+0x394>
 801bafc:	2602      	movs	r6, #2
 801bafe:	e742      	b.n	801b986 <_dtoa_r+0x39e>
 801bb00:	9c07      	ldr	r4, [sp, #28]
 801bb02:	9704      	str	r7, [sp, #16]
 801bb04:	e761      	b.n	801b9ca <_dtoa_r+0x3e2>
 801bb06:	4b27      	ldr	r3, [pc, #156]	@ (801bba4 <_dtoa_r+0x5bc>)
 801bb08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bb0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bb0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bb12:	4454      	add	r4, sl
 801bb14:	2900      	cmp	r1, #0
 801bb16:	d053      	beq.n	801bbc0 <_dtoa_r+0x5d8>
 801bb18:	4928      	ldr	r1, [pc, #160]	@ (801bbbc <_dtoa_r+0x5d4>)
 801bb1a:	2000      	movs	r0, #0
 801bb1c:	f7e4 feae 	bl	800087c <__aeabi_ddiv>
 801bb20:	4633      	mov	r3, r6
 801bb22:	462a      	mov	r2, r5
 801bb24:	f7e4 fbc8 	bl	80002b8 <__aeabi_dsub>
 801bb28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bb2c:	4656      	mov	r6, sl
 801bb2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb32:	f7e5 f829 	bl	8000b88 <__aeabi_d2iz>
 801bb36:	4605      	mov	r5, r0
 801bb38:	f7e4 fd0c 	bl	8000554 <__aeabi_i2d>
 801bb3c:	4602      	mov	r2, r0
 801bb3e:	460b      	mov	r3, r1
 801bb40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb44:	f7e4 fbb8 	bl	80002b8 <__aeabi_dsub>
 801bb48:	3530      	adds	r5, #48	@ 0x30
 801bb4a:	4602      	mov	r2, r0
 801bb4c:	460b      	mov	r3, r1
 801bb4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bb52:	f806 5b01 	strb.w	r5, [r6], #1
 801bb56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bb5a:	f7e4 ffd7 	bl	8000b0c <__aeabi_dcmplt>
 801bb5e:	2800      	cmp	r0, #0
 801bb60:	d171      	bne.n	801bc46 <_dtoa_r+0x65e>
 801bb62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb66:	4911      	ldr	r1, [pc, #68]	@ (801bbac <_dtoa_r+0x5c4>)
 801bb68:	2000      	movs	r0, #0
 801bb6a:	f7e4 fba5 	bl	80002b8 <__aeabi_dsub>
 801bb6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bb72:	f7e4 ffcb 	bl	8000b0c <__aeabi_dcmplt>
 801bb76:	2800      	cmp	r0, #0
 801bb78:	f040 8095 	bne.w	801bca6 <_dtoa_r+0x6be>
 801bb7c:	42a6      	cmp	r6, r4
 801bb7e:	f43f af50 	beq.w	801ba22 <_dtoa_r+0x43a>
 801bb82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bb86:	4b0a      	ldr	r3, [pc, #40]	@ (801bbb0 <_dtoa_r+0x5c8>)
 801bb88:	2200      	movs	r2, #0
 801bb8a:	f7e4 fd4d 	bl	8000628 <__aeabi_dmul>
 801bb8e:	4b08      	ldr	r3, [pc, #32]	@ (801bbb0 <_dtoa_r+0x5c8>)
 801bb90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bb94:	2200      	movs	r2, #0
 801bb96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb9a:	f7e4 fd45 	bl	8000628 <__aeabi_dmul>
 801bb9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bba2:	e7c4      	b.n	801bb2e <_dtoa_r+0x546>
 801bba4:	0806c948 	.word	0x0806c948
 801bba8:	0806c920 	.word	0x0806c920
 801bbac:	3ff00000 	.word	0x3ff00000
 801bbb0:	40240000 	.word	0x40240000
 801bbb4:	401c0000 	.word	0x401c0000
 801bbb8:	40140000 	.word	0x40140000
 801bbbc:	3fe00000 	.word	0x3fe00000
 801bbc0:	4631      	mov	r1, r6
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f7e4 fd30 	bl	8000628 <__aeabi_dmul>
 801bbc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bbcc:	9415      	str	r4, [sp, #84]	@ 0x54
 801bbce:	4656      	mov	r6, sl
 801bbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbd4:	f7e4 ffd8 	bl	8000b88 <__aeabi_d2iz>
 801bbd8:	4605      	mov	r5, r0
 801bbda:	f7e4 fcbb 	bl	8000554 <__aeabi_i2d>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	460b      	mov	r3, r1
 801bbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bbe6:	f7e4 fb67 	bl	80002b8 <__aeabi_dsub>
 801bbea:	3530      	adds	r5, #48	@ 0x30
 801bbec:	f806 5b01 	strb.w	r5, [r6], #1
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	460b      	mov	r3, r1
 801bbf4:	42a6      	cmp	r6, r4
 801bbf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bbfa:	f04f 0200 	mov.w	r2, #0
 801bbfe:	d124      	bne.n	801bc4a <_dtoa_r+0x662>
 801bc00:	4bac      	ldr	r3, [pc, #688]	@ (801beb4 <_dtoa_r+0x8cc>)
 801bc02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bc06:	f7e4 fb59 	bl	80002bc <__adddf3>
 801bc0a:	4602      	mov	r2, r0
 801bc0c:	460b      	mov	r3, r1
 801bc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc12:	f7e4 ff99 	bl	8000b48 <__aeabi_dcmpgt>
 801bc16:	2800      	cmp	r0, #0
 801bc18:	d145      	bne.n	801bca6 <_dtoa_r+0x6be>
 801bc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bc1e:	49a5      	ldr	r1, [pc, #660]	@ (801beb4 <_dtoa_r+0x8cc>)
 801bc20:	2000      	movs	r0, #0
 801bc22:	f7e4 fb49 	bl	80002b8 <__aeabi_dsub>
 801bc26:	4602      	mov	r2, r0
 801bc28:	460b      	mov	r3, r1
 801bc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc2e:	f7e4 ff6d 	bl	8000b0c <__aeabi_dcmplt>
 801bc32:	2800      	cmp	r0, #0
 801bc34:	f43f aef5 	beq.w	801ba22 <_dtoa_r+0x43a>
 801bc38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801bc3a:	1e73      	subs	r3, r6, #1
 801bc3c:	9315      	str	r3, [sp, #84]	@ 0x54
 801bc3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bc42:	2b30      	cmp	r3, #48	@ 0x30
 801bc44:	d0f8      	beq.n	801bc38 <_dtoa_r+0x650>
 801bc46:	9f04      	ldr	r7, [sp, #16]
 801bc48:	e73e      	b.n	801bac8 <_dtoa_r+0x4e0>
 801bc4a:	4b9b      	ldr	r3, [pc, #620]	@ (801beb8 <_dtoa_r+0x8d0>)
 801bc4c:	f7e4 fcec 	bl	8000628 <__aeabi_dmul>
 801bc50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc54:	e7bc      	b.n	801bbd0 <_dtoa_r+0x5e8>
 801bc56:	d10c      	bne.n	801bc72 <_dtoa_r+0x68a>
 801bc58:	4b98      	ldr	r3, [pc, #608]	@ (801bebc <_dtoa_r+0x8d4>)
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bc60:	f7e4 fce2 	bl	8000628 <__aeabi_dmul>
 801bc64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bc68:	f7e4 ff64 	bl	8000b34 <__aeabi_dcmpge>
 801bc6c:	2800      	cmp	r0, #0
 801bc6e:	f000 8157 	beq.w	801bf20 <_dtoa_r+0x938>
 801bc72:	2400      	movs	r4, #0
 801bc74:	4625      	mov	r5, r4
 801bc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc78:	43db      	mvns	r3, r3
 801bc7a:	9304      	str	r3, [sp, #16]
 801bc7c:	4656      	mov	r6, sl
 801bc7e:	2700      	movs	r7, #0
 801bc80:	4621      	mov	r1, r4
 801bc82:	4658      	mov	r0, fp
 801bc84:	f000 fafe 	bl	801c284 <_Bfree>
 801bc88:	2d00      	cmp	r5, #0
 801bc8a:	d0dc      	beq.n	801bc46 <_dtoa_r+0x65e>
 801bc8c:	b12f      	cbz	r7, 801bc9a <_dtoa_r+0x6b2>
 801bc8e:	42af      	cmp	r7, r5
 801bc90:	d003      	beq.n	801bc9a <_dtoa_r+0x6b2>
 801bc92:	4639      	mov	r1, r7
 801bc94:	4658      	mov	r0, fp
 801bc96:	f000 faf5 	bl	801c284 <_Bfree>
 801bc9a:	4629      	mov	r1, r5
 801bc9c:	4658      	mov	r0, fp
 801bc9e:	f000 faf1 	bl	801c284 <_Bfree>
 801bca2:	e7d0      	b.n	801bc46 <_dtoa_r+0x65e>
 801bca4:	9704      	str	r7, [sp, #16]
 801bca6:	4633      	mov	r3, r6
 801bca8:	461e      	mov	r6, r3
 801bcaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bcae:	2a39      	cmp	r2, #57	@ 0x39
 801bcb0:	d107      	bne.n	801bcc2 <_dtoa_r+0x6da>
 801bcb2:	459a      	cmp	sl, r3
 801bcb4:	d1f8      	bne.n	801bca8 <_dtoa_r+0x6c0>
 801bcb6:	9a04      	ldr	r2, [sp, #16]
 801bcb8:	3201      	adds	r2, #1
 801bcba:	9204      	str	r2, [sp, #16]
 801bcbc:	2230      	movs	r2, #48	@ 0x30
 801bcbe:	f88a 2000 	strb.w	r2, [sl]
 801bcc2:	781a      	ldrb	r2, [r3, #0]
 801bcc4:	3201      	adds	r2, #1
 801bcc6:	701a      	strb	r2, [r3, #0]
 801bcc8:	e7bd      	b.n	801bc46 <_dtoa_r+0x65e>
 801bcca:	4b7b      	ldr	r3, [pc, #492]	@ (801beb8 <_dtoa_r+0x8d0>)
 801bccc:	2200      	movs	r2, #0
 801bcce:	f7e4 fcab 	bl	8000628 <__aeabi_dmul>
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	4604      	mov	r4, r0
 801bcd8:	460d      	mov	r5, r1
 801bcda:	f7e4 ff0d 	bl	8000af8 <__aeabi_dcmpeq>
 801bcde:	2800      	cmp	r0, #0
 801bce0:	f43f aebb 	beq.w	801ba5a <_dtoa_r+0x472>
 801bce4:	e6f0      	b.n	801bac8 <_dtoa_r+0x4e0>
 801bce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bce8:	2a00      	cmp	r2, #0
 801bcea:	f000 80db 	beq.w	801bea4 <_dtoa_r+0x8bc>
 801bcee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bcf0:	2a01      	cmp	r2, #1
 801bcf2:	f300 80bf 	bgt.w	801be74 <_dtoa_r+0x88c>
 801bcf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bcf8:	2a00      	cmp	r2, #0
 801bcfa:	f000 80b7 	beq.w	801be6c <_dtoa_r+0x884>
 801bcfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bd02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bd04:	4646      	mov	r6, r8
 801bd06:	9a08      	ldr	r2, [sp, #32]
 801bd08:	2101      	movs	r1, #1
 801bd0a:	441a      	add	r2, r3
 801bd0c:	4658      	mov	r0, fp
 801bd0e:	4498      	add	r8, r3
 801bd10:	9208      	str	r2, [sp, #32]
 801bd12:	f000 fb6b 	bl	801c3ec <__i2b>
 801bd16:	4605      	mov	r5, r0
 801bd18:	b15e      	cbz	r6, 801bd32 <_dtoa_r+0x74a>
 801bd1a:	9b08      	ldr	r3, [sp, #32]
 801bd1c:	2b00      	cmp	r3, #0
 801bd1e:	dd08      	ble.n	801bd32 <_dtoa_r+0x74a>
 801bd20:	42b3      	cmp	r3, r6
 801bd22:	9a08      	ldr	r2, [sp, #32]
 801bd24:	bfa8      	it	ge
 801bd26:	4633      	movge	r3, r6
 801bd28:	eba8 0803 	sub.w	r8, r8, r3
 801bd2c:	1af6      	subs	r6, r6, r3
 801bd2e:	1ad3      	subs	r3, r2, r3
 801bd30:	9308      	str	r3, [sp, #32]
 801bd32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd34:	b1f3      	cbz	r3, 801bd74 <_dtoa_r+0x78c>
 801bd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	f000 80b7 	beq.w	801beac <_dtoa_r+0x8c4>
 801bd3e:	b18c      	cbz	r4, 801bd64 <_dtoa_r+0x77c>
 801bd40:	4629      	mov	r1, r5
 801bd42:	4622      	mov	r2, r4
 801bd44:	4658      	mov	r0, fp
 801bd46:	f000 fc11 	bl	801c56c <__pow5mult>
 801bd4a:	464a      	mov	r2, r9
 801bd4c:	4601      	mov	r1, r0
 801bd4e:	4605      	mov	r5, r0
 801bd50:	4658      	mov	r0, fp
 801bd52:	f000 fb61 	bl	801c418 <__multiply>
 801bd56:	4649      	mov	r1, r9
 801bd58:	9004      	str	r0, [sp, #16]
 801bd5a:	4658      	mov	r0, fp
 801bd5c:	f000 fa92 	bl	801c284 <_Bfree>
 801bd60:	9b04      	ldr	r3, [sp, #16]
 801bd62:	4699      	mov	r9, r3
 801bd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd66:	1b1a      	subs	r2, r3, r4
 801bd68:	d004      	beq.n	801bd74 <_dtoa_r+0x78c>
 801bd6a:	4649      	mov	r1, r9
 801bd6c:	4658      	mov	r0, fp
 801bd6e:	f000 fbfd 	bl	801c56c <__pow5mult>
 801bd72:	4681      	mov	r9, r0
 801bd74:	2101      	movs	r1, #1
 801bd76:	4658      	mov	r0, fp
 801bd78:	f000 fb38 	bl	801c3ec <__i2b>
 801bd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd7e:	4604      	mov	r4, r0
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	f000 81cf 	beq.w	801c124 <_dtoa_r+0xb3c>
 801bd86:	461a      	mov	r2, r3
 801bd88:	4601      	mov	r1, r0
 801bd8a:	4658      	mov	r0, fp
 801bd8c:	f000 fbee 	bl	801c56c <__pow5mult>
 801bd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd92:	2b01      	cmp	r3, #1
 801bd94:	4604      	mov	r4, r0
 801bd96:	f300 8095 	bgt.w	801bec4 <_dtoa_r+0x8dc>
 801bd9a:	9b02      	ldr	r3, [sp, #8]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	f040 8087 	bne.w	801beb0 <_dtoa_r+0x8c8>
 801bda2:	9b03      	ldr	r3, [sp, #12]
 801bda4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f040 8089 	bne.w	801bec0 <_dtoa_r+0x8d8>
 801bdae:	9b03      	ldr	r3, [sp, #12]
 801bdb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bdb4:	0d1b      	lsrs	r3, r3, #20
 801bdb6:	051b      	lsls	r3, r3, #20
 801bdb8:	b12b      	cbz	r3, 801bdc6 <_dtoa_r+0x7de>
 801bdba:	9b08      	ldr	r3, [sp, #32]
 801bdbc:	3301      	adds	r3, #1
 801bdbe:	9308      	str	r3, [sp, #32]
 801bdc0:	f108 0801 	add.w	r8, r8, #1
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	f000 81b0 	beq.w	801c130 <_dtoa_r+0xb48>
 801bdd0:	6923      	ldr	r3, [r4, #16]
 801bdd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bdd6:	6918      	ldr	r0, [r3, #16]
 801bdd8:	f000 fabc 	bl	801c354 <__hi0bits>
 801bddc:	f1c0 0020 	rsb	r0, r0, #32
 801bde0:	9b08      	ldr	r3, [sp, #32]
 801bde2:	4418      	add	r0, r3
 801bde4:	f010 001f 	ands.w	r0, r0, #31
 801bde8:	d077      	beq.n	801beda <_dtoa_r+0x8f2>
 801bdea:	f1c0 0320 	rsb	r3, r0, #32
 801bdee:	2b04      	cmp	r3, #4
 801bdf0:	dd6b      	ble.n	801beca <_dtoa_r+0x8e2>
 801bdf2:	9b08      	ldr	r3, [sp, #32]
 801bdf4:	f1c0 001c 	rsb	r0, r0, #28
 801bdf8:	4403      	add	r3, r0
 801bdfa:	4480      	add	r8, r0
 801bdfc:	4406      	add	r6, r0
 801bdfe:	9308      	str	r3, [sp, #32]
 801be00:	f1b8 0f00 	cmp.w	r8, #0
 801be04:	dd05      	ble.n	801be12 <_dtoa_r+0x82a>
 801be06:	4649      	mov	r1, r9
 801be08:	4642      	mov	r2, r8
 801be0a:	4658      	mov	r0, fp
 801be0c:	f000 fc08 	bl	801c620 <__lshift>
 801be10:	4681      	mov	r9, r0
 801be12:	9b08      	ldr	r3, [sp, #32]
 801be14:	2b00      	cmp	r3, #0
 801be16:	dd05      	ble.n	801be24 <_dtoa_r+0x83c>
 801be18:	4621      	mov	r1, r4
 801be1a:	461a      	mov	r2, r3
 801be1c:	4658      	mov	r0, fp
 801be1e:	f000 fbff 	bl	801c620 <__lshift>
 801be22:	4604      	mov	r4, r0
 801be24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801be26:	2b00      	cmp	r3, #0
 801be28:	d059      	beq.n	801bede <_dtoa_r+0x8f6>
 801be2a:	4621      	mov	r1, r4
 801be2c:	4648      	mov	r0, r9
 801be2e:	f000 fc63 	bl	801c6f8 <__mcmp>
 801be32:	2800      	cmp	r0, #0
 801be34:	da53      	bge.n	801bede <_dtoa_r+0x8f6>
 801be36:	1e7b      	subs	r3, r7, #1
 801be38:	9304      	str	r3, [sp, #16]
 801be3a:	4649      	mov	r1, r9
 801be3c:	2300      	movs	r3, #0
 801be3e:	220a      	movs	r2, #10
 801be40:	4658      	mov	r0, fp
 801be42:	f000 fa41 	bl	801c2c8 <__multadd>
 801be46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801be48:	4681      	mov	r9, r0
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	f000 8172 	beq.w	801c134 <_dtoa_r+0xb4c>
 801be50:	2300      	movs	r3, #0
 801be52:	4629      	mov	r1, r5
 801be54:	220a      	movs	r2, #10
 801be56:	4658      	mov	r0, fp
 801be58:	f000 fa36 	bl	801c2c8 <__multadd>
 801be5c:	9b00      	ldr	r3, [sp, #0]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	4605      	mov	r5, r0
 801be62:	dc67      	bgt.n	801bf34 <_dtoa_r+0x94c>
 801be64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801be66:	2b02      	cmp	r3, #2
 801be68:	dc41      	bgt.n	801beee <_dtoa_r+0x906>
 801be6a:	e063      	b.n	801bf34 <_dtoa_r+0x94c>
 801be6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801be6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801be72:	e746      	b.n	801bd02 <_dtoa_r+0x71a>
 801be74:	9b07      	ldr	r3, [sp, #28]
 801be76:	1e5c      	subs	r4, r3, #1
 801be78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be7a:	42a3      	cmp	r3, r4
 801be7c:	bfbf      	itttt	lt
 801be7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801be80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801be82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801be84:	1ae3      	sublt	r3, r4, r3
 801be86:	bfb4      	ite	lt
 801be88:	18d2      	addlt	r2, r2, r3
 801be8a:	1b1c      	subge	r4, r3, r4
 801be8c:	9b07      	ldr	r3, [sp, #28]
 801be8e:	bfbc      	itt	lt
 801be90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801be92:	2400      	movlt	r4, #0
 801be94:	2b00      	cmp	r3, #0
 801be96:	bfb5      	itete	lt
 801be98:	eba8 0603 	sublt.w	r6, r8, r3
 801be9c:	9b07      	ldrge	r3, [sp, #28]
 801be9e:	2300      	movlt	r3, #0
 801bea0:	4646      	movge	r6, r8
 801bea2:	e730      	b.n	801bd06 <_dtoa_r+0x71e>
 801bea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801bea8:	4646      	mov	r6, r8
 801beaa:	e735      	b.n	801bd18 <_dtoa_r+0x730>
 801beac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801beae:	e75c      	b.n	801bd6a <_dtoa_r+0x782>
 801beb0:	2300      	movs	r3, #0
 801beb2:	e788      	b.n	801bdc6 <_dtoa_r+0x7de>
 801beb4:	3fe00000 	.word	0x3fe00000
 801beb8:	40240000 	.word	0x40240000
 801bebc:	40140000 	.word	0x40140000
 801bec0:	9b02      	ldr	r3, [sp, #8]
 801bec2:	e780      	b.n	801bdc6 <_dtoa_r+0x7de>
 801bec4:	2300      	movs	r3, #0
 801bec6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bec8:	e782      	b.n	801bdd0 <_dtoa_r+0x7e8>
 801beca:	d099      	beq.n	801be00 <_dtoa_r+0x818>
 801becc:	9a08      	ldr	r2, [sp, #32]
 801bece:	331c      	adds	r3, #28
 801bed0:	441a      	add	r2, r3
 801bed2:	4498      	add	r8, r3
 801bed4:	441e      	add	r6, r3
 801bed6:	9208      	str	r2, [sp, #32]
 801bed8:	e792      	b.n	801be00 <_dtoa_r+0x818>
 801beda:	4603      	mov	r3, r0
 801bedc:	e7f6      	b.n	801becc <_dtoa_r+0x8e4>
 801bede:	9b07      	ldr	r3, [sp, #28]
 801bee0:	9704      	str	r7, [sp, #16]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	dc20      	bgt.n	801bf28 <_dtoa_r+0x940>
 801bee6:	9300      	str	r3, [sp, #0]
 801bee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beea:	2b02      	cmp	r3, #2
 801beec:	dd1e      	ble.n	801bf2c <_dtoa_r+0x944>
 801beee:	9b00      	ldr	r3, [sp, #0]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	f47f aec0 	bne.w	801bc76 <_dtoa_r+0x68e>
 801bef6:	4621      	mov	r1, r4
 801bef8:	2205      	movs	r2, #5
 801befa:	4658      	mov	r0, fp
 801befc:	f000 f9e4 	bl	801c2c8 <__multadd>
 801bf00:	4601      	mov	r1, r0
 801bf02:	4604      	mov	r4, r0
 801bf04:	4648      	mov	r0, r9
 801bf06:	f000 fbf7 	bl	801c6f8 <__mcmp>
 801bf0a:	2800      	cmp	r0, #0
 801bf0c:	f77f aeb3 	ble.w	801bc76 <_dtoa_r+0x68e>
 801bf10:	4656      	mov	r6, sl
 801bf12:	2331      	movs	r3, #49	@ 0x31
 801bf14:	f806 3b01 	strb.w	r3, [r6], #1
 801bf18:	9b04      	ldr	r3, [sp, #16]
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	9304      	str	r3, [sp, #16]
 801bf1e:	e6ae      	b.n	801bc7e <_dtoa_r+0x696>
 801bf20:	9c07      	ldr	r4, [sp, #28]
 801bf22:	9704      	str	r7, [sp, #16]
 801bf24:	4625      	mov	r5, r4
 801bf26:	e7f3      	b.n	801bf10 <_dtoa_r+0x928>
 801bf28:	9b07      	ldr	r3, [sp, #28]
 801bf2a:	9300      	str	r3, [sp, #0]
 801bf2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf2e:	2b00      	cmp	r3, #0
 801bf30:	f000 8104 	beq.w	801c13c <_dtoa_r+0xb54>
 801bf34:	2e00      	cmp	r6, #0
 801bf36:	dd05      	ble.n	801bf44 <_dtoa_r+0x95c>
 801bf38:	4629      	mov	r1, r5
 801bf3a:	4632      	mov	r2, r6
 801bf3c:	4658      	mov	r0, fp
 801bf3e:	f000 fb6f 	bl	801c620 <__lshift>
 801bf42:	4605      	mov	r5, r0
 801bf44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	d05a      	beq.n	801c000 <_dtoa_r+0xa18>
 801bf4a:	6869      	ldr	r1, [r5, #4]
 801bf4c:	4658      	mov	r0, fp
 801bf4e:	f000 f959 	bl	801c204 <_Balloc>
 801bf52:	4606      	mov	r6, r0
 801bf54:	b928      	cbnz	r0, 801bf62 <_dtoa_r+0x97a>
 801bf56:	4b84      	ldr	r3, [pc, #528]	@ (801c168 <_dtoa_r+0xb80>)
 801bf58:	4602      	mov	r2, r0
 801bf5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bf5e:	f7ff bb5a 	b.w	801b616 <_dtoa_r+0x2e>
 801bf62:	692a      	ldr	r2, [r5, #16]
 801bf64:	3202      	adds	r2, #2
 801bf66:	0092      	lsls	r2, r2, #2
 801bf68:	f105 010c 	add.w	r1, r5, #12
 801bf6c:	300c      	adds	r0, #12
 801bf6e:	f7ff fa86 	bl	801b47e <memcpy>
 801bf72:	2201      	movs	r2, #1
 801bf74:	4631      	mov	r1, r6
 801bf76:	4658      	mov	r0, fp
 801bf78:	f000 fb52 	bl	801c620 <__lshift>
 801bf7c:	f10a 0301 	add.w	r3, sl, #1
 801bf80:	9307      	str	r3, [sp, #28]
 801bf82:	9b00      	ldr	r3, [sp, #0]
 801bf84:	4453      	add	r3, sl
 801bf86:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bf88:	9b02      	ldr	r3, [sp, #8]
 801bf8a:	f003 0301 	and.w	r3, r3, #1
 801bf8e:	462f      	mov	r7, r5
 801bf90:	930a      	str	r3, [sp, #40]	@ 0x28
 801bf92:	4605      	mov	r5, r0
 801bf94:	9b07      	ldr	r3, [sp, #28]
 801bf96:	4621      	mov	r1, r4
 801bf98:	3b01      	subs	r3, #1
 801bf9a:	4648      	mov	r0, r9
 801bf9c:	9300      	str	r3, [sp, #0]
 801bf9e:	f7ff fa9b 	bl	801b4d8 <quorem>
 801bfa2:	4639      	mov	r1, r7
 801bfa4:	9002      	str	r0, [sp, #8]
 801bfa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801bfaa:	4648      	mov	r0, r9
 801bfac:	f000 fba4 	bl	801c6f8 <__mcmp>
 801bfb0:	462a      	mov	r2, r5
 801bfb2:	9008      	str	r0, [sp, #32]
 801bfb4:	4621      	mov	r1, r4
 801bfb6:	4658      	mov	r0, fp
 801bfb8:	f000 fbba 	bl	801c730 <__mdiff>
 801bfbc:	68c2      	ldr	r2, [r0, #12]
 801bfbe:	4606      	mov	r6, r0
 801bfc0:	bb02      	cbnz	r2, 801c004 <_dtoa_r+0xa1c>
 801bfc2:	4601      	mov	r1, r0
 801bfc4:	4648      	mov	r0, r9
 801bfc6:	f000 fb97 	bl	801c6f8 <__mcmp>
 801bfca:	4602      	mov	r2, r0
 801bfcc:	4631      	mov	r1, r6
 801bfce:	4658      	mov	r0, fp
 801bfd0:	920e      	str	r2, [sp, #56]	@ 0x38
 801bfd2:	f000 f957 	bl	801c284 <_Bfree>
 801bfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bfda:	9e07      	ldr	r6, [sp, #28]
 801bfdc:	ea43 0102 	orr.w	r1, r3, r2
 801bfe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bfe2:	4319      	orrs	r1, r3
 801bfe4:	d110      	bne.n	801c008 <_dtoa_r+0xa20>
 801bfe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801bfea:	d029      	beq.n	801c040 <_dtoa_r+0xa58>
 801bfec:	9b08      	ldr	r3, [sp, #32]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	dd02      	ble.n	801bff8 <_dtoa_r+0xa10>
 801bff2:	9b02      	ldr	r3, [sp, #8]
 801bff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801bff8:	9b00      	ldr	r3, [sp, #0]
 801bffa:	f883 8000 	strb.w	r8, [r3]
 801bffe:	e63f      	b.n	801bc80 <_dtoa_r+0x698>
 801c000:	4628      	mov	r0, r5
 801c002:	e7bb      	b.n	801bf7c <_dtoa_r+0x994>
 801c004:	2201      	movs	r2, #1
 801c006:	e7e1      	b.n	801bfcc <_dtoa_r+0x9e4>
 801c008:	9b08      	ldr	r3, [sp, #32]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	db04      	blt.n	801c018 <_dtoa_r+0xa30>
 801c00e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c010:	430b      	orrs	r3, r1
 801c012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c014:	430b      	orrs	r3, r1
 801c016:	d120      	bne.n	801c05a <_dtoa_r+0xa72>
 801c018:	2a00      	cmp	r2, #0
 801c01a:	dded      	ble.n	801bff8 <_dtoa_r+0xa10>
 801c01c:	4649      	mov	r1, r9
 801c01e:	2201      	movs	r2, #1
 801c020:	4658      	mov	r0, fp
 801c022:	f000 fafd 	bl	801c620 <__lshift>
 801c026:	4621      	mov	r1, r4
 801c028:	4681      	mov	r9, r0
 801c02a:	f000 fb65 	bl	801c6f8 <__mcmp>
 801c02e:	2800      	cmp	r0, #0
 801c030:	dc03      	bgt.n	801c03a <_dtoa_r+0xa52>
 801c032:	d1e1      	bne.n	801bff8 <_dtoa_r+0xa10>
 801c034:	f018 0f01 	tst.w	r8, #1
 801c038:	d0de      	beq.n	801bff8 <_dtoa_r+0xa10>
 801c03a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c03e:	d1d8      	bne.n	801bff2 <_dtoa_r+0xa0a>
 801c040:	9a00      	ldr	r2, [sp, #0]
 801c042:	2339      	movs	r3, #57	@ 0x39
 801c044:	7013      	strb	r3, [r2, #0]
 801c046:	4633      	mov	r3, r6
 801c048:	461e      	mov	r6, r3
 801c04a:	3b01      	subs	r3, #1
 801c04c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c050:	2a39      	cmp	r2, #57	@ 0x39
 801c052:	d052      	beq.n	801c0fa <_dtoa_r+0xb12>
 801c054:	3201      	adds	r2, #1
 801c056:	701a      	strb	r2, [r3, #0]
 801c058:	e612      	b.n	801bc80 <_dtoa_r+0x698>
 801c05a:	2a00      	cmp	r2, #0
 801c05c:	dd07      	ble.n	801c06e <_dtoa_r+0xa86>
 801c05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c062:	d0ed      	beq.n	801c040 <_dtoa_r+0xa58>
 801c064:	9a00      	ldr	r2, [sp, #0]
 801c066:	f108 0301 	add.w	r3, r8, #1
 801c06a:	7013      	strb	r3, [r2, #0]
 801c06c:	e608      	b.n	801bc80 <_dtoa_r+0x698>
 801c06e:	9b07      	ldr	r3, [sp, #28]
 801c070:	9a07      	ldr	r2, [sp, #28]
 801c072:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c078:	4293      	cmp	r3, r2
 801c07a:	d028      	beq.n	801c0ce <_dtoa_r+0xae6>
 801c07c:	4649      	mov	r1, r9
 801c07e:	2300      	movs	r3, #0
 801c080:	220a      	movs	r2, #10
 801c082:	4658      	mov	r0, fp
 801c084:	f000 f920 	bl	801c2c8 <__multadd>
 801c088:	42af      	cmp	r7, r5
 801c08a:	4681      	mov	r9, r0
 801c08c:	f04f 0300 	mov.w	r3, #0
 801c090:	f04f 020a 	mov.w	r2, #10
 801c094:	4639      	mov	r1, r7
 801c096:	4658      	mov	r0, fp
 801c098:	d107      	bne.n	801c0aa <_dtoa_r+0xac2>
 801c09a:	f000 f915 	bl	801c2c8 <__multadd>
 801c09e:	4607      	mov	r7, r0
 801c0a0:	4605      	mov	r5, r0
 801c0a2:	9b07      	ldr	r3, [sp, #28]
 801c0a4:	3301      	adds	r3, #1
 801c0a6:	9307      	str	r3, [sp, #28]
 801c0a8:	e774      	b.n	801bf94 <_dtoa_r+0x9ac>
 801c0aa:	f000 f90d 	bl	801c2c8 <__multadd>
 801c0ae:	4629      	mov	r1, r5
 801c0b0:	4607      	mov	r7, r0
 801c0b2:	2300      	movs	r3, #0
 801c0b4:	220a      	movs	r2, #10
 801c0b6:	4658      	mov	r0, fp
 801c0b8:	f000 f906 	bl	801c2c8 <__multadd>
 801c0bc:	4605      	mov	r5, r0
 801c0be:	e7f0      	b.n	801c0a2 <_dtoa_r+0xaba>
 801c0c0:	9b00      	ldr	r3, [sp, #0]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	bfcc      	ite	gt
 801c0c6:	461e      	movgt	r6, r3
 801c0c8:	2601      	movle	r6, #1
 801c0ca:	4456      	add	r6, sl
 801c0cc:	2700      	movs	r7, #0
 801c0ce:	4649      	mov	r1, r9
 801c0d0:	2201      	movs	r2, #1
 801c0d2:	4658      	mov	r0, fp
 801c0d4:	f000 faa4 	bl	801c620 <__lshift>
 801c0d8:	4621      	mov	r1, r4
 801c0da:	4681      	mov	r9, r0
 801c0dc:	f000 fb0c 	bl	801c6f8 <__mcmp>
 801c0e0:	2800      	cmp	r0, #0
 801c0e2:	dcb0      	bgt.n	801c046 <_dtoa_r+0xa5e>
 801c0e4:	d102      	bne.n	801c0ec <_dtoa_r+0xb04>
 801c0e6:	f018 0f01 	tst.w	r8, #1
 801c0ea:	d1ac      	bne.n	801c046 <_dtoa_r+0xa5e>
 801c0ec:	4633      	mov	r3, r6
 801c0ee:	461e      	mov	r6, r3
 801c0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0f4:	2a30      	cmp	r2, #48	@ 0x30
 801c0f6:	d0fa      	beq.n	801c0ee <_dtoa_r+0xb06>
 801c0f8:	e5c2      	b.n	801bc80 <_dtoa_r+0x698>
 801c0fa:	459a      	cmp	sl, r3
 801c0fc:	d1a4      	bne.n	801c048 <_dtoa_r+0xa60>
 801c0fe:	9b04      	ldr	r3, [sp, #16]
 801c100:	3301      	adds	r3, #1
 801c102:	9304      	str	r3, [sp, #16]
 801c104:	2331      	movs	r3, #49	@ 0x31
 801c106:	f88a 3000 	strb.w	r3, [sl]
 801c10a:	e5b9      	b.n	801bc80 <_dtoa_r+0x698>
 801c10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c10e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c16c <_dtoa_r+0xb84>
 801c112:	b11b      	cbz	r3, 801c11c <_dtoa_r+0xb34>
 801c114:	f10a 0308 	add.w	r3, sl, #8
 801c118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c11a:	6013      	str	r3, [r2, #0]
 801c11c:	4650      	mov	r0, sl
 801c11e:	b019      	add	sp, #100	@ 0x64
 801c120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c126:	2b01      	cmp	r3, #1
 801c128:	f77f ae37 	ble.w	801bd9a <_dtoa_r+0x7b2>
 801c12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c12e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c130:	2001      	movs	r0, #1
 801c132:	e655      	b.n	801bde0 <_dtoa_r+0x7f8>
 801c134:	9b00      	ldr	r3, [sp, #0]
 801c136:	2b00      	cmp	r3, #0
 801c138:	f77f aed6 	ble.w	801bee8 <_dtoa_r+0x900>
 801c13c:	4656      	mov	r6, sl
 801c13e:	4621      	mov	r1, r4
 801c140:	4648      	mov	r0, r9
 801c142:	f7ff f9c9 	bl	801b4d8 <quorem>
 801c146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c14a:	f806 8b01 	strb.w	r8, [r6], #1
 801c14e:	9b00      	ldr	r3, [sp, #0]
 801c150:	eba6 020a 	sub.w	r2, r6, sl
 801c154:	4293      	cmp	r3, r2
 801c156:	ddb3      	ble.n	801c0c0 <_dtoa_r+0xad8>
 801c158:	4649      	mov	r1, r9
 801c15a:	2300      	movs	r3, #0
 801c15c:	220a      	movs	r2, #10
 801c15e:	4658      	mov	r0, fp
 801c160:	f000 f8b2 	bl	801c2c8 <__multadd>
 801c164:	4681      	mov	r9, r0
 801c166:	e7ea      	b.n	801c13e <_dtoa_r+0xb56>
 801c168:	0806c8a9 	.word	0x0806c8a9
 801c16c:	0806c844 	.word	0x0806c844

0801c170 <_free_r>:
 801c170:	b538      	push	{r3, r4, r5, lr}
 801c172:	4605      	mov	r5, r0
 801c174:	2900      	cmp	r1, #0
 801c176:	d041      	beq.n	801c1fc <_free_r+0x8c>
 801c178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c17c:	1f0c      	subs	r4, r1, #4
 801c17e:	2b00      	cmp	r3, #0
 801c180:	bfb8      	it	lt
 801c182:	18e4      	addlt	r4, r4, r3
 801c184:	f7fe f980 	bl	801a488 <__malloc_lock>
 801c188:	4a1d      	ldr	r2, [pc, #116]	@ (801c200 <_free_r+0x90>)
 801c18a:	6813      	ldr	r3, [r2, #0]
 801c18c:	b933      	cbnz	r3, 801c19c <_free_r+0x2c>
 801c18e:	6063      	str	r3, [r4, #4]
 801c190:	6014      	str	r4, [r2, #0]
 801c192:	4628      	mov	r0, r5
 801c194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c198:	f7fe b97c 	b.w	801a494 <__malloc_unlock>
 801c19c:	42a3      	cmp	r3, r4
 801c19e:	d908      	bls.n	801c1b2 <_free_r+0x42>
 801c1a0:	6820      	ldr	r0, [r4, #0]
 801c1a2:	1821      	adds	r1, r4, r0
 801c1a4:	428b      	cmp	r3, r1
 801c1a6:	bf01      	itttt	eq
 801c1a8:	6819      	ldreq	r1, [r3, #0]
 801c1aa:	685b      	ldreq	r3, [r3, #4]
 801c1ac:	1809      	addeq	r1, r1, r0
 801c1ae:	6021      	streq	r1, [r4, #0]
 801c1b0:	e7ed      	b.n	801c18e <_free_r+0x1e>
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	685b      	ldr	r3, [r3, #4]
 801c1b6:	b10b      	cbz	r3, 801c1bc <_free_r+0x4c>
 801c1b8:	42a3      	cmp	r3, r4
 801c1ba:	d9fa      	bls.n	801c1b2 <_free_r+0x42>
 801c1bc:	6811      	ldr	r1, [r2, #0]
 801c1be:	1850      	adds	r0, r2, r1
 801c1c0:	42a0      	cmp	r0, r4
 801c1c2:	d10b      	bne.n	801c1dc <_free_r+0x6c>
 801c1c4:	6820      	ldr	r0, [r4, #0]
 801c1c6:	4401      	add	r1, r0
 801c1c8:	1850      	adds	r0, r2, r1
 801c1ca:	4283      	cmp	r3, r0
 801c1cc:	6011      	str	r1, [r2, #0]
 801c1ce:	d1e0      	bne.n	801c192 <_free_r+0x22>
 801c1d0:	6818      	ldr	r0, [r3, #0]
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	6053      	str	r3, [r2, #4]
 801c1d6:	4408      	add	r0, r1
 801c1d8:	6010      	str	r0, [r2, #0]
 801c1da:	e7da      	b.n	801c192 <_free_r+0x22>
 801c1dc:	d902      	bls.n	801c1e4 <_free_r+0x74>
 801c1de:	230c      	movs	r3, #12
 801c1e0:	602b      	str	r3, [r5, #0]
 801c1e2:	e7d6      	b.n	801c192 <_free_r+0x22>
 801c1e4:	6820      	ldr	r0, [r4, #0]
 801c1e6:	1821      	adds	r1, r4, r0
 801c1e8:	428b      	cmp	r3, r1
 801c1ea:	bf04      	itt	eq
 801c1ec:	6819      	ldreq	r1, [r3, #0]
 801c1ee:	685b      	ldreq	r3, [r3, #4]
 801c1f0:	6063      	str	r3, [r4, #4]
 801c1f2:	bf04      	itt	eq
 801c1f4:	1809      	addeq	r1, r1, r0
 801c1f6:	6021      	streq	r1, [r4, #0]
 801c1f8:	6054      	str	r4, [r2, #4]
 801c1fa:	e7ca      	b.n	801c192 <_free_r+0x22>
 801c1fc:	bd38      	pop	{r3, r4, r5, pc}
 801c1fe:	bf00      	nop
 801c200:	20013f0c 	.word	0x20013f0c

0801c204 <_Balloc>:
 801c204:	b570      	push	{r4, r5, r6, lr}
 801c206:	69c6      	ldr	r6, [r0, #28]
 801c208:	4604      	mov	r4, r0
 801c20a:	460d      	mov	r5, r1
 801c20c:	b976      	cbnz	r6, 801c22c <_Balloc+0x28>
 801c20e:	2010      	movs	r0, #16
 801c210:	f7fe f890 	bl	801a334 <malloc>
 801c214:	4602      	mov	r2, r0
 801c216:	61e0      	str	r0, [r4, #28]
 801c218:	b920      	cbnz	r0, 801c224 <_Balloc+0x20>
 801c21a:	4b18      	ldr	r3, [pc, #96]	@ (801c27c <_Balloc+0x78>)
 801c21c:	4818      	ldr	r0, [pc, #96]	@ (801c280 <_Balloc+0x7c>)
 801c21e:	216b      	movs	r1, #107	@ 0x6b
 801c220:	f7ff f93c 	bl	801b49c <__assert_func>
 801c224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c228:	6006      	str	r6, [r0, #0]
 801c22a:	60c6      	str	r6, [r0, #12]
 801c22c:	69e6      	ldr	r6, [r4, #28]
 801c22e:	68f3      	ldr	r3, [r6, #12]
 801c230:	b183      	cbz	r3, 801c254 <_Balloc+0x50>
 801c232:	69e3      	ldr	r3, [r4, #28]
 801c234:	68db      	ldr	r3, [r3, #12]
 801c236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c23a:	b9b8      	cbnz	r0, 801c26c <_Balloc+0x68>
 801c23c:	2101      	movs	r1, #1
 801c23e:	fa01 f605 	lsl.w	r6, r1, r5
 801c242:	1d72      	adds	r2, r6, #5
 801c244:	0092      	lsls	r2, r2, #2
 801c246:	4620      	mov	r0, r4
 801c248:	f7fe f860 	bl	801a30c <_calloc_r>
 801c24c:	b160      	cbz	r0, 801c268 <_Balloc+0x64>
 801c24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c252:	e00e      	b.n	801c272 <_Balloc+0x6e>
 801c254:	2221      	movs	r2, #33	@ 0x21
 801c256:	2104      	movs	r1, #4
 801c258:	4620      	mov	r0, r4
 801c25a:	f7fe f857 	bl	801a30c <_calloc_r>
 801c25e:	69e3      	ldr	r3, [r4, #28]
 801c260:	60f0      	str	r0, [r6, #12]
 801c262:	68db      	ldr	r3, [r3, #12]
 801c264:	2b00      	cmp	r3, #0
 801c266:	d1e4      	bne.n	801c232 <_Balloc+0x2e>
 801c268:	2000      	movs	r0, #0
 801c26a:	bd70      	pop	{r4, r5, r6, pc}
 801c26c:	6802      	ldr	r2, [r0, #0]
 801c26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c272:	2300      	movs	r3, #0
 801c274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c278:	e7f7      	b.n	801c26a <_Balloc+0x66>
 801c27a:	bf00      	nop
 801c27c:	0806c664 	.word	0x0806c664
 801c280:	0806c8ba 	.word	0x0806c8ba

0801c284 <_Bfree>:
 801c284:	b570      	push	{r4, r5, r6, lr}
 801c286:	69c6      	ldr	r6, [r0, #28]
 801c288:	4605      	mov	r5, r0
 801c28a:	460c      	mov	r4, r1
 801c28c:	b976      	cbnz	r6, 801c2ac <_Bfree+0x28>
 801c28e:	2010      	movs	r0, #16
 801c290:	f7fe f850 	bl	801a334 <malloc>
 801c294:	4602      	mov	r2, r0
 801c296:	61e8      	str	r0, [r5, #28]
 801c298:	b920      	cbnz	r0, 801c2a4 <_Bfree+0x20>
 801c29a:	4b09      	ldr	r3, [pc, #36]	@ (801c2c0 <_Bfree+0x3c>)
 801c29c:	4809      	ldr	r0, [pc, #36]	@ (801c2c4 <_Bfree+0x40>)
 801c29e:	218f      	movs	r1, #143	@ 0x8f
 801c2a0:	f7ff f8fc 	bl	801b49c <__assert_func>
 801c2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c2a8:	6006      	str	r6, [r0, #0]
 801c2aa:	60c6      	str	r6, [r0, #12]
 801c2ac:	b13c      	cbz	r4, 801c2be <_Bfree+0x3a>
 801c2ae:	69eb      	ldr	r3, [r5, #28]
 801c2b0:	6862      	ldr	r2, [r4, #4]
 801c2b2:	68db      	ldr	r3, [r3, #12]
 801c2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c2b8:	6021      	str	r1, [r4, #0]
 801c2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c2be:	bd70      	pop	{r4, r5, r6, pc}
 801c2c0:	0806c664 	.word	0x0806c664
 801c2c4:	0806c8ba 	.word	0x0806c8ba

0801c2c8 <__multadd>:
 801c2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2cc:	690d      	ldr	r5, [r1, #16]
 801c2ce:	4607      	mov	r7, r0
 801c2d0:	460c      	mov	r4, r1
 801c2d2:	461e      	mov	r6, r3
 801c2d4:	f101 0c14 	add.w	ip, r1, #20
 801c2d8:	2000      	movs	r0, #0
 801c2da:	f8dc 3000 	ldr.w	r3, [ip]
 801c2de:	b299      	uxth	r1, r3
 801c2e0:	fb02 6101 	mla	r1, r2, r1, r6
 801c2e4:	0c1e      	lsrs	r6, r3, #16
 801c2e6:	0c0b      	lsrs	r3, r1, #16
 801c2e8:	fb02 3306 	mla	r3, r2, r6, r3
 801c2ec:	b289      	uxth	r1, r1
 801c2ee:	3001      	adds	r0, #1
 801c2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c2f4:	4285      	cmp	r5, r0
 801c2f6:	f84c 1b04 	str.w	r1, [ip], #4
 801c2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c2fe:	dcec      	bgt.n	801c2da <__multadd+0x12>
 801c300:	b30e      	cbz	r6, 801c346 <__multadd+0x7e>
 801c302:	68a3      	ldr	r3, [r4, #8]
 801c304:	42ab      	cmp	r3, r5
 801c306:	dc19      	bgt.n	801c33c <__multadd+0x74>
 801c308:	6861      	ldr	r1, [r4, #4]
 801c30a:	4638      	mov	r0, r7
 801c30c:	3101      	adds	r1, #1
 801c30e:	f7ff ff79 	bl	801c204 <_Balloc>
 801c312:	4680      	mov	r8, r0
 801c314:	b928      	cbnz	r0, 801c322 <__multadd+0x5a>
 801c316:	4602      	mov	r2, r0
 801c318:	4b0c      	ldr	r3, [pc, #48]	@ (801c34c <__multadd+0x84>)
 801c31a:	480d      	ldr	r0, [pc, #52]	@ (801c350 <__multadd+0x88>)
 801c31c:	21ba      	movs	r1, #186	@ 0xba
 801c31e:	f7ff f8bd 	bl	801b49c <__assert_func>
 801c322:	6922      	ldr	r2, [r4, #16]
 801c324:	3202      	adds	r2, #2
 801c326:	f104 010c 	add.w	r1, r4, #12
 801c32a:	0092      	lsls	r2, r2, #2
 801c32c:	300c      	adds	r0, #12
 801c32e:	f7ff f8a6 	bl	801b47e <memcpy>
 801c332:	4621      	mov	r1, r4
 801c334:	4638      	mov	r0, r7
 801c336:	f7ff ffa5 	bl	801c284 <_Bfree>
 801c33a:	4644      	mov	r4, r8
 801c33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c340:	3501      	adds	r5, #1
 801c342:	615e      	str	r6, [r3, #20]
 801c344:	6125      	str	r5, [r4, #16]
 801c346:	4620      	mov	r0, r4
 801c348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c34c:	0806c8a9 	.word	0x0806c8a9
 801c350:	0806c8ba 	.word	0x0806c8ba

0801c354 <__hi0bits>:
 801c354:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c358:	4603      	mov	r3, r0
 801c35a:	bf36      	itet	cc
 801c35c:	0403      	lslcc	r3, r0, #16
 801c35e:	2000      	movcs	r0, #0
 801c360:	2010      	movcc	r0, #16
 801c362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c366:	bf3c      	itt	cc
 801c368:	021b      	lslcc	r3, r3, #8
 801c36a:	3008      	addcc	r0, #8
 801c36c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c370:	bf3c      	itt	cc
 801c372:	011b      	lslcc	r3, r3, #4
 801c374:	3004      	addcc	r0, #4
 801c376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c37a:	bf3c      	itt	cc
 801c37c:	009b      	lslcc	r3, r3, #2
 801c37e:	3002      	addcc	r0, #2
 801c380:	2b00      	cmp	r3, #0
 801c382:	db05      	blt.n	801c390 <__hi0bits+0x3c>
 801c384:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c388:	f100 0001 	add.w	r0, r0, #1
 801c38c:	bf08      	it	eq
 801c38e:	2020      	moveq	r0, #32
 801c390:	4770      	bx	lr

0801c392 <__lo0bits>:
 801c392:	6803      	ldr	r3, [r0, #0]
 801c394:	4602      	mov	r2, r0
 801c396:	f013 0007 	ands.w	r0, r3, #7
 801c39a:	d00b      	beq.n	801c3b4 <__lo0bits+0x22>
 801c39c:	07d9      	lsls	r1, r3, #31
 801c39e:	d421      	bmi.n	801c3e4 <__lo0bits+0x52>
 801c3a0:	0798      	lsls	r0, r3, #30
 801c3a2:	bf49      	itett	mi
 801c3a4:	085b      	lsrmi	r3, r3, #1
 801c3a6:	089b      	lsrpl	r3, r3, #2
 801c3a8:	2001      	movmi	r0, #1
 801c3aa:	6013      	strmi	r3, [r2, #0]
 801c3ac:	bf5c      	itt	pl
 801c3ae:	6013      	strpl	r3, [r2, #0]
 801c3b0:	2002      	movpl	r0, #2
 801c3b2:	4770      	bx	lr
 801c3b4:	b299      	uxth	r1, r3
 801c3b6:	b909      	cbnz	r1, 801c3bc <__lo0bits+0x2a>
 801c3b8:	0c1b      	lsrs	r3, r3, #16
 801c3ba:	2010      	movs	r0, #16
 801c3bc:	b2d9      	uxtb	r1, r3
 801c3be:	b909      	cbnz	r1, 801c3c4 <__lo0bits+0x32>
 801c3c0:	3008      	adds	r0, #8
 801c3c2:	0a1b      	lsrs	r3, r3, #8
 801c3c4:	0719      	lsls	r1, r3, #28
 801c3c6:	bf04      	itt	eq
 801c3c8:	091b      	lsreq	r3, r3, #4
 801c3ca:	3004      	addeq	r0, #4
 801c3cc:	0799      	lsls	r1, r3, #30
 801c3ce:	bf04      	itt	eq
 801c3d0:	089b      	lsreq	r3, r3, #2
 801c3d2:	3002      	addeq	r0, #2
 801c3d4:	07d9      	lsls	r1, r3, #31
 801c3d6:	d403      	bmi.n	801c3e0 <__lo0bits+0x4e>
 801c3d8:	085b      	lsrs	r3, r3, #1
 801c3da:	f100 0001 	add.w	r0, r0, #1
 801c3de:	d003      	beq.n	801c3e8 <__lo0bits+0x56>
 801c3e0:	6013      	str	r3, [r2, #0]
 801c3e2:	4770      	bx	lr
 801c3e4:	2000      	movs	r0, #0
 801c3e6:	4770      	bx	lr
 801c3e8:	2020      	movs	r0, #32
 801c3ea:	4770      	bx	lr

0801c3ec <__i2b>:
 801c3ec:	b510      	push	{r4, lr}
 801c3ee:	460c      	mov	r4, r1
 801c3f0:	2101      	movs	r1, #1
 801c3f2:	f7ff ff07 	bl	801c204 <_Balloc>
 801c3f6:	4602      	mov	r2, r0
 801c3f8:	b928      	cbnz	r0, 801c406 <__i2b+0x1a>
 801c3fa:	4b05      	ldr	r3, [pc, #20]	@ (801c410 <__i2b+0x24>)
 801c3fc:	4805      	ldr	r0, [pc, #20]	@ (801c414 <__i2b+0x28>)
 801c3fe:	f240 1145 	movw	r1, #325	@ 0x145
 801c402:	f7ff f84b 	bl	801b49c <__assert_func>
 801c406:	2301      	movs	r3, #1
 801c408:	6144      	str	r4, [r0, #20]
 801c40a:	6103      	str	r3, [r0, #16]
 801c40c:	bd10      	pop	{r4, pc}
 801c40e:	bf00      	nop
 801c410:	0806c8a9 	.word	0x0806c8a9
 801c414:	0806c8ba 	.word	0x0806c8ba

0801c418 <__multiply>:
 801c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c41c:	4614      	mov	r4, r2
 801c41e:	690a      	ldr	r2, [r1, #16]
 801c420:	6923      	ldr	r3, [r4, #16]
 801c422:	429a      	cmp	r2, r3
 801c424:	bfa8      	it	ge
 801c426:	4623      	movge	r3, r4
 801c428:	460f      	mov	r7, r1
 801c42a:	bfa4      	itt	ge
 801c42c:	460c      	movge	r4, r1
 801c42e:	461f      	movge	r7, r3
 801c430:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801c434:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801c438:	68a3      	ldr	r3, [r4, #8]
 801c43a:	6861      	ldr	r1, [r4, #4]
 801c43c:	eb0a 0609 	add.w	r6, sl, r9
 801c440:	42b3      	cmp	r3, r6
 801c442:	b085      	sub	sp, #20
 801c444:	bfb8      	it	lt
 801c446:	3101      	addlt	r1, #1
 801c448:	f7ff fedc 	bl	801c204 <_Balloc>
 801c44c:	b930      	cbnz	r0, 801c45c <__multiply+0x44>
 801c44e:	4602      	mov	r2, r0
 801c450:	4b44      	ldr	r3, [pc, #272]	@ (801c564 <__multiply+0x14c>)
 801c452:	4845      	ldr	r0, [pc, #276]	@ (801c568 <__multiply+0x150>)
 801c454:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c458:	f7ff f820 	bl	801b49c <__assert_func>
 801c45c:	f100 0514 	add.w	r5, r0, #20
 801c460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c464:	462b      	mov	r3, r5
 801c466:	2200      	movs	r2, #0
 801c468:	4543      	cmp	r3, r8
 801c46a:	d321      	bcc.n	801c4b0 <__multiply+0x98>
 801c46c:	f107 0114 	add.w	r1, r7, #20
 801c470:	f104 0214 	add.w	r2, r4, #20
 801c474:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801c478:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801c47c:	9302      	str	r3, [sp, #8]
 801c47e:	1b13      	subs	r3, r2, r4
 801c480:	3b15      	subs	r3, #21
 801c482:	f023 0303 	bic.w	r3, r3, #3
 801c486:	3304      	adds	r3, #4
 801c488:	f104 0715 	add.w	r7, r4, #21
 801c48c:	42ba      	cmp	r2, r7
 801c48e:	bf38      	it	cc
 801c490:	2304      	movcc	r3, #4
 801c492:	9301      	str	r3, [sp, #4]
 801c494:	9b02      	ldr	r3, [sp, #8]
 801c496:	9103      	str	r1, [sp, #12]
 801c498:	428b      	cmp	r3, r1
 801c49a:	d80c      	bhi.n	801c4b6 <__multiply+0x9e>
 801c49c:	2e00      	cmp	r6, #0
 801c49e:	dd03      	ble.n	801c4a8 <__multiply+0x90>
 801c4a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d05b      	beq.n	801c560 <__multiply+0x148>
 801c4a8:	6106      	str	r6, [r0, #16]
 801c4aa:	b005      	add	sp, #20
 801c4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4b0:	f843 2b04 	str.w	r2, [r3], #4
 801c4b4:	e7d8      	b.n	801c468 <__multiply+0x50>
 801c4b6:	f8b1 a000 	ldrh.w	sl, [r1]
 801c4ba:	f1ba 0f00 	cmp.w	sl, #0
 801c4be:	d024      	beq.n	801c50a <__multiply+0xf2>
 801c4c0:	f104 0e14 	add.w	lr, r4, #20
 801c4c4:	46a9      	mov	r9, r5
 801c4c6:	f04f 0c00 	mov.w	ip, #0
 801c4ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c4ce:	f8d9 3000 	ldr.w	r3, [r9]
 801c4d2:	fa1f fb87 	uxth.w	fp, r7
 801c4d6:	b29b      	uxth	r3, r3
 801c4d8:	fb0a 330b 	mla	r3, sl, fp, r3
 801c4dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801c4e0:	f8d9 7000 	ldr.w	r7, [r9]
 801c4e4:	4463      	add	r3, ip
 801c4e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c4ea:	fb0a c70b 	mla	r7, sl, fp, ip
 801c4ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801c4f2:	b29b      	uxth	r3, r3
 801c4f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c4f8:	4572      	cmp	r2, lr
 801c4fa:	f849 3b04 	str.w	r3, [r9], #4
 801c4fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801c502:	d8e2      	bhi.n	801c4ca <__multiply+0xb2>
 801c504:	9b01      	ldr	r3, [sp, #4]
 801c506:	f845 c003 	str.w	ip, [r5, r3]
 801c50a:	9b03      	ldr	r3, [sp, #12]
 801c50c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c510:	3104      	adds	r1, #4
 801c512:	f1b9 0f00 	cmp.w	r9, #0
 801c516:	d021      	beq.n	801c55c <__multiply+0x144>
 801c518:	682b      	ldr	r3, [r5, #0]
 801c51a:	f104 0c14 	add.w	ip, r4, #20
 801c51e:	46ae      	mov	lr, r5
 801c520:	f04f 0a00 	mov.w	sl, #0
 801c524:	f8bc b000 	ldrh.w	fp, [ip]
 801c528:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801c52c:	fb09 770b 	mla	r7, r9, fp, r7
 801c530:	4457      	add	r7, sl
 801c532:	b29b      	uxth	r3, r3
 801c534:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801c538:	f84e 3b04 	str.w	r3, [lr], #4
 801c53c:	f85c 3b04 	ldr.w	r3, [ip], #4
 801c540:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c544:	f8be 3000 	ldrh.w	r3, [lr]
 801c548:	fb09 330a 	mla	r3, r9, sl, r3
 801c54c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801c550:	4562      	cmp	r2, ip
 801c552:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c556:	d8e5      	bhi.n	801c524 <__multiply+0x10c>
 801c558:	9f01      	ldr	r7, [sp, #4]
 801c55a:	51eb      	str	r3, [r5, r7]
 801c55c:	3504      	adds	r5, #4
 801c55e:	e799      	b.n	801c494 <__multiply+0x7c>
 801c560:	3e01      	subs	r6, #1
 801c562:	e79b      	b.n	801c49c <__multiply+0x84>
 801c564:	0806c8a9 	.word	0x0806c8a9
 801c568:	0806c8ba 	.word	0x0806c8ba

0801c56c <__pow5mult>:
 801c56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c570:	4615      	mov	r5, r2
 801c572:	f012 0203 	ands.w	r2, r2, #3
 801c576:	4607      	mov	r7, r0
 801c578:	460e      	mov	r6, r1
 801c57a:	d007      	beq.n	801c58c <__pow5mult+0x20>
 801c57c:	4c25      	ldr	r4, [pc, #148]	@ (801c614 <__pow5mult+0xa8>)
 801c57e:	3a01      	subs	r2, #1
 801c580:	2300      	movs	r3, #0
 801c582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c586:	f7ff fe9f 	bl	801c2c8 <__multadd>
 801c58a:	4606      	mov	r6, r0
 801c58c:	10ad      	asrs	r5, r5, #2
 801c58e:	d03d      	beq.n	801c60c <__pow5mult+0xa0>
 801c590:	69fc      	ldr	r4, [r7, #28]
 801c592:	b97c      	cbnz	r4, 801c5b4 <__pow5mult+0x48>
 801c594:	2010      	movs	r0, #16
 801c596:	f7fd fecd 	bl	801a334 <malloc>
 801c59a:	4602      	mov	r2, r0
 801c59c:	61f8      	str	r0, [r7, #28]
 801c59e:	b928      	cbnz	r0, 801c5ac <__pow5mult+0x40>
 801c5a0:	4b1d      	ldr	r3, [pc, #116]	@ (801c618 <__pow5mult+0xac>)
 801c5a2:	481e      	ldr	r0, [pc, #120]	@ (801c61c <__pow5mult+0xb0>)
 801c5a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c5a8:	f7fe ff78 	bl	801b49c <__assert_func>
 801c5ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c5b0:	6004      	str	r4, [r0, #0]
 801c5b2:	60c4      	str	r4, [r0, #12]
 801c5b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c5b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c5bc:	b94c      	cbnz	r4, 801c5d2 <__pow5mult+0x66>
 801c5be:	f240 2171 	movw	r1, #625	@ 0x271
 801c5c2:	4638      	mov	r0, r7
 801c5c4:	f7ff ff12 	bl	801c3ec <__i2b>
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	f8c8 0008 	str.w	r0, [r8, #8]
 801c5ce:	4604      	mov	r4, r0
 801c5d0:	6003      	str	r3, [r0, #0]
 801c5d2:	f04f 0900 	mov.w	r9, #0
 801c5d6:	07eb      	lsls	r3, r5, #31
 801c5d8:	d50a      	bpl.n	801c5f0 <__pow5mult+0x84>
 801c5da:	4631      	mov	r1, r6
 801c5dc:	4622      	mov	r2, r4
 801c5de:	4638      	mov	r0, r7
 801c5e0:	f7ff ff1a 	bl	801c418 <__multiply>
 801c5e4:	4631      	mov	r1, r6
 801c5e6:	4680      	mov	r8, r0
 801c5e8:	4638      	mov	r0, r7
 801c5ea:	f7ff fe4b 	bl	801c284 <_Bfree>
 801c5ee:	4646      	mov	r6, r8
 801c5f0:	106d      	asrs	r5, r5, #1
 801c5f2:	d00b      	beq.n	801c60c <__pow5mult+0xa0>
 801c5f4:	6820      	ldr	r0, [r4, #0]
 801c5f6:	b938      	cbnz	r0, 801c608 <__pow5mult+0x9c>
 801c5f8:	4622      	mov	r2, r4
 801c5fa:	4621      	mov	r1, r4
 801c5fc:	4638      	mov	r0, r7
 801c5fe:	f7ff ff0b 	bl	801c418 <__multiply>
 801c602:	6020      	str	r0, [r4, #0]
 801c604:	f8c0 9000 	str.w	r9, [r0]
 801c608:	4604      	mov	r4, r0
 801c60a:	e7e4      	b.n	801c5d6 <__pow5mult+0x6a>
 801c60c:	4630      	mov	r0, r6
 801c60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c612:	bf00      	nop
 801c614:	0806c914 	.word	0x0806c914
 801c618:	0806c664 	.word	0x0806c664
 801c61c:	0806c8ba 	.word	0x0806c8ba

0801c620 <__lshift>:
 801c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c624:	460c      	mov	r4, r1
 801c626:	6849      	ldr	r1, [r1, #4]
 801c628:	6923      	ldr	r3, [r4, #16]
 801c62a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c62e:	68a3      	ldr	r3, [r4, #8]
 801c630:	4607      	mov	r7, r0
 801c632:	4691      	mov	r9, r2
 801c634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c638:	f108 0601 	add.w	r6, r8, #1
 801c63c:	42b3      	cmp	r3, r6
 801c63e:	db0b      	blt.n	801c658 <__lshift+0x38>
 801c640:	4638      	mov	r0, r7
 801c642:	f7ff fddf 	bl	801c204 <_Balloc>
 801c646:	4605      	mov	r5, r0
 801c648:	b948      	cbnz	r0, 801c65e <__lshift+0x3e>
 801c64a:	4602      	mov	r2, r0
 801c64c:	4b28      	ldr	r3, [pc, #160]	@ (801c6f0 <__lshift+0xd0>)
 801c64e:	4829      	ldr	r0, [pc, #164]	@ (801c6f4 <__lshift+0xd4>)
 801c650:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c654:	f7fe ff22 	bl	801b49c <__assert_func>
 801c658:	3101      	adds	r1, #1
 801c65a:	005b      	lsls	r3, r3, #1
 801c65c:	e7ee      	b.n	801c63c <__lshift+0x1c>
 801c65e:	2300      	movs	r3, #0
 801c660:	f100 0114 	add.w	r1, r0, #20
 801c664:	f100 0210 	add.w	r2, r0, #16
 801c668:	4618      	mov	r0, r3
 801c66a:	4553      	cmp	r3, sl
 801c66c:	db33      	blt.n	801c6d6 <__lshift+0xb6>
 801c66e:	6920      	ldr	r0, [r4, #16]
 801c670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c674:	f104 0314 	add.w	r3, r4, #20
 801c678:	f019 091f 	ands.w	r9, r9, #31
 801c67c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c680:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c684:	d02b      	beq.n	801c6de <__lshift+0xbe>
 801c686:	f1c9 0e20 	rsb	lr, r9, #32
 801c68a:	468a      	mov	sl, r1
 801c68c:	2200      	movs	r2, #0
 801c68e:	6818      	ldr	r0, [r3, #0]
 801c690:	fa00 f009 	lsl.w	r0, r0, r9
 801c694:	4310      	orrs	r0, r2
 801c696:	f84a 0b04 	str.w	r0, [sl], #4
 801c69a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c69e:	459c      	cmp	ip, r3
 801c6a0:	fa22 f20e 	lsr.w	r2, r2, lr
 801c6a4:	d8f3      	bhi.n	801c68e <__lshift+0x6e>
 801c6a6:	ebac 0304 	sub.w	r3, ip, r4
 801c6aa:	3b15      	subs	r3, #21
 801c6ac:	f023 0303 	bic.w	r3, r3, #3
 801c6b0:	3304      	adds	r3, #4
 801c6b2:	f104 0015 	add.w	r0, r4, #21
 801c6b6:	4584      	cmp	ip, r0
 801c6b8:	bf38      	it	cc
 801c6ba:	2304      	movcc	r3, #4
 801c6bc:	50ca      	str	r2, [r1, r3]
 801c6be:	b10a      	cbz	r2, 801c6c4 <__lshift+0xa4>
 801c6c0:	f108 0602 	add.w	r6, r8, #2
 801c6c4:	3e01      	subs	r6, #1
 801c6c6:	4638      	mov	r0, r7
 801c6c8:	612e      	str	r6, [r5, #16]
 801c6ca:	4621      	mov	r1, r4
 801c6cc:	f7ff fdda 	bl	801c284 <_Bfree>
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 801c6da:	3301      	adds	r3, #1
 801c6dc:	e7c5      	b.n	801c66a <__lshift+0x4a>
 801c6de:	3904      	subs	r1, #4
 801c6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 801c6e8:	459c      	cmp	ip, r3
 801c6ea:	d8f9      	bhi.n	801c6e0 <__lshift+0xc0>
 801c6ec:	e7ea      	b.n	801c6c4 <__lshift+0xa4>
 801c6ee:	bf00      	nop
 801c6f0:	0806c8a9 	.word	0x0806c8a9
 801c6f4:	0806c8ba 	.word	0x0806c8ba

0801c6f8 <__mcmp>:
 801c6f8:	690a      	ldr	r2, [r1, #16]
 801c6fa:	4603      	mov	r3, r0
 801c6fc:	6900      	ldr	r0, [r0, #16]
 801c6fe:	1a80      	subs	r0, r0, r2
 801c700:	b530      	push	{r4, r5, lr}
 801c702:	d10e      	bne.n	801c722 <__mcmp+0x2a>
 801c704:	3314      	adds	r3, #20
 801c706:	3114      	adds	r1, #20
 801c708:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c70c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c710:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c714:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c718:	4295      	cmp	r5, r2
 801c71a:	d003      	beq.n	801c724 <__mcmp+0x2c>
 801c71c:	d205      	bcs.n	801c72a <__mcmp+0x32>
 801c71e:	f04f 30ff 	mov.w	r0, #4294967295
 801c722:	bd30      	pop	{r4, r5, pc}
 801c724:	42a3      	cmp	r3, r4
 801c726:	d3f3      	bcc.n	801c710 <__mcmp+0x18>
 801c728:	e7fb      	b.n	801c722 <__mcmp+0x2a>
 801c72a:	2001      	movs	r0, #1
 801c72c:	e7f9      	b.n	801c722 <__mcmp+0x2a>
	...

0801c730 <__mdiff>:
 801c730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c734:	4689      	mov	r9, r1
 801c736:	4606      	mov	r6, r0
 801c738:	4611      	mov	r1, r2
 801c73a:	4648      	mov	r0, r9
 801c73c:	4614      	mov	r4, r2
 801c73e:	f7ff ffdb 	bl	801c6f8 <__mcmp>
 801c742:	1e05      	subs	r5, r0, #0
 801c744:	d112      	bne.n	801c76c <__mdiff+0x3c>
 801c746:	4629      	mov	r1, r5
 801c748:	4630      	mov	r0, r6
 801c74a:	f7ff fd5b 	bl	801c204 <_Balloc>
 801c74e:	4602      	mov	r2, r0
 801c750:	b928      	cbnz	r0, 801c75e <__mdiff+0x2e>
 801c752:	4b3f      	ldr	r3, [pc, #252]	@ (801c850 <__mdiff+0x120>)
 801c754:	f240 2137 	movw	r1, #567	@ 0x237
 801c758:	483e      	ldr	r0, [pc, #248]	@ (801c854 <__mdiff+0x124>)
 801c75a:	f7fe fe9f 	bl	801b49c <__assert_func>
 801c75e:	2301      	movs	r3, #1
 801c760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c764:	4610      	mov	r0, r2
 801c766:	b003      	add	sp, #12
 801c768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c76c:	bfbc      	itt	lt
 801c76e:	464b      	movlt	r3, r9
 801c770:	46a1      	movlt	r9, r4
 801c772:	4630      	mov	r0, r6
 801c774:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c778:	bfba      	itte	lt
 801c77a:	461c      	movlt	r4, r3
 801c77c:	2501      	movlt	r5, #1
 801c77e:	2500      	movge	r5, #0
 801c780:	f7ff fd40 	bl	801c204 <_Balloc>
 801c784:	4602      	mov	r2, r0
 801c786:	b918      	cbnz	r0, 801c790 <__mdiff+0x60>
 801c788:	4b31      	ldr	r3, [pc, #196]	@ (801c850 <__mdiff+0x120>)
 801c78a:	f240 2145 	movw	r1, #581	@ 0x245
 801c78e:	e7e3      	b.n	801c758 <__mdiff+0x28>
 801c790:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c794:	6926      	ldr	r6, [r4, #16]
 801c796:	60c5      	str	r5, [r0, #12]
 801c798:	f109 0310 	add.w	r3, r9, #16
 801c79c:	f109 0514 	add.w	r5, r9, #20
 801c7a0:	f104 0e14 	add.w	lr, r4, #20
 801c7a4:	f100 0b14 	add.w	fp, r0, #20
 801c7a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c7ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c7b0:	9301      	str	r3, [sp, #4]
 801c7b2:	46d9      	mov	r9, fp
 801c7b4:	f04f 0c00 	mov.w	ip, #0
 801c7b8:	9b01      	ldr	r3, [sp, #4]
 801c7ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c7be:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c7c2:	9301      	str	r3, [sp, #4]
 801c7c4:	fa1f f38a 	uxth.w	r3, sl
 801c7c8:	4619      	mov	r1, r3
 801c7ca:	b283      	uxth	r3, r0
 801c7cc:	1acb      	subs	r3, r1, r3
 801c7ce:	0c00      	lsrs	r0, r0, #16
 801c7d0:	4463      	add	r3, ip
 801c7d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c7d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c7da:	b29b      	uxth	r3, r3
 801c7dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c7e0:	4576      	cmp	r6, lr
 801c7e2:	f849 3b04 	str.w	r3, [r9], #4
 801c7e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c7ea:	d8e5      	bhi.n	801c7b8 <__mdiff+0x88>
 801c7ec:	1b33      	subs	r3, r6, r4
 801c7ee:	3b15      	subs	r3, #21
 801c7f0:	f023 0303 	bic.w	r3, r3, #3
 801c7f4:	3415      	adds	r4, #21
 801c7f6:	3304      	adds	r3, #4
 801c7f8:	42a6      	cmp	r6, r4
 801c7fa:	bf38      	it	cc
 801c7fc:	2304      	movcc	r3, #4
 801c7fe:	441d      	add	r5, r3
 801c800:	445b      	add	r3, fp
 801c802:	461e      	mov	r6, r3
 801c804:	462c      	mov	r4, r5
 801c806:	4544      	cmp	r4, r8
 801c808:	d30e      	bcc.n	801c828 <__mdiff+0xf8>
 801c80a:	f108 0103 	add.w	r1, r8, #3
 801c80e:	1b49      	subs	r1, r1, r5
 801c810:	f021 0103 	bic.w	r1, r1, #3
 801c814:	3d03      	subs	r5, #3
 801c816:	45a8      	cmp	r8, r5
 801c818:	bf38      	it	cc
 801c81a:	2100      	movcc	r1, #0
 801c81c:	440b      	add	r3, r1
 801c81e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c822:	b191      	cbz	r1, 801c84a <__mdiff+0x11a>
 801c824:	6117      	str	r7, [r2, #16]
 801c826:	e79d      	b.n	801c764 <__mdiff+0x34>
 801c828:	f854 1b04 	ldr.w	r1, [r4], #4
 801c82c:	46e6      	mov	lr, ip
 801c82e:	0c08      	lsrs	r0, r1, #16
 801c830:	fa1c fc81 	uxtah	ip, ip, r1
 801c834:	4471      	add	r1, lr
 801c836:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c83a:	b289      	uxth	r1, r1
 801c83c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c840:	f846 1b04 	str.w	r1, [r6], #4
 801c844:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c848:	e7dd      	b.n	801c806 <__mdiff+0xd6>
 801c84a:	3f01      	subs	r7, #1
 801c84c:	e7e7      	b.n	801c81e <__mdiff+0xee>
 801c84e:	bf00      	nop
 801c850:	0806c8a9 	.word	0x0806c8a9
 801c854:	0806c8ba 	.word	0x0806c8ba

0801c858 <__d2b>:
 801c858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c85c:	460f      	mov	r7, r1
 801c85e:	2101      	movs	r1, #1
 801c860:	ec59 8b10 	vmov	r8, r9, d0
 801c864:	4616      	mov	r6, r2
 801c866:	f7ff fccd 	bl	801c204 <_Balloc>
 801c86a:	4604      	mov	r4, r0
 801c86c:	b930      	cbnz	r0, 801c87c <__d2b+0x24>
 801c86e:	4602      	mov	r2, r0
 801c870:	4b23      	ldr	r3, [pc, #140]	@ (801c900 <__d2b+0xa8>)
 801c872:	4824      	ldr	r0, [pc, #144]	@ (801c904 <__d2b+0xac>)
 801c874:	f240 310f 	movw	r1, #783	@ 0x30f
 801c878:	f7fe fe10 	bl	801b49c <__assert_func>
 801c87c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c884:	b10d      	cbz	r5, 801c88a <__d2b+0x32>
 801c886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c88a:	9301      	str	r3, [sp, #4]
 801c88c:	f1b8 0300 	subs.w	r3, r8, #0
 801c890:	d023      	beq.n	801c8da <__d2b+0x82>
 801c892:	4668      	mov	r0, sp
 801c894:	9300      	str	r3, [sp, #0]
 801c896:	f7ff fd7c 	bl	801c392 <__lo0bits>
 801c89a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c89e:	b1d0      	cbz	r0, 801c8d6 <__d2b+0x7e>
 801c8a0:	f1c0 0320 	rsb	r3, r0, #32
 801c8a4:	fa02 f303 	lsl.w	r3, r2, r3
 801c8a8:	430b      	orrs	r3, r1
 801c8aa:	40c2      	lsrs	r2, r0
 801c8ac:	6163      	str	r3, [r4, #20]
 801c8ae:	9201      	str	r2, [sp, #4]
 801c8b0:	9b01      	ldr	r3, [sp, #4]
 801c8b2:	61a3      	str	r3, [r4, #24]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	bf0c      	ite	eq
 801c8b8:	2201      	moveq	r2, #1
 801c8ba:	2202      	movne	r2, #2
 801c8bc:	6122      	str	r2, [r4, #16]
 801c8be:	b1a5      	cbz	r5, 801c8ea <__d2b+0x92>
 801c8c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c8c4:	4405      	add	r5, r0
 801c8c6:	603d      	str	r5, [r7, #0]
 801c8c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c8cc:	6030      	str	r0, [r6, #0]
 801c8ce:	4620      	mov	r0, r4
 801c8d0:	b003      	add	sp, #12
 801c8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8d6:	6161      	str	r1, [r4, #20]
 801c8d8:	e7ea      	b.n	801c8b0 <__d2b+0x58>
 801c8da:	a801      	add	r0, sp, #4
 801c8dc:	f7ff fd59 	bl	801c392 <__lo0bits>
 801c8e0:	9b01      	ldr	r3, [sp, #4]
 801c8e2:	6163      	str	r3, [r4, #20]
 801c8e4:	3020      	adds	r0, #32
 801c8e6:	2201      	movs	r2, #1
 801c8e8:	e7e8      	b.n	801c8bc <__d2b+0x64>
 801c8ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c8ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c8f2:	6038      	str	r0, [r7, #0]
 801c8f4:	6918      	ldr	r0, [r3, #16]
 801c8f6:	f7ff fd2d 	bl	801c354 <__hi0bits>
 801c8fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c8fe:	e7e5      	b.n	801c8cc <__d2b+0x74>
 801c900:	0806c8a9 	.word	0x0806c8a9
 801c904:	0806c8ba 	.word	0x0806c8ba

0801c908 <__sfputc_r>:
 801c908:	6893      	ldr	r3, [r2, #8]
 801c90a:	3b01      	subs	r3, #1
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	b410      	push	{r4}
 801c910:	6093      	str	r3, [r2, #8]
 801c912:	da08      	bge.n	801c926 <__sfputc_r+0x1e>
 801c914:	6994      	ldr	r4, [r2, #24]
 801c916:	42a3      	cmp	r3, r4
 801c918:	db01      	blt.n	801c91e <__sfputc_r+0x16>
 801c91a:	290a      	cmp	r1, #10
 801c91c:	d103      	bne.n	801c926 <__sfputc_r+0x1e>
 801c91e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c922:	f7fe bc4b 	b.w	801b1bc <__swbuf_r>
 801c926:	6813      	ldr	r3, [r2, #0]
 801c928:	1c58      	adds	r0, r3, #1
 801c92a:	6010      	str	r0, [r2, #0]
 801c92c:	7019      	strb	r1, [r3, #0]
 801c92e:	4608      	mov	r0, r1
 801c930:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c934:	4770      	bx	lr

0801c936 <__sfputs_r>:
 801c936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c938:	4606      	mov	r6, r0
 801c93a:	460f      	mov	r7, r1
 801c93c:	4614      	mov	r4, r2
 801c93e:	18d5      	adds	r5, r2, r3
 801c940:	42ac      	cmp	r4, r5
 801c942:	d101      	bne.n	801c948 <__sfputs_r+0x12>
 801c944:	2000      	movs	r0, #0
 801c946:	e007      	b.n	801c958 <__sfputs_r+0x22>
 801c948:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c94c:	463a      	mov	r2, r7
 801c94e:	4630      	mov	r0, r6
 801c950:	f7ff ffda 	bl	801c908 <__sfputc_r>
 801c954:	1c43      	adds	r3, r0, #1
 801c956:	d1f3      	bne.n	801c940 <__sfputs_r+0xa>
 801c958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c95c <_vfiprintf_r>:
 801c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c960:	460d      	mov	r5, r1
 801c962:	b09d      	sub	sp, #116	@ 0x74
 801c964:	4614      	mov	r4, r2
 801c966:	4698      	mov	r8, r3
 801c968:	4606      	mov	r6, r0
 801c96a:	b118      	cbz	r0, 801c974 <_vfiprintf_r+0x18>
 801c96c:	6a03      	ldr	r3, [r0, #32]
 801c96e:	b90b      	cbnz	r3, 801c974 <_vfiprintf_r+0x18>
 801c970:	f7fe fb30 	bl	801afd4 <__sinit>
 801c974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c976:	07d9      	lsls	r1, r3, #31
 801c978:	d405      	bmi.n	801c986 <_vfiprintf_r+0x2a>
 801c97a:	89ab      	ldrh	r3, [r5, #12]
 801c97c:	059a      	lsls	r2, r3, #22
 801c97e:	d402      	bmi.n	801c986 <_vfiprintf_r+0x2a>
 801c980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c982:	f7fe fd72 	bl	801b46a <__retarget_lock_acquire_recursive>
 801c986:	89ab      	ldrh	r3, [r5, #12]
 801c988:	071b      	lsls	r3, r3, #28
 801c98a:	d501      	bpl.n	801c990 <_vfiprintf_r+0x34>
 801c98c:	692b      	ldr	r3, [r5, #16]
 801c98e:	b99b      	cbnz	r3, 801c9b8 <_vfiprintf_r+0x5c>
 801c990:	4629      	mov	r1, r5
 801c992:	4630      	mov	r0, r6
 801c994:	f7fe fc50 	bl	801b238 <__swsetup_r>
 801c998:	b170      	cbz	r0, 801c9b8 <_vfiprintf_r+0x5c>
 801c99a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c99c:	07dc      	lsls	r4, r3, #31
 801c99e:	d504      	bpl.n	801c9aa <_vfiprintf_r+0x4e>
 801c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c9a4:	b01d      	add	sp, #116	@ 0x74
 801c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9aa:	89ab      	ldrh	r3, [r5, #12]
 801c9ac:	0598      	lsls	r0, r3, #22
 801c9ae:	d4f7      	bmi.n	801c9a0 <_vfiprintf_r+0x44>
 801c9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c9b2:	f7fe fd5b 	bl	801b46c <__retarget_lock_release_recursive>
 801c9b6:	e7f3      	b.n	801c9a0 <_vfiprintf_r+0x44>
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9bc:	2320      	movs	r3, #32
 801c9be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9c6:	2330      	movs	r3, #48	@ 0x30
 801c9c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cb78 <_vfiprintf_r+0x21c>
 801c9cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c9d0:	f04f 0901 	mov.w	r9, #1
 801c9d4:	4623      	mov	r3, r4
 801c9d6:	469a      	mov	sl, r3
 801c9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9dc:	b10a      	cbz	r2, 801c9e2 <_vfiprintf_r+0x86>
 801c9de:	2a25      	cmp	r2, #37	@ 0x25
 801c9e0:	d1f9      	bne.n	801c9d6 <_vfiprintf_r+0x7a>
 801c9e2:	ebba 0b04 	subs.w	fp, sl, r4
 801c9e6:	d00b      	beq.n	801ca00 <_vfiprintf_r+0xa4>
 801c9e8:	465b      	mov	r3, fp
 801c9ea:	4622      	mov	r2, r4
 801c9ec:	4629      	mov	r1, r5
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	f7ff ffa1 	bl	801c936 <__sfputs_r>
 801c9f4:	3001      	adds	r0, #1
 801c9f6:	f000 80a7 	beq.w	801cb48 <_vfiprintf_r+0x1ec>
 801c9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9fc:	445a      	add	r2, fp
 801c9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca00:	f89a 3000 	ldrb.w	r3, [sl]
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	f000 809f 	beq.w	801cb48 <_vfiprintf_r+0x1ec>
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 801ca10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca14:	f10a 0a01 	add.w	sl, sl, #1
 801ca18:	9304      	str	r3, [sp, #16]
 801ca1a:	9307      	str	r3, [sp, #28]
 801ca1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca20:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca22:	4654      	mov	r4, sl
 801ca24:	2205      	movs	r2, #5
 801ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca2a:	4853      	ldr	r0, [pc, #332]	@ (801cb78 <_vfiprintf_r+0x21c>)
 801ca2c:	f7e3 fbe8 	bl	8000200 <memchr>
 801ca30:	9a04      	ldr	r2, [sp, #16]
 801ca32:	b9d8      	cbnz	r0, 801ca6c <_vfiprintf_r+0x110>
 801ca34:	06d1      	lsls	r1, r2, #27
 801ca36:	bf44      	itt	mi
 801ca38:	2320      	movmi	r3, #32
 801ca3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca3e:	0713      	lsls	r3, r2, #28
 801ca40:	bf44      	itt	mi
 801ca42:	232b      	movmi	r3, #43	@ 0x2b
 801ca44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca48:	f89a 3000 	ldrb.w	r3, [sl]
 801ca4c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca4e:	d015      	beq.n	801ca7c <_vfiprintf_r+0x120>
 801ca50:	9a07      	ldr	r2, [sp, #28]
 801ca52:	4654      	mov	r4, sl
 801ca54:	2000      	movs	r0, #0
 801ca56:	f04f 0c0a 	mov.w	ip, #10
 801ca5a:	4621      	mov	r1, r4
 801ca5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca60:	3b30      	subs	r3, #48	@ 0x30
 801ca62:	2b09      	cmp	r3, #9
 801ca64:	d94b      	bls.n	801cafe <_vfiprintf_r+0x1a2>
 801ca66:	b1b0      	cbz	r0, 801ca96 <_vfiprintf_r+0x13a>
 801ca68:	9207      	str	r2, [sp, #28]
 801ca6a:	e014      	b.n	801ca96 <_vfiprintf_r+0x13a>
 801ca6c:	eba0 0308 	sub.w	r3, r0, r8
 801ca70:	fa09 f303 	lsl.w	r3, r9, r3
 801ca74:	4313      	orrs	r3, r2
 801ca76:	9304      	str	r3, [sp, #16]
 801ca78:	46a2      	mov	sl, r4
 801ca7a:	e7d2      	b.n	801ca22 <_vfiprintf_r+0xc6>
 801ca7c:	9b03      	ldr	r3, [sp, #12]
 801ca7e:	1d19      	adds	r1, r3, #4
 801ca80:	681b      	ldr	r3, [r3, #0]
 801ca82:	9103      	str	r1, [sp, #12]
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	bfbb      	ittet	lt
 801ca88:	425b      	neglt	r3, r3
 801ca8a:	f042 0202 	orrlt.w	r2, r2, #2
 801ca8e:	9307      	strge	r3, [sp, #28]
 801ca90:	9307      	strlt	r3, [sp, #28]
 801ca92:	bfb8      	it	lt
 801ca94:	9204      	strlt	r2, [sp, #16]
 801ca96:	7823      	ldrb	r3, [r4, #0]
 801ca98:	2b2e      	cmp	r3, #46	@ 0x2e
 801ca9a:	d10a      	bne.n	801cab2 <_vfiprintf_r+0x156>
 801ca9c:	7863      	ldrb	r3, [r4, #1]
 801ca9e:	2b2a      	cmp	r3, #42	@ 0x2a
 801caa0:	d132      	bne.n	801cb08 <_vfiprintf_r+0x1ac>
 801caa2:	9b03      	ldr	r3, [sp, #12]
 801caa4:	1d1a      	adds	r2, r3, #4
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	9203      	str	r2, [sp, #12]
 801caaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801caae:	3402      	adds	r4, #2
 801cab0:	9305      	str	r3, [sp, #20]
 801cab2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cb88 <_vfiprintf_r+0x22c>
 801cab6:	7821      	ldrb	r1, [r4, #0]
 801cab8:	2203      	movs	r2, #3
 801caba:	4650      	mov	r0, sl
 801cabc:	f7e3 fba0 	bl	8000200 <memchr>
 801cac0:	b138      	cbz	r0, 801cad2 <_vfiprintf_r+0x176>
 801cac2:	9b04      	ldr	r3, [sp, #16]
 801cac4:	eba0 000a 	sub.w	r0, r0, sl
 801cac8:	2240      	movs	r2, #64	@ 0x40
 801caca:	4082      	lsls	r2, r0
 801cacc:	4313      	orrs	r3, r2
 801cace:	3401      	adds	r4, #1
 801cad0:	9304      	str	r3, [sp, #16]
 801cad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cad6:	4829      	ldr	r0, [pc, #164]	@ (801cb7c <_vfiprintf_r+0x220>)
 801cad8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cadc:	2206      	movs	r2, #6
 801cade:	f7e3 fb8f 	bl	8000200 <memchr>
 801cae2:	2800      	cmp	r0, #0
 801cae4:	d03f      	beq.n	801cb66 <_vfiprintf_r+0x20a>
 801cae6:	4b26      	ldr	r3, [pc, #152]	@ (801cb80 <_vfiprintf_r+0x224>)
 801cae8:	bb1b      	cbnz	r3, 801cb32 <_vfiprintf_r+0x1d6>
 801caea:	9b03      	ldr	r3, [sp, #12]
 801caec:	3307      	adds	r3, #7
 801caee:	f023 0307 	bic.w	r3, r3, #7
 801caf2:	3308      	adds	r3, #8
 801caf4:	9303      	str	r3, [sp, #12]
 801caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801caf8:	443b      	add	r3, r7
 801cafa:	9309      	str	r3, [sp, #36]	@ 0x24
 801cafc:	e76a      	b.n	801c9d4 <_vfiprintf_r+0x78>
 801cafe:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb02:	460c      	mov	r4, r1
 801cb04:	2001      	movs	r0, #1
 801cb06:	e7a8      	b.n	801ca5a <_vfiprintf_r+0xfe>
 801cb08:	2300      	movs	r3, #0
 801cb0a:	3401      	adds	r4, #1
 801cb0c:	9305      	str	r3, [sp, #20]
 801cb0e:	4619      	mov	r1, r3
 801cb10:	f04f 0c0a 	mov.w	ip, #10
 801cb14:	4620      	mov	r0, r4
 801cb16:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb1a:	3a30      	subs	r2, #48	@ 0x30
 801cb1c:	2a09      	cmp	r2, #9
 801cb1e:	d903      	bls.n	801cb28 <_vfiprintf_r+0x1cc>
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d0c6      	beq.n	801cab2 <_vfiprintf_r+0x156>
 801cb24:	9105      	str	r1, [sp, #20]
 801cb26:	e7c4      	b.n	801cab2 <_vfiprintf_r+0x156>
 801cb28:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb2c:	4604      	mov	r4, r0
 801cb2e:	2301      	movs	r3, #1
 801cb30:	e7f0      	b.n	801cb14 <_vfiprintf_r+0x1b8>
 801cb32:	ab03      	add	r3, sp, #12
 801cb34:	9300      	str	r3, [sp, #0]
 801cb36:	462a      	mov	r2, r5
 801cb38:	4b12      	ldr	r3, [pc, #72]	@ (801cb84 <_vfiprintf_r+0x228>)
 801cb3a:	a904      	add	r1, sp, #16
 801cb3c:	4630      	mov	r0, r6
 801cb3e:	f7fd fe05 	bl	801a74c <_printf_float>
 801cb42:	4607      	mov	r7, r0
 801cb44:	1c78      	adds	r0, r7, #1
 801cb46:	d1d6      	bne.n	801caf6 <_vfiprintf_r+0x19a>
 801cb48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cb4a:	07d9      	lsls	r1, r3, #31
 801cb4c:	d405      	bmi.n	801cb5a <_vfiprintf_r+0x1fe>
 801cb4e:	89ab      	ldrh	r3, [r5, #12]
 801cb50:	059a      	lsls	r2, r3, #22
 801cb52:	d402      	bmi.n	801cb5a <_vfiprintf_r+0x1fe>
 801cb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cb56:	f7fe fc89 	bl	801b46c <__retarget_lock_release_recursive>
 801cb5a:	89ab      	ldrh	r3, [r5, #12]
 801cb5c:	065b      	lsls	r3, r3, #25
 801cb5e:	f53f af1f 	bmi.w	801c9a0 <_vfiprintf_r+0x44>
 801cb62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cb64:	e71e      	b.n	801c9a4 <_vfiprintf_r+0x48>
 801cb66:	ab03      	add	r3, sp, #12
 801cb68:	9300      	str	r3, [sp, #0]
 801cb6a:	462a      	mov	r2, r5
 801cb6c:	4b05      	ldr	r3, [pc, #20]	@ (801cb84 <_vfiprintf_r+0x228>)
 801cb6e:	a904      	add	r1, sp, #16
 801cb70:	4630      	mov	r0, r6
 801cb72:	f7fe f883 	bl	801ac7c <_printf_i>
 801cb76:	e7e4      	b.n	801cb42 <_vfiprintf_r+0x1e6>
 801cb78:	0806ca10 	.word	0x0806ca10
 801cb7c:	0806ca1a 	.word	0x0806ca1a
 801cb80:	0801a74d 	.word	0x0801a74d
 801cb84:	0801c937 	.word	0x0801c937
 801cb88:	0806ca16 	.word	0x0806ca16

0801cb8c <__sflush_r>:
 801cb8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb94:	0716      	lsls	r6, r2, #28
 801cb96:	4605      	mov	r5, r0
 801cb98:	460c      	mov	r4, r1
 801cb9a:	d454      	bmi.n	801cc46 <__sflush_r+0xba>
 801cb9c:	684b      	ldr	r3, [r1, #4]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	dc02      	bgt.n	801cba8 <__sflush_r+0x1c>
 801cba2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	dd48      	ble.n	801cc3a <__sflush_r+0xae>
 801cba8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbaa:	2e00      	cmp	r6, #0
 801cbac:	d045      	beq.n	801cc3a <__sflush_r+0xae>
 801cbae:	2300      	movs	r3, #0
 801cbb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cbb4:	682f      	ldr	r7, [r5, #0]
 801cbb6:	6a21      	ldr	r1, [r4, #32]
 801cbb8:	602b      	str	r3, [r5, #0]
 801cbba:	d030      	beq.n	801cc1e <__sflush_r+0x92>
 801cbbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cbbe:	89a3      	ldrh	r3, [r4, #12]
 801cbc0:	0759      	lsls	r1, r3, #29
 801cbc2:	d505      	bpl.n	801cbd0 <__sflush_r+0x44>
 801cbc4:	6863      	ldr	r3, [r4, #4]
 801cbc6:	1ad2      	subs	r2, r2, r3
 801cbc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbca:	b10b      	cbz	r3, 801cbd0 <__sflush_r+0x44>
 801cbcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cbce:	1ad2      	subs	r2, r2, r3
 801cbd0:	2300      	movs	r3, #0
 801cbd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbd4:	6a21      	ldr	r1, [r4, #32]
 801cbd6:	4628      	mov	r0, r5
 801cbd8:	47b0      	blx	r6
 801cbda:	1c43      	adds	r3, r0, #1
 801cbdc:	89a3      	ldrh	r3, [r4, #12]
 801cbde:	d106      	bne.n	801cbee <__sflush_r+0x62>
 801cbe0:	6829      	ldr	r1, [r5, #0]
 801cbe2:	291d      	cmp	r1, #29
 801cbe4:	d82b      	bhi.n	801cc3e <__sflush_r+0xb2>
 801cbe6:	4a2a      	ldr	r2, [pc, #168]	@ (801cc90 <__sflush_r+0x104>)
 801cbe8:	410a      	asrs	r2, r1
 801cbea:	07d6      	lsls	r6, r2, #31
 801cbec:	d427      	bmi.n	801cc3e <__sflush_r+0xb2>
 801cbee:	2200      	movs	r2, #0
 801cbf0:	6062      	str	r2, [r4, #4]
 801cbf2:	04d9      	lsls	r1, r3, #19
 801cbf4:	6922      	ldr	r2, [r4, #16]
 801cbf6:	6022      	str	r2, [r4, #0]
 801cbf8:	d504      	bpl.n	801cc04 <__sflush_r+0x78>
 801cbfa:	1c42      	adds	r2, r0, #1
 801cbfc:	d101      	bne.n	801cc02 <__sflush_r+0x76>
 801cbfe:	682b      	ldr	r3, [r5, #0]
 801cc00:	b903      	cbnz	r3, 801cc04 <__sflush_r+0x78>
 801cc02:	6560      	str	r0, [r4, #84]	@ 0x54
 801cc04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cc06:	602f      	str	r7, [r5, #0]
 801cc08:	b1b9      	cbz	r1, 801cc3a <__sflush_r+0xae>
 801cc0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cc0e:	4299      	cmp	r1, r3
 801cc10:	d002      	beq.n	801cc18 <__sflush_r+0x8c>
 801cc12:	4628      	mov	r0, r5
 801cc14:	f7ff faac 	bl	801c170 <_free_r>
 801cc18:	2300      	movs	r3, #0
 801cc1a:	6363      	str	r3, [r4, #52]	@ 0x34
 801cc1c:	e00d      	b.n	801cc3a <__sflush_r+0xae>
 801cc1e:	2301      	movs	r3, #1
 801cc20:	4628      	mov	r0, r5
 801cc22:	47b0      	blx	r6
 801cc24:	4602      	mov	r2, r0
 801cc26:	1c50      	adds	r0, r2, #1
 801cc28:	d1c9      	bne.n	801cbbe <__sflush_r+0x32>
 801cc2a:	682b      	ldr	r3, [r5, #0]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d0c6      	beq.n	801cbbe <__sflush_r+0x32>
 801cc30:	2b1d      	cmp	r3, #29
 801cc32:	d001      	beq.n	801cc38 <__sflush_r+0xac>
 801cc34:	2b16      	cmp	r3, #22
 801cc36:	d11e      	bne.n	801cc76 <__sflush_r+0xea>
 801cc38:	602f      	str	r7, [r5, #0]
 801cc3a:	2000      	movs	r0, #0
 801cc3c:	e022      	b.n	801cc84 <__sflush_r+0xf8>
 801cc3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc42:	b21b      	sxth	r3, r3
 801cc44:	e01b      	b.n	801cc7e <__sflush_r+0xf2>
 801cc46:	690f      	ldr	r7, [r1, #16]
 801cc48:	2f00      	cmp	r7, #0
 801cc4a:	d0f6      	beq.n	801cc3a <__sflush_r+0xae>
 801cc4c:	0793      	lsls	r3, r2, #30
 801cc4e:	680e      	ldr	r6, [r1, #0]
 801cc50:	bf08      	it	eq
 801cc52:	694b      	ldreq	r3, [r1, #20]
 801cc54:	600f      	str	r7, [r1, #0]
 801cc56:	bf18      	it	ne
 801cc58:	2300      	movne	r3, #0
 801cc5a:	eba6 0807 	sub.w	r8, r6, r7
 801cc5e:	608b      	str	r3, [r1, #8]
 801cc60:	f1b8 0f00 	cmp.w	r8, #0
 801cc64:	dde9      	ble.n	801cc3a <__sflush_r+0xae>
 801cc66:	6a21      	ldr	r1, [r4, #32]
 801cc68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cc6a:	4643      	mov	r3, r8
 801cc6c:	463a      	mov	r2, r7
 801cc6e:	4628      	mov	r0, r5
 801cc70:	47b0      	blx	r6
 801cc72:	2800      	cmp	r0, #0
 801cc74:	dc08      	bgt.n	801cc88 <__sflush_r+0xfc>
 801cc76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc7e:	81a3      	strh	r3, [r4, #12]
 801cc80:	f04f 30ff 	mov.w	r0, #4294967295
 801cc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc88:	4407      	add	r7, r0
 801cc8a:	eba8 0800 	sub.w	r8, r8, r0
 801cc8e:	e7e7      	b.n	801cc60 <__sflush_r+0xd4>
 801cc90:	dfbffffe 	.word	0xdfbffffe

0801cc94 <_fflush_r>:
 801cc94:	b538      	push	{r3, r4, r5, lr}
 801cc96:	690b      	ldr	r3, [r1, #16]
 801cc98:	4605      	mov	r5, r0
 801cc9a:	460c      	mov	r4, r1
 801cc9c:	b913      	cbnz	r3, 801cca4 <_fflush_r+0x10>
 801cc9e:	2500      	movs	r5, #0
 801cca0:	4628      	mov	r0, r5
 801cca2:	bd38      	pop	{r3, r4, r5, pc}
 801cca4:	b118      	cbz	r0, 801ccae <_fflush_r+0x1a>
 801cca6:	6a03      	ldr	r3, [r0, #32]
 801cca8:	b90b      	cbnz	r3, 801ccae <_fflush_r+0x1a>
 801ccaa:	f7fe f993 	bl	801afd4 <__sinit>
 801ccae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d0f3      	beq.n	801cc9e <_fflush_r+0xa>
 801ccb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ccb8:	07d0      	lsls	r0, r2, #31
 801ccba:	d404      	bmi.n	801ccc6 <_fflush_r+0x32>
 801ccbc:	0599      	lsls	r1, r3, #22
 801ccbe:	d402      	bmi.n	801ccc6 <_fflush_r+0x32>
 801ccc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ccc2:	f7fe fbd2 	bl	801b46a <__retarget_lock_acquire_recursive>
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	4621      	mov	r1, r4
 801ccca:	f7ff ff5f 	bl	801cb8c <__sflush_r>
 801ccce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ccd0:	07da      	lsls	r2, r3, #31
 801ccd2:	4605      	mov	r5, r0
 801ccd4:	d4e4      	bmi.n	801cca0 <_fflush_r+0xc>
 801ccd6:	89a3      	ldrh	r3, [r4, #12]
 801ccd8:	059b      	lsls	r3, r3, #22
 801ccda:	d4e1      	bmi.n	801cca0 <_fflush_r+0xc>
 801ccdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ccde:	f7fe fbc5 	bl	801b46c <__retarget_lock_release_recursive>
 801cce2:	e7dd      	b.n	801cca0 <_fflush_r+0xc>

0801cce4 <fiprintf>:
 801cce4:	b40e      	push	{r1, r2, r3}
 801cce6:	b503      	push	{r0, r1, lr}
 801cce8:	4601      	mov	r1, r0
 801ccea:	ab03      	add	r3, sp, #12
 801ccec:	4805      	ldr	r0, [pc, #20]	@ (801cd04 <fiprintf+0x20>)
 801ccee:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccf2:	6800      	ldr	r0, [r0, #0]
 801ccf4:	9301      	str	r3, [sp, #4]
 801ccf6:	f7ff fe31 	bl	801c95c <_vfiprintf_r>
 801ccfa:	b002      	add	sp, #8
 801ccfc:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd00:	b003      	add	sp, #12
 801cd02:	4770      	bx	lr
 801cd04:	200000cc 	.word	0x200000cc

0801cd08 <__swhatbuf_r>:
 801cd08:	b570      	push	{r4, r5, r6, lr}
 801cd0a:	460c      	mov	r4, r1
 801cd0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd10:	2900      	cmp	r1, #0
 801cd12:	b096      	sub	sp, #88	@ 0x58
 801cd14:	4615      	mov	r5, r2
 801cd16:	461e      	mov	r6, r3
 801cd18:	da0d      	bge.n	801cd36 <__swhatbuf_r+0x2e>
 801cd1a:	89a3      	ldrh	r3, [r4, #12]
 801cd1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801cd20:	f04f 0100 	mov.w	r1, #0
 801cd24:	bf14      	ite	ne
 801cd26:	2340      	movne	r3, #64	@ 0x40
 801cd28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801cd2c:	2000      	movs	r0, #0
 801cd2e:	6031      	str	r1, [r6, #0]
 801cd30:	602b      	str	r3, [r5, #0]
 801cd32:	b016      	add	sp, #88	@ 0x58
 801cd34:	bd70      	pop	{r4, r5, r6, pc}
 801cd36:	466a      	mov	r2, sp
 801cd38:	f000 f848 	bl	801cdcc <_fstat_r>
 801cd3c:	2800      	cmp	r0, #0
 801cd3e:	dbec      	blt.n	801cd1a <__swhatbuf_r+0x12>
 801cd40:	9901      	ldr	r1, [sp, #4]
 801cd42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801cd46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801cd4a:	4259      	negs	r1, r3
 801cd4c:	4159      	adcs	r1, r3
 801cd4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801cd52:	e7eb      	b.n	801cd2c <__swhatbuf_r+0x24>

0801cd54 <__smakebuf_r>:
 801cd54:	898b      	ldrh	r3, [r1, #12]
 801cd56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cd58:	079d      	lsls	r5, r3, #30
 801cd5a:	4606      	mov	r6, r0
 801cd5c:	460c      	mov	r4, r1
 801cd5e:	d507      	bpl.n	801cd70 <__smakebuf_r+0x1c>
 801cd60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801cd64:	6023      	str	r3, [r4, #0]
 801cd66:	6123      	str	r3, [r4, #16]
 801cd68:	2301      	movs	r3, #1
 801cd6a:	6163      	str	r3, [r4, #20]
 801cd6c:	b003      	add	sp, #12
 801cd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd70:	ab01      	add	r3, sp, #4
 801cd72:	466a      	mov	r2, sp
 801cd74:	f7ff ffc8 	bl	801cd08 <__swhatbuf_r>
 801cd78:	9f00      	ldr	r7, [sp, #0]
 801cd7a:	4605      	mov	r5, r0
 801cd7c:	4639      	mov	r1, r7
 801cd7e:	4630      	mov	r0, r6
 801cd80:	f7fd fb02 	bl	801a388 <_malloc_r>
 801cd84:	b948      	cbnz	r0, 801cd9a <__smakebuf_r+0x46>
 801cd86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd8a:	059a      	lsls	r2, r3, #22
 801cd8c:	d4ee      	bmi.n	801cd6c <__smakebuf_r+0x18>
 801cd8e:	f023 0303 	bic.w	r3, r3, #3
 801cd92:	f043 0302 	orr.w	r3, r3, #2
 801cd96:	81a3      	strh	r3, [r4, #12]
 801cd98:	e7e2      	b.n	801cd60 <__smakebuf_r+0xc>
 801cd9a:	89a3      	ldrh	r3, [r4, #12]
 801cd9c:	6020      	str	r0, [r4, #0]
 801cd9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cda2:	81a3      	strh	r3, [r4, #12]
 801cda4:	9b01      	ldr	r3, [sp, #4]
 801cda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cdaa:	b15b      	cbz	r3, 801cdc4 <__smakebuf_r+0x70>
 801cdac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cdb0:	4630      	mov	r0, r6
 801cdb2:	f000 f81d 	bl	801cdf0 <_isatty_r>
 801cdb6:	b128      	cbz	r0, 801cdc4 <__smakebuf_r+0x70>
 801cdb8:	89a3      	ldrh	r3, [r4, #12]
 801cdba:	f023 0303 	bic.w	r3, r3, #3
 801cdbe:	f043 0301 	orr.w	r3, r3, #1
 801cdc2:	81a3      	strh	r3, [r4, #12]
 801cdc4:	89a3      	ldrh	r3, [r4, #12]
 801cdc6:	431d      	orrs	r5, r3
 801cdc8:	81a5      	strh	r5, [r4, #12]
 801cdca:	e7cf      	b.n	801cd6c <__smakebuf_r+0x18>

0801cdcc <_fstat_r>:
 801cdcc:	b538      	push	{r3, r4, r5, lr}
 801cdce:	4d07      	ldr	r5, [pc, #28]	@ (801cdec <_fstat_r+0x20>)
 801cdd0:	2300      	movs	r3, #0
 801cdd2:	4604      	mov	r4, r0
 801cdd4:	4608      	mov	r0, r1
 801cdd6:	4611      	mov	r1, r2
 801cdd8:	602b      	str	r3, [r5, #0]
 801cdda:	f7e7 fa4d 	bl	8004278 <_fstat>
 801cdde:	1c43      	adds	r3, r0, #1
 801cde0:	d102      	bne.n	801cde8 <_fstat_r+0x1c>
 801cde2:	682b      	ldr	r3, [r5, #0]
 801cde4:	b103      	cbz	r3, 801cde8 <_fstat_r+0x1c>
 801cde6:	6023      	str	r3, [r4, #0]
 801cde8:	bd38      	pop	{r3, r4, r5, pc}
 801cdea:	bf00      	nop
 801cdec:	2001404c 	.word	0x2001404c

0801cdf0 <_isatty_r>:
 801cdf0:	b538      	push	{r3, r4, r5, lr}
 801cdf2:	4d06      	ldr	r5, [pc, #24]	@ (801ce0c <_isatty_r+0x1c>)
 801cdf4:	2300      	movs	r3, #0
 801cdf6:	4604      	mov	r4, r0
 801cdf8:	4608      	mov	r0, r1
 801cdfa:	602b      	str	r3, [r5, #0]
 801cdfc:	f7e7 fa4c 	bl	8004298 <_isatty>
 801ce00:	1c43      	adds	r3, r0, #1
 801ce02:	d102      	bne.n	801ce0a <_isatty_r+0x1a>
 801ce04:	682b      	ldr	r3, [r5, #0]
 801ce06:	b103      	cbz	r3, 801ce0a <_isatty_r+0x1a>
 801ce08:	6023      	str	r3, [r4, #0]
 801ce0a:	bd38      	pop	{r3, r4, r5, pc}
 801ce0c:	2001404c 	.word	0x2001404c

0801ce10 <abort>:
 801ce10:	b508      	push	{r3, lr}
 801ce12:	2006      	movs	r0, #6
 801ce14:	f000 f84a 	bl	801ceac <raise>
 801ce18:	2001      	movs	r0, #1
 801ce1a:	f7e7 f9dd 	bl	80041d8 <_exit>

0801ce1e <__ascii_mbtowc>:
 801ce1e:	b082      	sub	sp, #8
 801ce20:	b901      	cbnz	r1, 801ce24 <__ascii_mbtowc+0x6>
 801ce22:	a901      	add	r1, sp, #4
 801ce24:	b142      	cbz	r2, 801ce38 <__ascii_mbtowc+0x1a>
 801ce26:	b14b      	cbz	r3, 801ce3c <__ascii_mbtowc+0x1e>
 801ce28:	7813      	ldrb	r3, [r2, #0]
 801ce2a:	600b      	str	r3, [r1, #0]
 801ce2c:	7812      	ldrb	r2, [r2, #0]
 801ce2e:	1e10      	subs	r0, r2, #0
 801ce30:	bf18      	it	ne
 801ce32:	2001      	movne	r0, #1
 801ce34:	b002      	add	sp, #8
 801ce36:	4770      	bx	lr
 801ce38:	4610      	mov	r0, r2
 801ce3a:	e7fb      	b.n	801ce34 <__ascii_mbtowc+0x16>
 801ce3c:	f06f 0001 	mvn.w	r0, #1
 801ce40:	e7f8      	b.n	801ce34 <__ascii_mbtowc+0x16>

0801ce42 <__ascii_wctomb>:
 801ce42:	4603      	mov	r3, r0
 801ce44:	4608      	mov	r0, r1
 801ce46:	b141      	cbz	r1, 801ce5a <__ascii_wctomb+0x18>
 801ce48:	2aff      	cmp	r2, #255	@ 0xff
 801ce4a:	d904      	bls.n	801ce56 <__ascii_wctomb+0x14>
 801ce4c:	228a      	movs	r2, #138	@ 0x8a
 801ce4e:	601a      	str	r2, [r3, #0]
 801ce50:	f04f 30ff 	mov.w	r0, #4294967295
 801ce54:	4770      	bx	lr
 801ce56:	700a      	strb	r2, [r1, #0]
 801ce58:	2001      	movs	r0, #1
 801ce5a:	4770      	bx	lr

0801ce5c <_raise_r>:
 801ce5c:	291f      	cmp	r1, #31
 801ce5e:	b538      	push	{r3, r4, r5, lr}
 801ce60:	4605      	mov	r5, r0
 801ce62:	460c      	mov	r4, r1
 801ce64:	d904      	bls.n	801ce70 <_raise_r+0x14>
 801ce66:	2316      	movs	r3, #22
 801ce68:	6003      	str	r3, [r0, #0]
 801ce6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ce6e:	bd38      	pop	{r3, r4, r5, pc}
 801ce70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ce72:	b112      	cbz	r2, 801ce7a <_raise_r+0x1e>
 801ce74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ce78:	b94b      	cbnz	r3, 801ce8e <_raise_r+0x32>
 801ce7a:	4628      	mov	r0, r5
 801ce7c:	f000 f830 	bl	801cee0 <_getpid_r>
 801ce80:	4622      	mov	r2, r4
 801ce82:	4601      	mov	r1, r0
 801ce84:	4628      	mov	r0, r5
 801ce86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce8a:	f000 b817 	b.w	801cebc <_kill_r>
 801ce8e:	2b01      	cmp	r3, #1
 801ce90:	d00a      	beq.n	801cea8 <_raise_r+0x4c>
 801ce92:	1c59      	adds	r1, r3, #1
 801ce94:	d103      	bne.n	801ce9e <_raise_r+0x42>
 801ce96:	2316      	movs	r3, #22
 801ce98:	6003      	str	r3, [r0, #0]
 801ce9a:	2001      	movs	r0, #1
 801ce9c:	e7e7      	b.n	801ce6e <_raise_r+0x12>
 801ce9e:	2100      	movs	r1, #0
 801cea0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cea4:	4620      	mov	r0, r4
 801cea6:	4798      	blx	r3
 801cea8:	2000      	movs	r0, #0
 801ceaa:	e7e0      	b.n	801ce6e <_raise_r+0x12>

0801ceac <raise>:
 801ceac:	4b02      	ldr	r3, [pc, #8]	@ (801ceb8 <raise+0xc>)
 801ceae:	4601      	mov	r1, r0
 801ceb0:	6818      	ldr	r0, [r3, #0]
 801ceb2:	f7ff bfd3 	b.w	801ce5c <_raise_r>
 801ceb6:	bf00      	nop
 801ceb8:	200000cc 	.word	0x200000cc

0801cebc <_kill_r>:
 801cebc:	b538      	push	{r3, r4, r5, lr}
 801cebe:	4d07      	ldr	r5, [pc, #28]	@ (801cedc <_kill_r+0x20>)
 801cec0:	2300      	movs	r3, #0
 801cec2:	4604      	mov	r4, r0
 801cec4:	4608      	mov	r0, r1
 801cec6:	4611      	mov	r1, r2
 801cec8:	602b      	str	r3, [r5, #0]
 801ceca:	f7e7 f975 	bl	80041b8 <_kill>
 801cece:	1c43      	adds	r3, r0, #1
 801ced0:	d102      	bne.n	801ced8 <_kill_r+0x1c>
 801ced2:	682b      	ldr	r3, [r5, #0]
 801ced4:	b103      	cbz	r3, 801ced8 <_kill_r+0x1c>
 801ced6:	6023      	str	r3, [r4, #0]
 801ced8:	bd38      	pop	{r3, r4, r5, pc}
 801ceda:	bf00      	nop
 801cedc:	2001404c 	.word	0x2001404c

0801cee0 <_getpid_r>:
 801cee0:	f7e7 b962 	b.w	80041a8 <_getpid>

0801cee4 <_init>:
 801cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cee6:	bf00      	nop
 801cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ceea:	bc08      	pop	{r3}
 801ceec:	469e      	mov	lr, r3
 801ceee:	4770      	bx	lr

0801cef0 <_fini>:
 801cef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cef2:	bf00      	nop
 801cef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cef6:	bc08      	pop	{r3}
 801cef8:	469e      	mov	lr, r3
 801cefa:	4770      	bx	lr
