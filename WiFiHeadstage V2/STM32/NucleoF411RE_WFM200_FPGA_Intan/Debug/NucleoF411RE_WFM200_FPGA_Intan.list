
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dc18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00050570  0801ddb8  0801ddb8  0002ddb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e328  0806e328  00080290  2**0
                  CONTENTS
  4 .ARM          00000008  0806e328  0806e328  0007e328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e330  0806e330  00080290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e330  0806e330  0007e330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e334  0806e334  0007e334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0806e338  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013d2c  20000290  0806e5c8  00080290  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013fbc  0806e5c8  00083fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080290  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000802c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031b34  00000000  00000000  00080303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000953d  00000000  00000000  000b1e37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e0  00000000  00000000  000bb378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c16  00000000  00000000  000bd758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014288  00000000  00000000  000bf36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003af43  00000000  00000000  000d35f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6a3d  00000000  00000000  0010e539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a078  00000000  00000000  001c4f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001ceff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000290 	.word	0x20000290
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801dda0 	.word	0x0801dda0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000294 	.word	0x20000294
 80001dc:	0801dda0 	.word	0x0801dda0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <start_app_task>:




void start_app_task(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
//	INIT_UPD();
	INIT_TCP();
 8000ed8:	f000 f850 	bl	8000f7c <INIT_TCP>

//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8000edc:	2200      	movs	r2, #0
 8000ede:	210c      	movs	r1, #12
 8000ee0:	2014      	movs	r0, #20
 8000ee2:	f009 fa33 	bl	800a34c <xQueueGenericCreate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	; (8000f20 <start_app_task+0x4c>)
 8000eea:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <start_app_task+0x4c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d106      	bne.n	8000f02 <start_app_task+0x2e>
  		printf("booboo Queue \r\n");
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <start_app_task+0x50>)
 8000ef6:	f01b f805 	bl	801bf04 <puts>
  	}

  	//osTimerStart(periodicTimerHandle, UDP_FREQUENCY);
  	while (!TCP_Connected){
 8000efa:	e002      	b.n	8000f02 <start_app_task+0x2e>
  		HAL_Delay(10);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f003 f971 	bl	80041e4 <HAL_Delay>
  	while (!TCP_Connected){
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <start_app_task+0x54>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	f083 0301 	eor.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1f5      	bne.n	8000efc <start_app_task+0x28>
  	}
  	printf("Init RHD \r\n");
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <start_app_task+0x58>)
 8000f12:	f01a fff7 	bl	801bf04 <puts>
  	WIFI_MENU_INIT();
 8000f16:	f000 f8f5 	bl	8001104 <WIFI_MENU_INIT>
//  	TASK_TCP_TRANSMIT_INIT((void*) spi_to_wifi_queue);

//  	TASK_RHD64_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200002ac 	.word	0x200002ac
 8000f24:	0801ddb8 	.word	0x0801ddb8
 8000f28:	200003bc 	.word	0x200003bc
 8000f2c:	0801ddc8 	.word	0x0801ddc8

08000f30 <tcp_connected>:
extern bool TCP_Connected;
int res = -1;
err_t err;


err_t tcp_connected(void *arg, struct tcp_pcb *tpcb, err_t err) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK) {
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d107      	bne.n	8000f56 <tcp_connected+0x26>
        printf("TCP connection established successfully.\r\n");
 8000f46:	480a      	ldr	r0, [pc, #40]	; (8000f70 <tcp_connected+0x40>)
 8000f48:	f01a ffdc 	bl	801bf04 <puts>
        TCP_Connected = true;
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <tcp_connected+0x44>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
        return ERR_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e007      	b.n	8000f66 <tcp_connected+0x36>
    } else {
        printf("TCP connection error: %d\n", err);
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <tcp_connected+0x48>)
 8000f5e:	f01a ff63 	bl	801be28 <iprintf>
        return err;
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
    }
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	0801dde4 	.word	0x0801dde4
 8000f74:	200003bc 	.word	0x200003bc
 8000f78:	0801de10 	.word	0x0801de10

08000f7c <INIT_TCP>:

int INIT_TCP(void) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    res = ipaddr_aton(ip_str_server, &server_addr);
 8000f80:	4b26      	ldr	r3, [pc, #152]	; (800101c <INIT_TCP+0xa0>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4926      	ldr	r1, [pc, #152]	; (8001020 <INIT_TCP+0xa4>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f018 ff36 	bl	8019df8 <ip4addr_aton>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <INIT_TCP+0xa8>)
 8000f90:	6013      	str	r3, [r2, #0]
    if (res == 0) {
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <INIT_TCP+0xa8>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d108      	bne.n	8000fac <INIT_TCP+0x30>
        printf("Failed to convert IP address: %s\n", ip_str_server);
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <INIT_TCP+0xa0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <INIT_TCP+0xac>)
 8000fa2:	f01a ff41 	bl	801be28 <iprintf>
        return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e035      	b.n	8001018 <INIT_TCP+0x9c>
    }

    tpcb = tcp_new();
 8000fac:	f00f ffe6 	bl	8010f7c <tcp_new>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a1e      	ldr	r2, [pc, #120]	; (800102c <INIT_TCP+0xb0>)
 8000fb4:	6013      	str	r3, [r2, #0]
    if (tpcb == NULL) {
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <INIT_TCP+0xb0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <INIT_TCP+0x4e>
        printf("Failed to create TCP PCB\n");
 8000fbe:	481c      	ldr	r0, [pc, #112]	; (8001030 <INIT_TCP+0xb4>)
 8000fc0:	f01a ffa0 	bl	801bf04 <puts>
        return -2;
 8000fc4:	f06f 0301 	mvn.w	r3, #1
 8000fc8:	e026      	b.n	8001018 <INIT_TCP+0x9c>
    }

    tcp_arg(tpcb, NULL);
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <INIT_TCP+0xb0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f00f ffdb 	bl	8010f8c <tcp_arg>
    err = tcp_connect(tpcb, &server_addr, 10000, tcp_connected);
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <INIT_TCP+0xb0>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <INIT_TCP+0xb8>)
 8000fdc:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fe0:	490f      	ldr	r1, [pc, #60]	; (8001020 <INIT_TCP+0xa4>)
 8000fe2:	f00f f88f 	bl	8010104 <tcp_connect>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <INIT_TCP+0xbc>)
 8000fec:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK) {
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <INIT_TCP+0xbc>)
 8000ff0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00e      	beq.n	8001016 <INIT_TCP+0x9a>
        printf("TCP connection failed with error %d\n", err);
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <INIT_TCP+0xbc>)
 8000ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	480e      	ldr	r0, [pc, #56]	; (800103c <INIT_TCP+0xc0>)
 8001002:	f01a ff11 	bl	801be28 <iprintf>
        tcp_close(tpcb);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <INIT_TCP+0xb0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f00e fe92 	bl	800fd34 <tcp_close>
        return -3;
 8001010:	f06f 0302 	mvn.w	r3, #2
 8001014:	e000      	b.n	8001018 <INIT_TCP+0x9c>
    }

    return ERR_OK;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	200003c0 	.word	0x200003c0
 8001024:	20000004 	.word	0x20000004
 8001028:	0801de2c 	.word	0x0801de2c
 800102c:	200002b4 	.word	0x200002b4
 8001030:	0801de50 	.word	0x0801de50
 8001034:	08000f31 	.word	0x08000f31
 8001038:	200003c4 	.word	0x200003c4
 800103c:	0801de6c 	.word	0x0801de6c

08001040 <TCP_TRANSMIT_task_entry>:
}




void TCP_TRANSMIT_task_entry(void const *arg) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    struct pbuf *p = NULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    spi_to_tcp_t tcp_message = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
    uint32_t counter = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
    int BUFFER_SIZE = 1024;
 800105c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001060:	61fb      	str	r3, [r7, #28]

    tcp_message.message_lenght = BUFFER_SIZE * 2;
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	617b      	str	r3, [r7, #20]

    while (1) {
    	if (xQueueReceive((QueueHandle_t)arg, (void *)&tcp_message, (TickType_t)1) == pdPASS) {
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f009 fc19 	bl	800a8a8 <xQueueReceive>
 8001076:	4603      	mov	r3, r0
 8001078:	2b01      	cmp	r3, #1
 800107a:	d138      	bne.n	80010ee <TCP_TRANSMIT_task_entry+0xae>
//        	printf("TCP SEND %i \r\n", counter);
        	if (p == NULL){
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	2b00      	cmp	r3, #0
 8001080:	d10d      	bne.n	800109e <TCP_TRANSMIT_task_entry+0x5e>
				p = pbuf_alloc(PBUF_TRANSPORT, BUFFER_SIZE*2, PBUF_RAM);
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	b29b      	uxth	r3, r3
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	b29b      	uxth	r3, r3
 800108a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800108e:	4619      	mov	r1, r3
 8001090:	2036      	movs	r0, #54	; 0x36
 8001092:	f00d fd19 	bl	800eac8 <pbuf_alloc>
 8001096:	6278      	str	r0, [r7, #36]	; 0x24
				printf("p is NULL \r\n");
 8001098:	4817      	ldr	r0, [pc, #92]	; (80010f8 <TCP_TRANSMIT_task_entry+0xb8>)
 800109a:	f01a ff33 	bl	801bf04 <puts>
			}
        	counter ++;
 800109e:	6a3b      	ldr	r3, [r7, #32]
 80010a0:	3301      	adds	r3, #1
 80010a2:	623b      	str	r3, [r7, #32]
			//printf("%u \r\n", counter);
			//pbuf_take_at(p, counter, 2, SPI_DMA_BUFFER_SIZE);
			pbuf_take_at(p, (const void *)tcp_message.buffer, BUFFER_SIZE*2, 0);
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	2300      	movs	r3, #0
 80010b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010b2:	f00e fb37 	bl	800f724 <pbuf_take_at>
//            for (int i = 0; i < p->len/2; i++) {
//                printf("%04X ", ((uint16_t *)p->payload)[i]); // Assuming you want to print in hexadecimal format
//            }

            // Send data over the existing TCP connection
            err_t send_err = tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <TCP_TRANSMIT_task_entry+0xbc>)
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	6859      	ldr	r1, [r3, #4]
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	895a      	ldrh	r2, [r3, #10]
 80010c2:	2301      	movs	r3, #1
 80010c4:	f012 fe2e 	bl	8013d24 <tcp_write>
 80010c8:	4603      	mov	r3, r0
 80010ca:	76fb      	strb	r3, [r7, #27]
            if (send_err != ERR_OK) {
 80010cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <TCP_TRANSMIT_task_entry+0xa2>
                printf("Error sending data over TCP: %d\r\n", send_err);
 80010d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80010d8:	4619      	mov	r1, r3
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <TCP_TRANSMIT_task_entry+0xc0>)
 80010dc:	f01a fea4 	bl	801be28 <iprintf>
 80010e0:	e7c2      	b.n	8001068 <TCP_TRANSMIT_task_entry+0x28>
                // Handle the error appropriately
            } else {
                // Flush the data to ensure it's sent immediately
                tcp_output(tpcb);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <TCP_TRANSMIT_task_entry+0xbc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f013 fc64 	bl	80149b4 <tcp_output>
 80010ec:	e7bc      	b.n	8001068 <TCP_TRANSMIT_task_entry+0x28>
//            p = NULL;

			// RESET FULL_TASK_Scope_Pin
//            FULL_TASK_SCOPE_Port->BSRR = (uint32_t)FULL_TASK_SCOPE_Pin << 16U;
        } else {
            vTaskDelay(1);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f00a f9d6 	bl	800b4a0 <vTaskDelay>
    	if (xQueueReceive((QueueHandle_t)arg, (void *)&tcp_message, (TickType_t)1) == pdPASS) {
 80010f4:	e7b8      	b.n	8001068 <TCP_TRANSMIT_task_entry+0x28>
 80010f6:	bf00      	nop
 80010f8:	0801ded4 	.word	0x0801ded4
 80010fc:	200002b4 	.word	0x200002b4
 8001100:	0801dee0 	.word	0x0801dee0

08001104 <WIFI_MENU_INIT>:
void wifi_menu_start(void const *arg);
static err_t wifi_menu_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);
void intan_cutoff_menu(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err);


void WIFI_MENU_INIT(void *arg) {
 8001104:	b5b0      	push	{r4, r5, r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

    osThreadDef(wifi_menu_handle, wifi_menu_start, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <WIFI_MENU_INIT+0x38>)
 800110e:	f107 040c 	add.w	r4, r7, #12
 8001112:	461d      	mov	r5, r3
 8001114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	6023      	str	r3, [r4, #0]

    if (osThreadCreate(osThread(wifi_menu_handle), (void *) arg) == NULL) {
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f008 fc97 	bl	8009a56 <osThreadCreate>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d102      	bne.n	8001134 <WIFI_MENU_INIT+0x30>
        printf("Error creating TCP task\r\n");
 800112e:	4804      	ldr	r0, [pc, #16]	; (8001140 <WIFI_MENU_INIT+0x3c>)
 8001130:	f01a fee8 	bl	801bf04 <puts>
    }
}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bdb0      	pop	{r4, r5, r7, pc}
 800113c:	0801df34 	.word	0x0801df34
 8001140:	0801df04 	.word	0x0801df04

08001144 <wifi_menu_start>:


void wifi_menu_start(void const *arg) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
    // Set up callback function to receive data
    printf("Waiting \r\n");
 800114c:	4806      	ldr	r0, [pc, #24]	; (8001168 <wifi_menu_start+0x24>)
 800114e:	f01a fed9 	bl	801bf04 <puts>
    tcp_recv(tpcb, wifi_menu_recv_callback);  // Set the receive callback only once
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <wifi_menu_start+0x28>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4906      	ldr	r1, [pc, #24]	; (8001170 <wifi_menu_start+0x2c>)
 8001158:	4618      	mov	r0, r3
 800115a:	f00f ff29 	bl	8010fb0 <tcp_recv>

    while (1) {
        osDelay(1000);  // Some delay to keep the thread alive (replace as needed)
 800115e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001162:	f008 fcab 	bl	8009abc <osDelay>
 8001166:	e7fa      	b.n	800115e <wifi_menu_start+0x1a>
 8001168:	0801df48 	.word	0x0801df48
 800116c:	200002b4 	.word	0x200002b4
 8001170:	08001175 	.word	0x08001175

08001174 <wifi_menu_recv_callback>:

// Function prototype
static err_t send_response(struct tcp_pcb *pcb, const char *message, size_t length);

// Callback function
static err_t wifi_menu_recv_callback(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	f5ad 7d5d 	sub.w	sp, sp, #884	; 0x374
 800117a:	af00      	add	r7, sp, #0
 800117c:	f507 745c 	add.w	r4, r7, #880	; 0x370
 8001180:	f5a4 7459 	sub.w	r4, r4, #868	; 0x364
 8001184:	6020      	str	r0, [r4, #0]
 8001186:	f507 705c 	add.w	r0, r7, #880	; 0x370
 800118a:	f5a0 705a 	sub.w	r0, r0, #872	; 0x368
 800118e:	6001      	str	r1, [r0, #0]
 8001190:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8001194:	f5a1 715b 	sub.w	r1, r1, #876	; 0x36c
 8001198:	600a      	str	r2, [r1, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011a0:	f2a3 336d 	subw	r3, r3, #877	; 0x36d
 80011a4:	701a      	strb	r2, [r3, #0]
    if (err != ERR_OK || p == NULL) {
 80011a6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011aa:	f2a3 336d 	subw	r3, r3, #877	; 0x36d
 80011ae:	f993 3000 	ldrsb.w	r3, [r3]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <wifi_menu_recv_callback+0x50>
 80011b6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011ba:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d10c      	bne.n	80011de <wifi_menu_recv_callback+0x6a>
        printf("Connection closed or error occurred\n");
 80011c4:	48c5      	ldr	r0, [pc, #788]	; (80014dc <wifi_menu_recv_callback+0x368>)
 80011c6:	f01a fe9d 	bl	801bf04 <puts>
        tcp_close(pcb);
 80011ca:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011ce:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	f00e fdae 	bl	800fd34 <tcp_close>
        return ERR_ABRT;
 80011d8:	f06f 030c 	mvn.w	r3, #12
 80011dc:	e1c4      	b.n	8001568 <wifi_menu_recv_callback+0x3f4>
    }

    // Process the received data
    char *data = (char *)p->payload;
 80011de:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011e2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    if (p->len < 1) {
 80011ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80011f2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	895b      	ldrh	r3, [r3, #10]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <wifi_menu_recv_callback+0xa4>
        printf("Received empty or invalid data\r\n");
 80011fe:	48b8      	ldr	r0, [pc, #736]	; (80014e0 <wifi_menu_recv_callback+0x36c>)
 8001200:	f01a fe80 	bl	801bf04 <puts>
        pbuf_free(p);
 8001204:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001208:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f00d ff43 	bl	800f098 <pbuf_free>
        return ERR_VAL;
 8001212:	f06f 0305 	mvn.w	r3, #5
 8001216:	e1a7      	b.n	8001568 <wifi_menu_recv_callback+0x3f4>
    }

    // Handle Intan configuration mode
    if (intan_config_mode) {
 8001218:	4bb2      	ldr	r3, [pc, #712]	; (80014e4 <wifi_menu_recv_callback+0x370>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d063      	beq.n	80012e8 <wifi_menu_recv_callback+0x174>
        if (p->len < 2) {
 8001220:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001224:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	895b      	ldrh	r3, [r3, #10]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d80a      	bhi.n	8001246 <wifi_menu_recv_callback+0xd2>
            printf("Error: Expected 2 bytes for configuration choices, received %d byte(s)\r\n", p->len);
 8001230:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001234:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	895b      	ldrh	r3, [r3, #10]
 800123c:	4619      	mov	r1, r3
 800123e:	48aa      	ldr	r0, [pc, #680]	; (80014e8 <wifi_menu_recv_callback+0x374>)
 8001240:	f01a fdf2 	bl	801be28 <iprintf>
 8001244:	e044      	b.n	80012d0 <wifi_menu_recv_callback+0x15c>
        } else {
            char high_pass = data[0];
 8001246:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	f887 3368 	strb.w	r3, [r7, #872]	; 0x368
            char low_pass = data[1];
 8001250:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367

            if (((high_pass >= '0' && high_pass <= '9') || (high_pass >= 'A' && high_pass <= 'M')) &&
 800125a:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 800125e:	2b2f      	cmp	r3, #47	; 0x2f
 8001260:	d903      	bls.n	800126a <wifi_menu_recv_callback+0xf6>
 8001262:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 8001266:	2b39      	cmp	r3, #57	; 0x39
 8001268:	d907      	bls.n	800127a <wifi_menu_recv_callback+0x106>
 800126a:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 800126e:	2b40      	cmp	r3, #64	; 0x40
 8001270:	d926      	bls.n	80012c0 <wifi_menu_recv_callback+0x14c>
 8001272:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 8001276:	2b4d      	cmp	r3, #77	; 0x4d
 8001278:	d822      	bhi.n	80012c0 <wifi_menu_recv_callback+0x14c>
 800127a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800127e:	2b2f      	cmp	r3, #47	; 0x2f
 8001280:	d903      	bls.n	800128a <wifi_menu_recv_callback+0x116>
                ((low_pass >= '0' && low_pass <= '9') || (low_pass >= 'A' && low_pass <= 'H'))) {
 8001282:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8001286:	2b39      	cmp	r3, #57	; 0x39
 8001288:	d907      	bls.n	800129a <wifi_menu_recv_callback+0x126>
 800128a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 800128e:	2b40      	cmp	r3, #64	; 0x40
 8001290:	d916      	bls.n	80012c0 <wifi_menu_recv_callback+0x14c>
 8001292:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8001296:	2b48      	cmp	r3, #72	; 0x48
 8001298:	d812      	bhi.n	80012c0 <wifi_menu_recv_callback+0x14c>
                printf("Configuration choices received:\r\n");
 800129a:	4894      	ldr	r0, [pc, #592]	; (80014ec <wifi_menu_recv_callback+0x378>)
 800129c:	f01a fe32 	bl	801bf04 <puts>
                printf("High-pass filter: %c\r\n", high_pass);
 80012a0:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 80012a4:	4619      	mov	r1, r3
 80012a6:	4892      	ldr	r0, [pc, #584]	; (80014f0 <wifi_menu_recv_callback+0x37c>)
 80012a8:	f01a fdbe 	bl	801be28 <iprintf>
                printf("Low-pass filter: %c\r\n", low_pass);
 80012ac:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 80012b0:	4619      	mov	r1, r3
 80012b2:	4890      	ldr	r0, [pc, #576]	; (80014f4 <wifi_menu_recv_callback+0x380>)
 80012b4:	f01a fdb8 	bl	801be28 <iprintf>
                printf("Applying configuration...\r\n");
 80012b8:	488f      	ldr	r0, [pc, #572]	; (80014f8 <wifi_menu_recv_callback+0x384>)
 80012ba:	f01a fe23 	bl	801bf04 <puts>
 80012be:	e007      	b.n	80012d0 <wifi_menu_recv_callback+0x15c>
                // TODO: Apply the configuration
            } else {
                printf("Invalid configuration choices received: High-pass=%c, Low-pass=%c\r\n", high_pass, low_pass);
 80012c0:	f897 3368 	ldrb.w	r3, [r7, #872]	; 0x368
 80012c4:	f897 2367 	ldrb.w	r2, [r7, #871]	; 0x367
 80012c8:	4619      	mov	r1, r3
 80012ca:	488c      	ldr	r0, [pc, #560]	; (80014fc <wifi_menu_recv_callback+0x388>)
 80012cc:	f01a fdac 	bl	801be28 <iprintf>
            }
        }

        intan_config_mode = 0;  // Exit Intan configuration mode
 80012d0:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <wifi_menu_recv_callback+0x370>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
        pbuf_free(p);
 80012d6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80012da:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f00d feda 	bl	800f098 <pbuf_free>
        return ERR_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e13f      	b.n	8001568 <wifi_menu_recv_callback+0x3f4>

    else {
    	//    	data[p->len] = '\0';  // Ensure the received data is null-terminated

    	// Print each byte of data to ensure it captures all received content
        osDelay(10);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f008 fbe7 	bl	8009abc <osDelay>

        printf("Received data (length: %d): ", p->len);
 80012ee:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80012f2:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	895b      	ldrh	r3, [r3, #10]
 80012fa:	4619      	mov	r1, r3
 80012fc:	4880      	ldr	r0, [pc, #512]	; (8001500 <wifi_menu_recv_callback+0x38c>)
 80012fe:	f01a fd93 	bl	801be28 <iprintf>
		printf("%c", data[0]);  // Print character by character
 8001302:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f01a fd9f 	bl	801be4c <putchar>

        printf("\r\n");
 800130e:	487d      	ldr	r0, [pc, #500]	; (8001504 <wifi_menu_recv_callback+0x390>)
 8001310:	f01a fdf8 	bl	801bf04 <puts>
    }


    switch (data[0]) {
 8001314:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3b30      	subs	r3, #48	; 0x30
 800131c:	2b12      	cmp	r3, #18
 800131e:	f200 8117 	bhi.w	8001550 <wifi_menu_recv_callback+0x3dc>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <wifi_menu_recv_callback+0x1b4>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	08001375 	.word	0x08001375
 800132c:	080013b3 	.word	0x080013b3
 8001330:	080013cd 	.word	0x080013cd
 8001334:	08001405 	.word	0x08001405
 8001338:	08001437 	.word	0x08001437
 800133c:	0800147b 	.word	0x0800147b
 8001340:	08001551 	.word	0x08001551
 8001344:	08001551 	.word	0x08001551
 8001348:	08001551 	.word	0x08001551
 800134c:	08001551 	.word	0x08001551
 8001350:	08001551 	.word	0x08001551
 8001354:	08001551 	.word	0x08001551
 8001358:	08001551 	.word	0x08001551
 800135c:	08001551 	.word	0x08001551
 8001360:	08001551 	.word	0x08001551
 8001364:	08001551 	.word	0x08001551
 8001368:	08001551 	.word	0x08001551
 800136c:	08001541 	.word	0x08001541
 8001370:	08001549 	.word	0x08001549
        case '0':
            printf("Executing Get Menu task\r\n");
 8001374:	4864      	ldr	r0, [pc, #400]	; (8001508 <wifi_menu_recv_callback+0x394>)
 8001376:	f01a fdc5 	bl	801bf04 <puts>
            char menu[] = "*******************************************\r\n"
 800137a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800137e:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8001382:	4a62      	ldr	r2, [pc, #392]	; (800150c <wifi_menu_recv_callback+0x398>)
 8001384:	4618      	mov	r0, r3
 8001386:	4611      	mov	r1, r2
 8001388:	f240 13c3 	movw	r3, #451	; 0x1c3
 800138c:	461a      	mov	r2, r3
 800138e:	f01a ff72 	bl	801c276 <memcpy>
                          "* 4- Configure Sampling Frequency         *\r\n"
                          "* 5- Configure Intan Chip Cutoff          *\r\n"
                          "* A- Start Intan Sampling                 *\r\n"
                          "* B- Stop Intan Sampling                  *\r\n"
                          "*******************************************\r\n";
            send_response(pcb, menu, strlen(menu));  // Send menu
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ff82 	bl	80002a0 <strlen>
 800139c:	4602      	mov	r2, r0
 800139e:	f107 0110 	add.w	r1, r7, #16
 80013a2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80013a6:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f000 f8e8 	bl	8001580 <send_response>
            break;
 80013b0:	e0d2      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case '1':
            printf("Executing Get Headstage ID task\r\n");
 80013b2:	4857      	ldr	r0, [pc, #348]	; (8001510 <wifi_menu_recv_callback+0x39c>)
 80013b4:	f01a fda6 	bl	801bf04 <puts>
            send_response(pcb, DEVICE_ID, strlen(DEVICE_ID));  // Send DEVICE_ID
 80013b8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80013bc:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80013c0:	2216      	movs	r2, #22
 80013c2:	4954      	ldr	r1, [pc, #336]	; (8001514 <wifi_menu_recv_callback+0x3a0>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f000 f8db 	bl	8001580 <send_response>
            break;
 80013ca:	e0c5      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case '2':
            printf("Executing Verify Intan Chip task\r\n");
 80013cc:	4852      	ldr	r0, [pc, #328]	; (8001518 <wifi_menu_recv_callback+0x3a4>)
 80013ce:	f01a fd99 	bl	801bf04 <puts>
            char response[] = "INTAN FAKE";
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <wifi_menu_recv_callback+0x3a8>)
 80013d4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80013d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013da:	c303      	stmia	r3!, {r0, r1}
 80013dc:	801a      	strh	r2, [r3, #0]
 80013de:	3302      	adds	r3, #2
 80013e0:	0c12      	lsrs	r2, r2, #16
 80013e2:	701a      	strb	r2, [r3, #0]
            send_response(pcb, response, strlen(response));  // Intan Config
 80013e4:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff59 	bl	80002a0 <strlen>
 80013ee:	4602      	mov	r2, r0
 80013f0:	f507 7157 	add.w	r1, r7, #860	; 0x35c
 80013f4:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80013f8:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	f000 f8bf 	bl	8001580 <send_response>
            break;
 8001402:	e0a9      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case '3':
            if (p->len < 2) {
 8001404:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001408:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	895b      	ldrh	r3, [r3, #10]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d803      	bhi.n	800141c <wifi_menu_recv_callback+0x2a8>
            	printf("Invalid data length for Configure Number of Channels\r\n");
 8001414:	4842      	ldr	r0, [pc, #264]	; (8001520 <wifi_menu_recv_callback+0x3ac>)
 8001416:	f01a fd75 	bl	801bf04 <puts>
                break;
 800141a:	e09d      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>
            }
            uint8_t num_channels = data[1];
 800141c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001420:	3301      	adds	r3, #1
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	f887 3369 	strb.w	r3, [r7, #873]	; 0x369
            printf("Configuring number of channels to: %d\r\n", num_channels);
 8001428:	f897 3369 	ldrb.w	r3, [r7, #873]	; 0x369
 800142c:	4619      	mov	r1, r3
 800142e:	483d      	ldr	r0, [pc, #244]	; (8001524 <wifi_menu_recv_callback+0x3b0>)
 8001430:	f01a fcfa 	bl	801be28 <iprintf>
            // Further processing
            break;
 8001434:	e090      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case '4':
            if (p->len < 2) {
 8001436:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800143a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	895b      	ldrh	r3, [r3, #10]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d803      	bhi.n	800144e <wifi_menu_recv_callback+0x2da>
                printf("Invalid data length for Configure Sampling Frequency\r\n");
 8001446:	4838      	ldr	r0, [pc, #224]	; (8001528 <wifi_menu_recv_callback+0x3b4>)
 8001448:	f01a fd5c 	bl	801bf04 <puts>
                break;
 800144c:	e084      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>
            }
            uint16_t sample_freq = (data[1] << 8) | data[2];
 800144e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8001452:	3301      	adds	r3, #1
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800145e:	3302      	adds	r3, #2
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	f8a7 336a 	strh.w	r3, [r7, #874]	; 0x36a
            printf("Configuring sampling frequency to: %d Hz\r\n", sample_freq);
 800146c:	f8b7 336a 	ldrh.w	r3, [r7, #874]	; 0x36a
 8001470:	4619      	mov	r1, r3
 8001472:	482e      	ldr	r0, [pc, #184]	; (800152c <wifi_menu_recv_callback+0x3b8>)
 8001474:	f01a fcd8 	bl	801be28 <iprintf>
            // Further processing
            break;
 8001478:	e06e      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case '5':

            if (p->len < 1) {
 800147a:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800147e:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	895b      	ldrh	r3, [r3, #10]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <wifi_menu_recv_callback+0x31e>
            	printf("Invalid data length for Intan Configuration\r\n");
 800148a:	4829      	ldr	r0, [pc, #164]	; (8001530 <wifi_menu_recv_callback+0x3bc>)
 800148c:	f01a fd3a 	bl	801bf04 <puts>
                break;
 8001490:	e062      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>
            }
            printf("Executing Configure Intan Chip task\r\n");
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <wifi_menu_recv_callback+0x3c0>)
 8001494:	f01a fd36 	bl	801bf04 <puts>
            char config[] = "Please select the proper configuration\r\n"
 8001498:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800149c:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 80014a0:	4a25      	ldr	r2, [pc, #148]	; (8001538 <wifi_menu_recv_callback+0x3c4>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	4611      	mov	r1, r2
 80014a6:	f240 334b 	movw	r3, #843	; 0x34b
 80014aa:	461a      	mov	r2, r3
 80014ac:	f01a fee3 	bl	801c276 <memcpy>
            				              "I- 1.0 Hz\r\n"
            				              "J- 0.75 Hz\r\n"
            				              "K- 0.5 Hz\r\n"
            				              "L- 0.3 Hz\r\n"
            				              "M- 0.25 Hz\r\n";
            send_response(pcb, config, strlen(config));  // Intan Config
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fef3 	bl	80002a0 <strlen>
 80014ba:	4602      	mov	r2, r0
 80014bc:	f107 0110 	add.w	r1, r7, #16
 80014c0:	f507 735c 	add.w	r3, r7, #880	; 0x370
 80014c4:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	f000 f859 	bl	8001580 <send_response>

			printf("Waiting for configuration choices...\r\n");
 80014ce:	481b      	ldr	r0, [pc, #108]	; (800153c <wifi_menu_recv_callback+0x3c8>)
 80014d0:	f01a fd18 	bl	801bf04 <puts>
			intan_config_mode = 1;  // Enter Intan configuration mode
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <wifi_menu_recv_callback+0x370>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]
			break;
 80014da:	e03d      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>
 80014dc:	0801df54 	.word	0x0801df54
 80014e0:	0801df78 	.word	0x0801df78
 80014e4:	200003c8 	.word	0x200003c8
 80014e8:	0801df98 	.word	0x0801df98
 80014ec:	0801dfe4 	.word	0x0801dfe4
 80014f0:	0801e008 	.word	0x0801e008
 80014f4:	0801e020 	.word	0x0801e020
 80014f8:	0801e038 	.word	0x0801e038
 80014fc:	0801e054 	.word	0x0801e054
 8001500:	0801e098 	.word	0x0801e098
 8001504:	0801e0b8 	.word	0x0801e0b8
 8001508:	0801e0bc 	.word	0x0801e0bc
 800150c:	0801e2e4 	.word	0x0801e2e4
 8001510:	0801e0d8 	.word	0x0801e0d8
 8001514:	0801e0fc 	.word	0x0801e0fc
 8001518:	0801e114 	.word	0x0801e114
 800151c:	0801e4a8 	.word	0x0801e4a8
 8001520:	0801e138 	.word	0x0801e138
 8001524:	0801e170 	.word	0x0801e170
 8001528:	0801e198 	.word	0x0801e198
 800152c:	0801e1d0 	.word	0x0801e1d0
 8001530:	0801e1fc 	.word	0x0801e1fc
 8001534:	0801e22c 	.word	0x0801e22c
 8001538:	0801e4b4 	.word	0x0801e4b4
 800153c:	0801e254 	.word	0x0801e254
        case 'A':
            printf("Executing Start Intan Sampling task\r\n");
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <wifi_menu_recv_callback+0x400>)
 8001542:	f01a fcdf 	bl	801bf04 <puts>
            break;
 8001546:	e007      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        case 'B':
            printf("Executing Stop Intan Sampling task\r\n");
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <wifi_menu_recv_callback+0x404>)
 800154a:	f01a fcdb 	bl	801bf04 <puts>
            break;
 800154e:	e003      	b.n	8001558 <wifi_menu_recv_callback+0x3e4>

        default:
            printf("Unknown command received\r\n");
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <wifi_menu_recv_callback+0x408>)
 8001552:	f01a fcd7 	bl	801bf04 <puts>
            break;
 8001556:	bf00      	nop
    }

    // Free the received buffer
    pbuf_free(p);
 8001558:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800155c:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	f00d fd99 	bl	800f098 <pbuf_free>

    // Keep the connection alive
    return ERR_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	f507 775d 	add.w	r7, r7, #884	; 0x374
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	0801e27c 	.word	0x0801e27c
 8001578:	0801e2a4 	.word	0x0801e2a4
 800157c:	0801e2c8 	.word	0x0801e2c8

08001580 <send_response>:

// Function to send response over TCP
static err_t send_response(struct tcp_pcb *pcb, const char *message, size_t length) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
    struct pbuf *response_buf = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	b29b      	uxth	r3, r3
 8001590:	f44f 7220 	mov.w	r2, #640	; 0x280
 8001594:	4619      	mov	r1, r3
 8001596:	2036      	movs	r0, #54	; 0x36
 8001598:	f00d fa96 	bl	800eac8 <pbuf_alloc>
 800159c:	6178      	str	r0, [r7, #20]
    if (response_buf != NULL) {
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d028      	beq.n	80015f6 <send_response+0x76>
        pbuf_take(response_buf, message, length);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	68b9      	ldr	r1, [r7, #8]
 80015ac:	6978      	ldr	r0, [r7, #20]
 80015ae:	f00e f827 	bl	800f600 <pbuf_take>

        err_t send_err = tcp_write(pcb, response_buf->payload, response_buf->len, TCP_WRITE_FLAG_COPY);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	895a      	ldrh	r2, [r3, #10]
 80015ba:	2301      	movs	r3, #1
 80015bc:	68f8      	ldr	r0, [r7, #12]
 80015be:	f012 fbb1 	bl	8013d24 <tcp_write>
 80015c2:	4603      	mov	r3, r0
 80015c4:	74fb      	strb	r3, [r7, #19]
        if (send_err != ERR_OK) {
 80015c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00b      	beq.n	80015e6 <send_response+0x66>
            printf("Error sending data over TCP: %d\r\n", send_err);
 80015ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <send_response+0x88>)
 80015d6:	f01a fc27 	bl	801be28 <iprintf>
            pbuf_free(response_buf);  // Free buffer on error
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f00d fd5c 	bl	800f098 <pbuf_free>
            return send_err;
 80015e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015e4:	e00c      	b.n	8001600 <send_response+0x80>
        } else {
            tcp_output(pcb);  // Flush the data to ensure it's sent immediately
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f013 f9e4 	bl	80149b4 <tcp_output>
        }

        pbuf_free(response_buf);  // Free the response buffer after sending
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f00d fd53 	bl	800f098 <pbuf_free>
    } else {
        printf("Error allocating pbuf for message\r\n");
        return ERR_MEM;  // Return memory error if allocation fails
    }

    return ERR_OK;  // Success
 80015f2:	2300      	movs	r3, #0
 80015f4:	e004      	b.n	8001600 <send_response+0x80>
        printf("Error allocating pbuf for message\r\n");
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <send_response+0x8c>)
 80015f8:	f01a fc84 	bl	801bf04 <puts>
        return ERR_MEM;  // Return memory error if allocation fails
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0801e800 	.word	0x0801e800
 800160c:	0801e824 	.word	0x0801e824

08001610 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	3301      	adds	r3, #1
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <from_hex+0x54>)
 8001620:	4413      	add	r3, r2
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <from_hex+0x24>
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	3b30      	subs	r3, #48	; 0x30
 8001630:	b2db      	uxtb	r3, r3
 8001632:	e011      	b.n	8001658 <from_hex+0x48>
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	73fb      	strb	r3, [r7, #15]
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <from_hex+0x54>)
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b01      	cmp	r3, #1
 8001648:	d102      	bne.n	8001650 <from_hex+0x40>
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	3320      	adds	r3, #32
 800164e:	e000      	b.n	8001652 <from_hex+0x42>
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	b2db      	uxtb	r3, r3
 8001654:	3b57      	subs	r3, #87	; 0x57
 8001656:	b2db      	uxtb	r3, r3
}
 8001658:	4618      	mov	r0, r3
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	0806dfcb 	.word	0x0806dfcb

08001668 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b095      	sub	sp, #84	; 0x54
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	64fb      	str	r3, [r7, #76]	; 0x4c
  int i = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48

  if (strlen(str) > 64) {
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7fe fe11 	bl	80002a0 <strlen>
 800167e:	4603      	mov	r3, r0
 8001680:	2b40      	cmp	r3, #64	; 0x40
 8001682:	d947      	bls.n	8001714 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8001684:	2301      	movs	r3, #1
 8001686:	e056      	b.n	8001736 <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8001688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b25      	cmp	r3, #37	; 0x25
 800168e:	d128      	bne.n	80016e2 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8001690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001692:	3301      	adds	r3, #1
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d039      	beq.n	800170e <url_decode+0xa6>
 800169a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800169c:	3302      	adds	r3, #2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d034      	beq.n	800170e <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 80016a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016a6:	3301      	adds	r3, #1
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ffb0 	bl	8001610 <from_hex>
 80016b0:	4603      	mov	r3, r0
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	b25c      	sxtb	r4, r3
 80016b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016b8:	3302      	adds	r3, #2
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ffa7 	bl	8001610 <from_hex>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	4323      	orrs	r3, r4
 80016c8:	b259      	sxtb	r1, r3
 80016ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	3350      	adds	r3, #80	; 0x50
 80016d4:	443b      	add	r3, r7
 80016d6:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 80016da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016dc:	3302      	adds	r3, #2
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e0:	e015      	b.n	800170e <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 80016e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b2b      	cmp	r3, #43	; 0x2b
 80016e8:	d108      	bne.n	80016fc <url_decode+0x94>
      rstr[i++]  = ' ';
 80016ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80016f0:	3350      	adds	r3, #80	; 0x50
 80016f2:	443b      	add	r3, r7
 80016f4:	2220      	movs	r2, #32
 80016f6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80016fa:	e008      	b.n	800170e <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 80016fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	64ba      	str	r2, [r7, #72]	; 0x48
 8001702:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	3350      	adds	r3, #80	; 0x50
 8001708:	443b      	add	r3, r7
 800170a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 800170e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001710:	3301      	adds	r3, #1
 8001712:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (*pstr) {
 8001714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1b5      	bne.n	8001688 <url_decode+0x20>
  }
  rstr[i] = '\0';
 800171c:	f107 0208 	add.w	r2, r7, #8
 8001720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4619      	mov	r1, r3
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f01a fd99 	bl	801c266 <strcpy>
  return SL_STATUS_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3754      	adds	r7, #84	; 0x54
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
	...

08001740 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <wifi_autoconnexion_init+0x28>)
 8001748:	1d3c      	adds	r4, r7, #4
 800174a:	461d      	mov	r5, r3
 800174c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f008 f97c 	bl	8009a56 <osThreadCreate>

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bdb0      	pop	{r4, r5, r7, pc}
 8001766:	bf00      	nop
 8001768:	0801e85c 	.word	0x0801e85c

0800176c <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b097      	sub	sp, #92	; 0x5c
 8001770:	af08      	add	r7, sp, #32
 8001772:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8001774:	2303      	movs	r3, #3
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <wifi_station_connect_task_entry+0x170>)
 800177a:	f107 0418 	add.w	r4, r7, #24
 800177e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001780:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <wifi_station_connect_task_entry+0x174>)
 8001786:	f107 0408 	add.w	r4, r7, #8
 800178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30

  if (num_params == 3) {
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	2b03      	cmp	r3, #3
 800179c:	f040 8096 	bne.w	80018cc <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	4950      	ldr	r1, [pc, #320]	; (80018e4 <wifi_station_connect_task_entry+0x178>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fd1b 	bl	80001e0 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d114      	bne.n	80017da <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff58 	bl	8001668 <url_decode>
      ssid_length = strlen(pc_value[0]);
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fd70 	bl	80002a0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
      memset(wlan_ssid, 0, 32);
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	4847      	ldr	r0, [pc, #284]	; (80018e8 <wifi_station_connect_task_entry+0x17c>)
 80017ca:	f01a fc97 	bl	801c0fc <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017d2:	4619      	mov	r1, r3
 80017d4:	4844      	ldr	r0, [pc, #272]	; (80018e8 <wifi_station_connect_task_entry+0x17c>)
 80017d6:	f01a fcab 	bl	801c130 <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	4943      	ldr	r1, [pc, #268]	; (80018ec <wifi_station_connect_task_entry+0x180>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fcfe 	bl	80001e0 <strcmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d114      	bne.n	8001814 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff3b 	bl	8001668 <url_decode>
      passkey_length = strlen(pc_value[1]);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fd53 	bl	80002a0 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
      memset(wlan_passkey, 0, 64);
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	2100      	movs	r1, #0
 8001802:	483b      	ldr	r0, [pc, #236]	; (80018f0 <wifi_station_connect_task_entry+0x184>)
 8001804:	f01a fc7a 	bl	801c0fc <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800180c:	4619      	mov	r1, r3
 800180e:	4838      	ldr	r0, [pc, #224]	; (80018f0 <wifi_station_connect_task_entry+0x184>)
 8001810:	f01a fc8e 	bl	801c130 <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <wifi_station_connect_task_entry+0x188>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7fe fce1 	bl	80001e0 <strcmp>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d12e      	bne.n	8001882 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff1e 	bl	8001668 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4932      	ldr	r1, [pc, #200]	; (80018f8 <wifi_station_connect_task_entry+0x18c>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fcd5 	bl	80001e0 <strcmp>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <wifi_station_connect_task_entry+0xe0>
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	492f      	ldr	r1, [pc, #188]	; (80018fc <wifi_station_connect_task_entry+0x190>)
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fccd 	bl	80001e0 <strcmp>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d103      	bne.n	8001854 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <wifi_station_connect_task_entry+0x194>)
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	e016      	b.n	8001882 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	492b      	ldr	r1, [pc, #172]	; (8001904 <wifi_station_connect_task_entry+0x198>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fcc1 	bl	80001e0 <strcmp>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 8001864:	4b26      	ldr	r3, [pc, #152]	; (8001900 <wifi_station_connect_task_entry+0x194>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e00a      	b.n	8001882 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4926      	ldr	r1, [pc, #152]	; (8001908 <wifi_station_connect_task_entry+0x19c>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fcb5 	bl	80001e0 <strcmp>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <wifi_station_connect_task_entry+0x194>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8001882:	4b22      	ldr	r3, [pc, #136]	; (800190c <wifi_station_connect_task_entry+0x1a0>)
 8001884:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d120      	bne.n	80018d2 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001890:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <wifi_station_connect_task_entry+0x194>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001898:	b292      	uxth	r2, r2
 800189a:	2000      	movs	r0, #0
 800189c:	9006      	str	r0, [sp, #24]
 800189e:	2000      	movs	r0, #0
 80018a0:	9005      	str	r0, [sp, #20]
 80018a2:	9204      	str	r2, [sp, #16]
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <wifi_station_connect_task_entry+0x184>)
 80018a6:	9203      	str	r2, [sp, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	9202      	str	r2, [sp, #8]
 80018ac:	2200      	movs	r2, #0
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	2200      	movs	r2, #0
 80018b6:	480c      	ldr	r0, [pc, #48]	; (80018e8 <wifi_station_connect_task_entry+0x17c>)
 80018b8:	f006 f872 	bl	80079a0 <sl_wfx_send_join_command>
 80018bc:	62b8      	str	r0, [r7, #40]	; 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 80018c4:	4812      	ldr	r0, [pc, #72]	; (8001910 <wifi_station_connect_task_entry+0x1a4>)
 80018c6:	f01a fb1d 	bl	801bf04 <puts>
 80018ca:	e002      	b.n	80018d2 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 80018cc:	4811      	ldr	r0, [pc, #68]	; (8001914 <wifi_station_connect_task_entry+0x1a8>)
 80018ce:	f01a fb19 	bl	801bf04 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f008 f8e6 	bl	8009aa4 <osThreadTerminate>
 80018d8:	e7fb      	b.n	80018d2 <wifi_station_connect_task_entry+0x166>
 80018da:	bf00      	nop
 80018dc:	0801e8d8 	.word	0x0801e8d8
 80018e0:	0801e904 	.word	0x0801e904
 80018e4:	0801e870 	.word	0x0801e870
 80018e8:	20000008 	.word	0x20000008
 80018ec:	0801e878 	.word	0x0801e878
 80018f0:	2000002c 	.word	0x2000002c
 80018f4:	0801e87c 	.word	0x0801e87c
 80018f8:	0801e884 	.word	0x0801e884
 80018fc:	0801e88c 	.word	0x0801e88c
 8001900:	2000006d 	.word	0x2000006d
 8001904:	0801e890 	.word	0x0801e890
 8001908:	0801e894 	.word	0x0801e894
 800190c:	200003cc 	.word	0x200003cc
 8001910:	0801e89c 	.word	0x0801e89c
 8001914:	0801e8b8 	.word	0x0801e8b8

08001918 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8001926:	4b06      	ldr	r3, [pc, #24]	; (8001940 <dhcpclient_set_link_state+0x28>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 800192c:	e002      	b.n	8001934 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <dhcpclient_set_link_state+0x28>)
 8001930:	2205      	movs	r2, #5
 8001932:	701a      	strb	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	200005f0 	.word	0x200005f0

08001944 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af02      	add	r7, sp, #8
 800194a:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001950:	4b9a      	ldr	r3, [pc, #616]	; (8001bbc <dhcpclient_start+0x278>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b05      	cmp	r3, #5
 8001958:	f000 811f 	beq.w	8001b9a <dhcpclient_start+0x256>
 800195c:	2b05      	cmp	r3, #5
 800195e:	f300 8125 	bgt.w	8001bac <dhcpclient_start+0x268>
 8001962:	2b01      	cmp	r3, #1
 8001964:	d002      	beq.n	800196c <dhcpclient_start+0x28>
 8001966:	2b02      	cmp	r3, #2
 8001968:	d012      	beq.n	8001990 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 800196a:	e11f      	b.n	8001bac <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 800197e:	4a90      	ldr	r2, [pc, #576]	; (8001bc0 <dhcpclient_start+0x27c>)
 8001980:	2100      	movs	r1, #0
 8001982:	69f8      	ldr	r0, [r7, #28]
 8001984:	f00b fc58 	bl	800d238 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8001988:	4b8c      	ldr	r3, [pc, #560]	; (8001bbc <dhcpclient_start+0x278>)
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e110      	b.n	8001bb2 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001990:	69f8      	ldr	r0, [r7, #28]
 8001992:	f016 fd23 	bl	80183dc <dhcp_supplied_address>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 800199c:	4b87      	ldr	r3, [pc, #540]	; (8001bbc <dhcpclient_start+0x278>)
 800199e:	2203      	movs	r2, #3
 80019a0:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 80019a2:	4b88      	ldr	r3, [pc, #544]	; (8001bc4 <dhcpclient_start+0x280>)
 80019a4:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80019a6:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 80019a8:	4b86      	ldr	r3, [pc, #536]	; (8001bc4 <dhcpclient_start+0x280>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80019ae:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 80019b0:	4b84      	ldr	r3, [pc, #528]	; (8001bc4 <dhcpclient_start+0x280>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80019b6:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 80019b8:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <dhcpclient_start+0x280>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	4881      	ldr	r0, [pc, #516]	; (8001bc8 <dhcpclient_start+0x284>)
 80019c4:	f01a fa30 	bl	801be28 <iprintf>
          start_app_task();
 80019c8:	f7ff fa84 	bl	8000ed4 <start_app_task>
      break;
 80019cc:	e0f0      	b.n	8001bb0 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	799b      	ldrb	r3, [r3, #6]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	f240 80e9 	bls.w	8001bb0 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 80019de:	4b77      	ldr	r3, [pc, #476]	; (8001bbc <dhcpclient_start+0x278>)
 80019e0:	2204      	movs	r2, #4
 80019e2:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 80019e4:	2200      	movs	r2, #0
 80019e6:	4979      	ldr	r1, [pc, #484]	; (8001bcc <dhcpclient_start+0x288>)
 80019e8:	69f8      	ldr	r0, [r7, #28]
 80019ea:	f00b fc25 	bl	800d238 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 80019ee:	4b78      	ldr	r3, [pc, #480]	; (8001bd0 <dhcpclient_start+0x28c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	061a      	lsls	r2, r3, #24
 80019f4:	4b77      	ldr	r3, [pc, #476]	; (8001bd4 <dhcpclient_start+0x290>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	041b      	lsls	r3, r3, #16
 80019fa:	431a      	orrs	r2, r3
 80019fc:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <dhcpclient_start+0x294>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	021b      	lsls	r3, r3, #8
 8001a02:	4313      	orrs	r3, r2
 8001a04:	4a75      	ldr	r2, [pc, #468]	; (8001bdc <dhcpclient_start+0x298>)
 8001a06:	7812      	ldrb	r2, [r2, #0]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	061a      	lsls	r2, r3, #24
 8001a0c:	4b70      	ldr	r3, [pc, #448]	; (8001bd0 <dhcpclient_start+0x28c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	0619      	lsls	r1, r3, #24
 8001a12:	4b70      	ldr	r3, [pc, #448]	; (8001bd4 <dhcpclient_start+0x290>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	041b      	lsls	r3, r3, #16
 8001a18:	4319      	orrs	r1, r3
 8001a1a:	4b6f      	ldr	r3, [pc, #444]	; (8001bd8 <dhcpclient_start+0x294>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	430b      	orrs	r3, r1
 8001a22:	496e      	ldr	r1, [pc, #440]	; (8001bdc <dhcpclient_start+0x298>)
 8001a24:	7809      	ldrb	r1, [r1, #0]
 8001a26:	430b      	orrs	r3, r1
 8001a28:	021b      	lsls	r3, r3, #8
 8001a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <dhcpclient_start+0x28c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	0619      	lsls	r1, r3, #24
 8001a36:	4b67      	ldr	r3, [pc, #412]	; (8001bd4 <dhcpclient_start+0x290>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	041b      	lsls	r3, r3, #16
 8001a3c:	4319      	orrs	r1, r3
 8001a3e:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <dhcpclient_start+0x294>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	430b      	orrs	r3, r1
 8001a46:	4965      	ldr	r1, [pc, #404]	; (8001bdc <dhcpclient_start+0x298>)
 8001a48:	7809      	ldrb	r1, [r1, #0]
 8001a4a:	430b      	orrs	r3, r1
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001a52:	431a      	orrs	r2, r3
 8001a54:	4b5e      	ldr	r3, [pc, #376]	; (8001bd0 <dhcpclient_start+0x28c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	0619      	lsls	r1, r3, #24
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <dhcpclient_start+0x290>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	4319      	orrs	r1, r3
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <dhcpclient_start+0x294>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	495c      	ldr	r1, [pc, #368]	; (8001bdc <dhcpclient_start+0x298>)
 8001a6c:	7809      	ldrb	r1, [r1, #0]
 8001a6e:	430b      	orrs	r3, r1
 8001a70:	0e1b      	lsrs	r3, r3, #24
 8001a72:	4313      	orrs	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <dhcpclient_start+0x29c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	061a      	lsls	r2, r3, #24
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <dhcpclient_start+0x2a0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	041b      	lsls	r3, r3, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <dhcpclient_start+0x2a4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <dhcpclient_start+0x2a8>)
 8001a8e:	7812      	ldrb	r2, [r2, #0]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	061a      	lsls	r2, r3, #24
 8001a94:	4b52      	ldr	r3, [pc, #328]	; (8001be0 <dhcpclient_start+0x29c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	0619      	lsls	r1, r3, #24
 8001a9a:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <dhcpclient_start+0x2a0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	4319      	orrs	r1, r3
 8001aa2:	4b51      	ldr	r3, [pc, #324]	; (8001be8 <dhcpclient_start+0x2a4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	4950      	ldr	r1, [pc, #320]	; (8001bec <dhcpclient_start+0x2a8>)
 8001aac:	7809      	ldrb	r1, [r1, #0]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <dhcpclient_start+0x29c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	0619      	lsls	r1, r3, #24
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <dhcpclient_start+0x2a0>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	4319      	orrs	r1, r3
 8001ac6:	4b48      	ldr	r3, [pc, #288]	; (8001be8 <dhcpclient_start+0x2a4>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	430b      	orrs	r3, r1
 8001ace:	4947      	ldr	r1, [pc, #284]	; (8001bec <dhcpclient_start+0x2a8>)
 8001ad0:	7809      	ldrb	r1, [r1, #0]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <dhcpclient_start+0x29c>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	0619      	lsls	r1, r3, #24
 8001ae2:	4b40      	ldr	r3, [pc, #256]	; (8001be4 <dhcpclient_start+0x2a0>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	041b      	lsls	r3, r3, #16
 8001ae8:	4319      	orrs	r1, r3
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <dhcpclient_start+0x2a4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	430b      	orrs	r3, r1
 8001af2:	493e      	ldr	r1, [pc, #248]	; (8001bec <dhcpclient_start+0x2a8>)
 8001af4:	7809      	ldrb	r1, [r1, #0]
 8001af6:	430b      	orrs	r3, r1
 8001af8:	0e1b      	lsrs	r3, r3, #24
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <dhcpclient_start+0x2ac>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	061a      	lsls	r2, r3, #24
 8001b04:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <dhcpclient_start+0x2b0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <dhcpclient_start+0x2b4>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	4313      	orrs	r3, r2
 8001b14:	4a39      	ldr	r2, [pc, #228]	; (8001bfc <dhcpclient_start+0x2b8>)
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	061a      	lsls	r2, r3, #24
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <dhcpclient_start+0x2ac>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	0619      	lsls	r1, r3, #24
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <dhcpclient_start+0x2b0>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	4319      	orrs	r1, r3
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <dhcpclient_start+0x2b4>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	430b      	orrs	r3, r1
 8001b32:	4932      	ldr	r1, [pc, #200]	; (8001bfc <dhcpclient_start+0x2b8>)
 8001b34:	7809      	ldrb	r1, [r1, #0]
 8001b36:	430b      	orrs	r3, r1
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <dhcpclient_start+0x2ac>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	0619      	lsls	r1, r3, #24
 8001b46:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <dhcpclient_start+0x2b0>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	4319      	orrs	r1, r3
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <dhcpclient_start+0x2b4>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	430b      	orrs	r3, r1
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <dhcpclient_start+0x2b8>)
 8001b58:	7809      	ldrb	r1, [r1, #0]
 8001b5a:	430b      	orrs	r3, r1
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001b62:	431a      	orrs	r2, r3
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <dhcpclient_start+0x2ac>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	0619      	lsls	r1, r3, #24
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <dhcpclient_start+0x2b0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	4319      	orrs	r1, r3
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <dhcpclient_start+0x2b4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	4920      	ldr	r1, [pc, #128]	; (8001bfc <dhcpclient_start+0x2b8>)
 8001b7c:	7809      	ldrb	r1, [r1, #0]
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	0e1b      	lsrs	r3, r3, #24
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	f107 0210 	add.w	r2, r7, #16
 8001b8e:	f107 0114 	add.w	r1, r7, #20
 8001b92:	69f8      	ldr	r0, [r7, #28]
 8001b94:	f00c fd80 	bl	800e698 <netif_set_addr>
      break;
 8001b98:	e00a      	b.n	8001bb0 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	490b      	ldr	r1, [pc, #44]	; (8001bcc <dhcpclient_start+0x288>)
 8001b9e:	69f8      	ldr	r0, [r7, #28]
 8001ba0:	f00b fb4a 	bl	800d238 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <dhcpclient_start+0x278>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
    break;
 8001baa:	e002      	b.n	8001bb2 <dhcpclient_start+0x26e>
    default: break;
 8001bac:	bf00      	nop
 8001bae:	e000      	b.n	8001bb2 <dhcpclient_start+0x26e>
      break;
 8001bb0:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb6:	f009 fc73 	bl	800b4a0 <vTaskDelay>
    switch (dhcp_state)
 8001bba:	e6c9      	b.n	8001950 <dhcpclient_start+0xc>
 8001bbc:	200005f0 	.word	0x200005f0
 8001bc0:	08016dcd 	.word	0x08016dcd
 8001bc4:	2000084c 	.word	0x2000084c
 8001bc8:	0801e914 	.word	0x0801e914
 8001bcc:	0801788d 	.word	0x0801788d
 8001bd0:	20000098 	.word	0x20000098
 8001bd4:	20000099 	.word	0x20000099
 8001bd8:	200008ee 	.word	0x200008ee
 8001bdc:	2000009a 	.word	0x2000009a
 8001be0:	2000009b 	.word	0x2000009b
 8001be4:	2000009c 	.word	0x2000009c
 8001be8:	2000009d 	.word	0x2000009d
 8001bec:	200008ef 	.word	0x200008ef
 8001bf0:	200008f0 	.word	0x200008f0
 8001bf4:	200008f1 	.word	0x200008f1
 8001bf8:	200008f2 	.word	0x200008f2
 8001bfc:	200008f3 	.word	0x200008f3

08001c00 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e08a      	b.n	8001d24 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001c0e:	494b      	ldr	r1, [pc, #300]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	440b      	add	r3, r1
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d17b      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
 8001c26:	4945      	ldr	r1, [pc, #276]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	440b      	add	r3, r1
 8001c34:	3301      	adds	r3, #1
 8001c36:	781a      	ldrb	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d16e      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001c40:	493e      	ldr	r1, [pc, #248]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3302      	adds	r3, #2
 8001c50:	781a      	ldrb	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d161      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
 8001c5a:	4938      	ldr	r1, [pc, #224]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	440b      	add	r3, r1
 8001c68:	3303      	adds	r3, #3
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d154      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001c74:	4931      	ldr	r1, [pc, #196]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	3304      	adds	r3, #4
 8001c84:	781a      	ldrb	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	791b      	ldrb	r3, [r3, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d147      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
 8001c8e:	492b      	ldr	r1, [pc, #172]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3305      	adds	r3, #5
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	795b      	ldrb	r3, [r3, #5]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d13a      	bne.n	8001d1e <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001ca8:	4924      	ldr	r1, [pc, #144]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	440b      	add	r3, r1
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8001cba:	4920      	ldr	r1, [pc, #128]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	4413      	add	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3301      	adds	r3, #1
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001cce:	491b      	ldr	r1, [pc, #108]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4413      	add	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	3302      	adds	r3, #2
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001ce2:	4916      	ldr	r1, [pc, #88]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	440b      	add	r3, r1
 8001cf0:	3303      	adds	r3, #3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8001cf6:	4911      	ldr	r1, [pc, #68]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	440b      	add	r3, r1
 8001d04:	3304      	adds	r3, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 8001d0a:	490c      	ldr	r1, [pc, #48]	; (8001d3c <dhcpserver_remove_mac+0x13c>)
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	440b      	add	r3, r1
 8001d18:	3305      	adds	r3, #5
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b07      	cmp	r3, #7
 8001d28:	f67f af71 	bls.w	8001c0e <dhcpserver_remove_mac+0xe>
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	200005f8 	.word	0x200005f8

08001d40 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff59 	bl	8001c00 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e08b      	b.n	8001e6c <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	494a      	ldr	r1, [pc, #296]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d17e      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	4945      	ldr	r1, [pc, #276]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	440b      	add	r3, r1
 8001d76:	3301      	adds	r3, #1
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d173      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	493f      	ldr	r1, [pc, #252]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	440b      	add	r3, r1
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d168      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	493a      	ldr	r1, [pc, #232]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	3303      	adds	r3, #3
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d15d      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	4934      	ldr	r1, [pc, #208]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	440b      	add	r3, r1
 8001db8:	3304      	adds	r3, #4
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d152      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	492f      	ldr	r1, [pc, #188]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	440b      	add	r3, r1
 8001dce:	3305      	adds	r3, #5
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d147      	bne.n	8001e66 <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7818      	ldrb	r0, [r3, #0]
 8001ddc:	4928      	ldr	r1, [pc, #160]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	440b      	add	r3, r1
 8001de8:	4602      	mov	r2, r0
 8001dea:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7858      	ldrb	r0, [r3, #1]
 8001df2:	4923      	ldr	r1, [pc, #140]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3301      	adds	r3, #1
 8001e00:	4602      	mov	r2, r0
 8001e02:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8001e04:	7bfa      	ldrb	r2, [r7, #15]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	7898      	ldrb	r0, [r3, #2]
 8001e0a:	491d      	ldr	r1, [pc, #116]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	440b      	add	r3, r1
 8001e16:	3302      	adds	r3, #2
 8001e18:	4602      	mov	r2, r0
 8001e1a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	78d8      	ldrb	r0, [r3, #3]
 8001e22:	4917      	ldr	r1, [pc, #92]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	3303      	adds	r3, #3
 8001e30:	4602      	mov	r2, r0
 8001e32:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7918      	ldrb	r0, [r3, #4]
 8001e3a:	4911      	ldr	r1, [pc, #68]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	440b      	add	r3, r1
 8001e46:	3304      	adds	r3, #4
 8001e48:	4602      	mov	r2, r0
 8001e4a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7958      	ldrb	r0, [r3, #5]
 8001e52:	490b      	ldr	r1, [pc, #44]	; (8001e80 <dhcpserver_save_mac+0x140>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3305      	adds	r3, #5
 8001e60:	4602      	mov	r2, r0
 8001e62:	701a      	strb	r2, [r3, #0]
      break;
 8001e64:	e007      	b.n	8001e76 <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	2b07      	cmp	r3, #7
 8001e70:	f67f af70 	bls.w	8001d54 <dhcpserver_save_mac+0x14>
    }
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200005f8 	.word	0x200005f8

08001e84 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e060      	b.n	8001f58 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001e96:	4935      	ldr	r1, [pc, #212]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	440b      	add	r3, r1
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d151      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
 8001eae:	492f      	ldr	r1, [pc, #188]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	440b      	add	r3, r1
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	781a      	ldrb	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	785b      	ldrb	r3, [r3, #1]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d144      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001ec8:	4928      	ldr	r1, [pc, #160]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d137      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
 8001ee2:	4922      	ldr	r1, [pc, #136]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	440b      	add	r3, r1
 8001ef0:	3303      	adds	r3, #3
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	78db      	ldrb	r3, [r3, #3]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d12a      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001efc:	491b      	ldr	r1, [pc, #108]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	440b      	add	r3, r1
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	781a      	ldrb	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	791b      	ldrb	r3, [r3, #4]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d11d      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
 8001f16:	4915      	ldr	r1, [pc, #84]	; (8001f6c <dhcpserver_get_ip+0xe8>)
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4413      	add	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	440b      	add	r3, r1
 8001f24:	3305      	adds	r3, #5
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	795b      	ldrb	r3, [r3, #5]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d110      	bne.n	8001f52 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	330a      	adds	r3, #10
 8001f34:	061b      	lsls	r3, r3, #24
 8001f36:	4a0e      	ldr	r2, [pc, #56]	; (8001f70 <dhcpserver_get_ip+0xec>)
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <dhcpserver_get_ip+0xf0>)
 8001f3e:	7812      	ldrb	r2, [r2, #0]
 8001f40:	0212      	lsls	r2, r2, #8
 8001f42:	4413      	add	r3, r2
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <dhcpserver_get_ip+0xf4>)
 8001f46:	7812      	ldrb	r2, [r2, #0]
 8001f48:	0412      	lsls	r2, r2, #16
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	e006      	b.n	8001f60 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	3301      	adds	r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b07      	cmp	r3, #7
 8001f5c:	d99b      	bls.n	8001e96 <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	200005f8 	.word	0x200005f8
 8001f70:	2000009e 	.word	0x2000009e
 8001f74:	2000009f 	.word	0x2000009f
 8001f78:	200000a0 	.word	0x200000a0

08001f7c <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	e03d      	b.n	8002004 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8001f88:	4923      	ldr	r1, [pc, #140]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3301      	adds	r3, #1
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8001fae:	491a      	ldr	r1, [pc, #104]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	440b      	add	r3, r1
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8001fc2:	4915      	ldr	r1, [pc, #84]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	440b      	add	r3, r1
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8001fd6:	4910      	ldr	r1, [pc, #64]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8001fea:	490b      	ldr	r1, [pc, #44]	; (8002018 <dhcpserver_clear_stored_mac+0x9c>)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3305      	adds	r3, #5
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3301      	adds	r3, #1
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b07      	cmp	r3, #7
 8002008:	d9be      	bls.n	8001f88 <dhcpserver_clear_stored_mac+0xc>
  }
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	200005f8 	.word	0x200005f8

0800201c <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 8002026:	23f0      	movs	r3, #240	; 0xf0
 8002028:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 800202a:	2332      	movs	r3, #50	; 0x32
 800202c:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8002036:	e036      	b.n	80020a6 <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	b29b      	uxth	r3, r3
 800203c:	4619      	mov	r1, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f00d fc0c 	bl	800f85c <pbuf_get_at>
 8002044:	4603      	mov	r3, r0
 8002046:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 8002048:	7c7a      	ldrb	r2, [r7, #17]
 800204a:	7c3b      	ldrb	r3, [r7, #16]
 800204c:	429a      	cmp	r2, r3
 800204e:	d11b      	bne.n	8002088 <dhcpserver_find_requested_ip+0x6c>
      index++;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	b29b      	uxth	r3, r3
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f00d fbfd 	bl	800f85c <pbuf_get_at>
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
      index++;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	b29a      	uxth	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	b29b      	uxth	r3, r3
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f00d fa14 	bl	800f4a4 <pbuf_copy_partial>
      index += size;
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
      found = 1;
 8002084:	2301      	movs	r3, #1
 8002086:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	b29b      	uxth	r3, r3
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f00d fbe1 	bl	800f85c <pbuf_get_at>
 800209a:	4603      	mov	r3, r0
 800209c:	3301      	adds	r3, #1
 800209e:	461a      	mov	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	4413      	add	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80020a6:	7c7b      	ldrb	r3, [r7, #17]
 80020a8:	2bff      	cmp	r3, #255	; 0xff
 80020aa:	d005      	beq.n	80020b8 <dhcpserver_find_requested_ip+0x9c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	891b      	ldrh	r3, [r3, #8]
 80020b0:	461a      	mov	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d3bf      	bcc.n	8002038 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 80020b8:	8a7b      	ldrh	r3, [r7, #18]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b08c      	sub	sp, #48	; 0x30
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i;
  uint8_t flags = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t client_requested_addr = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 85b8 	beq.w	8002c62 <dhcpserver_fn+0xb9e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	891b      	ldrh	r3, [r3, #8]
 80020f6:	2bf0      	cmp	r3, #240	; 0xf0
 80020f8:	f240 85b3 	bls.w	8002c62 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 80020fc:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	2036      	movs	r0, #54	; 0x36
 8002106:	f00c fcdf 	bl	800eac8 <pbuf_alloc>
 800210a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 800210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 85a9 	beq.w	8002c66 <dhcpserver_fn+0xba2>
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	891b      	ldrh	r3, [r3, #8]
 8002118:	2bef      	cmp	r3, #239	; 0xef
 800211a:	f240 85a4 	bls.w	8002c66 <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002122:	f00d f8ed 	bl	800f300 <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	e014      	b.n	8002156 <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	b29b      	uxth	r3, r3
 8002130:	331c      	adds	r3, #28
 8002132:	b29b      	uxth	r3, r3
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f00d fb90 	bl	800f85c <pbuf_get_at>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    ethaddr.addr[i] = val;
 8002142:	f107 021c 	add.w	r2, r7, #28
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	4413      	add	r3, r2
 800214a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800214e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	3301      	adds	r3, #1
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
 8002156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002158:	2b05      	cmp	r3, #5
 800215a:	d9e7      	bls.n	800212c <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fded 	bl	8001d40 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff fe8a 	bl	8001e84 <dhcpserver_get_ip>
 8002170:	4603      	mov	r3, r0
 8002172:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8577 	beq.w	8002c6a <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 800217c:	f107 021c 	add.w	r2, r7, #28
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f016 fc9a 	bl	8018ac0 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 800218c:	21f2      	movs	r1, #242	; 0xf2
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f00d fb64 	bl	800f85c <pbuf_get_at>
 8002194:	4603      	mov	r3, r0
 8002196:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  switch (val) {
 800219a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d004      	beq.n	80021ac <dhcpserver_fn+0xe8>
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	f000 826a 	beq.w	800267c <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 80021a8:	f000 bd62 	b.w	8002c70 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 80021ac:	2202      	movs	r2, #2
 80021ae:	2100      	movs	r1, #0
 80021b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021b2:	f00d fb8c 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2108      	movs	r1, #8
 80021ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021bc:	f00d fb87 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 80021c0:	2200      	movs	r2, #0
 80021c2:	210a      	movs	r1, #10
 80021c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021c6:	f00d fb82 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	2110      	movs	r1, #16
 80021d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021d4:	f00d fb7b 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	461a      	mov	r2, r3
 80021e0:	2111      	movs	r1, #17
 80021e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021e4:	f00d fb73 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	2112      	movs	r1, #18
 80021f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021f4:	f00d fb6b 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	0e1b      	lsrs	r3, r3, #24
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	2113      	movs	r1, #19
 8002202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002204:	f00d fb63 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2114      	movs	r1, #20
 800220c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800220e:	f00d fb5e 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2115      	movs	r1, #21
 8002216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002218:	f00d fb59 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2116      	movs	r1, #22
 8002220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002222:	f00d fb54 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2117      	movs	r1, #23
 800222a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800222c:	f00d fb4f 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002230:	2263      	movs	r2, #99	; 0x63
 8002232:	21ec      	movs	r1, #236	; 0xec
 8002234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002236:	f00d fb4a 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 800223a:	2282      	movs	r2, #130	; 0x82
 800223c:	21ed      	movs	r1, #237	; 0xed
 800223e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002240:	f00d fb45 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002244:	2253      	movs	r2, #83	; 0x53
 8002246:	21ee      	movs	r1, #238	; 0xee
 8002248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800224a:	f00d fb40 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 800224e:	2263      	movs	r2, #99	; 0x63
 8002250:	21ef      	movs	r1, #239	; 0xef
 8002252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002254:	f00d fb3b 	bl	800f8ce <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 8002258:	23f0      	movs	r3, #240	; 0xf0
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	b29b      	uxth	r3, r3
 8002260:	2235      	movs	r2, #53	; 0x35
 8002262:	4619      	mov	r1, r3
 8002264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002266:	f00d fb32 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	3301      	adds	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	b29b      	uxth	r3, r3
 8002274:	2201      	movs	r2, #1
 8002276:	4619      	mov	r1, r3
 8002278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800227a:	f00d fb28 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	b29b      	uxth	r3, r3
 8002288:	2202      	movs	r2, #2
 800228a:	4619      	mov	r1, r3
 800228c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800228e:	f00d fb1e 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	b29b      	uxth	r3, r3
 800229c:	2201      	movs	r2, #1
 800229e:	4619      	mov	r1, r3
 80022a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022a2:	f00d fb14 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	3301      	adds	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2204      	movs	r2, #4
 80022b2:	4619      	mov	r1, r3
 80022b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022b6:	f00d fb0a 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	3301      	adds	r3, #1
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 80022c0:	4ba8      	ldr	r3, [pc, #672]	; (8002564 <dhcpserver_fn+0x4a0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	061a      	lsls	r2, r3, #24
 80022c6:	4ba8      	ldr	r3, [pc, #672]	; (8002568 <dhcpserver_fn+0x4a4>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4ba7      	ldr	r3, [pc, #668]	; (800256c <dhcpserver_fn+0x4a8>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	4313      	orrs	r3, r2
 80022d6:	4aa6      	ldr	r2, [pc, #664]	; (8002570 <dhcpserver_fn+0x4ac>)
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	061a      	lsls	r2, r3, #24
 80022de:	4ba1      	ldr	r3, [pc, #644]	; (8002564 <dhcpserver_fn+0x4a0>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0619      	lsls	r1, r3, #24
 80022e4:	4ba0      	ldr	r3, [pc, #640]	; (8002568 <dhcpserver_fn+0x4a4>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	041b      	lsls	r3, r3, #16
 80022ea:	4319      	orrs	r1, r3
 80022ec:	4b9f      	ldr	r3, [pc, #636]	; (800256c <dhcpserver_fn+0x4a8>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	021b      	lsls	r3, r3, #8
 80022f2:	430b      	orrs	r3, r1
 80022f4:	499e      	ldr	r1, [pc, #632]	; (8002570 <dhcpserver_fn+0x4ac>)
 80022f6:	7809      	ldrb	r1, [r1, #0]
 80022f8:	430b      	orrs	r3, r1
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002300:	431a      	orrs	r2, r3
 8002302:	4b98      	ldr	r3, [pc, #608]	; (8002564 <dhcpserver_fn+0x4a0>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0619      	lsls	r1, r3, #24
 8002308:	4b97      	ldr	r3, [pc, #604]	; (8002568 <dhcpserver_fn+0x4a4>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	4319      	orrs	r1, r3
 8002310:	4b96      	ldr	r3, [pc, #600]	; (800256c <dhcpserver_fn+0x4a8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	430b      	orrs	r3, r1
 8002318:	4995      	ldr	r1, [pc, #596]	; (8002570 <dhcpserver_fn+0x4ac>)
 800231a:	7809      	ldrb	r1, [r1, #0]
 800231c:	430b      	orrs	r3, r1
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002324:	431a      	orrs	r2, r3
 8002326:	4b8f      	ldr	r3, [pc, #572]	; (8002564 <dhcpserver_fn+0x4a0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	0619      	lsls	r1, r3, #24
 800232c:	4b8e      	ldr	r3, [pc, #568]	; (8002568 <dhcpserver_fn+0x4a4>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	4319      	orrs	r1, r3
 8002334:	4b8d      	ldr	r3, [pc, #564]	; (800256c <dhcpserver_fn+0x4a8>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	430b      	orrs	r3, r1
 800233c:	498c      	ldr	r1, [pc, #560]	; (8002570 <dhcpserver_fn+0x4ac>)
 800233e:	7809      	ldrb	r1, [r1, #0]
 8002340:	430b      	orrs	r3, r1
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	4313      	orrs	r3, r2
 8002346:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	b29b      	uxth	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	4619      	mov	r1, r3
 8002352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002354:	f00d fabb 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	b29b      	uxth	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	b299      	uxth	r1, r3
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800236a:	f00d fab0 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	b29b      	uxth	r3, r3
 8002372:	3302      	adds	r3, #2
 8002374:	b299      	uxth	r1, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002380:	f00d faa5 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	b29b      	uxth	r3, r3
 8002388:	3303      	adds	r3, #3
 800238a:	b299      	uxth	r1, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002396:	f00d fa9a 	bl	800f8ce <pbuf_put_at>
      options_offset += 4;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	3304      	adds	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2203      	movs	r2, #3
 80023a6:	4619      	mov	r1, r3
 80023a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023aa:	f00d fa90 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2204      	movs	r2, #4
 80023ba:	4619      	mov	r1, r3
 80023bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023be:	f00d fa86 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	3301      	adds	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <dhcpserver_fn+0x4b0>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	061a      	lsls	r2, r3, #24
 80023ce:	4b6a      	ldr	r3, [pc, #424]	; (8002578 <dhcpserver_fn+0x4b4>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	4b69      	ldr	r3, [pc, #420]	; (800257c <dhcpserver_fn+0x4b8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	021b      	lsls	r3, r3, #8
 80023dc:	4313      	orrs	r3, r2
 80023de:	4a68      	ldr	r2, [pc, #416]	; (8002580 <dhcpserver_fn+0x4bc>)
 80023e0:	7812      	ldrb	r2, [r2, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	061a      	lsls	r2, r3, #24
 80023e6:	4b63      	ldr	r3, [pc, #396]	; (8002574 <dhcpserver_fn+0x4b0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	0619      	lsls	r1, r3, #24
 80023ec:	4b62      	ldr	r3, [pc, #392]	; (8002578 <dhcpserver_fn+0x4b4>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	041b      	lsls	r3, r3, #16
 80023f2:	4319      	orrs	r1, r3
 80023f4:	4b61      	ldr	r3, [pc, #388]	; (800257c <dhcpserver_fn+0x4b8>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	430b      	orrs	r3, r1
 80023fc:	4960      	ldr	r1, [pc, #384]	; (8002580 <dhcpserver_fn+0x4bc>)
 80023fe:	7809      	ldrb	r1, [r1, #0]
 8002400:	430b      	orrs	r3, r1
 8002402:	021b      	lsls	r3, r3, #8
 8002404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002408:	431a      	orrs	r2, r3
 800240a:	4b5a      	ldr	r3, [pc, #360]	; (8002574 <dhcpserver_fn+0x4b0>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	0619      	lsls	r1, r3, #24
 8002410:	4b59      	ldr	r3, [pc, #356]	; (8002578 <dhcpserver_fn+0x4b4>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	4319      	orrs	r1, r3
 8002418:	4b58      	ldr	r3, [pc, #352]	; (800257c <dhcpserver_fn+0x4b8>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	430b      	orrs	r3, r1
 8002420:	4957      	ldr	r1, [pc, #348]	; (8002580 <dhcpserver_fn+0x4bc>)
 8002422:	7809      	ldrb	r1, [r1, #0]
 8002424:	430b      	orrs	r3, r1
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800242c:	431a      	orrs	r2, r3
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <dhcpserver_fn+0x4b0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	0619      	lsls	r1, r3, #24
 8002434:	4b50      	ldr	r3, [pc, #320]	; (8002578 <dhcpserver_fn+0x4b4>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	4319      	orrs	r1, r3
 800243c:	4b4f      	ldr	r3, [pc, #316]	; (800257c <dhcpserver_fn+0x4b8>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	430b      	orrs	r3, r1
 8002444:	494e      	ldr	r1, [pc, #312]	; (8002580 <dhcpserver_fn+0x4bc>)
 8002446:	7809      	ldrb	r1, [r1, #0]
 8002448:	430b      	orrs	r3, r1
 800244a:	0e1b      	lsrs	r3, r3, #24
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	b29b      	uxth	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	4619      	mov	r1, r3
 800245a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800245c:	f00d fa37 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	b29b      	uxth	r3, r3
 8002464:	3301      	adds	r3, #1
 8002466:	b299      	uxth	r1, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002472:	f00d fa2c 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	b29b      	uxth	r3, r3
 800247a:	3302      	adds	r3, #2
 800247c:	b299      	uxth	r1, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002488:	f00d fa21 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	b29b      	uxth	r3, r3
 8002490:	3303      	adds	r3, #3
 8002492:	b299      	uxth	r1, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	0e1b      	lsrs	r3, r3, #24
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800249e:	f00d fa16 	bl	800f8ce <pbuf_put_at>
      options_offset += 4;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3304      	adds	r3, #4
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2233      	movs	r2, #51	; 0x33
 80024ae:	4619      	mov	r1, r3
 80024b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024b2:	f00d fa0c 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	3301      	adds	r3, #1
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	b29b      	uxth	r3, r3
 80024c0:	2204      	movs	r2, #4
 80024c2:	4619      	mov	r1, r3
 80024c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024c6:	f00d fa02 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	3301      	adds	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2200      	movs	r2, #0
 80024d6:	4619      	mov	r1, r3
 80024d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024da:	f00d f9f8 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2201      	movs	r2, #1
 80024e8:	4619      	mov	r1, r3
 80024ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024ec:	f00d f9ef 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3302      	adds	r3, #2
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	2251      	movs	r2, #81	; 0x51
 80024fa:	4619      	mov	r1, r3
 80024fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024fe:	f00d f9e6 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	b29b      	uxth	r3, r3
 8002506:	3303      	adds	r3, #3
 8002508:	b29b      	uxth	r3, r3
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	4619      	mov	r1, r3
 800250e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002510:	f00d f9dd 	bl	800f8ce <pbuf_put_at>
      options_offset += 4;
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3304      	adds	r3, #4
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	b29b      	uxth	r3, r3
 800251e:	2236      	movs	r2, #54	; 0x36
 8002520:	4619      	mov	r1, r3
 8002522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002524:	f00d f9d3 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	b29b      	uxth	r3, r3
 8002532:	2204      	movs	r2, #4
 8002534:	4619      	mov	r1, r3
 8002536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002538:	f00d f9c9 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	3301      	adds	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <dhcpserver_fn+0x4b0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	061a      	lsls	r2, r3, #24
 8002548:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <dhcpserver_fn+0x4b4>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	431a      	orrs	r2, r3
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <dhcpserver_fn+0x4b8>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	4313      	orrs	r3, r2
 8002558:	4a09      	ldr	r2, [pc, #36]	; (8002580 <dhcpserver_fn+0x4bc>)
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	4313      	orrs	r3, r2
 800255e:	061a      	lsls	r2, r3, #24
 8002560:	e010      	b.n	8002584 <dhcpserver_fn+0x4c0>
 8002562:	bf00      	nop
 8002564:	200000a2 	.word	0x200000a2
 8002568:	200000a3 	.word	0x200000a3
 800256c:	200000a4 	.word	0x200000a4
 8002570:	200008f4 	.word	0x200008f4
 8002574:	2000009e 	.word	0x2000009e
 8002578:	2000009f 	.word	0x2000009f
 800257c:	200000a0 	.word	0x200000a0
 8002580:	200000a1 	.word	0x200000a1
 8002584:	4b54      	ldr	r3, [pc, #336]	; (80026d8 <dhcpserver_fn+0x614>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	0619      	lsls	r1, r3, #24
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <dhcpserver_fn+0x618>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	4319      	orrs	r1, r3
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <dhcpserver_fn+0x61c>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	430b      	orrs	r3, r1
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <dhcpserver_fn+0x620>)
 800259c:	7809      	ldrb	r1, [r1, #0]
 800259e:	430b      	orrs	r3, r1
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80025a6:	431a      	orrs	r2, r3
 80025a8:	4b4b      	ldr	r3, [pc, #300]	; (80026d8 <dhcpserver_fn+0x614>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	0619      	lsls	r1, r3, #24
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <dhcpserver_fn+0x618>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	4319      	orrs	r1, r3
 80025b6:	4b4a      	ldr	r3, [pc, #296]	; (80026e0 <dhcpserver_fn+0x61c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	430b      	orrs	r3, r1
 80025be:	4949      	ldr	r1, [pc, #292]	; (80026e4 <dhcpserver_fn+0x620>)
 80025c0:	7809      	ldrb	r1, [r1, #0]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025ca:	431a      	orrs	r2, r3
 80025cc:	4b42      	ldr	r3, [pc, #264]	; (80026d8 <dhcpserver_fn+0x614>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	0619      	lsls	r1, r3, #24
 80025d2:	4b42      	ldr	r3, [pc, #264]	; (80026dc <dhcpserver_fn+0x618>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	4319      	orrs	r1, r3
 80025da:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <dhcpserver_fn+0x61c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	430b      	orrs	r3, r1
 80025e2:	4940      	ldr	r1, [pc, #256]	; (80026e4 <dhcpserver_fn+0x620>)
 80025e4:	7809      	ldrb	r1, [r1, #0]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	0e1b      	lsrs	r3, r3, #24
 80025ea:	4313      	orrs	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025fa:	f00d f968 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	b29b      	uxth	r3, r3
 8002602:	3301      	adds	r3, #1
 8002604:	b299      	uxth	r1, r3
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	0a1b      	lsrs	r3, r3, #8
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002610:	f00d f95d 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	b29b      	uxth	r3, r3
 8002618:	3302      	adds	r3, #2
 800261a:	b299      	uxth	r1, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b2db      	uxtb	r3, r3
 8002622:	461a      	mov	r2, r3
 8002624:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002626:	f00d f952 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	b29b      	uxth	r3, r3
 800262e:	3303      	adds	r3, #3
 8002630:	b299      	uxth	r1, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	0e1b      	lsrs	r3, r3, #24
 8002636:	b2db      	uxtb	r3, r3
 8002638:	461a      	mov	r2, r3
 800263a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800263c:	f00d f947 	bl	800f8ce <pbuf_put_at>
      options_offset += 4;
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	3304      	adds	r3, #4
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	b29b      	uxth	r3, r3
 800264a:	22ff      	movs	r2, #255	; 0xff
 800264c:	4619      	mov	r1, r3
 800264e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002650:	f00d f93d 	bl	800f8ce <pbuf_put_at>
      options_offset++;
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	3301      	adds	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	b29b      	uxth	r3, r3
 800265e:	4619      	mov	r1, r3
 8002660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002662:	f00c fb93 	bl	800ed8c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <dhcpserver_fn+0x624>)
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	f107 0214 	add.w	r2, r7, #20
 800266e:	2344      	movs	r3, #68	; 0x44
 8002670:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002672:	f013 fc97 	bl	8015fa4 <udp_sendto>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
      break;
 800267a:	e2f9      	b.n	8002c70 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800267c:	2202      	movs	r2, #2
 800267e:	2100      	movs	r1, #0
 8002680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002682:	f00d f924 	bl	800f8ce <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2108      	movs	r1, #8
 800268a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800268c:	f00d f91f 	bl	800f8ce <pbuf_put_at>
      flags = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8002696:	210a      	movs	r1, #10
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f00d f8df 	bl	800f85c <pbuf_get_at>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (flags & 0x80) {
 80026a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da1f      	bge.n	80026ec <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80026ac:	210a      	movs	r1, #10
 80026ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026b0:	f00d f8d4 	bl	800f85c <pbuf_get_at>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags |= 0x80;
 80026ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 80026c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026ca:	461a      	mov	r2, r3
 80026cc:	210a      	movs	r1, #10
 80026ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026d0:	f00d f8fd 	bl	800f8ce <pbuf_put_at>
 80026d4:	e01e      	b.n	8002714 <dhcpserver_fn+0x650>
 80026d6:	bf00      	nop
 80026d8:	2000009e 	.word	0x2000009e
 80026dc:	2000009f 	.word	0x2000009f
 80026e0:	200000a0 	.word	0x200000a0
 80026e4:	200000a1 	.word	0x200000a1
 80026e8:	200005f4 	.word	0x200005f4
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 80026ec:	210a      	movs	r1, #10
 80026ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026f0:	f00d f8b4 	bl	800f85c <pbuf_get_at>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags &= ~0x80;
 80026fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8002706:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800270a:	461a      	mov	r2, r3
 800270c:	210a      	movs	r1, #10
 800270e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002710:	f00d f8dd 	bl	800f8ce <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fc7e 	bl	800201c <dhcpserver_find_requested_ip>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 82a3 	beq.w	8002c6e <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	f040 8249 	bne.w	8002bc4 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	2110      	movs	r1, #16
 800273a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800273c:	f00d f8c7 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	0a1b      	lsrs	r3, r3, #8
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	2111      	movs	r1, #17
 800274a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800274c:	f00d f8bf 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	2112      	movs	r1, #18
 800275a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800275c:	f00d f8b7 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	0e1b      	lsrs	r3, r3, #24
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	2113      	movs	r1, #19
 800276a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800276c:	f00d f8af 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002770:	2200      	movs	r2, #0
 8002772:	2114      	movs	r1, #20
 8002774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002776:	f00d f8aa 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2115      	movs	r1, #21
 800277e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002780:	f00d f8a5 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2116      	movs	r1, #22
 8002788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800278a:	f00d f8a0 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2117      	movs	r1, #23
 8002792:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002794:	f00d f89b 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002798:	2263      	movs	r2, #99	; 0x63
 800279a:	21ec      	movs	r1, #236	; 0xec
 800279c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800279e:	f00d f896 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80027a2:	2282      	movs	r2, #130	; 0x82
 80027a4:	21ed      	movs	r1, #237	; 0xed
 80027a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a8:	f00d f891 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 80027ac:	2253      	movs	r2, #83	; 0x53
 80027ae:	21ee      	movs	r1, #238	; 0xee
 80027b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027b2:	f00d f88c 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80027b6:	2263      	movs	r2, #99	; 0x63
 80027b8:	21ef      	movs	r1, #239	; 0xef
 80027ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027bc:	f00d f887 	bl	800f8ce <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 80027c0:	23f0      	movs	r3, #240	; 0xf0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	2235      	movs	r2, #53	; 0x35
 80027ca:	4619      	mov	r1, r3
 80027cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027ce:	f00d f87e 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2201      	movs	r2, #1
 80027de:	4619      	mov	r1, r3
 80027e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027e2:	f00d f874 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	3301      	adds	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2205      	movs	r2, #5
 80027f2:	4619      	mov	r1, r3
 80027f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f6:	f00d f86a 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	3301      	adds	r3, #1
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	b29b      	uxth	r3, r3
 8002804:	2201      	movs	r2, #1
 8002806:	4619      	mov	r1, r3
 8002808:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800280a:	f00d f860 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	3301      	adds	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	b29b      	uxth	r3, r3
 8002818:	2204      	movs	r2, #4
 800281a:	4619      	mov	r1, r3
 800281c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800281e:	f00d f856 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002828:	4ba8      	ldr	r3, [pc, #672]	; (8002acc <dhcpserver_fn+0xa08>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	061a      	lsls	r2, r3, #24
 800282e:	4ba8      	ldr	r3, [pc, #672]	; (8002ad0 <dhcpserver_fn+0xa0c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	4ba7      	ldr	r3, [pc, #668]	; (8002ad4 <dhcpserver_fn+0xa10>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4313      	orrs	r3, r2
 800283e:	4aa6      	ldr	r2, [pc, #664]	; (8002ad8 <dhcpserver_fn+0xa14>)
 8002840:	7812      	ldrb	r2, [r2, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	061a      	lsls	r2, r3, #24
 8002846:	4ba1      	ldr	r3, [pc, #644]	; (8002acc <dhcpserver_fn+0xa08>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	0619      	lsls	r1, r3, #24
 800284c:	4ba0      	ldr	r3, [pc, #640]	; (8002ad0 <dhcpserver_fn+0xa0c>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	041b      	lsls	r3, r3, #16
 8002852:	4319      	orrs	r1, r3
 8002854:	4b9f      	ldr	r3, [pc, #636]	; (8002ad4 <dhcpserver_fn+0xa10>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	430b      	orrs	r3, r1
 800285c:	499e      	ldr	r1, [pc, #632]	; (8002ad8 <dhcpserver_fn+0xa14>)
 800285e:	7809      	ldrb	r1, [r1, #0]
 8002860:	430b      	orrs	r3, r1
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002868:	431a      	orrs	r2, r3
 800286a:	4b98      	ldr	r3, [pc, #608]	; (8002acc <dhcpserver_fn+0xa08>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	0619      	lsls	r1, r3, #24
 8002870:	4b97      	ldr	r3, [pc, #604]	; (8002ad0 <dhcpserver_fn+0xa0c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	041b      	lsls	r3, r3, #16
 8002876:	4319      	orrs	r1, r3
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <dhcpserver_fn+0xa10>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	430b      	orrs	r3, r1
 8002880:	4995      	ldr	r1, [pc, #596]	; (8002ad8 <dhcpserver_fn+0xa14>)
 8002882:	7809      	ldrb	r1, [r1, #0]
 8002884:	430b      	orrs	r3, r1
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800288c:	431a      	orrs	r2, r3
 800288e:	4b8f      	ldr	r3, [pc, #572]	; (8002acc <dhcpserver_fn+0xa08>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	0619      	lsls	r1, r3, #24
 8002894:	4b8e      	ldr	r3, [pc, #568]	; (8002ad0 <dhcpserver_fn+0xa0c>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	4319      	orrs	r1, r3
 800289c:	4b8d      	ldr	r3, [pc, #564]	; (8002ad4 <dhcpserver_fn+0xa10>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	430b      	orrs	r3, r1
 80028a4:	498c      	ldr	r1, [pc, #560]	; (8002ad8 <dhcpserver_fn+0xa14>)
 80028a6:	7809      	ldrb	r1, [r1, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	0e1b      	lsrs	r3, r3, #24
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028bc:	f00d f807 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	b299      	uxth	r1, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028d2:	f00c fffc 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3302      	adds	r3, #2
 80028dc:	b299      	uxth	r1, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	0c1b      	lsrs	r3, r3, #16
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028e8:	f00c fff1 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	3303      	adds	r3, #3
 80028f2:	b299      	uxth	r1, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	0e1b      	lsrs	r3, r3, #24
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028fe:	f00c ffe6 	bl	800f8ce <pbuf_put_at>
        options_offset += 4;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	3304      	adds	r3, #4
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	b29b      	uxth	r3, r3
 800290c:	2203      	movs	r2, #3
 800290e:	4619      	mov	r1, r3
 8002910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002912:	f00c ffdc 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3301      	adds	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	b29b      	uxth	r3, r3
 8002920:	2204      	movs	r2, #4
 8002922:	4619      	mov	r1, r3
 8002924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002926:	f00c ffd2 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	3301      	adds	r3, #1
 800292e:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002930:	4b6a      	ldr	r3, [pc, #424]	; (8002adc <dhcpserver_fn+0xa18>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	061a      	lsls	r2, r3, #24
 8002936:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <dhcpserver_fn+0xa1c>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	431a      	orrs	r2, r3
 800293e:	4b69      	ldr	r3, [pc, #420]	; (8002ae4 <dhcpserver_fn+0xa20>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	4313      	orrs	r3, r2
 8002946:	4a68      	ldr	r2, [pc, #416]	; (8002ae8 <dhcpserver_fn+0xa24>)
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	061a      	lsls	r2, r3, #24
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <dhcpserver_fn+0xa18>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	0619      	lsls	r1, r3, #24
 8002954:	4b62      	ldr	r3, [pc, #392]	; (8002ae0 <dhcpserver_fn+0xa1c>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	4319      	orrs	r1, r3
 800295c:	4b61      	ldr	r3, [pc, #388]	; (8002ae4 <dhcpserver_fn+0xa20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	430b      	orrs	r3, r1
 8002964:	4960      	ldr	r1, [pc, #384]	; (8002ae8 <dhcpserver_fn+0xa24>)
 8002966:	7809      	ldrb	r1, [r1, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002970:	431a      	orrs	r2, r3
 8002972:	4b5a      	ldr	r3, [pc, #360]	; (8002adc <dhcpserver_fn+0xa18>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	0619      	lsls	r1, r3, #24
 8002978:	4b59      	ldr	r3, [pc, #356]	; (8002ae0 <dhcpserver_fn+0xa1c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	041b      	lsls	r3, r3, #16
 800297e:	4319      	orrs	r1, r3
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <dhcpserver_fn+0xa20>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	430b      	orrs	r3, r1
 8002988:	4957      	ldr	r1, [pc, #348]	; (8002ae8 <dhcpserver_fn+0xa24>)
 800298a:	7809      	ldrb	r1, [r1, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002994:	431a      	orrs	r2, r3
 8002996:	4b51      	ldr	r3, [pc, #324]	; (8002adc <dhcpserver_fn+0xa18>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	0619      	lsls	r1, r3, #24
 800299c:	4b50      	ldr	r3, [pc, #320]	; (8002ae0 <dhcpserver_fn+0xa1c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	041b      	lsls	r3, r3, #16
 80029a2:	4319      	orrs	r1, r3
 80029a4:	4b4f      	ldr	r3, [pc, #316]	; (8002ae4 <dhcpserver_fn+0xa20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	430b      	orrs	r3, r1
 80029ac:	494e      	ldr	r1, [pc, #312]	; (8002ae8 <dhcpserver_fn+0xa24>)
 80029ae:	7809      	ldrb	r1, [r1, #0]
 80029b0:	430b      	orrs	r3, r1
 80029b2:	0e1b      	lsrs	r3, r3, #24
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029c4:	f00c ff83 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	b299      	uxth	r1, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029da:	f00c ff78 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3302      	adds	r3, #2
 80029e4:	b299      	uxth	r1, r3
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	0c1b      	lsrs	r3, r3, #16
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029f0:	f00c ff6d 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3303      	adds	r3, #3
 80029fa:	b299      	uxth	r1, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	0e1b      	lsrs	r3, r3, #24
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a06:	f00c ff62 	bl	800f8ce <pbuf_put_at>
        options_offset += 4;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2233      	movs	r2, #51	; 0x33
 8002a16:	4619      	mov	r1, r3
 8002a18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a1a:	f00c ff58 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	3301      	adds	r3, #1
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2204      	movs	r2, #4
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a2e:	f00c ff4e 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	3301      	adds	r3, #1
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a42:	f00c ff44 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4619      	mov	r1, r3
 8002a52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a54:	f00c ff3b 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2251      	movs	r2, #81	; 0x51
 8002a62:	4619      	mov	r1, r3
 8002a64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a66:	f00c ff32 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3303      	adds	r3, #3
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	4619      	mov	r1, r3
 8002a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a78:	f00c ff29 	bl	800f8ce <pbuf_put_at>
        options_offset += 4;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	3304      	adds	r3, #4
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2236      	movs	r2, #54	; 0x36
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8c:	f00c ff1f 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	3301      	adds	r3, #1
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aa0:	f00c ff15 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <dhcpserver_fn+0xa18>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	061a      	lsls	r2, r3, #24
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <dhcpserver_fn+0xa1c>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	041b      	lsls	r3, r3, #16
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <dhcpserver_fn+0xa20>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <dhcpserver_fn+0xa24>)
 8002ac2:	7812      	ldrb	r2, [r2, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	061a      	lsls	r2, r3, #24
 8002ac8:	e010      	b.n	8002aec <dhcpserver_fn+0xa28>
 8002aca:	bf00      	nop
 8002acc:	200000a2 	.word	0x200000a2
 8002ad0:	200000a3 	.word	0x200000a3
 8002ad4:	200000a4 	.word	0x200000a4
 8002ad8:	200008f4 	.word	0x200008f4
 8002adc:	2000009e 	.word	0x2000009e
 8002ae0:	2000009f 	.word	0x2000009f
 8002ae4:	200000a0 	.word	0x200000a0
 8002ae8:	200000a1 	.word	0x200000a1
 8002aec:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <dhcpserver_fn+0xbc8>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	0619      	lsls	r1, r3, #24
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <dhcpserver_fn+0xbcc>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	4319      	orrs	r1, r3
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <dhcpserver_fn+0xbd0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	430b      	orrs	r3, r1
 8002b02:	4965      	ldr	r1, [pc, #404]	; (8002c98 <dhcpserver_fn+0xbd4>)
 8002b04:	7809      	ldrb	r1, [r1, #0]
 8002b06:	430b      	orrs	r3, r1
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <dhcpserver_fn+0xbc8>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	0619      	lsls	r1, r3, #24
 8002b16:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <dhcpserver_fn+0xbcc>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	4319      	orrs	r1, r3
 8002b1e:	4b5d      	ldr	r3, [pc, #372]	; (8002c94 <dhcpserver_fn+0xbd0>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	021b      	lsls	r3, r3, #8
 8002b24:	430b      	orrs	r3, r1
 8002b26:	495c      	ldr	r1, [pc, #368]	; (8002c98 <dhcpserver_fn+0xbd4>)
 8002b28:	7809      	ldrb	r1, [r1, #0]
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b32:	431a      	orrs	r2, r3
 8002b34:	4b55      	ldr	r3, [pc, #340]	; (8002c8c <dhcpserver_fn+0xbc8>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	0619      	lsls	r1, r3, #24
 8002b3a:	4b55      	ldr	r3, [pc, #340]	; (8002c90 <dhcpserver_fn+0xbcc>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	4319      	orrs	r1, r3
 8002b42:	4b54      	ldr	r3, [pc, #336]	; (8002c94 <dhcpserver_fn+0xbd0>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	4953      	ldr	r1, [pc, #332]	; (8002c98 <dhcpserver_fn+0xbd4>)
 8002b4c:	7809      	ldrb	r1, [r1, #0]
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	0e1b      	lsrs	r3, r3, #24
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b62:	f00c feb4 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
 8002b76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b78:	f00c fea9 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3302      	adds	r3, #2
 8002b82:	b299      	uxth	r1, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	0c1b      	lsrs	r3, r3, #16
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b8e:	f00c fe9e 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3303      	adds	r3, #3
 8002b98:	b299      	uxth	r1, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	0e1b      	lsrs	r3, r3, #24
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba4:	f00c fe93 	bl	800f8ce <pbuf_put_at>
        options_offset += 4;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	3304      	adds	r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	22ff      	movs	r2, #255	; 0xff
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bb8:	f00c fe89 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc2:	e03d      	b.n	8002c40 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002bc4:	2263      	movs	r2, #99	; 0x63
 8002bc6:	21ec      	movs	r1, #236	; 0xec
 8002bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bca:	f00c fe80 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002bce:	2282      	movs	r2, #130	; 0x82
 8002bd0:	21ed      	movs	r1, #237	; 0xed
 8002bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bd4:	f00c fe7b 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002bd8:	2253      	movs	r2, #83	; 0x53
 8002bda:	21ee      	movs	r1, #238	; 0xee
 8002bdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bde:	f00c fe76 	bl	800f8ce <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002be2:	2263      	movs	r2, #99	; 0x63
 8002be4:	21ef      	movs	r1, #239	; 0xef
 8002be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be8:	f00c fe71 	bl	800f8ce <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002bec:	23f0      	movs	r3, #240	; 0xf0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	2235      	movs	r2, #53	; 0x35
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bfa:	f00c fe68 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	3301      	adds	r3, #1
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2201      	movs	r2, #1
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c0e:	f00c fe5e 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	3301      	adds	r3, #1
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2206      	movs	r2, #6
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c22:	f00c fe54 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3301      	adds	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	4619      	mov	r1, r3
 8002c34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c36:	f00c fe4a 	bl	800f8ce <pbuf_put_at>
        options_offset++;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c48:	f00c f8a0 	bl	800ed8c <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <dhcpserver_fn+0xbd8>)
 8002c4e:	6818      	ldr	r0, [r3, #0]
 8002c50:	f107 0214 	add.w	r2, r7, #20
 8002c54:	2344      	movs	r3, #68	; 0x44
 8002c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c58:	f013 f9a4 	bl	8015fa4 <udp_sendto>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
      break;
 8002c60:	e006      	b.n	8002c70 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002c62:	bf00      	nop
 8002c64:	e004      	b.n	8002c70 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002c6e:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8002c76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c78:	f00c fa0e 	bl	800f098 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f00c fa0b 	bl	800f098 <pbuf_free>
}
 8002c82:	bf00      	nop
 8002c84:	3730      	adds	r7, #48	; 0x30
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000009e 	.word	0x2000009e
 8002c90:	2000009f 	.word	0x2000009f
 8002c94:	200000a0 	.word	0x200000a0
 8002c98:	200000a1 	.word	0x200000a1
 8002c9c:	200005f4 	.word	0x200005f4

08002ca0 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e03d      	b.n	8002d2a <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002cae:	4933      	ldr	r1, [pc, #204]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	440b      	add	r3, r1
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002cc0:	492e      	ldr	r1, [pc, #184]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	4413      	add	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	440b      	add	r3, r1
 8002cce:	3301      	adds	r3, #1
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002cd4:	4929      	ldr	r1, [pc, #164]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3302      	adds	r3, #2
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002ce8:	4924      	ldr	r1, [pc, #144]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3303      	adds	r3, #3
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002cfc:	491f      	ldr	r1, [pc, #124]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	440b      	add	r3, r1
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8002d10:	491a      	ldr	r1, [pc, #104]	; (8002d7c <dhcpserver_start_prv+0xdc>)
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3305      	adds	r3, #5
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d9be      	bls.n	8002cae <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8002d30:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11e      	bne.n	8002d76 <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8002d38:	f013 fc84 	bl	8016644 <udp_new>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d40:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8002d42:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d014      	beq.n	8002d74 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2243      	movs	r2, #67	; 0x43
 8002d50:	490c      	ldr	r1, [pc, #48]	; (8002d84 <dhcpserver_start_prv+0xe4>)
 8002d52:	4618      	mov	r0, r3
 8002d54:	f013 fadc 	bl	8016310 <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	490a      	ldr	r1, [pc, #40]	; (8002d88 <dhcpserver_start_prv+0xe8>)
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f013 fb5e 	bl	8016420 <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <dhcpserver_start_prv+0xe0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <dhcpserver_start_prv+0xec>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f013 fc07 	bl	8016580 <udp_recv>
 8002d72:	e000      	b.n	8002d76 <dhcpserver_start_prv+0xd6>
      return;
 8002d74:	bf00      	nop
  }
}
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200005f8 	.word	0x200005f8
 8002d80:	200005f4 	.word	0x200005f4
 8002d84:	0806df40 	.word	0x0806df40
 8002d88:	20000884 	.word	0x20000884
 8002d8c:	080020c5 	.word	0x080020c5

08002d90 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8002d94:	2100      	movs	r1, #0
 8002d96:	4802      	ldr	r0, [pc, #8]	; (8002da0 <dhcpserver_start+0x10>)
 8002d98:	f00a fb84 	bl	800d4a4 <tcpip_callback>
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08002ca1 	.word	0x08002ca1

08002da4 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <dhcpserver_stop_prv+0x34>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00c      	beq.n	8002dce <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <dhcpserver_stop_prv+0x34>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f013 fbb9 	bl	8016530 <udp_disconnect>
    udp_remove(dhcp_pcb);
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <dhcpserver_stop_prv+0x34>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f013 fbfc 	bl	80165c0 <udp_remove>
    dhcp_pcb = NULL;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <dhcpserver_stop_prv+0x34>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
  }
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200005f4 	.word	0x200005f4

08002ddc <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8002de0:	2100      	movs	r1, #0
 8002de2:	4802      	ldr	r0, [pc, #8]	; (8002dec <dhcpserver_stop+0x10>)
 8002de4:	f00a fb5e 	bl	800d4a4 <tcpip_callback>
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08002da5 	.word	0x08002da5

08002df0 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2206      	movs	r2, #6
 8002dfc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3332      	adds	r3, #50	; 0x32
 8002e04:	2202      	movs	r2, #2
 8002e06:	491b      	ldr	r1, [pc, #108]	; (8002e74 <low_level_init+0x84>)
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f019 f967 	bl	801c0dc <memcmp>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10a      	bne.n	8002e2a <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8002e1a:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <low_level_init+0x88>)
 8002e1c:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002e20:	6819      	ldr	r1, [r3, #0]
 8002e22:	6011      	str	r1, [r2, #0]
 8002e24:	889b      	ldrh	r3, [r3, #4]
 8002e26:	8093      	strh	r3, [r2, #4]
 8002e28:	e009      	b.n	8002e3e <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8002e30:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <low_level_init+0x88>)
 8002e32:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	6010      	str	r0, [r2, #0]
 8002e3a:	889b      	ldrh	r3, [r3, #4]
 8002e3c:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e4c:	f043 030a 	orr.w	r3, r3, #10
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	0801e934 	.word	0x0801e934
 8002e78:	20000628 	.word	0x20000628

08002e7c <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8002e86:	4b37      	ldr	r3, [pc, #220]	; (8002f64 <low_level_output+0xe8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f007 fdea 	bl	800aa68 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	891b      	ldrh	r3, [r3, #8]
 8002e98:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 8002e9a:	f107 0008 	add.w	r0, r7, #8
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	214a      	movs	r1, #74	; 0x4a
 8002ea2:	f005 fc71 	bl	8008788 <sl_wfx_allocate_command_buffer>
 8002ea6:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <low_level_output+0x38>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002eb4:	4b2b      	ldr	r3, [pc, #172]	; (8002f64 <low_level_output+0xe8>)
 8002eb6:	6818      	ldr	r0, [r3, #0]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	f007 facd 	bl	800a45c <xQueueGenericSend>
    return ERR_MEM;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec6:	e049      	b.n	8002f5c <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3318      	adds	r3, #24
 8002ecc:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e010      	b.n	8002ef6 <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	895b      	ldrh	r3, [r3, #10]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6938      	ldr	r0, [r7, #16]
 8002ee0:	f019 f9c9 	bl	801c276 <memcpy>
    buffer += q->len;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	895b      	ldrh	r3, [r3, #10]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1eb      	bne.n	8002ed4 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3332      	adds	r3, #50	; 0x32
 8002f00:	2202      	movs	r2, #2
 8002f02:	4919      	ldr	r1, [pc, #100]	; (8002f68 <low_level_output+0xec>)
 8002f04:	4618      	mov	r0, r3
 8002f06:	f019 f8e9 	bl	801c0dc <memcmp>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	891a      	ldrh	r2, [r3, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <low_level_output+0xf0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <low_level_output+0xf0>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	e002      	b.n	8002f3a <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <low_level_output+0xf0>)
 8002f38:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <low_level_output+0xf0>)
 8002f3e:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <low_level_output+0xf4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f007 f82a 	bl	8009fa0 <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <low_level_output+0xe8>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	2300      	movs	r3, #0
 8002f52:	2200      	movs	r2, #0
 8002f54:	2100      	movs	r1, #0
 8002f56:	f007 fa81 	bl	800a45c <xQueueGenericSend>
  
  return ERR_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20001478 	.word	0x20001478
 8002f68:	0801e934 	.word	0x0801e934
 8002f6c:	2000147c 	.word	0x2000147c
 8002f70:	20001474 	.word	0x20001474

08002f74 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	795b      	ldrb	r3, [r3, #5]
 8002f82:	461a      	mov	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	3308      	adds	r3, #8
 8002f8a:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	88db      	ldrh	r3, [r3, #6]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	88db      	ldrh	r3, [r3, #6]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f00b fd90 	bl	800eac8 <pbuf_alloc>
 8002fa8:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d016      	beq.n	8002fde <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e010      	b.n	8002fd8 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6858      	ldr	r0, [r3, #4]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	895b      	ldrh	r3, [r3, #10]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	f019 f958 	bl	801c276 <memcpy>
      buffer += q->len;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	895b      	ldrh	r3, [r3, #10]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1eb      	bne.n	8002fb6 <low_level_input+0x42>
    }
  }  
   
  return p;
 8002fde:	697b      	ldr	r3, [r7, #20]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	78db      	ldrb	r3, [r3, #3]
 8002ff4:	f003 0306 	and.w	r3, r3, #6
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <sl_wfx_host_received_frame_callback+0x54>)
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	e001      	b.n	8003006 <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8003002:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <sl_wfx_host_received_frame_callback+0x58>)
 8003004:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ffb0 	bl	8002f74 <low_level_input>
 8003014:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	68f9      	ldr	r1, [r7, #12]
 8003022:	68b8      	ldr	r0, [r7, #8]
 8003024:	4798      	blx	r3
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 800302c:	68b8      	ldr	r0, [r7, #8]
 800302e:	f00c f833 	bl	800f098 <pbuf_free>
      }
    }
  }
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000084c 	.word	0x2000084c
 8003040:	20000884 	.word	0x20000884

08003044 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <sta_ethernetif_init+0x1a>
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <sta_ethernetif_init+0x44>)
 8003054:	22dc      	movs	r2, #220	; 0xdc
 8003056:	490d      	ldr	r1, [pc, #52]	; (800308c <sta_ethernetif_init+0x48>)
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <sta_ethernetif_init+0x4c>)
 800305a:	f018 fee5 	bl	801be28 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3332      	adds	r3, #50	; 0x32
 8003062:	2202      	movs	r2, #2
 8003064:	490b      	ldr	r1, [pc, #44]	; (8003094 <sta_ethernetif_init+0x50>)
 8003066:	4618      	mov	r0, r3
 8003068:	f019 f905 	bl	801c276 <memcpy>

  netif->output = etharp_output;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <sta_ethernetif_init+0x54>)
 8003070:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a09      	ldr	r2, [pc, #36]	; (800309c <sta_ethernetif_init+0x58>)
 8003076:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff feb9 	bl	8002df0 <low_level_init>
  
  return ERR_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0801e938 	.word	0x0801e938
 800308c:	0801e954 	.word	0x0801e954
 8003090:	0801e964 	.word	0x0801e964
 8003094:	0801e934 	.word	0x0801e934
 8003098:	08018da5 	.word	0x08018da5
 800309c:	08002e7d 	.word	0x08002e7d

080030a0 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80030a4:	f001 f892 	bl	80041cc <HAL_GetTick>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 80030b8:	2100      	movs	r1, #0
 80030ba:	2000      	movs	r0, #0
 80030bc:	f00a fa80 	bl	800d5c0 <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 80030c0:	f000 f886 	bl	80031d0 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <lwip_start_task_entry+0x44>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00d      	beq.n	80030e8 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 80030cc:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <lwip_start_task_entry+0x48>)
 80030ce:	f107 040c 	add.w	r4, r7, #12
 80030d2:	461d      	mov	r5, r3
 80030d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030d8:	682b      	ldr	r3, [r5, #0]
 80030da:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <lwip_start_task_entry+0x4c>)
 80030e2:	4618      	mov	r0, r3
 80030e4:	f006 fcb7 	bl	8009a56 <osThreadCreate>
  }

  wifi_autoconnexion_init();
 80030e8:	f7fe fb2a 	bl	8001740 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 80030ec:	2000      	movs	r0, #0
 80030ee:	f006 fcd9 	bl	8009aa4 <osThreadTerminate>
 80030f2:	e7fb      	b.n	80030ec <lwip_start_task_entry+0x3c>
 80030f4:	20000094 	.word	0x20000094
 80030f8:	0801e998 	.word	0x0801e998
 80030fc:	2000084c 	.word	0x2000084c

08003100 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8003104:	2200      	movs	r2, #0
 8003106:	4909      	ldr	r1, [pc, #36]	; (800312c <lwip_set_sta_link_up+0x2c>)
 8003108:	4809      	ldr	r0, [pc, #36]	; (8003130 <lwip_set_sta_link_up+0x30>)
 800310a:	f00a f895 	bl	800d238 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 800310e:	2200      	movs	r2, #0
 8003110:	4908      	ldr	r1, [pc, #32]	; (8003134 <lwip_set_sta_link_up+0x34>)
 8003112:	4807      	ldr	r0, [pc, #28]	; (8003130 <lwip_set_sta_link_up+0x30>)
 8003114:	f00a f890 	bl	800d238 <netifapi_netif_common>
  if (use_dhcp_client) {
 8003118:	4b07      	ldr	r3, [pc, #28]	; (8003138 <lwip_set_sta_link_up+0x38>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 8003120:	2001      	movs	r0, #1
 8003122:	f7fe fbf9 	bl	8001918 <dhcpclient_set_link_state>
  }
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	0800e74d 	.word	0x0800e74d
 8003130:	2000084c 	.word	0x2000084c
 8003134:	0800e889 	.word	0x0800e889
 8003138:	20000094 	.word	0x20000094

0800313c <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 8003140:	4b09      	ldr	r3, [pc, #36]	; (8003168 <lwip_set_sta_link_down+0x2c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fe fbe5 	bl	8001918 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 800314e:	2200      	movs	r2, #0
 8003150:	4906      	ldr	r1, [pc, #24]	; (800316c <lwip_set_sta_link_down+0x30>)
 8003152:	4807      	ldr	r0, [pc, #28]	; (8003170 <lwip_set_sta_link_down+0x34>)
 8003154:	f00a f870 	bl	800d238 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 8003158:	2200      	movs	r2, #0
 800315a:	4906      	ldr	r1, [pc, #24]	; (8003174 <lwip_set_sta_link_down+0x38>)
 800315c:	4804      	ldr	r0, [pc, #16]	; (8003170 <lwip_set_sta_link_down+0x34>)
 800315e:	f00a f86b 	bl	800d238 <netifapi_netif_common>
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000094 	.word	0x20000094
 800316c:	0800e8f9 	.word	0x0800e8f9
 8003170:	2000084c 	.word	0x2000084c
 8003174:	0800e825 	.word	0x0800e825

08003178 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 800317c:	2200      	movs	r2, #0
 800317e:	4906      	ldr	r1, [pc, #24]	; (8003198 <lwip_set_ap_link_up+0x20>)
 8003180:	4806      	ldr	r0, [pc, #24]	; (800319c <lwip_set_ap_link_up+0x24>)
 8003182:	f00a f859 	bl	800d238 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8003186:	2200      	movs	r2, #0
 8003188:	4905      	ldr	r1, [pc, #20]	; (80031a0 <lwip_set_ap_link_up+0x28>)
 800318a:	4804      	ldr	r0, [pc, #16]	; (800319c <lwip_set_ap_link_up+0x24>)
 800318c:	f00a f854 	bl	800d238 <netifapi_netif_common>
  dhcpserver_start();
 8003190:	f7ff fdfe 	bl	8002d90 <dhcpserver_start>
}
 8003194:	bf00      	nop
 8003196:	bd80      	pop	{r7, pc}
 8003198:	0800e74d 	.word	0x0800e74d
 800319c:	20000884 	.word	0x20000884
 80031a0:	0800e889 	.word	0x0800e889

080031a4 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 80031a8:	f7ff fe18 	bl	8002ddc <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 80031ac:	2200      	movs	r2, #0
 80031ae:	4905      	ldr	r1, [pc, #20]	; (80031c4 <lwip_set_ap_link_down+0x20>)
 80031b0:	4805      	ldr	r0, [pc, #20]	; (80031c8 <lwip_set_ap_link_down+0x24>)
 80031b2:	f00a f841 	bl	800d238 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 80031b6:	2200      	movs	r2, #0
 80031b8:	4904      	ldr	r1, [pc, #16]	; (80031cc <lwip_set_ap_link_down+0x28>)
 80031ba:	4803      	ldr	r0, [pc, #12]	; (80031c8 <lwip_set_ap_link_down+0x24>)
 80031bc:	f00a f83c 	bl	800d238 <netifapi_netif_common>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	0800e8f9 	.word	0x0800e8f9
 80031c8:	20000884 	.word	0x20000884
 80031cc:	0800e825 	.word	0x0800e825

080031d0 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 80031dc:	4b9e      	ldr	r3, [pc, #632]	; (8003458 <netif_config+0x288>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 80031e4:	2300      	movs	r3, #0
 80031e6:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 80031e8:	2300      	movs	r3, #0
 80031ea:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 80031ec:	2300      	movs	r3, #0
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	e0cb      	b.n	800338a <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 80031f2:	4b9a      	ldr	r3, [pc, #616]	; (800345c <netif_config+0x28c>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	061a      	lsls	r2, r3, #24
 80031f8:	4b99      	ldr	r3, [pc, #612]	; (8003460 <netif_config+0x290>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
 8003200:	4b98      	ldr	r3, [pc, #608]	; (8003464 <netif_config+0x294>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	4313      	orrs	r3, r2
 8003208:	4a97      	ldr	r2, [pc, #604]	; (8003468 <netif_config+0x298>)
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	061a      	lsls	r2, r3, #24
 8003210:	4b92      	ldr	r3, [pc, #584]	; (800345c <netif_config+0x28c>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	0619      	lsls	r1, r3, #24
 8003216:	4b92      	ldr	r3, [pc, #584]	; (8003460 <netif_config+0x290>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	4319      	orrs	r1, r3
 800321e:	4b91      	ldr	r3, [pc, #580]	; (8003464 <netif_config+0x294>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	021b      	lsls	r3, r3, #8
 8003224:	430b      	orrs	r3, r1
 8003226:	4990      	ldr	r1, [pc, #576]	; (8003468 <netif_config+0x298>)
 8003228:	7809      	ldrb	r1, [r1, #0]
 800322a:	430b      	orrs	r3, r1
 800322c:	021b      	lsls	r3, r3, #8
 800322e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003232:	431a      	orrs	r2, r3
 8003234:	4b89      	ldr	r3, [pc, #548]	; (800345c <netif_config+0x28c>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	0619      	lsls	r1, r3, #24
 800323a:	4b89      	ldr	r3, [pc, #548]	; (8003460 <netif_config+0x290>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	4319      	orrs	r1, r3
 8003242:	4b88      	ldr	r3, [pc, #544]	; (8003464 <netif_config+0x294>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	430b      	orrs	r3, r1
 800324a:	4987      	ldr	r1, [pc, #540]	; (8003468 <netif_config+0x298>)
 800324c:	7809      	ldrb	r1, [r1, #0]
 800324e:	430b      	orrs	r3, r1
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003256:	431a      	orrs	r2, r3
 8003258:	4b80      	ldr	r3, [pc, #512]	; (800345c <netif_config+0x28c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	0619      	lsls	r1, r3, #24
 800325e:	4b80      	ldr	r3, [pc, #512]	; (8003460 <netif_config+0x290>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	4319      	orrs	r1, r3
 8003266:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <netif_config+0x294>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	430b      	orrs	r3, r1
 800326e:	497e      	ldr	r1, [pc, #504]	; (8003468 <netif_config+0x298>)
 8003270:	7809      	ldrb	r1, [r1, #0]
 8003272:	430b      	orrs	r3, r1
 8003274:	0e1b      	lsrs	r3, r3, #24
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 800327a:	4b7c      	ldr	r3, [pc, #496]	; (800346c <netif_config+0x29c>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	061a      	lsls	r2, r3, #24
 8003280:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <netif_config+0x2a0>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	041b      	lsls	r3, r3, #16
 8003286:	431a      	orrs	r2, r3
 8003288:	4b7a      	ldr	r3, [pc, #488]	; (8003474 <netif_config+0x2a4>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	4313      	orrs	r3, r2
 8003290:	4a79      	ldr	r2, [pc, #484]	; (8003478 <netif_config+0x2a8>)
 8003292:	7812      	ldrb	r2, [r2, #0]
 8003294:	4313      	orrs	r3, r2
 8003296:	061a      	lsls	r2, r3, #24
 8003298:	4b74      	ldr	r3, [pc, #464]	; (800346c <netif_config+0x29c>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	0619      	lsls	r1, r3, #24
 800329e:	4b74      	ldr	r3, [pc, #464]	; (8003470 <netif_config+0x2a0>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	041b      	lsls	r3, r3, #16
 80032a4:	4319      	orrs	r1, r3
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <netif_config+0x2a4>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	430b      	orrs	r3, r1
 80032ae:	4972      	ldr	r1, [pc, #456]	; (8003478 <netif_config+0x2a8>)
 80032b0:	7809      	ldrb	r1, [r1, #0]
 80032b2:	430b      	orrs	r3, r1
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032ba:	431a      	orrs	r2, r3
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <netif_config+0x29c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	0619      	lsls	r1, r3, #24
 80032c2:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <netif_config+0x2a0>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	041b      	lsls	r3, r3, #16
 80032c8:	4319      	orrs	r1, r3
 80032ca:	4b6a      	ldr	r3, [pc, #424]	; (8003474 <netif_config+0x2a4>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	430b      	orrs	r3, r1
 80032d2:	4969      	ldr	r1, [pc, #420]	; (8003478 <netif_config+0x2a8>)
 80032d4:	7809      	ldrb	r1, [r1, #0]
 80032d6:	430b      	orrs	r3, r1
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80032de:	431a      	orrs	r2, r3
 80032e0:	4b62      	ldr	r3, [pc, #392]	; (800346c <netif_config+0x29c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	0619      	lsls	r1, r3, #24
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <netif_config+0x2a0>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	4319      	orrs	r1, r3
 80032ee:	4b61      	ldr	r3, [pc, #388]	; (8003474 <netif_config+0x2a4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	430b      	orrs	r3, r1
 80032f6:	4960      	ldr	r1, [pc, #384]	; (8003478 <netif_config+0x2a8>)
 80032f8:	7809      	ldrb	r1, [r1, #0]
 80032fa:	430b      	orrs	r3, r1
 80032fc:	0e1b      	lsrs	r3, r3, #24
 80032fe:	4313      	orrs	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8003302:	4b5e      	ldr	r3, [pc, #376]	; (800347c <netif_config+0x2ac>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	061a      	lsls	r2, r3, #24
 8003308:	4b5d      	ldr	r3, [pc, #372]	; (8003480 <netif_config+0x2b0>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <netif_config+0x2b4>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	4313      	orrs	r3, r2
 8003318:	4a5b      	ldr	r2, [pc, #364]	; (8003488 <netif_config+0x2b8>)
 800331a:	7812      	ldrb	r2, [r2, #0]
 800331c:	4313      	orrs	r3, r2
 800331e:	061a      	lsls	r2, r3, #24
 8003320:	4b56      	ldr	r3, [pc, #344]	; (800347c <netif_config+0x2ac>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	0619      	lsls	r1, r3, #24
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <netif_config+0x2b0>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	4319      	orrs	r1, r3
 800332e:	4b55      	ldr	r3, [pc, #340]	; (8003484 <netif_config+0x2b4>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	021b      	lsls	r3, r3, #8
 8003334:	430b      	orrs	r3, r1
 8003336:	4954      	ldr	r1, [pc, #336]	; (8003488 <netif_config+0x2b8>)
 8003338:	7809      	ldrb	r1, [r1, #0]
 800333a:	430b      	orrs	r3, r1
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003342:	431a      	orrs	r2, r3
 8003344:	4b4d      	ldr	r3, [pc, #308]	; (800347c <netif_config+0x2ac>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	0619      	lsls	r1, r3, #24
 800334a:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <netif_config+0x2b0>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	041b      	lsls	r3, r3, #16
 8003350:	4319      	orrs	r1, r3
 8003352:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <netif_config+0x2b4>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	430b      	orrs	r3, r1
 800335a:	494b      	ldr	r1, [pc, #300]	; (8003488 <netif_config+0x2b8>)
 800335c:	7809      	ldrb	r1, [r1, #0]
 800335e:	430b      	orrs	r3, r1
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003366:	431a      	orrs	r2, r3
 8003368:	4b44      	ldr	r3, [pc, #272]	; (800347c <netif_config+0x2ac>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	0619      	lsls	r1, r3, #24
 800336e:	4b44      	ldr	r3, [pc, #272]	; (8003480 <netif_config+0x2b0>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	4319      	orrs	r1, r3
 8003376:	4b43      	ldr	r3, [pc, #268]	; (8003484 <netif_config+0x2b4>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	430b      	orrs	r3, r1
 800337e:	4942      	ldr	r1, [pc, #264]	; (8003488 <netif_config+0x2b8>)
 8003380:	7809      	ldrb	r1, [r1, #0]
 8003382:	430b      	orrs	r3, r1
 8003384:	0e1b      	lsrs	r3, r3, #24
 8003386:	4313      	orrs	r3, r2
 8003388:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 800338a:	4840      	ldr	r0, [pc, #256]	; (800348c <netif_config+0x2bc>)
 800338c:	f004 fa3a 	bl	8007804 <sl_wfx_init>
 8003390:	6138      	str	r0, [r7, #16]
  switch (status) {
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f640 3202 	movw	r2, #2818	; 0xb02
 8003398:	4293      	cmp	r3, r2
 800339a:	d034      	beq.n	8003406 <netif_config+0x236>
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f640 3202 	movw	r2, #2818	; 0xb02
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d83b      	bhi.n	800341e <netif_config+0x24e>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f640 3201 	movw	r2, #2817	; 0xb01
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d026      	beq.n	80033fe <netif_config+0x22e>
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f640 3201 	movw	r2, #2817	; 0xb01
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d831      	bhi.n	800341e <netif_config+0x24e>
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b07      	cmp	r3, #7
 80033be:	d026      	beq.n	800340e <netif_config+0x23e>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b07      	cmp	r3, #7
 80033c4:	d82b      	bhi.n	800341e <netif_config+0x24e>
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <netif_config+0x204>
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d021      	beq.n	8003416 <netif_config+0x246>
 80033d2:	e024      	b.n	800341e <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <netif_config+0x2bc>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <netif_config+0x2bc>)
 80033de:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80033e2:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <netif_config+0x2bc>)
 80033e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80033ea:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <netif_config+0x2bc>)
 80033ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 80033f2:	4827      	ldr	r0, [pc, #156]	; (8003490 <netif_config+0x2c0>)
 80033f4:	f018 fd18 	bl	801be28 <iprintf>
    res = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
    break;
 80033fc:	e012      	b.n	8003424 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 80033fe:	4825      	ldr	r0, [pc, #148]	; (8003494 <netif_config+0x2c4>)
 8003400:	f018 fd80 	bl	801bf04 <puts>
    break;
 8003404:	e00e      	b.n	8003424 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8003406:	4824      	ldr	r0, [pc, #144]	; (8003498 <netif_config+0x2c8>)
 8003408:	f018 fd7c 	bl	801bf04 <puts>
    break;
 800340c:	e00a      	b.n	8003424 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 800340e:	4823      	ldr	r0, [pc, #140]	; (800349c <netif_config+0x2cc>)
 8003410:	f018 fd78 	bl	801bf04 <puts>
    break;
 8003414:	e006      	b.n	8003424 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 8003416:	4822      	ldr	r0, [pc, #136]	; (80034a0 <netif_config+0x2d0>)
 8003418:	f018 fd74 	bl	801bf04 <puts>
    break;
 800341c:	e002      	b.n	8003424 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 800341e:	4821      	ldr	r0, [pc, #132]	; (80034a4 <netif_config+0x2d4>)
 8003420:	f018 fd70 	bl	801bf04 <puts>
  }

  if (res == 0) {
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d110      	bne.n	800344c <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 800342a:	1d3b      	adds	r3, r7, #4
 800342c:	f107 0208 	add.w	r2, r7, #8
 8003430:	f107 010c 	add.w	r1, r7, #12
 8003434:	481c      	ldr	r0, [pc, #112]	; (80034a8 <netif_config+0x2d8>)
 8003436:	9002      	str	r0, [sp, #8]
 8003438:	481c      	ldr	r0, [pc, #112]	; (80034ac <netif_config+0x2dc>)
 800343a:	9001      	str	r0, [sp, #4]
 800343c:	2000      	movs	r0, #0
 800343e:	9000      	str	r0, [sp, #0]
 8003440:	481b      	ldr	r0, [pc, #108]	; (80034b0 <netif_config+0x2e0>)
 8003442:	f00a ffb9 	bl	800e3b8 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 8003446:	481a      	ldr	r0, [pc, #104]	; (80034b0 <netif_config+0x2e0>)
 8003448:	f00b f970 	bl	800e72c <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 800344c:	697b      	ldr	r3, [r7, #20]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000094 	.word	0x20000094
 800345c:	20000098 	.word	0x20000098
 8003460:	20000099 	.word	0x20000099
 8003464:	200008ee 	.word	0x200008ee
 8003468:	2000009a 	.word	0x2000009a
 800346c:	2000009b 	.word	0x2000009b
 8003470:	2000009c 	.word	0x2000009c
 8003474:	2000009d 	.word	0x2000009d
 8003478:	200008ef 	.word	0x200008ef
 800347c:	200008f0 	.word	0x200008f0
 8003480:	200008f1 	.word	0x200008f1
 8003484:	200008f2 	.word	0x200008f2
 8003488:	200008f3 	.word	0x200008f3
 800348c:	20000628 	.word	0x20000628
 8003490:	0801e9ac 	.word	0x0801e9ac
 8003494:	0801e9d8 	.word	0x0801e9d8
 8003498:	0801ea08 	.word	0x0801ea08
 800349c:	0801ea3c 	.word	0x0801ea3c
 80034a0:	0801ea6c 	.word	0x0801ea6c
 80034a4:	0801ea8c 	.word	0x0801ea8c
 80034a8:	0800d461 	.word	0x0800d461
 80034ac:	08003045 	.word	0x08003045
 80034b0:	2000084c 	.word	0x2000084c

080034b4 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 80034b4:	b5b0      	push	{r4, r5, r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 80034ba:	4b08      	ldr	r3, [pc, #32]	; (80034dc <lwip_start+0x28>)
 80034bc:	1d3c      	adds	r4, r7, #4
 80034be:	461d      	mov	r5, r3
 80034c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034c4:	682b      	ldr	r3, [r5, #0]
 80034c6:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	2100      	movs	r1, #0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f006 fac2 	bl	8009a56 <osThreadCreate>
}
 80034d2:	bf00      	nop
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bdb0      	pop	{r4, r5, r7, pc}
 80034da:	bf00      	nop
 80034dc:	0801eac0 	.word	0x0801eac0

080034e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034e4:	f000 fe0c 	bl	8004100 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80034e8:	f000 f81c 	bl	8003524 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ec:	f000 f916 	bl	800371c <MX_GPIO_Init>
  MX_DMA_Init();
 80034f0:	f000 f8f4 	bl	80036dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80034f4:	f000 f8c8 	bl	8003688 <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI4_Init();
 80034f8:	f000 f892 	bl	8003620 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 80034fc:	4807      	ldr	r0, [pc, #28]	; (800351c <main+0x3c>)
 80034fe:	f018 fc93 	bl	801be28 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 8003502:	4807      	ldr	r0, [pc, #28]	; (8003520 <main+0x40>)
 8003504:	f018 fcfe 	bl	801bf04 <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 8003508:	f006 f98c 	bl	8009824 <sl_wfx_task_start>
  wifi_events_start();
 800350c:	f006 f81c 	bl	8009548 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 8003510:	f7ff ffd0 	bl	80034b4 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 8003514:	f006 fa88 	bl	8009a28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003518:	e7fe      	b.n	8003518 <main+0x38>
 800351a:	bf00      	nop
 800351c:	0801ead4 	.word	0x0801ead4
 8003520:	0801ead8 	.word	0x0801ead8

08003524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b094      	sub	sp, #80	; 0x50
 8003528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800352a:	f107 0320 	add.w	r3, r7, #32
 800352e:	2230      	movs	r2, #48	; 0x30
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f018 fde2 	bl	801c0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003538:	f107 030c 	add.w	r3, r7, #12
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <SystemClock_Config+0xf0>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a30      	ldr	r2, [pc, #192]	; (8003614 <SystemClock_Config+0xf0>)
 8003552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
 8003558:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <SystemClock_Config+0xf0>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003564:	2300      	movs	r3, #0
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	4b2b      	ldr	r3, [pc, #172]	; (8003618 <SystemClock_Config+0xf4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <SystemClock_Config+0xf4>)
 800356e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <SystemClock_Config+0xf4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357c:	607b      	str	r3, [r7, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003580:	2301      	movs	r3, #1
 8003582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003584:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800358a:	2302      	movs	r3, #2
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800358e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003594:	2308      	movs	r3, #8
 8003596:	643b      	str	r3, [r7, #64]	; 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 8003598:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800359c:	647b      	str	r3, [r7, #68]	; 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800359e:	2304      	movs	r3, #4
 80035a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80035a2:	2308      	movs	r3, #8
 80035a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a6:	f107 0320 	add.w	r3, r7, #32
 80035aa:	4618      	mov	r0, r3
 80035ac:	f001 fe34 	bl	8005218 <HAL_RCC_OscConfig>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80035b6:	f000 f955 	bl	8003864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ba:	230f      	movs	r3, #15
 80035bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035be:	2302      	movs	r3, #2
 80035c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2103      	movs	r1, #3
 80035d6:	4618      	mov	r0, r3
 80035d8:	f002 f896 	bl	8005708 <HAL_RCC_ClockConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80035e2:	f000 f93f 	bl	8003864 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80035e6:	f002 fa7b 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a0b      	ldr	r2, [pc, #44]	; (800361c <SystemClock_Config+0xf8>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	099b      	lsrs	r3, r3, #6
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 ff50 	bl	800449a <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035fa:	2004      	movs	r0, #4
 80035fc:	f000 ff5a 	bl	80044b4 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003600:	2200      	movs	r2, #0
 8003602:	210f      	movs	r1, #15
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f000 ff0f 	bl	800442a <HAL_NVIC_SetPriority>

}
 800360c:	bf00      	nop
 800360e:	3750      	adds	r7, #80	; 0x50
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <MX_SPI4_Init+0x60>)
 8003626:	4a17      	ldr	r2, [pc, #92]	; (8003684 <MX_SPI4_Init+0x64>)
 8003628:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <MX_SPI4_Init+0x60>)
 800362c:	2200      	movs	r2, #0
 800362e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8003630:	4b13      	ldr	r3, [pc, #76]	; (8003680 <MX_SPI4_Init+0x60>)
 8003632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003636:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <MX_SPI4_Init+0x60>)
 800363a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800363e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003640:	4b0f      	ldr	r3, [pc, #60]	; (8003680 <MX_SPI4_Init+0x60>)
 8003642:	2200      	movs	r2, #0
 8003644:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <MX_SPI4_Init+0x60>)
 8003648:	2200      	movs	r2, #0
 800364a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800364c:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <MX_SPI4_Init+0x60>)
 800364e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003652:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003654:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <MX_SPI4_Init+0x60>)
 8003656:	2200      	movs	r2, #0
 8003658:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800365a:	4b09      	ldr	r3, [pc, #36]	; (8003680 <MX_SPI4_Init+0x60>)
 800365c:	2200      	movs	r2, #0
 800365e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003660:	4b07      	ldr	r3, [pc, #28]	; (8003680 <MX_SPI4_Init+0x60>)
 8003662:	2200      	movs	r2, #0
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <MX_SPI4_Init+0x60>)
 8003668:	220a      	movs	r2, #10
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800366c:	4804      	ldr	r0, [pc, #16]	; (8003680 <MX_SPI4_Init+0x60>)
 800366e:	f002 fa6b 	bl	8005b48 <HAL_SPI_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <MX_SPI4_Init+0x5c>
  {
	Error_Handler();
 8003678:	f000 f8f4 	bl	8003864 <Error_Handler>
  }
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2000093c 	.word	0x2000093c
 8003684:	40013400 	.word	0x40013400

08003688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <MX_USART2_UART_Init+0x50>)
 8003690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8003692:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 8003694:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8003698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800369a:	4b0e      	ldr	r3, [pc, #56]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036ac:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036ae:	220c      	movs	r2, #12
 80036b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036b2:	4b08      	ldr	r3, [pc, #32]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <MX_USART2_UART_Init+0x4c>)
 80036c0:	f003 fa4e 	bl	8006b60 <HAL_UART_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036ca:	f000 f8cb 	bl	8003864 <Error_Handler>
  }
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200008f8 	.word	0x200008f8
 80036d8:	40004400 	.word	0x40004400

080036dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <MX_DMA_Init+0x3c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <MX_DMA_Init+0x3c>)
 80036ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <MX_DMA_Init+0x3c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	203b      	movs	r0, #59	; 0x3b
 8003704:	f000 fe91 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003708:	203b      	movs	r0, #59	; 0x3b
 800370a:	f000 feaa 	bl	8004462 <HAL_NVIC_EnableIRQ>


}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800

0800371c <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	f107 0314 	add.w	r3, r7, #20
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <MX_GPIO_Init+0x114>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a3d      	ldr	r2, [pc, #244]	; (8003830 <MX_GPIO_Init+0x114>)
 800373c:	f043 0304 	orr.w	r3, r3, #4
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b3b      	ldr	r3, [pc, #236]	; (8003830 <MX_GPIO_Init+0x114>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b37      	ldr	r3, [pc, #220]	; (8003830 <MX_GPIO_Init+0x114>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	4a36      	ldr	r2, [pc, #216]	; (8003830 <MX_GPIO_Init+0x114>)
 8003758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375c:	6313      	str	r3, [r2, #48]	; 0x30
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <MX_GPIO_Init+0x114>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <MX_GPIO_Init+0x114>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a2f      	ldr	r2, [pc, #188]	; (8003830 <MX_GPIO_Init+0x114>)
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <MX_GPIO_Init+0x114>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <MX_GPIO_Init+0x114>)
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a28      	ldr	r2, [pc, #160]	; (8003830 <MX_GPIO_Init+0x114>)
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	6313      	str	r3, [r2, #48]	; 0x30
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <MX_GPIO_Init+0x114>)
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 80037a2:	2201      	movs	r2, #1
 80037a4:	2110      	movs	r1, #16
 80037a6:	4823      	ldr	r0, [pc, #140]	; (8003834 <MX_GPIO_Init+0x118>)
 80037a8:	f001 fcf8 	bl	800519c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 80037ac:	2200      	movs	r2, #0
 80037ae:	2101      	movs	r1, #1
 80037b0:	4821      	ldr	r0, [pc, #132]	; (8003838 <MX_GPIO_Init+0x11c>)
 80037b2:	f001 fcf3 	bl	800519c <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 80037b6:	2310      	movs	r3, #16
 80037b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c2:	2303      	movs	r3, #3
 80037c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 80037c6:	f107 0314 	add.w	r3, r7, #20
 80037ca:	4619      	mov	r1, r3
 80037cc:	4819      	ldr	r0, [pc, #100]	; (8003834 <MX_GPIO_Init+0x118>)
 80037ce:	f001 fa7d 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037de:	2303      	movs	r3, #3
 80037e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 80037e2:	f107 0314 	add.w	r3, r7, #20
 80037e6:	4619      	mov	r1, r3
 80037e8:	4813      	ldr	r0, [pc, #76]	; (8003838 <MX_GPIO_Init+0x11c>)
 80037ea:	f001 fa6f 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 80037ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f2:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f4:	2301      	movs	r3, #1
 80037f6:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	4619      	mov	r1, r3
 8003806:	480d      	ldr	r0, [pc, #52]	; (800383c <MX_GPIO_Init+0x120>)
 8003808:	f001 fa60 	bl	8004ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 800380c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	4619      	mov	r1, r3
 8003822:	4806      	ldr	r0, [pc, #24]	; (800383c <MX_GPIO_Init+0x120>)
 8003824:	f001 fa52 	bl	8004ccc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8003828:	bf00      	nop
 800382a:	3728      	adds	r7, #40	; 0x28
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40023800 	.word	0x40023800
 8003834:	40020000 	.word	0x40020000
 8003838:	40020800 	.word	0x40020800
 800383c:	40020400 	.word	0x40020400

08003840 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003848:	1d39      	adds	r1, r7, #4
 800384a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800384e:	2201      	movs	r2, #1
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <__io_putchar+0x20>)
 8003852:	f003 f9d2 	bl	8006bfa <HAL_UART_Transmit>

  return ch;
 8003856:	687b      	ldr	r3, [r7, #4]
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	200008f8 	.word	0x200008f8

08003864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003868:	b672      	cpsid	i
}
 800386a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800386c:	e7fe      	b.n	800386c <Error_Handler+0x8>
	...

08003870 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi1_tx;
extern DMA_HandleTypeDef hdma_spi4_rx;


void HAL_MspInit(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	4b25      	ldr	r3, [pc, #148]	; (8003910 <HAL_MspInit+0xa0>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	4a24      	ldr	r2, [pc, #144]	; (8003910 <HAL_MspInit+0xa0>)
 8003880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003884:	6453      	str	r3, [r2, #68]	; 0x44
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <HAL_MspInit+0xa0>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_MspInit+0xa0>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a1d      	ldr	r2, [pc, #116]	; (8003910 <HAL_MspInit+0xa0>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <HAL_MspInit+0xa0>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ae:	2003      	movs	r0, #3
 80038b0:	f000 fdb0 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	f06f 000b 	mvn.w	r0, #11
 80038bc:	f000 fdb5 	bl	800442a <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	f06f 000a 	mvn.w	r0, #10
 80038c8:	f000 fdaf 	bl	800442a <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2100      	movs	r1, #0
 80038d0:	f06f 0009 	mvn.w	r0, #9
 80038d4:	f000 fda9 	bl	800442a <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80038d8:	2200      	movs	r2, #0
 80038da:	2100      	movs	r1, #0
 80038dc:	f06f 0004 	mvn.w	r0, #4
 80038e0:	f000 fda3 	bl	800442a <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2100      	movs	r1, #0
 80038e8:	f06f 0003 	mvn.w	r0, #3
 80038ec:	f000 fd9d 	bl	800442a <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038f0:	2200      	movs	r2, #0
 80038f2:	210f      	movs	r1, #15
 80038f4:	f06f 0001 	mvn.w	r0, #1
 80038f8:	f000 fd97 	bl	800442a <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80038fc:	2200      	movs	r2, #0
 80038fe:	210f      	movs	r1, #15
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	f000 fd91 	bl	800442a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800

08003914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4aa1      	ldr	r2, [pc, #644]	; (8003bb8 <HAL_SPI_MspInit+0x2a4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	f040 80a1 	bne.w	8003a7a <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003938:	2300      	movs	r3, #0
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	4b9f      	ldr	r3, [pc, #636]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	4a9e      	ldr	r2, [pc, #632]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003946:	6453      	str	r3, [r2, #68]	; 0x44
 8003948:	4b9c      	ldr	r3, [pc, #624]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	4b98      	ldr	r3, [pc, #608]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	4a97      	ldr	r2, [pc, #604]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6313      	str	r3, [r2, #48]	; 0x30
 8003964:	4b95      	ldr	r3, [pc, #596]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8003970:	23e0      	movs	r3, #224	; 0xe0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003974:	2302      	movs	r3, #2
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003980:	2305      	movs	r3, #5
 8003982:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	488d      	ldr	r0, [pc, #564]	; (8003bc0 <HAL_SPI_MspInit+0x2ac>)
 800398c:	f001 f99e 	bl	8004ccc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003990:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 8003992:	4a8d      	ldr	r2, [pc, #564]	; (8003bc8 <HAL_SPI_MspInit+0x2b4>)
 8003994:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 8003998:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800399c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a4:	4b87      	ldr	r3, [pc, #540]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039aa:	4b86      	ldr	r3, [pc, #536]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039b2:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b8:	4b82      	ldr	r3, [pc, #520]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80039be:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039c4:	4b7f      	ldr	r3, [pc, #508]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ca:	4b7e      	ldr	r3, [pc, #504]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80039d0:	487c      	ldr	r0, [pc, #496]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039d2:	f000 fd8b 	bl	80044ec <HAL_DMA_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80039dc:	f7ff ff42 	bl	8003864 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a78      	ldr	r2, [pc, #480]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80039e6:	4a77      	ldr	r2, [pc, #476]	; (8003bc4 <HAL_SPI_MspInit+0x2b0>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80039ec:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 80039ee:	4a78      	ldr	r2, [pc, #480]	; (8003bd0 <HAL_SPI_MspInit+0x2bc>)
 80039f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80039f2:	4b76      	ldr	r3, [pc, #472]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 80039f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fa:	4b74      	ldr	r3, [pc, #464]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 80039fc:	2240      	movs	r2, #64	; 0x40
 80039fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a00:	4b72      	ldr	r3, [pc, #456]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a06:	4b71      	ldr	r3, [pc, #452]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a14:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003a1a:	4b6c      	ldr	r3, [pc, #432]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a20:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a26:	4b69      	ldr	r3, [pc, #420]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003a2c:	4867      	ldr	r0, [pc, #412]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a2e:	f000 fd5d 	bl	80044ec <HAL_DMA_Init>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003a38:	f7ff ff14 	bl	8003864 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a63      	ldr	r2, [pc, #396]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a40:	649a      	str	r2, [r3, #72]	; 0x48
 8003a42:	4a62      	ldr	r2, [pc, #392]	; (8003bcc <HAL_SPI_MspInit+0x2b8>)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6393      	str	r3, [r2, #56]	; 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	210a      	movs	r1, #10
 8003a4c:	2038      	movs	r0, #56	; 0x38
 8003a4e:	f000 fcec 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a52:	2038      	movs	r0, #56	; 0x38
 8003a54:	f000 fd05 	bl	8004462 <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8003a58:	2200      	movs	r2, #0
 8003a5a:	210a      	movs	r1, #10
 8003a5c:	203a      	movs	r0, #58	; 0x3a
 8003a5e:	f000 fce4 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003a62:	203a      	movs	r0, #58	; 0x3a
 8003a64:	f000 fcfd 	bl	8004462 <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8003a68:	2202      	movs	r2, #2
 8003a6a:	210a      	movs	r1, #10
 8003a6c:	2023      	movs	r0, #35	; 0x23
 8003a6e:	f000 fcdc 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003a72:	2023      	movs	r0, #35	; 0x23
 8003a74:	f000 fcf5 	bl	8004462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003a78:	e09a      	b.n	8003bb0 <HAL_SPI_MspInit+0x29c>
  else if(hspi->Instance==SPI4)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a55      	ldr	r2, [pc, #340]	; (8003bd4 <HAL_SPI_MspInit+0x2c0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	f040 8095 	bne.w	8003bb0 <HAL_SPI_MspInit+0x29c>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	4b4c      	ldr	r3, [pc, #304]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a4b      	ldr	r2, [pc, #300]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b49      	ldr	r3, [pc, #292]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	4b45      	ldr	r3, [pc, #276]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a44      	ldr	r2, [pc, #272]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b42      	ldr	r3, [pc, #264]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	4a3d      	ldr	r2, [pc, #244]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ace:	4b3b      	ldr	r3, [pc, #236]	; (8003bbc <HAL_SPI_MspInit+0x2a8>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8003ada:	2302      	movs	r3, #2
 8003adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003aea:	2305      	movs	r3, #5
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003aee:	f107 031c 	add.w	r3, r7, #28
 8003af2:	4619      	mov	r1, r3
 8003af4:	4832      	ldr	r0, [pc, #200]	; (8003bc0 <HAL_SPI_MspInit+0x2ac>)
 8003af6:	f001 f8e9 	bl	8004ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8003afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003b00:	2302      	movs	r3, #2
 8003b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003b0c:	2306      	movs	r3, #6
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003b10:	f107 031c 	add.w	r3, r7, #28
 8003b14:	4619      	mov	r1, r3
 8003b16:	4830      	ldr	r0, [pc, #192]	; (8003bd8 <HAL_SPI_MspInit+0x2c4>)
 8003b18:	f001 f8d8 	bl	8004ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8003b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003b22:	2302      	movs	r3, #2
 8003b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003b2e:	2306      	movs	r3, #6
 8003b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003b32:	f107 031c 	add.w	r3, r7, #28
 8003b36:	4619      	mov	r1, r3
 8003b38:	4827      	ldr	r0, [pc, #156]	; (8003bd8 <HAL_SPI_MspInit+0x2c4>)
 8003b3a:	f001 f8c7 	bl	8004ccc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8003b3e:	4b27      	ldr	r3, [pc, #156]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b40:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <HAL_SPI_MspInit+0x2cc>)
 8003b42:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b46:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003b4a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b58:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b5e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b60:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b66:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b68:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b6e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003b76:	4b19      	ldr	r3, [pc, #100]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b7c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b7e:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8003b84:	4815      	ldr	r0, [pc, #84]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b86:	f000 fcb1 	bl	80044ec <HAL_DMA_Init>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_SPI_MspInit+0x280>
      Error_Handler();
 8003b90:	f7ff fe68 	bl	8003864 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <HAL_SPI_MspInit+0x2c8>)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	203b      	movs	r0, #59	; 0x3b
 8003ba6:	f000 fc40 	bl	800442a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003baa:	203b      	movs	r0, #59	; 0x3b
 8003bac:	f000 fc59 	bl	8004462 <HAL_NVIC_EnableIRQ>
}
 8003bb0:	bf00      	nop
 8003bb2:	3730      	adds	r7, #48	; 0x30
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013000 	.word	0x40013000
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40020000 	.word	0x40020000
 8003bc4:	2000140c 	.word	0x2000140c
 8003bc8:	40026410 	.word	0x40026410
 8003bcc:	200013ac 	.word	0x200013ac
 8003bd0:	40026440 	.word	0x40026440
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40020400 	.word	0x40020400
 8003bdc:	20000994 	.word	0x20000994
 8003be0:	40026458 	.word	0x40026458

08003be4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1c      	ldr	r2, [pc, #112]	; (8003c64 <HAL_SPI_MspDeInit+0x80>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d114      	bne.n	8003c20 <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003bf6:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <HAL_SPI_MspDeInit+0x84>)
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4a1b      	ldr	r2, [pc, #108]	; (8003c68 <HAL_SPI_MspDeInit+0x84>)
 8003bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c00:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8003c02:	21e0      	movs	r1, #224	; 0xe0
 8003c04:	4819      	ldr	r0, [pc, #100]	; (8003c6c <HAL_SPI_MspDeInit+0x88>)
 8003c06:	f001 f9e5 	bl	8004fd4 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fd1a 	bl	8004648 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 fd15 	bl	8004648 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003c1e:	e01d      	b.n	8003c5c <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a12      	ldr	r2, [pc, #72]	; (8003c70 <HAL_SPI_MspDeInit+0x8c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d118      	bne.n	8003c5c <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8003c2a:	4b0f      	ldr	r3, [pc, #60]	; (8003c68 <HAL_SPI_MspDeInit+0x84>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <HAL_SPI_MspDeInit+0x84>)
 8003c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c34:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 8003c36:	2102      	movs	r1, #2
 8003c38:	480c      	ldr	r0, [pc, #48]	; (8003c6c <HAL_SPI_MspDeInit+0x88>)
 8003c3a:	f001 f9cb 	bl	8004fd4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 8003c3e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <HAL_SPI_MspDeInit+0x90>)
 8003c44:	f001 f9c6 	bl	8004fd4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fcfb 	bl	8004648 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fcf6 	bl	8004648 <HAL_DMA_DeInit>
}
 8003c5c:	bf00      	nop
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40013000 	.word	0x40013000
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	40013400 	.word	0x40013400
 8003c74:	40020400 	.word	0x40020400

08003c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_UART_MspInit+0x84>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d12b      	bne.n	8003cf2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b11      	ldr	r3, [pc, #68]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a10      	ldr	r2, [pc, #64]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <HAL_UART_MspInit+0x88>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003cd2:	230c      	movs	r3, #12
 8003cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce2:	2307      	movs	r3, #7
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce6:	f107 0314 	add.w	r3, r7, #20
 8003cea:	4619      	mov	r1, r3
 8003cec:	4805      	ldr	r0, [pc, #20]	; (8003d04 <HAL_UART_MspInit+0x8c>)
 8003cee:	f000 ffed 	bl	8004ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cf2:	bf00      	nop
 8003cf4:	3728      	adds	r7, #40	; 0x28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40004400 	.word	0x40004400
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000

08003d08 <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <SPI1_IRQHandler+0x10>)
 8003d0e:	f002 fb83 	bl	8006418 <HAL_SPI_IRQHandler>
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20001354 	.word	0x20001354

08003d1c <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <HAL_SPI_TxCpltCallback+0x3c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f107 020c 	add.w	r2, r7, #12
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f006 fd2b 	bl	800a78e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d007      	beq.n	8003d4e <HAL_SPI_TxCpltCallback+0x32>
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_SPI_TxCpltCallback+0x40>)
 8003d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	f3bf 8f6f 	isb	sy
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	2000146c 	.word	0x2000146c
 8003d5c:	e000ed04 	.word	0xe000ed04

08003d60 <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1c      	ldr	r2, [pc, #112]	; (8003de4 <HAL_SPI_RxCpltCallback+0x84>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d112      	bne.n	8003d9c <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <HAL_SPI_RxCpltCallback+0x88>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f107 020c 	add.w	r2, r7, #12
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f006 fd04 	bl	800a78e <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_SPI_RxCpltCallback+0x3c>
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <HAL_SPI_RxCpltCallback+0x8c>)
 8003d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a13      	ldr	r2, [pc, #76]	; (8003df0 <HAL_SPI_RxCpltCallback+0x90>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d119      	bne.n	8003dda <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 8003da6:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_SPI_RxCpltCallback+0x94>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	bfb8      	it	lt
 8003db6:	425b      	neglt	r3, r3
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_SPI_RxCpltCallback+0x94>)
 8003dbc:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_SPI_RxCpltCallback+0x94>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	01db      	lsls	r3, r3, #7
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <HAL_SPI_RxCpltCallback+0x98>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	2240      	movs	r2, #64	; 0x40
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f002 f95e 	bl	8006090 <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8003dd4:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_SPI_RxCpltCallback+0x9c>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
	}
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40013000 	.word	0x40013000
 8003de8:	2000146c 	.word	0x2000146c
 8003dec:	e000ed04 	.word	0xe000ed04
 8003df0:	40013400 	.word	0x40013400
 8003df4:	200002b8 	.word	0x200002b8
 8003df8:	200002bc 	.word	0x200002bc
 8003dfc:	200002b0 	.word	0x200002b0

08003e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <NMI_Handler+0x4>

08003e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e0a:	e7fe      	b.n	8003e0a <HardFault_Handler+0x4>

08003e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e10:	e7fe      	b.n	8003e10 <MemManage_Handler+0x4>

08003e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e16:	e7fe      	b.n	8003e16 <BusFault_Handler+0x4>

08003e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e1c:	e7fe      	b.n	8003e1c <UsageFault_Handler+0x4>

08003e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e30:	f000 f9b8 	bl	80041a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003e34:	f008 f820 	bl	800be78 <xTaskGetSchedulerState>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003e3e:	f008 ff63 	bl	800cd08 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 8003e42:	f005 ffbd 	bl	8009dc0 <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 8003e56:	4b15      	ldr	r3, [pc, #84]	; (8003eac <EXTI15_10_IRQHandler+0x60>)
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d011      	beq.n	8003e86 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 8003e62:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <EXTI15_10_IRQHandler+0x64>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d006      	beq.n	8003e78 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <EXTI15_10_IRQHandler+0x64>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1d3a      	adds	r2, r7, #4
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f006 fc8b 	bl	800a78e <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 8003e78:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <EXTI15_10_IRQHandler+0x68>)
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	1d3b      	adds	r3, r7, #4
 8003e7e:	2202      	movs	r2, #2
 8003e80:	480d      	ldr	r0, [pc, #52]	; (8003eb8 <EXTI15_10_IRQHandler+0x6c>)
 8003e82:	f008 fd61 	bl	800c948 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 8003e86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003e8a:	f001 f9a1 	bl	80051d0 <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <EXTI15_10_IRQHandler+0x58>
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <EXTI15_10_IRQHandler+0x70>)
 8003e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	f3bf 8f6f 	isb	sy

}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40013c00 	.word	0x40013c00
 8003eb0:	20001338 	.word	0x20001338
 8003eb4:	20001474 	.word	0x20001474
 8003eb8:	0800a0b7 	.word	0x0800a0b7
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003ec4:	4802      	ldr	r0, [pc, #8]	; (8003ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ec6:	f000 fc97 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	2000140c 	.word	0x2000140c

08003ed4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003ed8:	4802      	ldr	r0, [pc, #8]	; (8003ee4 <DMA2_Stream2_IRQHandler+0x10>)
 8003eda:	f000 fc8d 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	200013ac 	.word	0x200013ac

08003ee8 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8003eec:	4802      	ldr	r0, [pc, #8]	; (8003ef8 <DMA2_Stream3_IRQHandler+0x10>)
 8003eee:	f000 fc83 	bl	80047f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000994 	.word	0x20000994

08003efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	return 1;
 8003f00:	2301      	movs	r3, #1
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_kill>:

int _kill(int pid, int sig)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f16:	f018 f979 	bl	801c20c <__errno>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2216      	movs	r2, #22
 8003f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8003f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <_exit>:

void _exit (int status)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f34:	f04f 31ff 	mov.w	r1, #4294967295
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ffe7 	bl	8003f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f3e:	e7fe      	b.n	8003f3e <_exit+0x12>

08003f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	e00a      	b.n	8003f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f52:	f3af 8000 	nop.w
 8003f56:	4601      	mov	r1, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	60ba      	str	r2, [r7, #8]
 8003f5e:	b2ca      	uxtb	r2, r1
 8003f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	3301      	adds	r3, #1
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	dbf0      	blt.n	8003f52 <_read+0x12>
	}

return len;
 8003f70:	687b      	ldr	r3, [r7, #4]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b086      	sub	sp, #24
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]
 8003f8a:	e009      	b.n	8003fa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	60ba      	str	r2, [r7, #8]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fc53 	bl	8003840 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	dbf1      	blt.n	8003f8c <_write+0x12>
	}
	return len;
 8003fa8:	687b      	ldr	r3, [r7, #4]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <_close>:

int _close(int file)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8003fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fda:	605a      	str	r2, [r3, #4]
	return 0;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <_isatty>:

int _isatty(int file)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8003ff2:	2301      	movs	r3, #1
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
	return 0;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004024:	4a14      	ldr	r2, [pc, #80]	; (8004078 <_sbrk+0x5c>)
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <_sbrk+0x60>)
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <_sbrk+0x64>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d102      	bne.n	800403e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <_sbrk+0x64>)
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <_sbrk+0x68>)
 800403c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800403e:	4b10      	ldr	r3, [pc, #64]	; (8004080 <_sbrk+0x64>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	429a      	cmp	r2, r3
 800404a:	d207      	bcs.n	800405c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800404c:	f018 f8de 	bl	801c20c <__errno>
 8004050:	4603      	mov	r3, r0
 8004052:	220c      	movs	r2, #12
 8004054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	e009      	b.n	8004070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800405c:	4b08      	ldr	r3, [pc, #32]	; (8004080 <_sbrk+0x64>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <_sbrk+0x64>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	4a05      	ldr	r2, [pc, #20]	; (8004080 <_sbrk+0x64>)
 800406c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20020000 	.word	0x20020000
 800407c:	00000400 	.word	0x00000400
 8004080:	200009f4 	.word	0x200009f4
 8004084:	20013fc0 	.word	0x20013fc0

08004088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <SystemInit+0x20>)
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <SystemInit+0x20>)
 8004094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80040ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040b0:	480d      	ldr	r0, [pc, #52]	; (80040e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040b2:	490e      	ldr	r1, [pc, #56]	; (80040ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040b4:	4a0e      	ldr	r2, [pc, #56]	; (80040f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040b8:	e002      	b.n	80040c0 <LoopCopyDataInit>

080040ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040be:	3304      	adds	r3, #4

080040c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c4:	d3f9      	bcc.n	80040ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040c6:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040c8:	4c0b      	ldr	r4, [pc, #44]	; (80040f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80040ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040cc:	e001      	b.n	80040d2 <LoopFillZerobss>

080040ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d0:	3204      	adds	r2, #4

080040d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d4:	d3fb      	bcc.n	80040ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040d6:	f7ff ffd7 	bl	8004088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040da:	f018 f89d 	bl	801c218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80040de:	f7ff f9ff 	bl	80034e0 <main>
  bx  lr    
 80040e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80040e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040ec:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80040f0:	0806e338 	.word	0x0806e338
  ldr r2, =_sbss
 80040f4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80040f8:	20013fbc 	.word	0x20013fbc

080040fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040fc:	e7fe      	b.n	80040fc <ADC_IRQHandler>
	...

08004100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_Init+0x40>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0d      	ldr	r2, [pc, #52]	; (8004140 <HAL_Init+0x40>)
 800410a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800410e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_Init+0x40>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <HAL_Init+0x40>)
 8004116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800411a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_Init+0x40>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a07      	ldr	r2, [pc, #28]	; (8004140 <HAL_Init+0x40>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004128:	2003      	movs	r0, #3
 800412a:	f000 f973 	bl	8004414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800412e:	200f      	movs	r0, #15
 8004130:	f000 f808 	bl	8004144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004134:	f7ff fb9c 	bl	8003870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00

08004144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800414c:	4b12      	ldr	r3, [pc, #72]	; (8004198 <HAL_InitTick+0x54>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_InitTick+0x58>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415a:	fbb3 f3f1 	udiv	r3, r3, r1
 800415e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f999 	bl	800449a <HAL_SYSTICK_Config>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d001      	beq.n	8004172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e00e      	b.n	8004190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b0f      	cmp	r3, #15
 8004176:	d80a      	bhi.n	800418e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004178:	2200      	movs	r2, #0
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	f000 f953 	bl	800442a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004184:	4a06      	ldr	r2, [pc, #24]	; (80041a0 <HAL_InitTick+0x5c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	e000      	b.n	8004190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200000a8 	.word	0x200000a8
 800419c:	200000b0 	.word	0x200000b0
 80041a0:	200000ac 	.word	0x200000ac

080041a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <HAL_IncTick+0x20>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b06      	ldr	r3, [pc, #24]	; (80041c8 <HAL_IncTick+0x24>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4413      	add	r3, r2
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <HAL_IncTick+0x24>)
 80041b6:	6013      	str	r3, [r2, #0]
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	200000b0 	.word	0x200000b0
 80041c8:	200009f8 	.word	0x200009f8

080041cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
  return uwTick;
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_GetTick+0x14>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	200009f8 	.word	0x200009f8

080041e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff ffee 	bl	80041cc <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d005      	beq.n	800420a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <HAL_Delay+0x44>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	461a      	mov	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800420a:	bf00      	nop
 800420c:	f7ff ffde 	bl	80041cc <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	429a      	cmp	r2, r3
 800421a:	d8f7      	bhi.n	800420c <HAL_Delay+0x28>
  {
  }
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200000b0 	.word	0x200000b0

0800422c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004248:	4013      	ands	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <__NVIC_SetPriorityGrouping+0x44>)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	60d3      	str	r3, [r2, #12]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <__NVIC_GetPriorityGrouping+0x18>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	0a1b      	lsrs	r3, r3, #8
 800427e:	f003 0307 	and.w	r3, r3, #7
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	db0b      	blt.n	80042ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	4907      	ldr	r1, [pc, #28]	; (80042c8 <__NVIC_EnableIRQ+0x38>)
 80042aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	2001      	movs	r0, #1
 80042b2:	fa00 f202 	lsl.w	r2, r0, r2
 80042b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	e000e100 	.word	0xe000e100

080042cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db12      	blt.n	8004304 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	490a      	ldr	r1, [pc, #40]	; (8004310 <__NVIC_DisableIRQ+0x44>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2001      	movs	r0, #1
 80042ee:	fa00 f202 	lsl.w	r2, r0, r2
 80042f2:	3320      	adds	r3, #32
 80042f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042f8:	f3bf 8f4f 	dsb	sy
}
 80042fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042fe:	f3bf 8f6f 	isb	sy
}
 8004302:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000e100 	.word	0xe000e100

08004314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004324:	2b00      	cmp	r3, #0
 8004326:	db0a      	blt.n	800433e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	490c      	ldr	r1, [pc, #48]	; (8004360 <__NVIC_SetPriority+0x4c>)
 800432e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	440b      	add	r3, r1
 8004338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800433c:	e00a      	b.n	8004354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4908      	ldr	r1, [pc, #32]	; (8004364 <__NVIC_SetPriority+0x50>)
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	3b04      	subs	r3, #4
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	440b      	add	r3, r1
 8004352:	761a      	strb	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	e000e100 	.word	0xe000e100
 8004364:	e000ed00 	.word	0xe000ed00

08004368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f1c3 0307 	rsb	r3, r3, #7
 8004382:	2b04      	cmp	r3, #4
 8004384:	bf28      	it	cs
 8004386:	2304      	movcs	r3, #4
 8004388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3304      	adds	r3, #4
 800438e:	2b06      	cmp	r3, #6
 8004390:	d902      	bls.n	8004398 <NVIC_EncodePriority+0x30>
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3b03      	subs	r3, #3
 8004396:	e000      	b.n	800439a <NVIC_EncodePriority+0x32>
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800439c:	f04f 32ff 	mov.w	r2, #4294967295
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43da      	mvns	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	401a      	ands	r2, r3
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b0:	f04f 31ff 	mov.w	r1, #4294967295
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	43d9      	mvns	r1, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	4313      	orrs	r3, r2
         );
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3b01      	subs	r3, #1
 80043dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043e0:	d301      	bcc.n	80043e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043e2:	2301      	movs	r3, #1
 80043e4:	e00f      	b.n	8004406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <SysTick_Config+0x40>)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ee:	210f      	movs	r1, #15
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	f7ff ff8e 	bl	8004314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <SysTick_Config+0x40>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043fe:	4b04      	ldr	r3, [pc, #16]	; (8004410 <SysTick_Config+0x40>)
 8004400:	2207      	movs	r2, #7
 8004402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	e000e010 	.word	0xe000e010

08004414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ff05 	bl	800422c <__NVIC_SetPriorityGrouping>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800442a:	b580      	push	{r7, lr}
 800442c:	b086      	sub	sp, #24
 800442e:	af00      	add	r7, sp, #0
 8004430:	4603      	mov	r3, r0
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004438:	2300      	movs	r3, #0
 800443a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800443c:	f7ff ff1a 	bl	8004274 <__NVIC_GetPriorityGrouping>
 8004440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	6978      	ldr	r0, [r7, #20]
 8004448:	f7ff ff8e 	bl	8004368 <NVIC_EncodePriority>
 800444c:	4602      	mov	r2, r0
 800444e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff ff5d 	bl	8004314 <__NVIC_SetPriority>
}
 800445a:	bf00      	nop
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
 8004468:	4603      	mov	r3, r0
 800446a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800446c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff0d 	bl	8004290 <__NVIC_EnableIRQ>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff1d 	bl	80042cc <__NVIC_DisableIRQ>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7ff ff94 	bl	80043d0 <SysTick_Config>
 80044a8:	4603      	mov	r3, r0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d106      	bne.n	80044d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a08      	ldr	r2, [pc, #32]	; (80044e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80044c8:	f043 0304 	orr.w	r3, r3, #4
 80044cc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80044ce:	e005      	b.n	80044dc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80044d6:	f023 0304 	bic.w	r3, r3, #4
 80044da:	6013      	str	r3, [r2, #0]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e010 	.word	0xe000e010

080044ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7ff fe68 	bl	80041cc <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e099      	b.n	800463c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004528:	e00f      	b.n	800454a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800452a:	f7ff fe4f 	bl	80041cc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b05      	cmp	r3, #5
 8004536:	d908      	bls.n	800454a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2220      	movs	r2, #32
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2203      	movs	r2, #3
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e078      	b.n	800463c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e8      	bne.n	800452a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4b38      	ldr	r3, [pc, #224]	; (8004644 <HAL_DMA_Init+0x158>)
 8004564:	4013      	ands	r3, r2
 8004566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d107      	bne.n	80045b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ac:	4313      	orrs	r3, r2
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d117      	bne.n	800460e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00e      	beq.n	800460e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 faef 	bl	8004bd4 <DMA_CheckFifoParam>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2240      	movs	r2, #64	; 0x40
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800460a:	2301      	movs	r3, #1
 800460c:	e016      	b.n	800463c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 faa6 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 800461c:	4603      	mov	r3, r0
 800461e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	223f      	movs	r2, #63	; 0x3f
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3718      	adds	r7, #24
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	f010803f 	.word	0xf010803f

08004648 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e050      	b.n	80046fc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d101      	bne.n	800466a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
 8004668:	e048      	b.n	80046fc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2200      	movs	r2, #0
 8004690:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2200      	movs	r2, #0
 80046a0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2221      	movs	r2, #33	; 0x21
 80046a8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa5c 	bl	8004b68 <DMA_CalcBaseAndBitshift>
 80046b0:	4603      	mov	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	223f      	movs	r2, #63	; 0x3f
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_DMA_Start_IT+0x26>
 8004726:	2302      	movs	r3, #2
 8004728:	e040      	b.n	80047ac <HAL_DMA_Start_IT+0xa8>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b01      	cmp	r3, #1
 800473c:	d12f      	bne.n	800479e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2202      	movs	r2, #2
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f9da 	bl	8004b0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475c:	223f      	movs	r2, #63	; 0x3f
 800475e:	409a      	lsls	r2, r3
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0216 	orr.w	r2, r2, #22
 8004772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0208 	orr.w	r2, r2, #8
 800478a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	e005      	b.n	80047aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
 80047a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d004      	beq.n	80047d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00c      	b.n	80047ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2205      	movs	r2, #5
 80047d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0201 	bic.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004804:	4b8e      	ldr	r3, [pc, #568]	; (8004a40 <HAL_DMA_IRQHandler+0x248>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a8e      	ldr	r2, [pc, #568]	; (8004a44 <HAL_DMA_IRQHandler+0x24c>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	2208      	movs	r2, #8
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0204 	bic.w	r2, r2, #4
 800484a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004850:	2208      	movs	r2, #8
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485c:	f043 0201 	orr.w	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004868:	2201      	movs	r2, #1
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2201      	movs	r2, #1
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f043 0202 	orr.w	r2, r3, #2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800489e:	2204      	movs	r2, #4
 80048a0:	409a      	lsls	r2, r3
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d012      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	2204      	movs	r2, #4
 80048be:	409a      	lsls	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d4:	2210      	movs	r2, #16
 80048d6:	409a      	lsls	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d043      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d03c      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f2:	2210      	movs	r2, #16
 80048f4:	409a      	lsls	r2, r3
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	4798      	blx	r3
 8004926:	e01f      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
 8004938:	e016      	b.n	8004968 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0208 	bic.w	r2, r2, #8
 8004956:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	2220      	movs	r2, #32
 800496e:	409a      	lsls	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4013      	ands	r3, r2
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 808f 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0310 	and.w	r3, r3, #16
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8087 	beq.w	8004a98 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498e:	2220      	movs	r2, #32
 8004990:	409a      	lsls	r2, r3
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d136      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0216 	bic.w	r2, r2, #22
 80049b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695a      	ldr	r2, [r3, #20]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <HAL_DMA_IRQHandler+0x1da>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d007      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0208 	bic.w	r2, r2, #8
 80049e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	223f      	movs	r2, #63	; 0x3f
 80049e8:	409a      	lsls	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d07e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
        }
        return;
 8004a0e:	e079      	b.n	8004b04 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01d      	beq.n	8004a5a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d031      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
 8004a3c:	e02c      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
 8004a3e:	bf00      	nop
 8004a40:	200000a8 	.word	0x200000a8
 8004a44:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d023      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	4798      	blx	r3
 8004a58:	e01e      	b.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10f      	bne.n	8004a88 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0210 	bic.w	r2, r2, #16
 8004a76:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d032      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2205      	movs	r2, #5
 8004ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d307      	bcc.n	8004ae0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f2      	bne.n	8004ac4 <HAL_DMA_IRQHandler+0x2cc>
 8004ade:	e000      	b.n	8004ae2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ae0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
 8004b02:	e000      	b.n	8004b06 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b04:	bf00      	nop
    }
  }
}
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b40      	cmp	r3, #64	; 0x40
 8004b38:	d108      	bne.n	8004b4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b4a:	e007      	b.n	8004b5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60da      	str	r2, [r3, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	3b10      	subs	r3, #16
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <DMA_CalcBaseAndBitshift+0x64>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b82:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <DMA_CalcBaseAndBitshift+0x68>)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d909      	bls.n	8004baa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b9e:	f023 0303 	bic.w	r3, r3, #3
 8004ba2:	1d1a      	adds	r2, r3, #4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	659a      	str	r2, [r3, #88]	; 0x58
 8004ba8:	e007      	b.n	8004bba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	aaaaaaab 	.word	0xaaaaaaab
 8004bd0:	08022164 	.word	0x08022164

08004bd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d11f      	bne.n	8004c2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b03      	cmp	r3, #3
 8004bf2:	d856      	bhi.n	8004ca2 <DMA_CheckFifoParam+0xce>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <DMA_CheckFifoParam+0x28>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c0d 	.word	0x08004c0d
 8004c00:	08004c1f 	.word	0x08004c1f
 8004c04:	08004c0d 	.word	0x08004c0d
 8004c08:	08004ca3 	.word	0x08004ca3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d046      	beq.n	8004ca6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c1c:	e043      	b.n	8004ca6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c26:	d140      	bne.n	8004caa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2c:	e03d      	b.n	8004caa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c36:	d121      	bne.n	8004c7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d837      	bhi.n	8004cae <DMA_CheckFifoParam+0xda>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <DMA_CheckFifoParam+0x70>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c5b 	.word	0x08004c5b
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004c6d 	.word	0x08004c6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e030      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d025      	beq.n	8004cb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6a:	e022      	b.n	8004cb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c74:	d11f      	bne.n	8004cb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c7a:	e01c      	b.n	8004cb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d903      	bls.n	8004c8a <DMA_CheckFifoParam+0xb6>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d003      	beq.n	8004c90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c88:	e018      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8e:	e015      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca0:	e00b      	b.n	8004cba <DMA_CheckFifoParam+0xe6>
      break;
 8004ca2:	bf00      	nop
 8004ca4:	e00a      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004ca6:	bf00      	nop
 8004ca8:	e008      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004caa:	bf00      	nop
 8004cac:	e006      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cae:	bf00      	nop
 8004cb0:	e004      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e002      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cb6:	bf00      	nop
 8004cb8:	e000      	b.n	8004cbc <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
    }
  } 
  
  return status; 
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop

08004ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b089      	sub	sp, #36	; 0x24
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e159      	b.n	8004f9c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f040 8148 	bne.w	8004f96 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d005      	beq.n	8004d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d130      	bne.n	8004d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2203      	movs	r2, #3
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4013      	ands	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d54:	2201      	movs	r2, #1
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 0201 	and.w	r2, r3, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d017      	beq.n	8004dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	2203      	movs	r2, #3
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d123      	bne.n	8004e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	08da      	lsrs	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3208      	adds	r2, #8
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80a2 	beq.w	8004f96 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	4b57      	ldr	r3, [pc, #348]	; (8004fb4 <HAL_GPIO_Init+0x2e8>)
 8004e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5a:	4a56      	ldr	r2, [pc, #344]	; (8004fb4 <HAL_GPIO_Init+0x2e8>)
 8004e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e60:	6453      	str	r3, [r2, #68]	; 0x44
 8004e62:	4b54      	ldr	r3, [pc, #336]	; (8004fb4 <HAL_GPIO_Init+0x2e8>)
 8004e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e6e:	4a52      	ldr	r2, [pc, #328]	; (8004fb8 <HAL_GPIO_Init+0x2ec>)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	3302      	adds	r3, #2
 8004e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a49      	ldr	r2, [pc, #292]	; (8004fbc <HAL_GPIO_Init+0x2f0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d019      	beq.n	8004ece <HAL_GPIO_Init+0x202>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a48      	ldr	r2, [pc, #288]	; (8004fc0 <HAL_GPIO_Init+0x2f4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d013      	beq.n	8004eca <HAL_GPIO_Init+0x1fe>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a47      	ldr	r2, [pc, #284]	; (8004fc4 <HAL_GPIO_Init+0x2f8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00d      	beq.n	8004ec6 <HAL_GPIO_Init+0x1fa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <HAL_GPIO_Init+0x2fc>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d007      	beq.n	8004ec2 <HAL_GPIO_Init+0x1f6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a45      	ldr	r2, [pc, #276]	; (8004fcc <HAL_GPIO_Init+0x300>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d101      	bne.n	8004ebe <HAL_GPIO_Init+0x1f2>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	e008      	b.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004ebe:	2307      	movs	r3, #7
 8004ec0:	e006      	b.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e004      	b.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	e002      	b.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e000      	b.n	8004ed0 <HAL_GPIO_Init+0x204>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	f002 0203 	and.w	r2, r2, #3
 8004ed6:	0092      	lsls	r2, r2, #2
 8004ed8:	4093      	lsls	r3, r2
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ee0:	4935      	ldr	r1, [pc, #212]	; (8004fb8 <HAL_GPIO_Init+0x2ec>)
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	089b      	lsrs	r3, r3, #2
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004eee:	4b38      	ldr	r3, [pc, #224]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f18:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f3c:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f42:	4b23      	ldr	r3, [pc, #140]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f66:	4a1a      	ldr	r2, [pc, #104]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f6c:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <HAL_GPIO_Init+0x304>)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61fb      	str	r3, [r7, #28]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	f67f aea2 	bls.w	8004ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	3724      	adds	r7, #36	; 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40023800 	.word	0x40023800
 8004fb8:	40013800 	.word	0x40013800
 8004fbc:	40020000 	.word	0x40020000
 8004fc0:	40020400 	.word	0x40020400
 8004fc4:	40020800 	.word	0x40020800
 8004fc8:	40020c00 	.word	0x40020c00
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40013c00 	.word	0x40013c00

08004fd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e0bb      	b.n	8005168 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	f040 80ab 	bne.w	8005162 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800500c:	4a5c      	ldr	r2, [pc, #368]	; (8005180 <HAL_GPIO_DeInit+0x1ac>)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	089b      	lsrs	r3, r3, #2
 8005012:	3302      	adds	r3, #2
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0303 	and.w	r3, r3, #3
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	220f      	movs	r2, #15
 8005024:	fa02 f303 	lsl.w	r3, r2, r3
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a54      	ldr	r2, [pc, #336]	; (8005184 <HAL_GPIO_DeInit+0x1b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d019      	beq.n	800506a <HAL_GPIO_DeInit+0x96>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a53      	ldr	r2, [pc, #332]	; (8005188 <HAL_GPIO_DeInit+0x1b4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <HAL_GPIO_DeInit+0x92>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a52      	ldr	r2, [pc, #328]	; (800518c <HAL_GPIO_DeInit+0x1b8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00d      	beq.n	8005062 <HAL_GPIO_DeInit+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a51      	ldr	r2, [pc, #324]	; (8005190 <HAL_GPIO_DeInit+0x1bc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <HAL_GPIO_DeInit+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a50      	ldr	r2, [pc, #320]	; (8005194 <HAL_GPIO_DeInit+0x1c0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d101      	bne.n	800505a <HAL_GPIO_DeInit+0x86>
 8005056:	2304      	movs	r3, #4
 8005058:	e008      	b.n	800506c <HAL_GPIO_DeInit+0x98>
 800505a:	2307      	movs	r3, #7
 800505c:	e006      	b.n	800506c <HAL_GPIO_DeInit+0x98>
 800505e:	2303      	movs	r3, #3
 8005060:	e004      	b.n	800506c <HAL_GPIO_DeInit+0x98>
 8005062:	2302      	movs	r3, #2
 8005064:	e002      	b.n	800506c <HAL_GPIO_DeInit+0x98>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <HAL_GPIO_DeInit+0x98>
 800506a:	2300      	movs	r3, #0
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	f002 0203 	and.w	r2, r2, #3
 8005072:	0092      	lsls	r2, r2, #2
 8005074:	4093      	lsls	r3, r2
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	d132      	bne.n	80050e2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800507c:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	43db      	mvns	r3, r3
 8005084:	4944      	ldr	r1, [pc, #272]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 8005086:	4013      	ands	r3, r2
 8005088:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800508a:	4b43      	ldr	r3, [pc, #268]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	43db      	mvns	r3, r3
 8005092:	4941      	ldr	r1, [pc, #260]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 8005094:	4013      	ands	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005098:	4b3f      	ldr	r3, [pc, #252]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 800509a:	68da      	ldr	r2, [r3, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	43db      	mvns	r3, r3
 80050a0:	493d      	ldr	r1, [pc, #244]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80050a6:	4b3c      	ldr	r3, [pc, #240]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	493a      	ldr	r1, [pc, #232]	; (8005198 <HAL_GPIO_DeInit+0x1c4>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	220f      	movs	r2, #15
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80050c4:	4a2e      	ldr	r2, [pc, #184]	; (8005180 <HAL_GPIO_DeInit+0x1ac>)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	089b      	lsrs	r3, r3, #2
 80050ca:	3302      	adds	r3, #2
 80050cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	43da      	mvns	r2, r3
 80050d4:	482a      	ldr	r0, [pc, #168]	; (8005180 <HAL_GPIO_DeInit+0x1ac>)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	400a      	ands	r2, r1
 80050dc:	3302      	adds	r3, #2
 80050de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	2103      	movs	r1, #3
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	401a      	ands	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	08da      	lsrs	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3208      	adds	r2, #8
 8005100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	220f      	movs	r2, #15
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	08d2      	lsrs	r2, r2, #3
 8005118:	4019      	ands	r1, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3208      	adds	r2, #8
 800511e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	2103      	movs	r1, #3
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	401a      	ands	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	2101      	movs	r1, #1
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	43db      	mvns	r3, r3
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	2103      	movs	r1, #3
 8005156:	fa01 f303 	lsl.w	r3, r1, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	401a      	ands	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b0f      	cmp	r3, #15
 800516c:	f67f af40 	bls.w	8004ff0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40013800 	.word	0x40013800
 8005184:	40020000 	.word	0x40020000
 8005188:	40020400 	.word	0x40020400
 800518c:	40020800 	.word	0x40020800
 8005190:	40020c00 	.word	0x40020c00
 8005194:	40021000 	.word	0x40021000
 8005198:	40013c00 	.word	0x40013c00

0800519c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
 80051a8:	4613      	mov	r3, r2
 80051aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051ac:	787b      	ldrb	r3, [r7, #1]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051b2:	887a      	ldrh	r2, [r7, #2]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051b8:	e003      	b.n	80051c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ba:	887b      	ldrh	r3, [r7, #2]
 80051bc:	041a      	lsls	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	619a      	str	r2, [r3, #24]
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051da:	4b08      	ldr	r3, [pc, #32]	; (80051fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d006      	beq.n	80051f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051e6:	4a05      	ldr	r2, [pc, #20]	; (80051fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f806 	bl	8005200 <HAL_GPIO_EXTI_Callback>
  }
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40013c00 	.word	0x40013c00

08005200 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e267      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d075      	beq.n	8005322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005236:	4b88      	ldr	r3, [pc, #544]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b85      	ldr	r3, [pc, #532]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800524a:	2b08      	cmp	r3, #8
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b82      	ldr	r3, [pc, #520]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b7e      	ldr	r3, [pc, #504]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e242      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x74>
 800527e:	4b76      	ldr	r3, [pc, #472]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x98>
 8005296:	4b70      	ldr	r3, [pc, #448]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6f      	ldr	r2, [pc, #444]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6c      	ldr	r2, [pc, #432]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 80052b0:	4b69      	ldr	r3, [pc, #420]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a68      	ldr	r2, [pc, #416]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b66      	ldr	r3, [pc, #408]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fe ff7c 	bl	80041cc <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fe ff78 	bl	80041cc <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e207      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xc0>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fe ff68 	bl	80041cc <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe ff64 	bl	80041cc <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f3      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b51      	ldr	r3, [pc, #324]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0xe8>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532e:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005342:	2b08      	cmp	r3, #8
 8005344:	d11c      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b44      	ldr	r3, [pc, #272]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	4b41      	ldr	r3, [pc, #260]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1c7      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4937      	ldr	r1, [pc, #220]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	e03a      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_RCC_OscConfig+0x244>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe ff1d 	bl	80041cc <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005396:	f7fe ff19 	bl	80041cc <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1a8      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	4b2b      	ldr	r3, [pc, #172]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b28      	ldr	r3, [pc, #160]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4925      	ldr	r1, [pc, #148]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b24      	ldr	r3, [pc, #144]	; (800545c <HAL_RCC_OscConfig+0x244>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fe fefc 	bl	80041cc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fe fef8 	bl	80041cc <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e187      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d036      	beq.n	8005470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b15      	ldr	r3, [pc, #84]	; (8005460 <HAL_RCC_OscConfig+0x248>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fe fedc 	bl	80041cc <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005418:	f7fe fed8 	bl	80041cc <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e167      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCC_OscConfig+0x240>)
 800542c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x200>
 8005436:	e01b      	b.n	8005470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b09      	ldr	r3, [pc, #36]	; (8005460 <HAL_RCC_OscConfig+0x248>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fe fec5 	bl	80041cc <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	e00e      	b.n	8005464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005446:	f7fe fec1 	bl	80041cc <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d907      	bls.n	8005464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e150      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	42470000 	.word	0x42470000
 8005460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	4b88      	ldr	r3, [pc, #544]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ea      	bne.n	8005446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b81      	ldr	r3, [pc, #516]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b7d      	ldr	r3, [pc, #500]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005496:	4a7c      	ldr	r2, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	; 0x40
 800549e:	4b7a      	ldr	r3, [pc, #488]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b77      	ldr	r3, [pc, #476]	; (800568c <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b74      	ldr	r3, [pc, #464]	; (800568c <HAL_RCC_OscConfig+0x474>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a73      	ldr	r2, [pc, #460]	; (800568c <HAL_RCC_OscConfig+0x474>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fe fe81 	bl	80041cc <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fe fe7d 	bl	80041cc <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e10c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b6a      	ldr	r3, [pc, #424]	; (800568c <HAL_RCC_OscConfig+0x474>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x2ea>
 80054f4:	4b64      	ldr	r3, [pc, #400]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a63      	ldr	r2, [pc, #396]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x30c>
 800550a:	4b5f      	ldr	r3, [pc, #380]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	4a5e      	ldr	r2, [pc, #376]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	; 0x70
 8005516:	4b5c      	ldr	r3, [pc, #368]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4a5b      	ldr	r2, [pc, #364]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	; 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005524:	4b58      	ldr	r3, [pc, #352]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	4a57      	ldr	r2, [pc, #348]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	; 0x70
 8005530:	4b55      	ldr	r3, [pc, #340]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005534:	4a54      	ldr	r2, [pc, #336]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fe fe42 	bl	80041cc <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fe fe3e 	bl	80041cc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0cb      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	4b49      	ldr	r3, [pc, #292]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x334>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fe fe2c 	bl	80041cc <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fe fe28 	bl	80041cc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	; 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b5      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	4b3e      	ldr	r3, [pc, #248]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	4a38      	ldr	r2, [pc, #224]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b6:	4b34      	ldr	r3, [pc, #208]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d05c      	beq.n	800567c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d141      	bne.n	800564e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b31      	ldr	r3, [pc, #196]	; (8005690 <HAL_RCC_OscConfig+0x478>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fe fdfc 	bl	80041cc <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fe fdf8 	bl	80041cc <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e087      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b27      	ldr	r3, [pc, #156]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	491b      	ldr	r1, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b1b      	ldr	r3, [pc, #108]	; (8005690 <HAL_RCC_OscConfig+0x478>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fe fdd1 	bl	80041cc <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fe fdcd 	bl	80041cc <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e05c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x416>
 800564c:	e054      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b10      	ldr	r3, [pc, #64]	; (8005690 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fe fdba 	bl	80041cc <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fe fdb6 	bl	80041cc <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e045      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x444>
 800567a:	e03d      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e038      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	40007000 	.word	0x40007000
 8005690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005694:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCC_OscConfig+0x4ec>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d028      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d121      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	3b01      	subs	r3, #1
 80056de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fe fce8 	bl	80041cc <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fe fce4 	bl	80041cc <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	; 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	; (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	; (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	; (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fc48 	bl	8004144 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0802214c 	.word	0x0802214c
 80058cc:	200000a8 	.word	0x200000a8
 80058d0:	200000ac 	.word	0x200000ac

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b094      	sub	sp, #80	; 0x50
 80058da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	647b      	str	r3, [r7, #68]	; 0x44
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058e4:	2300      	movs	r3, #0
 80058e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ec:	4b79      	ldr	r3, [pc, #484]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d00d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x40>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	f200 80e1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x34>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3a>
 8005906:	e0db      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b73      	ldr	r3, [pc, #460]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800590c:	e0db      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590e:	4b73      	ldr	r3, [pc, #460]	; (8005adc <HAL_RCC_GetSysClockFreq+0x208>)
 8005910:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005914:	4b6f      	ldr	r3, [pc, #444]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800591c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591e:	4b6d      	ldr	r3, [pc, #436]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592a:	4b6a      	ldr	r3, [pc, #424]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	2200      	movs	r2, #0
 8005932:	63bb      	str	r3, [r7, #56]	; 0x38
 8005934:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	633b      	str	r3, [r7, #48]	; 0x30
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
 8005942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	0159      	lsls	r1, r3, #5
 8005954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005958:	0150      	lsls	r0, r2, #5
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4621      	mov	r1, r4
 8005960:	1a51      	subs	r1, r2, r1
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	4629      	mov	r1, r5
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	018b      	lsls	r3, r1, #6
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005982:	4651      	mov	r1, sl
 8005984:	018a      	lsls	r2, r1, #6
 8005986:	4651      	mov	r1, sl
 8005988:	ebb2 0801 	subs.w	r8, r2, r1
 800598c:	4659      	mov	r1, fp
 800598e:	eb63 0901 	sbc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	462b      	mov	r3, r5
 80059b4:	eb49 0303 	adc.w	r3, r9, r3
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c6:	4629      	mov	r1, r5
 80059c8:	024b      	lsls	r3, r1, #9
 80059ca:	4621      	mov	r1, r4
 80059cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059d0:	4621      	mov	r1, r4
 80059d2:	024a      	lsls	r2, r1, #9
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059da:	2200      	movs	r2, #0
 80059dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059e4:	f7fb f8f8 	bl	8000bd8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059f0:	e058      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f2:	4b38      	ldr	r3, [pc, #224]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	2200      	movs	r2, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	4611      	mov	r1, r2
 80059fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
 8005a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4641      	mov	r1, r8
 8005a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a44:	ebb2 040a 	subs.w	r4, r2, sl
 8005a48:	eb63 050b 	sbc.w	r5, r3, fp
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb45 0303 	adc.w	r3, r5, r3
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	f7fb f89e 	bl	8000bd8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ab4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3750      	adds	r7, #80	; 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	; (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	200000a8 	.word	0x200000a8

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a9b      	lsrs	r3, r3, #10
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	; (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0802215c 	.word	0x0802215c

08005b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b24:	f7ff ffdc 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	0b5b      	lsrs	r3, r3, #13
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	4903      	ldr	r1, [pc, #12]	; (8005b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b36:	5ccb      	ldrb	r3, [r1, r3]
 8005b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	0802215c 	.word	0x0802215c

08005b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07b      	b.n	8005c52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d108      	bne.n	8005b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	d009      	beq.n	8005b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	61da      	str	r2, [r3, #28]
 8005b72:	e005      	b.n	8005b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d106      	bne.n	8005ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f7fd feba 	bl	8003914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	431a      	orrs	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bf0:	431a      	orrs	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	ea42 0103 	orr.w	r1, r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	f003 0104 	and.w	r1, r3, #4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	f003 0210 	and.w	r2, r3, #16
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d101      	bne.n	8005c6c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e01a      	b.n	8005ca2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7fd ffad 	bl	8003be4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b088      	sub	sp, #32
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	603b      	str	r3, [r7, #0]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d101      	bne.n	8005ccc <HAL_SPI_Transmit+0x22>
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e126      	b.n	8005f1a <HAL_SPI_Transmit+0x270>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cd4:	f7fe fa7a 	bl	80041cc <HAL_GetTick>
 8005cd8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d002      	beq.n	8005cf0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
 8005cec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cee:	e10b      	b.n	8005f08 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <HAL_SPI_Transmit+0x52>
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005d00:	e102      	b.n	8005f08 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2203      	movs	r2, #3
 8005d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d48:	d10f      	bne.n	8005d6a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d68:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b40      	cmp	r3, #64	; 0x40
 8005d76:	d007      	beq.n	8005d88 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d86:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d90:	d14b      	bne.n	8005e2a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_SPI_Transmit+0xf6>
 8005d9a:	8afb      	ldrh	r3, [r7, #22]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d13e      	bne.n	8005e1e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	881a      	ldrh	r2, [r3, #0]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	1c9a      	adds	r2, r3, #2
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005dc4:	e02b      	b.n	8005e1e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d112      	bne.n	8005dfa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	881a      	ldrh	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	1c9a      	adds	r2, r3, #2
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005df8:	e011      	b.n	8005e1e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dfa:	f7fe f9e7 	bl	80041cc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d803      	bhi.n	8005e12 <HAL_SPI_Transmit+0x168>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d102      	bne.n	8005e18 <HAL_SPI_Transmit+0x16e>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d102      	bne.n	8005e1e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e1c:	e074      	b.n	8005f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1ce      	bne.n	8005dc6 <HAL_SPI_Transmit+0x11c>
 8005e28:	e04c      	b.n	8005ec4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_SPI_Transmit+0x18e>
 8005e32:	8afb      	ldrh	r3, [r7, #22]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d140      	bne.n	8005eba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005e5e:	e02c      	b.n	8005eba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d113      	bne.n	8005e96 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	7812      	ldrb	r2, [r2, #0]
 8005e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	1c5a      	adds	r2, r3, #1
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	86da      	strh	r2, [r3, #54]	; 0x36
 8005e94:	e011      	b.n	8005eba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e96:	f7fe f999 	bl	80041cc <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	683a      	ldr	r2, [r7, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d803      	bhi.n	8005eae <HAL_SPI_Transmit+0x204>
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d102      	bne.n	8005eb4 <HAL_SPI_Transmit+0x20a>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d102      	bne.n	8005eba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eb8:	e026      	b.n	8005f08 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1cd      	bne.n	8005e60 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	6839      	ldr	r1, [r7, #0]
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 fe07 	bl	8006adc <SPI_EndRxTxTransaction>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e000      	b.n	8005f08 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3720      	adds	r7, #32
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_SPI_Transmit_DMA+0x20>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e09b      	b.n	800607c <HAL_SPI_Transmit_DMA+0x158>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f5c:	e089      	b.n	8006072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d002      	beq.n	8005f6a <HAL_SPI_Transmit_DMA+0x46>
 8005f64:	88fb      	ldrh	r3, [r7, #6]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d102      	bne.n	8005f70 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f6e:	e080      	b.n	8006072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	88fa      	ldrh	r2, [r7, #6]
 8005f88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb6:	d10f      	bne.n	8005fd8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fdc:	4a29      	ldr	r2, [pc, #164]	; (8006084 <HAL_SPI_Transmit_DMA+0x160>)
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe4:	4a28      	ldr	r2, [pc, #160]	; (8006088 <HAL_SPI_Transmit_DMA+0x164>)
 8005fe6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fec:	4a27      	ldr	r2, [pc, #156]	; (800608c <HAL_SPI_Transmit_DMA+0x168>)
 8005fee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4619      	mov	r1, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	330c      	adds	r3, #12
 8006008:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800600e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006010:	f7fe fb78 	bl	8004704 <HAL_DMA_Start_IT>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	f043 0210 	orr.w	r2, r3, #16
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006032:	e01e      	b.n	8006072 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b40      	cmp	r3, #64	; 0x40
 8006040:	d007      	beq.n	8006052 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0202 	orr.w	r2, r2, #2
 8006070:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	08006845 	.word	0x08006845
 8006088:	08006665 	.word	0x08006665
 800608c:	08006899 	.word	0x08006899

08006090 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	4613      	mov	r3, r2
 800609c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <HAL_SPI_Receive_DMA+0x3c>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b2:	d10b      	bne.n	80060cc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2204      	movs	r2, #4
 80060b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f8a6 	bl	8006214 <HAL_SPI_TransmitReceive_DMA>
 80060c8:	4603      	mov	r3, r0
 80060ca:	e09b      	b.n	8006204 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_SPI_Receive_DMA+0x4a>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e094      	b.n	8006204 <HAL_SPI_Receive_DMA+0x174>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d002      	beq.n	80060f4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
 80060f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060f2:	e082      	b.n	80061fa <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_SPI_Receive_DMA+0x70>
 80060fa:	88fb      	ldrh	r3, [r7, #6]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d102      	bne.n	8006106 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006104:	e079      	b.n	80061fa <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2204      	movs	r2, #4
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2200      	movs	r2, #0
 800613c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006146:	d10f      	bne.n	8006168 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006156:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006166:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800616c:	4a27      	ldr	r2, [pc, #156]	; (800620c <HAL_SPI_Receive_DMA+0x17c>)
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006174:	4a26      	ldr	r2, [pc, #152]	; (8006210 <HAL_SPI_Receive_DMA+0x180>)
 8006176:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617c:	2200      	movs	r2, #0
 800617e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	4619      	mov	r1, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006190:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006196:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006198:	f7fe fab4 	bl	8004704 <HAL_DMA_Start_IT>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00c      	beq.n	80061bc <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f043 0210 	orr.w	r2, r3, #16
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80061ba:	e01e      	b.n	80061fa <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d007      	beq.n	80061da <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0220 	orr.w	r2, r2, #32
 80061e8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	0800670d 	.word	0x0800670d
 8006210:	08006899 	.word	0x08006899

08006214 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006230:	2302      	movs	r3, #2
 8006232:	e0e3      	b.n	80063fc <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006242:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800624a:	7dbb      	ldrb	r3, [r7, #22]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d00d      	beq.n	800626c <HAL_SPI_TransmitReceive_DMA+0x58>
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006256:	d106      	bne.n	8006266 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006260:	7dbb      	ldrb	r3, [r7, #22]
 8006262:	2b04      	cmp	r3, #4
 8006264:	d002      	beq.n	800626c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006266:	2302      	movs	r3, #2
 8006268:	75fb      	strb	r3, [r7, #23]
    goto error;
 800626a:	e0c2      	b.n	80063f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d005      	beq.n	800627e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006282:	e0b6      	b.n	80063f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b04      	cmp	r3, #4
 800628e:	d003      	beq.n	8006298 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2205      	movs	r2, #5
 8006294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	887a      	ldrh	r2, [r7, #2]
 80062ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	887a      	ldrh	r2, [r7, #2]
 80062ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	887a      	ldrh	r2, [r7, #2]
 80062c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d108      	bne.n	80062ec <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062de:	4a49      	ldr	r2, [pc, #292]	; (8006404 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	4a48      	ldr	r2, [pc, #288]	; (8006408 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80062e8:	63da      	str	r2, [r3, #60]	; 0x3c
 80062ea:	e007      	b.n	80062fc <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f0:	4a46      	ldr	r2, [pc, #280]	; (800640c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80062f2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f8:	4a45      	ldr	r2, [pc, #276]	; (8006410 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80062fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006300:	4a44      	ldr	r2, [pc, #272]	; (8006414 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8006302:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	4619      	mov	r1, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006322:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006324:	f7fe f9ee 	bl	8004704 <HAL_DMA_Start_IT>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	f043 0210 	orr.w	r2, r3, #16
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006346:	e054      	b.n	80063f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635c:	2200      	movs	r2, #0
 800635e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006364:	2200      	movs	r2, #0
 8006366:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636c:	2200      	movs	r2, #0
 800636e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	4619      	mov	r1, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	330c      	adds	r3, #12
 8006388:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006390:	f7fe f9b8 	bl	8004704 <HAL_DMA_Start_IT>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	f043 0210 	orr.w	r2, r3, #16
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80063b2:	e01e      	b.n	80063f2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063be:	2b40      	cmp	r3, #64	; 0x40
 80063c0:	d007      	beq.n	80063d2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0220 	orr.w	r2, r2, #32
 80063e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f042 0202 	orr.w	r2, r2, #2
 80063f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3718      	adds	r7, #24
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	08006861 	.word	0x08006861
 8006408:	0800670d 	.word	0x0800670d
 800640c:	0800687d 	.word	0x0800687d
 8006410:	080067b5 	.word	0x080067b5
 8006414:	08006899 	.word	0x08006899

08006418 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10e      	bne.n	8006458 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4798      	blx	r3
    return;
 8006456:	e0ce      	b.n	80065f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_SPI_IRQHandler+0x5e>
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	4798      	blx	r3
    return;
 8006474:	e0bf      	b.n	80065f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f003 0320 	and.w	r3, r3, #32
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <HAL_SPI_IRQHandler+0x7e>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80b0 	beq.w	80065f6 <HAL_SPI_IRQHandler+0x1de>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80aa 	beq.w	80065f6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d023      	beq.n	80064f4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d011      	beq.n	80064dc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064bc:	f043 0204 	orr.w	r2, r3, #4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	617b      	str	r3, [r7, #20]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	e00b      	b.n	80064f4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	693b      	ldr	r3, [r7, #16]
        return;
 80064f2:	e080      	b.n	80065f6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d014      	beq.n	8006528 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006502:	f043 0201 	orr.w	r2, r3, #1
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00c      	beq.n	800654c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f043 0208 	orr.w	r2, r3, #8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800653e:	2300      	movs	r3, #0
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006550:	2b00      	cmp	r3, #0
 8006552:	d04f      	beq.n	80065f4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006562:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_SPI_IRQHandler+0x168>
 8006576:	69fb      	ldr	r3, [r7, #28]
 8006578:	f003 0301 	and.w	r3, r3, #1
 800657c:	2b00      	cmp	r3, #0
 800657e:	d034      	beq.n	80065ea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f022 0203 	bic.w	r2, r2, #3
 800658e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d011      	beq.n	80065bc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659c:	4a17      	ldr	r2, [pc, #92]	; (80065fc <HAL_SPI_IRQHandler+0x1e4>)
 800659e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe f905 	bl	80047b4 <HAL_DMA_Abort_IT>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d016      	beq.n	80065f2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065c8:	4a0c      	ldr	r2, [pc, #48]	; (80065fc <HAL_SPI_IRQHandler+0x1e4>)
 80065ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe f8ef 	bl	80047b4 <HAL_DMA_Abort_IT>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80065e8:	e003      	b.n	80065f2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f830 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80065f0:	e000      	b.n	80065f4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80065f2:	bf00      	nop
    return;
 80065f4:	bf00      	nop
  }
}
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	080068d9 	.word	0x080068d9

08006600 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006672:	f7fd fdab 	bl	80041cc <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006686:	d03b      	beq.n	8006700 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0220 	bic.w	r2, r2, #32
 8006696:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0202 	bic.w	r2, r2, #2
 80066a6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	2164      	movs	r1, #100	; 0x64
 80066ac:	6978      	ldr	r0, [r7, #20]
 80066ae:	f000 fa15 	bl	8006adc <SPI_EndRxTxTransaction>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	2200      	movs	r2, #0
 80066e6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066f8:	6978      	ldr	r0, [r7, #20]
 80066fa:	f7ff ffa9 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066fe:	e002      	b.n	8006706 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006700:	6978      	ldr	r0, [r7, #20]
 8006702:	f7fd fb0b 	bl	8003d1c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006706:	3718      	adds	r7, #24
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671a:	f7fd fd57 	bl	80041cc <HAL_GetTick>
 800671e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672e:	d03b      	beq.n	80067a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0220 	bic.w	r2, r2, #32
 800673e:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <SPI_DMAReceiveCplt+0x58>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006750:	d108      	bne.n	8006764 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0203 	bic.w	r2, r2, #3
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	e007      	b.n	8006774 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685a      	ldr	r2, [r3, #4]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	2164      	movs	r1, #100	; 0x64
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 f949 	bl	8006a10 <SPI_EndRxTransaction>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	2b00      	cmp	r3, #0
 800679e:	d003      	beq.n	80067a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7ff ff55 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80067a6:	e002      	b.n	80067ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7fd fad9 	bl	8003d60 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c2:	f7fd fd03 	bl	80041cc <HAL_GetTick>
 80067c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d02f      	beq.n	8006838 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0220 	bic.w	r2, r2, #32
 80067e6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	2164      	movs	r1, #100	; 0x64
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f975 	bl	8006adc <SPI_EndRxTxTransaction>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d005      	beq.n	8006804 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	f043 0220 	orr.w	r2, r3, #32
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0203 	bic.w	r2, r2, #3
 8006812:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f7ff ff0d 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006836:	e002      	b.n	800683e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff fee1 	bl	8006600 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f7ff fede 	bl	8006614 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff feda 	bl	8006628 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006874:	bf00      	nop
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006888:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff fed6 	bl	800663c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0203 	bic.w	r2, r2, #3
 80068b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	f043 0210 	orr.w	r2, r3, #16
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fec0 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f7ff feac 	bl	8006650 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068f8:	bf00      	nop
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b088      	sub	sp, #32
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	4613      	mov	r3, r2
 800690e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006910:	f7fd fc5c 	bl	80041cc <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	683a      	ldr	r2, [r7, #0]
 800691c:	4413      	add	r3, r2
 800691e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006920:	f7fd fc54 	bl	80041cc <HAL_GetTick>
 8006924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	015b      	lsls	r3, r3, #5
 800692c:	0d1b      	lsrs	r3, r3, #20
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006936:	e054      	b.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693e:	d050      	beq.n	80069e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006940:	f7fd fc44 	bl	80041cc <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	429a      	cmp	r2, r3
 800694e:	d902      	bls.n	8006956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d13d      	bne.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696e:	d111      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d004      	beq.n	8006984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d107      	bne.n	8006994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800699c:	d10f      	bne.n	80069be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e017      	b.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3b01      	subs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689a      	ldr	r2, [r3, #8]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	4013      	ands	r3, r2
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	bf0c      	ite	eq
 80069f2:	2301      	moveq	r3, #1
 80069f4:	2300      	movne	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	461a      	mov	r2, r3
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d19b      	bne.n	8006938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200000a8 	.word	0x200000a8

08006a10 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a24:	d111      	bne.n	8006a4a <SPI_EndRxTransaction+0x3a>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d004      	beq.n	8006a3a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a38:	d107      	bne.n	8006a4a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a48:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a52:	d12a      	bne.n	8006aaa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5c:	d012      	beq.n	8006a84 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2200      	movs	r2, #0
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f7ff ff49 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d02d      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a78:	f043 0220 	orr.w	r2, r3, #32
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e026      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ff36 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d01a      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	f043 0220 	orr.w	r2, r3, #32
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e013      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f7ff ff23 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac4:	f043 0220 	orr.w	r2, r3, #32
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e000      	b.n	8006ad2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <SPI_EndRxTxTransaction+0x7c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1b      	ldr	r2, [pc, #108]	; (8006b5c <SPI_EndRxTxTransaction+0x80>)
 8006aee:	fba2 2303 	umull	r2, r3, r2, r3
 8006af2:	0d5b      	lsrs	r3, r3, #21
 8006af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b06:	d112      	bne.n	8006b2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2180      	movs	r1, #128	; 0x80
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f7ff fef4 	bl	8006900 <SPI_WaitFlagStateUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b22:	f043 0220 	orr.w	r2, r3, #32
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e00f      	b.n	8006b4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00a      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b44:	2b80      	cmp	r3, #128	; 0x80
 8006b46:	d0f2      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x52>
 8006b48:	e000      	b.n	8006b4c <SPI_EndRxTxTransaction+0x70>
        break;
 8006b4a:	bf00      	nop
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200000a8 	.word	0x200000a8
 8006b5c:	165e9f81 	.word	0x165e9f81

08006b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e03f      	b.n	8006bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fd f876 	bl	8003c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 f929 	bl	8006dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695a      	ldr	r2, [r3, #20]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af02      	add	r7, sp, #8
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b20      	cmp	r3, #32
 8006c18:	d17c      	bne.n	8006d14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d002      	beq.n	8006c26 <HAL_UART_Transmit+0x2c>
 8006c20:	88fb      	ldrh	r3, [r7, #6]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e075      	b.n	8006d16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d101      	bne.n	8006c38 <HAL_UART_Transmit+0x3e>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e06e      	b.n	8006d16 <HAL_UART_Transmit+0x11c>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2221      	movs	r2, #33	; 0x21
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c4e:	f7fd fabd 	bl	80041cc <HAL_GetTick>
 8006c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	88fa      	ldrh	r2, [r7, #6]
 8006c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c68:	d108      	bne.n	8006c7c <HAL_UART_Transmit+0x82>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d104      	bne.n	8006c7c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e003      	b.n	8006c84 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c8c:	e02a      	b.n	8006ce4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2200      	movs	r2, #0
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 f840 	bl	8006d1e <UART_WaitOnFlagUntilTimeout>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	e036      	b.n	8006d16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10b      	bne.n	8006cc6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	e007      	b.n	8006cd6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1cf      	bne.n	8006c8e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2140      	movs	r1, #64	; 0x40
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f810 	bl	8006d1e <UART_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e006      	b.n	8006d16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d14:	2302      	movs	r3, #2
  }
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3720      	adds	r7, #32
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b090      	sub	sp, #64	; 0x40
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2e:	e050      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d36:	d04c      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x30>
 8006d3e:	f7fd fa45 	bl	80041cc <HAL_GetTick>
 8006d42:	4602      	mov	r2, r0
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d241      	bcs.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	330c      	adds	r3, #12
 8006d54:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	330c      	adds	r3, #12
 8006d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d6e:	637a      	str	r2, [r7, #52]	; 0x34
 8006d70:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d76:	e841 2300 	strex	r3, r2, [r1]
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1e5      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	e853 3f00 	ldrex	r3, [r3]
 8006d90:	613b      	str	r3, [r7, #16]
   return(result);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3314      	adds	r3, #20
 8006da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006da2:	623a      	str	r2, [r7, #32]
 8006da4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da6:	69f9      	ldr	r1, [r7, #28]
 8006da8:	6a3a      	ldr	r2, [r7, #32]
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1e5      	bne.n	8006d82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e00f      	b.n	8006df2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d09f      	beq.n	8006d30 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3740      	adds	r7, #64	; 0x40
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e00:	b0c0      	sub	sp, #256	; 0x100
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e18:	68d9      	ldr	r1, [r3, #12]
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	ea40 0301 	orr.w	r3, r0, r1
 8006e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	431a      	orrs	r2, r3
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e54:	f021 010c 	bic.w	r1, r1, #12
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006e62:	430b      	orrs	r3, r1
 8006e64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e76:	6999      	ldr	r1, [r3, #24]
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	ea40 0301 	orr.w	r3, r0, r1
 8006e82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b8f      	ldr	r3, [pc, #572]	; (80070c8 <UART_SetConfig+0x2cc>)
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d005      	beq.n	8006e9c <UART_SetConfig+0xa0>
 8006e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b8d      	ldr	r3, [pc, #564]	; (80070cc <UART_SetConfig+0x2d0>)
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d104      	bne.n	8006ea6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e9c:	f7fe fe40 	bl	8005b20 <HAL_RCC_GetPCLK2Freq>
 8006ea0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ea4:	e003      	b.n	8006eae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ea6:	f7fe fe27 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 8006eaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	f040 810c 	bne.w	80070d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ec6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006eca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ece:	4622      	mov	r2, r4
 8006ed0:	462b      	mov	r3, r5
 8006ed2:	1891      	adds	r1, r2, r2
 8006ed4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ede:	4621      	mov	r1, r4
 8006ee0:	eb12 0801 	adds.w	r8, r2, r1
 8006ee4:	4629      	mov	r1, r5
 8006ee6:	eb43 0901 	adc.w	r9, r3, r1
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006efe:	4690      	mov	r8, r2
 8006f00:	4699      	mov	r9, r3
 8006f02:	4623      	mov	r3, r4
 8006f04:	eb18 0303 	adds.w	r3, r8, r3
 8006f08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	eb49 0303 	adc.w	r3, r9, r3
 8006f12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	18db      	adds	r3, r3, r3
 8006f2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f30:	4613      	mov	r3, r2
 8006f32:	eb42 0303 	adc.w	r3, r2, r3
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
 8006f38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f40:	f7f9 fe4a 	bl	8000bd8 <__aeabi_uldivmod>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4b61      	ldr	r3, [pc, #388]	; (80070d0 <UART_SetConfig+0x2d4>)
 8006f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f4e:	095b      	lsrs	r3, r3, #5
 8006f50:	011c      	lsls	r4, r3, #4
 8006f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006f60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006f64:	4642      	mov	r2, r8
 8006f66:	464b      	mov	r3, r9
 8006f68:	1891      	adds	r1, r2, r2
 8006f6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006f6c:	415b      	adcs	r3, r3
 8006f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006f74:	4641      	mov	r1, r8
 8006f76:	eb12 0a01 	adds.w	sl, r2, r1
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006f80:	f04f 0200 	mov.w	r2, #0
 8006f84:	f04f 0300 	mov.w	r3, #0
 8006f88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f94:	4692      	mov	sl, r2
 8006f96:	469b      	mov	fp, r3
 8006f98:	4643      	mov	r3, r8
 8006f9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fa2:	464b      	mov	r3, r9
 8006fa4:	eb4b 0303 	adc.w	r3, fp, r3
 8006fa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006fbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	18db      	adds	r3, r3, r3
 8006fc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	eb42 0303 	adc.w	r3, r2, r3
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006fd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006fd6:	f7f9 fdff 	bl	8000bd8 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4b3b      	ldr	r3, [pc, #236]	; (80070d0 <UART_SetConfig+0x2d4>)
 8006fe2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2264      	movs	r2, #100	; 0x64
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	1acb      	subs	r3, r1, r3
 8006ff0:	00db      	lsls	r3, r3, #3
 8006ff2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <UART_SetConfig+0x2d4>)
 8006ff8:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007004:	441c      	add	r4, r3
 8007006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800700a:	2200      	movs	r2, #0
 800700c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007010:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007014:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	1891      	adds	r1, r2, r2
 800701e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007020:	415b      	adcs	r3, r3
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007024:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007028:	4641      	mov	r1, r8
 800702a:	1851      	adds	r1, r2, r1
 800702c:	6339      	str	r1, [r7, #48]	; 0x30
 800702e:	4649      	mov	r1, r9
 8007030:	414b      	adcs	r3, r1
 8007032:	637b      	str	r3, [r7, #52]	; 0x34
 8007034:	f04f 0200 	mov.w	r2, #0
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007040:	4659      	mov	r1, fp
 8007042:	00cb      	lsls	r3, r1, #3
 8007044:	4651      	mov	r1, sl
 8007046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800704a:	4651      	mov	r1, sl
 800704c:	00ca      	lsls	r2, r1, #3
 800704e:	4610      	mov	r0, r2
 8007050:	4619      	mov	r1, r3
 8007052:	4603      	mov	r3, r0
 8007054:	4642      	mov	r2, r8
 8007056:	189b      	adds	r3, r3, r2
 8007058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800705c:	464b      	mov	r3, r9
 800705e:	460a      	mov	r2, r1
 8007060:	eb42 0303 	adc.w	r3, r2, r3
 8007064:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007074:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007078:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800707c:	460b      	mov	r3, r1
 800707e:	18db      	adds	r3, r3, r3
 8007080:	62bb      	str	r3, [r7, #40]	; 0x28
 8007082:	4613      	mov	r3, r2
 8007084:	eb42 0303 	adc.w	r3, r2, r3
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800708a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800708e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007092:	f7f9 fda1 	bl	8000bd8 <__aeabi_uldivmod>
 8007096:	4602      	mov	r2, r0
 8007098:	460b      	mov	r3, r1
 800709a:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <UART_SetConfig+0x2d4>)
 800709c:	fba3 1302 	umull	r1, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	2164      	movs	r1, #100	; 0x64
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	00db      	lsls	r3, r3, #3
 80070ac:	3332      	adds	r3, #50	; 0x32
 80070ae:	4a08      	ldr	r2, [pc, #32]	; (80070d0 <UART_SetConfig+0x2d4>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 0207 	and.w	r2, r3, #7
 80070ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4422      	add	r2, r4
 80070c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070c4:	e106      	b.n	80072d4 <UART_SetConfig+0x4d8>
 80070c6:	bf00      	nop
 80070c8:	40011000 	.word	0x40011000
 80070cc:	40011400 	.word	0x40011400
 80070d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80070de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80070e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80070e6:	4642      	mov	r2, r8
 80070e8:	464b      	mov	r3, r9
 80070ea:	1891      	adds	r1, r2, r2
 80070ec:	6239      	str	r1, [r7, #32]
 80070ee:	415b      	adcs	r3, r3
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070f6:	4641      	mov	r1, r8
 80070f8:	1854      	adds	r4, r2, r1
 80070fa:	4649      	mov	r1, r9
 80070fc:	eb43 0501 	adc.w	r5, r3, r1
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	00eb      	lsls	r3, r5, #3
 800710a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800710e:	00e2      	lsls	r2, r4, #3
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	4643      	mov	r3, r8
 8007116:	18e3      	adds	r3, r4, r3
 8007118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800711c:	464b      	mov	r3, r9
 800711e:	eb45 0303 	adc.w	r3, r5, r3
 8007122:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007132:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007142:	4629      	mov	r1, r5
 8007144:	008b      	lsls	r3, r1, #2
 8007146:	4621      	mov	r1, r4
 8007148:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714c:	4621      	mov	r1, r4
 800714e:	008a      	lsls	r2, r1, #2
 8007150:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007154:	f7f9 fd40 	bl	8000bd8 <__aeabi_uldivmod>
 8007158:	4602      	mov	r2, r0
 800715a:	460b      	mov	r3, r1
 800715c:	4b60      	ldr	r3, [pc, #384]	; (80072e0 <UART_SetConfig+0x4e4>)
 800715e:	fba3 2302 	umull	r2, r3, r3, r2
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	011c      	lsls	r4, r3, #4
 8007166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800716a:	2200      	movs	r2, #0
 800716c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007170:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007174:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007178:	4642      	mov	r2, r8
 800717a:	464b      	mov	r3, r9
 800717c:	1891      	adds	r1, r2, r2
 800717e:	61b9      	str	r1, [r7, #24]
 8007180:	415b      	adcs	r3, r3
 8007182:	61fb      	str	r3, [r7, #28]
 8007184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007188:	4641      	mov	r1, r8
 800718a:	1851      	adds	r1, r2, r1
 800718c:	6139      	str	r1, [r7, #16]
 800718e:	4649      	mov	r1, r9
 8007190:	414b      	adcs	r3, r1
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	f04f 0200 	mov.w	r2, #0
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071a0:	4659      	mov	r1, fp
 80071a2:	00cb      	lsls	r3, r1, #3
 80071a4:	4651      	mov	r1, sl
 80071a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071aa:	4651      	mov	r1, sl
 80071ac:	00ca      	lsls	r2, r1, #3
 80071ae:	4610      	mov	r0, r2
 80071b0:	4619      	mov	r1, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	4642      	mov	r2, r8
 80071b6:	189b      	adds	r3, r3, r2
 80071b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80071bc:	464b      	mov	r3, r9
 80071be:	460a      	mov	r2, r1
 80071c0:	eb42 0303 	adc.w	r3, r2, r3
 80071c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80071d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80071e0:	4649      	mov	r1, r9
 80071e2:	008b      	lsls	r3, r1, #2
 80071e4:	4641      	mov	r1, r8
 80071e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ea:	4641      	mov	r1, r8
 80071ec:	008a      	lsls	r2, r1, #2
 80071ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80071f2:	f7f9 fcf1 	bl	8000bd8 <__aeabi_uldivmod>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4611      	mov	r1, r2
 80071fc:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <UART_SetConfig+0x4e4>)
 80071fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007202:	095b      	lsrs	r3, r3, #5
 8007204:	2264      	movs	r2, #100	; 0x64
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	1acb      	subs	r3, r1, r3
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	3332      	adds	r3, #50	; 0x32
 8007210:	4a33      	ldr	r2, [pc, #204]	; (80072e0 <UART_SetConfig+0x4e4>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800721c:	441c      	add	r4, r3
 800721e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007222:	2200      	movs	r2, #0
 8007224:	673b      	str	r3, [r7, #112]	; 0x70
 8007226:	677a      	str	r2, [r7, #116]	; 0x74
 8007228:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800722c:	4642      	mov	r2, r8
 800722e:	464b      	mov	r3, r9
 8007230:	1891      	adds	r1, r2, r2
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	415b      	adcs	r3, r3
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800723c:	4641      	mov	r1, r8
 800723e:	1851      	adds	r1, r2, r1
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	4649      	mov	r1, r9
 8007244:	414b      	adcs	r3, r1
 8007246:	607b      	str	r3, [r7, #4]
 8007248:	f04f 0200 	mov.w	r2, #0
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007254:	4659      	mov	r1, fp
 8007256:	00cb      	lsls	r3, r1, #3
 8007258:	4651      	mov	r1, sl
 800725a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800725e:	4651      	mov	r1, sl
 8007260:	00ca      	lsls	r2, r1, #3
 8007262:	4610      	mov	r0, r2
 8007264:	4619      	mov	r1, r3
 8007266:	4603      	mov	r3, r0
 8007268:	4642      	mov	r2, r8
 800726a:	189b      	adds	r3, r3, r2
 800726c:	66bb      	str	r3, [r7, #104]	; 0x68
 800726e:	464b      	mov	r3, r9
 8007270:	460a      	mov	r2, r1
 8007272:	eb42 0303 	adc.w	r3, r2, r3
 8007276:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	663b      	str	r3, [r7, #96]	; 0x60
 8007282:	667a      	str	r2, [r7, #100]	; 0x64
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007290:	4649      	mov	r1, r9
 8007292:	008b      	lsls	r3, r1, #2
 8007294:	4641      	mov	r1, r8
 8007296:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729a:	4641      	mov	r1, r8
 800729c:	008a      	lsls	r2, r1, #2
 800729e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072a2:	f7f9 fc99 	bl	8000bd8 <__aeabi_uldivmod>
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <UART_SetConfig+0x4e4>)
 80072ac:	fba3 1302 	umull	r1, r3, r3, r2
 80072b0:	095b      	lsrs	r3, r3, #5
 80072b2:	2164      	movs	r1, #100	; 0x64
 80072b4:	fb01 f303 	mul.w	r3, r1, r3
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	011b      	lsls	r3, r3, #4
 80072bc:	3332      	adds	r3, #50	; 0x32
 80072be:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <UART_SetConfig+0x4e4>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4422      	add	r2, r4
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	bf00      	nop
 80072d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80072da:	46bd      	mov	sp, r7
 80072dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e0:	51eb851f 	.word	0x51eb851f

080072e4 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  return x;
 80072ec:	687b      	ldr	r3, [r7, #4]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	4603      	mov	r3, r0
 8007302:	6039      	str	r1, [r7, #0]
 8007304:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 8007306:	f107 0208 	add.w	r2, r7, #8
 800730a:	79f9      	ldrb	r1, [r7, #7]
 800730c:	2304      	movs	r3, #4
 800730e:	2002      	movs	r0, #2
 8007310:	f000 f8f8 	bl	8007504 <sl_wfx_bus_access>
 8007314:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 8007316:	7a3b      	ldrb	r3, [r7, #8]
 8007318:	b29a      	uxth	r2, r3
 800731a:	7a7b      	ldrb	r3, [r7, #9]
 800731c:	b29b      	uxth	r3, r3
 800731e:	021b      	lsls	r3, r3, #8
 8007320:	b29b      	uxth	r3, r3
 8007322:	4313      	orrs	r3, r2
 8007324:	b29a      	uxth	r2, r3
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800732a:	68fb      	ldr	r3, [r7, #12]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	4603      	mov	r3, r0
 800733c:	460a      	mov	r2, r1
 800733e:	71fb      	strb	r3, [r7, #7]
 8007340:	4613      	mov	r3, r2
 8007342:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8007344:	88bb      	ldrh	r3, [r7, #4]
 8007346:	b2db      	uxtb	r3, r3
 8007348:	733b      	strb	r3, [r7, #12]
 800734a:	88bb      	ldrh	r3, [r7, #4]
 800734c:	0a1b      	lsrs	r3, r3, #8
 800734e:	b29b      	uxth	r3, r3
 8007350:	b2db      	uxtb	r3, r3
 8007352:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 800735c:	f107 020c 	add.w	r2, r7, #12
 8007360:	79f9      	ldrb	r1, [r7, #7]
 8007362:	2304      	movs	r3, #4
 8007364:	2001      	movs	r0, #1
 8007366:	f000 f8cd 	bl	8007504 <sl_wfx_bus_access>
 800736a:	4603      	mov	r3, r0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 8007380:	79f9      	ldrb	r1, [r7, #7]
 8007382:	2304      	movs	r3, #4
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	2002      	movs	r0, #2
 8007388:	f000 f8bc 	bl	8007504 <sl_wfx_bus_access>
 800738c:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f7ff ffa6 	bl	80072e4 <uint32_identity>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	4603      	mov	r3, r0
 80073b0:	6039      	str	r1, [r7, #0]
 80073b2:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff ff94 	bl	80072e4 <uint32_identity>
 80073bc:	4603      	mov	r3, r0
 80073be:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 80073c0:	463a      	mov	r2, r7
 80073c2:	79f9      	ldrb	r1, [r7, #7]
 80073c4:	2304      	movs	r3, #4
 80073c6:	2001      	movs	r0, #1
 80073c8:	f000 f89c 	bl	8007504 <sl_wfx_bus_access>
 80073cc:	4603      	mov	r3, r0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	2102      	movs	r1, #2
 80073e6:	2002      	movs	r0, #2
 80073e8:	f000 f88c 	bl	8007504 <sl_wfx_bus_access>
 80073ec:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 80073ee:	68fb      	ldr	r3, [r7, #12]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	2102      	movs	r1, #2
 8007408:	2001      	movs	r0, #1
 800740a:	f000 f87b 	bl	8007504 <sl_wfx_bus_access>
 800740e:	60f8      	str	r0, [r7, #12]

  return result;
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	60b9      	str	r1, [r7, #8]
 8007424:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742c:	d301      	bcc.n	8007432 <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 800742e:	2321      	movs	r3, #33	; 0x21
 8007430:	e00f      	b.n	8007452 <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	2004      	movs	r0, #4
 8007436:	f7ff ffb7 	bl	80073a8 <sl_wfx_reg_write_32>
 800743a:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d106      	bne.n	8007450 <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	2105      	movs	r1, #5
 8007448:	2001      	movs	r0, #1
 800744a:	f000 f85b 	bl	8007504 <sl_wfx_bus_access>
 800744e:	6178      	str	r0, [r7, #20]
  }

  return result;
 8007450:	697b      	ldr	r3, [r7, #20]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	2004      	movs	r0, #4
 8007468:	f7ff ff9e 	bl	80073a8 <sl_wfx_reg_write_32>
 800746c:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d104      	bne.n	800747e <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	2005      	movs	r0, #5
 8007478:	f7ff ff96 	bl	80073a8 <sl_wfx_reg_write_32>
 800747c:	60f8      	str	r0, [r7, #12]
  }

  return result;
 800747e:	68fb      	ldr	r3, [r7, #12]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 8007492:	6879      	ldr	r1, [r7, #4]
 8007494:	2004      	movs	r0, #4
 8007496:	f7ff ff87 	bl	80073a8 <sl_wfx_reg_write_32>
 800749a:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800749c:	f107 030c 	add.w	r3, r7, #12
 80074a0:	4619      	mov	r1, r3
 80074a2:	2000      	movs	r0, #0
 80074a4:	f7ff ff66 	bl	8007374 <sl_wfx_reg_read_32>
 80074a8:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074b0:	4619      	mov	r1, r3
 80074b2:	2000      	movs	r0, #0
 80074b4:	f7ff ff78 	bl	80073a8 <sl_wfx_reg_write_32>
 80074b8:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	e011      	b.n	80074e4 <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	4619      	mov	r1, r3
 80074c6:	2000      	movs	r0, #0
 80074c8:	f7ff ff54 	bl	8007374 <sl_wfx_reg_read_32>
 80074cc:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 80074d8:	2001      	movs	r0, #1
 80074da:	f001 fadd 	bl	8008a98 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	3301      	adds	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	2b13      	cmp	r3, #19
 80074e8:	d9ea      	bls.n	80074c0 <sl_wfx_apb_read_32+0x38>
 80074ea:	e000      	b.n	80074ee <sl_wfx_apb_read_32+0x66>
      break;
 80074ec:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	2005      	movs	r0, #5
 80074f2:	f7ff ff3f 	bl	8007374 <sl_wfx_reg_read_32>
 80074f6:	6138      	str	r0, [r7, #16]

  return result;
 80074f8:	693b      	ldr	r3, [r7, #16]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
	...

08007504 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60ba      	str	r2, [r7, #8]
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
 8007512:	460b      	mov	r3, r1
 8007514:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 8007516:	4b43      	ldr	r3, [pc, #268]	; (8007624 <sl_wfx_bus_access+0x120>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d01a      	beq.n	800755c <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 8007526:	2001      	movs	r0, #1
 8007528:	f001 fa30 	bl	800898c <sl_wfx_host_set_wake_up_pin>
 800752c:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d171      	bne.n	8007618 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d105      	bne.n	8007546 <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 800753a:	f001 fa43 	bl	80089c4 <sl_wfx_host_wait_for_wake_up>
 800753e:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d168      	bne.n	8007618 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 8007546:	4b37      	ldr	r3, [pc, #220]	; (8007624 <sl_wfx_bus_access+0x120>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800754e:	4b35      	ldr	r3, [pc, #212]	; (8007624 <sl_wfx_bus_access+0x120>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0208 	bic.w	r2, r2, #8
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d107      	bne.n	8007572 <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	4618      	mov	r0, r3
 800756a:	f000 f85d 	bl	8007628 <sl_wfx_reg_read>
 800756e:	6178      	str	r0, [r7, #20]
 8007570:	e00c      	b.n	800758c <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	68b9      	ldr	r1, [r7, #8]
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f89e 	bl	80076c0 <sl_wfx_reg_write>
 8007584:	6178      	str	r0, [r7, #20]
 8007586:	e001      	b.n	800758c <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 8007588:	2321      	movs	r3, #33	; 0x21
 800758a:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d142      	bne.n	8007618 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 8007592:	4b24      	ldr	r3, [pc, #144]	; (8007624 <sl_wfx_bus_access+0x120>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d039      	beq.n	8007616 <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d136      	bne.n	8007616 <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 80075a8:	7bbb      	ldrb	r3, [r7, #14]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d108      	bne.n	80075c0 <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 80075ae:	7bbb      	ldrb	r3, [r7, #14]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d130      	bne.n	8007616 <sl_wfx_bus_access+0x112>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d12a      	bne.n	8007616 <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 80075c0:	4b18      	ldr	r3, [pc, #96]	; (8007624 <sl_wfx_bus_access+0x120>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d824      	bhi.n	8007616 <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3b02      	subs	r3, #2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4413      	add	r3, r2
 80075d4:	881b      	ldrh	r3, [r3, #0]
 80075d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11b      	bne.n	8007616 <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 80075de:	7bb9      	ldrb	r1, [r7, #14]
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fa01 	bl	80089ec <sl_wfx_host_sleep_grant>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f640 3208 	movw	r2, #2824	; 0xb08
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d110      	bne.n	8007616 <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <sl_wfx_bus_access+0x120>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <sl_wfx_bus_access+0x120>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0208 	orr.w	r2, r2, #8
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 800760a:	2000      	movs	r0, #0
 800760c:	f001 f9be 	bl	800898c <sl_wfx_host_set_wake_up_pin>
 8007610:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 8007616:	bf00      	nop
  return result;
 8007618:	697b      	ldr	r3, [r7, #20]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200009fc 	.word	0x200009fc

08007628 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af02      	add	r7, sp, #8
 800762e:	4603      	mov	r3, r0
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	b29b      	uxth	r3, r3
 800763a:	031b      	lsls	r3, r3, #12
 800763c:	b29a      	uxth	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	085b      	lsrs	r3, r3, #1
 8007642:	b29b      	uxth	r3, r3
 8007644:	4313      	orrs	r3, r2
 8007646:	b29b      	uxth	r3, r3
 8007648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007650:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007652:	8bfb      	ldrh	r3, [r7, #30]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	b29b      	uxth	r3, r3
 8007658:	b2db      	uxtb	r3, r3
 800765a:	753b      	strb	r3, [r7, #20]
 800765c:	8bfb      	ldrh	r3, [r7, #30]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007662:	f002 f80f 	bl	8009684 <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	b29b      	uxth	r3, r3
 800766a:	f107 0114 	add.w	r1, r7, #20
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2202      	movs	r2, #2
 8007674:	2002      	movs	r0, #2
 8007676:	f002 f81d 	bl	80096b4 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 800767a:	f002 f80f 	bl	800969c <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d118      	bne.n	80076b6 <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	785a      	ldrb	r2, [r3, #1]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	3301      	adds	r3, #1
 800769a:	7dfa      	ldrb	r2, [r7, #23]
 800769c:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	789b      	ldrb	r3, [r3, #2]
 80076a2:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	3302      	adds	r3, #2
 80076a8:	69ba      	ldr	r2, [r7, #24]
 80076aa:	78d2      	ldrb	r2, [r2, #3]
 80076ac:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	3303      	adds	r3, #3
 80076b2:	7dfa      	ldrb	r2, [r7, #23]
 80076b4:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	4603      	mov	r3, r0
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d118      	bne.n	8007706 <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	785a      	ldrb	r2, [r3, #1]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	7efa      	ldrb	r2, [r7, #27]
 80076ec:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	789b      	ldrb	r3, [r3, #2]
 80076f2:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	3302      	adds	r3, #2
 80076f8:	69fa      	ldr	r2, [r7, #28]
 80076fa:	78d2      	ldrb	r2, [r2, #3]
 80076fc:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	3303      	adds	r3, #3
 8007702:	7efa      	ldrb	r2, [r7, #27]
 8007704:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	b29b      	uxth	r3, r3
 800770a:	031b      	lsls	r3, r3, #12
 800770c:	b29a      	uxth	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	b29b      	uxth	r3, r3
 8007714:	4313      	orrs	r3, r2
 8007716:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007718:	8b3b      	ldrh	r3, [r7, #24]
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	b29b      	uxth	r3, r3
 800771e:	b2db      	uxtb	r3, r3
 8007720:	753b      	strb	r3, [r7, #20]
 8007722:	8b3b      	ldrh	r3, [r7, #24]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007728:	f001 ffac 	bl	8009684 <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	b29b      	uxth	r3, r3
 8007730:	f107 0114 	add.w	r1, r7, #20
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2202      	movs	r2, #2
 800773a:	2001      	movs	r0, #1
 800773c:	f001 ffba 	bl	80096b4 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007740:	f001 ffac 	bl	800969c <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8007756:	f001 ff6f 	bl	8009638 <sl_wfx_host_init_bus>
 800775a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d12b      	bne.n	80077ba <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8007762:	f001 f8fb 	bl	800895c <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007766:	463b      	mov	r3, r7
 8007768:	4619      	mov	r1, r3
 800776a:	2000      	movs	r0, #0
 800776c:	f7ff fe02 	bl	8007374 <sl_wfx_reg_read_32>
 8007770:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d120      	bne.n	80077ba <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <sl_wfx_init_bus+0x36>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d104      	bne.n	8007790 <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8007786:	2301      	movs	r3, #1
 8007788:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d114      	bne.n	80077ba <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007796:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800779e:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <sl_wfx_init_bus+0x74>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2000      	movs	r0, #0
 80077ae:	f7ff fdfb 	bl	80073a8 <sl_wfx_reg_write_32>
 80077b2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0

  error_handler:
 80077b8:	bf00      	nop
  return status;
 80077ba:	687b      	ldr	r3, [r7, #4]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	04045400 	.word	0x04045400

080077c8 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 80077cc:	f001 ff4c 	bl	8009668 <sl_wfx_host_deinit_bus>
 80077d0:	4603      	mov	r3, r0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <uint16_identity>:
{
 80077d6:	b480      	push	{r7}
 80077d8:	b083      	sub	sp, #12
 80077da:	af00      	add	r7, sp, #0
 80077dc:	4603      	mov	r3, r0
 80077de:	80fb      	strh	r3, [r7, #6]
  return x;
 80077e0:	88fb      	ldrh	r3, [r7, #6]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <uint32_identity>:
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  return x;
 80077f6:	687b      	ldr	r3, [r7, #4]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007804:	b590      	push	{r4, r7, lr}
 8007806:	b089      	sub	sp, #36	; 0x24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 800780c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f014 fc72 	bl	801c0fc <memset>

  sl_wfx_context = context;
 8007818:	4a5f      	ldr	r2, [pc, #380]	; (8007998 <sl_wfx_init+0x194>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 800781e:	4b5e      	ldr	r3, [pc, #376]	; (8007998 <sl_wfx_init+0x194>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2200      	movs	r2, #0
 8007824:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  result = sl_wfx_init_bus(  );
 8007828:	f7ff ff92 	bl	8007750 <sl_wfx_init_bus>
 800782c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2b00      	cmp	r3, #0
 8007832:	f040 80a2 	bne.w	800797a <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8007836:	f000 fbf3 	bl	8008020 <sl_wfx_init_chip>
 800783a:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f040 809b 	bne.w	800797a <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8007844:	f000 fc80 	bl	8008148 <sl_wfx_download_run_bootloader>
 8007848:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 8094 	bne.w	800797a <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8007852:	20e1      	movs	r0, #225	; 0xe1
 8007854:	f001 f8da 	bl	8008a0c <sl_wfx_host_setup_waited_event>
 8007858:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 808c 	bne.w	800797a <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8007862:	f000 fcb9 	bl	80081d8 <sl_wfx_download_run_firmware>
 8007866:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	f040 8085 	bne.w	800797a <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007870:	f000 fb72 	bl	8007f58 <sl_wfx_enable_irq>
 8007874:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d17e      	bne.n	800797a <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 800787c:	f000 fbb4 	bl	8007fe8 <sl_wfx_set_access_mode_message>
 8007880:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d178      	bne.n	800797a <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007888:	f107 0314 	add.w	r3, r7, #20
 800788c:	461a      	mov	r2, r3
 800788e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007892:	20e1      	movs	r0, #225	; 0xe1
 8007894:	f001 f8cc 	bl	8008a30 <sl_wfx_host_wait_for_confirmation>
 8007898:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d16c      	bne.n	800797a <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  context->firmware_major = startup_info->body.firmware_major;
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f203 2016 	addw	r0, r3, #534	; 0x216
         startup_info->body.mac_addr[0],
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	3326      	adds	r3, #38	; 0x26
  memcpy(&(context->mac_addr_0.octet),
 80078ce:	2206      	movs	r2, #6
 80078d0:	4619      	mov	r1, r3
 80078d2:	f014 fcd0 	bl	801c276 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f503 7007 	add.w	r0, r3, #540	; 0x21c
         startup_info->body.mac_addr[1],
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	332c      	adds	r3, #44	; 0x2c
  memcpy(&(context->mac_addr_1.octet),
 80078e0:	2206      	movs	r2, #6
 80078e2:	4619      	mov	r1, r3
 80078e4:	f014 fcc7 	bl	801c276 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	8c1b      	ldrh	r3, [r3, #32]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7ff ff71 	bl	80077d6 <uint16_identity>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	4b28      	ldr	r3, [pc, #160]	; (800799c <sl_wfx_init+0x198>)
 80078fa:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	330a      	adds	r3, #10
 8007906:	220e      	movs	r2, #14
 8007908:	4619      	mov	r1, r3
 800790a:	f014 fcb4 	bl	801c276 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 800790e:	2001      	movs	r0, #1
 8007910:	f001 f83c 	bl	800898c <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007914:	f107 0312 	add.w	r3, r7, #18
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fff7 	bl	800890c <sl_wfx_host_get_pds_size>
 800791e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d129      	bne.n	800797a <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8007926:	2300      	movs	r3, #0
 8007928:	76fb      	strb	r3, [r7, #27]
 800792a:	e01c      	b.n	8007966 <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 800792c:	7efb      	ldrb	r3, [r7, #27]
 800792e:	b29a      	uxth	r2, r3
 8007930:	f107 030c 	add.w	r3, r7, #12
 8007934:	4611      	mov	r1, r2
 8007936:	4618      	mov	r0, r3
 8007938:	f000 ffbc 	bl	80088b4 <sl_wfx_host_get_pds_data>
 800793c:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007944:	68fc      	ldr	r4, [r7, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4618      	mov	r0, r3
 800794a:	f7f8 fca9 	bl	80002a0 <strlen>
 800794e:	4603      	mov	r3, r0
 8007950:	4619      	mov	r1, r3
 8007952:	4620      	mov	r0, r4
 8007954:	f000 f950 	bl	8007bf8 <sl_wfx_send_configuration>
 8007958:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10c      	bne.n	800797a <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007960:	7efb      	ldrb	r3, [r7, #27]
 8007962:	3301      	adds	r3, #1
 8007964:	76fb      	strb	r3, [r7, #27]
 8007966:	7efb      	ldrb	r3, [r7, #27]
 8007968:	b29a      	uxth	r2, r3
 800796a:	8a7b      	ldrh	r3, [r7, #18]
 800796c:	429a      	cmp	r2, r3
 800796e:	d3dd      	bcc.n	800792c <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007970:	4b09      	ldr	r3, [pc, #36]	; (8007998 <sl_wfx_init+0x194>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8007980:	f000 fb0e 	bl	8007fa0 <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007984:	f7ff ff20 	bl	80077c8 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8007988:	f000 ffe0 	bl	800894c <sl_wfx_host_deinit>
  }

  return result;
 800798c:	69fb      	ldr	r3, [r7, #28]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3724      	adds	r7, #36	; 0x24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}
 8007996:	bf00      	nop
 8007998:	200009fc 	.word	0x200009fc
 800799c:	20000a02 	.word	0x20000a02

080079a0 <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 80079be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80079c2:	3301      	adds	r3, #1
 80079c4:	f023 0301 	bic.w	r3, r3, #1
 80079c8:	3378      	adds	r3, #120	; 0x78
 80079ca:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 80079cc:	f107 0018 	add.w	r0, r7, #24
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	2202      	movs	r2, #2
 80079d4:	2143      	movs	r1, #67	; 0x43
 80079d6:	f000 fed7 	bl	8008788 <sl_wfx_allocate_command_buffer>
 80079da:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f040 8092 	bne.w	8007b08 <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	2200      	movs	r2, #0
 80079e8:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	3304      	adds	r3, #4
 80079ee:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 80079f0:	68b8      	ldr	r0, [r7, #8]
 80079f2:	f7ff fefc 	bl	80077ee <uint32_identity>
 80079f6:	4602      	mov	r2, r0
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 80079fc:	887b      	ldrh	r3, [r7, #2]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fee9 	bl	80077d6 <uint16_identity>
 8007a04:	4603      	mov	r3, r0
 8007a06:	461a      	mov	r2, r3
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  connect_request->security_mode         = security_mode;
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007a12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007a1c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007a20:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007a24:	2b06      	cmp	r3, #6
 8007a26:	d109      	bne.n	8007a3c <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f042 0202 	orr.w	r2, r2, #2
 8007a30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007a3a:	e007      	b.n	8007a4c <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007a3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fec9 	bl	80077d6 <uint16_identity>
 8007a44:	4603      	mov	r3, r0
 8007a46:	461a      	mov	r2, r3
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fec0 	bl	80077d6 <uint16_identity>
 8007a56:	4603      	mov	r3, r0
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	861a      	strh	r2, [r3, #48]	; 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007a5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff feb7 	bl	80077d6 <uint16_identity>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6a3b      	ldr	r3, [r7, #32]
 8007a6e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	3304      	adds	r3, #4
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	68f9      	ldr	r1, [r7, #12]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f014 fbfb 	bl	801c276 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	3332      	adds	r3, #50	; 0x32
 8007a84:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f014 fbf3 	bl	801c276 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	3374      	adds	r3, #116	; 0x74
 8007a94:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f014 fbeb 	bl	801c276 <memcpy>
  if (bssid != NULL) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	3324      	adds	r3, #36	; 0x24
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	2206      	movs	r2, #6
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f014 fbe1 	bl	801c276 <memcpy>
 8007ab4:	e006      	b.n	8007ac4 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	2206      	movs	r2, #6
 8007abc:	21ff      	movs	r1, #255	; 0xff
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f014 fb1c 	bl	801c0fc <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	b292      	uxth	r2, r2
 8007aca:	4619      	mov	r1, r3
 8007acc:	2043      	movs	r0, #67	; 0x43
 8007ace:	f000 f90b 	bl	8007ce8 <sl_wfx_send_request>
 8007ad2:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d116      	bne.n	8007b08 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007ada:	f107 0314 	add.w	r3, r7, #20
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ae4:	2043      	movs	r0, #67	; 0x43
 8007ae6:	f000 ffa3 	bl	8008a30 <sl_wfx_host_wait_for_confirmation>
 8007aea:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fe79 	bl	80077ee <uint32_identity>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2143      	movs	r1, #67	; 0x43
 8007b00:	4618      	mov	r0, r3
 8007b02:	f000 fd61 	bl	80085c8 <sl_wfx_get_status_code>
 8007b06:	6278      	str	r0, [r7, #36]	; 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	2b07      	cmp	r3, #7
 8007b0c:	d10d      	bne.n	8007b2a <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 8007b0e:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <sl_wfx_send_join_command+0x1a8>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 8007b1a:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <sl_wfx_send_join_command+0x1a8>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007b22:	3a01      	subs	r2, #1
 8007b24:	b292      	uxth	r2, r2
 8007b26:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d005      	beq.n	8007b3c <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2202      	movs	r2, #2
 8007b34:	2143      	movs	r1, #67	; 0x43
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fe44 	bl	80087c4 <sl_wfx_free_command_buffer>
  }
  return result;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	; 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200009fc 	.word	0x200009fc

08007b4c <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4611      	mov	r1, r2
 8007b58:	461a      	mov	r2, r3
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	71fb      	strb	r3, [r7, #7]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3301      	adds	r3, #1
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8007b6e:	4b21      	ldr	r3, [pc, #132]	; (8007bf4 <sl_wfx_send_ethernet_frame+0xa8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8007b76:	3201      	adds	r2, #1
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	330c      	adds	r3, #12
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fe25 	bl	80077d6 <uint16_identity>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	461a      	mov	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	224a      	movs	r2, #74	; 0x4a
 8007b98:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	005b      	lsls	r3, r3, #1
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0306 	and.w	r3, r3, #6
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2208      	movs	r2, #8
 8007bae:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	79ba      	ldrb	r2, [r7, #6]
 8007bb4:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <sl_wfx_send_ethernet_frame+0xa8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fe09 	bl	80077d6 <uint16_identity>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007bcc:	68b8      	ldr	r0, [r7, #8]
 8007bce:	f7ff fe0e 	bl	80077ee <uint32_identity>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	68f9      	ldr	r1, [r7, #12]
 8007be0:	204a      	movs	r0, #74	; 0x4a
 8007be2:	f000 f881 	bl	8007ce8 <sl_wfx_send_request>
 8007be6:	6138      	str	r0, [r7, #16]

  return result;
 8007be8:	693b      	ldr	r3, [r7, #16]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	200009fc 	.word	0x200009fc

08007bf8 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	3306      	adds	r3, #6
 8007c1c:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007c1e:	f107 0010 	add.w	r0, r7, #16
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2202      	movs	r2, #2
 8007c26:	2109      	movs	r1, #9
 8007c28:	f000 fdae 	bl	8008788 <sl_wfx_allocate_command_buffer>
 8007c2c:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d137      	bne.n	8007ca4 <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2200      	movs	r2, #0
 8007c38:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fdc6 	bl	80077d6 <uint16_identity>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	3302      	adds	r3, #2
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	6879      	ldr	r1, [r7, #4]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f014 fb0b 	bl	801c276 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	b292      	uxth	r2, r2
 8007c66:	4619      	mov	r1, r3
 8007c68:	2009      	movs	r0, #9
 8007c6a:	f000 f83d 	bl	8007ce8 <sl_wfx_send_request>
 8007c6e:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d116      	bne.n	8007ca4 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c80:	2009      	movs	r0, #9
 8007c82:	f000 fed5 	bl	8008a30 <sl_wfx_host_wait_for_confirmation>
 8007c86:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4618      	mov	r0, r3
 8007c94:	f7ff fdab 	bl	80077ee <uint32_identity>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2109      	movs	r1, #9
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fc93 	bl	80085c8 <sl_wfx_get_status_code>
 8007ca2:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	2b07      	cmp	r3, #7
 8007ca8:	d10d      	bne.n	8007cc6 <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 8007caa:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <sl_wfx_send_configuration+0xec>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <sl_wfx_send_configuration+0xec>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007cbe:	3a01      	subs	r2, #1
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	2109      	movs	r1, #9
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fd76 	bl	80087c4 <sl_wfx_free_command_buffer>
  }
  return result;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3720      	adds	r7, #32
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	200009fc 	.word	0x200009fc

08007ce8 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	6039      	str	r1, [r7, #0]
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8007cf8:	f001 f84a 	bl	8008d90 <sl_wfx_host_lock>
 8007cfc:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 8007d04:	68f9      	ldr	r1, [r7, #12]
 8007d06:	482f      	ldr	r0, [pc, #188]	; (8007dc4 <sl_wfx_send_request+0xdc>)
 8007d08:	f001 f830 	bl	8008d6c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	e054      	b.n	8007dba <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 8007d10:	4b2d      	ldr	r3, [pc, #180]	; (8007dc8 <sl_wfx_send_request+0xe0>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007d18:	4b2c      	ldr	r3, [pc, #176]	; (8007dcc <sl_wfx_send_request+0xe4>)
 8007d1a:	881b      	ldrh	r3, [r3, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d304      	bcc.n	8007d2a <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 8007d20:	231d      	movs	r3, #29
 8007d22:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d137      	bne.n	8007d9a <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 8007d30:	88bb      	ldrh	r3, [r7, #4]
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fd4f 	bl	80077d6 <uint16_identity>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 8007d40:	79fb      	ldrb	r3, [r7, #7]
 8007d42:	2b4a      	cmp	r3, #74	; 0x4a
 8007d44:	d00a      	beq.n	8007d5c <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b32      	cmp	r3, #50	; 0x32
 8007d4a:	d007      	beq.n	8007d5c <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8007d4c:	79fb      	ldrb	r3, [r7, #7]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fe5c 	bl	8008a0c <sl_wfx_host_setup_waited_event>
 8007d54:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d11e      	bne.n	8007d9a <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d003      	beq.n	8007d6a <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	481a      	ldr	r0, [pc, #104]	; (8007dd0 <sl_wfx_send_request+0xe8>)
 8007d66:	f001 f801 	bl	8008d6c <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 8007d6a:	88bb      	ldrh	r3, [r7, #4]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6838      	ldr	r0, [r7, #0]
 8007d70:	f000 ffee 	bl	8008d50 <sl_wfx_host_transmit_frame>
 8007d74:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10e      	bne.n	8007d9a <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007d82:	68f9      	ldr	r1, [r7, #12]
 8007d84:	4812      	ldr	r0, [pc, #72]	; (8007dd0 <sl_wfx_send_request+0xe8>)
 8007d86:	f000 fff1 	bl	8008d6c <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 8007d8a:	4b0f      	ldr	r3, [pc, #60]	; (8007dc8 <sl_wfx_send_request+0xe0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007d92:	3201      	adds	r2, #1
 8007d94:	b292      	uxth	r2, r2
 8007d96:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 8007d9a:	f001 f819 	bl	8008dd0 <sl_wfx_host_unlock>
 8007d9e:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <sl_wfx_send_request+0xc2>
    result = unlock_result;
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 8007db0:	68f9      	ldr	r1, [r7, #12]
 8007db2:	4807      	ldr	r0, [pc, #28]	; (8007dd0 <sl_wfx_send_request+0xe8>)
 8007db4:	f000 ffda 	bl	8008d6c <sl_wfx_host_log>
  }
#endif
  return result;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0801eb00 	.word	0x0801eb00
 8007dc8:	200009fc 	.word	0x200009fc
 8007dcc:	20000a02 	.word	0x20000a02
 8007dd0:	0801eb1c 	.word	0x0801eb1c

08007dd4 <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 8007dd4:	b590      	push	{r4, r7, lr}
 8007dd6:	b08b      	sub	sp, #44	; 0x2c
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 8007de6:	f000 ffd3 	bl	8008d90 <sl_wfx_host_lock>
 8007dea:	6278      	str	r0, [r7, #36]	; 0x24

  if (result != SL_STATUS_OK) {
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 8007df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007df4:	4855      	ldr	r0, [pc, #340]	; (8007f4c <sl_wfx_receive_frame+0x178>)
 8007df6:	f000 ffb9 	bl	8008d6c <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	e0a2      	b.n	8007f44 <sl_wfx_receive_frame+0x170>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d116      	bne.n	8007e3e <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	2001      	movs	r0, #1
 8007e14:	f7ff fa71 	bl	80072fa <sl_wfx_reg_read_16>
 8007e18:	6278      	str	r0, [r7, #36]	; 0x24
    SL_WFX_ERROR_CHECK(result);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d175      	bne.n	8007f0c <sl_wfx_receive_frame+0x138>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e28:	005b      	lsls	r3, r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d105      	bne.n	8007e3e <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 8007e32:	f640 3305 	movw	r3, #2821	; 0xb05
 8007e36:	627b      	str	r3, [r7, #36]	; 0x24
      SL_WFX_ERROR_CHECK(result);
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d166      	bne.n	8007f0c <sl_wfx_receive_frame+0x138>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	0b9b      	lsrs	r3, r3, #14
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	3302      	adds	r3, #2
 8007e4c:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 8007e4e:	7efb      	ldrb	r3, [r7, #27]
 8007e50:	2b03      	cmp	r3, #3
 8007e52:	d101      	bne.n	8007e58 <sl_wfx_receive_frame+0x84>
 8007e54:	2301      	movs	r3, #1
 8007e56:	e000      	b.n	8007e5a <sl_wfx_receive_frame+0x86>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d004      	beq.n	8007e72 <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 8007e6e:	3340      	adds	r3, #64	; 0x40
 8007e70:	e000      	b.n	8007e74 <sl_wfx_receive_frame+0xa0>
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8007e78:	f107 000c 	add.w	r0, r7, #12
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f000 ff47 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 8007e82:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d140      	bne.n	8007f0c <sl_wfx_receive_frame+0x138>

  memset(network_rx_buffer, 0, read_length);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	4618      	mov	r0, r3
 8007e92:	f014 f933 	bl	801c0fc <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6979      	ldr	r1, [r7, #20]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fa9b 	bl	80073d6 <sl_wfx_data_read>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d131      	bne.n	8007f0c <sl_wfx_receive_frame+0x138>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <sl_wfx_receive_frame+0x17c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00c      	beq.n	8007ece <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	789b      	ldrb	r3, [r3, #2]
 8007eb8:	b25b      	sxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db07      	blt.n	8007ece <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 8007ebe:	4b24      	ldr	r3, [pc, #144]	; (8007f50 <sl_wfx_receive_frame+0x17c>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007ec6:	3a01      	subs	r2, #1
 8007ec8:	b292      	uxth	r2, r2
 8007eca:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68f9      	ldr	r1, [r7, #12]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	3301      	adds	r3, #1
 8007ede:	440b      	add	r3, r1
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	68fc      	ldr	r4, [r7, #12]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fc6c 	bl	80077d6 <uint16_identity>
 8007efe:	4603      	mov	r3, r0
 8007f00:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fdd3 	bl	8008ab0 <sl_wfx_host_post_event>
 8007f0a:	6278      	str	r0, [r7, #36]	; 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <sl_wfx_receive_frame+0x150>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	789b      	ldrb	r3, [r3, #2]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f000 fc50 	bl	80087c4 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 8007f24:	f000 ff54 	bl	8008dd0 <sl_wfx_host_unlock>
 8007f28:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <sl_wfx_receive_frame+0x160>
    result = unlock_result;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <sl_wfx_receive_frame+0x16e>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 8007f3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f3c:	4805      	ldr	r0, [pc, #20]	; (8007f54 <sl_wfx_receive_frame+0x180>)
 8007f3e:	f000 ff15 	bl	8008d6c <sl_wfx_host_log>
  }
#endif
  return result;
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	372c      	adds	r7, #44	; 0x2c
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd90      	pop	{r4, r7, pc}
 8007f4c:	0801eb34 	.word	0x0801eb34
 8007f50:	200009fc 	.word	0x200009fc
 8007f54:	0801eb54 	.word	0x0801eb54

08007f58 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 8007f5e:	f001 fc01 	bl	8009764 <sl_wfx_host_enable_platform_interrupt>
 8007f62:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d115      	bne.n	8007f96 <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007f6a:	463b      	mov	r3, r7
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f7ff fa00 	bl	8007374 <sl_wfx_reg_read_32>
 8007f74:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d10c      	bne.n	8007f96 <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f82:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	4619      	mov	r1, r3
 8007f88:	2000      	movs	r0, #0
 8007f8a:	f7ff fa0d 	bl	80073a8 <sl_wfx_reg_write_32>
 8007f8e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0

  error_handler:
 8007f94:	bf00      	nop
  return result;
 8007f96:	687b      	ldr	r3, [r7, #4]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007fa6:	463b      	mov	r3, r7
 8007fa8:	4619      	mov	r1, r3
 8007faa:	2000      	movs	r0, #0
 8007fac:	f7ff f9e2 	bl	8007374 <sl_wfx_reg_read_32>
 8007fb0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d112      	bne.n	8007fde <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fbe:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	f7ff f9ef 	bl	80073a8 <sl_wfx_reg_write_32>
 8007fca:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d105      	bne.n	8007fde <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 8007fd2:	f001 fbd4 	bl	800977e <sl_wfx_host_disable_platform_interrupt>
 8007fd6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0

  error_handler:
 8007fdc:	bf00      	nop
  return result;
 8007fde:	687b      	ldr	r3, [r7, #4]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 8007fee:	463b      	mov	r3, r7
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f7ff f9be 	bl	8007374 <sl_wfx_reg_read_32>
 8007ff8:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10a      	bne.n	8008016 <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008006:	4619      	mov	r1, r3
 8008008:	2000      	movs	r0, #0
 800800a:	f7ff f9cd 	bl	80073a8 <sl_wfx_reg_write_32>
 800800e:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0

  error_handler:
 8008014:	bf00      	nop
  return result;
 8008016:	687b      	ldr	r3, [r7, #4]
}
 8008018:	4618      	mov	r0, r3
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	4619      	mov	r1, r3
 800802a:	2000      	movs	r0, #0
 800802c:	f7ff f9a2 	bl	8007374 <sl_wfx_reg_read_32>
 8008030:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d177      	bne.n	8008128 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 8008038:	493e      	ldr	r1, [pc, #248]	; (8008134 <sl_wfx_init_chip+0x114>)
 800803a:	2006      	movs	r0, #6
 800803c:	f7ff f9b4 	bl	80073a8 <sl_wfx_reg_write_32>
 8008040:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d16f      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8008048:	493b      	ldr	r1, [pc, #236]	; (8008138 <sl_wfx_init_chip+0x118>)
 800804a:	2006      	movs	r0, #6
 800804c:	f7ff f9ac 	bl	80073a8 <sl_wfx_reg_write_32>
 8008050:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d167      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 8008058:	4938      	ldr	r1, [pc, #224]	; (800813c <sl_wfx_init_chip+0x11c>)
 800805a:	2006      	movs	r0, #6
 800805c:	f7ff f9a4 	bl	80073a8 <sl_wfx_reg_write_32>
 8008060:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d15f      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 8008068:	4935      	ldr	r1, [pc, #212]	; (8008140 <sl_wfx_init_chip+0x120>)
 800806a:	2006      	movs	r0, #6
 800806c:	f7ff f99c 	bl	80073a8 <sl_wfx_reg_write_32>
 8008070:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d157      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 8008078:	4932      	ldr	r1, [pc, #200]	; (8008144 <sl_wfx_init_chip+0x124>)
 800807a:	2006      	movs	r0, #6
 800807c:	f7ff f994 	bl	80073a8 <sl_wfx_reg_write_32>
 8008080:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d14f      	bne.n	8008128 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8008088:	1cbb      	adds	r3, r7, #2
 800808a:	4619      	mov	r1, r3
 800808c:	2001      	movs	r0, #1
 800808e:	f7ff f934 	bl	80072fa <sl_wfx_reg_read_16>
 8008092:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d146      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 800809a:	887b      	ldrh	r3, [r7, #2]
 800809c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 80080a4:	887b      	ldrh	r3, [r7, #2]
 80080a6:	4619      	mov	r1, r3
 80080a8:	2001      	movs	r0, #1
 80080aa:	f7ff f943 	bl	8007334 <sl_wfx_reg_write_16>
 80080ae:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d138      	bne.n	8008128 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 80080b6:	2300      	movs	r3, #0
 80080b8:	60bb      	str	r3, [r7, #8]
 80080ba:	e013      	b.n	80080e4 <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 80080bc:	1cbb      	adds	r3, r7, #2
 80080be:	4619      	mov	r1, r3
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7ff f91a 	bl	80072fa <sl_wfx_reg_read_16>
 80080c6:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d12c      	bne.n	8008128 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 80080ce:	887b      	ldrh	r3, [r7, #2]
 80080d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d109      	bne.n	80080ec <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 80080d8:	2001      	movs	r0, #1
 80080da:	f000 fcdd 	bl	8008a98 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60bb      	str	r3, [r7, #8]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2bc7      	cmp	r3, #199	; 0xc7
 80080e8:	d9e8      	bls.n	80080bc <sl_wfx_init_chip+0x9c>
 80080ea:	e000      	b.n	80080ee <sl_wfx_init_chip+0xce>
      break;
 80080ec:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d104      	bne.n	8008102 <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 80080f8:	2307      	movs	r3, #7
 80080fa:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d112      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008102:	1d3b      	adds	r3, r7, #4
 8008104:	4619      	mov	r1, r3
 8008106:	2000      	movs	r0, #0
 8008108:	f7ff f934 	bl	8007374 <sl_wfx_reg_read_32>
 800810c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d109      	bne.n	8008128 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 800811e:	2301      	movs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
  }

  error_handler:
 8008126:	bf00      	nop
  return result;
 8008128:	68fb      	ldr	r3, [r7, #12]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	07208775 	.word	0x07208775
 8008138:	082ec020 	.word	0x082ec020
 800813c:	093c3c3c 	.word	0x093c3c3c
 8008140:	0b322c44 	.word	0x0b322c44
 8008144:	0ca06497 	.word	0x0ca06497

08008148 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800814e:	463b      	mov	r3, r7
 8008150:	4619      	mov	r1, r3
 8008152:	481e      	ldr	r0, [pc, #120]	; (80081cc <sl_wfx_download_run_bootloader+0x84>)
 8008154:	f7ff f998 	bl	8007488 <sl_wfx_apb_read_32>
 8008158:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d12f      	bne.n	80081c0 <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008160:	463b      	mov	r3, r7
 8008162:	4619      	mov	r1, r3
 8008164:	2000      	movs	r0, #0
 8008166:	f7ff f905 	bl	8007374 <sl_wfx_reg_read_32>
 800816a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d126      	bne.n	80081c0 <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 8008178:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	2000      	movs	r0, #0
 8008180:	f7ff f912 	bl	80073a8 <sl_wfx_reg_write_32>
 8008184:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d119      	bne.n	80081c0 <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 800818c:	4910      	ldr	r1, [pc, #64]	; (80081d0 <sl_wfx_download_run_bootloader+0x88>)
 800818e:	4811      	ldr	r0, [pc, #68]	; (80081d4 <sl_wfx_download_run_bootloader+0x8c>)
 8008190:	f7ff f963 	bl	800745a <sl_wfx_apb_write_32>
 8008194:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d111      	bne.n	80081c0 <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 800819c:	463b      	mov	r3, r7
 800819e:	4619      	mov	r1, r3
 80081a0:	480c      	ldr	r0, [pc, #48]	; (80081d4 <sl_wfx_download_run_bootloader+0x8c>)
 80081a2:	f7ff f971 	bl	8007488 <sl_wfx_apb_read_32>
 80081a6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d108      	bne.n	80081c0 <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <sl_wfx_download_run_bootloader+0x88>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d003      	beq.n	80081be <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 80081b6:	2301      	movs	r3, #1
 80081b8:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
  }

  error_handler:
 80081be:	bf00      	nop
  return result;
 80081c0:	687b      	ldr	r3, [r7, #4]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	0900c010 	.word	0x0900c010
 80081d0:	23abc88e 	.word	0x23abc88e
 80081d4:	09004000 	.word	0x09004000

080081d8 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b08c      	sub	sp, #48	; 0x30
 80081dc:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 80081e2:	2300      	movs	r3, #0
 80081e4:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 80081e6:	f000 faff 	bl	80087e8 <sl_wfx_host_init>
 80081ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f040 8185 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 80081f4:	4984      	ldr	r1, [pc, #528]	; (8008408 <sl_wfx_download_run_firmware+0x230>)
 80081f6:	4885      	ldr	r0, [pc, #532]	; (800840c <sl_wfx_download_run_firmware+0x234>)
 80081f8:	f7ff f92f 	bl	800745a <sl_wfx_apb_write_32>
 80081fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 817c 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 8008206:	2100      	movs	r1, #0
 8008208:	4881      	ldr	r0, [pc, #516]	; (8008410 <sl_wfx_download_run_firmware+0x238>)
 800820a:	f7ff f926 	bl	800745a <sl_wfx_apb_write_32>
 800820e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 8173 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 8008218:	2100      	movs	r1, #0
 800821a:	487e      	ldr	r0, [pc, #504]	; (8008414 <sl_wfx_download_run_firmware+0x23c>)
 800821c:	f7ff f91d 	bl	800745a <sl_wfx_apb_write_32>
 8008220:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 816a 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 800822a:	497b      	ldr	r1, [pc, #492]	; (8008418 <sl_wfx_download_run_firmware+0x240>)
 800822c:	4877      	ldr	r0, [pc, #476]	; (800840c <sl_wfx_download_run_firmware+0x234>)
 800822e:	f7ff f914 	bl	800745a <sl_wfx_apb_write_32>
 8008232:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 8161 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 800823c:	2264      	movs	r2, #100	; 0x64
 800823e:	4977      	ldr	r1, [pc, #476]	; (800841c <sl_wfx_download_run_firmware+0x244>)
 8008240:	4877      	ldr	r0, [pc, #476]	; (8008420 <sl_wfx_download_run_firmware+0x248>)
 8008242:	f000 f96b 	bl	800851c <sl_wfx_poll_for_value>
 8008246:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	f040 8157 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 8008250:	f107 0310 	add.w	r3, r7, #16
 8008254:	4619      	mov	r1, r3
 8008256:	4873      	ldr	r0, [pc, #460]	; (8008424 <sl_wfx_download_run_firmware+0x24c>)
 8008258:	f7ff f916 	bl	8007488 <sl_wfx_apb_read_32>
 800825c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	2b00      	cmp	r3, #0
 8008262:	f040 814c 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 8008266:	f107 0310 	add.w	r3, r7, #16
 800826a:	4619      	mov	r1, r3
 800826c:	486e      	ldr	r0, [pc, #440]	; (8008428 <sl_wfx_download_run_firmware+0x250>)
 800826e:	f7ff f90b 	bl	8007488 <sl_wfx_apb_read_32>
 8008272:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	f040 8141 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	b2da      	uxtb	r2, r3
 8008282:	4b6a      	ldr	r3, [pc, #424]	; (800842c <sl_wfx_download_run_firmware+0x254>)
 8008284:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 8008286:	496a      	ldr	r1, [pc, #424]	; (8008430 <sl_wfx_download_run_firmware+0x258>)
 8008288:	4860      	ldr	r0, [pc, #384]	; (800840c <sl_wfx_download_run_firmware+0x234>)
 800828a:	f7ff f8e6 	bl	800745a <sl_wfx_apb_write_32>
 800828e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 8133 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 8008298:	2264      	movs	r2, #100	; 0x64
 800829a:	495f      	ldr	r1, [pc, #380]	; (8008418 <sl_wfx_download_run_firmware+0x240>)
 800829c:	4860      	ldr	r0, [pc, #384]	; (8008420 <sl_wfx_download_run_firmware+0x248>)
 800829e:	f000 f93d 	bl	800851c <sl_wfx_poll_for_value>
 80082a2:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	f040 8129 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 80082ac:	f04f 31ff 	mov.w	r1, #4294967295
 80082b0:	4860      	ldr	r0, [pc, #384]	; (8008434 <sl_wfx_download_run_firmware+0x25c>)
 80082b2:	f7ff f8d2 	bl	800745a <sl_wfx_apb_write_32>
 80082b6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 811f 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 fae5 	bl	8008894 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3b50      	subs	r3, #80	; 0x50
 80082ce:	4619      	mov	r1, r3
 80082d0:	4859      	ldr	r0, [pc, #356]	; (8008438 <sl_wfx_download_run_firmware+0x260>)
 80082d2:	f7ff f8c2 	bl	800745a <sl_wfx_apb_write_32>
 80082d6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f040 810f 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	2108      	movs	r1, #8
 80082e4:	4618      	mov	r0, r3
 80082e6:	f000 fab9 	bl	800885c <sl_wfx_host_get_firmware_data>
 80082ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 8105 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 80082f4:	4b4d      	ldr	r3, [pc, #308]	; (800842c <sl_wfx_download_run_firmware+0x254>)
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	4611      	mov	r1, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f93c 	bl	800857a <sl_wfx_compare_keysets>
 8008302:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 80f9 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 800830c:	1d3b      	adds	r3, r7, #4
 800830e:	2140      	movs	r1, #64	; 0x40
 8008310:	4618      	mov	r0, r3
 8008312:	f000 faa3 	bl	800885c <sl_wfx_host_get_firmware_data>
 8008316:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	2b00      	cmp	r3, #0
 800831c:	f040 80ef 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2240      	movs	r2, #64	; 0x40
 8008324:	4619      	mov	r1, r3
 8008326:	4845      	ldr	r0, [pc, #276]	; (800843c <sl_wfx_download_run_firmware+0x264>)
 8008328:	f7ff f877 	bl	800741a <sl_wfx_apb_write>
 800832c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800832e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 80e4 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 8008336:	1d3b      	adds	r3, r7, #4
 8008338:	2108      	movs	r1, #8
 800833a:	4618      	mov	r0, r3
 800833c:	f000 fa8e 	bl	800885c <sl_wfx_host_get_firmware_data>
 8008340:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 80da 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2208      	movs	r2, #8
 800834e:	4619      	mov	r1, r3
 8008350:	483b      	ldr	r0, [pc, #236]	; (8008440 <sl_wfx_download_run_firmware+0x268>)
 8008352:	f7ff f862 	bl	800741a <sl_wfx_apb_write>
 8008356:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 80cf 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 8008360:	2101      	movs	r1, #1
 8008362:	4838      	ldr	r0, [pc, #224]	; (8008444 <sl_wfx_download_run_firmware+0x26c>)
 8008364:	f7ff f879 	bl	800745a <sl_wfx_apb_write_32>
 8008368:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800836a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f040 80c6 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 8008372:	4935      	ldr	r1, [pc, #212]	; (8008448 <sl_wfx_download_run_firmware+0x270>)
 8008374:	4825      	ldr	r0, [pc, #148]	; (800840c <sl_wfx_download_run_firmware+0x234>)
 8008376:	f7ff f870 	bl	800745a <sl_wfx_apb_write_32>
 800837a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	2b00      	cmp	r3, #0
 8008380:	f040 80bd 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3b50      	subs	r3, #80	; 0x50
 8008388:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3b01      	subs	r3, #1
 800838e:	0a9b      	lsrs	r3, r3, #10
 8008390:	3301      	adds	r3, #1
 8008392:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 8008394:	2300      	movs	r3, #0
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
 8008398:	e093      	b.n	80084c2 <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 800839a:	2300      	movs	r3, #0
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
 800839e:	e015      	b.n	80083cc <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	6a3a      	ldr	r2, [r7, #32]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80083aa:	d913      	bls.n	80083d4 <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	4619      	mov	r1, r3
 80083b6:	4817      	ldr	r0, [pc, #92]	; (8008414 <sl_wfx_download_run_firmware+0x23c>)
 80083b8:	f7ff f866 	bl	8007488 <sl_wfx_apb_read_32>
 80083bc:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	f040 809c 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	3301      	adds	r3, #1
 80083ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	2b63      	cmp	r3, #99	; 0x63
 80083d0:	d9e6      	bls.n	80083a0 <sl_wfx_download_run_firmware+0x1c8>
 80083d2:	e000      	b.n	80083d6 <sl_wfx_download_run_firmware+0x1fe>
        break;
 80083d4:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80083e0:	d93a      	bls.n	8008458 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 80083e2:	f107 0310 	add.w	r3, r7, #16
 80083e6:	4619      	mov	r1, r3
 80083e8:	480d      	ldr	r0, [pc, #52]	; (8008420 <sl_wfx_download_run_firmware+0x248>)
 80083ea:	f7ff f84d 	bl	8007488 <sl_wfx_apb_read_32>
 80083ee:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8083 	bne.w	80084fe <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	4a13      	ldr	r2, [pc, #76]	; (8008448 <sl_wfx_download_run_firmware+0x270>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d025      	beq.n	800844c <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 8008400:	2301      	movs	r3, #1
 8008402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008404:	e025      	b.n	8008452 <sl_wfx_download_run_firmware+0x27a>
 8008406:	bf00      	nop
 8008408:	12345678 	.word	0x12345678
 800840c:	0900c00c 	.word	0x0900c00c
 8008410:	0900c004 	.word	0x0900c004
 8008414:	0900c008 	.word	0x0900c008
 8008418:	87654321 	.word	0x87654321
 800841c:	bd53ef99 	.word	0xbd53ef99
 8008420:	0900c010 	.word	0x0900c010
 8008424:	0900c080 	.word	0x0900c080
 8008428:	0900c0cc 	.word	0x0900c0cc
 800842c:	20000a00 	.word	0x20000a00
 8008430:	a753bd99 	.word	0xa753bd99
 8008434:	09004000 	.word	0x09004000
 8008438:	0900c000 	.word	0x0900c000
 800843c:	0900c014 	.word	0x0900c014
 8008440:	0900c054 	.word	0x0900c054
 8008444:	0900c05c 	.word	0x0900c05c
 8008448:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 800844c:	f640 3302 	movw	r3, #2818	; 0xb02
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 8008452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d152      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008466:	d902      	bls.n	800846e <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 8008468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800846c:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 800846e:	1d3b      	adds	r3, r7, #4
 8008470:	69f9      	ldr	r1, [r7, #28]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f9f2 	bl	800885c <sl_wfx_host_get_firmware_data>
 8008478:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d13e      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008486:	f103 6310 	add.w	r3, r3, #150994944	; 0x9000000
 800848a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800848e:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69fa      	ldr	r2, [r7, #28]
 8008494:	4619      	mov	r1, r3
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f7fe ffbf 	bl	800741a <sl_wfx_apb_write>
 800849c:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 800849e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d12c      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 80084a4:	6a3a      	ldr	r2, [r7, #32]
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 80084ac:	6a39      	ldr	r1, [r7, #32]
 80084ae:	4816      	ldr	r0, [pc, #88]	; (8008508 <sl_wfx_download_run_firmware+0x330>)
 80084b0:	f7fe ffd3 	bl	800745a <sl_wfx_apb_write_32>
 80084b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d120      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	3301      	adds	r3, #1
 80084c0:	627b      	str	r3, [r7, #36]	; 0x24
 80084c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	f4ff af67 	bcc.w	800839a <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 80084cc:	490f      	ldr	r1, [pc, #60]	; (800850c <sl_wfx_download_run_firmware+0x334>)
 80084ce:	4810      	ldr	r0, [pc, #64]	; (8008510 <sl_wfx_download_run_firmware+0x338>)
 80084d0:	f7fe ffc3 	bl	800745a <sl_wfx_apb_write_32>
 80084d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d110      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 80084dc:	2264      	movs	r2, #100	; 0x64
 80084de:	490b      	ldr	r1, [pc, #44]	; (800850c <sl_wfx_download_run_firmware+0x334>)
 80084e0:	480c      	ldr	r0, [pc, #48]	; (8008514 <sl_wfx_download_run_firmware+0x33c>)
 80084e2:	f000 f81b 	bl	800851c <sl_wfx_poll_for_value>
 80084e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d107      	bne.n	80084fe <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 80084ee:	490a      	ldr	r1, [pc, #40]	; (8008518 <sl_wfx_download_run_firmware+0x340>)
 80084f0:	4807      	ldr	r0, [pc, #28]	; (8008510 <sl_wfx_download_run_firmware+0x338>)
 80084f2:	f7fe ffb2 	bl	800745a <sl_wfx_apb_write_32>
 80084f6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	2b00      	cmp	r3, #0

  error_handler:
 80084fc:	bf00      	nop
  return result;
 80084fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008500:	4618      	mov	r0, r3
 8008502:	3730      	adds	r7, #48	; 0x30
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	0900c004 	.word	0x0900c004
 800850c:	d4c64a99 	.word	0xd4c64a99
 8008510:	0900c00c 	.word	0x0900c00c
 8008514:	0900c010 	.word	0x0900c010
 8008518:	174fc882 	.word	0x174fc882

0800851c <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 800852c:	e013      	b.n	8008556 <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 800852e:	f107 0310 	add.w	r3, r7, #16
 8008532:	4619      	mov	r1, r3
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7fe ffa7 	bl	8007488 <sl_wfx_apb_read_32>
 800853a:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d116      	bne.n	8008570 <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d009      	beq.n	800855e <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 800854a:	2001      	movs	r0, #1
 800854c:	f000 faa4 	bl	8008a98 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3b01      	subs	r3, #1
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e8      	bne.n	800852e <sl_wfx_poll_for_value+0x12>
 800855c:	e000      	b.n	8008560 <sl_wfx_poll_for_value+0x44>
      break;
 800855e:	bf00      	nop
    }
  }
  if (value != polled_value) {
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	d002      	beq.n	800856e <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 8008568:	2307      	movs	r3, #7
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	e000      	b.n	8008570 <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 800856e:	bf00      	nop
  return result;
 8008570:	697b      	ldr	r3, [r7, #20]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	4603      	mov	r3, r0
 8008582:	6039      	str	r1, [r7, #0]
 8008584:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	799b      	ldrb	r3, [r3, #6]
 800858a:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	79db      	ldrb	r3, [r3, #7]
 8008590:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 8008592:	2300      	movs	r3, #0
 8008594:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	2210      	movs	r2, #16
 800859c:	2100      	movs	r1, #0
 800859e:	4618      	mov	r0, r3
 80085a0:	f012 ff10 	bl	801b3c4 <strtoul>
 80085a4:	4603      	mov	r3, r0
 80085a6:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 80085a8:	7afa      	ldrb	r2, [r7, #11]
 80085aa:	79fb      	ldrb	r3, [r7, #7]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d102      	bne.n	80085b6 <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	e002      	b.n	80085bc <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 80085b6:	f640 3301 	movw	r3, #2817	; 0xb01
 80085ba:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80085bc:	68fb      	ldr	r3, [r7, #12]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
	...

080085c8 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 80085d4:	78fb      	ldrb	r3, [r7, #3]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d05b      	beq.n	8008696 <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f241 2256 	movw	r2, #4694	; 0x1256
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d045      	beq.n	8008674 <sl_wfx_get_status_code+0xac>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f241 2256 	movw	r2, #4694	; 0x1256
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d84e      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f241 2234 	movw	r2, #4660	; 0x1234
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d038      	beq.n	800866e <sl_wfx_get_status_code+0xa6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f241 2234 	movw	r2, #4660	; 0x1234
 8008602:	4293      	cmp	r3, r2
 8008604:	d844      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2baf      	cmp	r3, #175	; 0xaf
 800860a:	d033      	beq.n	8008674 <sl_wfx_get_status_code+0xac>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2baf      	cmp	r3, #175	; 0xaf
 8008610:	d83e      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b9e      	cmp	r3, #158	; 0x9e
 8008616:	d02a      	beq.n	800866e <sl_wfx_get_status_code+0xa6>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b9e      	cmp	r3, #158	; 0x9e
 800861c:	d838      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b8d      	cmp	r3, #141	; 0x8d
 8008622:	d027      	beq.n	8008674 <sl_wfx_get_status_code+0xac>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b8d      	cmp	r3, #141	; 0x8d
 8008628:	d832      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b7c      	cmp	r3, #124	; 0x7c
 800862e:	d021      	beq.n	8008674 <sl_wfx_get_status_code+0xac>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b7c      	cmp	r3, #124	; 0x7c
 8008634:	d82c      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b6b      	cmp	r3, #107	; 0x6b
 800863a:	d01b      	beq.n	8008674 <sl_wfx_get_status_code+0xac>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2b6b      	cmp	r3, #107	; 0x6b
 8008640:	d826      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b04      	cmp	r3, #4
 8008646:	d80f      	bhi.n	8008668 <sl_wfx_get_status_code+0xa0>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b04      	cmp	r3, #4
 800864c:	d820      	bhi.n	8008690 <sl_wfx_get_status_code+0xc8>
 800864e:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <sl_wfx_get_status_code+0x8c>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	0800866f 	.word	0x0800866f
 8008658:	08008675 	.word	0x08008675
 800865c:	0800867b 	.word	0x0800867b
 8008660:	08008681 	.word	0x08008681
 8008664:	08008689 	.word	0x08008689
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b5a      	cmp	r3, #90	; 0x5a
 800866c:	d110      	bne.n	8008690 <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
        break;
 8008672:	e075      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 8008674:	2301      	movs	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
        break;
 8008678:	e072      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 800867a:	2321      	movs	r3, #33	; 0x21
 800867c:	60fb      	str	r3, [r7, #12]
        break;
 800867e:	e06f      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008680:	f640 3304 	movw	r3, #2820	; 0xb04
 8008684:	60fb      	str	r3, [r7, #12]
        break;
 8008686:	e06b      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 8008688:	f640 3303 	movw	r3, #2819	; 0xb03
 800868c:	60fb      	str	r3, [r7, #12]
        break;
 800868e:	e067      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008690:	2301      	movs	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
        break;
 8008694:	e064      	b.n	8008760 <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2b14      	cmp	r3, #20
 800869a:	d85e      	bhi.n	800875a <sl_wfx_get_status_code+0x192>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <sl_wfx_get_status_code+0xdc>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086f9 	.word	0x080086f9
 80086a8:	080086ff 	.word	0x080086ff
 80086ac:	08008705 	.word	0x08008705
 80086b0:	0800870d 	.word	0x0800870d
 80086b4:	08008713 	.word	0x08008713
 80086b8:	0800871b 	.word	0x0800871b
 80086bc:	08008723 	.word	0x08008723
 80086c0:	0800872b 	.word	0x0800872b
 80086c4:	08008733 	.word	0x08008733
 80086c8:	0800873b 	.word	0x0800873b
 80086cc:	08008743 	.word	0x08008743
 80086d0:	0800875b 	.word	0x0800875b
 80086d4:	0800875b 	.word	0x0800875b
 80086d8:	0800875b 	.word	0x0800875b
 80086dc:	0800875b 	.word	0x0800875b
 80086e0:	0800875b 	.word	0x0800875b
 80086e4:	0800875b 	.word	0x0800875b
 80086e8:	0800875b 	.word	0x0800875b
 80086ec:	0800875b 	.word	0x0800875b
 80086f0:	0800874b 	.word	0x0800874b
 80086f4:	08008753 	.word	0x08008753
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60fb      	str	r3, [r7, #12]
        break;
 80086fc:	e030      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 80086fe:	2321      	movs	r3, #33	; 0x21
 8008700:	60fb      	str	r3, [r7, #12]
        break;
 8008702:	e02d      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8008704:	f640 3318 	movw	r3, #2840	; 0xb18
 8008708:	60fb      	str	r3, [r7, #12]
        break;
 800870a:	e029      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 800870c:	2301      	movs	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]
        break;
 8008710:	e026      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8008712:	f640 3319 	movw	r3, #2841	; 0xb19
 8008716:	60fb      	str	r3, [r7, #12]
        break;
 8008718:	e022      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 800871a:	f640 3304 	movw	r3, #2820	; 0xb04
 800871e:	60fb      	str	r3, [r7, #12]
        break;
 8008720:	e01e      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8008722:	f640 331a 	movw	r3, #2842	; 0xb1a
 8008726:	60fb      	str	r3, [r7, #12]
        break;
 8008728:	e01a      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 800872a:	f640 331b 	movw	r3, #2843	; 0xb1b
 800872e:	60fb      	str	r3, [r7, #12]
        break;
 8008730:	e016      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8008732:	f640 331c 	movw	r3, #2844	; 0xb1c
 8008736:	60fb      	str	r3, [r7, #12]
        break;
 8008738:	e012      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 800873a:	f640 331d 	movw	r3, #2845	; 0xb1d
 800873e:	60fb      	str	r3, [r7, #12]
        break;
 8008740:	e00e      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8008742:	f640 331e 	movw	r3, #2846	; 0xb1e
 8008746:	60fb      	str	r3, [r7, #12]
        break;
 8008748:	e00a      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 800874a:	f640 331f 	movw	r3, #2847	; 0xb1f
 800874e:	60fb      	str	r3, [r7, #12]
        break;
 8008750:	e006      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8008752:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8008756:	60fb      	str	r3, [r7, #12]
        break;
 8008758:	e002      	b.n	8008760 <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 800875a:	2301      	movs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
        break;
 800875e:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d008      	beq.n	8008778 <sl_wfx_get_status_code+0x1b0>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f640 3204 	movw	r2, #2820	; 0xb04
 800876c:	4293      	cmp	r3, r2
 800876e:	d003      	beq.n	8008778 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	4804      	ldr	r0, [pc, #16]	; (8008784 <sl_wfx_get_status_code+0x1bc>)
 8008774:	f000 fafa 	bl	8008d6c <sl_wfx_host_log>
  }
#endif
  return result;
 8008778:	68fb      	ldr	r3, [r7, #12]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	0801ebdc 	.word	0x0801ebdc

08008788 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b086      	sub	sp, #24
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	603b      	str	r3, [r7, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 fab6 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 80087a4:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	2100      	movs	r1, #0
 80087b4:	4618      	mov	r0, r3
 80087b6:	f013 fca1 	bl	801c0fc <memset>
  }

  error_handler:
  return result;
 80087ba:	697b      	ldr	r3, [r7, #20]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	4619      	mov	r1, r3
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 faac 	bl	8008d34 <sl_wfx_host_free_buffer>
 80087dc:	4603      	mov	r3, r0
  }
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
	...

080087e8 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 80087ec:	4b16      	ldr	r3, [pc, #88]	; (8008848 <sl_wfx_host_init+0x60>)
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 80087f2:	2203      	movs	r2, #3
 80087f4:	2100      	movs	r1, #0
 80087f6:	2001      	movs	r0, #1
 80087f8:	f001 fda8 	bl	800a34c <xQueueGenericCreate>
 80087fc:	4603      	mov	r3, r0
 80087fe:	4a13      	ldr	r2, [pc, #76]	; (800884c <sl_wfx_host_init+0x64>)
 8008800:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008802:	2203      	movs	r2, #3
 8008804:	2100      	movs	r1, #0
 8008806:	2001      	movs	r0, #1
 8008808:	f001 fda0 	bl	800a34c <xQueueGenericCreate>
 800880c:	4603      	mov	r3, r0
 800880e:	4a10      	ldr	r2, [pc, #64]	; (8008850 <sl_wfx_host_init+0x68>)
 8008810:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <sl_wfx_host_init+0x68>)
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	2300      	movs	r3, #0
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	f001 fe1e 	bl	800a45c <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008820:	2203      	movs	r2, #3
 8008822:	2100      	movs	r1, #0
 8008824:	2001      	movs	r0, #1
 8008826:	f001 fd91 	bl	800a34c <xQueueGenericCreate>
 800882a:	4603      	mov	r3, r0
 800882c:	4a09      	ldr	r2, [pc, #36]	; (8008854 <sl_wfx_host_init+0x6c>)
 800882e:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008830:	2200      	movs	r2, #0
 8008832:	2101      	movs	r1, #1
 8008834:	2001      	movs	r0, #1
 8008836:	f001 fd89 	bl	800a34c <xQueueGenericCreate>
 800883a:	4603      	mov	r3, r0
 800883c:	4a06      	ldr	r2, [pc, #24]	; (8008858 <sl_wfx_host_init+0x70>)
 800883e:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	20001344 	.word	0x20001344
 800884c:	20001340 	.word	0x20001340
 8008850:	2000133c 	.word	0x2000133c
 8008854:	20001338 	.word	0x20001338
 8008858:	20001334 	.word	0x20001334

0800885c <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <sl_wfx_host_get_firmware_data+0x30>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <sl_wfx_host_get_firmware_data+0x34>)
 800886c:	441a      	add	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <sl_wfx_host_get_firmware_data+0x30>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	4413      	add	r3, r2
 800887a:	4a04      	ldr	r2, [pc, #16]	; (800888c <sl_wfx_host_get_firmware_data+0x30>)
 800887c:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	20001344 	.word	0x20001344
 8008890:	0802219c 	.word	0x0802219c

08008894 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4a04      	ldr	r2, [pc, #16]	; (80088b0 <sl_wfx_host_get_firmware_size+0x1c>)
 80088a0:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	0004bc50 	.word	0x0004bc50

080088b4 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 80088c0:	4b0e      	ldr	r3, [pc, #56]	; (80088fc <sl_wfx_host_get_pds_data+0x48>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80088c8:	2206      	movs	r2, #6
 80088ca:	4619      	mov	r1, r3
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <sl_wfx_host_get_pds_data+0x4c>)
 80088ce:	f013 fc1d 	bl	801c10c <strncmp>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d106      	bne.n	80088e6 <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 80088d8:	887b      	ldrh	r3, [r7, #2]
 80088da:	4a0a      	ldr	r2, [pc, #40]	; (8008904 <sl_wfx_host_get_pds_data+0x50>)
 80088dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	e005      	b.n	80088f2 <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 80088e6:	887b      	ldrh	r3, [r7, #2]
 80088e8:	4a07      	ldr	r2, [pc, #28]	; (8008908 <sl_wfx_host_get_pds_data+0x54>)
 80088ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	200009fc 	.word	0x200009fc
 8008900:	0801ee78 	.word	0x0801ee78
 8008904:	08022184 	.word	0x08022184
 8008908:	0802216c 	.word	0x0802216c

0800890c <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <sl_wfx_host_get_pds_size+0x38>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800891c:	2206      	movs	r2, #6
 800891e:	4619      	mov	r1, r3
 8008920:	4809      	ldr	r0, [pc, #36]	; (8008948 <sl_wfx_host_get_pds_size+0x3c>)
 8008922:	f013 fbf3 	bl	801c10c <strncmp>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d103      	bne.n	8008934 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2206      	movs	r2, #6
 8008930:	801a      	strh	r2, [r3, #0]
 8008932:	e002      	b.n	800893a <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2206      	movs	r2, #6
 8008938:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	200009fc 	.word	0x200009fc
 8008948:	0801ee78 	.word	0x0801ee78

0800894c <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 800894c:	b480      	push	{r7}
 800894e:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008960:	2200      	movs	r2, #0
 8008962:	2101      	movs	r1, #1
 8008964:	4808      	ldr	r0, [pc, #32]	; (8008988 <sl_wfx_host_reset_chip+0x2c>)
 8008966:	f7fc fc19 	bl	800519c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800896a:	200a      	movs	r0, #10
 800896c:	f7fb fc3a 	bl	80041e4 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008970:	2201      	movs	r2, #1
 8008972:	2101      	movs	r1, #1
 8008974:	4804      	ldr	r0, [pc, #16]	; (8008988 <sl_wfx_host_reset_chip+0x2c>)
 8008976:	f7fc fc11 	bl	800519c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800897a:	200a      	movs	r0, #10
 800897c:	f7fb fc32 	bl	80041e4 <HAL_Delay>

  return SL_STATUS_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	40020800 	.word	0x40020800

0800898c <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d006      	beq.n	80089aa <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 800899c:	2201      	movs	r2, #1
 800899e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089a2:	4807      	ldr	r0, [pc, #28]	; (80089c0 <sl_wfx_host_set_wake_up_pin+0x34>)
 80089a4:	f7fc fbfa 	bl	800519c <HAL_GPIO_WritePin>
 80089a8:	e005      	b.n	80089b6 <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 80089aa:	2200      	movs	r2, #0
 80089ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089b0:	4803      	ldr	r0, [pc, #12]	; (80089c0 <sl_wfx_host_set_wake_up_pin+0x34>)
 80089b2:	f7fc fbf3 	bl	800519c <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40020400 	.word	0x40020400

080089c4 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <sl_wfx_host_wait_for_wake_up+0x24>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2100      	movs	r1, #0
 80089ce:	4618      	mov	r0, r3
 80089d0:	f002 f84a 	bl	800aa68 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <sl_wfx_host_wait_for_wake_up+0x24>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2101      	movs	r1, #1
 80089da:	4618      	mov	r0, r3
 80089dc:	f002 f844 	bl	800aa68 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20001338 	.word	0x20001338

080089ec <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	603a      	str	r2, [r7, #0]
 80089f6:	71fb      	strb	r3, [r7, #7]
 80089f8:	460b      	mov	r3, r1
 80089fa:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 80089fc:	f640 3308 	movw	r3, #2824	; 0xb08
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008a16:	4a05      	ldr	r2, [pc, #20]	; (8008a2c <sl_wfx_host_setup_waited_event+0x20>)
 8008a18:	79fb      	ldrb	r3, [r7, #7]
 8008a1a:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	20001344 	.word	0x20001344

08008a30 <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	4603      	mov	r3, r0
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	e01b      	b.n	8008a7c <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008a44:	4b12      	ldr	r3, [pc, #72]	; (8008a90 <sl_wfx_host_wait_for_confirmation+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f107 0113 	add.w	r1, r7, #19
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 ff2a 	bl	800a8a8 <xQueueReceive>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d10d      	bne.n	8008a76 <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8008a5a:	7cfb      	ldrb	r3, [r7, #19]
 8008a5c:	7bfa      	ldrb	r2, [r7, #15]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d109      	bne.n	8008a76 <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <sl_wfx_host_wait_for_confirmation+0x64>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e007      	b.n	8008a86 <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	617b      	str	r3, [r7, #20]
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d3df      	bcc.n	8008a44 <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008a84:	2307      	movs	r3, #7
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20001334 	.word	0x20001334
 8008a94:	200009fc 	.word	0x200009fc

08008a98 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f001 f80b 	bl	8009abc <osDelay>
  
  return SL_STATUS_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	789b      	ldrb	r3, [r3, #2]
 8008abc:	3bc3      	subs	r3, #195	; 0xc3
 8008abe:	2b21      	cmp	r3, #33	; 0x21
 8008ac0:	f200 80f3 	bhi.w	8008caa <sl_wfx_host_post_event+0x1fa>
 8008ac4:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <sl_wfx_host_post_event+0x1c>)
 8008ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aca:	bf00      	nop
 8008acc:	08008b55 	.word	0x08008b55
 8008ad0:	08008b5d 	.word	0x08008b5d
 8008ad4:	08008b65 	.word	0x08008b65
 8008ad8:	08008cab 	.word	0x08008cab
 8008adc:	08008b6d 	.word	0x08008b6d
 8008ae0:	08008cab 	.word	0x08008cab
 8008ae4:	08008cab 	.word	0x08008cab
 8008ae8:	08008b75 	.word	0x08008b75
 8008aec:	08008b8b 	.word	0x08008b8b
 8008af0:	08008b93 	.word	0x08008b93
 8008af4:	08008b9b 	.word	0x08008b9b
 8008af8:	08008ba3 	.word	0x08008ba3
 8008afc:	08008bab 	.word	0x08008bab
 8008b00:	08008cab 	.word	0x08008cab
 8008b04:	08008cab 	.word	0x08008cab
 8008b08:	08008bb3 	.word	0x08008bb3
 8008b0c:	08008cab 	.word	0x08008cab
 8008b10:	08008cab 	.word	0x08008cab
 8008b14:	08008cab 	.word	0x08008cab
 8008b18:	08008cab 	.word	0x08008cab
 8008b1c:	08008cab 	.word	0x08008cab
 8008b20:	08008cab 	.word	0x08008cab
 8008b24:	08008cab 	.word	0x08008cab
 8008b28:	08008cab 	.word	0x08008cab
 8008b2c:	08008cab 	.word	0x08008cab
 8008b30:	08008cab 	.word	0x08008cab
 8008b34:	08008cab 	.word	0x08008cab
 8008b38:	08008cab 	.word	0x08008cab
 8008b3c:	08008cab 	.word	0x08008cab
 8008b40:	08008bbb 	.word	0x08008bbb
 8008b44:	08008cab 	.word	0x08008cab
 8008b48:	08008cab 	.word	0x08008cab
 8008b4c:	08008cab 	.word	0x08008cab
 8008b50:	08008c37 	.word	0x08008c37
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 fa41 	bl	8008fdc <sl_wfx_connect_callback>
      break;
 8008b5a:	e0a6      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fb4d 	bl	80091fc <sl_wfx_disconnect_callback>
      break;
 8008b62:	e0a2      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fb87 	bl	8009278 <sl_wfx_start_ap_callback>
      break;
 8008b6a:	e09e      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fbdd 	bl	800932c <sl_wfx_stop_ap_callback>
      break;
 8008b72:	e09a      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	791b      	ldrb	r3, [r3, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 8093 	bne.w	8008ca8 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7fa fa30 	bl	8002fe8 <sl_wfx_host_received_frame_callback>
      }
      break;
 8008b88:	e08e      	b.n	8008ca8 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f92e 	bl	8008dec <sl_wfx_scan_result_callback>
      break;
 8008b90:	e08b      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f9ee 	bl	8008f74 <sl_wfx_scan_complete_callback>
      break;
 8008b98:	e087      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fc02 	bl	80093a4 <sl_wfx_ap_client_connected_callback>
      break;
 8008ba0:	e083      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fc3c 	bl	8009420 <sl_wfx_ap_client_rejected_callback>
      break;
 8008ba8:	e07f      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fc6e 	bl	800948c <sl_wfx_ap_client_disconnected_callback>
      break;
 8008bb0:	e07b      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fca0 	bl	80094f8 <sl_wfx_ext_auth_callback>
      break;
 8008bb8:	e077      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	627b      	str	r3, [r7, #36]	; 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4849      	ldr	r0, [pc, #292]	; (8008cf0 <sl_wfx_host_post_event+0x240>)
 8008bca:	f013 f92d 	bl	801be28 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008bce:	2300      	movs	r3, #0
 8008bd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8008bd2:	e029      	b.n	8008c28 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8008bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4846      	ldr	r0, [pc, #280]	; (8008cf4 <sl_wfx_host_post_event+0x244>)
 8008bda:	f013 f925 	bl	801be28 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008bde:	2300      	movs	r3, #0
 8008be0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008be4:	e00d      	b.n	8008c02 <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	4619      	mov	r1, r3
 8008bec:	4842      	ldr	r0, [pc, #264]	; (8008cf8 <sl_wfx_host_post_event+0x248>)
 8008bee:	f013 f91b 	bl	801be28 <iprintf>
            exception_tmp++;
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008bf8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008bfc:	3301      	adds	r3, #1
 8008bfe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008c02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	d808      	bhi.n	8008c1c <sl_wfx_host_post_event+0x16c>
 8008c0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c0c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008c10:	4413      	add	r3, r2
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	8812      	ldrh	r2, [r2, #0]
 8008c16:	b292      	uxth	r2, r2
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	dbe4      	blt.n	8008be6 <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8008c1c:	4837      	ldr	r0, [pc, #220]	; (8008cfc <sl_wfx_host_post_event+0x24c>)
 8008c1e:	f013 f971 	bl	801bf04 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c24:	3310      	adds	r3, #16
 8008c26:	847b      	strh	r3, [r7, #34]	; 0x22
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d3cf      	bcc.n	8008bd4 <sl_wfx_host_post_event+0x124>
      }
      break;
 8008c34:	e039      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4619      	mov	r1, r3
 8008c44:	482e      	ldr	r0, [pc, #184]	; (8008d00 <sl_wfx_host_post_event+0x250>)
 8008c46:	f013 f8ef 	bl	801be28 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	837b      	strh	r3, [r7, #26]
 8008c4e:	e024      	b.n	8008c9a <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8008c50:	8b7b      	ldrh	r3, [r7, #26]
 8008c52:	4619      	mov	r1, r3
 8008c54:	4827      	ldr	r0, [pc, #156]	; (8008cf4 <sl_wfx_host_post_event+0x244>)
 8008c56:	f013 f8e7 	bl	801be28 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	767b      	strb	r3, [r7, #25]
 8008c5e:	e00b      	b.n	8008c78 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	4619      	mov	r1, r3
 8008c66:	4824      	ldr	r0, [pc, #144]	; (8008cf8 <sl_wfx_host_post_event+0x248>)
 8008c68:	f013 f8de 	bl	801be28 <iprintf>
            error_tmp++;
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008c72:	7e7b      	ldrb	r3, [r7, #25]
 8008c74:	3301      	adds	r3, #1
 8008c76:	767b      	strb	r3, [r7, #25]
 8008c78:	7e7b      	ldrb	r3, [r7, #25]
 8008c7a:	2b0f      	cmp	r3, #15
 8008c7c:	d807      	bhi.n	8008c8e <sl_wfx_host_post_event+0x1de>
 8008c7e:	8b7a      	ldrh	r2, [r7, #26]
 8008c80:	7e7b      	ldrb	r3, [r7, #25]
 8008c82:	4413      	add	r3, r2
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	8812      	ldrh	r2, [r2, #0]
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	dbe8      	blt.n	8008c60 <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 8008c8e:	481b      	ldr	r0, [pc, #108]	; (8008cfc <sl_wfx_host_post_event+0x24c>)
 8008c90:	f013 f938 	bl	801bf04 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008c94:	8b7b      	ldrh	r3, [r7, #26]
 8008c96:	3310      	adds	r3, #16
 8008c98:	837b      	strh	r3, [r7, #26]
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8b7a      	ldrh	r2, [r7, #26]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d3d4      	bcc.n	8008c50 <sl_wfx_host_post_event+0x1a0>
      }
      break;
 8008ca6:	e000      	b.n	8008caa <sl_wfx_host_post_event+0x1fa>
      break;
 8008ca8:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 8008caa:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <sl_wfx_host_post_event+0x254>)
 8008cac:	791a      	ldrb	r2, [r3, #4]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	789b      	ldrb	r3, [r3, #2]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d117      	bne.n	8008ce6 <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	881b      	ldrh	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc0:	d211      	bcs.n	8008ce6 <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 8008cc2:	4b11      	ldr	r3, [pc, #68]	; (8008d08 <sl_wfx_host_post_event+0x258>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 8008cce:	461a      	mov	r2, r3
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	f013 fad0 	bl	801c276 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	; (8008d0c <sl_wfx_host_post_event+0x25c>)
 8008cd8:	6818      	ldr	r0, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	1c99      	adds	r1, r3, #2
 8008cde:	2302      	movs	r3, #2
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f001 fbbb 	bl	800a45c <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3728      	adds	r7, #40	; 0x28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	0801ee80 	.word	0x0801ee80
 8008cf4:	0801ee9c 	.word	0x0801ee9c
 8008cf8:	0801eea8 	.word	0x0801eea8
 8008cfc:	0801eeb0 	.word	0x0801eeb0
 8008d00:	0801eeb4 	.word	0x0801eeb4
 8008d04:	20001344 	.word	0x20001344
 8008d08:	200009fc 	.word	0x200009fc
 8008d0c:	20001334 	.word	0x20001334

08008d10 <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f004 f882 	bl	800ce28 <pvPortMalloc>
 8008d24:	4602      	mov	r2, r0
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008d2a:	2300      	movs	r3, #0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f004 f93d 	bl	800cfc0 <vPortFree>
  
  return SL_STATUS_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f7fe fb4b 	bl	80073f8 <sl_wfx_data_write>
 8008d62:	4603      	mov	r3, r0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 8008d6c:	b40f      	push	{r0, r1, r2, r3}
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b082      	sub	sp, #8
 8008d72:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 8008d74:	f107 0314 	add.w	r3, r7, #20
 8008d78:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	6938      	ldr	r0, [r7, #16]
 8008d7e:	f013 f90d 	bl	801bf9c <viprintf>
  va_end(valist);
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d8c:	b004      	add	sp, #16
 8008d8e:	4770      	bx	lr

08008d90 <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 8008d96:	2307      	movs	r3, #7
 8008d98:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <sl_wfx_host_lock+0x38>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008da2:	4618      	mov	r0, r3
 8008da4:	f001 fe60 	bl	800aa68 <xQueueSemaphoreTake>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d102      	bne.n	8008db4 <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	e004      	b.n	8008dbe <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 8008db4:	4805      	ldr	r0, [pc, #20]	; (8008dcc <sl_wfx_host_lock+0x3c>)
 8008db6:	f013 f8a5 	bl	801bf04 <puts>
	      status = SL_STATUS_TIMEOUT;
 8008dba:	2307      	movs	r3, #7
 8008dbc:	607b      	str	r3, [r7, #4]
	    }

  return status;
 8008dbe:	687b      	ldr	r3, [r7, #4]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	2000133c 	.word	0x2000133c
 8008dcc:	0801eecc 	.word	0x0801eecc

08008dd0 <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 8008dd4:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <sl_wfx_host_unlock+0x18>)
 8008dd6:	6818      	ldr	r0, [r3, #0]
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2100      	movs	r1, #0
 8008dde:	f001 fb3d 	bl	800a45c <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	2000133c 	.word	0x2000133c

08008dec <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8008dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df0:	b08a      	sub	sp, #40	; 0x28
 8008df2:	af08      	add	r7, sp, #32
 8008df4:	6078      	str	r0, [r7, #4]
  scan_count++;
 8008df6:	4b5b      	ldr	r3, [pc, #364]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	4b59      	ldr	r3, [pc, #356]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008e00:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 8008e02:	4b59      	ldr	r3, [pc, #356]	; (8008f68 <sl_wfx_scan_result_callback+0x17c>)
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d03e      	beq.n	8008e88 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 8008e0a:	4b56      	ldr	r3, [pc, #344]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e14:	b29b      	uxth	r3, r3
    printf(
 8008e16:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3330      	adds	r3, #48	; 0x30
 8008e1c:	781b      	ldrb	r3, [r3, #0]
    printf(
 8008e1e:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	3bdc      	subs	r3, #220	; 0xdc
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b21b      	sxth	r3, r3
    printf(
 8008e2c:	0fda      	lsrs	r2, r3, #31
 8008e2e:	4413      	add	r3, r2
 8008e30:	105b      	asrs	r3, r3, #1
 8008e32:	b21b      	sxth	r3, r3
 8008e34:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    printf(
 8008e3c:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    printf(
 8008e44:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    printf(
 8008e4c:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    printf(
 8008e54:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    printf(
 8008e5c:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    printf(
 8008e64:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3308      	adds	r3, #8
    printf(
 8008e6a:	9307      	str	r3, [sp, #28]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	9306      	str	r3, [sp, #24]
 8008e70:	9605      	str	r6, [sp, #20]
 8008e72:	9504      	str	r5, [sp, #16]
 8008e74:	9403      	str	r4, [sp, #12]
 8008e76:	9002      	str	r0, [sp, #8]
 8008e78:	9101      	str	r1, [sp, #4]
 8008e7a:	9200      	str	r2, [sp, #0]
 8008e7c:	4643      	mov	r3, r8
 8008e7e:	4672      	mov	r2, lr
 8008e80:	4661      	mov	r1, ip
 8008e82:	483a      	ldr	r0, [pc, #232]	; (8008f6c <sl_wfx_scan_result_callback+0x180>)
 8008e84:	f012 ffd0 	bl	801be28 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 8008e88:	4b36      	ldr	r3, [pc, #216]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b32      	cmp	r3, #50	; 0x32
 8008e8e:	d863      	bhi.n	8008f58 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 8008e90:	4b34      	ldr	r3, [pc, #208]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	1e5a      	subs	r2, r3, #1
 8008e96:	4936      	ldr	r1, [pc, #216]	; (8008f70 <sl_wfx_scan_result_callback+0x184>)
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	1a9b      	subs	r3, r3, r2
 8008ea2:	18ca      	adds	r2, r1, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	f103 0420 	add.w	r4, r3, #32
 8008eae:	4602      	mov	r2, r0
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f8d1 c000 	ldr.w	ip, [r1]
 8008eb6:	684e      	ldr	r6, [r1, #4]
 8008eb8:	688d      	ldr	r5, [r1, #8]
 8008eba:	68c9      	ldr	r1, [r1, #12]
 8008ebc:	f8c2 c000 	str.w	ip, [r2]
 8008ec0:	6056      	str	r6, [r2, #4]
 8008ec2:	6095      	str	r5, [r2, #8]
 8008ec4:	60d1      	str	r1, [r2, #12]
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	3010      	adds	r0, #16
 8008eca:	42a3      	cmp	r3, r4
 8008ecc:	d1ef      	bne.n	8008eae <sl_wfx_scan_result_callback+0xc2>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 8008ed4:	4b23      	ldr	r3, [pc, #140]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	1e5a      	subs	r2, r3, #1
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ede:	b298      	uxth	r0, r3
 8008ee0:	4923      	ldr	r1, [pc, #140]	; (8008f70 <sl_wfx_scan_result_callback+0x184>)
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	4413      	add	r3, r2
 8008ee8:	011b      	lsls	r3, r3, #4
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	440b      	add	r3, r1
 8008eee:	332a      	adds	r3, #42	; 0x2a
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 8008ef4:	4b1b      	ldr	r3, [pc, #108]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	1e5a      	subs	r2, r3, #1
 8008efa:	491d      	ldr	r1, [pc, #116]	; (8008f70 <sl_wfx_scan_result_callback+0x184>)
 8008efc:	4613      	mov	r3, r2
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	4413      	add	r3, r2
 8008f02:	011b      	lsls	r3, r3, #4
 8008f04:	1a9b      	subs	r3, r3, r2
 8008f06:	440b      	add	r3, r1
 8008f08:	332c      	adds	r3, #44	; 0x2c
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8008f10:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8008f1c:	b298      	uxth	r0, r3
 8008f1e:	4914      	ldr	r1, [pc, #80]	; (8008f70 <sl_wfx_scan_result_callback+0x184>)
 8008f20:	4613      	mov	r3, r2
 8008f22:	005b      	lsls	r3, r3, #1
 8008f24:	4413      	add	r3, r2
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	3328      	adds	r3, #40	; 0x28
 8008f2e:	4602      	mov	r2, r0
 8008f30:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <sl_wfx_scan_result_callback+0x178>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	1e5a      	subs	r2, r3, #1
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	1a9b      	subs	r3, r3, r2
 8008f44:	3320      	adds	r3, #32
 8008f46:	4a0a      	ldr	r2, [pc, #40]	; (8008f70 <sl_wfx_scan_result_callback+0x184>)
 8008f48:	4413      	add	r3, r2
 8008f4a:	1d18      	adds	r0, r3, #4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3328      	adds	r3, #40	; 0x28
 8008f50:	2206      	movs	r2, #6
 8008f52:	4619      	mov	r1, r3
 8008f54:	f013 f98f 	bl	801c276 <memcpy>
  }
}
 8008f58:	bf00      	nop
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f62:	bf00      	nop
 8008f64:	20001332 	.word	0x20001332
 8008f68:	200000b1 	.word	0x200000b1
 8008f6c:	0801eee8 	.word	0x0801eee8
 8008f70:	20000a04 	.word	0x20000a04

08008f74 <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 8008f7c:	4b14      	ldr	r3, [pc, #80]	; (8008fd0 <sl_wfx_scan_complete_callback+0x5c>)
 8008f7e:	781a      	ldrb	r2, [r3, #0]
 8008f80:	4b14      	ldr	r3, [pc, #80]	; (8008fd4 <sl_wfx_scan_complete_callback+0x60>)
 8008f82:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 8008f84:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <sl_wfx_scan_complete_callback+0x5c>)
 8008f86:	2200      	movs	r2, #0
 8008f88:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8008f90:	461a      	mov	r2, r3
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	2101      	movs	r1, #1
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff feb9 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 8008f9e:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10f      	bne.n	8008fc6 <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 8008fa6:	68b8      	ldr	r0, [r7, #8]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	881b      	ldrh	r3, [r3, #0]
 8008fac:	b29b      	uxth	r3, r3
 8008fae:	461a      	mov	r2, r3
 8008fb0:	6879      	ldr	r1, [r7, #4]
 8008fb2:	f013 f960 	bl	801c276 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8008fb6:	4b08      	ldr	r3, [pc, #32]	; (8008fd8 <sl_wfx_scan_complete_callback+0x64>)
 8008fb8:	6818      	ldr	r0, [r3, #0]
 8008fba:	f107 0108 	add.w	r1, r7, #8
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f001 fa4b 	bl	800a45c <xQueueGenericSend>
  }
}
 8008fc6:	bf00      	nop
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20001332 	.word	0x20001332
 8008fd4:	20001333 	.word	0x20001333
 8008fd8:	2000134c 	.word	0x2000134c

08008fdc <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 8008fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	2b0a      	cmp	r3, #10
 8008fea:	f200 80d3 	bhi.w	8009194 <sl_wfx_connect_callback+0x1b8>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <sl_wfx_connect_callback+0x18>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009021 	.word	0x08009021
 8008ff8:	08009195 	.word	0x08009195
 8008ffc:	08009195 	.word	0x08009195
 8009000:	08009195 	.word	0x08009195
 8009004:	08009195 	.word	0x08009195
 8009008:	08009195 	.word	0x08009195
 800900c:	0800907f 	.word	0x0800907f
 8009010:	080090c3 	.word	0x080090c3
 8009014:	080090f1 	.word	0x080090f1
 8009018:	0800911f 	.word	0x0800911f
 800901c:	0800915b 	.word	0x0800915b
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 8009020:	496a      	ldr	r1, [pc, #424]	; (80091cc <sl_wfx_connect_callback+0x1f0>)
 8009022:	486b      	ldr	r0, [pc, #428]	; (80091d0 <sl_wfx_connect_callback+0x1f4>)
 8009024:	f012 ff00 	bl	801be28 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 8009028:	4b6a      	ldr	r3, [pc, #424]	; (80091d4 <sl_wfx_connect_callback+0x1f8>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009030:	4b68      	ldr	r3, [pc, #416]	; (80091d4 <sl_wfx_connect_callback+0x1f8>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0202 	orr.w	r2, r2, #2
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 8009044:	461a      	mov	r2, r3
 8009046:	f107 0308 	add.w	r3, r7, #8
 800904a:	2101      	movs	r1, #1
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fe5f 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 8009052:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	f040 80b3 	bne.w	80091c2 <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 800905c:	68b8      	ldr	r0, [r7, #8]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	881b      	ldrh	r3, [r3, #0]
 8009062:	b29b      	uxth	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	f013 f905 	bl	801c276 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 800906c:	4b5a      	ldr	r3, [pc, #360]	; (80091d8 <sl_wfx_connect_callback+0x1fc>)
 800906e:	6818      	ldr	r0, [r3, #0]
 8009070:	f107 0108 	add.w	r1, r7, #8
 8009074:	2300      	movs	r3, #0
 8009076:	2200      	movs	r2, #0
 8009078:	f001 f9f0 	bl	800a45c <xQueueGenericSend>
      }
      break;
 800907c:	e0a1      	b.n	80091c2 <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 800907e:	4b57      	ldr	r3, [pc, #348]	; (80091dc <sl_wfx_connect_callback+0x200>)
 8009080:	4a57      	ldr	r2, [pc, #348]	; (80091e0 <sl_wfx_connect_callback+0x204>)
 8009082:	4614      	mov	r4, r2
 8009084:	469c      	mov	ip, r3
 8009086:	f104 0e20 	add.w	lr, r4, #32
 800908a:	4665      	mov	r5, ip
 800908c:	4626      	mov	r6, r4
 800908e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009090:	6028      	str	r0, [r5, #0]
 8009092:	6069      	str	r1, [r5, #4]
 8009094:	60aa      	str	r2, [r5, #8]
 8009096:	60eb      	str	r3, [r5, #12]
 8009098:	3410      	adds	r4, #16
 800909a:	f10c 0c10 	add.w	ip, ip, #16
 800909e:	4574      	cmp	r4, lr
 80090a0:	d1f3      	bne.n	800908a <sl_wfx_connect_callback+0xae>
 80090a2:	4662      	mov	r2, ip
 80090a4:	4623      	mov	r3, r4
 80090a6:	cb03      	ldmia	r3!, {r0, r1}
 80090a8:	6010      	str	r0, [r2, #0]
 80090aa:	6051      	str	r1, [r2, #4]
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 80090b0:	484a      	ldr	r0, [pc, #296]	; (80091dc <sl_wfx_connect_callback+0x200>)
 80090b2:	f012 feb9 	bl	801be28 <iprintf>
      printf("\r\n");
 80090b6:	484b      	ldr	r0, [pc, #300]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 80090b8:	f012 ff24 	bl	801bf04 <puts>
      wifi_autoconnexion_init();
 80090bc:	f7f8 fb40 	bl	8001740 <wifi_autoconnexion_init>
      break;
 80090c0:	e080      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 80090c2:	4a46      	ldr	r2, [pc, #280]	; (80091dc <sl_wfx_connect_callback+0x200>)
 80090c4:	4b48      	ldr	r3, [pc, #288]	; (80091e8 <sl_wfx_connect_callback+0x20c>)
 80090c6:	4615      	mov	r5, r2
 80090c8:	461c      	mov	r4, r3
 80090ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090cc:	6028      	str	r0, [r5, #0]
 80090ce:	6069      	str	r1, [r5, #4]
 80090d0:	60aa      	str	r2, [r5, #8]
 80090d2:	60eb      	str	r3, [r5, #12]
 80090d4:	8823      	ldrh	r3, [r4, #0]
 80090d6:	78a2      	ldrb	r2, [r4, #2]
 80090d8:	822b      	strh	r3, [r5, #16]
 80090da:	4613      	mov	r3, r2
 80090dc:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 80090de:	483f      	ldr	r0, [pc, #252]	; (80091dc <sl_wfx_connect_callback+0x200>)
 80090e0:	f012 fea2 	bl	801be28 <iprintf>
      printf("\r\n");
 80090e4:	483f      	ldr	r0, [pc, #252]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 80090e6:	f012 ff0d 	bl	801bf04 <puts>
      wifi_autoconnexion_init();
 80090ea:	f7f8 fb29 	bl	8001740 <wifi_autoconnexion_init>
      break;
 80090ee:	e069      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 80090f0:	4a3a      	ldr	r2, [pc, #232]	; (80091dc <sl_wfx_connect_callback+0x200>)
 80090f2:	4b3e      	ldr	r3, [pc, #248]	; (80091ec <sl_wfx_connect_callback+0x210>)
 80090f4:	4615      	mov	r5, r2
 80090f6:	461c      	mov	r4, r3
 80090f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090fa:	6028      	str	r0, [r5, #0]
 80090fc:	6069      	str	r1, [r5, #4]
 80090fe:	60aa      	str	r2, [r5, #8]
 8009100:	60eb      	str	r3, [r5, #12]
 8009102:	8823      	ldrh	r3, [r4, #0]
 8009104:	78a2      	ldrb	r2, [r4, #2]
 8009106:	822b      	strh	r3, [r5, #16]
 8009108:	4613      	mov	r3, r2
 800910a:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800910c:	4833      	ldr	r0, [pc, #204]	; (80091dc <sl_wfx_connect_callback+0x200>)
 800910e:	f012 fe8b 	bl	801be28 <iprintf>
      printf("\r\n");
 8009112:	4834      	ldr	r0, [pc, #208]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 8009114:	f012 fef6 	bl	801bf04 <puts>
      wifi_autoconnexion_init();
 8009118:	f7f8 fb12 	bl	8001740 <wifi_autoconnexion_init>
      break;
 800911c:	e052      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 800911e:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <sl_wfx_connect_callback+0x200>)
 8009120:	4a33      	ldr	r2, [pc, #204]	; (80091f0 <sl_wfx_connect_callback+0x214>)
 8009122:	4614      	mov	r4, r2
 8009124:	469c      	mov	ip, r3
 8009126:	f104 0e20 	add.w	lr, r4, #32
 800912a:	4665      	mov	r5, ip
 800912c:	4626      	mov	r6, r4
 800912e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009130:	6028      	str	r0, [r5, #0]
 8009132:	6069      	str	r1, [r5, #4]
 8009134:	60aa      	str	r2, [r5, #8]
 8009136:	60eb      	str	r3, [r5, #12]
 8009138:	3410      	adds	r4, #16
 800913a:	f10c 0c10 	add.w	ip, ip, #16
 800913e:	4574      	cmp	r4, lr
 8009140:	d1f3      	bne.n	800912a <sl_wfx_connect_callback+0x14e>
 8009142:	4662      	mov	r2, ip
 8009144:	4623      	mov	r3, r4
 8009146:	cb03      	ldmia	r3!, {r0, r1}
 8009148:	6010      	str	r0, [r2, #0]
 800914a:	6051      	str	r1, [r2, #4]
      printf(event_log);
 800914c:	4823      	ldr	r0, [pc, #140]	; (80091dc <sl_wfx_connect_callback+0x200>)
 800914e:	f012 fe6b 	bl	801be28 <iprintf>
      printf("\r\n");
 8009152:	4824      	ldr	r0, [pc, #144]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 8009154:	f012 fed6 	bl	801bf04 <puts>
      break;
 8009158:	e034      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 800915a:	4b20      	ldr	r3, [pc, #128]	; (80091dc <sl_wfx_connect_callback+0x200>)
 800915c:	4a25      	ldr	r2, [pc, #148]	; (80091f4 <sl_wfx_connect_callback+0x218>)
 800915e:	4614      	mov	r4, r2
 8009160:	469c      	mov	ip, r3
 8009162:	f104 0e20 	add.w	lr, r4, #32
 8009166:	4665      	mov	r5, ip
 8009168:	4626      	mov	r6, r4
 800916a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800916c:	6028      	str	r0, [r5, #0]
 800916e:	6069      	str	r1, [r5, #4]
 8009170:	60aa      	str	r2, [r5, #8]
 8009172:	60eb      	str	r3, [r5, #12]
 8009174:	3410      	adds	r4, #16
 8009176:	f10c 0c10 	add.w	ip, ip, #16
 800917a:	4574      	cmp	r4, lr
 800917c:	d1f3      	bne.n	8009166 <sl_wfx_connect_callback+0x18a>
 800917e:	4662      	mov	r2, ip
 8009180:	4623      	mov	r3, r4
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 8009186:	4815      	ldr	r0, [pc, #84]	; (80091dc <sl_wfx_connect_callback+0x200>)
 8009188:	f012 fe4e 	bl	801be28 <iprintf>
      printf("\r\n");
 800918c:	4815      	ldr	r0, [pc, #84]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 800918e:	f012 feb9 	bl	801bf04 <puts>
      break;
 8009192:	e017      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 8009194:	4a11      	ldr	r2, [pc, #68]	; (80091dc <sl_wfx_connect_callback+0x200>)
 8009196:	4b18      	ldr	r3, [pc, #96]	; (80091f8 <sl_wfx_connect_callback+0x21c>)
 8009198:	4615      	mov	r5, r2
 800919a:	461c      	mov	r4, r3
 800919c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800919e:	6028      	str	r0, [r5, #0]
 80091a0:	6069      	str	r1, [r5, #4]
 80091a2:	60aa      	str	r2, [r5, #8]
 80091a4:	60eb      	str	r3, [r5, #12]
 80091a6:	cc03      	ldmia	r4!, {r0, r1}
 80091a8:	6128      	str	r0, [r5, #16]
 80091aa:	6169      	str	r1, [r5, #20]
 80091ac:	7823      	ldrb	r3, [r4, #0]
 80091ae:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 80091b0:	480a      	ldr	r0, [pc, #40]	; (80091dc <sl_wfx_connect_callback+0x200>)
 80091b2:	f012 fe39 	bl	801be28 <iprintf>
      printf("\r\n");
 80091b6:	480b      	ldr	r0, [pc, #44]	; (80091e4 <sl_wfx_connect_callback+0x208>)
 80091b8:	f012 fea4 	bl	801bf04 <puts>
      wifi_autoconnexion_init();
 80091bc:	f7f8 fac0 	bl	8001740 <wifi_autoconnexion_init>
    }
  }
}
 80091c0:	e000      	b.n	80091c4 <sl_wfx_connect_callback+0x1e8>
      break;
 80091c2:	bf00      	nop
}
 80091c4:	bf00      	nop
 80091c6:	3714      	adds	r7, #20
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091cc:	0801ef20 	.word	0x0801ef20
 80091d0:	0801ef30 	.word	0x0801ef30
 80091d4:	200009fc 	.word	0x200009fc
 80091d8:	2000134c 	.word	0x2000134c
 80091dc:	200008bc 	.word	0x200008bc
 80091e0:	0801ef4c 	.word	0x0801ef4c
 80091e4:	0801eeb0 	.word	0x0801eeb0
 80091e8:	0801ef78 	.word	0x0801ef78
 80091ec:	0801ef8c 	.word	0x0801ef8c
 80091f0:	0801efa0 	.word	0x0801efa0
 80091f4:	0801efc8 	.word	0x0801efc8
 80091f8:	0801efec 	.word	0x0801efec

080091fc <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	895b      	ldrh	r3, [r3, #10]
 8009208:	b29b      	uxth	r3, r3
 800920a:	4619      	mov	r1, r3
 800920c:	4817      	ldr	r0, [pc, #92]	; (800926c <sl_wfx_disconnect_callback+0x70>)
 800920e:	f012 fe0b 	bl	801be28 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 8009212:	4b17      	ldr	r3, [pc, #92]	; (8009270 <sl_wfx_disconnect_callback+0x74>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800921a:	4b15      	ldr	r3, [pc, #84]	; (8009270 <sl_wfx_disconnect_callback+0x74>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f022 0202 	bic.w	r2, r2, #2
 8009222:	b2d2      	uxtb	r2, r2
 8009224:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800922e:	461a      	mov	r2, r3
 8009230:	f107 0308 	add.w	r3, r7, #8
 8009234:	2101      	movs	r1, #1
 8009236:	4618      	mov	r0, r3
 8009238:	f7ff fd6a 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 800923c:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10f      	bne.n	8009264 <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	881b      	ldrh	r3, [r3, #0]
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	6879      	ldr	r1, [r7, #4]
 8009250:	f013 f811 	bl	801c276 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009254:	4b07      	ldr	r3, [pc, #28]	; (8009274 <sl_wfx_disconnect_callback+0x78>)
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	2300      	movs	r3, #0
 800925e:	2200      	movs	r2, #0
 8009260:	f001 f8fc 	bl	800a45c <xQueueGenericSend>
  }
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	0801f008 	.word	0x0801f008
 8009270:	200009fc 	.word	0x200009fc
 8009274:	2000134c 	.word	0x2000134c

08009278 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 8009278:	b5b0      	push	{r4, r5, r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d130      	bne.n	80092ea <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 8009288:	4820      	ldr	r0, [pc, #128]	; (800930c <sl_wfx_start_ap_callback+0x94>)
 800928a:	f012 fe3b 	bl	801bf04 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 800928e:	4920      	ldr	r1, [pc, #128]	; (8009310 <sl_wfx_start_ap_callback+0x98>)
 8009290:	4820      	ldr	r0, [pc, #128]	; (8009314 <sl_wfx_start_ap_callback+0x9c>)
 8009292:	f012 fdc9 	bl	801be28 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 8009296:	4b20      	ldr	r3, [pc, #128]	; (8009318 <sl_wfx_start_ap_callback+0xa0>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800929e:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <sl_wfx_start_ap_callback+0xa0>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0204 	orr.w	r2, r2, #4
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 80092b2:	461a      	mov	r2, r3
 80092b4:	f107 0308 	add.w	r3, r7, #8
 80092b8:	2101      	movs	r1, #1
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fd28 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 80092c0:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d11c      	bne.n	8009302 <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 80092c8:	68b8      	ldr	r0, [r7, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	881b      	ldrh	r3, [r3, #0]
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	f012 ffcf 	bl	801c276 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 80092d8:	4b10      	ldr	r3, [pc, #64]	; (800931c <sl_wfx_start_ap_callback+0xa4>)
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	f107 0108 	add.w	r1, r7, #8
 80092e0:	2300      	movs	r3, #0
 80092e2:	2200      	movs	r2, #0
 80092e4:	f001 f8ba 	bl	800a45c <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 80092e8:	e00b      	b.n	8009302 <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 80092ea:	480d      	ldr	r0, [pc, #52]	; (8009320 <sl_wfx_start_ap_callback+0xa8>)
 80092ec:	f012 fe0a 	bl	801bf04 <puts>
    strcpy(event_log, "AP start failed");
 80092f0:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <sl_wfx_start_ap_callback+0xac>)
 80092f2:	4b0d      	ldr	r3, [pc, #52]	; (8009328 <sl_wfx_start_ap_callback+0xb0>)
 80092f4:	4614      	mov	r4, r2
 80092f6:	461d      	mov	r5, r3
 80092f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80092fa:	6020      	str	r0, [r4, #0]
 80092fc:	6061      	str	r1, [r4, #4]
 80092fe:	60a2      	str	r2, [r4, #8]
 8009300:	60e3      	str	r3, [r4, #12]
}
 8009302:	bf00      	nop
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bdb0      	pop	{r4, r5, r7, pc}
 800930a:	bf00      	nop
 800930c:	0801f01c 	.word	0x0801f01c
 8009310:	20000070 	.word	0x20000070
 8009314:	0801f028 	.word	0x0801f028
 8009318:	200009fc 	.word	0x200009fc
 800931c:	2000134c 	.word	0x2000134c
 8009320:	0801f044 	.word	0x0801f044
 8009324:	200008bc 	.word	0x200008bc
 8009328:	0801f058 	.word	0x0801f058

0800932c <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 8009334:	4818      	ldr	r0, [pc, #96]	; (8009398 <sl_wfx_stop_ap_callback+0x6c>)
 8009336:	f012 fde5 	bl	801bf04 <puts>
  dhcpserver_clear_stored_mac();
 800933a:	f7f8 fe1f 	bl	8001f7c <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 800933e:	4b17      	ldr	r3, [pc, #92]	; (800939c <sl_wfx_stop_ap_callback+0x70>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009346:	4b15      	ldr	r3, [pc, #84]	; (800939c <sl_wfx_stop_ap_callback+0x70>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f022 0204 	bic.w	r2, r2, #4
 800934e:	b2d2      	uxtb	r2, r2
 8009350:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800935a:	461a      	mov	r2, r3
 800935c:	f107 0308 	add.w	r3, r7, #8
 8009360:	2101      	movs	r1, #1
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fcd4 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 8009368:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10f      	bne.n	8009390 <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 8009370:	68b8      	ldr	r0, [r7, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	b29b      	uxth	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	f012 ff7b 	bl	801c276 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009380:	4b07      	ldr	r3, [pc, #28]	; (80093a0 <sl_wfx_stop_ap_callback+0x74>)
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	f107 0108 	add.w	r1, r7, #8
 8009388:	2300      	movs	r3, #0
 800938a:	2200      	movs	r2, #0
 800938c:	f001 f866 	bl	800a45c <xQueueGenericSend>
  }
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0801f068 	.word	0x0801f068
 800939c:	200009fc 	.word	0x200009fc
 80093a0:	2000134c 	.word	0x2000134c

080093a4 <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 80093a4:	b5b0      	push	{r4, r5, r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af04      	add	r7, sp, #16
 80093aa:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093b0:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093b6:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093bc:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093c2:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093c8:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	9101      	str	r1, [sp, #4]
 80093d2:	9200      	str	r2, [sp, #0]
 80093d4:	462b      	mov	r3, r5
 80093d6:	4622      	mov	r2, r4
 80093d8:	4601      	mov	r1, r0
 80093da:	480b      	ldr	r0, [pc, #44]	; (8009408 <sl_wfx_ap_client_connected_callback+0x64>)
 80093dc:	f012 fd24 	bl	801be28 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <sl_wfx_ap_client_connected_callback+0x68>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	4619      	mov	r1, r3
 80093e6:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <sl_wfx_ap_client_connected_callback+0x6c>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	4b09      	ldr	r3, [pc, #36]	; (8009414 <sl_wfx_ap_client_connected_callback+0x70>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <sl_wfx_ap_client_connected_callback+0x74>)
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	4603      	mov	r3, r0
 80093fa:	4808      	ldr	r0, [pc, #32]	; (800941c <sl_wfx_ap_client_connected_callback+0x78>)
 80093fc:	f012 fd14 	bl	801be28 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 8009400:	bf00      	nop
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bdb0      	pop	{r4, r5, r7, pc}
 8009408:	0801f078 	.word	0x0801f078
 800940c:	2000009e 	.word	0x2000009e
 8009410:	2000009f 	.word	0x2000009f
 8009414:	200000a0 	.word	0x200000a0
 8009418:	200000a1 	.word	0x200000a1
 800941c:	0801f0b0 	.word	0x0801f0b0

08009420 <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 8009420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009422:	b089      	sub	sp, #36	; 0x24
 8009424:	af04      	add	r7, sp, #16
 8009426:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	1d1a      	adds	r2, r3, #4
 800942c:	f107 0308 	add.w	r3, r7, #8
 8009430:	6810      	ldr	r0, [r2, #0]
 8009432:	6018      	str	r0, [r3, #0]
 8009434:	8892      	ldrh	r2, [r2, #4]
 8009436:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f7f8 fbdf 	bl	8001c00 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	895b      	ldrh	r3, [r3, #10]
 8009446:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009448:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800944e:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009454:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800945a:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009460:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009466:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800946c:	9303      	str	r3, [sp, #12]
 800946e:	9002      	str	r0, [sp, #8]
 8009470:	9101      	str	r1, [sp, #4]
 8009472:	9200      	str	r2, [sp, #0]
 8009474:	4633      	mov	r3, r6
 8009476:	462a      	mov	r2, r5
 8009478:	4621      	mov	r1, r4
 800947a:	4803      	ldr	r0, [pc, #12]	; (8009488 <sl_wfx_ap_client_rejected_callback+0x68>)
 800947c:	f012 fcd4 	bl	801be28 <iprintf>
}
 8009480:	bf00      	nop
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	0801f0e4 	.word	0x0801f0e4

0800948c <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 800948c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af04      	add	r7, sp, #16
 8009492:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	1d1a      	adds	r2, r3, #4
 8009498:	f107 0308 	add.w	r3, r7, #8
 800949c:	6810      	ldr	r0, [r2, #0]
 800949e:	6018      	str	r0, [r3, #0]
 80094a0:	8892      	ldrh	r2, [r2, #4]
 80094a2:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80094a4:	f107 0308 	add.w	r3, r7, #8
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7f8 fba9 	bl	8001c00 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	895b      	ldrh	r3, [r3, #10]
 80094b2:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094b4:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094ba:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094c0:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094c6:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094cc:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094d2:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9002      	str	r0, [sp, #8]
 80094dc:	9101      	str	r1, [sp, #4]
 80094de:	9200      	str	r2, [sp, #0]
 80094e0:	4633      	mov	r3, r6
 80094e2:	462a      	mov	r2, r5
 80094e4:	4621      	mov	r1, r4
 80094e6:	4803      	ldr	r0, [pc, #12]	; (80094f4 <sl_wfx_ap_client_disconnected_callback+0x68>)
 80094e8:	f012 fc9e 	bl	801be28 <iprintf>
}
 80094ec:	bf00      	nop
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f4:	0801f128 	.word	0x0801f128

080094f8 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009506:	461a      	mov	r2, r3
 8009508:	f107 0308 	add.w	r3, r7, #8
 800950c:	2101      	movs	r1, #1
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fbfe 	bl	8008d10 <sl_wfx_host_allocate_buffer>
 8009514:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10f      	bne.n	800953c <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 800951c:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
    memcpy(buffer,
 8009524:	461a      	mov	r2, r3
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	f012 fea5 	bl	801c276 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <sl_wfx_ext_auth_callback+0x4c>)
 800952e:	6818      	ldr	r0, [r3, #0]
 8009530:	f107 0108 	add.w	r1, r7, #8
 8009534:	2300      	movs	r3, #0
 8009536:	2200      	movs	r2, #0
 8009538:	f000 ff90 	bl	800a45c <xQueueGenericSend>
  }
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	2000134c 	.word	0x2000134c

08009548 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 8009548:	b5b0      	push	{r4, r5, r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800954e:	2203      	movs	r2, #3
 8009550:	2100      	movs	r1, #0
 8009552:	2001      	movs	r0, #1
 8009554:	f000 fefa 	bl	800a34c <xQueueGenericCreate>
 8009558:	4603      	mov	r3, r0
 800955a:	4a0d      	ldr	r2, [pc, #52]	; (8009590 <wifi_events_start+0x48>)
 800955c:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 800955e:	4b0d      	ldr	r3, [pc, #52]	; (8009594 <wifi_events_start+0x4c>)
 8009560:	1d3c      	adds	r4, r7, #4
 8009562:	461d      	mov	r5, r3
 8009564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 800956c:	1d3b      	adds	r3, r7, #4
 800956e:	2100      	movs	r1, #0
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fa70 	bl	8009a56 <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 8009576:	2200      	movs	r2, #0
 8009578:	2104      	movs	r1, #4
 800957a:	200a      	movs	r0, #10
 800957c:	f000 fee6 	bl	800a34c <xQueueGenericCreate>
 8009580:	4603      	mov	r3, r0
 8009582:	4a05      	ldr	r2, [pc, #20]	; (8009598 <wifi_events_start+0x50>)
 8009584:	6013      	str	r3, [r2, #0]
}
 8009586:	bf00      	nop
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bdb0      	pop	{r4, r5, r7, pc}
 800958e:	bf00      	nop
 8009590:	20001350 	.word	0x20001350
 8009594:	0801f17c 	.word	0x0801f17c
 8009598:	2000134c 	.word	0x2000134c

0800959c <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 80095a4:	4b22      	ldr	r3, [pc, #136]	; (8009630 <wifi_events_task_entry+0x94>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f107 0108 	add.w	r1, r7, #8
 80095ac:	f04f 32ff 	mov.w	r2, #4294967295
 80095b0:	4618      	mov	r0, r3
 80095b2:	f001 f979 	bl	800a8a8 <xQueueReceive>
 80095b6:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d1f2      	bne.n	80095a4 <wifi_events_task_entry+0x8>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0ef      	beq.n	80095a4 <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	789b      	ldrb	r3, [r3, #2]
 80095c8:	3bc3      	subs	r3, #195	; 0xc3
 80095ca:	2b09      	cmp	r3, #9
 80095cc:	d82a      	bhi.n	8009624 <wifi_events_task_entry+0x88>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <wifi_events_task_entry+0x38>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	080095fd 	.word	0x080095fd
 80095d8:	08009603 	.word	0x08009603
 80095dc:	08009609 	.word	0x08009609
 80095e0:	08009625 	.word	0x08009625
 80095e4:	0800960f 	.word	0x0800960f
 80095e8:	08009625 	.word	0x08009625
 80095ec:	08009625 	.word	0x08009625
 80095f0:	08009625 	.word	0x08009625
 80095f4:	08009625 	.word	0x08009625
 80095f8:	08009615 	.word	0x08009615
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 80095fc:	f7f9 fd80 	bl	8003100 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009600:	e010      	b.n	8009624 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 8009602:	f7f9 fd9b 	bl	800313c <lwip_set_sta_link_down>
          break;
 8009606:	e00d      	b.n	8009624 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 8009608:	f7f9 fdb6 	bl	8003178 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 800960c:	e00a      	b.n	8009624 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 800960e:	f7f9 fdc9 	bl	80031a4 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 8009612:	e007      	b.n	8009624 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 8009614:	4b07      	ldr	r3, [pc, #28]	; (8009634 <wifi_events_task_entry+0x98>)
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	2300      	movs	r3, #0
 800961a:	2200      	movs	r2, #0
 800961c:	2100      	movs	r1, #0
 800961e:	f000 ff1d 	bl	800a45c <xQueueGenericSend>
          break;
 8009622:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2101      	movs	r1, #1
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fb83 	bl	8008d34 <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800962e:	e7b9      	b.n	80095a4 <wifi_events_task_entry+0x8>
 8009630:	2000134c 	.word	0x2000134c
 8009634:	20001340 	.word	0x20001340

08009638 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 800963c:	f000 f8a8 	bl	8009790 <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 8009640:	2203      	movs	r2, #3
 8009642:	2100      	movs	r1, #0
 8009644:	2001      	movs	r0, #1
 8009646:	f000 fe81 	bl	800a34c <xQueueGenericCreate>
 800964a:	4603      	mov	r3, r0
 800964c:	4a05      	ldr	r2, [pc, #20]	; (8009664 <sl_wfx_host_init_bus+0x2c>)
 800964e:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 8009650:	4b04      	ldr	r3, [pc, #16]	; (8009664 <sl_wfx_host_init_bus+0x2c>)
 8009652:	6818      	ldr	r0, [r3, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	f000 feff 	bl	800a45c <xQueueGenericSend>
  return SL_STATUS_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	bd80      	pop	{r7, pc}
 8009664:	2000146c 	.word	0x2000146c

08009668 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 8009668:	b580      	push	{r7, lr}
 800966a:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 800966c:	4b04      	ldr	r3, [pc, #16]	; (8009680 <sl_wfx_host_deinit_bus+0x18>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fac9 	bl	8009c08 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 8009676:	f000 f8c1 	bl	80097fc <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	bd80      	pop	{r7, pc}
 8009680:	2000146c 	.word	0x2000146c

08009684 <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 8009688:	2200      	movs	r2, #0
 800968a:	2110      	movs	r1, #16
 800968c:	4802      	ldr	r0, [pc, #8]	; (8009698 <sl_wfx_host_spi_cs_assert+0x14>)
 800968e:	f7fb fd85 	bl	800519c <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40020000 	.word	0x40020000

0800969c <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 800969c:	b580      	push	{r7, lr}
 800969e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 80096a0:	2201      	movs	r2, #1
 80096a2:	2110      	movs	r1, #16
 80096a4:	4802      	ldr	r0, [pc, #8]	; (80096b0 <sl_wfx_host_spi_cs_deassert+0x14>)
 80096a6:	f7fb fd79 	bl	800519c <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 80096aa:	2300      	movs	r3, #0
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40020000 	.word	0x40020000

080096b4 <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b086      	sub	sp, #24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607b      	str	r3, [r7, #4]
 80096be:	4603      	mov	r3, r0
 80096c0:	73fb      	strb	r3, [r7, #15]
 80096c2:	4613      	mov	r3, r2
 80096c4:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 80096c6:	2301      	movs	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	bf0c      	ite	eq
 80096d0:	2301      	moveq	r3, #1
 80096d2:	2300      	movne	r3, #0
 80096d4:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 80096d6:	4b21      	ldr	r3, [pc, #132]	; (800975c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f04f 31ff 	mov.w	r1, #4294967295
 80096de:	4618      	mov	r0, r3
 80096e0:	f001 f9c2 	bl	800aa68 <xQueueSemaphoreTake>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d120      	bne.n	800972c <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 80096ea:	89ba      	ldrh	r2, [r7, #12]
 80096ec:	2301      	movs	r3, #1
 80096ee:	68b9      	ldr	r1, [r7, #8]
 80096f0:	481b      	ldr	r0, [pc, #108]	; (8009760 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 80096f2:	f7fc fada 	bl	8005caa <HAL_SPI_Transmit>
    if (is_read) {
 80096f6:	7cfb      	ldrb	r3, [r7, #19]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 80096fc:	8c3b      	ldrh	r3, [r7, #32]
 80096fe:	461a      	mov	r2, r3
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4817      	ldr	r0, [pc, #92]	; (8009760 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009704:	f7fc fcc4 	bl	8006090 <HAL_SPI_Receive_DMA>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d110      	bne.n	8009730 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 800970e:	2300      	movs	r3, #0
 8009710:	617b      	str	r3, [r7, #20]
 8009712:	e00d      	b.n	8009730 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009714:	8c3b      	ldrh	r3, [r7, #32]
 8009716:	461a      	mov	r2, r3
 8009718:	6879      	ldr	r1, [r7, #4]
 800971a:	4811      	ldr	r0, [pc, #68]	; (8009760 <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 800971c:	f7fc fc02 	bl	8005f24 <HAL_SPI_Transmit_DMA>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d104      	bne.n	8009730 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	e001      	b.n	8009730 <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 800972c:	2307      	movs	r3, #7
 800972e:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009730:	4b0a      	ldr	r3, [pc, #40]	; (800975c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f04f 31ff 	mov.w	r1, #4294967295
 8009738:	4618      	mov	r0, r3
 800973a:	f001 f995 	bl	800aa68 <xQueueSemaphoreTake>
 800973e:	4603      	mov	r3, r0
 8009740:	2b01      	cmp	r3, #1
 8009742:	d106      	bne.n	8009752 <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	2300      	movs	r3, #0
 800974a:	2200      	movs	r2, #0
 800974c:	2100      	movs	r1, #0
 800974e:	f000 fe85 	bl	800a45c <xQueueGenericSend>
  }

  return result;
 8009752:	697b      	ldr	r3, [r7, #20]
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	2000146c 	.word	0x2000146c
 8009760:	20001354 	.word	0x20001354

08009764 <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009764:	b580      	push	{r7, lr}
 8009766:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009768:	2200      	movs	r2, #0
 800976a:	210a      	movs	r1, #10
 800976c:	2028      	movs	r0, #40	; 0x28
 800976e:	f7fa fe5c 	bl	800442a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009772:	2028      	movs	r0, #40	; 0x28
 8009774:	f7fa fe75 	bl	8004462 <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	bd80      	pop	{r7, pc}

0800977e <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 800977e:	b580      	push	{r7, lr}
 8009780:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009782:	2028      	movs	r0, #40	; 0x28
 8009784:	f7fa fe7b 	bl	800447e <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009794:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <MX_SPI1_Init+0x64>)
 8009796:	4a18      	ldr	r2, [pc, #96]	; (80097f8 <MX_SPI1_Init+0x68>)
 8009798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800979a:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <MX_SPI1_Init+0x64>)
 800979c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80097a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80097a2:	4b14      	ldr	r3, [pc, #80]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80097a8:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80097b4:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80097ba:	4b0e      	ldr	r3, [pc, #56]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097c2:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80097ce:	4b09      	ldr	r3, [pc, #36]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097d4:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097dc:	220a      	movs	r2, #10
 80097de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80097e0:	4804      	ldr	r0, [pc, #16]	; (80097f4 <MX_SPI1_Init+0x64>)
 80097e2:	f7fc f9b1 	bl	8005b48 <HAL_SPI_Init>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80097ec:	f7fa f83a 	bl	8003864 <Error_Handler>
  }
}
 80097f0:	bf00      	nop
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20001354 	.word	0x20001354
 80097f8:	40013000 	.word	0x40013000

080097fc <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009800:	4805      	ldr	r0, [pc, #20]	; (8009818 <MX_SPI1_DeInit+0x1c>)
 8009802:	f7fa ff21 	bl	8004648 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009806:	4805      	ldr	r0, [pc, #20]	; (800981c <MX_SPI1_DeInit+0x20>)
 8009808:	f7fa ff1e 	bl	8004648 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 800980c:	4804      	ldr	r0, [pc, #16]	; (8009820 <MX_SPI1_DeInit+0x24>)
 800980e:	f7fc fa24 	bl	8005c5a <HAL_SPI_DeInit>
}
 8009812:	bf00      	nop
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	2000140c 	.word	0x2000140c
 800981c:	200013ac 	.word	0x200013ac
 8009820:	20001354 	.word	0x20001354

08009824 <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009824:	b5b0      	push	{r4, r5, r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 800982a:	f000 fad4 	bl	8009dd6 <xEventGroupCreate>
 800982e:	4603      	mov	r3, r0
 8009830:	4a10      	ldr	r2, [pc, #64]	; (8009874 <sl_wfx_task_start+0x50>)
 8009832:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009834:	2001      	movs	r0, #1
 8009836:	f000 fdf8 	bl	800a42a <xQueueCreateMutex>
 800983a:	4603      	mov	r3, r0
 800983c:	4a0e      	ldr	r2, [pc, #56]	; (8009878 <sl_wfx_task_start+0x54>)
 800983e:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009840:	4b0e      	ldr	r3, [pc, #56]	; (800987c <sl_wfx_task_start+0x58>)
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009846:	4b0d      	ldr	r3, [pc, #52]	; (800987c <sl_wfx_task_start+0x58>)
 8009848:	2200      	movs	r2, #0
 800984a:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 800984c:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <sl_wfx_task_start+0x5c>)
 800984e:	1d3c      	adds	r4, r7, #4
 8009850:	461d      	mov	r5, r3
 8009852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 800985a:	1d3b      	adds	r3, r7, #4
 800985c:	2100      	movs	r1, #0
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f8f9 	bl	8009a56 <osThreadCreate>
 8009864:	4603      	mov	r3, r0
 8009866:	4a07      	ldr	r2, [pc, #28]	; (8009884 <sl_wfx_task_start+0x60>)
 8009868:	6013      	str	r3, [r2, #0]

}
 800986a:	bf00      	nop
 800986c:	3718      	adds	r7, #24
 800986e:	46bd      	mov	sp, r7
 8009870:	bdb0      	pop	{r4, r5, r7, pc}
 8009872:	bf00      	nop
 8009874:	20001474 	.word	0x20001474
 8009878:	20001478 	.word	0x20001478
 800987c:	2000147c 	.word	0x2000147c
 8009880:	0801f19c 	.word	0x0801f19c
 8009884:	20001470 	.word	0x20001470

08009888 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af02      	add	r7, sp, #8
 800988e:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009894:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <sl_wfx_task_entry+0x44>)
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	f04f 33ff 	mov.w	r3, #4294967295
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	2300      	movs	r3, #0
 80098a0:	2201      	movs	r2, #1
 80098a2:	2103      	movs	r1, #3
 80098a4:	f000 faae 	bl	8009e04 <xEventGroupWaitBits>
 80098a8:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 80098b4:	f000 f834 	bl	8009920 <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0e8      	beq.n	8009894 <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 80098c2:	89fb      	ldrh	r3, [r7, #14]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 f803 	bl	80098d0 <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 80098ca:	e7e3      	b.n	8009894 <sl_wfx_task_entry+0xc>
 80098cc:	20001474 	.word	0x20001474

080098d0 <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	4603      	mov	r3, r0
 80098d8:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 80098da:	f7ff ff50 	bl	800977e <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 80098de:	1dbb      	adds	r3, r7, #6
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fe fa77 	bl	8007dd4 <sl_wfx_receive_frame>
 80098e6:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 80098ee:	f7ff ff39 	bl	8009764 <sl_wfx_host_enable_platform_interrupt>
 80098f2:	e00d      	b.n	8009910 <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d006      	beq.n	800990c <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 80098fe:	4b07      	ldr	r3, [pc, #28]	; (800991c <sl_wfx_rx_process+0x4c>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2102      	movs	r1, #2
 8009904:	4618      	mov	r0, r3
 8009906:	f000 fb4b 	bl	8009fa0 <xEventGroupSetBits>
 800990a:	e001      	b.n	8009910 <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 800990c:	f7ff ff2a 	bl	8009764 <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20001474 	.word	0x20001474

08009920 <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009926:	4b28      	ldr	r3, [pc, #160]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 800992e:	231b      	movs	r3, #27
 8009930:	e045      	b.n	80099be <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <sl_wfx_tx_process+0xac>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f04f 31ff 	mov.w	r1, #4294967295
 800993a:	4618      	mov	r0, r3
 800993c:	f001 f894 	bl	800aa68 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009940:	4b21      	ldr	r3, [pc, #132]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009948:	4b1f      	ldr	r3, [pc, #124]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 800994a:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 800994c:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 800994e:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 8009950:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009952:	791a      	ldrb	r2, [r3, #4]
 8009954:	2300      	movs	r3, #0
 8009956:	f7fe f8f9 	bl	8007b4c <sl_wfx_send_ethernet_frame>
 800995a:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009962:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <sl_wfx_tx_process+0xb0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2101      	movs	r1, #1
 8009968:	4618      	mov	r0, r3
 800996a:	f000 fb19 	bl	8009fa0 <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 800996e:	4b17      	ldr	r3, [pc, #92]	; (80099cc <sl_wfx_tx_process+0xac>)
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	2300      	movs	r3, #0
 8009974:	2200      	movs	r2, #0
 8009976:	2100      	movs	r1, #0
 8009978:	f000 fd70 	bl	800a45c <xQueueGenericSend>
    return SL_STATUS_FULL;
 800997c:	231c      	movs	r3, #28
 800997e:	e01e      	b.n	80099be <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009980:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009986:	4b10      	ldr	r3, [pc, #64]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a0e      	ldr	r2, [pc, #56]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 800998e:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009990:	2200      	movs	r2, #0
 8009992:	214a      	movs	r1, #74	; 0x4a
 8009994:	6838      	ldr	r0, [r7, #0]
 8009996:	f7fe ff15 	bl	80087c4 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 800999a:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <sl_wfx_tx_process+0xa8>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 80099a2:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <sl_wfx_tx_process+0xb0>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f000 faf9 	bl	8009fa0 <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80099ae:	4b07      	ldr	r3, [pc, #28]	; (80099cc <sl_wfx_tx_process+0xac>)
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	2300      	movs	r3, #0
 80099b4:	2200      	movs	r2, #0
 80099b6:	2100      	movs	r1, #0
 80099b8:	f000 fd50 	bl	800a45c <xQueueGenericSend>

  return result;
 80099bc:	687b      	ldr	r3, [r7, #4]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	2000147c 	.word	0x2000147c
 80099cc:	20001478 	.word	0x20001478
 80099d0:	20001474 	.word	0x20001474

080099d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4603      	mov	r3, r0
 80099dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80099de:	2300      	movs	r3, #0
 80099e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80099e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099e6:	2b84      	cmp	r3, #132	; 0x84
 80099e8:	d005      	beq.n	80099f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80099ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	3303      	adds	r3, #3
 80099f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a0a:	f3ef 8305 	mrs	r3, IPSR
 8009a0e:	607b      	str	r3, [r7, #4]
  return(result);
 8009a10:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2301      	movne	r3, #1
 8009a18:	2300      	moveq	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009a2c:	f001 fd6c 	bl	800b508 <vTaskStartScheduler>
  
  return osOK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009a3a:	f7ff ffe3 	bl	8009a04 <inHandlerMode>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009a44:	f001 fe68 	bl	800b718 <xTaskGetTickCountFromISR>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	e002      	b.n	8009a52 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009a4c:	f001 fe54 	bl	800b6f8 <xTaskGetTickCount>
 8009a50:	4603      	mov	r3, r0
  }
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a58:	b087      	sub	sp, #28
 8009a5a:	af02      	add	r7, sp, #8
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685c      	ldr	r4, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a6c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7ff ffad 	bl	80099d4 <makeFreeRtosPriority>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	f107 030c 	add.w	r3, r7, #12
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	9200      	str	r2, [sp, #0]
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	4632      	mov	r2, r6
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f001 fb46 	bl	800b11c <xTaskCreate>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d001      	beq.n	8009a9a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aa4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f001 fc67 	bl	800b380 <vTaskDelete>
  return osOK;
 8009ab2:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3708      	adds	r7, #8
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	085b      	lsrs	r3, r3, #1
 8009ac8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <osDelay+0x18>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	e000      	b.n	8009ad6 <osDelay+0x1a>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f001 fce2 	bl	800b4a0 <vTaskDelay>
  
  return osOK;
 8009adc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009aee:	2001      	movs	r0, #1
 8009af0:	f000 fc9b 	bl	800a42a <xQueueCreateMutex>
 8009af4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
	...

08009b00 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <osMutexWait+0x18>
    return osErrorParameter;
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	e03b      	b.n	8009b90 <osMutexWait+0x90>
  }
  
  ticks = 0;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d103      	bne.n	8009b2c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009b24:	f04f 33ff 	mov.w	r3, #4294967295
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	e00a      	b.n	8009b42 <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	085b      	lsrs	r3, r3, #1
 8009b36:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <osMutexWait+0x42>
      ticks = 1;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009b42:	f7ff ff5f 	bl	8009a04 <inHandlerMode>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	461a      	mov	r2, r3
 8009b52:	2100      	movs	r1, #0
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f001 f893 	bl	800ac80 <xQueueReceiveFromISR>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d001      	beq.n	8009b64 <osMutexWait+0x64>
      return osErrorOS;
 8009b60:	23ff      	movs	r3, #255	; 0xff
 8009b62:	e015      	b.n	8009b90 <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d011      	beq.n	8009b8e <osMutexWait+0x8e>
 8009b6a:	4b0b      	ldr	r3, [pc, #44]	; (8009b98 <osMutexWait+0x98>)
 8009b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	e008      	b.n	8009b8e <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009b7c:	68f9      	ldr	r1, [r7, #12]
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 ff72 	bl	800aa68 <xQueueSemaphoreTake>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d001      	beq.n	8009b8e <osMutexWait+0x8e>
    return osErrorOS;
 8009b8a:	23ff      	movs	r3, #255	; 0xff
 8009b8c:	e000      	b.n	8009b90 <osMutexWait+0x90>
  }
  
  return osOK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	e000ed04 	.word	0xe000ed04

08009b9c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b084      	sub	sp, #16
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009bac:	f7ff ff2a 	bl	8009a04 <inHandlerMode>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d016      	beq.n	8009be4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fde6 	bl	800a78e <xQueueGiveFromISR>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d001      	beq.n	8009bcc <osMutexRelease+0x30>
      return osErrorOS;
 8009bc8:	23ff      	movs	r3, #255	; 0xff
 8009bca:	e017      	b.n	8009bfc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d013      	beq.n	8009bfa <osMutexRelease+0x5e>
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <osMutexRelease+0x68>)
 8009bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	e00a      	b.n	8009bfa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009be4:	2300      	movs	r3, #0
 8009be6:	2200      	movs	r2, #0
 8009be8:	2100      	movs	r1, #0
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fc36 	bl	800a45c <xQueueGenericSend>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d001      	beq.n	8009bfa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009bf6:	23ff      	movs	r3, #255	; 0xff
 8009bf8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}
 8009c04:	e000ed04 	.word	0xe000ed04

08009c08 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009c10:	f7ff fef8 	bl	8009a04 <inHandlerMode>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <osMutexDelete+0x16>
    return osErrorISR;
 8009c1a:	2382      	movs	r3, #130	; 0x82
 8009c1c:	e003      	b.n	8009c26 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f001 f8ae 	bl	800ad80 <vQueueDelete>

  return osOK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b082      	sub	sp, #8
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6818      	ldr	r0, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	4619      	mov	r1, r3
 8009c44:	f000 fb82 	bl	800a34c <xQueueGenericCreate>
 8009c48:	4603      	mov	r3, r0
#endif
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009c60:	2300      	movs	r3, #0
 8009c62:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	085b      	lsrs	r3, r3, #1
 8009c68:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <osMessagePut+0x20>
    ticks = 1;
 8009c70:	2301      	movs	r3, #1
 8009c72:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009c74:	f7ff fec6 	bl	8009a04 <inHandlerMode>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d018      	beq.n	8009cb0 <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009c7e:	f107 0210 	add.w	r2, r7, #16
 8009c82:	f107 0108 	add.w	r1, r7, #8
 8009c86:	2300      	movs	r3, #0
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 fce5 	bl	800a658 <xQueueGenericSendFromISR>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d001      	beq.n	8009c98 <osMessagePut+0x44>
      return osErrorOS;
 8009c94:	23ff      	movs	r3, #255	; 0xff
 8009c96:	e018      	b.n	8009cca <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d014      	beq.n	8009cc8 <osMessagePut+0x74>
 8009c9e:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <osMessagePut+0x80>)
 8009ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	e00b      	b.n	8009cc8 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fbcf 	bl	800a45c <xQueueGenericSend>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d001      	beq.n	8009cc8 <osMessagePut+0x74>
      return osErrorOS;
 8009cc4:	23ff      	movs	r3, #255	; 0xff
 8009cc6:	e000      	b.n	8009cca <osMessagePut+0x76>
    }
  }
  
  return osOK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b08b      	sub	sp, #44	; 0x2c
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009cf2:	2380      	movs	r3, #128	; 0x80
 8009cf4:	617b      	str	r3, [r7, #20]
    return event;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	461c      	mov	r4, r3
 8009cfa:	f107 0314 	add.w	r3, r7, #20
 8009cfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d06:	e055      	b.n	8009db4 <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d16:	d103      	bne.n	8009d20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009d18:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d1e:	e00a      	b.n	8009d36 <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d007      	beq.n	8009d36 <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <osMessageGet+0x5e>
      ticks = 1;
 8009d32:	2301      	movs	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009d36:	f7ff fe65 	bl	8009a04 <inHandlerMode>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01c      	beq.n	8009d7a <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009d40:	f107 0220 	add.w	r2, r7, #32
 8009d44:	f107 0314 	add.w	r3, r7, #20
 8009d48:	3304      	adds	r3, #4
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	f000 ff97 	bl	800ac80 <xQueueReceiveFromISR>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d102      	bne.n	8009d5e <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 8009d58:	2310      	movs	r3, #16
 8009d5a:	617b      	str	r3, [r7, #20]
 8009d5c:	e001      	b.n	8009d62 <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01d      	beq.n	8009da4 <osMessageGet+0xcc>
 8009d68:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <osMessageGet+0xe4>)
 8009d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	f3bf 8f4f 	dsb	sy
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	e014      	b.n	8009da4 <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009d7a:	f107 0314 	add.w	r3, r7, #20
 8009d7e:	3304      	adds	r3, #4
 8009d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d82:	4619      	mov	r1, r3
 8009d84:	68b8      	ldr	r0, [r7, #8]
 8009d86:	f000 fd8f 	bl	800a8a8 <xQueueReceive>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d102      	bne.n	8009d96 <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 8009d90:	2310      	movs	r3, #16
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e006      	b.n	8009da4 <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <osMessageGet+0xc8>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e000      	b.n	8009da2 <osMessageGet+0xca>
 8009da0:	2340      	movs	r3, #64	; 0x40
 8009da2:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	461c      	mov	r4, r3
 8009da8:	f107 0314 	add.w	r3, r7, #20
 8009dac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	372c      	adds	r7, #44	; 0x2c
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd90      	pop	{r4, r7, pc}
 8009dbc:	e000ed04 	.word	0xe000ed04

08009dc0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009dc4:	f002 f858 	bl	800be78 <xTaskGetSchedulerState>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d001      	beq.n	8009dd2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8009dce:	f002 ff9b 	bl	800cd08 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8009dd2:	bf00      	nop
 8009dd4:	bd80      	pop	{r7, pc}

08009dd6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009dd6:	b580      	push	{r7, lr}
 8009dd8:	b082      	sub	sp, #8
 8009dda:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009ddc:	2018      	movs	r0, #24
 8009dde:	f003 f823 	bl	800ce28 <pvPortMalloc>
 8009de2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d007      	beq.n	8009dfa <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f98d 	bl	800a114 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009dfa:	687b      	ldr	r3, [r7, #4]
	}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b090      	sub	sp, #64	; 0x40
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
 8009e10:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e28:	f383 8811 	msr	BASEPRI, r3
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e36:	bf00      	nop
 8009e38:	e7fe      	b.n	8009e38 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <xEventGroupWaitBits+0x56>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	61fb      	str	r3, [r7, #28]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61bb      	str	r3, [r7, #24]
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e76:	f001 ffff 	bl	800be78 <xTaskGetSchedulerState>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <xEventGroupWaitBits+0x82>
 8009e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <xEventGroupWaitBits+0x86>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <xEventGroupWaitBits+0x88>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	617b      	str	r3, [r7, #20]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009ea6:	f001 fb7d 	bl	800b5a4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eb6:	f000 f90b 	bl	800a0d0 <prvTestWaitCondition>
 8009eba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00e      	beq.n	8009ee0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d028      	beq.n	8009f22 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	43db      	mvns	r3, r3
 8009ed8:	401a      	ands	r2, r3
 8009eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e020      	b.n	8009f22 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009eea:	2301      	movs	r3, #1
 8009eec:	633b      	str	r3, [r7, #48]	; 0x30
 8009eee:	e018      	b.n	8009f22 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d003      	beq.n	8009efe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009efc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d003      	beq.n	8009f0c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f0a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0e:	1d18      	adds	r0, r3, #4
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f14:	4313      	orrs	r3, r2
 8009f16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f18:	4619      	mov	r1, r3
 8009f1a:	f001 fd47 	bl	800b9ac <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009f22:	f001 fb4d 	bl	800b5c0 <xTaskResumeAll>
 8009f26:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d031      	beq.n	8009f92 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d107      	bne.n	8009f44 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009f34:	4b19      	ldr	r3, [pc, #100]	; (8009f9c <xEventGroupWaitBits+0x198>)
 8009f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009f44:	f002 f940 	bl	800c1c8 <uxTaskResetEventItemValue>
 8009f48:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d11a      	bne.n	8009f8a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009f54:	f002 fe46 	bl	800cbe4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	68b9      	ldr	r1, [r7, #8]
 8009f62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f64:	f000 f8b4 	bl	800a0d0 <prvTestWaitCondition>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d009      	beq.n	8009f82 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d006      	beq.n	8009f82 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	401a      	ands	r2, r3
 8009f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f80:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009f82:	2301      	movs	r3, #1
 8009f84:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009f86:	f002 fe5d 	bl	800cc44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009f90:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3740      	adds	r7, #64	; 0x40
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b08e      	sub	sp, #56	; 0x38
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009faa:	2300      	movs	r3, #0
 8009fac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d10a      	bne.n	8009fd2 <xEventGroupSetBits+0x32>
	__asm volatile
 8009fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc0:	f383 8811 	msr	BASEPRI, r3
 8009fc4:	f3bf 8f6f 	isb	sy
 8009fc8:	f3bf 8f4f 	dsb	sy
 8009fcc:	613b      	str	r3, [r7, #16]
}
 8009fce:	bf00      	nop
 8009fd0:	e7fe      	b.n	8009fd0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00a      	beq.n	8009ff2 <xEventGroupSetBits+0x52>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	60fb      	str	r3, [r7, #12]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009ffe:	f001 fad1 	bl	800b5a4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	431a      	orrs	r2, r3
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a014:	e03c      	b.n	800a090 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a02c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a034:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d108      	bne.n	800a052 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	4013      	ands	r3, r2
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00b      	beq.n	800a064 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a04c:	2301      	movs	r3, #1
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a050:	e008      	b.n	800a064 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	4013      	ands	r3, r2
 800a05a:	69ba      	ldr	r2, [r7, #24]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d101      	bne.n	800a064 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a060:	2301      	movs	r3, #1
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d010      	beq.n	800a08c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	4313      	orrs	r3, r2
 800a07a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a084:	4619      	mov	r1, r3
 800a086:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a088:	f001 fd5a 	bl	800bb40 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	429a      	cmp	r2, r3
 800a096:	d1be      	bne.n	800a016 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	43db      	mvns	r3, r3
 800a0a0:	401a      	ands	r2, r3
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a0a6:	f001 fa8b 	bl	800b5c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	681b      	ldr	r3, [r3, #0]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3738      	adds	r7, #56	; 0x38
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b082      	sub	sp, #8
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff ff6c 	bl	8009fa0 <xEventGroupSetBits>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d107      	bne.n	800a0f6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00a      	beq.n	800a106 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	617b      	str	r3, [r7, #20]
 800a0f4:	e007      	b.n	800a106 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d101      	bne.n	800a106 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a102:	2301      	movs	r3, #1
 800a104:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a106:	697b      	ldr	r3, [r7, #20]
}
 800a108:	4618      	mov	r0, r3
 800a10a:	371c      	adds	r7, #28
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f103 0208 	add.w	r2, r3, #8
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f04f 32ff 	mov.w	r2, #4294967295
 800a12c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f103 0208 	add.w	r2, r3, #8
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f103 0208 	add.w	r2, r3, #8
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr

0800a16e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a16e:	b480      	push	{r7}
 800a170:	b085      	sub	sp, #20
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	689a      	ldr	r2, [r3, #8]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	601a      	str	r2, [r3, #0]
}
 800a1aa:	bf00      	nop
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b085      	sub	sp, #20
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d103      	bne.n	800a1d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	60fb      	str	r3, [r7, #12]
 800a1d4:	e00c      	b.n	800a1f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e002      	b.n	800a1e4 <vListInsert+0x2e>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d2f6      	bcs.n	800a1de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	601a      	str	r2, [r3, #0]
}
 800a21c:	bf00      	nop
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	6892      	ldr	r2, [r2, #8]
 800a23e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	6852      	ldr	r2, [r2, #4]
 800a248:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	687a      	ldr	r2, [r7, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d103      	bne.n	800a25c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	1e5a      	subs	r2, r3, #1
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10a      	bne.n	800a2a6 <xQueueGenericReset+0x2a>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	60bb      	str	r3, [r7, #8]
}
 800a2a2:	bf00      	nop
 800a2a4:	e7fe      	b.n	800a2a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2a6:	f002 fc9d 	bl	800cbe4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b2:	68f9      	ldr	r1, [r7, #12]
 800a2b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2b6:	fb01 f303 	mul.w	r3, r1, r3
 800a2ba:	441a      	add	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	68f9      	ldr	r1, [r7, #12]
 800a2da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2dc:	fb01 f303 	mul.w	r3, r1, r3
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	22ff      	movs	r2, #255	; 0xff
 800a2ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	22ff      	movs	r2, #255	; 0xff
 800a2f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d114      	bne.n	800a326 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d01a      	beq.n	800a33a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	3310      	adds	r3, #16
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 fbb7 	bl	800ba7c <xTaskRemoveFromEventList>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d012      	beq.n	800a33a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a314:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <xQueueGenericReset+0xcc>)
 800a316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31a:	601a      	str	r2, [r3, #0]
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	e009      	b.n	800a33a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3310      	adds	r3, #16
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fef2 	bl	800a114 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	3324      	adds	r3, #36	; 0x24
 800a334:	4618      	mov	r0, r3
 800a336:	f7ff feed 	bl	800a114 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a33a:	f002 fc83 	bl	800cc44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a33e:	2301      	movs	r3, #1
}
 800a340:	4618      	mov	r0, r3
 800a342:	3710      	adds	r7, #16
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08a      	sub	sp, #40	; 0x28
 800a350:	af02      	add	r7, sp, #8
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	4613      	mov	r3, r2
 800a358:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10a      	bne.n	800a376 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
}
 800a372:	bf00      	nop
 800a374:	e7fe      	b.n	800a374 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68ba      	ldr	r2, [r7, #8]
 800a37a:	fb02 f303 	mul.w	r3, r2, r3
 800a37e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	3348      	adds	r3, #72	; 0x48
 800a384:	4618      	mov	r0, r3
 800a386:	f002 fd4f 	bl	800ce28 <pvPortMalloc>
 800a38a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00d      	beq.n	800a3ae <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	3348      	adds	r3, #72	; 0x48
 800a39a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a39c:	79fa      	ldrb	r2, [r7, #7]
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	697a      	ldr	r2, [r7, #20]
 800a3a6:	68b9      	ldr	r1, [r7, #8]
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 f805 	bl	800a3b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3ae:	69bb      	ldr	r3, [r7, #24]
	}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
 800a3c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d103      	bne.n	800a3d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3cc:	69bb      	ldr	r3, [r7, #24]
 800a3ce:	69ba      	ldr	r2, [r7, #24]
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	e002      	b.n	800a3da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	69b8      	ldr	r0, [r7, #24]
 800a3ea:	f7ff ff47 	bl	800a27c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b082      	sub	sp, #8
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00e      	beq.n	800a422 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2200      	movs	r2, #0
 800a414:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a416:	2300      	movs	r3, #0
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f81d 	bl	800a45c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b086      	sub	sp, #24
 800a42e:	af00      	add	r7, sp, #0
 800a430:	4603      	mov	r3, r0
 800a432:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a434:	2301      	movs	r3, #1
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	2300      	movs	r3, #0
 800a43a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a43c:	79fb      	ldrb	r3, [r7, #7]
 800a43e:	461a      	mov	r2, r3
 800a440:	6939      	ldr	r1, [r7, #16]
 800a442:	6978      	ldr	r0, [r7, #20]
 800a444:	f7ff ff82 	bl	800a34c <xQueueGenericCreate>
 800a448:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff ffd3 	bl	800a3f6 <prvInitialiseMutex>

		return xNewQueue;
 800a450:	68fb      	ldr	r3, [r7, #12]
	}
 800a452:	4618      	mov	r0, r3
 800a454:	3718      	adds	r7, #24
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08e      	sub	sp, #56	; 0x38
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a46a:	2300      	movs	r3, #0
 800a46c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xQueueGenericSend+0x32>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d103      	bne.n	800a49c <xQueueGenericSend+0x40>
 800a494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d101      	bne.n	800a4a0 <xQueueGenericSend+0x44>
 800a49c:	2301      	movs	r3, #1
 800a49e:	e000      	b.n	800a4a2 <xQueueGenericSend+0x46>
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10a      	bne.n	800a4bc <xQueueGenericSend+0x60>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d103      	bne.n	800a4ca <xQueueGenericSend+0x6e>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <xQueueGenericSend+0x72>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e000      	b.n	800a4d0 <xQueueGenericSend+0x74>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <xQueueGenericSend+0x8e>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	623b      	str	r3, [r7, #32]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4ea:	f001 fcc5 	bl	800be78 <xTaskGetSchedulerState>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <xQueueGenericSend+0x9e>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d101      	bne.n	800a4fe <xQueueGenericSend+0xa2>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <xQueueGenericSend+0xa4>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueGenericSend+0xbe>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61fb      	str	r3, [r7, #28]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a51a:	f002 fb63 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	429a      	cmp	r2, r3
 800a528:	d302      	bcc.n	800a530 <xQueueGenericSend+0xd4>
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d129      	bne.n	800a584 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	68b9      	ldr	r1, [r7, #8]
 800a534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a536:	f000 fc59 	bl	800adec <prvCopyDataToQueue>
 800a53a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a540:	2b00      	cmp	r3, #0
 800a542:	d010      	beq.n	800a566 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	3324      	adds	r3, #36	; 0x24
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 fa97 	bl	800ba7c <xTaskRemoveFromEventList>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d013      	beq.n	800a57c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a554:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <xQueueGenericSend+0x1f8>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	e00a      	b.n	800a57c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d007      	beq.n	800a57c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a56c:	4b39      	ldr	r3, [pc, #228]	; (800a654 <xQueueGenericSend+0x1f8>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a57c:	f002 fb62 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a580:	2301      	movs	r3, #1
 800a582:	e063      	b.n	800a64c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a58a:	f002 fb5b 	bl	800cc44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	e05c      	b.n	800a64c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a594:	2b00      	cmp	r3, #0
 800a596:	d106      	bne.n	800a5a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a598:	f107 0314 	add.w	r3, r7, #20
 800a59c:	4618      	mov	r0, r3
 800a59e:	f001 fb31 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a5a6:	f002 fb4d 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a5aa:	f000 fffb 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a5ae:	f002 fb19 	bl	800cbe4 <vPortEnterCritical>
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5b8:	b25b      	sxtb	r3, r3
 800a5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5be:	d103      	bne.n	800a5c8 <xQueueGenericSend+0x16c>
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5ce:	b25b      	sxtb	r3, r3
 800a5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d4:	d103      	bne.n	800a5de <xQueueGenericSend+0x182>
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5de:	f002 fb31 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5e2:	1d3a      	adds	r2, r7, #4
 800a5e4:	f107 0314 	add.w	r3, r7, #20
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f001 fb20 	bl	800bc30 <xTaskCheckForTimeOut>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d124      	bne.n	800a640 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5f8:	f000 fcf0 	bl	800afdc <prvIsQueueFull>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d018      	beq.n	800a634 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	3310      	adds	r3, #16
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 f9aa 	bl	800b964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a612:	f000 fc7b 	bl	800af0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a616:	f000 ffd3 	bl	800b5c0 <xTaskResumeAll>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f47f af7c 	bne.w	800a51a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a622:	4b0c      	ldr	r3, [pc, #48]	; (800a654 <xQueueGenericSend+0x1f8>)
 800a624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	e772      	b.n	800a51a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a636:	f000 fc69 	bl	800af0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a63a:	f000 ffc1 	bl	800b5c0 <xTaskResumeAll>
 800a63e:	e76c      	b.n	800a51a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a642:	f000 fc63 	bl	800af0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a646:	f000 ffbb 	bl	800b5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a64a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3738      	adds	r7, #56	; 0x38
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	e000ed04 	.word	0xe000ed04

0800a658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b090      	sub	sp, #64	; 0x40
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
 800a664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10a      	bne.n	800a686 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a682:	bf00      	nop
 800a684:	e7fe      	b.n	800a684 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d103      	bne.n	800a694 <xQueueGenericSendFromISR+0x3c>
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a690:	2b00      	cmp	r3, #0
 800a692:	d101      	bne.n	800a698 <xQueueGenericSendFromISR+0x40>
 800a694:	2301      	movs	r3, #1
 800a696:	e000      	b.n	800a69a <xQueueGenericSendFromISR+0x42>
 800a698:	2300      	movs	r3, #0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a6b0:	bf00      	nop
 800a6b2:	e7fe      	b.n	800a6b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <xQueueGenericSendFromISR+0x6a>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <xQueueGenericSendFromISR+0x6e>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e000      	b.n	800a6c8 <xQueueGenericSendFromISR+0x70>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10a      	bne.n	800a6e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	623b      	str	r3, [r7, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6e2:	f002 fb61 	bl	800cda8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6e6:	f3ef 8211 	mrs	r2, BASEPRI
 800a6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	61fa      	str	r2, [r7, #28]
 800a6fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a700:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d302      	bcc.n	800a714 <xQueueGenericSendFromISR+0xbc>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d12f      	bne.n	800a774 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a722:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a724:	683a      	ldr	r2, [r7, #0]
 800a726:	68b9      	ldr	r1, [r7, #8]
 800a728:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a72a:	f000 fb5f 	bl	800adec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a72e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a736:	d112      	bne.n	800a75e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d016      	beq.n	800a76e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a742:	3324      	adds	r3, #36	; 0x24
 800a744:	4618      	mov	r0, r3
 800a746:	f001 f999 	bl	800ba7c <xTaskRemoveFromEventList>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00e      	beq.n	800a76e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00b      	beq.n	800a76e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	e007      	b.n	800a76e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a75e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a762:	3301      	adds	r3, #1
 800a764:	b2db      	uxtb	r3, r3
 800a766:	b25a      	sxtb	r2, r3
 800a768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a76e:	2301      	movs	r3, #1
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a772:	e001      	b.n	800a778 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a782:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a786:	4618      	mov	r0, r3
 800a788:	3740      	adds	r7, #64	; 0x40
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b08e      	sub	sp, #56	; 0x38
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	623b      	str	r3, [r7, #32]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	61fb      	str	r3, [r7, #28]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d103      	bne.n	800a7e6 <xQueueGiveFromISR+0x58>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <xQueueGiveFromISR+0x5c>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e000      	b.n	800a7ec <xQueueGiveFromISR+0x5e>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d10a      	bne.n	800a806 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	61bb      	str	r3, [r7, #24]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a806:	f002 facf 	bl	800cda8 <vPortValidateInterruptPriority>
	__asm volatile
 800a80a:	f3ef 8211 	mrs	r2, BASEPRI
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	617a      	str	r2, [r7, #20]
 800a820:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a822:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a824:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a832:	429a      	cmp	r2, r3
 800a834:	d22b      	bcs.n	800a88e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a838:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a83c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a842:	1c5a      	adds	r2, r3, #1
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a848:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a850:	d112      	bne.n	800a878 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a856:	2b00      	cmp	r3, #0
 800a858:	d016      	beq.n	800a888 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	3324      	adds	r3, #36	; 0x24
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 f90c 	bl	800ba7c <xTaskRemoveFromEventList>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d00e      	beq.n	800a888 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00b      	beq.n	800a888 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2201      	movs	r2, #1
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e007      	b.n	800a888 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a87c:	3301      	adds	r3, #1
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	b25a      	sxtb	r2, r3
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a888:	2301      	movs	r3, #1
 800a88a:	637b      	str	r3, [r7, #52]	; 0x34
 800a88c:	e001      	b.n	800a892 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f383 8811 	msr	BASEPRI, r3
}
 800a89c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3738      	adds	r7, #56	; 0x38
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08c      	sub	sp, #48	; 0x30
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <xQueueReceive+0x30>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	623b      	str	r3, [r7, #32]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d103      	bne.n	800a8e6 <xQueueReceive+0x3e>
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <xQueueReceive+0x42>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e000      	b.n	800a8ec <xQueueReceive+0x44>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xQueueReceive+0x5e>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	61fb      	str	r3, [r7, #28]
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a906:	f001 fab7 	bl	800be78 <xTaskGetSchedulerState>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d102      	bne.n	800a916 <xQueueReceive+0x6e>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <xQueueReceive+0x72>
 800a916:	2301      	movs	r3, #1
 800a918:	e000      	b.n	800a91c <xQueueReceive+0x74>
 800a91a:	2300      	movs	r3, #0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d10a      	bne.n	800a936 <xQueueReceive+0x8e>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	61bb      	str	r3, [r7, #24]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a936:	f002 f955 	bl	800cbe4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a942:	2b00      	cmp	r3, #0
 800a944:	d01f      	beq.n	800a986 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a946:	68b9      	ldr	r1, [r7, #8]
 800a948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a94a:	f000 fab9 	bl	800aec0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	1e5a      	subs	r2, r3, #1
 800a952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a954:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00f      	beq.n	800a97e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a960:	3310      	adds	r3, #16
 800a962:	4618      	mov	r0, r3
 800a964:	f001 f88a 	bl	800ba7c <xTaskRemoveFromEventList>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d007      	beq.n	800a97e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a96e:	4b3d      	ldr	r3, [pc, #244]	; (800aa64 <xQueueReceive+0x1bc>)
 800a970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a97e:	f002 f961 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800a982:	2301      	movs	r3, #1
 800a984:	e069      	b.n	800aa5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d103      	bne.n	800a994 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a98c:	f002 f95a 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a990:	2300      	movs	r3, #0
 800a992:	e062      	b.n	800aa5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a99a:	f107 0310 	add.w	r3, r7, #16
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f001 f930 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a8:	f002 f94c 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9ac:	f000 fdfa 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b0:	f002 f918 	bl	800cbe4 <vPortEnterCritical>
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c0:	d103      	bne.n	800a9ca <xQueueReceive+0x122>
 800a9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9d0:	b25b      	sxtb	r3, r3
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d6:	d103      	bne.n	800a9e0 <xQueueReceive+0x138>
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e0:	f002 f930 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e4:	1d3a      	adds	r2, r7, #4
 800a9e6:	f107 0310 	add.w	r3, r7, #16
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f001 f91f 	bl	800bc30 <xTaskCheckForTimeOut>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d123      	bne.n	800aa40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9fa:	f000 fad9 	bl	800afb0 <prvIsQueueEmpty>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d017      	beq.n	800aa34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa06:	3324      	adds	r3, #36	; 0x24
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f000 ffa9 	bl	800b964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa14:	f000 fa7a 	bl	800af0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa18:	f000 fdd2 	bl	800b5c0 <xTaskResumeAll>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d189      	bne.n	800a936 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800aa22:	4b10      	ldr	r3, [pc, #64]	; (800aa64 <xQueueReceive+0x1bc>)
 800aa24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	e780      	b.n	800a936 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa36:	f000 fa69 	bl	800af0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa3a:	f000 fdc1 	bl	800b5c0 <xTaskResumeAll>
 800aa3e:	e77a      	b.n	800a936 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa42:	f000 fa63 	bl	800af0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa46:	f000 fdbb 	bl	800b5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4c:	f000 fab0 	bl	800afb0 <prvIsQueueEmpty>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f43f af6f 	beq.w	800a936 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3730      	adds	r7, #48	; 0x30
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
 800aa62:	bf00      	nop
 800aa64:	e000ed04 	.word	0xe000ed04

0800aa68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08e      	sub	sp, #56	; 0x38
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa72:	2300      	movs	r3, #0
 800aa74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d10a      	bne.n	800aa9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800aa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa88:	f383 8811 	msr	BASEPRI, r3
 800aa8c:	f3bf 8f6f 	isb	sy
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	623b      	str	r3, [r7, #32]
}
 800aa96:	bf00      	nop
 800aa98:	e7fe      	b.n	800aa98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800aaa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa6:	f383 8811 	msr	BASEPRI, r3
 800aaaa:	f3bf 8f6f 	isb	sy
 800aaae:	f3bf 8f4f 	dsb	sy
 800aab2:	61fb      	str	r3, [r7, #28]
}
 800aab4:	bf00      	nop
 800aab6:	e7fe      	b.n	800aab6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aab8:	f001 f9de 	bl	800be78 <xTaskGetSchedulerState>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d102      	bne.n	800aac8 <xQueueSemaphoreTake+0x60>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d101      	bne.n	800aacc <xQueueSemaphoreTake+0x64>
 800aac8:	2301      	movs	r3, #1
 800aaca:	e000      	b.n	800aace <xQueueSemaphoreTake+0x66>
 800aacc:	2300      	movs	r3, #0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	f383 8811 	msr	BASEPRI, r3
 800aada:	f3bf 8f6f 	isb	sy
 800aade:	f3bf 8f4f 	dsb	sy
 800aae2:	61bb      	str	r3, [r7, #24]
}
 800aae4:	bf00      	nop
 800aae6:	e7fe      	b.n	800aae6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aae8:	f002 f87c 	bl	800cbe4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aaf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d024      	beq.n	800ab42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab08:	f001 fb76 	bl	800c1f8 <pvTaskIncrementMutexHeldCount>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00f      	beq.n	800ab3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1c:	3310      	adds	r3, #16
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f000 ffac 	bl	800ba7c <xTaskRemoveFromEventList>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab2a:	4b54      	ldr	r3, [pc, #336]	; (800ac7c <xQueueSemaphoreTake+0x214>)
 800ab2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	f3bf 8f4f 	dsb	sy
 800ab36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab3a:	f002 f883 	bl	800cc44 <vPortExitCritical>
				return pdPASS;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e097      	b.n	800ac72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d111      	bne.n	800ab6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ab4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab52:	f383 8811 	msr	BASEPRI, r3
 800ab56:	f3bf 8f6f 	isb	sy
 800ab5a:	f3bf 8f4f 	dsb	sy
 800ab5e:	617b      	str	r3, [r7, #20]
}
 800ab60:	bf00      	nop
 800ab62:	e7fe      	b.n	800ab62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab64:	f002 f86e 	bl	800cc44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e082      	b.n	800ac72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab72:	f107 030c 	add.w	r3, r7, #12
 800ab76:	4618      	mov	r0, r3
 800ab78:	f001 f844 	bl	800bc04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab80:	f002 f860 	bl	800cc44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab84:	f000 fd0e 	bl	800b5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab88:	f002 f82c 	bl	800cbe4 <vPortEnterCritical>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab92:	b25b      	sxtb	r3, r3
 800ab94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab98:	d103      	bne.n	800aba2 <xQueueSemaphoreTake+0x13a>
 800ab9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aba8:	b25b      	sxtb	r3, r3
 800abaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abae:	d103      	bne.n	800abb8 <xQueueSemaphoreTake+0x150>
 800abb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abb8:	f002 f844 	bl	800cc44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abbc:	463a      	mov	r2, r7
 800abbe:	f107 030c 	add.w	r3, r7, #12
 800abc2:	4611      	mov	r1, r2
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 f833 	bl	800bc30 <xTaskCheckForTimeOut>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d132      	bne.n	800ac36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abd2:	f000 f9ed 	bl	800afb0 <prvIsQueueEmpty>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d026      	beq.n	800ac2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d109      	bne.n	800abf8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800abe4:	f001 fffe 	bl	800cbe4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f001 f961 	bl	800beb4 <xTaskPriorityInherit>
 800abf2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abf4:	f002 f826 	bl	800cc44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfa:	3324      	adds	r3, #36	; 0x24
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 feaf 	bl	800b964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac08:	f000 f980 	bl	800af0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac0c:	f000 fcd8 	bl	800b5c0 <xTaskResumeAll>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f47f af68 	bne.w	800aae8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ac18:	4b18      	ldr	r3, [pc, #96]	; (800ac7c <xQueueSemaphoreTake+0x214>)
 800ac1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	e75e      	b.n	800aae8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac2c:	f000 f96e 	bl	800af0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac30:	f000 fcc6 	bl	800b5c0 <xTaskResumeAll>
 800ac34:	e758      	b.n	800aae8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac38:	f000 f968 	bl	800af0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac3c:	f000 fcc0 	bl	800b5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac42:	f000 f9b5 	bl	800afb0 <prvIsQueueEmpty>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f43f af4d 	beq.w	800aae8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00d      	beq.n	800ac70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ac54:	f001 ffc6 	bl	800cbe4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac5a:	f000 f8af 	bl	800adbc <prvGetDisinheritPriorityAfterTimeout>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 fa20 	bl	800c0ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac6c:	f001 ffea 	bl	800cc44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3738      	adds	r7, #56	; 0x38
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	e000ed04 	.word	0xe000ed04

0800ac80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b08e      	sub	sp, #56	; 0x38
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10a      	bne.n	800acac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	623b      	str	r3, [r7, #32]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d103      	bne.n	800acba <xQueueReceiveFromISR+0x3a>
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <xQueueReceiveFromISR+0x3e>
 800acba:	2301      	movs	r3, #1
 800acbc:	e000      	b.n	800acc0 <xQueueReceiveFromISR+0x40>
 800acbe:	2300      	movs	r3, #0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10a      	bne.n	800acda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	61fb      	str	r3, [r7, #28]
}
 800acd6:	bf00      	nop
 800acd8:	e7fe      	b.n	800acd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acda:	f002 f865 	bl	800cda8 <vPortValidateInterruptPriority>
	__asm volatile
 800acde:	f3ef 8211 	mrs	r2, BASEPRI
 800ace2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace6:	f383 8811 	msr	BASEPRI, r3
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	f3bf 8f4f 	dsb	sy
 800acf2:	61ba      	str	r2, [r7, #24]
 800acf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d02f      	beq.n	800ad66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad10:	68b9      	ldr	r1, [r7, #8]
 800ad12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad14:	f000 f8d4 	bl	800aec0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1a:	1e5a      	subs	r2, r3, #1
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ad24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad28:	d112      	bne.n	800ad50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d016      	beq.n	800ad60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad34:	3310      	adds	r3, #16
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fea0 	bl	800ba7c <xTaskRemoveFromEventList>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00e      	beq.n	800ad60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d00b      	beq.n	800ad60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	e007      	b.n	800ad60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad54:	3301      	adds	r3, #1
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	b25a      	sxtb	r2, r3
 800ad5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad60:	2301      	movs	r3, #1
 800ad62:	637b      	str	r3, [r7, #52]	; 0x34
 800ad64:	e001      	b.n	800ad6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	637b      	str	r3, [r7, #52]	; 0x34
 800ad6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f383 8811 	msr	BASEPRI, r3
}
 800ad74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3738      	adds	r7, #56	; 0x38
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vQueueDelete+0x28>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60bb      	str	r3, [r7, #8]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f000 f959 	bl	800b060 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f002 f906 	bl	800cfc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800adb4:	bf00      	nop
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d006      	beq.n	800adda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f1c3 0307 	rsb	r3, r3, #7
 800add6:	60fb      	str	r3, [r7, #12]
 800add8:	e001      	b.n	800adde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800adde:	68fb      	ldr	r3, [r7, #12]
	}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800adf8:	2300      	movs	r3, #0
 800adfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10d      	bne.n	800ae26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d14d      	bne.n	800aeae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f001 f8c2 	bl	800bfa0 <xTaskPriorityDisinherit>
 800ae1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	609a      	str	r2, [r3, #8]
 800ae24:	e043      	b.n	800aeae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d119      	bne.n	800ae60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6858      	ldr	r0, [r3, #4]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae34:	461a      	mov	r2, r3
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	f011 fa1d 	bl	801c276 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	685a      	ldr	r2, [r3, #4]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae44:	441a      	add	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	685a      	ldr	r2, [r3, #4]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d32b      	bcc.n	800aeae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	605a      	str	r2, [r3, #4]
 800ae5e:	e026      	b.n	800aeae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	68d8      	ldr	r0, [r3, #12]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae68:	461a      	mov	r2, r3
 800ae6a:	68b9      	ldr	r1, [r7, #8]
 800ae6c:	f011 fa03 	bl	801c276 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	68da      	ldr	r2, [r3, #12]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	425b      	negs	r3, r3
 800ae7a:	441a      	add	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d207      	bcs.n	800ae9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae94:	425b      	negs	r3, r3
 800ae96:	441a      	add	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d105      	bne.n	800aeae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	1c5a      	adds	r2, r3, #1
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aeb6:	697b      	ldr	r3, [r7, #20]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d018      	beq.n	800af04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	441a      	add	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d303      	bcc.n	800aef4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68d9      	ldr	r1, [r3, #12]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefc:	461a      	mov	r2, r3
 800aefe:	6838      	ldr	r0, [r7, #0]
 800af00:	f011 f9b9 	bl	801c276 <memcpy>
	}
}
 800af04:	bf00      	nop
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af14:	f001 fe66 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af20:	e011      	b.n	800af46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af26:	2b00      	cmp	r3, #0
 800af28:	d012      	beq.n	800af50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3324      	adds	r3, #36	; 0x24
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 fda4 	bl	800ba7c <xTaskRemoveFromEventList>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d001      	beq.n	800af3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af3a:	f000 fedb 	bl	800bcf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	3b01      	subs	r3, #1
 800af42:	b2db      	uxtb	r3, r3
 800af44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dce9      	bgt.n	800af22 <prvUnlockQueue+0x16>
 800af4e:	e000      	b.n	800af52 <prvUnlockQueue+0x46>
					break;
 800af50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af5a:	f001 fe73 	bl	800cc44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af5e:	f001 fe41 	bl	800cbe4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af6a:	e011      	b.n	800af90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d012      	beq.n	800af9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	3310      	adds	r3, #16
 800af78:	4618      	mov	r0, r3
 800af7a:	f000 fd7f 	bl	800ba7c <xTaskRemoveFromEventList>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d001      	beq.n	800af88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af84:	f000 feb6 	bl	800bcf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af88:	7bbb      	ldrb	r3, [r7, #14]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af94:	2b00      	cmp	r3, #0
 800af96:	dce9      	bgt.n	800af6c <prvUnlockQueue+0x60>
 800af98:	e000      	b.n	800af9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	22ff      	movs	r2, #255	; 0xff
 800afa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800afa4:	f001 fe4e 	bl	800cc44 <vPortExitCritical>
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afb8:	f001 fe14 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d102      	bne.n	800afca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afc4:	2301      	movs	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e001      	b.n	800afce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afca:	2300      	movs	r3, #0
 800afcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afce:	f001 fe39 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800afd2:	68fb      	ldr	r3, [r7, #12]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afe4:	f001 fdfe 	bl	800cbe4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d102      	bne.n	800affa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aff4:	2301      	movs	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	e001      	b.n	800affe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800affa:	2300      	movs	r3, #0
 800affc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800affe:	f001 fe21 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800b002:	68fb      	ldr	r3, [r7, #12]
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b00c:	b480      	push	{r7}
 800b00e:	b085      	sub	sp, #20
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b016:	2300      	movs	r3, #0
 800b018:	60fb      	str	r3, [r7, #12]
 800b01a:	e014      	b.n	800b046 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b01c:	4a0f      	ldr	r2, [pc, #60]	; (800b05c <vQueueAddToRegistry+0x50>)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10b      	bne.n	800b040 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b028:	490c      	ldr	r1, [pc, #48]	; (800b05c <vQueueAddToRegistry+0x50>)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b032:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <vQueueAddToRegistry+0x50>)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	4413      	add	r3, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b03e:	e006      	b.n	800b04e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	3301      	adds	r3, #1
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b07      	cmp	r3, #7
 800b04a:	d9e7      	bls.n	800b01c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	3714      	adds	r7, #20
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20001484 	.word	0x20001484

0800b060 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b068:	2300      	movs	r3, #0
 800b06a:	60fb      	str	r3, [r7, #12]
 800b06c:	e016      	b.n	800b09c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b06e:	4a10      	ldr	r2, [pc, #64]	; (800b0b0 <vQueueUnregisterQueue+0x50>)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	00db      	lsls	r3, r3, #3
 800b074:	4413      	add	r3, r2
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d10b      	bne.n	800b096 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b07e:	4a0c      	ldr	r2, [pc, #48]	; (800b0b0 <vQueueUnregisterQueue+0x50>)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2100      	movs	r1, #0
 800b084:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b088:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <vQueueUnregisterQueue+0x50>)
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	4413      	add	r3, r2
 800b090:	2200      	movs	r2, #0
 800b092:	605a      	str	r2, [r3, #4]
				break;
 800b094:	e006      	b.n	800b0a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3301      	adds	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b07      	cmp	r3, #7
 800b0a0:	d9e5      	bls.n	800b06e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr
 800b0b0:	20001484 	.word	0x20001484

0800b0b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0c4:	f001 fd8e 	bl	800cbe4 <vPortEnterCritical>
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0ce:	b25b      	sxtb	r3, r3
 800b0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0d4:	d103      	bne.n	800b0de <vQueueWaitForMessageRestricted+0x2a>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e4:	b25b      	sxtb	r3, r3
 800b0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ea:	d103      	bne.n	800b0f4 <vQueueWaitForMessageRestricted+0x40>
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0f4:	f001 fda6 	bl	800cc44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d106      	bne.n	800b10e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	3324      	adds	r3, #36	; 0x24
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	4618      	mov	r0, r3
 800b10a:	f000 fc8b 	bl	800ba24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b10e:	6978      	ldr	r0, [r7, #20]
 800b110:	f7ff fefc 	bl	800af0c <prvUnlockQueue>
	}
 800b114:	bf00      	nop
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08c      	sub	sp, #48	; 0x30
 800b120:	af04      	add	r7, sp, #16
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	603b      	str	r3, [r7, #0]
 800b128:	4613      	mov	r3, r2
 800b12a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fe79 	bl	800ce28 <pvPortMalloc>
 800b136:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d00e      	beq.n	800b15c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b13e:	2054      	movs	r0, #84	; 0x54
 800b140:	f001 fe72 	bl	800ce28 <pvPortMalloc>
 800b144:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	697a      	ldr	r2, [r7, #20]
 800b150:	631a      	str	r2, [r3, #48]	; 0x30
 800b152:	e005      	b.n	800b160 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b154:	6978      	ldr	r0, [r7, #20]
 800b156:	f001 ff33 	bl	800cfc0 <vPortFree>
 800b15a:	e001      	b.n	800b160 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b15c:	2300      	movs	r3, #0
 800b15e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b160:	69fb      	ldr	r3, [r7, #28]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d013      	beq.n	800b18e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b166:	88fa      	ldrh	r2, [r7, #6]
 800b168:	2300      	movs	r3, #0
 800b16a:	9303      	str	r3, [sp, #12]
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	9302      	str	r3, [sp, #8]
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	68b9      	ldr	r1, [r7, #8]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f000 f80e 	bl	800b19e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b182:	69f8      	ldr	r0, [r7, #28]
 800b184:	f000 f892 	bl	800b2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b188:	2301      	movs	r3, #1
 800b18a:	61bb      	str	r3, [r7, #24]
 800b18c:	e002      	b.n	800b194 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b18e:	f04f 33ff 	mov.w	r3, #4294967295
 800b192:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b194:	69bb      	ldr	r3, [r7, #24]
	}
 800b196:	4618      	mov	r0, r3
 800b198:	3720      	adds	r7, #32
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b088      	sub	sp, #32
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	607a      	str	r2, [r7, #4]
 800b1aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	f023 0307 	bic.w	r3, r3, #7
 800b1c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f003 0307 	and.w	r3, r3, #7
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	617b      	str	r3, [r7, #20]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01f      	beq.n	800b22c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	e012      	b.n	800b218 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1f2:	68ba      	ldr	r2, [r7, #8]
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	7819      	ldrb	r1, [r3, #0]
 800b1fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	3334      	adds	r3, #52	; 0x34
 800b202:	460a      	mov	r2, r1
 800b204:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	4413      	add	r3, r2
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d006      	beq.n	800b220 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	3301      	adds	r3, #1
 800b216:	61fb      	str	r3, [r7, #28]
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	2b0f      	cmp	r3, #15
 800b21c:	d9e9      	bls.n	800b1f2 <prvInitialiseNewTask+0x54>
 800b21e:	e000      	b.n	800b222 <prvInitialiseNewTask+0x84>
			{
				break;
 800b220:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	2200      	movs	r2, #0
 800b226:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b22a:	e003      	b.n	800b234 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	2b06      	cmp	r3, #6
 800b238:	d901      	bls.n	800b23e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b23a:	2306      	movs	r3, #6
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b248:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	2200      	movs	r2, #0
 800b24e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	3304      	adds	r3, #4
 800b254:	4618      	mov	r0, r3
 800b256:	f7fe ff7d 	bl	800a154 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b25c:	3318      	adds	r3, #24
 800b25e:	4618      	mov	r0, r3
 800b260:	f7fe ff78 	bl	800a154 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b268:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26c:	f1c3 0207 	rsb	r2, r3, #7
 800b270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b272:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b278:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	2200      	movs	r2, #0
 800b27e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b288:	683a      	ldr	r2, [r7, #0]
 800b28a:	68f9      	ldr	r1, [r7, #12]
 800b28c:	69b8      	ldr	r0, [r7, #24]
 800b28e:	f001 fb7b 	bl	800c988 <pxPortInitialiseStack>
 800b292:	4602      	mov	r2, r0
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d002      	beq.n	800b2a4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2a4:	bf00      	nop
 800b2a6:	3720      	adds	r7, #32
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2b4:	f001 fc96 	bl	800cbe4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2b8:	4b2a      	ldr	r3, [pc, #168]	; (800b364 <prvAddNewTaskToReadyList+0xb8>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	4a29      	ldr	r2, [pc, #164]	; (800b364 <prvAddNewTaskToReadyList+0xb8>)
 800b2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2c2:	4b29      	ldr	r3, [pc, #164]	; (800b368 <prvAddNewTaskToReadyList+0xbc>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2ca:	4a27      	ldr	r2, [pc, #156]	; (800b368 <prvAddNewTaskToReadyList+0xbc>)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2d0:	4b24      	ldr	r3, [pc, #144]	; (800b364 <prvAddNewTaskToReadyList+0xb8>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d110      	bne.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2d8:	f000 fd30 	bl	800bd3c <prvInitialiseTaskLists>
 800b2dc:	e00d      	b.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2de:	4b23      	ldr	r3, [pc, #140]	; (800b36c <prvAddNewTaskToReadyList+0xc0>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2e6:	4b20      	ldr	r3, [pc, #128]	; (800b368 <prvAddNewTaskToReadyList+0xbc>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d802      	bhi.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2f4:	4a1c      	ldr	r2, [pc, #112]	; (800b368 <prvAddNewTaskToReadyList+0xbc>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2fa:	4b1d      	ldr	r3, [pc, #116]	; (800b370 <prvAddNewTaskToReadyList+0xc4>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	4a1b      	ldr	r2, [pc, #108]	; (800b370 <prvAddNewTaskToReadyList+0xc4>)
 800b302:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	2201      	movs	r2, #1
 800b30a:	409a      	lsls	r2, r3
 800b30c:	4b19      	ldr	r3, [pc, #100]	; (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4313      	orrs	r3, r2
 800b312:	4a18      	ldr	r2, [pc, #96]	; (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <prvAddNewTaskToReadyList+0xcc>)
 800b324:	441a      	add	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fe ff1e 	bl	800a16e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b332:	f001 fc87 	bl	800cc44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b336:	4b0d      	ldr	r3, [pc, #52]	; (800b36c <prvAddNewTaskToReadyList+0xc0>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00e      	beq.n	800b35c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b33e:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <prvAddNewTaskToReadyList+0xbc>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	429a      	cmp	r2, r3
 800b34a:	d207      	bcs.n	800b35c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b34c:	4b0b      	ldr	r3, [pc, #44]	; (800b37c <prvAddNewTaskToReadyList+0xd0>)
 800b34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b352:	601a      	str	r2, [r3, #0]
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b35c:	bf00      	nop
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}
 800b364:	200015c4 	.word	0x200015c4
 800b368:	200014c4 	.word	0x200014c4
 800b36c:	200015d0 	.word	0x200015d0
 800b370:	200015e0 	.word	0x200015e0
 800b374:	200015cc 	.word	0x200015cc
 800b378:	200014c8 	.word	0x200014c8
 800b37c:	e000ed04 	.word	0xe000ed04

0800b380 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b388:	f001 fc2c 	bl	800cbe4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d102      	bne.n	800b398 <vTaskDelete+0x18>
 800b392:	4b39      	ldr	r3, [pc, #228]	; (800b478 <vTaskDelete+0xf8>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	e000      	b.n	800b39a <vTaskDelete+0x1a>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3304      	adds	r3, #4
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe ff41 	bl	800a228 <uxListRemove>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d115      	bne.n	800b3d8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b0:	4932      	ldr	r1, [pc, #200]	; (800b47c <vTaskDelete+0xfc>)
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	440b      	add	r3, r1
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d10a      	bne.n	800b3d8 <vTaskDelete+0x58>
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3cc:	43da      	mvns	r2, r3
 800b3ce:	4b2c      	ldr	r3, [pc, #176]	; (800b480 <vTaskDelete+0x100>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	4a2a      	ldr	r2, [pc, #168]	; (800b480 <vTaskDelete+0x100>)
 800b3d6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d004      	beq.n	800b3ea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	3318      	adds	r3, #24
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f7fe ff1f 	bl	800a228 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b3ea:	4b26      	ldr	r3, [pc, #152]	; (800b484 <vTaskDelete+0x104>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	4a24      	ldr	r2, [pc, #144]	; (800b484 <vTaskDelete+0x104>)
 800b3f2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b3f4:	4b20      	ldr	r3, [pc, #128]	; (800b478 <vTaskDelete+0xf8>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68fa      	ldr	r2, [r7, #12]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d10b      	bne.n	800b416 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3304      	adds	r3, #4
 800b402:	4619      	mov	r1, r3
 800b404:	4820      	ldr	r0, [pc, #128]	; (800b488 <vTaskDelete+0x108>)
 800b406:	f7fe feb2 	bl	800a16e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b40a:	4b20      	ldr	r3, [pc, #128]	; (800b48c <vTaskDelete+0x10c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3301      	adds	r3, #1
 800b410:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <vTaskDelete+0x10c>)
 800b412:	6013      	str	r3, [r2, #0]
 800b414:	e009      	b.n	800b42a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b416:	4b1e      	ldr	r3, [pc, #120]	; (800b490 <vTaskDelete+0x110>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	4a1c      	ldr	r2, [pc, #112]	; (800b490 <vTaskDelete+0x110>)
 800b41e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 fcf9 	bl	800be18 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b426:	f000 fd07 	bl	800be38 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b42a:	f001 fc0b 	bl	800cc44 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b42e:	4b19      	ldr	r3, [pc, #100]	; (800b494 <vTaskDelete+0x114>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d01b      	beq.n	800b46e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b436:	4b10      	ldr	r3, [pc, #64]	; (800b478 <vTaskDelete+0xf8>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d116      	bne.n	800b46e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b440:	4b15      	ldr	r3, [pc, #84]	; (800b498 <vTaskDelete+0x118>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00a      	beq.n	800b45e <vTaskDelete+0xde>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	60bb      	str	r3, [r7, #8]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b45e:	4b0f      	ldr	r3, [pc, #60]	; (800b49c <vTaskDelete+0x11c>)
 800b460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b464:	601a      	str	r2, [r3, #0]
 800b466:	f3bf 8f4f 	dsb	sy
 800b46a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b46e:	bf00      	nop
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	200014c4 	.word	0x200014c4
 800b47c:	200014c8 	.word	0x200014c8
 800b480:	200015cc 	.word	0x200015cc
 800b484:	200015e0 	.word	0x200015e0
 800b488:	20001598 	.word	0x20001598
 800b48c:	200015ac 	.word	0x200015ac
 800b490:	200015c4 	.word	0x200015c4
 800b494:	200015d0 	.word	0x200015d0
 800b498:	200015ec 	.word	0x200015ec
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d017      	beq.n	800b4e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4b2:	4b13      	ldr	r3, [pc, #76]	; (800b500 <vTaskDelay+0x60>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d00a      	beq.n	800b4d0 <vTaskDelay+0x30>
	__asm volatile
 800b4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4be:	f383 8811 	msr	BASEPRI, r3
 800b4c2:	f3bf 8f6f 	isb	sy
 800b4c6:	f3bf 8f4f 	dsb	sy
 800b4ca:	60bb      	str	r3, [r7, #8]
}
 800b4cc:	bf00      	nop
 800b4ce:	e7fe      	b.n	800b4ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b4d0:	f000 f868 	bl	800b5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fea2 	bl	800c220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4dc:	f000 f870 	bl	800b5c0 <xTaskResumeAll>
 800b4e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d107      	bne.n	800b4f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b4e8:	4b06      	ldr	r3, [pc, #24]	; (800b504 <vTaskDelay+0x64>)
 800b4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ee:	601a      	str	r2, [r3, #0]
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4f8:	bf00      	nop
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	200015ec 	.word	0x200015ec
 800b504:	e000ed04 	.word	0xe000ed04

0800b508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b086      	sub	sp, #24
 800b50c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b50e:	4b1f      	ldr	r3, [pc, #124]	; (800b58c <vTaskStartScheduler+0x84>)
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	2300      	movs	r3, #0
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	2300      	movs	r3, #0
 800b518:	2280      	movs	r2, #128	; 0x80
 800b51a:	491d      	ldr	r1, [pc, #116]	; (800b590 <vTaskStartScheduler+0x88>)
 800b51c:	481d      	ldr	r0, [pc, #116]	; (800b594 <vTaskStartScheduler+0x8c>)
 800b51e:	f7ff fdfd 	bl	800b11c <xTaskCreate>
 800b522:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d102      	bne.n	800b530 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b52a:	f000 fedf 	bl	800c2ec <xTimerCreateTimerTask>
 800b52e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	2b01      	cmp	r3, #1
 800b534:	d116      	bne.n	800b564 <vTaskStartScheduler+0x5c>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	60bb      	str	r3, [r7, #8]
}
 800b548:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b54a:	4b13      	ldr	r3, [pc, #76]	; (800b598 <vTaskStartScheduler+0x90>)
 800b54c:	f04f 32ff 	mov.w	r2, #4294967295
 800b550:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b552:	4b12      	ldr	r3, [pc, #72]	; (800b59c <vTaskStartScheduler+0x94>)
 800b554:	2201      	movs	r2, #1
 800b556:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b558:	4b11      	ldr	r3, [pc, #68]	; (800b5a0 <vTaskStartScheduler+0x98>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b55e:	f001 fa9f 	bl	800caa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b562:	e00e      	b.n	800b582 <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56a:	d10a      	bne.n	800b582 <vTaskStartScheduler+0x7a>
	__asm volatile
 800b56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b570:	f383 8811 	msr	BASEPRI, r3
 800b574:	f3bf 8f6f 	isb	sy
 800b578:	f3bf 8f4f 	dsb	sy
 800b57c:	607b      	str	r3, [r7, #4]
}
 800b57e:	bf00      	nop
 800b580:	e7fe      	b.n	800b580 <vTaskStartScheduler+0x78>
}
 800b582:	bf00      	nop
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}
 800b58a:	bf00      	nop
 800b58c:	200015e8 	.word	0x200015e8
 800b590:	0801f1b0 	.word	0x0801f1b0
 800b594:	0800bd0d 	.word	0x0800bd0d
 800b598:	200015e4 	.word	0x200015e4
 800b59c:	200015d0 	.word	0x200015d0
 800b5a0:	200015c8 	.word	0x200015c8

0800b5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5a8:	4b04      	ldr	r3, [pc, #16]	; (800b5bc <vTaskSuspendAll+0x18>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	4a03      	ldr	r2, [pc, #12]	; (800b5bc <vTaskSuspendAll+0x18>)
 800b5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5b2:	bf00      	nop
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	200015ec 	.word	0x200015ec

0800b5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5ce:	4b41      	ldr	r3, [pc, #260]	; (800b6d4 <xTaskResumeAll+0x114>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10a      	bne.n	800b5ec <xTaskResumeAll+0x2c>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	603b      	str	r3, [r7, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	e7fe      	b.n	800b5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5ec:	f001 fafa 	bl	800cbe4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5f0:	4b38      	ldr	r3, [pc, #224]	; (800b6d4 <xTaskResumeAll+0x114>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	4a37      	ldr	r2, [pc, #220]	; (800b6d4 <xTaskResumeAll+0x114>)
 800b5f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5fa:	4b36      	ldr	r3, [pc, #216]	; (800b6d4 <xTaskResumeAll+0x114>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d161      	bne.n	800b6c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b602:	4b35      	ldr	r3, [pc, #212]	; (800b6d8 <xTaskResumeAll+0x118>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d05d      	beq.n	800b6c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b60a:	e02e      	b.n	800b66a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b60c:	4b33      	ldr	r3, [pc, #204]	; (800b6dc <xTaskResumeAll+0x11c>)
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3318      	adds	r3, #24
 800b618:	4618      	mov	r0, r3
 800b61a:	f7fe fe05 	bl	800a228 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	3304      	adds	r3, #4
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fe00 	bl	800a228 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62c:	2201      	movs	r2, #1
 800b62e:	409a      	lsls	r2, r3
 800b630:	4b2b      	ldr	r3, [pc, #172]	; (800b6e0 <xTaskResumeAll+0x120>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4313      	orrs	r3, r2
 800b636:	4a2a      	ldr	r2, [pc, #168]	; (800b6e0 <xTaskResumeAll+0x120>)
 800b638:	6013      	str	r3, [r2, #0]
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a27      	ldr	r2, [pc, #156]	; (800b6e4 <xTaskResumeAll+0x124>)
 800b648:	441a      	add	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3304      	adds	r3, #4
 800b64e:	4619      	mov	r1, r3
 800b650:	4610      	mov	r0, r2
 800b652:	f7fe fd8c 	bl	800a16e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65a:	4b23      	ldr	r3, [pc, #140]	; (800b6e8 <xTaskResumeAll+0x128>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	429a      	cmp	r2, r3
 800b662:	d302      	bcc.n	800b66a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b664:	4b21      	ldr	r3, [pc, #132]	; (800b6ec <xTaskResumeAll+0x12c>)
 800b666:	2201      	movs	r2, #1
 800b668:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b66a:	4b1c      	ldr	r3, [pc, #112]	; (800b6dc <xTaskResumeAll+0x11c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1cc      	bne.n	800b60c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b678:	f000 fbde 	bl	800be38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b67c:	4b1c      	ldr	r3, [pc, #112]	; (800b6f0 <xTaskResumeAll+0x130>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d010      	beq.n	800b6aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b688:	f000 f858 	bl	800b73c <xTaskIncrementTick>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b692:	4b16      	ldr	r3, [pc, #88]	; (800b6ec <xTaskResumeAll+0x12c>)
 800b694:	2201      	movs	r2, #1
 800b696:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f1      	bne.n	800b688 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b6a4:	4b12      	ldr	r3, [pc, #72]	; (800b6f0 <xTaskResumeAll+0x130>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6aa:	4b10      	ldr	r3, [pc, #64]	; (800b6ec <xTaskResumeAll+0x12c>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d009      	beq.n	800b6c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6b6:	4b0f      	ldr	r3, [pc, #60]	; (800b6f4 <xTaskResumeAll+0x134>)
 800b6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6c6:	f001 fabd 	bl	800cc44 <vPortExitCritical>

	return xAlreadyYielded;
 800b6ca:	68bb      	ldr	r3, [r7, #8]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	200015ec 	.word	0x200015ec
 800b6d8:	200015c4 	.word	0x200015c4
 800b6dc:	20001584 	.word	0x20001584
 800b6e0:	200015cc 	.word	0x200015cc
 800b6e4:	200014c8 	.word	0x200014c8
 800b6e8:	200014c4 	.word	0x200014c4
 800b6ec:	200015d8 	.word	0x200015d8
 800b6f0:	200015d4 	.word	0x200015d4
 800b6f4:	e000ed04 	.word	0xe000ed04

0800b6f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <xTaskGetTickCount+0x1c>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b704:	687b      	ldr	r3, [r7, #4]
}
 800b706:	4618      	mov	r0, r3
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	200015c8 	.word	0x200015c8

0800b718 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b082      	sub	sp, #8
 800b71c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b71e:	f001 fb43 	bl	800cda8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b722:	2300      	movs	r3, #0
 800b724:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b726:	4b04      	ldr	r3, [pc, #16]	; (800b738 <xTaskGetTickCountFromISR+0x20>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b72c:	683b      	ldr	r3, [r7, #0]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200015c8 	.word	0x200015c8

0800b73c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b742:	2300      	movs	r3, #0
 800b744:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b746:	4b4e      	ldr	r3, [pc, #312]	; (800b880 <xTaskIncrementTick+0x144>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f040 808e 	bne.w	800b86c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b750:	4b4c      	ldr	r3, [pc, #304]	; (800b884 <xTaskIncrementTick+0x148>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3301      	adds	r3, #1
 800b756:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b758:	4a4a      	ldr	r2, [pc, #296]	; (800b884 <xTaskIncrementTick+0x148>)
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d120      	bne.n	800b7a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b764:	4b48      	ldr	r3, [pc, #288]	; (800b888 <xTaskIncrementTick+0x14c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00a      	beq.n	800b784 <xTaskIncrementTick+0x48>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	603b      	str	r3, [r7, #0]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <xTaskIncrementTick+0x46>
 800b784:	4b40      	ldr	r3, [pc, #256]	; (800b888 <xTaskIncrementTick+0x14c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	4b40      	ldr	r3, [pc, #256]	; (800b88c <xTaskIncrementTick+0x150>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a3e      	ldr	r2, [pc, #248]	; (800b888 <xTaskIncrementTick+0x14c>)
 800b790:	6013      	str	r3, [r2, #0]
 800b792:	4a3e      	ldr	r2, [pc, #248]	; (800b88c <xTaskIncrementTick+0x150>)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	4b3d      	ldr	r3, [pc, #244]	; (800b890 <xTaskIncrementTick+0x154>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	4a3c      	ldr	r2, [pc, #240]	; (800b890 <xTaskIncrementTick+0x154>)
 800b7a0:	6013      	str	r3, [r2, #0]
 800b7a2:	f000 fb49 	bl	800be38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7a6:	4b3b      	ldr	r3, [pc, #236]	; (800b894 <xTaskIncrementTick+0x158>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	693a      	ldr	r2, [r7, #16]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d348      	bcc.n	800b842 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7b0:	4b35      	ldr	r3, [pc, #212]	; (800b888 <xTaskIncrementTick+0x14c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d104      	bne.n	800b7c4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ba:	4b36      	ldr	r3, [pc, #216]	; (800b894 <xTaskIncrementTick+0x158>)
 800b7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c0:	601a      	str	r2, [r3, #0]
					break;
 800b7c2:	e03e      	b.n	800b842 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c4:	4b30      	ldr	r3, [pc, #192]	; (800b888 <xTaskIncrementTick+0x14c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7d4:	693a      	ldr	r2, [r7, #16]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d203      	bcs.n	800b7e4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7dc:	4a2d      	ldr	r2, [pc, #180]	; (800b894 <xTaskIncrementTick+0x158>)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7e2:	e02e      	b.n	800b842 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fd1d 	bl	800a228 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d004      	beq.n	800b800 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fe fd14 	bl	800a228 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b804:	2201      	movs	r2, #1
 800b806:	409a      	lsls	r2, r3
 800b808:	4b23      	ldr	r3, [pc, #140]	; (800b898 <xTaskIncrementTick+0x15c>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	4a22      	ldr	r2, [pc, #136]	; (800b898 <xTaskIncrementTick+0x15c>)
 800b810:	6013      	str	r3, [r2, #0]
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	4a1f      	ldr	r2, [pc, #124]	; (800b89c <xTaskIncrementTick+0x160>)
 800b820:	441a      	add	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	3304      	adds	r3, #4
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f7fe fca0 	bl	800a16e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b832:	4b1b      	ldr	r3, [pc, #108]	; (800b8a0 <xTaskIncrementTick+0x164>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b838:	429a      	cmp	r2, r3
 800b83a:	d3b9      	bcc.n	800b7b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b83c:	2301      	movs	r3, #1
 800b83e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b840:	e7b6      	b.n	800b7b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b842:	4b17      	ldr	r3, [pc, #92]	; (800b8a0 <xTaskIncrementTick+0x164>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b848:	4914      	ldr	r1, [pc, #80]	; (800b89c <xTaskIncrementTick+0x160>)
 800b84a:	4613      	mov	r3, r2
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	4413      	add	r3, r2
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	440b      	add	r3, r1
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b01      	cmp	r3, #1
 800b858:	d901      	bls.n	800b85e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b85a:	2301      	movs	r3, #1
 800b85c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b85e:	4b11      	ldr	r3, [pc, #68]	; (800b8a4 <xTaskIncrementTick+0x168>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d007      	beq.n	800b876 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b866:	2301      	movs	r3, #1
 800b868:	617b      	str	r3, [r7, #20]
 800b86a:	e004      	b.n	800b876 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <xTaskIncrementTick+0x16c>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	4a0d      	ldr	r2, [pc, #52]	; (800b8a8 <xTaskIncrementTick+0x16c>)
 800b874:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b876:	697b      	ldr	r3, [r7, #20]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3718      	adds	r7, #24
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	200015ec 	.word	0x200015ec
 800b884:	200015c8 	.word	0x200015c8
 800b888:	2000157c 	.word	0x2000157c
 800b88c:	20001580 	.word	0x20001580
 800b890:	200015dc 	.word	0x200015dc
 800b894:	200015e4 	.word	0x200015e4
 800b898:	200015cc 	.word	0x200015cc
 800b89c:	200014c8 	.word	0x200014c8
 800b8a0:	200014c4 	.word	0x200014c4
 800b8a4:	200015d8 	.word	0x200015d8
 800b8a8:	200015d4 	.word	0x200015d4

0800b8ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8b2:	4b27      	ldr	r3, [pc, #156]	; (800b950 <vTaskSwitchContext+0xa4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8ba:	4b26      	ldr	r3, [pc, #152]	; (800b954 <vTaskSwitchContext+0xa8>)
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8c0:	e03f      	b.n	800b942 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800b8c2:	4b24      	ldr	r3, [pc, #144]	; (800b954 <vTaskSwitchContext+0xa8>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c8:	4b23      	ldr	r3, [pc, #140]	; (800b958 <vTaskSwitchContext+0xac>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	fab3 f383 	clz	r3, r3
 800b8d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8d6:	7afb      	ldrb	r3, [r7, #11]
 800b8d8:	f1c3 031f 	rsb	r3, r3, #31
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	491f      	ldr	r1, [pc, #124]	; (800b95c <vTaskSwitchContext+0xb0>)
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	440b      	add	r3, r1
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10a      	bne.n	800b908 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	607b      	str	r3, [r7, #4]
}
 800b904:	bf00      	nop
 800b906:	e7fe      	b.n	800b906 <vTaskSwitchContext+0x5a>
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4a12      	ldr	r2, [pc, #72]	; (800b95c <vTaskSwitchContext+0xb0>)
 800b914:	4413      	add	r3, r2
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	605a      	str	r2, [r3, #4]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	685a      	ldr	r2, [r3, #4]
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	3308      	adds	r3, #8
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d104      	bne.n	800b938 <vTaskSwitchContext+0x8c>
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	685b      	ldr	r3, [r3, #4]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	605a      	str	r2, [r3, #4]
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	4a08      	ldr	r2, [pc, #32]	; (800b960 <vTaskSwitchContext+0xb4>)
 800b940:	6013      	str	r3, [r2, #0]
}
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	200015ec 	.word	0x200015ec
 800b954:	200015d8 	.word	0x200015d8
 800b958:	200015cc 	.word	0x200015cc
 800b95c:	200014c8 	.word	0x200014c8
 800b960:	200014c4 	.word	0x200014c4

0800b964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b978:	f383 8811 	msr	BASEPRI, r3
 800b97c:	f3bf 8f6f 	isb	sy
 800b980:	f3bf 8f4f 	dsb	sy
 800b984:	60fb      	str	r3, [r7, #12]
}
 800b986:	bf00      	nop
 800b988:	e7fe      	b.n	800b988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b98a:	4b07      	ldr	r3, [pc, #28]	; (800b9a8 <vTaskPlaceOnEventList+0x44>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	3318      	adds	r3, #24
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7fe fc0f 	bl	800a1b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b998:	2101      	movs	r1, #1
 800b99a:	6838      	ldr	r0, [r7, #0]
 800b99c:	f000 fc40 	bl	800c220 <prvAddCurrentTaskToDelayedList>
}
 800b9a0:	bf00      	nop
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	200014c4 	.word	0x200014c4

0800b9ac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	60b9      	str	r1, [r7, #8]
 800b9b6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d10a      	bne.n	800b9d4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	617b      	str	r3, [r7, #20]
}
 800b9d0:	bf00      	nop
 800b9d2:	e7fe      	b.n	800b9d2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b9d4:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <vTaskPlaceOnUnorderedEventList+0x70>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10a      	bne.n	800b9f2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	613b      	str	r3, [r7, #16]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b9f2:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b9fc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9fe:	4b08      	ldr	r3, [pc, #32]	; (800ba20 <vTaskPlaceOnUnorderedEventList+0x74>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3318      	adds	r3, #24
 800ba04:	4619      	mov	r1, r3
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7fe fbb1 	bl	800a16e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fc06 	bl	800c220 <prvAddCurrentTaskToDelayedList>
}
 800ba14:	bf00      	nop
 800ba16:	3718      	adds	r7, #24
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bd80      	pop	{r7, pc}
 800ba1c:	200015ec 	.word	0x200015ec
 800ba20:	200014c4 	.word	0x200014c4

0800ba24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10a      	bne.n	800ba4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	617b      	str	r3, [r7, #20]
}
 800ba48:	bf00      	nop
 800ba4a:	e7fe      	b.n	800ba4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba4c:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <vTaskPlaceOnEventListRestricted+0x54>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	3318      	adds	r3, #24
 800ba52:	4619      	mov	r1, r3
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7fe fb8a 	bl	800a16e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d002      	beq.n	800ba66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ba60:	f04f 33ff 	mov.w	r3, #4294967295
 800ba64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ba66:	6879      	ldr	r1, [r7, #4]
 800ba68:	68b8      	ldr	r0, [r7, #8]
 800ba6a:	f000 fbd9 	bl	800c220 <prvAddCurrentTaskToDelayedList>
	}
 800ba6e:	bf00      	nop
 800ba70:	3718      	adds	r7, #24
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	200014c4 	.word	0x200014c4

0800ba7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	68db      	ldr	r3, [r3, #12]
 800ba8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ba92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba96:	f383 8811 	msr	BASEPRI, r3
 800ba9a:	f3bf 8f6f 	isb	sy
 800ba9e:	f3bf 8f4f 	dsb	sy
 800baa2:	60fb      	str	r3, [r7, #12]
}
 800baa4:	bf00      	nop
 800baa6:	e7fe      	b.n	800baa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	3318      	adds	r3, #24
 800baac:	4618      	mov	r0, r3
 800baae:	f7fe fbbb 	bl	800a228 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bab2:	4b1d      	ldr	r3, [pc, #116]	; (800bb28 <xTaskRemoveFromEventList+0xac>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d11c      	bne.n	800baf4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	3304      	adds	r3, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f7fe fbb2 	bl	800a228 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	2201      	movs	r2, #1
 800baca:	409a      	lsls	r2, r3
 800bacc:	4b17      	ldr	r3, [pc, #92]	; (800bb2c <xTaskRemoveFromEventList+0xb0>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4313      	orrs	r3, r2
 800bad2:	4a16      	ldr	r2, [pc, #88]	; (800bb2c <xTaskRemoveFromEventList+0xb0>)
 800bad4:	6013      	str	r3, [r2, #0]
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	4a13      	ldr	r2, [pc, #76]	; (800bb30 <xTaskRemoveFromEventList+0xb4>)
 800bae4:	441a      	add	r2, r3
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	3304      	adds	r3, #4
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f7fe fb3e 	bl	800a16e <vListInsertEnd>
 800baf2:	e005      	b.n	800bb00 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	3318      	adds	r3, #24
 800baf8:	4619      	mov	r1, r3
 800bafa:	480e      	ldr	r0, [pc, #56]	; (800bb34 <xTaskRemoveFromEventList+0xb8>)
 800bafc:	f7fe fb37 	bl	800a16e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb04:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <xTaskRemoveFromEventList+0xbc>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d905      	bls.n	800bb1a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb12:	4b0a      	ldr	r3, [pc, #40]	; (800bb3c <xTaskRemoveFromEventList+0xc0>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	e001      	b.n	800bb1e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb1e:	697b      	ldr	r3, [r7, #20]
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3718      	adds	r7, #24
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	200015ec 	.word	0x200015ec
 800bb2c:	200015cc 	.word	0x200015cc
 800bb30:	200014c8 	.word	0x200014c8
 800bb34:	20001584 	.word	0x20001584
 800bb38:	200014c4 	.word	0x200014c4
 800bb3c:	200015d8 	.word	0x200015d8

0800bb40 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800bb4a:	4b29      	ldr	r3, [pc, #164]	; (800bbf0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	613b      	str	r3, [r7, #16]
}
 800bb64:	bf00      	nop
 800bb66:	e7fe      	b.n	800bb66 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	60fb      	str	r3, [r7, #12]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f7fe fb47 	bl	800a228 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fb42 	bl	800a228 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	2201      	movs	r2, #1
 800bbaa:	409a      	lsls	r2, r3
 800bbac:	4b11      	ldr	r3, [pc, #68]	; (800bbf4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a10      	ldr	r2, [pc, #64]	; (800bbf4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4a0d      	ldr	r2, [pc, #52]	; (800bbf8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800bbc4:	441a      	add	r2, r3
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7fe face 	bl	800a16e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd6:	4b09      	ldr	r3, [pc, #36]	; (800bbfc <vTaskRemoveFromUnorderedEventList+0xbc>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d902      	bls.n	800bbe6 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]
	}
}
 800bbe6:	bf00      	nop
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200015ec 	.word	0x200015ec
 800bbf4:	200015cc 	.word	0x200015cc
 800bbf8:	200014c8 	.word	0x200014c8
 800bbfc:	200014c4 	.word	0x200014c4
 800bc00:	200015d8 	.word	0x200015d8

0800bc04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc0c:	4b06      	ldr	r3, [pc, #24]	; (800bc28 <vTaskInternalSetTimeOutState+0x24>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc14:	4b05      	ldr	r3, [pc, #20]	; (800bc2c <vTaskInternalSetTimeOutState+0x28>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	605a      	str	r2, [r3, #4]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	200015dc 	.word	0x200015dc
 800bc2c:	200015c8 	.word	0x200015c8

0800bc30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b088      	sub	sp, #32
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10a      	bne.n	800bc56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc72:	f000 ffb7 	bl	800cbe4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc76:	4b1d      	ldr	r3, [pc, #116]	; (800bcec <xTaskCheckForTimeOut+0xbc>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	69ba      	ldr	r2, [r7, #24]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8e:	d102      	bne.n	800bc96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e023      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	4b15      	ldr	r3, [pc, #84]	; (800bcf0 <xTaskCheckForTimeOut+0xc0>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d007      	beq.n	800bcb2 <xTaskCheckForTimeOut+0x82>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	69ba      	ldr	r2, [r7, #24]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d302      	bcc.n	800bcb2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcac:	2301      	movs	r3, #1
 800bcae:	61fb      	str	r3, [r7, #28]
 800bcb0:	e015      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d20b      	bcs.n	800bcd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff ff9b 	bl	800bc04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	61fb      	str	r3, [r7, #28]
 800bcd2:	e004      	b.n	800bcde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bcde:	f000 ffb1 	bl	800cc44 <vPortExitCritical>

	return xReturn;
 800bce2:	69fb      	ldr	r3, [r7, #28]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200015c8 	.word	0x200015c8
 800bcf0:	200015dc 	.word	0x200015dc

0800bcf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bcf8:	4b03      	ldr	r3, [pc, #12]	; (800bd08 <vTaskMissedYield+0x14>)
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	601a      	str	r2, [r3, #0]
}
 800bcfe:	bf00      	nop
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr
 800bd08:	200015d8 	.word	0x200015d8

0800bd0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd14:	f000 f852 	bl	800bdbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd18:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <prvIdleTask+0x28>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d9f9      	bls.n	800bd14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <prvIdleTask+0x2c>)
 800bd22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	f3bf 8f4f 	dsb	sy
 800bd2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd30:	e7f0      	b.n	800bd14 <prvIdleTask+0x8>
 800bd32:	bf00      	nop
 800bd34:	200014c8 	.word	0x200014c8
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	e00c      	b.n	800bd62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <prvInitialiseTaskLists+0x60>)
 800bd54:	4413      	add	r3, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe f9dc 	bl	800a114 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	607b      	str	r3, [r7, #4]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b06      	cmp	r3, #6
 800bd66:	d9ef      	bls.n	800bd48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd68:	480d      	ldr	r0, [pc, #52]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd6a:	f7fe f9d3 	bl	800a114 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd6e:	480d      	ldr	r0, [pc, #52]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd70:	f7fe f9d0 	bl	800a114 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd74:	480c      	ldr	r0, [pc, #48]	; (800bda8 <prvInitialiseTaskLists+0x6c>)
 800bd76:	f7fe f9cd 	bl	800a114 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd7a:	480c      	ldr	r0, [pc, #48]	; (800bdac <prvInitialiseTaskLists+0x70>)
 800bd7c:	f7fe f9ca 	bl	800a114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd80:	480b      	ldr	r0, [pc, #44]	; (800bdb0 <prvInitialiseTaskLists+0x74>)
 800bd82:	f7fe f9c7 	bl	800a114 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd86:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <prvInitialiseTaskLists+0x78>)
 800bd88:	4a05      	ldr	r2, [pc, #20]	; (800bda0 <prvInitialiseTaskLists+0x64>)
 800bd8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd8c:	4b0a      	ldr	r3, [pc, #40]	; (800bdb8 <prvInitialiseTaskLists+0x7c>)
 800bd8e:	4a05      	ldr	r2, [pc, #20]	; (800bda4 <prvInitialiseTaskLists+0x68>)
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	bf00      	nop
 800bd94:	3708      	adds	r7, #8
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	200014c8 	.word	0x200014c8
 800bda0:	20001554 	.word	0x20001554
 800bda4:	20001568 	.word	0x20001568
 800bda8:	20001584 	.word	0x20001584
 800bdac:	20001598 	.word	0x20001598
 800bdb0:	200015b0 	.word	0x200015b0
 800bdb4:	2000157c 	.word	0x2000157c
 800bdb8:	20001580 	.word	0x20001580

0800bdbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdc2:	e019      	b.n	800bdf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdc4:	f000 ff0e 	bl	800cbe4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdc8:	4b10      	ldr	r3, [pc, #64]	; (800be0c <prvCheckTasksWaitingTermination+0x50>)
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	68db      	ldr	r3, [r3, #12]
 800bdce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3304      	adds	r3, #4
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fe fa27 	bl	800a228 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bdda:	4b0d      	ldr	r3, [pc, #52]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	4a0b      	ldr	r2, [pc, #44]	; (800be10 <prvCheckTasksWaitingTermination+0x54>)
 800bde2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bde4:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3b01      	subs	r3, #1
 800bdea:	4a0a      	ldr	r2, [pc, #40]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bdee:	f000 ff29 	bl	800cc44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f810 	bl	800be18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf8:	4b06      	ldr	r3, [pc, #24]	; (800be14 <prvCheckTasksWaitingTermination+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1e1      	bne.n	800bdc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3708      	adds	r7, #8
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20001598 	.word	0x20001598
 800be10:	200015c4 	.word	0x200015c4
 800be14:	200015ac 	.word	0x200015ac

0800be18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be24:	4618      	mov	r0, r3
 800be26:	f001 f8cb 	bl	800cfc0 <vPortFree>
			vPortFree( pxTCB );
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f001 f8c8 	bl	800cfc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be30:	bf00      	nop
 800be32:	3708      	adds	r7, #8
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be3e:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <prvResetNextTaskUnblockTime+0x38>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <prvResetNextTaskUnblockTime+0x3c>)
 800be4a:	f04f 32ff 	mov.w	r2, #4294967295
 800be4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800be50:	e008      	b.n	800be64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be52:	4b07      	ldr	r3, [pc, #28]	; (800be70 <prvResetNextTaskUnblockTime+0x38>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	685b      	ldr	r3, [r3, #4]
 800be60:	4a04      	ldr	r2, [pc, #16]	; (800be74 <prvResetNextTaskUnblockTime+0x3c>)
 800be62:	6013      	str	r3, [r2, #0]
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr
 800be70:	2000157c 	.word	0x2000157c
 800be74:	200015e4 	.word	0x200015e4

0800be78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800be7e:	4b0b      	ldr	r3, [pc, #44]	; (800beac <xTaskGetSchedulerState+0x34>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d102      	bne.n	800be8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800be86:	2301      	movs	r3, #1
 800be88:	607b      	str	r3, [r7, #4]
 800be8a:	e008      	b.n	800be9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be8c:	4b08      	ldr	r3, [pc, #32]	; (800beb0 <xTaskGetSchedulerState+0x38>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d102      	bne.n	800be9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800be94:	2302      	movs	r3, #2
 800be96:	607b      	str	r3, [r7, #4]
 800be98:	e001      	b.n	800be9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800be9a:	2300      	movs	r3, #0
 800be9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800be9e:	687b      	ldr	r3, [r7, #4]
	}
 800bea0:	4618      	mov	r0, r3
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	200015d0 	.word	0x200015d0
 800beb0:	200015ec 	.word	0x200015ec

0800beb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d05e      	beq.n	800bf88 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bece:	4b31      	ldr	r3, [pc, #196]	; (800bf94 <xTaskPriorityInherit+0xe0>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d24e      	bcs.n	800bf76 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	db06      	blt.n	800beee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee0:	4b2c      	ldr	r3, [pc, #176]	; (800bf94 <xTaskPriorityInherit+0xe0>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee6:	f1c3 0207 	rsb	r2, r3, #7
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	6959      	ldr	r1, [r3, #20]
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4a26      	ldr	r2, [pc, #152]	; (800bf98 <xTaskPriorityInherit+0xe4>)
 800bf00:	4413      	add	r3, r2
 800bf02:	4299      	cmp	r1, r3
 800bf04:	d12f      	bne.n	800bf66 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7fe f98c 	bl	800a228 <uxListRemove>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf20:	43da      	mvns	r2, r3
 800bf22:	4b1e      	ldr	r3, [pc, #120]	; (800bf9c <xTaskPriorityInherit+0xe8>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4013      	ands	r3, r2
 800bf28:	4a1c      	ldr	r2, [pc, #112]	; (800bf9c <xTaskPriorityInherit+0xe8>)
 800bf2a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf2c:	4b19      	ldr	r3, [pc, #100]	; (800bf94 <xTaskPriorityInherit+0xe0>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	409a      	lsls	r2, r3
 800bf3e:	4b17      	ldr	r3, [pc, #92]	; (800bf9c <xTaskPriorityInherit+0xe8>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	4a15      	ldr	r2, [pc, #84]	; (800bf9c <xTaskPriorityInherit+0xe8>)
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4a10      	ldr	r2, [pc, #64]	; (800bf98 <xTaskPriorityInherit+0xe4>)
 800bf56:	441a      	add	r2, r3
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fe f905 	bl	800a16e <vListInsertEnd>
 800bf64:	e004      	b.n	800bf70 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bf66:	4b0b      	ldr	r3, [pc, #44]	; (800bf94 <xTaskPriorityInherit+0xe0>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bf70:	2301      	movs	r3, #1
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	e008      	b.n	800bf88 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf7a:	4b06      	ldr	r3, [pc, #24]	; (800bf94 <xTaskPriorityInherit+0xe0>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d201      	bcs.n	800bf88 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf88:	68fb      	ldr	r3, [r7, #12]
	}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3710      	adds	r7, #16
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	200014c4 	.word	0x200014c4
 800bf98:	200014c8 	.word	0x200014c8
 800bf9c:	200015cc 	.word	0x200015cc

0800bfa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bfac:	2300      	movs	r3, #0
 800bfae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d06e      	beq.n	800c094 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bfb6:	4b3a      	ldr	r3, [pc, #232]	; (800c0a0 <xTaskPriorityDisinherit+0x100>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	693a      	ldr	r2, [r7, #16]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d00a      	beq.n	800bfd6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10a      	bne.n	800bff4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe2:	f383 8811 	msr	BASEPRI, r3
 800bfe6:	f3bf 8f6f 	isb	sy
 800bfea:	f3bf 8f4f 	dsb	sy
 800bfee:	60bb      	str	r3, [r7, #8]
}
 800bff0:	bf00      	nop
 800bff2:	e7fe      	b.n	800bff2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bff8:	1e5a      	subs	r2, r3, #1
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c006:	429a      	cmp	r2, r3
 800c008:	d044      	beq.n	800c094 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d140      	bne.n	800c094 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	3304      	adds	r3, #4
 800c016:	4618      	mov	r0, r3
 800c018:	f7fe f906 	bl	800a228 <uxListRemove>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d115      	bne.n	800c04e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c026:	491f      	ldr	r1, [pc, #124]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c028:	4613      	mov	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <xTaskPriorityDisinherit+0xae>
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03c:	2201      	movs	r2, #1
 800c03e:	fa02 f303 	lsl.w	r3, r2, r3
 800c042:	43da      	mvns	r2, r3
 800c044:	4b18      	ldr	r3, [pc, #96]	; (800c0a8 <xTaskPriorityDisinherit+0x108>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4013      	ands	r3, r2
 800c04a:	4a17      	ldr	r2, [pc, #92]	; (800c0a8 <xTaskPriorityDisinherit+0x108>)
 800c04c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	f1c3 0207 	rsb	r2, r3, #7
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c066:	2201      	movs	r2, #1
 800c068:	409a      	lsls	r2, r3
 800c06a:	4b0f      	ldr	r3, [pc, #60]	; (800c0a8 <xTaskPriorityDisinherit+0x108>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4313      	orrs	r3, r2
 800c070:	4a0d      	ldr	r2, [pc, #52]	; (800c0a8 <xTaskPriorityDisinherit+0x108>)
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c078:	4613      	mov	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4a08      	ldr	r2, [pc, #32]	; (800c0a4 <xTaskPriorityDisinherit+0x104>)
 800c082:	441a      	add	r2, r3
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	3304      	adds	r3, #4
 800c088:	4619      	mov	r1, r3
 800c08a:	4610      	mov	r0, r2
 800c08c:	f7fe f86f 	bl	800a16e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c090:	2301      	movs	r3, #1
 800c092:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c094:	697b      	ldr	r3, [r7, #20]
	}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	200014c4 	.word	0x200014c4
 800c0a4:	200014c8 	.word	0x200014c8
 800c0a8:	200015cc 	.word	0x200015cc

0800c0ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d077      	beq.n	800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d902      	bls.n	800c0f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	e002      	b.n	800c0f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d058      	beq.n	800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c102:	69bb      	ldr	r3, [r7, #24]
 800c104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d153      	bne.n	800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c10c:	4b2b      	ldr	r3, [pc, #172]	; (800c1bc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	69ba      	ldr	r2, [r7, #24]
 800c112:	429a      	cmp	r2, r3
 800c114:	d10a      	bne.n	800c12c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	60bb      	str	r3, [r7, #8]
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c130:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	699b      	ldr	r3, [r3, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	db04      	blt.n	800c14a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	f1c3 0207 	rsb	r2, r3, #7
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c14a:	69bb      	ldr	r3, [r7, #24]
 800c14c:	6959      	ldr	r1, [r3, #20]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	4613      	mov	r3, r2
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4a19      	ldr	r2, [pc, #100]	; (800c1c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c15a:	4413      	add	r3, r2
 800c15c:	4299      	cmp	r1, r3
 800c15e:	d129      	bne.n	800c1b4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	3304      	adds	r3, #4
 800c164:	4618      	mov	r0, r3
 800c166:	f7fe f85f 	bl	800a228 <uxListRemove>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c170:	69bb      	ldr	r3, [r7, #24]
 800c172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c174:	2201      	movs	r2, #1
 800c176:	fa02 f303 	lsl.w	r3, r2, r3
 800c17a:	43da      	mvns	r2, r3
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4013      	ands	r3, r2
 800c182:	4a10      	ldr	r2, [pc, #64]	; (800c1c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c184:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c186:	69bb      	ldr	r3, [r7, #24]
 800c188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c18a:	2201      	movs	r2, #1
 800c18c:	409a      	lsls	r2, r3
 800c18e:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4313      	orrs	r3, r2
 800c194:	4a0b      	ldr	r2, [pc, #44]	; (800c1c4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4a06      	ldr	r2, [pc, #24]	; (800c1c0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c1a6:	441a      	add	r2, r3
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7fd ffdd 	bl	800a16e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1b4:	bf00      	nop
 800c1b6:	3720      	adds	r7, #32
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	200014c4 	.word	0x200014c4
 800c1c0:	200014c8 	.word	0x200014c8
 800c1c4:	200015cc 	.word	0x200015cc

0800c1c8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c1ce:	4b09      	ldr	r3, [pc, #36]	; (800c1f4 <uxTaskResetEventItemValue+0x2c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	699b      	ldr	r3, [r3, #24]
 800c1d4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1d6:	4b07      	ldr	r3, [pc, #28]	; (800c1f4 <uxTaskResetEventItemValue+0x2c>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <uxTaskResetEventItemValue+0x2c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f1c2 0207 	rsb	r2, r2, #7
 800c1e4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c1e6:	687b      	ldr	r3, [r7, #4]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	200014c4 	.word	0x200014c4

0800c1f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c1fc:	4b07      	ldr	r3, [pc, #28]	; (800c21c <pvTaskIncrementMutexHeldCount+0x24>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d004      	beq.n	800c20e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c204:	4b05      	ldr	r3, [pc, #20]	; (800c21c <pvTaskIncrementMutexHeldCount+0x24>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c20a:	3201      	adds	r2, #1
 800c20c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c20e:	4b03      	ldr	r3, [pc, #12]	; (800c21c <pvTaskIncrementMutexHeldCount+0x24>)
 800c210:	681b      	ldr	r3, [r3, #0]
	}
 800c212:	4618      	mov	r0, r3
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	200014c4 	.word	0x200014c4

0800c220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c22a:	4b29      	ldr	r3, [pc, #164]	; (800c2d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c230:	4b28      	ldr	r3, [pc, #160]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3304      	adds	r3, #4
 800c236:	4618      	mov	r0, r3
 800c238:	f7fd fff6 	bl	800a228 <uxListRemove>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10b      	bne.n	800c25a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c242:	4b24      	ldr	r3, [pc, #144]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	2201      	movs	r2, #1
 800c24a:	fa02 f303 	lsl.w	r3, r2, r3
 800c24e:	43da      	mvns	r2, r3
 800c250:	4b21      	ldr	r3, [pc, #132]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4013      	ands	r3, r2
 800c256:	4a20      	ldr	r2, [pc, #128]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c258:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c260:	d10a      	bne.n	800c278 <prvAddCurrentTaskToDelayedList+0x58>
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d007      	beq.n	800c278 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c268:	4b1a      	ldr	r3, [pc, #104]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	3304      	adds	r3, #4
 800c26e:	4619      	mov	r1, r3
 800c270:	481a      	ldr	r0, [pc, #104]	; (800c2dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c272:	f7fd ff7c 	bl	800a16e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c276:	e026      	b.n	800c2c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c280:	4b14      	ldr	r3, [pc, #80]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c288:	68ba      	ldr	r2, [r7, #8]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d209      	bcs.n	800c2a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c290:	4b13      	ldr	r3, [pc, #76]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	4b0f      	ldr	r3, [pc, #60]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	4619      	mov	r1, r3
 800c29c:	4610      	mov	r0, r2
 800c29e:	f7fd ff8a 	bl	800a1b6 <vListInsert>
}
 800c2a2:	e010      	b.n	800c2c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2a4:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c2a6:	681a      	ldr	r2, [r3, #0]
 800c2a8:	4b0a      	ldr	r3, [pc, #40]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f7fd ff80 	bl	800a1b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2b6:	4b0c      	ldr	r3, [pc, #48]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d202      	bcs.n	800c2c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c2c0:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6013      	str	r3, [r2, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200015c8 	.word	0x200015c8
 800c2d4:	200014c4 	.word	0x200014c4
 800c2d8:	200015cc 	.word	0x200015cc
 800c2dc:	200015b0 	.word	0x200015b0
 800c2e0:	20001580 	.word	0x20001580
 800c2e4:	2000157c 	.word	0x2000157c
 800c2e8:	200015e4 	.word	0x200015e4

0800c2ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2f6:	f000 faf1 	bl	800c8dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <xTimerCreateTimerTask+0x54>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00a      	beq.n	800c318 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c302:	4b10      	ldr	r3, [pc, #64]	; (800c344 <xTimerCreateTimerTask+0x58>)
 800c304:	9301      	str	r3, [sp, #4]
 800c306:	2306      	movs	r3, #6
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	2300      	movs	r3, #0
 800c30c:	2280      	movs	r2, #128	; 0x80
 800c30e:	490e      	ldr	r1, [pc, #56]	; (800c348 <xTimerCreateTimerTask+0x5c>)
 800c310:	480e      	ldr	r0, [pc, #56]	; (800c34c <xTimerCreateTimerTask+0x60>)
 800c312:	f7fe ff03 	bl	800b11c <xTaskCreate>
 800c316:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10a      	bne.n	800c334 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	603b      	str	r3, [r7, #0]
}
 800c330:	bf00      	nop
 800c332:	e7fe      	b.n	800c332 <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c334:	687b      	ldr	r3, [r7, #4]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3708      	adds	r7, #8
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	20001620 	.word	0x20001620
 800c344:	20001624 	.word	0x20001624
 800c348:	0801f1b8 	.word	0x0801f1b8
 800c34c:	0800c485 	.word	0x0800c485

0800c350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b08a      	sub	sp, #40	; 0x28
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
 800c35c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c35e:	2300      	movs	r3, #0
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d10a      	bne.n	800c37e <xTimerGenericCommand+0x2e>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	623b      	str	r3, [r7, #32]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c37e:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <xTimerGenericCommand+0x98>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d02a      	beq.n	800c3dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b05      	cmp	r3, #5
 800c396:	dc18      	bgt.n	800c3ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c398:	f7ff fd6e 	bl	800be78 <xTaskGetSchedulerState>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	d109      	bne.n	800c3b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3a2:	4b11      	ldr	r3, [pc, #68]	; (800c3e8 <xTimerGenericCommand+0x98>)
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	f107 0110 	add.w	r1, r7, #16
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	f7fe f855 	bl	800a45c <xQueueGenericSend>
 800c3b2:	6278      	str	r0, [r7, #36]	; 0x24
 800c3b4:	e012      	b.n	800c3dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <xTimerGenericCommand+0x98>)
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	f107 0110 	add.w	r1, r7, #16
 800c3be:	2300      	movs	r3, #0
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f7fe f84b 	bl	800a45c <xQueueGenericSend>
 800c3c6:	6278      	str	r0, [r7, #36]	; 0x24
 800c3c8:	e008      	b.n	800c3dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3ca:	4b07      	ldr	r3, [pc, #28]	; (800c3e8 <xTimerGenericCommand+0x98>)
 800c3cc:	6818      	ldr	r0, [r3, #0]
 800c3ce:	f107 0110 	add.w	r1, r7, #16
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	683a      	ldr	r2, [r7, #0]
 800c3d6:	f7fe f93f 	bl	800a658 <xQueueGenericSendFromISR>
 800c3da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3728      	adds	r7, #40	; 0x28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20001620 	.word	0x20001620

0800c3ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b088      	sub	sp, #32
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f6:	4b22      	ldr	r3, [pc, #136]	; (800c480 <prvProcessExpiredTimer+0x94>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	3304      	adds	r3, #4
 800c404:	4618      	mov	r0, r3
 800c406:	f7fd ff0f 	bl	800a228 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b00      	cmp	r3, #0
 800c416:	d022      	beq.n	800c45e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	699a      	ldr	r2, [r3, #24]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	18d1      	adds	r1, r2, r3
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	6978      	ldr	r0, [r7, #20]
 800c426:	f000 f8d1 	bl	800c5cc <prvInsertTimerInActiveList>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d01f      	beq.n	800c470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c430:	2300      	movs	r3, #0
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	2300      	movs	r3, #0
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	2100      	movs	r1, #0
 800c43a:	6978      	ldr	r0, [r7, #20]
 800c43c:	f7ff ff88 	bl	800c350 <xTimerGenericCommand>
 800c440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d113      	bne.n	800c470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	60fb      	str	r3, [r7, #12]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c464:	f023 0301 	bic.w	r3, r3, #1
 800c468:	b2da      	uxtb	r2, r3
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	6a1b      	ldr	r3, [r3, #32]
 800c474:	6978      	ldr	r0, [r7, #20]
 800c476:	4798      	blx	r3
}
 800c478:	bf00      	nop
 800c47a:	3718      	adds	r7, #24
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20001618 	.word	0x20001618

0800c484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c48c:	f107 0308 	add.w	r3, r7, #8
 800c490:	4618      	mov	r0, r3
 800c492:	f000 f857 	bl	800c544 <prvGetNextExpireTime>
 800c496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	4619      	mov	r1, r3
 800c49c:	68f8      	ldr	r0, [r7, #12]
 800c49e:	f000 f803 	bl	800c4a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4a2:	f000 f8d5 	bl	800c650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4a6:	e7f1      	b.n	800c48c <prvTimerTask+0x8>

0800c4a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4b2:	f7ff f877 	bl	800b5a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4b6:	f107 0308 	add.w	r3, r7, #8
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 f866 	bl	800c58c <prvSampleTimeNow>
 800c4c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d130      	bne.n	800c52a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <prvProcessTimerOrBlockTask+0x3c>
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d806      	bhi.n	800c4e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c4d6:	f7ff f873 	bl	800b5c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c4da:	68f9      	ldr	r1, [r7, #12]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ff85 	bl	800c3ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c4e2:	e024      	b.n	800c52e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d008      	beq.n	800c4fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c4ea:	4b13      	ldr	r3, [pc, #76]	; (800c538 <prvProcessTimerOrBlockTask+0x90>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <prvProcessTimerOrBlockTask+0x50>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	e000      	b.n	800c4fa <prvProcessTimerOrBlockTask+0x52>
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c4fc:	4b0f      	ldr	r3, [pc, #60]	; (800c53c <prvProcessTimerOrBlockTask+0x94>)
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	4619      	mov	r1, r3
 800c50a:	f7fe fdd3 	bl	800b0b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c50e:	f7ff f857 	bl	800b5c0 <xTaskResumeAll>
 800c512:	4603      	mov	r3, r0
 800c514:	2b00      	cmp	r3, #0
 800c516:	d10a      	bne.n	800c52e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c518:	4b09      	ldr	r3, [pc, #36]	; (800c540 <prvProcessTimerOrBlockTask+0x98>)
 800c51a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c51e:	601a      	str	r2, [r3, #0]
 800c520:	f3bf 8f4f 	dsb	sy
 800c524:	f3bf 8f6f 	isb	sy
}
 800c528:	e001      	b.n	800c52e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c52a:	f7ff f849 	bl	800b5c0 <xTaskResumeAll>
}
 800c52e:	bf00      	nop
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	2000161c 	.word	0x2000161c
 800c53c:	20001620 	.word	0x20001620
 800c540:	e000ed04 	.word	0xe000ed04

0800c544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c54c:	4b0e      	ldr	r3, [pc, #56]	; (800c588 <prvGetNextExpireTime+0x44>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <prvGetNextExpireTime+0x16>
 800c556:	2201      	movs	r2, #1
 800c558:	e000      	b.n	800c55c <prvGetNextExpireTime+0x18>
 800c55a:	2200      	movs	r2, #0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c568:	4b07      	ldr	r3, [pc, #28]	; (800c588 <prvGetNextExpireTime+0x44>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	60fb      	str	r3, [r7, #12]
 800c572:	e001      	b.n	800c578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c574:	2300      	movs	r3, #0
 800c576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c578:	68fb      	ldr	r3, [r7, #12]
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3714      	adds	r7, #20
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	20001618 	.word	0x20001618

0800c58c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c594:	f7ff f8b0 	bl	800b6f8 <xTaskGetTickCount>
 800c598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c59a:	4b0b      	ldr	r3, [pc, #44]	; (800c5c8 <prvSampleTimeNow+0x3c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d205      	bcs.n	800c5b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5a4:	f000 f936 	bl	800c814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	e002      	b.n	800c5b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5b6:	4a04      	ldr	r2, [pc, #16]	; (800c5c8 <prvSampleTimeNow+0x3c>)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	20001628 	.word	0x20001628

0800c5cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d812      	bhi.n	800c618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	1ad2      	subs	r2, r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d302      	bcc.n	800c606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c600:	2301      	movs	r3, #1
 800c602:	617b      	str	r3, [r7, #20]
 800c604:	e01b      	b.n	800c63e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c606:	4b10      	ldr	r3, [pc, #64]	; (800c648 <prvInsertTimerInActiveList+0x7c>)
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3304      	adds	r3, #4
 800c60e:	4619      	mov	r1, r3
 800c610:	4610      	mov	r0, r2
 800c612:	f7fd fdd0 	bl	800a1b6 <vListInsert>
 800c616:	e012      	b.n	800c63e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d206      	bcs.n	800c62e <prvInsertTimerInActiveList+0x62>
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d302      	bcc.n	800c62e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c628:	2301      	movs	r3, #1
 800c62a:	617b      	str	r3, [r7, #20]
 800c62c:	e007      	b.n	800c63e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c62e:	4b07      	ldr	r3, [pc, #28]	; (800c64c <prvInsertTimerInActiveList+0x80>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3304      	adds	r3, #4
 800c636:	4619      	mov	r1, r3
 800c638:	4610      	mov	r0, r2
 800c63a:	f7fd fdbc 	bl	800a1b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c63e:	697b      	ldr	r3, [r7, #20]
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	2000161c 	.word	0x2000161c
 800c64c:	20001618 	.word	0x20001618

0800c650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08e      	sub	sp, #56	; 0x38
 800c654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c656:	e0ca      	b.n	800c7ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	da18      	bge.n	800c690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c65e:	1d3b      	adds	r3, r7, #4
 800c660:	3304      	adds	r3, #4
 800c662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	61fb      	str	r3, [r7, #28]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c686:	6850      	ldr	r0, [r2, #4]
 800c688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c68a:	6892      	ldr	r2, [r2, #8]
 800c68c:	4611      	mov	r1, r2
 800c68e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	f2c0 80ab 	blt.w	800c7ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	695b      	ldr	r3, [r3, #20]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a6:	3304      	adds	r3, #4
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7fd fdbd 	bl	800a228 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7ff ff6b 	bl	800c58c <prvSampleTimeNow>
 800c6b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b09      	cmp	r3, #9
 800c6bc:	f200 8096 	bhi.w	800c7ec <prvProcessReceivedCommands+0x19c>
 800c6c0:	a201      	add	r2, pc, #4	; (adr r2, 800c6c8 <prvProcessReceivedCommands+0x78>)
 800c6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6c6:	bf00      	nop
 800c6c8:	0800c6f1 	.word	0x0800c6f1
 800c6cc:	0800c6f1 	.word	0x0800c6f1
 800c6d0:	0800c6f1 	.word	0x0800c6f1
 800c6d4:	0800c765 	.word	0x0800c765
 800c6d8:	0800c779 	.word	0x0800c779
 800c6dc:	0800c7c3 	.word	0x0800c7c3
 800c6e0:	0800c6f1 	.word	0x0800c6f1
 800c6e4:	0800c6f1 	.word	0x0800c6f1
 800c6e8:	0800c765 	.word	0x0800c765
 800c6ec:	0800c779 	.word	0x0800c779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6f6:	f043 0301 	orr.w	r3, r3, #1
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	18d1      	adds	r1, r2, r3
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c710:	f7ff ff5c 	bl	800c5cc <prvInsertTimerInActiveList>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d069      	beq.n	800c7ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d05e      	beq.n	800c7ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	441a      	add	r2, r3
 800c738:	2300      	movs	r3, #0
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	2300      	movs	r3, #0
 800c73e:	2100      	movs	r1, #0
 800c740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c742:	f7ff fe05 	bl	800c350 <xTimerGenericCommand>
 800c746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c748:	6a3b      	ldr	r3, [r7, #32]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d14f      	bne.n	800c7ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	61bb      	str	r3, [r7, #24]
}
 800c760:	bf00      	nop
 800c762:	e7fe      	b.n	800c762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c76a:	f023 0301 	bic.w	r3, r3, #1
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c776:	e03a      	b.n	800c7ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c77e:	f043 0301 	orr.w	r3, r3, #1
 800c782:	b2da      	uxtb	r2, r3
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10a      	bne.n	800c7ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	617b      	str	r3, [r7, #20]
}
 800c7aa:	bf00      	nop
 800c7ac:	e7fe      	b.n	800c7ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b4:	18d1      	adds	r1, r2, r3
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7bc:	f7ff ff06 	bl	800c5cc <prvInsertTimerInActiveList>
					break;
 800c7c0:	e015      	b.n	800c7ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7c8:	f003 0302 	and.w	r3, r3, #2
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7d2:	f000 fbf5 	bl	800cfc0 <vPortFree>
 800c7d6:	e00a      	b.n	800c7ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7de:	f023 0301 	bic.w	r3, r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c7ea:	e000      	b.n	800c7ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800c7ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7ee:	4b08      	ldr	r3, [pc, #32]	; (800c810 <prvProcessReceivedCommands+0x1c0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	1d39      	adds	r1, r7, #4
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7fe f856 	bl	800a8a8 <xQueueReceive>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f47f af2a 	bne.w	800c658 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	3730      	adds	r7, #48	; 0x30
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20001620 	.word	0x20001620

0800c814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b088      	sub	sp, #32
 800c818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c81a:	e048      	b.n	800c8ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c81c:	4b2d      	ldr	r3, [pc, #180]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	4b2b      	ldr	r3, [pc, #172]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fd fcf7 	bl	800a228 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c848:	f003 0304 	and.w	r3, r3, #4
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d02e      	beq.n	800c8ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	693a      	ldr	r2, [r7, #16]
 800c856:	4413      	add	r3, r2
 800c858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	429a      	cmp	r2, r3
 800c860:	d90e      	bls.n	800c880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	68ba      	ldr	r2, [r7, #8]
 800c866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c86e:	4b19      	ldr	r3, [pc, #100]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	3304      	adds	r3, #4
 800c876:	4619      	mov	r1, r3
 800c878:	4610      	mov	r0, r2
 800c87a:	f7fd fc9c 	bl	800a1b6 <vListInsert>
 800c87e:	e016      	b.n	800c8ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c880:	2300      	movs	r3, #0
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	2100      	movs	r1, #0
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f7ff fd60 	bl	800c350 <xTimerGenericCommand>
 800c890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10a      	bne.n	800c8ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	603b      	str	r3, [r7, #0]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8ae:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1b1      	bne.n	800c81c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8b8:	4b06      	ldr	r3, [pc, #24]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8be:	4b06      	ldr	r3, [pc, #24]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a04      	ldr	r2, [pc, #16]	; (800c8d4 <prvSwitchTimerLists+0xc0>)
 800c8c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8c6:	4a04      	ldr	r2, [pc, #16]	; (800c8d8 <prvSwitchTimerLists+0xc4>)
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	6013      	str	r3, [r2, #0]
}
 800c8cc:	bf00      	nop
 800c8ce:	3718      	adds	r7, #24
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	20001618 	.word	0x20001618
 800c8d8:	2000161c 	.word	0x2000161c

0800c8dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c8e0:	f000 f980 	bl	800cbe4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c8e4:	4b12      	ldr	r3, [pc, #72]	; (800c930 <prvCheckForValidListAndQueue+0x54>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d11d      	bne.n	800c928 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800c8ec:	4811      	ldr	r0, [pc, #68]	; (800c934 <prvCheckForValidListAndQueue+0x58>)
 800c8ee:	f7fd fc11 	bl	800a114 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c8f2:	4811      	ldr	r0, [pc, #68]	; (800c938 <prvCheckForValidListAndQueue+0x5c>)
 800c8f4:	f7fd fc0e 	bl	800a114 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c8f8:	4b10      	ldr	r3, [pc, #64]	; (800c93c <prvCheckForValidListAndQueue+0x60>)
 800c8fa:	4a0e      	ldr	r2, [pc, #56]	; (800c934 <prvCheckForValidListAndQueue+0x58>)
 800c8fc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c8fe:	4b10      	ldr	r3, [pc, #64]	; (800c940 <prvCheckForValidListAndQueue+0x64>)
 800c900:	4a0d      	ldr	r2, [pc, #52]	; (800c938 <prvCheckForValidListAndQueue+0x5c>)
 800c902:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800c904:	2200      	movs	r2, #0
 800c906:	2110      	movs	r1, #16
 800c908:	2001      	movs	r0, #1
 800c90a:	f7fd fd1f 	bl	800a34c <xQueueGenericCreate>
 800c90e:	4603      	mov	r3, r0
 800c910:	4a07      	ldr	r2, [pc, #28]	; (800c930 <prvCheckForValidListAndQueue+0x54>)
 800c912:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c914:	4b06      	ldr	r3, [pc, #24]	; (800c930 <prvCheckForValidListAndQueue+0x54>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c91c:	4b04      	ldr	r3, [pc, #16]	; (800c930 <prvCheckForValidListAndQueue+0x54>)
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4908      	ldr	r1, [pc, #32]	; (800c944 <prvCheckForValidListAndQueue+0x68>)
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fb72 	bl	800b00c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c928:	f000 f98c 	bl	800cc44 <vPortExitCritical>
}
 800c92c:	bf00      	nop
 800c92e:	bd80      	pop	{r7, pc}
 800c930:	20001620 	.word	0x20001620
 800c934:	200015f0 	.word	0x200015f0
 800c938:	20001604 	.word	0x20001604
 800c93c:	20001618 	.word	0x20001618
 800c940:	2000161c 	.word	0x2000161c
 800c944:	0801f1c0 	.word	0x0801f1c0

0800c948 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c956:	f06f 0301 	mvn.w	r3, #1
 800c95a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <xTimerPendFunctionCallFromISR+0x3c>)
 800c96a:	6818      	ldr	r0, [r3, #0]
 800c96c:	f107 0114 	add.w	r1, r7, #20
 800c970:	2300      	movs	r3, #0
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	f7fd fe70 	bl	800a658 <xQueueGenericSendFromISR>
 800c978:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3728      	adds	r7, #40	; 0x28
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20001620 	.word	0x20001620

0800c988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3b04      	subs	r3, #4
 800c998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c9a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3b04      	subs	r3, #4
 800c9a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	f023 0201 	bic.w	r2, r3, #1
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c9b8:	4a0c      	ldr	r2, [pc, #48]	; (800c9ec <pxPortInitialiseStack+0x64>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	3b14      	subs	r3, #20
 800c9c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3b04      	subs	r3, #4
 800c9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f06f 0202 	mvn.w	r2, #2
 800c9d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	3b20      	subs	r3, #32
 800c9dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c9de:	68fb      	ldr	r3, [r7, #12]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr
 800c9ec:	0800c9f1 	.word	0x0800c9f1

0800c9f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c9fa:	4b12      	ldr	r3, [pc, #72]	; (800ca44 <prvTaskExitError+0x54>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca02:	d00a      	beq.n	800ca1a <prvTaskExitError+0x2a>
	__asm volatile
 800ca04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca08:	f383 8811 	msr	BASEPRI, r3
 800ca0c:	f3bf 8f6f 	isb	sy
 800ca10:	f3bf 8f4f 	dsb	sy
 800ca14:	60fb      	str	r3, [r7, #12]
}
 800ca16:	bf00      	nop
 800ca18:	e7fe      	b.n	800ca18 <prvTaskExitError+0x28>
	__asm volatile
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	60bb      	str	r3, [r7, #8]
}
 800ca2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ca2e:	bf00      	nop
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0fc      	beq.n	800ca30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	200000b4 	.word	0x200000b4
	...

0800ca50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <pxCurrentTCBConst2>)
 800ca52:	6819      	ldr	r1, [r3, #0]
 800ca54:	6808      	ldr	r0, [r1, #0]
 800ca56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca5a:	f380 8809 	msr	PSP, r0
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f04f 0000 	mov.w	r0, #0
 800ca66:	f380 8811 	msr	BASEPRI, r0
 800ca6a:	4770      	bx	lr
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst2>:
 800ca70:	200014c4 	.word	0x200014c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ca78:	4808      	ldr	r0, [pc, #32]	; (800ca9c <prvPortStartFirstTask+0x24>)
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	6800      	ldr	r0, [r0, #0]
 800ca7e:	f380 8808 	msr	MSP, r0
 800ca82:	f04f 0000 	mov.w	r0, #0
 800ca86:	f380 8814 	msr	CONTROL, r0
 800ca8a:	b662      	cpsie	i
 800ca8c:	b661      	cpsie	f
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	df00      	svc	0
 800ca98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ca9a:	bf00      	nop
 800ca9c:	e000ed08 	.word	0xe000ed08

0800caa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b086      	sub	sp, #24
 800caa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800caa6:	4b46      	ldr	r3, [pc, #280]	; (800cbc0 <xPortStartScheduler+0x120>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a46      	ldr	r2, [pc, #280]	; (800cbc4 <xPortStartScheduler+0x124>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d10a      	bne.n	800cac6 <xPortStartScheduler+0x26>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	f383 8811 	msr	BASEPRI, r3
 800cab8:	f3bf 8f6f 	isb	sy
 800cabc:	f3bf 8f4f 	dsb	sy
 800cac0:	613b      	str	r3, [r7, #16]
}
 800cac2:	bf00      	nop
 800cac4:	e7fe      	b.n	800cac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cac6:	4b3e      	ldr	r3, [pc, #248]	; (800cbc0 <xPortStartScheduler+0x120>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a3f      	ldr	r2, [pc, #252]	; (800cbc8 <xPortStartScheduler+0x128>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d10a      	bne.n	800cae6 <xPortStartScheduler+0x46>
	__asm volatile
 800cad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad4:	f383 8811 	msr	BASEPRI, r3
 800cad8:	f3bf 8f6f 	isb	sy
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	60fb      	str	r3, [r7, #12]
}
 800cae2:	bf00      	nop
 800cae4:	e7fe      	b.n	800cae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cae6:	4b39      	ldr	r3, [pc, #228]	; (800cbcc <xPortStartScheduler+0x12c>)
 800cae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	22ff      	movs	r2, #255	; 0xff
 800caf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb00:	78fb      	ldrb	r3, [r7, #3]
 800cb02:	b2db      	uxtb	r3, r3
 800cb04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb08:	b2da      	uxtb	r2, r3
 800cb0a:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <xPortStartScheduler+0x130>)
 800cb0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb0e:	4b31      	ldr	r3, [pc, #196]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb10:	2207      	movs	r2, #7
 800cb12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb14:	e009      	b.n	800cb2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cb16:	4b2f      	ldr	r3, [pc, #188]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	4a2d      	ldr	r2, [pc, #180]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb2a:	78fb      	ldrb	r3, [r7, #3]
 800cb2c:	b2db      	uxtb	r3, r3
 800cb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb32:	2b80      	cmp	r3, #128	; 0x80
 800cb34:	d0ef      	beq.n	800cb16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cb36:	4b27      	ldr	r3, [pc, #156]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f1c3 0307 	rsb	r3, r3, #7
 800cb3e:	2b04      	cmp	r3, #4
 800cb40:	d00a      	beq.n	800cb58 <xPortStartScheduler+0xb8>
	__asm volatile
 800cb42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb46:	f383 8811 	msr	BASEPRI, r3
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	f3bf 8f4f 	dsb	sy
 800cb52:	60bb      	str	r3, [r7, #8]
}
 800cb54:	bf00      	nop
 800cb56:	e7fe      	b.n	800cb56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cb58:	4b1e      	ldr	r3, [pc, #120]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	4a1d      	ldr	r2, [pc, #116]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cb62:	4b1c      	ldr	r3, [pc, #112]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cb6a:	4a1a      	ldr	r2, [pc, #104]	; (800cbd4 <xPortStartScheduler+0x134>)
 800cb6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cb76:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a17      	ldr	r2, [pc, #92]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cb80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cb82:	4b15      	ldr	r3, [pc, #84]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a14      	ldr	r2, [pc, #80]	; (800cbd8 <xPortStartScheduler+0x138>)
 800cb88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cb8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cb8e:	f000 f8dd 	bl	800cd4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <xPortStartScheduler+0x13c>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cb98:	f000 f8fc 	bl	800cd94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cb9c:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a0f      	ldr	r2, [pc, #60]	; (800cbe0 <xPortStartScheduler+0x140>)
 800cba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cba8:	f7ff ff66 	bl	800ca78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cbac:	f7fe fe7e 	bl	800b8ac <vTaskSwitchContext>
	prvTaskExitError();
 800cbb0:	f7ff ff1e 	bl	800c9f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cbb4:	2300      	movs	r3, #0
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	e000ed00 	.word	0xe000ed00
 800cbc4:	410fc271 	.word	0x410fc271
 800cbc8:	410fc270 	.word	0x410fc270
 800cbcc:	e000e400 	.word	0xe000e400
 800cbd0:	2000162c 	.word	0x2000162c
 800cbd4:	20001630 	.word	0x20001630
 800cbd8:	e000ed20 	.word	0xe000ed20
 800cbdc:	200000b4 	.word	0x200000b4
 800cbe0:	e000ef34 	.word	0xe000ef34

0800cbe4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	607b      	str	r3, [r7, #4]
}
 800cbfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	4a0d      	ldr	r2, [pc, #52]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc08:	4b0c      	ldr	r3, [pc, #48]	; (800cc3c <vPortEnterCritical+0x58>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b01      	cmp	r3, #1
 800cc0e:	d10f      	bne.n	800cc30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc10:	4b0b      	ldr	r3, [pc, #44]	; (800cc40 <vPortEnterCritical+0x5c>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00a      	beq.n	800cc30 <vPortEnterCritical+0x4c>
	__asm volatile
 800cc1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1e:	f383 8811 	msr	BASEPRI, r3
 800cc22:	f3bf 8f6f 	isb	sy
 800cc26:	f3bf 8f4f 	dsb	sy
 800cc2a:	603b      	str	r3, [r7, #0]
}
 800cc2c:	bf00      	nop
 800cc2e:	e7fe      	b.n	800cc2e <vPortEnterCritical+0x4a>
	}
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr
 800cc3c:	200000b4 	.word	0x200000b4
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <vPortExitCritical+0x50>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d10a      	bne.n	800cc68 <vPortExitCritical+0x24>
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	f383 8811 	msr	BASEPRI, r3
 800cc5a:	f3bf 8f6f 	isb	sy
 800cc5e:	f3bf 8f4f 	dsb	sy
 800cc62:	607b      	str	r3, [r7, #4]
}
 800cc64:	bf00      	nop
 800cc66:	e7fe      	b.n	800cc66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cc68:	4b0a      	ldr	r3, [pc, #40]	; (800cc94 <vPortExitCritical+0x50>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3b01      	subs	r3, #1
 800cc6e:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <vPortExitCritical+0x50>)
 800cc70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cc72:	4b08      	ldr	r3, [pc, #32]	; (800cc94 <vPortExitCritical+0x50>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <vPortExitCritical+0x42>
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	f383 8811 	msr	BASEPRI, r3
}
 800cc84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cc86:	bf00      	nop
 800cc88:	370c      	adds	r7, #12
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	200000b4 	.word	0x200000b4
	...

0800cca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cca0:	f3ef 8009 	mrs	r0, PSP
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	4b15      	ldr	r3, [pc, #84]	; (800cd00 <pxCurrentTCBConst>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	f01e 0f10 	tst.w	lr, #16
 800ccb0:	bf08      	it	eq
 800ccb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ccb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccba:	6010      	str	r0, [r2, #0]
 800ccbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ccc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ccc4:	f380 8811 	msr	BASEPRI, r0
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f7fe fdec 	bl	800b8ac <vTaskSwitchContext>
 800ccd4:	f04f 0000 	mov.w	r0, #0
 800ccd8:	f380 8811 	msr	BASEPRI, r0
 800ccdc:	bc09      	pop	{r0, r3}
 800ccde:	6819      	ldr	r1, [r3, #0]
 800cce0:	6808      	ldr	r0, [r1, #0]
 800cce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce6:	f01e 0f10 	tst.w	lr, #16
 800ccea:	bf08      	it	eq
 800ccec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ccf0:	f380 8809 	msr	PSP, r0
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	4770      	bx	lr
 800ccfa:	bf00      	nop
 800ccfc:	f3af 8000 	nop.w

0800cd00 <pxCurrentTCBConst>:
 800cd00:	200014c4 	.word	0x200014c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop

0800cd08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd22:	f7fe fd0b 	bl	800b73c <xTaskIncrementTick>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d003      	beq.n	800cd34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cd2c:	4b06      	ldr	r3, [pc, #24]	; (800cd48 <xPortSysTickHandler+0x40>)
 800cd2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	2300      	movs	r3, #0
 800cd36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	f383 8811 	msr	BASEPRI, r3
}
 800cd3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cd40:	bf00      	nop
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	e000ed04 	.word	0xe000ed04

0800cd4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cd50:	4b0b      	ldr	r3, [pc, #44]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cd56:	4b0b      	ldr	r3, [pc, #44]	; (800cd84 <vPortSetupTimerInterrupt+0x38>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cd5c:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <vPortSetupTimerInterrupt+0x3c>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a0a      	ldr	r2, [pc, #40]	; (800cd8c <vPortSetupTimerInterrupt+0x40>)
 800cd62:	fba2 2303 	umull	r2, r3, r2, r3
 800cd66:	099b      	lsrs	r3, r3, #6
 800cd68:	4a09      	ldr	r2, [pc, #36]	; (800cd90 <vPortSetupTimerInterrupt+0x44>)
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cd6e:	4b04      	ldr	r3, [pc, #16]	; (800cd80 <vPortSetupTimerInterrupt+0x34>)
 800cd70:	2207      	movs	r2, #7
 800cd72:	601a      	str	r2, [r3, #0]
}
 800cd74:	bf00      	nop
 800cd76:	46bd      	mov	sp, r7
 800cd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7c:	4770      	bx	lr
 800cd7e:	bf00      	nop
 800cd80:	e000e010 	.word	0xe000e010
 800cd84:	e000e018 	.word	0xe000e018
 800cd88:	200000a8 	.word	0x200000a8
 800cd8c:	10624dd3 	.word	0x10624dd3
 800cd90:	e000e014 	.word	0xe000e014

0800cd94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cd94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cda4 <vPortEnableVFP+0x10>
 800cd98:	6801      	ldr	r1, [r0, #0]
 800cd9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cd9e:	6001      	str	r1, [r0, #0]
 800cda0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cda2:	bf00      	nop
 800cda4:	e000ed88 	.word	0xe000ed88

0800cda8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cda8:	b480      	push	{r7}
 800cdaa:	b085      	sub	sp, #20
 800cdac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cdae:	f3ef 8305 	mrs	r3, IPSR
 800cdb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b0f      	cmp	r3, #15
 800cdb8:	d914      	bls.n	800cde4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cdba:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <vPortValidateInterruptPriority+0x70>)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	4413      	add	r3, r2
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <vPortValidateInterruptPriority+0x74>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	7afa      	ldrb	r2, [r7, #11]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d20a      	bcs.n	800cde4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	607b      	str	r3, [r7, #4]
}
 800cde0:	bf00      	nop
 800cde2:	e7fe      	b.n	800cde2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cde4:	4b0e      	ldr	r3, [pc, #56]	; (800ce20 <vPortValidateInterruptPriority+0x78>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cdec:	4b0d      	ldr	r3, [pc, #52]	; (800ce24 <vPortValidateInterruptPriority+0x7c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d90a      	bls.n	800ce0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	603b      	str	r3, [r7, #0]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <vPortValidateInterruptPriority+0x60>
	}
 800ce0a:	bf00      	nop
 800ce0c:	3714      	adds	r7, #20
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	e000e3f0 	.word	0xe000e3f0
 800ce1c:	2000162c 	.word	0x2000162c
 800ce20:	e000ed0c 	.word	0xe000ed0c
 800ce24:	20001630 	.word	0x20001630

0800ce28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b08a      	sub	sp, #40	; 0x28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ce30:	2300      	movs	r3, #0
 800ce32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ce34:	f7fe fbb6 	bl	800b5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ce38:	4b5b      	ldr	r3, [pc, #364]	; (800cfa8 <pvPortMalloc+0x180>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ce40:	f000 f920 	bl	800d084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ce44:	4b59      	ldr	r3, [pc, #356]	; (800cfac <pvPortMalloc+0x184>)
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	f040 8093 	bne.w	800cf78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01d      	beq.n	800ce94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ce58:	2208      	movs	r2, #8
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4413      	add	r3, r2
 800ce5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f003 0307 	and.w	r3, r3, #7
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d014      	beq.n	800ce94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f023 0307 	bic.w	r3, r3, #7
 800ce70:	3308      	adds	r3, #8
 800ce72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f003 0307 	and.w	r3, r3, #7
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <pvPortMalloc+0x6c>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	617b      	str	r3, [r7, #20]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d06e      	beq.n	800cf78 <pvPortMalloc+0x150>
 800ce9a:	4b45      	ldr	r3, [pc, #276]	; (800cfb0 <pvPortMalloc+0x188>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d869      	bhi.n	800cf78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cea4:	4b43      	ldr	r3, [pc, #268]	; (800cfb4 <pvPortMalloc+0x18c>)
 800cea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cea8:	4b42      	ldr	r3, [pc, #264]	; (800cfb4 <pvPortMalloc+0x18c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceae:	e004      	b.n	800ceba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d903      	bls.n	800cecc <pvPortMalloc+0xa4>
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d1f1      	bne.n	800ceb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cecc:	4b36      	ldr	r3, [pc, #216]	; (800cfa8 <pvPortMalloc+0x180>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d050      	beq.n	800cf78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2208      	movs	r2, #8
 800cedc:	4413      	add	r3, r2
 800cede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	6a3b      	ldr	r3, [r7, #32]
 800cee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	1ad2      	subs	r2, r2, r3
 800cef0:	2308      	movs	r3, #8
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d91f      	bls.n	800cf38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	4413      	add	r3, r2
 800cefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	f003 0307 	and.w	r3, r3, #7
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <pvPortMalloc+0xf8>
	__asm volatile
 800cf0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0e:	f383 8811 	msr	BASEPRI, r3
 800cf12:	f3bf 8f6f 	isb	sy
 800cf16:	f3bf 8f4f 	dsb	sy
 800cf1a:	613b      	str	r3, [r7, #16]
}
 800cf1c:	bf00      	nop
 800cf1e:	e7fe      	b.n	800cf1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf22:	685a      	ldr	r2, [r3, #4]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	1ad2      	subs	r2, r2, r3
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cf32:	69b8      	ldr	r0, [r7, #24]
 800cf34:	f000 f908 	bl	800d148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cf38:	4b1d      	ldr	r3, [pc, #116]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	1ad3      	subs	r3, r2, r3
 800cf42:	4a1b      	ldr	r2, [pc, #108]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cf46:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d203      	bcs.n	800cf5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cf52:	4b17      	ldr	r3, [pc, #92]	; (800cfb0 <pvPortMalloc+0x188>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	4a18      	ldr	r2, [pc, #96]	; (800cfb8 <pvPortMalloc+0x190>)
 800cf58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <pvPortMalloc+0x184>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	431a      	orrs	r2, r3
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <pvPortMalloc+0x194>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3301      	adds	r3, #1
 800cf74:	4a11      	ldr	r2, [pc, #68]	; (800cfbc <pvPortMalloc+0x194>)
 800cf76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cf78:	f7fe fb22 	bl	800b5c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	f003 0307 	and.w	r3, r3, #7
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00a      	beq.n	800cf9c <pvPortMalloc+0x174>
	__asm volatile
 800cf86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8a:	f383 8811 	msr	BASEPRI, r3
 800cf8e:	f3bf 8f6f 	isb	sy
 800cf92:	f3bf 8f4f 	dsb	sy
 800cf96:	60fb      	str	r3, [r7, #12]
}
 800cf98:	bf00      	nop
 800cf9a:	e7fe      	b.n	800cf9a <pvPortMalloc+0x172>
	return pvReturn;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	; 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	2000a23c 	.word	0x2000a23c
 800cfac:	2000a250 	.word	0x2000a250
 800cfb0:	2000a240 	.word	0x2000a240
 800cfb4:	2000a234 	.word	0x2000a234
 800cfb8:	2000a244 	.word	0x2000a244
 800cfbc:	2000a248 	.word	0x2000a248

0800cfc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b086      	sub	sp, #24
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d04d      	beq.n	800d06e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cfd2:	2308      	movs	r3, #8
 800cfd4:	425b      	negs	r3, r3
 800cfd6:	697a      	ldr	r2, [r7, #20]
 800cfd8:	4413      	add	r3, r2
 800cfda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cfe0:	693b      	ldr	r3, [r7, #16]
 800cfe2:	685a      	ldr	r2, [r3, #4]
 800cfe4:	4b24      	ldr	r3, [pc, #144]	; (800d078 <vPortFree+0xb8>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4013      	ands	r3, r2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10a      	bne.n	800d004 <vPortFree+0x44>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	60fb      	str	r3, [r7, #12]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <vPortFree+0x62>
	__asm volatile
 800d00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d010:	f383 8811 	msr	BASEPRI, r3
 800d014:	f3bf 8f6f 	isb	sy
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	60bb      	str	r3, [r7, #8]
}
 800d01e:	bf00      	nop
 800d020:	e7fe      	b.n	800d020 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	4b14      	ldr	r3, [pc, #80]	; (800d078 <vPortFree+0xb8>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	4013      	ands	r3, r2
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d01e      	beq.n	800d06e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d11a      	bne.n	800d06e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	685a      	ldr	r2, [r3, #4]
 800d03c:	4b0e      	ldr	r3, [pc, #56]	; (800d078 <vPortFree+0xb8>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	43db      	mvns	r3, r3
 800d042:	401a      	ands	r2, r3
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d048:	f7fe faac 	bl	800b5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	4b0a      	ldr	r3, [pc, #40]	; (800d07c <vPortFree+0xbc>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4413      	add	r3, r2
 800d056:	4a09      	ldr	r2, [pc, #36]	; (800d07c <vPortFree+0xbc>)
 800d058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d05a:	6938      	ldr	r0, [r7, #16]
 800d05c:	f000 f874 	bl	800d148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d060:	4b07      	ldr	r3, [pc, #28]	; (800d080 <vPortFree+0xc0>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3301      	adds	r3, #1
 800d066:	4a06      	ldr	r2, [pc, #24]	; (800d080 <vPortFree+0xc0>)
 800d068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d06a:	f7fe faa9 	bl	800b5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d06e:	bf00      	nop
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000a250 	.word	0x2000a250
 800d07c:	2000a240 	.word	0x2000a240
 800d080:	2000a24c 	.word	0x2000a24c

0800d084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d08a:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800d08e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d090:	4b27      	ldr	r3, [pc, #156]	; (800d130 <prvHeapInit+0xac>)
 800d092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00c      	beq.n	800d0b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	3307      	adds	r3, #7
 800d0a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0307 	bic.w	r3, r3, #7
 800d0aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d0ac:	68ba      	ldr	r2, [r7, #8]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	4a1f      	ldr	r2, [pc, #124]	; (800d130 <prvHeapInit+0xac>)
 800d0b4:	4413      	add	r3, r2
 800d0b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d0bc:	4a1d      	ldr	r2, [pc, #116]	; (800d134 <prvHeapInit+0xb0>)
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d0c2:	4b1c      	ldr	r3, [pc, #112]	; (800d134 <prvHeapInit+0xb0>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d0d0:	2208      	movs	r2, #8
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	1a9b      	subs	r3, r3, r2
 800d0d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0307 	bic.w	r3, r3, #7
 800d0de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	4a15      	ldr	r2, [pc, #84]	; (800d138 <prvHeapInit+0xb4>)
 800d0e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d0e6:	4b14      	ldr	r3, [pc, #80]	; (800d138 <prvHeapInit+0xb4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d0ee:	4b12      	ldr	r3, [pc, #72]	; (800d138 <prvHeapInit+0xb4>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	68fa      	ldr	r2, [r7, #12]
 800d0fe:	1ad2      	subs	r2, r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <prvHeapInit+0xb4>)
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	4a0a      	ldr	r2, [pc, #40]	; (800d13c <prvHeapInit+0xb8>)
 800d112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	4a09      	ldr	r2, [pc, #36]	; (800d140 <prvHeapInit+0xbc>)
 800d11a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d11c:	4b09      	ldr	r3, [pc, #36]	; (800d144 <prvHeapInit+0xc0>)
 800d11e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d122:	601a      	str	r2, [r3, #0]
}
 800d124:	bf00      	nop
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	20001634 	.word	0x20001634
 800d134:	2000a234 	.word	0x2000a234
 800d138:	2000a23c 	.word	0x2000a23c
 800d13c:	2000a244 	.word	0x2000a244
 800d140:	2000a240 	.word	0x2000a240
 800d144:	2000a250 	.word	0x2000a250

0800d148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d150:	4b28      	ldr	r3, [pc, #160]	; (800d1f4 <prvInsertBlockIntoFreeList+0xac>)
 800d152:	60fb      	str	r3, [r7, #12]
 800d154:	e002      	b.n	800d15c <prvInsertBlockIntoFreeList+0x14>
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	429a      	cmp	r2, r3
 800d164:	d8f7      	bhi.n	800d156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	4413      	add	r3, r2
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	429a      	cmp	r2, r3
 800d176:	d108      	bne.n	800d18a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	441a      	add	r2, r3
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	68ba      	ldr	r2, [r7, #8]
 800d194:	441a      	add	r2, r3
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d118      	bne.n	800d1d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d00d      	beq.n	800d1c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	441a      	add	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e008      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d1c6:	4b0c      	ldr	r3, [pc, #48]	; (800d1f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	601a      	str	r2, [r3, #0]
 800d1ce:	e003      	b.n	800d1d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d002      	beq.n	800d1e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d1e6:	bf00      	nop
 800d1e8:	3714      	adds	r7, #20
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	2000a234 	.word	0x2000a234
 800d1f8:	2000a23c 	.word	0x2000a23c

0800d1fc <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d007      	beq.n	800d220 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	68db      	ldr	r3, [r3, #12]
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	6852      	ldr	r2, [r2, #4]
 800d218:	4610      	mov	r0, r2
 800d21a:	4798      	blx	r3
 800d21c:	4603      	mov	r3, r0
 800d21e:	e006      	b.n	800d22e <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	68fa      	ldr	r2, [r7, #12]
 800d226:	6852      	ldr	r2, [r2, #4]
 800d228:	4610      	mov	r0, r2
 800d22a:	4798      	blx	r3
    return ERR_OK;
 800d22c:	2300      	movs	r3, #0
  }
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
	...

0800d238 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08e      	sub	sp, #56	; 0x38
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d250:	f107 0314 	add.w	r3, r7, #20
 800d254:	4619      	mov	r1, r3
 800d256:	4806      	ldr	r0, [pc, #24]	; (800d270 <netifapi_netif_common+0x38>)
 800d258:	f000 f99a 	bl	800d590 <tcpip_api_call>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d262:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d266:	4618      	mov	r0, r3
 800d268:	3738      	adds	r7, #56	; 0x38
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	0800d1fd 	.word	0x0800d1fd

0800d274 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d27e:	f008 fc7f 	bl	8015b80 <sys_timeouts_sleeptime>
 800d282:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28a:	d10b      	bne.n	800d2a4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d28c:	4813      	ldr	r0, [pc, #76]	; (800d2dc <tcpip_timeouts_mbox_fetch+0x68>)
 800d28e:	f00d fed6 	bl	801b03e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d292:	2200      	movs	r2, #0
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f00d fe4a 	bl	801af30 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d29c:	480f      	ldr	r0, [pc, #60]	; (800d2dc <tcpip_timeouts_mbox_fetch+0x68>)
 800d29e:	f00d febf 	bl	801b020 <sys_mutex_lock>
    return;
 800d2a2:	e018      	b.n	800d2d6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d102      	bne.n	800d2b0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d2aa:	f008 fc2f 	bl	8015b0c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d2ae:	e7e6      	b.n	800d27e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d2b0:	480a      	ldr	r0, [pc, #40]	; (800d2dc <tcpip_timeouts_mbox_fetch+0x68>)
 800d2b2:	f00d fec4 	bl	801b03e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d2b6:	68fa      	ldr	r2, [r7, #12]
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f00d fe38 	bl	801af30 <sys_arch_mbox_fetch>
 800d2c0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d2c2:	4806      	ldr	r0, [pc, #24]	; (800d2dc <tcpip_timeouts_mbox_fetch+0x68>)
 800d2c4:	f00d feac 	bl	801b020 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ce:	d102      	bne.n	800d2d6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d2d0:	f008 fc1c 	bl	8015b0c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d2d4:	e7d3      	b.n	800d27e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	2000a260 	.word	0x2000a260

0800d2e0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d2e8:	4810      	ldr	r0, [pc, #64]	; (800d32c <tcpip_thread+0x4c>)
 800d2ea:	f00d fe99 	bl	801b020 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d2ee:	4b10      	ldr	r3, [pc, #64]	; (800d330 <tcpip_thread+0x50>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d005      	beq.n	800d302 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d2f6:	4b0e      	ldr	r3, [pc, #56]	; (800d330 <tcpip_thread+0x50>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	4a0e      	ldr	r2, [pc, #56]	; (800d334 <tcpip_thread+0x54>)
 800d2fc:	6812      	ldr	r2, [r2, #0]
 800d2fe:	4610      	mov	r0, r2
 800d300:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d302:	f107 030c 	add.w	r3, r7, #12
 800d306:	4619      	mov	r1, r3
 800d308:	480b      	ldr	r0, [pc, #44]	; (800d338 <tcpip_thread+0x58>)
 800d30a:	f7ff ffb3 	bl	800d274 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d106      	bne.n	800d322 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d314:	4b09      	ldr	r3, [pc, #36]	; (800d33c <tcpip_thread+0x5c>)
 800d316:	2291      	movs	r2, #145	; 0x91
 800d318:	4909      	ldr	r1, [pc, #36]	; (800d340 <tcpip_thread+0x60>)
 800d31a:	480a      	ldr	r0, [pc, #40]	; (800d344 <tcpip_thread+0x64>)
 800d31c:	f00e fd84 	bl	801be28 <iprintf>
      continue;
 800d320:	e003      	b.n	800d32a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f80f 	bl	800d348 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d32a:	e7ea      	b.n	800d302 <tcpip_thread+0x22>
 800d32c:	2000a260 	.word	0x2000a260
 800d330:	2000a254 	.word	0x2000a254
 800d334:	2000a258 	.word	0x2000a258
 800d338:	2000a25c 	.word	0x2000a25c
 800d33c:	0801f1c8 	.word	0x0801f1c8
 800d340:	0801f1f8 	.word	0x0801f1f8
 800d344:	0801f218 	.word	0x0801f218

0800d348 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d026      	beq.n	800d3a6 <tcpip_thread_handle_msg+0x5e>
 800d358:	2b02      	cmp	r3, #2
 800d35a:	dc2b      	bgt.n	800d3b4 <tcpip_thread_handle_msg+0x6c>
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d002      	beq.n	800d366 <tcpip_thread_handle_msg+0x1e>
 800d360:	2b01      	cmp	r3, #1
 800d362:	d015      	beq.n	800d390 <tcpip_thread_handle_msg+0x48>
 800d364:	e026      	b.n	800d3b4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	6850      	ldr	r0, [r2, #4]
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	6892      	ldr	r2, [r2, #8]
 800d372:	4611      	mov	r1, r2
 800d374:	4798      	blx	r3
 800d376:	4603      	mov	r3, r0
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d004      	beq.n	800d386 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	f001 fe89 	bl	800f098 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d386:	6879      	ldr	r1, [r7, #4]
 800d388:	2009      	movs	r0, #9
 800d38a:	f000 ffe3 	bl	800e354 <memp_free>
      break;
 800d38e:	e018      	b.n	800d3c2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	685b      	ldr	r3, [r3, #4]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	6892      	ldr	r2, [r2, #8]
 800d398:	4610      	mov	r0, r2
 800d39a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d39c:	6879      	ldr	r1, [r7, #4]
 800d39e:	2008      	movs	r0, #8
 800d3a0:	f000 ffd8 	bl	800e354 <memp_free>
      break;
 800d3a4:	e00d      	b.n	800d3c2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	6892      	ldr	r2, [r2, #8]
 800d3ae:	4610      	mov	r0, r2
 800d3b0:	4798      	blx	r3
      break;
 800d3b2:	e006      	b.n	800d3c2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <tcpip_thread_handle_msg+0x84>)
 800d3b6:	22cf      	movs	r2, #207	; 0xcf
 800d3b8:	4905      	ldr	r1, [pc, #20]	; (800d3d0 <tcpip_thread_handle_msg+0x88>)
 800d3ba:	4806      	ldr	r0, [pc, #24]	; (800d3d4 <tcpip_thread_handle_msg+0x8c>)
 800d3bc:	f00e fd34 	bl	801be28 <iprintf>
      break;
 800d3c0:	bf00      	nop
  }
}
 800d3c2:	bf00      	nop
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	0801f1c8 	.word	0x0801f1c8
 800d3d0:	0801f1f8 	.word	0x0801f1f8
 800d3d4:	0801f218 	.word	0x0801f218

0800d3d8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b086      	sub	sp, #24
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d3e4:	481a      	ldr	r0, [pc, #104]	; (800d450 <tcpip_inpkt+0x78>)
 800d3e6:	f00d fde2 	bl	801afae <sys_mbox_valid>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d105      	bne.n	800d3fc <tcpip_inpkt+0x24>
 800d3f0:	4b18      	ldr	r3, [pc, #96]	; (800d454 <tcpip_inpkt+0x7c>)
 800d3f2:	22fc      	movs	r2, #252	; 0xfc
 800d3f4:	4918      	ldr	r1, [pc, #96]	; (800d458 <tcpip_inpkt+0x80>)
 800d3f6:	4819      	ldr	r0, [pc, #100]	; (800d45c <tcpip_inpkt+0x84>)
 800d3f8:	f00e fd16 	bl	801be28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d3fc:	2009      	movs	r0, #9
 800d3fe:	f000 ff57 	bl	800e2b0 <memp_malloc>
 800d402:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d102      	bne.n	800d410 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d40a:	f04f 33ff 	mov.w	r3, #4294967295
 800d40e:	e01a      	b.n	800d446 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	2200      	movs	r2, #0
 800d414:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	68ba      	ldr	r2, [r7, #8]
 800d420:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d428:	6979      	ldr	r1, [r7, #20]
 800d42a:	4809      	ldr	r0, [pc, #36]	; (800d450 <tcpip_inpkt+0x78>)
 800d42c:	f00d fd66 	bl	801aefc <sys_mbox_trypost>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d006      	beq.n	800d444 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d436:	6979      	ldr	r1, [r7, #20]
 800d438:	2009      	movs	r0, #9
 800d43a:	f000 ff8b 	bl	800e354 <memp_free>
    return ERR_MEM;
 800d43e:	f04f 33ff 	mov.w	r3, #4294967295
 800d442:	e000      	b.n	800d446 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d444:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d446:	4618      	mov	r0, r3
 800d448:	3718      	adds	r7, #24
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	2000a25c 	.word	0x2000a25c
 800d454:	0801f1c8 	.word	0x0801f1c8
 800d458:	0801f240 	.word	0x0801f240
 800d45c:	0801f218 	.word	0x0801f218

0800d460 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d470:	f003 0318 	and.w	r3, r3, #24
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d478:	4a08      	ldr	r2, [pc, #32]	; (800d49c <tcpip_input+0x3c>)
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7ff ffab 	bl	800d3d8 <tcpip_inpkt>
 800d482:	4603      	mov	r3, r0
 800d484:	e005      	b.n	800d492 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d486:	4a06      	ldr	r2, [pc, #24]	; (800d4a0 <tcpip_input+0x40>)
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff ffa4 	bl	800d3d8 <tcpip_inpkt>
 800d490:	4603      	mov	r3, r0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	0801ace9 	.word	0x0801ace9
 800d4a0:	0801985d 	.word	0x0801985d

0800d4a4 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d4ae:	4814      	ldr	r0, [pc, #80]	; (800d500 <tcpip_callback+0x5c>)
 800d4b0:	f00d fd7d 	bl	801afae <sys_mbox_valid>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d106      	bne.n	800d4c8 <tcpip_callback+0x24>
 800d4ba:	4b12      	ldr	r3, [pc, #72]	; (800d504 <tcpip_callback+0x60>)
 800d4bc:	f240 1239 	movw	r2, #313	; 0x139
 800d4c0:	4911      	ldr	r1, [pc, #68]	; (800d508 <tcpip_callback+0x64>)
 800d4c2:	4812      	ldr	r0, [pc, #72]	; (800d50c <tcpip_callback+0x68>)
 800d4c4:	f00e fcb0 	bl	801be28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d4c8:	2008      	movs	r0, #8
 800d4ca:	f000 fef1 	bl	800e2b0 <memp_malloc>
 800d4ce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d102      	bne.n	800d4dc <tcpip_callback+0x38>
    return ERR_MEM;
 800d4d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4da:	e00d      	b.n	800d4f8 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2201      	movs	r2, #1
 800d4e0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	683a      	ldr	r2, [r7, #0]
 800d4ec:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d4ee:	68f9      	ldr	r1, [r7, #12]
 800d4f0:	4803      	ldr	r0, [pc, #12]	; (800d500 <tcpip_callback+0x5c>)
 800d4f2:	f00d fced 	bl	801aed0 <sys_mbox_post>
  return ERR_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	2000a25c 	.word	0x2000a25c
 800d504:	0801f1c8 	.word	0x0801f1c8
 800d508:	0801f240 	.word	0x0801f240
 800d50c:	0801f218 	.word	0x0801f218

0800d510 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d51a:	4819      	ldr	r0, [pc, #100]	; (800d580 <tcpip_try_callback+0x70>)
 800d51c:	f00d fd47 	bl	801afae <sys_mbox_valid>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d106      	bne.n	800d534 <tcpip_try_callback+0x24>
 800d526:	4b17      	ldr	r3, [pc, #92]	; (800d584 <tcpip_try_callback+0x74>)
 800d528:	f240 125d 	movw	r2, #349	; 0x15d
 800d52c:	4916      	ldr	r1, [pc, #88]	; (800d588 <tcpip_try_callback+0x78>)
 800d52e:	4817      	ldr	r0, [pc, #92]	; (800d58c <tcpip_try_callback+0x7c>)
 800d530:	f00e fc7a 	bl	801be28 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d534:	2008      	movs	r0, #8
 800d536:	f000 febb 	bl	800e2b0 <memp_malloc>
 800d53a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d102      	bne.n	800d548 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d542:	f04f 33ff 	mov.w	r3, #4294967295
 800d546:	e017      	b.n	800d578 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2201      	movs	r2, #1
 800d54c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	683a      	ldr	r2, [r7, #0]
 800d558:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d55a:	68f9      	ldr	r1, [r7, #12]
 800d55c:	4808      	ldr	r0, [pc, #32]	; (800d580 <tcpip_try_callback+0x70>)
 800d55e:	f00d fccd 	bl	801aefc <sys_mbox_trypost>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d006      	beq.n	800d576 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d568:	68f9      	ldr	r1, [r7, #12]
 800d56a:	2008      	movs	r0, #8
 800d56c:	f000 fef2 	bl	800e354 <memp_free>
    return ERR_MEM;
 800d570:	f04f 33ff 	mov.w	r3, #4294967295
 800d574:	e000      	b.n	800d578 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	2000a25c 	.word	0x2000a25c
 800d584:	0801f1c8 	.word	0x0801f1c8
 800d588:	0801f240 	.word	0x0801f240
 800d58c:	0801f218 	.word	0x0801f218

0800d590 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b084      	sub	sp, #16
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800d59a:	4808      	ldr	r0, [pc, #32]	; (800d5bc <tcpip_api_call+0x2c>)
 800d59c:	f00d fd40 	bl	801b020 <sys_mutex_lock>
  err = fn(call);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6838      	ldr	r0, [r7, #0]
 800d5a4:	4798      	blx	r3
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800d5aa:	4804      	ldr	r0, [pc, #16]	; (800d5bc <tcpip_api_call+0x2c>)
 800d5ac:	f00d fd47 	bl	801b03e <sys_mutex_unlock>
  return err;
 800d5b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	2000a260 	.word	0x2000a260

0800d5c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af02      	add	r7, sp, #8
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d5ca:	f000 f9ea 	bl	800d9a2 <lwip_init>

  tcpip_init_done = initfunc;
 800d5ce:	4a17      	ldr	r2, [pc, #92]	; (800d62c <tcpip_init+0x6c>)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d5d4:	4a16      	ldr	r2, [pc, #88]	; (800d630 <tcpip_init+0x70>)
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d5da:	210a      	movs	r1, #10
 800d5dc:	4815      	ldr	r0, [pc, #84]	; (800d634 <tcpip_init+0x74>)
 800d5de:	f00d fc59 	bl	801ae94 <sys_mbox_new>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d006      	beq.n	800d5f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d5e8:	4b13      	ldr	r3, [pc, #76]	; (800d638 <tcpip_init+0x78>)
 800d5ea:	f240 2261 	movw	r2, #609	; 0x261
 800d5ee:	4913      	ldr	r1, [pc, #76]	; (800d63c <tcpip_init+0x7c>)
 800d5f0:	4813      	ldr	r0, [pc, #76]	; (800d640 <tcpip_init+0x80>)
 800d5f2:	f00e fc19 	bl	801be28 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d5f6:	4813      	ldr	r0, [pc, #76]	; (800d644 <tcpip_init+0x84>)
 800d5f8:	f00d fcf8 	bl	801afec <sys_mutex_new>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d006      	beq.n	800d610 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d602:	4b0d      	ldr	r3, [pc, #52]	; (800d638 <tcpip_init+0x78>)
 800d604:	f240 2265 	movw	r2, #613	; 0x265
 800d608:	490f      	ldr	r1, [pc, #60]	; (800d648 <tcpip_init+0x88>)
 800d60a:	480d      	ldr	r0, [pc, #52]	; (800d640 <tcpip_init+0x80>)
 800d60c:	f00e fc0c 	bl	801be28 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d610:	f04f 33ff 	mov.w	r3, #4294967295
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d61a:	2200      	movs	r2, #0
 800d61c:	490b      	ldr	r1, [pc, #44]	; (800d64c <tcpip_init+0x8c>)
 800d61e:	480c      	ldr	r0, [pc, #48]	; (800d650 <tcpip_init+0x90>)
 800d620:	f00d fd1a 	bl	801b058 <sys_thread_new>
}
 800d624:	bf00      	nop
 800d626:	3708      	adds	r7, #8
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	2000a254 	.word	0x2000a254
 800d630:	2000a258 	.word	0x2000a258
 800d634:	2000a25c 	.word	0x2000a25c
 800d638:	0801f1c8 	.word	0x0801f1c8
 800d63c:	0801f250 	.word	0x0801f250
 800d640:	0801f218 	.word	0x0801f218
 800d644:	2000a260 	.word	0x2000a260
 800d648:	0801f274 	.word	0x0801f274
 800d64c:	0800d2e1 	.word	0x0800d2e1
 800d650:	0801f298 	.word	0x0801f298

0800d654 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d65e:	88fb      	ldrh	r3, [r7, #6]
 800d660:	021b      	lsls	r3, r3, #8
 800d662:	b21a      	sxth	r2, r3
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	0a1b      	lsrs	r3, r3, #8
 800d668:	b29b      	uxth	r3, r3
 800d66a:	b21b      	sxth	r3, r3
 800d66c:	4313      	orrs	r3, r2
 800d66e:	b21b      	sxth	r3, r3
 800d670:	b29b      	uxth	r3, r3
}
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d67e:	b480      	push	{r7}
 800d680:	b083      	sub	sp, #12
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	061a      	lsls	r2, r3, #24
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	021b      	lsls	r3, r3, #8
 800d68e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d692:	431a      	orrs	r2, r3
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	0a1b      	lsrs	r3, r3, #8
 800d698:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d69c:	431a      	orrs	r2, r3
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	0e1b      	lsrs	r3, r3, #24
 800d6a2:	4313      	orrs	r3, r2
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b089      	sub	sp, #36	; 0x24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	f003 0301 	and.w	r3, r3, #1
 800d6cc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00d      	beq.n	800d6f0 <lwip_standard_chksum+0x40>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd0a      	ble.n	800d6f0 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d6da:	69fa      	ldr	r2, [r7, #28]
 800d6dc:	1c53      	adds	r3, r2, #1
 800d6de:	61fb      	str	r3, [r7, #28]
 800d6e0:	f107 030e 	add.w	r3, r7, #14
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	7812      	ldrb	r2, [r2, #0]
 800d6e8:	701a      	strb	r2, [r3, #0]
    len--;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d6f4:	e00a      	b.n	800d70c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	1c9a      	adds	r2, r3, #2
 800d6fa:	61ba      	str	r2, [r7, #24]
 800d6fc:	881b      	ldrh	r3, [r3, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	4413      	add	r3, r2
 800d704:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	3b02      	subs	r3, #2
 800d70a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b01      	cmp	r3, #1
 800d710:	dcf1      	bgt.n	800d6f6 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	dd04      	ble.n	800d722 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d718:	f107 030e 	add.w	r3, r7, #14
 800d71c:	69ba      	ldr	r2, [r7, #24]
 800d71e:	7812      	ldrb	r2, [r2, #0]
 800d720:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d722:	89fb      	ldrh	r3, [r7, #14]
 800d724:	461a      	mov	r2, r3
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	4413      	add	r3, r2
 800d72a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	0c1a      	lsrs	r2, r3, #16
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	b29b      	uxth	r3, r3
 800d734:	4413      	add	r3, r2
 800d736:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	0c1a      	lsrs	r2, r3, #16
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	b29b      	uxth	r3, r3
 800d740:	4413      	add	r3, r2
 800d742:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d007      	beq.n	800d75a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	b29a      	uxth	r2, r3
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	0a1b      	lsrs	r3, r3, #8
 800d754:	b2db      	uxtb	r3, r3
 800d756:	4313      	orrs	r3, r2
 800d758:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	b29b      	uxth	r3, r3
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3724      	adds	r7, #36	; 0x24
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b086      	sub	sp, #24
 800d76e:	af00      	add	r7, sp, #0
 800d770:	60f8      	str	r0, [r7, #12]
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	460b      	mov	r3, r1
 800d776:	72fb      	strb	r3, [r7, #11]
 800d778:	4613      	mov	r3, r2
 800d77a:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	617b      	str	r3, [r7, #20]
 800d784:	e02b      	b.n	800d7de <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	685a      	ldr	r2, [r3, #4]
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	895b      	ldrh	r3, [r3, #10]
 800d78e:	4619      	mov	r1, r3
 800d790:	4610      	mov	r0, r2
 800d792:	f7ff ff8d 	bl	800d6b0 <lwip_standard_chksum>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4413      	add	r3, r2
 800d79e:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	0c1a      	lsrs	r2, r3, #16
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	4413      	add	r3, r2
 800d7aa:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	895b      	ldrh	r3, [r3, #10]
 800d7b0:	f003 0301 	and.w	r3, r3, #1
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00e      	beq.n	800d7d8 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	bf0c      	ite	eq
 800d7c0:	2301      	moveq	r3, #1
 800d7c2:	2300      	movne	r3, #0
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	021b      	lsls	r3, r3, #8
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	0a1b      	lsrs	r3, r3, #8
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1d0      	bne.n	800d786 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d007      	beq.n	800d7fa <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	021b      	lsls	r3, r3, #8
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	0a1b      	lsrs	r3, r3, #8
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	4313      	orrs	r3, r2
 800d7f8:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800d7fa:	7afb      	ldrb	r3, [r7, #11]
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff ff28 	bl	800d654 <lwip_htons>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4413      	add	r3, r2
 800d80c:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800d80e:	893b      	ldrh	r3, [r7, #8]
 800d810:	4618      	mov	r0, r3
 800d812:	f7ff ff1f 	bl	800d654 <lwip_htons>
 800d816:	4603      	mov	r3, r0
 800d818:	461a      	mov	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4413      	add	r3, r2
 800d81e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	0c1a      	lsrs	r2, r3, #16
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	b29b      	uxth	r3, r3
 800d828:	4413      	add	r3, r2
 800d82a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	0c1a      	lsrs	r2, r3, #16
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	b29b      	uxth	r3, r3
 800d834:	4413      	add	r3, r2
 800d836:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	43db      	mvns	r3, r3
 800d83e:	b29b      	uxth	r3, r3
}
 800d840:	4618      	mov	r0, r3
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	607b      	str	r3, [r7, #4]
 800d852:	460b      	mov	r3, r1
 800d854:	72fb      	strb	r3, [r7, #11]
 800d856:	4613      	mov	r3, r2
 800d858:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	b29b      	uxth	r3, r3
 800d864:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	0c1b      	lsrs	r3, r3, #16
 800d86a:	693a      	ldr	r2, [r7, #16]
 800d86c:	4413      	add	r3, r2
 800d86e:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800d870:	6a3b      	ldr	r3, [r7, #32]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	b29b      	uxth	r3, r3
 800d87a:	693a      	ldr	r2, [r7, #16]
 800d87c:	4413      	add	r3, r2
 800d87e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	0c1b      	lsrs	r3, r3, #16
 800d884:	693a      	ldr	r2, [r7, #16]
 800d886:	4413      	add	r3, r2
 800d888:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	0c1a      	lsrs	r2, r3, #16
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	b29b      	uxth	r3, r3
 800d892:	4413      	add	r3, r2
 800d894:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	0c1a      	lsrs	r2, r3, #16
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	4413      	add	r3, r2
 800d8a0:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800d8a2:	893a      	ldrh	r2, [r7, #8]
 800d8a4:	7af9      	ldrb	r1, [r7, #11]
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f7ff ff5e 	bl	800d76a <inet_cksum_pseudo_base>
 800d8ae:	4603      	mov	r3, r0
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3718      	adds	r7, #24
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af02      	add	r7, sp, #8
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	607b      	str	r3, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	72fb      	strb	r3, [r7, #11]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800d8ca:	893a      	ldrh	r2, [r7, #8]
 800d8cc:	7af9      	ldrb	r1, [r7, #11]
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f7ff ffb7 	bl	800d848 <inet_chksum_pseudo>
 800d8da:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	3710      	adds	r7, #16
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d8f0:	887b      	ldrh	r3, [r7, #2]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fedb 	bl	800d6b0 <lwip_standard_chksum>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	43db      	mvns	r3, r3
 800d8fe:	b29b      	uxth	r3, r3
}
 800d900:	4618      	mov	r0, r3
 800d902:	3708      	adds	r7, #8
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}

0800d908 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	613b      	str	r3, [r7, #16]
 800d91c:	e02b      	b.n	800d976 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	895b      	ldrh	r3, [r3, #10]
 800d926:	4619      	mov	r1, r3
 800d928:	4610      	mov	r0, r2
 800d92a:	f7ff fec1 	bl	800d6b0 <lwip_standard_chksum>
 800d92e:	4603      	mov	r3, r0
 800d930:	461a      	mov	r2, r3
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	4413      	add	r3, r2
 800d936:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	0c1a      	lsrs	r2, r3, #16
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	4413      	add	r3, r2
 800d942:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	f003 0301 	and.w	r3, r3, #1
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00e      	beq.n	800d970 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	bf0c      	ite	eq
 800d958:	2301      	moveq	r3, #1
 800d95a:	2300      	movne	r3, #0
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	021b      	lsls	r3, r3, #8
 800d964:	b29a      	uxth	r2, r3
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	0a1b      	lsrs	r3, r3, #8
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	4313      	orrs	r3, r2
 800d96e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	613b      	str	r3, [r7, #16]
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1d0      	bne.n	800d91e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d007      	beq.n	800d992 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	021b      	lsls	r3, r3, #8
 800d986:	b29a      	uxth	r2, r3
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	0a1b      	lsrs	r3, r3, #8
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	4313      	orrs	r3, r2
 800d990:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	b29b      	uxth	r3, r3
 800d996:	43db      	mvns	r3, r3
 800d998:	b29b      	uxth	r3, r3
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3718      	adds	r7, #24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b082      	sub	sp, #8
 800d9a6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d9ac:	f00d fb10 	bl	801afd0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d9b0:	f000 f8d4 	bl	800db5c <mem_init>
  memp_init();
 800d9b4:	f000 fc30 	bl	800e218 <memp_init>
  pbuf_init();
  netif_init();
 800d9b8:	f000 fcf6 	bl	800e3a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d9bc:	f008 f918 	bl	8015bf0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d9c0:	f001 ffa8 	bl	800f914 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d9c4:	f008 f85a 	bl	8015a7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d9c8:	bf00      	nop
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d9da:	4b05      	ldr	r3, [pc, #20]	; (800d9f0 <ptr_to_mem+0x20>)
 800d9dc:	681a      	ldr	r2, [r3, #0]
 800d9de:	88fb      	ldrh	r3, [r7, #6]
 800d9e0:	4413      	add	r3, r2
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	370c      	adds	r7, #12
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	2000f290 	.word	0x2000f290

0800d9f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d9fc:	4b05      	ldr	r3, [pc, #20]	; (800da14 <mem_to_ptr+0x20>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	1ad3      	subs	r3, r2, r3
 800da04:	b29b      	uxth	r3, r3
}
 800da06:	4618      	mov	r0, r3
 800da08:	370c      	adds	r7, #12
 800da0a:	46bd      	mov	sp, r7
 800da0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	2000f290 	.word	0x2000f290

0800da18 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800da18:	b590      	push	{r4, r7, lr}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800da20:	4b45      	ldr	r3, [pc, #276]	; (800db38 <plug_holes+0x120>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	429a      	cmp	r2, r3
 800da28:	d206      	bcs.n	800da38 <plug_holes+0x20>
 800da2a:	4b44      	ldr	r3, [pc, #272]	; (800db3c <plug_holes+0x124>)
 800da2c:	f240 12df 	movw	r2, #479	; 0x1df
 800da30:	4943      	ldr	r1, [pc, #268]	; (800db40 <plug_holes+0x128>)
 800da32:	4844      	ldr	r0, [pc, #272]	; (800db44 <plug_holes+0x12c>)
 800da34:	f00e f9f8 	bl	801be28 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800da38:	4b43      	ldr	r3, [pc, #268]	; (800db48 <plug_holes+0x130>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d306      	bcc.n	800da50 <plug_holes+0x38>
 800da42:	4b3e      	ldr	r3, [pc, #248]	; (800db3c <plug_holes+0x124>)
 800da44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800da48:	4940      	ldr	r1, [pc, #256]	; (800db4c <plug_holes+0x134>)
 800da4a:	483e      	ldr	r0, [pc, #248]	; (800db44 <plug_holes+0x12c>)
 800da4c:	f00e f9ec 	bl	801be28 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	791b      	ldrb	r3, [r3, #4]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d006      	beq.n	800da66 <plug_holes+0x4e>
 800da58:	4b38      	ldr	r3, [pc, #224]	; (800db3c <plug_holes+0x124>)
 800da5a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800da5e:	493c      	ldr	r1, [pc, #240]	; (800db50 <plug_holes+0x138>)
 800da60:	4838      	ldr	r0, [pc, #224]	; (800db44 <plug_holes+0x12c>)
 800da62:	f00e f9e1 	bl	801be28 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	881b      	ldrh	r3, [r3, #0]
 800da6a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800da6e:	d906      	bls.n	800da7e <plug_holes+0x66>
 800da70:	4b32      	ldr	r3, [pc, #200]	; (800db3c <plug_holes+0x124>)
 800da72:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800da76:	4937      	ldr	r1, [pc, #220]	; (800db54 <plug_holes+0x13c>)
 800da78:	4832      	ldr	r0, [pc, #200]	; (800db44 <plug_holes+0x12c>)
 800da7a:	f00e f9d5 	bl	801be28 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	881b      	ldrh	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff ffa4 	bl	800d9d0 <ptr_to_mem>
 800da88:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d024      	beq.n	800dadc <plug_holes+0xc4>
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	791b      	ldrb	r3, [r3, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d120      	bne.n	800dadc <plug_holes+0xc4>
 800da9a:	4b2b      	ldr	r3, [pc, #172]	; (800db48 <plug_holes+0x130>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d01b      	beq.n	800dadc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800daa4:	4b2c      	ldr	r3, [pc, #176]	; (800db58 <plug_holes+0x140>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d102      	bne.n	800dab4 <plug_holes+0x9c>
      lfree = mem;
 800daae:	4a2a      	ldr	r2, [pc, #168]	; (800db58 <plug_holes+0x140>)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	881a      	ldrh	r2, [r3, #0]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	881b      	ldrh	r3, [r3, #0]
 800dac0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dac4:	d00a      	beq.n	800dadc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff ff80 	bl	800d9d0 <ptr_to_mem>
 800dad0:	4604      	mov	r4, r0
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff ff8e 	bl	800d9f4 <mem_to_ptr>
 800dad8:	4603      	mov	r3, r0
 800dada:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	885b      	ldrh	r3, [r3, #2]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff ff75 	bl	800d9d0 <ptr_to_mem>
 800dae6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	429a      	cmp	r2, r3
 800daee:	d01f      	beq.n	800db30 <plug_holes+0x118>
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	791b      	ldrb	r3, [r3, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d11b      	bne.n	800db30 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800daf8:	4b17      	ldr	r3, [pc, #92]	; (800db58 <plug_holes+0x140>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	687a      	ldr	r2, [r7, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d102      	bne.n	800db08 <plug_holes+0xf0>
      lfree = pmem;
 800db02:	4a15      	ldr	r2, [pc, #84]	; (800db58 <plug_holes+0x140>)
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	881a      	ldrh	r2, [r3, #0]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800db18:	d00a      	beq.n	800db30 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	881b      	ldrh	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff ff56 	bl	800d9d0 <ptr_to_mem>
 800db24:	4604      	mov	r4, r0
 800db26:	68b8      	ldr	r0, [r7, #8]
 800db28:	f7ff ff64 	bl	800d9f4 <mem_to_ptr>
 800db2c:	4603      	mov	r3, r0
 800db2e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800db30:	bf00      	nop
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	bd90      	pop	{r4, r7, pc}
 800db38:	2000f290 	.word	0x2000f290
 800db3c:	0801f2a0 	.word	0x0801f2a0
 800db40:	0801f2d0 	.word	0x0801f2d0
 800db44:	0801f2e8 	.word	0x0801f2e8
 800db48:	2000f294 	.word	0x2000f294
 800db4c:	0801f310 	.word	0x0801f310
 800db50:	0801f32c 	.word	0x0801f32c
 800db54:	0801f348 	.word	0x0801f348
 800db58:	2000f29c 	.word	0x2000f29c

0800db5c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800db62:	4b1f      	ldr	r3, [pc, #124]	; (800dbe0 <mem_init+0x84>)
 800db64:	3303      	adds	r3, #3
 800db66:	f023 0303 	bic.w	r3, r3, #3
 800db6a:	461a      	mov	r2, r3
 800db6c:	4b1d      	ldr	r3, [pc, #116]	; (800dbe4 <mem_init+0x88>)
 800db6e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800db70:	4b1c      	ldr	r3, [pc, #112]	; (800dbe4 <mem_init+0x88>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800db7c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2200      	movs	r2, #0
 800db88:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800db8a:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800db8e:	f7ff ff1f 	bl	800d9d0 <ptr_to_mem>
 800db92:	4603      	mov	r3, r0
 800db94:	4a14      	ldr	r2, [pc, #80]	; (800dbe8 <mem_init+0x8c>)
 800db96:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800db98:	4b13      	ldr	r3, [pc, #76]	; (800dbe8 <mem_init+0x8c>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2201      	movs	r2, #1
 800db9e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800dba0:	4b11      	ldr	r3, [pc, #68]	; (800dbe8 <mem_init+0x8c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800dba8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800dbaa:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <mem_init+0x8c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800dbb2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <mem_init+0x88>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a0c      	ldr	r2, [pc, #48]	; (800dbec <mem_init+0x90>)
 800dbba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800dbbc:	480c      	ldr	r0, [pc, #48]	; (800dbf0 <mem_init+0x94>)
 800dbbe:	f00d fa15 	bl	801afec <sys_mutex_new>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d006      	beq.n	800dbd6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800dbc8:	4b0a      	ldr	r3, [pc, #40]	; (800dbf4 <mem_init+0x98>)
 800dbca:	f240 221f 	movw	r2, #543	; 0x21f
 800dbce:	490a      	ldr	r1, [pc, #40]	; (800dbf8 <mem_init+0x9c>)
 800dbd0:	480a      	ldr	r0, [pc, #40]	; (800dbfc <mem_init+0xa0>)
 800dbd2:	f00e f929 	bl	801be28 <iprintf>
  }
}
 800dbd6:	bf00      	nop
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	2000a27c 	.word	0x2000a27c
 800dbe4:	2000f290 	.word	0x2000f290
 800dbe8:	2000f294 	.word	0x2000f294
 800dbec:	2000f29c 	.word	0x2000f29c
 800dbf0:	2000f298 	.word	0x2000f298
 800dbf4:	0801f2a0 	.word	0x0801f2a0
 800dbf8:	0801f374 	.word	0x0801f374
 800dbfc:	0801f2e8 	.word	0x0801f2e8

0800dc00 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff fef3 	bl	800d9f4 <mem_to_ptr>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f7ff feda 	bl	800d9d0 <ptr_to_mem>
 800dc1c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	885b      	ldrh	r3, [r3, #2]
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7ff fed4 	bl	800d9d0 <ptr_to_mem>
 800dc28:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dc32:	d818      	bhi.n	800dc66 <mem_link_valid+0x66>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	885b      	ldrh	r3, [r3, #2]
 800dc38:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dc3c:	d813      	bhi.n	800dc66 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dc42:	8afa      	ldrh	r2, [r7, #22]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d004      	beq.n	800dc52 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	881b      	ldrh	r3, [r3, #0]
 800dc4c:	8afa      	ldrh	r2, [r7, #22]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d109      	bne.n	800dc66 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dc52:	4b08      	ldr	r3, [pc, #32]	; (800dc74 <mem_link_valid+0x74>)
 800dc54:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d006      	beq.n	800dc6a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	885b      	ldrh	r3, [r3, #2]
 800dc60:	8afa      	ldrh	r2, [r7, #22]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d001      	beq.n	800dc6a <mem_link_valid+0x6a>
    return 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	e000      	b.n	800dc6c <mem_link_valid+0x6c>
  }
  return 1;
 800dc6a:	2301      	movs	r3, #1
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	2000f294 	.word	0x2000f294

0800dc78 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d070      	beq.n	800dd68 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f003 0303 	and.w	r3, r3, #3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00d      	beq.n	800dcac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dc90:	4b37      	ldr	r3, [pc, #220]	; (800dd70 <mem_free+0xf8>)
 800dc92:	f240 2273 	movw	r2, #627	; 0x273
 800dc96:	4937      	ldr	r1, [pc, #220]	; (800dd74 <mem_free+0xfc>)
 800dc98:	4837      	ldr	r0, [pc, #220]	; (800dd78 <mem_free+0x100>)
 800dc9a:	f00e f8c5 	bl	801be28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc9e:	f00d f9f9 	bl	801b094 <sys_arch_protect>
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f00d fa03 	bl	801b0b0 <sys_arch_unprotect>
    return;
 800dcaa:	e05e      	b.n	800dd6a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	3b08      	subs	r3, #8
 800dcb0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dcb2:	4b32      	ldr	r3, [pc, #200]	; (800dd7c <mem_free+0x104>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	69fa      	ldr	r2, [r7, #28]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d306      	bcc.n	800dcca <mem_free+0x52>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f103 020c 	add.w	r2, r3, #12
 800dcc2:	4b2f      	ldr	r3, [pc, #188]	; (800dd80 <mem_free+0x108>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d90d      	bls.n	800dce6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dcca:	4b29      	ldr	r3, [pc, #164]	; (800dd70 <mem_free+0xf8>)
 800dccc:	f240 227f 	movw	r2, #639	; 0x27f
 800dcd0:	492c      	ldr	r1, [pc, #176]	; (800dd84 <mem_free+0x10c>)
 800dcd2:	4829      	ldr	r0, [pc, #164]	; (800dd78 <mem_free+0x100>)
 800dcd4:	f00e f8a8 	bl	801be28 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dcd8:	f00d f9dc 	bl	801b094 <sys_arch_protect>
 800dcdc:	6138      	str	r0, [r7, #16]
 800dcde:	6938      	ldr	r0, [r7, #16]
 800dce0:	f00d f9e6 	bl	801b0b0 <sys_arch_unprotect>
    return;
 800dce4:	e041      	b.n	800dd6a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dce6:	4828      	ldr	r0, [pc, #160]	; (800dd88 <mem_free+0x110>)
 800dce8:	f00d f99a 	bl	801b020 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	791b      	ldrb	r3, [r3, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d110      	bne.n	800dd16 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dcf4:	4b1e      	ldr	r3, [pc, #120]	; (800dd70 <mem_free+0xf8>)
 800dcf6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dcfa:	4924      	ldr	r1, [pc, #144]	; (800dd8c <mem_free+0x114>)
 800dcfc:	481e      	ldr	r0, [pc, #120]	; (800dd78 <mem_free+0x100>)
 800dcfe:	f00e f893 	bl	801be28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dd02:	4821      	ldr	r0, [pc, #132]	; (800dd88 <mem_free+0x110>)
 800dd04:	f00d f99b 	bl	801b03e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd08:	f00d f9c4 	bl	801b094 <sys_arch_protect>
 800dd0c:	6178      	str	r0, [r7, #20]
 800dd0e:	6978      	ldr	r0, [r7, #20]
 800dd10:	f00d f9ce 	bl	801b0b0 <sys_arch_unprotect>
    return;
 800dd14:	e029      	b.n	800dd6a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dd16:	69f8      	ldr	r0, [r7, #28]
 800dd18:	f7ff ff72 	bl	800dc00 <mem_link_valid>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d110      	bne.n	800dd44 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dd22:	4b13      	ldr	r3, [pc, #76]	; (800dd70 <mem_free+0xf8>)
 800dd24:	f240 2295 	movw	r2, #661	; 0x295
 800dd28:	4919      	ldr	r1, [pc, #100]	; (800dd90 <mem_free+0x118>)
 800dd2a:	4813      	ldr	r0, [pc, #76]	; (800dd78 <mem_free+0x100>)
 800dd2c:	f00e f87c 	bl	801be28 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dd30:	4815      	ldr	r0, [pc, #84]	; (800dd88 <mem_free+0x110>)
 800dd32:	f00d f984 	bl	801b03e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd36:	f00d f9ad 	bl	801b094 <sys_arch_protect>
 800dd3a:	61b8      	str	r0, [r7, #24]
 800dd3c:	69b8      	ldr	r0, [r7, #24]
 800dd3e:	f00d f9b7 	bl	801b0b0 <sys_arch_unprotect>
    return;
 800dd42:	e012      	b.n	800dd6a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	2200      	movs	r2, #0
 800dd48:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <mem_free+0x11c>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	69fa      	ldr	r2, [r7, #28]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d202      	bcs.n	800dd5a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dd54:	4a0f      	ldr	r2, [pc, #60]	; (800dd94 <mem_free+0x11c>)
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dd5a:	69f8      	ldr	r0, [r7, #28]
 800dd5c:	f7ff fe5c 	bl	800da18 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dd60:	4809      	ldr	r0, [pc, #36]	; (800dd88 <mem_free+0x110>)
 800dd62:	f00d f96c 	bl	801b03e <sys_mutex_unlock>
 800dd66:	e000      	b.n	800dd6a <mem_free+0xf2>
    return;
 800dd68:	bf00      	nop
}
 800dd6a:	3720      	adds	r7, #32
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}
 800dd70:	0801f2a0 	.word	0x0801f2a0
 800dd74:	0801f390 	.word	0x0801f390
 800dd78:	0801f2e8 	.word	0x0801f2e8
 800dd7c:	2000f290 	.word	0x2000f290
 800dd80:	2000f294 	.word	0x2000f294
 800dd84:	0801f3b4 	.word	0x0801f3b4
 800dd88:	2000f298 	.word	0x2000f298
 800dd8c:	0801f3d0 	.word	0x0801f3d0
 800dd90:	0801f3f8 	.word	0x0801f3f8
 800dd94:	2000f29c 	.word	0x2000f29c

0800dd98 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dda4:	887b      	ldrh	r3, [r7, #2]
 800dda6:	3303      	adds	r3, #3
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	f023 0303 	bic.w	r3, r3, #3
 800ddae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ddb0:	8bfb      	ldrh	r3, [r7, #30]
 800ddb2:	2b0b      	cmp	r3, #11
 800ddb4:	d801      	bhi.n	800ddba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ddb6:	230c      	movs	r3, #12
 800ddb8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ddba:	8bfb      	ldrh	r3, [r7, #30]
 800ddbc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ddc0:	d803      	bhi.n	800ddca <mem_trim+0x32>
 800ddc2:	8bfa      	ldrh	r2, [r7, #30]
 800ddc4:	887b      	ldrh	r3, [r7, #2]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d201      	bcs.n	800ddce <mem_trim+0x36>
    return NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e0d8      	b.n	800df80 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ddce:	4b6e      	ldr	r3, [pc, #440]	; (800df88 <mem_trim+0x1f0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d304      	bcc.n	800dde2 <mem_trim+0x4a>
 800ddd8:	4b6c      	ldr	r3, [pc, #432]	; (800df8c <mem_trim+0x1f4>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d306      	bcc.n	800ddf0 <mem_trim+0x58>
 800dde2:	4b6b      	ldr	r3, [pc, #428]	; (800df90 <mem_trim+0x1f8>)
 800dde4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dde8:	496a      	ldr	r1, [pc, #424]	; (800df94 <mem_trim+0x1fc>)
 800ddea:	486b      	ldr	r0, [pc, #428]	; (800df98 <mem_trim+0x200>)
 800ddec:	f00e f81c 	bl	801be28 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ddf0:	4b65      	ldr	r3, [pc, #404]	; (800df88 <mem_trim+0x1f0>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d304      	bcc.n	800de04 <mem_trim+0x6c>
 800ddfa:	4b64      	ldr	r3, [pc, #400]	; (800df8c <mem_trim+0x1f4>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	429a      	cmp	r2, r3
 800de02:	d307      	bcc.n	800de14 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800de04:	f00d f946 	bl	801b094 <sys_arch_protect>
 800de08:	60b8      	str	r0, [r7, #8]
 800de0a:	68b8      	ldr	r0, [r7, #8]
 800de0c:	f00d f950 	bl	801b0b0 <sys_arch_unprotect>
    return rmem;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	e0b5      	b.n	800df80 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3b08      	subs	r3, #8
 800de18:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800de1a:	69b8      	ldr	r0, [r7, #24]
 800de1c:	f7ff fdea 	bl	800d9f4 <mem_to_ptr>
 800de20:	4603      	mov	r3, r0
 800de22:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	881a      	ldrh	r2, [r3, #0]
 800de28:	8afb      	ldrh	r3, [r7, #22]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b08      	subs	r3, #8
 800de30:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800de32:	8bfa      	ldrh	r2, [r7, #30]
 800de34:	8abb      	ldrh	r3, [r7, #20]
 800de36:	429a      	cmp	r2, r3
 800de38:	d906      	bls.n	800de48 <mem_trim+0xb0>
 800de3a:	4b55      	ldr	r3, [pc, #340]	; (800df90 <mem_trim+0x1f8>)
 800de3c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800de40:	4956      	ldr	r1, [pc, #344]	; (800df9c <mem_trim+0x204>)
 800de42:	4855      	ldr	r0, [pc, #340]	; (800df98 <mem_trim+0x200>)
 800de44:	f00d fff0 	bl	801be28 <iprintf>
  if (newsize > size) {
 800de48:	8bfa      	ldrh	r2, [r7, #30]
 800de4a:	8abb      	ldrh	r3, [r7, #20]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d901      	bls.n	800de54 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800de50:	2300      	movs	r3, #0
 800de52:	e095      	b.n	800df80 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800de54:	8bfa      	ldrh	r2, [r7, #30]
 800de56:	8abb      	ldrh	r3, [r7, #20]
 800de58:	429a      	cmp	r2, r3
 800de5a:	d101      	bne.n	800de60 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	e08f      	b.n	800df80 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800de60:	484f      	ldr	r0, [pc, #316]	; (800dfa0 <mem_trim+0x208>)
 800de62:	f00d f8dd 	bl	801b020 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800de66:	69bb      	ldr	r3, [r7, #24]
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7ff fdb0 	bl	800d9d0 <ptr_to_mem>
 800de70:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	791b      	ldrb	r3, [r3, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d13f      	bne.n	800defa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	881b      	ldrh	r3, [r3, #0]
 800de7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de82:	d106      	bne.n	800de92 <mem_trim+0xfa>
 800de84:	4b42      	ldr	r3, [pc, #264]	; (800df90 <mem_trim+0x1f8>)
 800de86:	f240 22f5 	movw	r2, #757	; 0x2f5
 800de8a:	4946      	ldr	r1, [pc, #280]	; (800dfa4 <mem_trim+0x20c>)
 800de8c:	4842      	ldr	r0, [pc, #264]	; (800df98 <mem_trim+0x200>)
 800de8e:	f00d ffcb 	bl	801be28 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de98:	8afa      	ldrh	r2, [r7, #22]
 800de9a:	8bfb      	ldrh	r3, [r7, #30]
 800de9c:	4413      	add	r3, r2
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	3308      	adds	r3, #8
 800dea2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dea4:	4b40      	ldr	r3, [pc, #256]	; (800dfa8 <mem_trim+0x210>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	429a      	cmp	r2, r3
 800deac:	d106      	bne.n	800debc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff fd8d 	bl	800d9d0 <ptr_to_mem>
 800deb6:	4603      	mov	r3, r0
 800deb8:	4a3b      	ldr	r2, [pc, #236]	; (800dfa8 <mem_trim+0x210>)
 800deba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800debc:	89fb      	ldrh	r3, [r7, #14]
 800debe:	4618      	mov	r0, r3
 800dec0:	f7ff fd86 	bl	800d9d0 <ptr_to_mem>
 800dec4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	2200      	movs	r2, #0
 800deca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	89ba      	ldrh	r2, [r7, #12]
 800ded0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	8afa      	ldrh	r2, [r7, #22]
 800ded6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	89fa      	ldrh	r2, [r7, #14]
 800dedc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dee6:	d047      	beq.n	800df78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	881b      	ldrh	r3, [r3, #0]
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff fd6f 	bl	800d9d0 <ptr_to_mem>
 800def2:	4602      	mov	r2, r0
 800def4:	89fb      	ldrh	r3, [r7, #14]
 800def6:	8053      	strh	r3, [r2, #2]
 800def8:	e03e      	b.n	800df78 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800defa:	8bfb      	ldrh	r3, [r7, #30]
 800defc:	f103 0214 	add.w	r2, r3, #20
 800df00:	8abb      	ldrh	r3, [r7, #20]
 800df02:	429a      	cmp	r2, r3
 800df04:	d838      	bhi.n	800df78 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800df06:	8afa      	ldrh	r2, [r7, #22]
 800df08:	8bfb      	ldrh	r3, [r7, #30]
 800df0a:	4413      	add	r3, r2
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	3308      	adds	r3, #8
 800df10:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df1a:	d106      	bne.n	800df2a <mem_trim+0x192>
 800df1c:	4b1c      	ldr	r3, [pc, #112]	; (800df90 <mem_trim+0x1f8>)
 800df1e:	f240 3216 	movw	r2, #790	; 0x316
 800df22:	4920      	ldr	r1, [pc, #128]	; (800dfa4 <mem_trim+0x20c>)
 800df24:	481c      	ldr	r0, [pc, #112]	; (800df98 <mem_trim+0x200>)
 800df26:	f00d ff7f 	bl	801be28 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800df2a:	89fb      	ldrh	r3, [r7, #14]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fd4f 	bl	800d9d0 <ptr_to_mem>
 800df32:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800df34:	4b1c      	ldr	r3, [pc, #112]	; (800dfa8 <mem_trim+0x210>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d202      	bcs.n	800df44 <mem_trim+0x1ac>
      lfree = mem2;
 800df3e:	4a1a      	ldr	r2, [pc, #104]	; (800dfa8 <mem_trim+0x210>)
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	2200      	movs	r2, #0
 800df48:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	881a      	ldrh	r2, [r3, #0]
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	8afa      	ldrh	r2, [r7, #22]
 800df56:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	89fa      	ldrh	r2, [r7, #14]
 800df5c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df66:	d007      	beq.n	800df78 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	881b      	ldrh	r3, [r3, #0]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f7ff fd2f 	bl	800d9d0 <ptr_to_mem>
 800df72:	4602      	mov	r2, r0
 800df74:	89fb      	ldrh	r3, [r7, #14]
 800df76:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800df78:	4809      	ldr	r0, [pc, #36]	; (800dfa0 <mem_trim+0x208>)
 800df7a:	f00d f860 	bl	801b03e <sys_mutex_unlock>
  return rmem;
 800df7e:	687b      	ldr	r3, [r7, #4]
}
 800df80:	4618      	mov	r0, r3
 800df82:	3720      	adds	r7, #32
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	2000f290 	.word	0x2000f290
 800df8c:	2000f294 	.word	0x2000f294
 800df90:	0801f2a0 	.word	0x0801f2a0
 800df94:	0801f42c 	.word	0x0801f42c
 800df98:	0801f2e8 	.word	0x0801f2e8
 800df9c:	0801f444 	.word	0x0801f444
 800dfa0:	2000f298 	.word	0x2000f298
 800dfa4:	0801f464 	.word	0x0801f464
 800dfa8:	2000f29c 	.word	0x2000f29c

0800dfac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b088      	sub	sp, #32
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dfb6:	88fb      	ldrh	r3, [r7, #6]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d101      	bne.n	800dfc0 <mem_malloc+0x14>
    return NULL;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e0e2      	b.n	800e186 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	3303      	adds	r3, #3
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	f023 0303 	bic.w	r3, r3, #3
 800dfca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dfcc:	8bbb      	ldrh	r3, [r7, #28]
 800dfce:	2b0b      	cmp	r3, #11
 800dfd0:	d801      	bhi.n	800dfd6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dfd2:	230c      	movs	r3, #12
 800dfd4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dfd6:	8bbb      	ldrh	r3, [r7, #28]
 800dfd8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800dfdc:	d803      	bhi.n	800dfe6 <mem_malloc+0x3a>
 800dfde:	8bba      	ldrh	r2, [r7, #28]
 800dfe0:	88fb      	ldrh	r3, [r7, #6]
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d201      	bcs.n	800dfea <mem_malloc+0x3e>
    return NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e0cd      	b.n	800e186 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dfea:	4869      	ldr	r0, [pc, #420]	; (800e190 <mem_malloc+0x1e4>)
 800dfec:	f00d f818 	bl	801b020 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dff0:	4b68      	ldr	r3, [pc, #416]	; (800e194 <mem_malloc+0x1e8>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7ff fcfd 	bl	800d9f4 <mem_to_ptr>
 800dffa:	4603      	mov	r3, r0
 800dffc:	83fb      	strh	r3, [r7, #30]
 800dffe:	e0b7      	b.n	800e170 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e000:	8bfb      	ldrh	r3, [r7, #30]
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fce4 	bl	800d9d0 <ptr_to_mem>
 800e008:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	791b      	ldrb	r3, [r3, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f040 80a7 	bne.w	800e162 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	461a      	mov	r2, r3
 800e01a:	8bfb      	ldrh	r3, [r7, #30]
 800e01c:	1ad3      	subs	r3, r2, r3
 800e01e:	f1a3 0208 	sub.w	r2, r3, #8
 800e022:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e024:	429a      	cmp	r2, r3
 800e026:	f0c0 809c 	bcc.w	800e162 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	8bfb      	ldrh	r3, [r7, #30]
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	f1a3 0208 	sub.w	r2, r3, #8
 800e038:	8bbb      	ldrh	r3, [r7, #28]
 800e03a:	3314      	adds	r3, #20
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d333      	bcc.n	800e0a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e040:	8bfa      	ldrh	r2, [r7, #30]
 800e042:	8bbb      	ldrh	r3, [r7, #28]
 800e044:	4413      	add	r3, r2
 800e046:	b29b      	uxth	r3, r3
 800e048:	3308      	adds	r3, #8
 800e04a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e04c:	8a7b      	ldrh	r3, [r7, #18]
 800e04e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e052:	d106      	bne.n	800e062 <mem_malloc+0xb6>
 800e054:	4b50      	ldr	r3, [pc, #320]	; (800e198 <mem_malloc+0x1ec>)
 800e056:	f240 3287 	movw	r2, #903	; 0x387
 800e05a:	4950      	ldr	r1, [pc, #320]	; (800e19c <mem_malloc+0x1f0>)
 800e05c:	4850      	ldr	r0, [pc, #320]	; (800e1a0 <mem_malloc+0x1f4>)
 800e05e:	f00d fee3 	bl	801be28 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e062:	8a7b      	ldrh	r3, [r7, #18]
 800e064:	4618      	mov	r0, r3
 800e066:	f7ff fcb3 	bl	800d9d0 <ptr_to_mem>
 800e06a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	881a      	ldrh	r2, [r3, #0]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	8bfa      	ldrh	r2, [r7, #30]
 800e07e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	8a7a      	ldrh	r2, [r7, #18]
 800e084:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	2201      	movs	r2, #1
 800e08a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	881b      	ldrh	r3, [r3, #0]
 800e090:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e094:	d00b      	beq.n	800e0ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff fc98 	bl	800d9d0 <ptr_to_mem>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	8a7b      	ldrh	r3, [r7, #18]
 800e0a4:	8053      	strh	r3, [r2, #2]
 800e0a6:	e002      	b.n	800e0ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e0ae:	4b39      	ldr	r3, [pc, #228]	; (800e194 <mem_malloc+0x1e8>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d127      	bne.n	800e108 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e0b8:	4b36      	ldr	r3, [pc, #216]	; (800e194 <mem_malloc+0x1e8>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e0be:	e005      	b.n	800e0cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fc83 	bl	800d9d0 <ptr_to_mem>
 800e0ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	791b      	ldrb	r3, [r3, #4]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d004      	beq.n	800e0de <mem_malloc+0x132>
 800e0d4:	4b33      	ldr	r3, [pc, #204]	; (800e1a4 <mem_malloc+0x1f8>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	69ba      	ldr	r2, [r7, #24]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d1f0      	bne.n	800e0c0 <mem_malloc+0x114>
          }
          lfree = cur;
 800e0de:	4a2d      	ldr	r2, [pc, #180]	; (800e194 <mem_malloc+0x1e8>)
 800e0e0:	69bb      	ldr	r3, [r7, #24]
 800e0e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e0e4:	4b2b      	ldr	r3, [pc, #172]	; (800e194 <mem_malloc+0x1e8>)
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	4b2e      	ldr	r3, [pc, #184]	; (800e1a4 <mem_malloc+0x1f8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d00b      	beq.n	800e108 <mem_malloc+0x15c>
 800e0f0:	4b28      	ldr	r3, [pc, #160]	; (800e194 <mem_malloc+0x1e8>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	791b      	ldrb	r3, [r3, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d006      	beq.n	800e108 <mem_malloc+0x15c>
 800e0fa:	4b27      	ldr	r3, [pc, #156]	; (800e198 <mem_malloc+0x1ec>)
 800e0fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e100:	4929      	ldr	r1, [pc, #164]	; (800e1a8 <mem_malloc+0x1fc>)
 800e102:	4827      	ldr	r0, [pc, #156]	; (800e1a0 <mem_malloc+0x1f4>)
 800e104:	f00d fe90 	bl	801be28 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e108:	4821      	ldr	r0, [pc, #132]	; (800e190 <mem_malloc+0x1e4>)
 800e10a:	f00c ff98 	bl	801b03e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e10e:	8bba      	ldrh	r2, [r7, #28]
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	4413      	add	r3, r2
 800e114:	3308      	adds	r3, #8
 800e116:	4a23      	ldr	r2, [pc, #140]	; (800e1a4 <mem_malloc+0x1f8>)
 800e118:	6812      	ldr	r2, [r2, #0]
 800e11a:	4293      	cmp	r3, r2
 800e11c:	d906      	bls.n	800e12c <mem_malloc+0x180>
 800e11e:	4b1e      	ldr	r3, [pc, #120]	; (800e198 <mem_malloc+0x1ec>)
 800e120:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e124:	4921      	ldr	r1, [pc, #132]	; (800e1ac <mem_malloc+0x200>)
 800e126:	481e      	ldr	r0, [pc, #120]	; (800e1a0 <mem_malloc+0x1f4>)
 800e128:	f00d fe7e 	bl	801be28 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	f003 0303 	and.w	r3, r3, #3
 800e132:	2b00      	cmp	r3, #0
 800e134:	d006      	beq.n	800e144 <mem_malloc+0x198>
 800e136:	4b18      	ldr	r3, [pc, #96]	; (800e198 <mem_malloc+0x1ec>)
 800e138:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e13c:	491c      	ldr	r1, [pc, #112]	; (800e1b0 <mem_malloc+0x204>)
 800e13e:	4818      	ldr	r0, [pc, #96]	; (800e1a0 <mem_malloc+0x1f4>)
 800e140:	f00d fe72 	bl	801be28 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	f003 0303 	and.w	r3, r3, #3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d006      	beq.n	800e15c <mem_malloc+0x1b0>
 800e14e:	4b12      	ldr	r3, [pc, #72]	; (800e198 <mem_malloc+0x1ec>)
 800e150:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e154:	4917      	ldr	r1, [pc, #92]	; (800e1b4 <mem_malloc+0x208>)
 800e156:	4812      	ldr	r0, [pc, #72]	; (800e1a0 <mem_malloc+0x1f4>)
 800e158:	f00d fe66 	bl	801be28 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	3308      	adds	r3, #8
 800e160:	e011      	b.n	800e186 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e162:	8bfb      	ldrh	r3, [r7, #30]
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fc33 	bl	800d9d0 <ptr_to_mem>
 800e16a:	4603      	mov	r3, r0
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e170:	8bfa      	ldrh	r2, [r7, #30]
 800e172:	8bbb      	ldrh	r3, [r7, #28]
 800e174:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800e178:	429a      	cmp	r2, r3
 800e17a:	f4ff af41 	bcc.w	800e000 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e17e:	4804      	ldr	r0, [pc, #16]	; (800e190 <mem_malloc+0x1e4>)
 800e180:	f00c ff5d 	bl	801b03e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2000f298 	.word	0x2000f298
 800e194:	2000f29c 	.word	0x2000f29c
 800e198:	0801f2a0 	.word	0x0801f2a0
 800e19c:	0801f464 	.word	0x0801f464
 800e1a0:	0801f2e8 	.word	0x0801f2e8
 800e1a4:	2000f294 	.word	0x2000f294
 800e1a8:	0801f478 	.word	0x0801f478
 800e1ac:	0801f494 	.word	0x0801f494
 800e1b0:	0801f4c4 	.word	0x0801f4c4
 800e1b4:	0801f4f4 	.word	0x0801f4f4

0800e1b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	68db      	ldr	r3, [r3, #12]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	3303      	adds	r3, #3
 800e1ce:	f023 0303 	bic.w	r3, r3, #3
 800e1d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	60fb      	str	r3, [r7, #12]
 800e1d8:	e011      	b.n	800e1fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	889b      	ldrh	r3, [r3, #4]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	4413      	add	r3, r2
 800e1f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	60fb      	str	r3, [r7, #12]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	88db      	ldrh	r3, [r3, #6]
 800e202:	461a      	mov	r2, r3
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4293      	cmp	r3, r2
 800e208:	dbe7      	blt.n	800e1da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e20a:	bf00      	nop
 800e20c:	bf00      	nop
 800e20e:	3714      	adds	r7, #20
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e21e:	2300      	movs	r3, #0
 800e220:	80fb      	strh	r3, [r7, #6]
 800e222:	e009      	b.n	800e238 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	4a08      	ldr	r2, [pc, #32]	; (800e248 <memp_init+0x30>)
 800e228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7ff ffc3 	bl	800e1b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e232:	88fb      	ldrh	r3, [r7, #6]
 800e234:	3301      	adds	r3, #1
 800e236:	80fb      	strh	r3, [r7, #6]
 800e238:	88fb      	ldrh	r3, [r7, #6]
 800e23a:	2b0c      	cmp	r3, #12
 800e23c:	d9f2      	bls.n	800e224 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e23e:	bf00      	nop
 800e240:	bf00      	nop
 800e242:	3708      	adds	r7, #8
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	0806debc 	.word	0x0806debc

0800e24c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e254:	f00c ff1e 	bl	801b094 <sys_arch_protect>
 800e258:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d015      	beq.n	800e294 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	6812      	ldr	r2, [r2, #0]
 800e270:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	f003 0303 	and.w	r3, r3, #3
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d006      	beq.n	800e28a <do_memp_malloc_pool+0x3e>
 800e27c:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <do_memp_malloc_pool+0x58>)
 800e27e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e282:	4909      	ldr	r1, [pc, #36]	; (800e2a8 <do_memp_malloc_pool+0x5c>)
 800e284:	4809      	ldr	r0, [pc, #36]	; (800e2ac <do_memp_malloc_pool+0x60>)
 800e286:	f00d fdcf 	bl	801be28 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f00c ff10 	bl	801b0b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	e003      	b.n	800e29c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f00c ff0b 	bl	801b0b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}
 800e2a4:	0801f5b0 	.word	0x0801f5b0
 800e2a8:	0801f5e0 	.word	0x0801f5e0
 800e2ac:	0801f604 	.word	0x0801f604

0800e2b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e2ba:	79fb      	ldrb	r3, [r7, #7]
 800e2bc:	2b0c      	cmp	r3, #12
 800e2be:	d908      	bls.n	800e2d2 <memp_malloc+0x22>
 800e2c0:	4b0a      	ldr	r3, [pc, #40]	; (800e2ec <memp_malloc+0x3c>)
 800e2c2:	f240 1257 	movw	r2, #343	; 0x157
 800e2c6:	490a      	ldr	r1, [pc, #40]	; (800e2f0 <memp_malloc+0x40>)
 800e2c8:	480a      	ldr	r0, [pc, #40]	; (800e2f4 <memp_malloc+0x44>)
 800e2ca:	f00d fdad 	bl	801be28 <iprintf>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e008      	b.n	800e2e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e2d2:	79fb      	ldrb	r3, [r7, #7]
 800e2d4:	4a08      	ldr	r2, [pc, #32]	; (800e2f8 <memp_malloc+0x48>)
 800e2d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7ff ffb6 	bl	800e24c <do_memp_malloc_pool>
 800e2e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3710      	adds	r7, #16
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	0801f5b0 	.word	0x0801f5b0
 800e2f0:	0801f640 	.word	0x0801f640
 800e2f4:	0801f604 	.word	0x0801f604
 800e2f8:	0806debc 	.word	0x0806debc

0800e2fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	f003 0303 	and.w	r3, r3, #3
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d006      	beq.n	800e31e <do_memp_free_pool+0x22>
 800e310:	4b0d      	ldr	r3, [pc, #52]	; (800e348 <do_memp_free_pool+0x4c>)
 800e312:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e316:	490d      	ldr	r1, [pc, #52]	; (800e34c <do_memp_free_pool+0x50>)
 800e318:	480d      	ldr	r0, [pc, #52]	; (800e350 <do_memp_free_pool+0x54>)
 800e31a:	f00d fd85 	bl	801be28 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e322:	f00c feb7 	bl	801b094 <sys_arch_protect>
 800e326:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	68fa      	ldr	r2, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e33a:	68b8      	ldr	r0, [r7, #8]
 800e33c:	f00c feb8 	bl	801b0b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e340:	bf00      	nop
 800e342:	3710      	adds	r7, #16
 800e344:	46bd      	mov	sp, r7
 800e346:	bd80      	pop	{r7, pc}
 800e348:	0801f5b0 	.word	0x0801f5b0
 800e34c:	0801f660 	.word	0x0801f660
 800e350:	0801f604 	.word	0x0801f604

0800e354 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	4603      	mov	r3, r0
 800e35c:	6039      	str	r1, [r7, #0]
 800e35e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e360:	79fb      	ldrb	r3, [r7, #7]
 800e362:	2b0c      	cmp	r3, #12
 800e364:	d907      	bls.n	800e376 <memp_free+0x22>
 800e366:	4b0c      	ldr	r3, [pc, #48]	; (800e398 <memp_free+0x44>)
 800e368:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e36c:	490b      	ldr	r1, [pc, #44]	; (800e39c <memp_free+0x48>)
 800e36e:	480c      	ldr	r0, [pc, #48]	; (800e3a0 <memp_free+0x4c>)
 800e370:	f00d fd5a 	bl	801be28 <iprintf>
 800e374:	e00c      	b.n	800e390 <memp_free+0x3c>

  if (mem == NULL) {
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d008      	beq.n	800e38e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e37c:	79fb      	ldrb	r3, [r7, #7]
 800e37e:	4a09      	ldr	r2, [pc, #36]	; (800e3a4 <memp_free+0x50>)
 800e380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e384:	6839      	ldr	r1, [r7, #0]
 800e386:	4618      	mov	r0, r3
 800e388:	f7ff ffb8 	bl	800e2fc <do_memp_free_pool>
 800e38c:	e000      	b.n	800e390 <memp_free+0x3c>
    return;
 800e38e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e390:	3708      	adds	r7, #8
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}
 800e396:	bf00      	nop
 800e398:	0801f5b0 	.word	0x0801f5b0
 800e39c:	0801f680 	.word	0x0801f680
 800e3a0:	0801f604 	.word	0x0801f604
 800e3a4:	0806debc 	.word	0x0806debc

0800e3a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e3ac:	bf00      	nop
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b4:	4770      	bx	lr
	...

0800e3b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b086      	sub	sp, #24
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
 800e3c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d108      	bne.n	800e3de <netif_add+0x26>
 800e3cc:	4b5b      	ldr	r3, [pc, #364]	; (800e53c <netif_add+0x184>)
 800e3ce:	f240 1227 	movw	r2, #295	; 0x127
 800e3d2:	495b      	ldr	r1, [pc, #364]	; (800e540 <netif_add+0x188>)
 800e3d4:	485b      	ldr	r0, [pc, #364]	; (800e544 <netif_add+0x18c>)
 800e3d6:	f00d fd27 	bl	801be28 <iprintf>
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e0a9      	b.n	800e532 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d108      	bne.n	800e3f6 <netif_add+0x3e>
 800e3e4:	4b55      	ldr	r3, [pc, #340]	; (800e53c <netif_add+0x184>)
 800e3e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e3ea:	4957      	ldr	r1, [pc, #348]	; (800e548 <netif_add+0x190>)
 800e3ec:	4855      	ldr	r0, [pc, #340]	; (800e544 <netif_add+0x18c>)
 800e3ee:	f00d fd1b 	bl	801be28 <iprintf>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	e09d      	b.n	800e532 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d101      	bne.n	800e400 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e3fc:	4b53      	ldr	r3, [pc, #332]	; (800e54c <netif_add+0x194>)
 800e3fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e406:	4b51      	ldr	r3, [pc, #324]	; (800e54c <netif_add+0x194>)
 800e408:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d101      	bne.n	800e414 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e410:	4b4e      	ldr	r3, [pc, #312]	; (800e54c <netif_add+0x194>)
 800e412:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2200      	movs	r2, #0
 800e41e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2200      	movs	r2, #0
 800e424:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	4a49      	ldr	r2, [pc, #292]	; (800e550 <netif_add+0x198>)
 800e42a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2200      	movs	r2, #0
 800e430:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2200      	movs	r2, #0
 800e436:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3324      	adds	r3, #36	; 0x24
 800e43e:	2204      	movs	r2, #4
 800e440:	2100      	movs	r1, #0
 800e442:	4618      	mov	r0, r3
 800e444:	f00d fe5a 	bl	801c0fc <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	6a3a      	ldr	r2, [r7, #32]
 800e452:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e454:	4b3f      	ldr	r3, [pc, #252]	; (800e554 <netif_add+0x19c>)
 800e456:	781a      	ldrb	r2, [r3, #0]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e462:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f000 f914 	bl	800e698 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	4798      	blx	r3
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <netif_add+0xc8>
    return NULL;
 800e47c:	2300      	movs	r3, #0
 800e47e:	e058      	b.n	800e532 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e486:	2bff      	cmp	r3, #255	; 0xff
 800e488:	d103      	bne.n	800e492 <netif_add+0xda>
        netif->num = 0;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2200      	movs	r2, #0
 800e48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e496:	4b30      	ldr	r3, [pc, #192]	; (800e558 <netif_add+0x1a0>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	617b      	str	r3, [r7, #20]
 800e49c:	e02b      	b.n	800e4f6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e49e:	697a      	ldr	r2, [r7, #20]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d106      	bne.n	800e4b4 <netif_add+0xfc>
 800e4a6:	4b25      	ldr	r3, [pc, #148]	; (800e53c <netif_add+0x184>)
 800e4a8:	f240 128b 	movw	r2, #395	; 0x18b
 800e4ac:	492b      	ldr	r1, [pc, #172]	; (800e55c <netif_add+0x1a4>)
 800e4ae:	4825      	ldr	r0, [pc, #148]	; (800e544 <netif_add+0x18c>)
 800e4b0:	f00d fcba 	bl	801be28 <iprintf>
        num_netifs++;
 800e4b4:	693b      	ldr	r3, [r7, #16]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	2bff      	cmp	r3, #255	; 0xff
 800e4be:	dd06      	ble.n	800e4ce <netif_add+0x116>
 800e4c0:	4b1e      	ldr	r3, [pc, #120]	; (800e53c <netif_add+0x184>)
 800e4c2:	f240 128d 	movw	r2, #397	; 0x18d
 800e4c6:	4926      	ldr	r1, [pc, #152]	; (800e560 <netif_add+0x1a8>)
 800e4c8:	481e      	ldr	r0, [pc, #120]	; (800e544 <netif_add+0x18c>)
 800e4ca:	f00d fcad 	bl	801be28 <iprintf>
        if (netif2->num == netif->num) {
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d108      	bne.n	800e4f0 <netif_add+0x138>
          netif->num++;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e4ee:	e005      	b.n	800e4fc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	617b      	str	r3, [r7, #20]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1d0      	bne.n	800e49e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1be      	bne.n	800e480 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e508:	2bfe      	cmp	r3, #254	; 0xfe
 800e50a:	d103      	bne.n	800e514 <netif_add+0x15c>
    netif_num = 0;
 800e50c:	4b11      	ldr	r3, [pc, #68]	; (800e554 <netif_add+0x19c>)
 800e50e:	2200      	movs	r2, #0
 800e510:	701a      	strb	r2, [r3, #0]
 800e512:	e006      	b.n	800e522 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e51a:	3301      	adds	r3, #1
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	4b0d      	ldr	r3, [pc, #52]	; (800e554 <netif_add+0x19c>)
 800e520:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e522:	4b0d      	ldr	r3, [pc, #52]	; (800e558 <netif_add+0x1a0>)
 800e524:	681a      	ldr	r2, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e52a:	4a0b      	ldr	r2, [pc, #44]	; (800e558 <netif_add+0x1a0>)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e530:	68fb      	ldr	r3, [r7, #12]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3718      	adds	r7, #24
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	bf00      	nop
 800e53c:	0801f69c 	.word	0x0801f69c
 800e540:	0801f730 	.word	0x0801f730
 800e544:	0801f6ec 	.word	0x0801f6ec
 800e548:	0801f74c 	.word	0x0801f74c
 800e54c:	0806df40 	.word	0x0806df40
 800e550:	0800e959 	.word	0x0800e959
 800e554:	20013cd4 	.word	0x20013cd4
 800e558:	20013ccc 	.word	0x20013ccc
 800e55c:	0801f770 	.word	0x0801f770
 800e560:	0801f784 	.word	0x0801f784

0800e564 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f002 feb5 	bl	80112e0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f008 f87b 	bl	8016674 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d106      	bne.n	800e5a8 <netif_do_set_ipaddr+0x20>
 800e59a:	4b1d      	ldr	r3, [pc, #116]	; (800e610 <netif_do_set_ipaddr+0x88>)
 800e59c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e5a0:	491c      	ldr	r1, [pc, #112]	; (800e614 <netif_do_set_ipaddr+0x8c>)
 800e5a2:	481d      	ldr	r0, [pc, #116]	; (800e618 <netif_do_set_ipaddr+0x90>)
 800e5a4:	f00d fc40 	bl	801be28 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <netif_do_set_ipaddr+0x34>
 800e5ae:	4b18      	ldr	r3, [pc, #96]	; (800e610 <netif_do_set_ipaddr+0x88>)
 800e5b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e5b4:	4917      	ldr	r1, [pc, #92]	; (800e614 <netif_do_set_ipaddr+0x8c>)
 800e5b6:	4818      	ldr	r0, [pc, #96]	; (800e618 <netif_do_set_ipaddr+0x90>)
 800e5b8:	f00d fc36 	bl	801be28 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d01c      	beq.n	800e604 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ffbf 	bl	800e564 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <netif_do_set_ipaddr+0x6a>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	e000      	b.n	800e5f4 <netif_do_set_ipaddr+0x6c>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 f8d2 	bl	800e7a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e600:	2301      	movs	r3, #1
 800e602:	e000      	b.n	800e606 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	0801f69c 	.word	0x0801f69c
 800e614:	0801f7b4 	.word	0x0801f7b4
 800e618:	0801f6ec 	.word	0x0801f6ec

0800e61c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3308      	adds	r3, #8
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d00a      	beq.n	800e64c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <netif_do_set_netmask+0x26>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	e000      	b.n	800e644 <netif_do_set_netmask+0x28>
 800e642:	2300      	movs	r3, #0
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e648:	2301      	movs	r3, #1
 800e64a:	e000      	b.n	800e64e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e65a:	b480      	push	{r7}
 800e65c:	b085      	sub	sp, #20
 800e65e:	af00      	add	r7, sp, #0
 800e660:	60f8      	str	r0, [r7, #12]
 800e662:	60b9      	str	r1, [r7, #8]
 800e664:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	330c      	adds	r3, #12
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	429a      	cmp	r2, r3
 800e672:	d00a      	beq.n	800e68a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <netif_do_set_gw+0x26>
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	e000      	b.n	800e682 <netif_do_set_gw+0x28>
 800e680:	2300      	movs	r3, #0
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e6b4:	4b1c      	ldr	r3, [pc, #112]	; (800e728 <netif_set_addr+0x90>)
 800e6b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e6be:	4b1a      	ldr	r3, [pc, #104]	; (800e728 <netif_set_addr+0x90>)
 800e6c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e6c8:	4b17      	ldr	r3, [pc, #92]	; (800e728 <netif_set_addr+0x90>)
 800e6ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <netif_set_addr+0x42>
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <netif_set_addr+0x46>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e000      	b.n	800e6e0 <netif_set_addr+0x48>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e6e8:	f107 0310 	add.w	r3, r7, #16
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	68b9      	ldr	r1, [r7, #8]
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7ff ff49 	bl	800e588 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e6f6:	69fa      	ldr	r2, [r7, #28]
 800e6f8:	6879      	ldr	r1, [r7, #4]
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f7ff ff8e 	bl	800e61c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff ffa8 	bl	800e65a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e710:	f107 0310 	add.w	r3, r7, #16
 800e714:	461a      	mov	r2, r3
 800e716:	68b9      	ldr	r1, [r7, #8]
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff ff35 	bl	800e588 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e71e:	bf00      	nop
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	0806df40 	.word	0x0806df40

0800e72c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e734:	4a04      	ldr	r2, [pc, #16]	; (800e748 <netif_set_default+0x1c>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e73a:	bf00      	nop
 800e73c:	370c      	adds	r7, #12
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	20013cd0 	.word	0x20013cd0

0800e74c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d107      	bne.n	800e76a <netif_set_up+0x1e>
 800e75a:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <netif_set_up+0x4c>)
 800e75c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e760:	490e      	ldr	r1, [pc, #56]	; (800e79c <netif_set_up+0x50>)
 800e762:	480f      	ldr	r0, [pc, #60]	; (800e7a0 <netif_set_up+0x54>)
 800e764:	f00d fb60 	bl	801be28 <iprintf>
 800e768:	e013      	b.n	800e792 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10c      	bne.n	800e792 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	b2da      	uxtb	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e78a:	2103      	movs	r1, #3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f809 	bl	800e7a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	0801f69c 	.word	0x0801f69c
 800e79c:	0801f824 	.word	0x0801f824
 800e7a0:	0801f6ec 	.word	0x0801f6ec

0800e7a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d106      	bne.n	800e7c4 <netif_issue_reports+0x20>
 800e7b6:	4b18      	ldr	r3, [pc, #96]	; (800e818 <netif_issue_reports+0x74>)
 800e7b8:	f240 326d 	movw	r2, #877	; 0x36d
 800e7bc:	4917      	ldr	r1, [pc, #92]	; (800e81c <netif_issue_reports+0x78>)
 800e7be:	4818      	ldr	r0, [pc, #96]	; (800e820 <netif_issue_reports+0x7c>)
 800e7c0:	f00d fb32 	bl	801be28 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7ca:	f003 0304 	and.w	r3, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d01e      	beq.n	800e810 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d017      	beq.n	800e810 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d013      	beq.n	800e812 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00e      	beq.n	800e812 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3304      	adds	r3, #4
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f00a fdb9 	bl	8019380 <etharp_request>
 800e80e:	e000      	b.n	800e812 <netif_issue_reports+0x6e>
    return;
 800e810:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	0801f69c 	.word	0x0801f69c
 800e81c:	0801f840 	.word	0x0801f840
 800e820:	0801f6ec 	.word	0x0801f6ec

0800e824 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d107      	bne.n	800e842 <netif_set_down+0x1e>
 800e832:	4b12      	ldr	r3, [pc, #72]	; (800e87c <netif_set_down+0x58>)
 800e834:	f240 329b 	movw	r2, #923	; 0x39b
 800e838:	4911      	ldr	r1, [pc, #68]	; (800e880 <netif_set_down+0x5c>)
 800e83a:	4812      	ldr	r0, [pc, #72]	; (800e884 <netif_set_down+0x60>)
 800e83c:	f00d faf4 	bl	801be28 <iprintf>
 800e840:	e019      	b.n	800e876 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e848:	f003 0301 	and.w	r3, r3, #1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d012      	beq.n	800e876 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e856:	f023 0301 	bic.w	r3, r3, #1
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e868:	f003 0308 	and.w	r3, r3, #8
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f00a f93f 	bl	8018af4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	0801f69c 	.word	0x0801f69c
 800e880:	0801f864 	.word	0x0801f864
 800e884:	0801f6ec 	.word	0x0801f6ec

0800e888 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d107      	bne.n	800e8a6 <netif_set_link_up+0x1e>
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <netif_set_link_up+0x64>)
 800e898:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e89c:	4914      	ldr	r1, [pc, #80]	; (800e8f0 <netif_set_link_up+0x68>)
 800e89e:	4815      	ldr	r0, [pc, #84]	; (800e8f4 <netif_set_link_up+0x6c>)
 800e8a0:	f00d fac2 	bl	801be28 <iprintf>
 800e8a4:	e01e      	b.n	800e8e4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d117      	bne.n	800e8e4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8ba:	f043 0304 	orr.w	r3, r3, #4
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f008 fafe 	bl	8016ec8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e8cc:	2103      	movs	r1, #3
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f7ff ff68 	bl	800e7a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	69db      	ldr	r3, [r3, #28]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d003      	beq.n	800e8e4 <netif_set_link_up+0x5c>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	69db      	ldr	r3, [r3, #28]
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e8e4:	3708      	adds	r7, #8
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	0801f69c 	.word	0x0801f69c
 800e8f0:	0801f884 	.word	0x0801f884
 800e8f4:	0801f6ec 	.word	0x0801f6ec

0800e8f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <netif_set_link_down+0x1e>
 800e906:	4b11      	ldr	r3, [pc, #68]	; (800e94c <netif_set_link_down+0x54>)
 800e908:	f240 4206 	movw	r2, #1030	; 0x406
 800e90c:	4910      	ldr	r1, [pc, #64]	; (800e950 <netif_set_link_down+0x58>)
 800e90e:	4811      	ldr	r0, [pc, #68]	; (800e954 <netif_set_link_down+0x5c>)
 800e910:	f00d fa8a 	bl	801be28 <iprintf>
 800e914:	e017      	b.n	800e946 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e91c:	f003 0304 	and.w	r3, r3, #4
 800e920:	2b00      	cmp	r3, #0
 800e922:	d010      	beq.n	800e946 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e92a:	f023 0304 	bic.w	r3, r3, #4
 800e92e:	b2da      	uxtb	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <netif_set_link_down+0x4e>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	69db      	ldr	r3, [r3, #28]
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	0801f69c 	.word	0x0801f69c
 800e950:	0801f8a8 	.word	0x0801f8a8
 800e954:	0801f6ec 	.word	0x0801f6ec

0800e958 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e964:	f06f 030b 	mvn.w	r3, #11
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3714      	adds	r7, #20
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e97e:	79fb      	ldrb	r3, [r7, #7]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d013      	beq.n	800e9ac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e984:	4b0d      	ldr	r3, [pc, #52]	; (800e9bc <netif_get_by_index+0x48>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	e00c      	b.n	800e9a6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e992:	3301      	adds	r3, #1
 800e994:	b2db      	uxtb	r3, r3
 800e996:	79fa      	ldrb	r2, [r7, #7]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d101      	bne.n	800e9a0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	e006      	b.n	800e9ae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	60fb      	str	r3, [r7, #12]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1ef      	bne.n	800e98c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3714      	adds	r7, #20
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	20013ccc 	.word	0x20013ccc

0800e9c0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e9c6:	f00c fb65 	bl	801b094 <sys_arch_protect>
 800e9ca:	6038      	str	r0, [r7, #0]
 800e9cc:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <pbuf_free_ooseq+0x44>)
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	701a      	strb	r2, [r3, #0]
 800e9d2:	6838      	ldr	r0, [r7, #0]
 800e9d4:	f00c fb6c 	bl	801b0b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e9d8:	4b0b      	ldr	r3, [pc, #44]	; (800ea08 <pbuf_free_ooseq+0x48>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	607b      	str	r3, [r7, #4]
 800e9de:	e00a      	b.n	800e9f6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d003      	beq.n	800e9f0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f002 fcb7 	bl	801135c <tcp_free_ooseq>
      return;
 800e9ee:	e005      	b.n	800e9fc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	607b      	str	r3, [r7, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d1f1      	bne.n	800e9e0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	20013cd5 	.word	0x20013cd5
 800ea08:	20013ce4 	.word	0x20013ce4

0800ea0c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ea14:	f7ff ffd4 	bl	800e9c0 <pbuf_free_ooseq>
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ea26:	f00c fb35 	bl	801b094 <sys_arch_protect>
 800ea2a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ea2c:	4b0f      	ldr	r3, [pc, #60]	; (800ea6c <pbuf_pool_is_empty+0x4c>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ea32:	4b0e      	ldr	r3, [pc, #56]	; (800ea6c <pbuf_pool_is_empty+0x4c>)
 800ea34:	2201      	movs	r2, #1
 800ea36:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f00c fb39 	bl	801b0b0 <sys_arch_unprotect>

  if (!queued) {
 800ea3e:	78fb      	ldrb	r3, [r7, #3]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10f      	bne.n	800ea64 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ea44:	2100      	movs	r1, #0
 800ea46:	480a      	ldr	r0, [pc, #40]	; (800ea70 <pbuf_pool_is_empty+0x50>)
 800ea48:	f7fe fd62 	bl	800d510 <tcpip_try_callback>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d008      	beq.n	800ea64 <pbuf_pool_is_empty+0x44>
 800ea52:	f00c fb1f 	bl	801b094 <sys_arch_protect>
 800ea56:	6078      	str	r0, [r7, #4]
 800ea58:	4b04      	ldr	r3, [pc, #16]	; (800ea6c <pbuf_pool_is_empty+0x4c>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	701a      	strb	r2, [r3, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f00c fb26 	bl	801b0b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ea64:	bf00      	nop
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	20013cd5 	.word	0x20013cd5
 800ea70:	0800ea0d 	.word	0x0800ea0d

0800ea74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	60b9      	str	r1, [r7, #8]
 800ea7e:	4611      	mov	r1, r2
 800ea80:	461a      	mov	r2, r3
 800ea82:	460b      	mov	r3, r1
 800ea84:	80fb      	strh	r3, [r7, #6]
 800ea86:	4613      	mov	r3, r2
 800ea88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68ba      	ldr	r2, [r7, #8]
 800ea94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	88fa      	ldrh	r2, [r7, #6]
 800ea9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	88ba      	ldrh	r2, [r7, #4]
 800eaa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800eaa2:	8b3b      	ldrh	r3, [r7, #24]
 800eaa4:	b2da      	uxtb	r2, r3
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	7f3a      	ldrb	r2, [r7, #28]
 800eaae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2201      	movs	r2, #1
 800eab4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2200      	movs	r2, #0
 800eaba:	73da      	strb	r2, [r3, #15]
}
 800eabc:	bf00      	nop
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b08c      	sub	sp, #48	; 0x30
 800eacc:	af02      	add	r7, sp, #8
 800eace:	4603      	mov	r3, r0
 800ead0:	71fb      	strb	r3, [r7, #7]
 800ead2:	460b      	mov	r3, r1
 800ead4:	80bb      	strh	r3, [r7, #4]
 800ead6:	4613      	mov	r3, r2
 800ead8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800eada:	79fb      	ldrb	r3, [r7, #7]
 800eadc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800eade:	887b      	ldrh	r3, [r7, #2]
 800eae0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800eae4:	f000 8082 	beq.w	800ebec <pbuf_alloc+0x124>
 800eae8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800eaec:	f300 80ca 	bgt.w	800ec84 <pbuf_alloc+0x1bc>
 800eaf0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800eaf4:	d010      	beq.n	800eb18 <pbuf_alloc+0x50>
 800eaf6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800eafa:	f300 80c3 	bgt.w	800ec84 <pbuf_alloc+0x1bc>
 800eafe:	2b01      	cmp	r3, #1
 800eb00:	d002      	beq.n	800eb08 <pbuf_alloc+0x40>
 800eb02:	2b41      	cmp	r3, #65	; 0x41
 800eb04:	f040 80be 	bne.w	800ec84 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800eb08:	887a      	ldrh	r2, [r7, #2]
 800eb0a:	88bb      	ldrh	r3, [r7, #4]
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	2000      	movs	r0, #0
 800eb10:	f000 f8d4 	bl	800ecbc <pbuf_alloc_reference>
 800eb14:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800eb16:	e0bf      	b.n	800ec98 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800eb20:	88bb      	ldrh	r3, [r7, #4]
 800eb22:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800eb24:	200c      	movs	r0, #12
 800eb26:	f7ff fbc3 	bl	800e2b0 <memp_malloc>
 800eb2a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d109      	bne.n	800eb46 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800eb32:	f7ff ff75 	bl	800ea20 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800eb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d002      	beq.n	800eb42 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800eb3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb3e:	f000 faab 	bl	800f098 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	e0a9      	b.n	800ec9a <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800eb46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb48:	3303      	adds	r3, #3
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	f023 0303 	bic.w	r3, r3, #3
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800eb56:	3304      	adds	r3, #4
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	8b7a      	ldrh	r2, [r7, #26]
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	bf28      	it	cs
 800eb60:	4613      	movcs	r3, r2
 800eb62:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eb64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb66:	3310      	adds	r3, #16
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	3303      	adds	r3, #3
 800eb6e:	f023 0303 	bic.w	r3, r3, #3
 800eb72:	4618      	mov	r0, r3
 800eb74:	89f9      	ldrh	r1, [r7, #14]
 800eb76:	8b7a      	ldrh	r2, [r7, #26]
 800eb78:	2300      	movs	r3, #0
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	887b      	ldrh	r3, [r7, #2]
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	460b      	mov	r3, r1
 800eb82:	4601      	mov	r1, r0
 800eb84:	6938      	ldr	r0, [r7, #16]
 800eb86:	f7ff ff75 	bl	800ea74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800eb8a:	693b      	ldr	r3, [r7, #16]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	f003 0303 	and.w	r3, r3, #3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d006      	beq.n	800eba4 <pbuf_alloc+0xdc>
 800eb96:	4b43      	ldr	r3, [pc, #268]	; (800eca4 <pbuf_alloc+0x1dc>)
 800eb98:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb9c:	4942      	ldr	r1, [pc, #264]	; (800eca8 <pbuf_alloc+0x1e0>)
 800eb9e:	4843      	ldr	r0, [pc, #268]	; (800ecac <pbuf_alloc+0x1e4>)
 800eba0:	f00d f942 	bl	801be28 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eba4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eba6:	3303      	adds	r3, #3
 800eba8:	f023 0303 	bic.w	r3, r3, #3
 800ebac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ebb0:	4293      	cmp	r3, r2
 800ebb2:	d106      	bne.n	800ebc2 <pbuf_alloc+0xfa>
 800ebb4:	4b3b      	ldr	r3, [pc, #236]	; (800eca4 <pbuf_alloc+0x1dc>)
 800ebb6:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ebba:	493d      	ldr	r1, [pc, #244]	; (800ecb0 <pbuf_alloc+0x1e8>)
 800ebbc:	483b      	ldr	r0, [pc, #236]	; (800ecac <pbuf_alloc+0x1e4>)
 800ebbe:	f00d f933 	bl	801be28 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ebc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d102      	bne.n	800ebce <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	627b      	str	r3, [r7, #36]	; 0x24
 800ebcc:	e002      	b.n	800ebd4 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ebce:	69fb      	ldr	r3, [r7, #28]
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ebd8:	8b7a      	ldrh	r2, [r7, #26]
 800ebda:	89fb      	ldrh	r3, [r7, #14]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ebe4:	8b7b      	ldrh	r3, [r7, #26]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d19c      	bne.n	800eb24 <pbuf_alloc+0x5c>
      break;
 800ebea:	e055      	b.n	800ec98 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ebec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebee:	3303      	adds	r3, #3
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	f023 0303 	bic.w	r3, r3, #3
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	88bb      	ldrh	r3, [r7, #4]
 800ebfa:	3303      	adds	r3, #3
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	f023 0303 	bic.w	r3, r3, #3
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	4413      	add	r3, r2
 800ec06:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ec08:	8b3b      	ldrh	r3, [r7, #24]
 800ec0a:	3310      	adds	r3, #16
 800ec0c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ec0e:	8b3a      	ldrh	r2, [r7, #24]
 800ec10:	88bb      	ldrh	r3, [r7, #4]
 800ec12:	3303      	adds	r3, #3
 800ec14:	f023 0303 	bic.w	r3, r3, #3
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d306      	bcc.n	800ec2a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ec1c:	8afa      	ldrh	r2, [r7, #22]
 800ec1e:	88bb      	ldrh	r3, [r7, #4]
 800ec20:	3303      	adds	r3, #3
 800ec22:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d201      	bcs.n	800ec2e <pbuf_alloc+0x166>
        return NULL;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e035      	b.n	800ec9a <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ec2e:	8afb      	ldrh	r3, [r7, #22]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff f9bb 	bl	800dfac <mem_malloc>
 800ec36:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ec38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d101      	bne.n	800ec42 <pbuf_alloc+0x17a>
        return NULL;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	e02b      	b.n	800ec9a <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ec42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec44:	3310      	adds	r3, #16
 800ec46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec48:	4413      	add	r3, r2
 800ec4a:	3303      	adds	r3, #3
 800ec4c:	f023 0303 	bic.w	r3, r3, #3
 800ec50:	4618      	mov	r0, r3
 800ec52:	88b9      	ldrh	r1, [r7, #4]
 800ec54:	88ba      	ldrh	r2, [r7, #4]
 800ec56:	2300      	movs	r3, #0
 800ec58:	9301      	str	r3, [sp, #4]
 800ec5a:	887b      	ldrh	r3, [r7, #2]
 800ec5c:	9300      	str	r3, [sp, #0]
 800ec5e:	460b      	mov	r3, r1
 800ec60:	4601      	mov	r1, r0
 800ec62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec64:	f7ff ff06 	bl	800ea74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ec68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	f003 0303 	and.w	r3, r3, #3
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d010      	beq.n	800ec96 <pbuf_alloc+0x1ce>
 800ec74:	4b0b      	ldr	r3, [pc, #44]	; (800eca4 <pbuf_alloc+0x1dc>)
 800ec76:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ec7a:	490e      	ldr	r1, [pc, #56]	; (800ecb4 <pbuf_alloc+0x1ec>)
 800ec7c:	480b      	ldr	r0, [pc, #44]	; (800ecac <pbuf_alloc+0x1e4>)
 800ec7e:	f00d f8d3 	bl	801be28 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ec82:	e008      	b.n	800ec96 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ec84:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <pbuf_alloc+0x1dc>)
 800ec86:	f240 1227 	movw	r2, #295	; 0x127
 800ec8a:	490b      	ldr	r1, [pc, #44]	; (800ecb8 <pbuf_alloc+0x1f0>)
 800ec8c:	4807      	ldr	r0, [pc, #28]	; (800ecac <pbuf_alloc+0x1e4>)
 800ec8e:	f00d f8cb 	bl	801be28 <iprintf>
      return NULL;
 800ec92:	2300      	movs	r3, #0
 800ec94:	e001      	b.n	800ec9a <pbuf_alloc+0x1d2>
      break;
 800ec96:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3728      	adds	r7, #40	; 0x28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	0801f8cc 	.word	0x0801f8cc
 800eca8:	0801f8fc 	.word	0x0801f8fc
 800ecac:	0801f92c 	.word	0x0801f92c
 800ecb0:	0801f954 	.word	0x0801f954
 800ecb4:	0801f988 	.word	0x0801f988
 800ecb8:	0801f9b4 	.word	0x0801f9b4

0800ecbc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b086      	sub	sp, #24
 800ecc0:	af02      	add	r7, sp, #8
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	807b      	strh	r3, [r7, #2]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800eccc:	883b      	ldrh	r3, [r7, #0]
 800ecce:	2b41      	cmp	r3, #65	; 0x41
 800ecd0:	d009      	beq.n	800ece6 <pbuf_alloc_reference+0x2a>
 800ecd2:	883b      	ldrh	r3, [r7, #0]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d006      	beq.n	800ece6 <pbuf_alloc_reference+0x2a>
 800ecd8:	4b0f      	ldr	r3, [pc, #60]	; (800ed18 <pbuf_alloc_reference+0x5c>)
 800ecda:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ecde:	490f      	ldr	r1, [pc, #60]	; (800ed1c <pbuf_alloc_reference+0x60>)
 800ece0:	480f      	ldr	r0, [pc, #60]	; (800ed20 <pbuf_alloc_reference+0x64>)
 800ece2:	f00d f8a1 	bl	801be28 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ece6:	200b      	movs	r0, #11
 800ece8:	f7ff fae2 	bl	800e2b0 <memp_malloc>
 800ecec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e00b      	b.n	800ed10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ecf8:	8879      	ldrh	r1, [r7, #2]
 800ecfa:	887a      	ldrh	r2, [r7, #2]
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	9301      	str	r3, [sp, #4]
 800ed00:	883b      	ldrh	r3, [r7, #0]
 800ed02:	9300      	str	r3, [sp, #0]
 800ed04:	460b      	mov	r3, r1
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f7ff feb3 	bl	800ea74 <pbuf_init_alloced_pbuf>
  return p;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	0801f8cc 	.word	0x0801f8cc
 800ed1c:	0801f9d0 	.word	0x0801f9d0
 800ed20:	0801f92c 	.word	0x0801f92c

0800ed24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af02      	add	r7, sp, #8
 800ed2a:	607b      	str	r3, [r7, #4]
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]
 800ed30:	460b      	mov	r3, r1
 800ed32:	81bb      	strh	r3, [r7, #12]
 800ed34:	4613      	mov	r3, r2
 800ed36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ed3c:	8a7b      	ldrh	r3, [r7, #18]
 800ed3e:	3303      	adds	r3, #3
 800ed40:	f023 0203 	bic.w	r2, r3, #3
 800ed44:	89bb      	ldrh	r3, [r7, #12]
 800ed46:	441a      	add	r2, r3
 800ed48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d901      	bls.n	800ed52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	e018      	b.n	800ed84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ed52:	6a3b      	ldr	r3, [r7, #32]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d007      	beq.n	800ed68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ed58:	8a7b      	ldrh	r3, [r7, #18]
 800ed5a:	3303      	adds	r3, #3
 800ed5c:	f023 0303 	bic.w	r3, r3, #3
 800ed60:	6a3a      	ldr	r2, [r7, #32]
 800ed62:	4413      	add	r3, r2
 800ed64:	617b      	str	r3, [r7, #20]
 800ed66:	e001      	b.n	800ed6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	89b9      	ldrh	r1, [r7, #12]
 800ed70:	89ba      	ldrh	r2, [r7, #12]
 800ed72:	2302      	movs	r3, #2
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	897b      	ldrh	r3, [r7, #10]
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	6979      	ldr	r1, [r7, #20]
 800ed7e:	f7ff fe79 	bl	800ea74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ed82:	687b      	ldr	r3, [r7, #4]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3718      	adds	r7, #24
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d106      	bne.n	800edac <pbuf_realloc+0x20>
 800ed9e:	4b3a      	ldr	r3, [pc, #232]	; (800ee88 <pbuf_realloc+0xfc>)
 800eda0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800eda4:	4939      	ldr	r1, [pc, #228]	; (800ee8c <pbuf_realloc+0x100>)
 800eda6:	483a      	ldr	r0, [pc, #232]	; (800ee90 <pbuf_realloc+0x104>)
 800eda8:	f00d f83e 	bl	801be28 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	891b      	ldrh	r3, [r3, #8]
 800edb0:	887a      	ldrh	r2, [r7, #2]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d263      	bcs.n	800ee7e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	891a      	ldrh	r2, [r3, #8]
 800edba:	887b      	ldrh	r3, [r7, #2]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800edc0:	887b      	ldrh	r3, [r7, #2]
 800edc2:	817b      	strh	r3, [r7, #10]
  q = p;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800edc8:	e018      	b.n	800edfc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	895b      	ldrh	r3, [r3, #10]
 800edce:	897a      	ldrh	r2, [r7, #10]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	891a      	ldrh	r2, [r3, #8]
 800edd8:	893b      	ldrh	r3, [r7, #8]
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	b29a      	uxth	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <pbuf_realloc+0x70>
 800edee:	4b26      	ldr	r3, [pc, #152]	; (800ee88 <pbuf_realloc+0xfc>)
 800edf0:	f240 12af 	movw	r2, #431	; 0x1af
 800edf4:	4927      	ldr	r1, [pc, #156]	; (800ee94 <pbuf_realloc+0x108>)
 800edf6:	4826      	ldr	r0, [pc, #152]	; (800ee90 <pbuf_realloc+0x104>)
 800edf8:	f00d f816 	bl	801be28 <iprintf>
  while (rem_len > q->len) {
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	895b      	ldrh	r3, [r3, #10]
 800ee00:	897a      	ldrh	r2, [r7, #10]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d8e1      	bhi.n	800edca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	7b1b      	ldrb	r3, [r3, #12]
 800ee0a:	f003 030f 	and.w	r3, r3, #15
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d121      	bne.n	800ee56 <pbuf_realloc+0xca>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	895b      	ldrh	r3, [r3, #10]
 800ee16:	897a      	ldrh	r2, [r7, #10]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d01c      	beq.n	800ee56 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	7b5b      	ldrb	r3, [r3, #13]
 800ee20:	f003 0302 	and.w	r3, r3, #2
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d116      	bne.n	800ee56 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	897b      	ldrh	r3, [r7, #10]
 800ee34:	4413      	add	r3, r2
 800ee36:	b29b      	uxth	r3, r3
 800ee38:	4619      	mov	r1, r3
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7fe ffac 	bl	800dd98 <mem_trim>
 800ee40:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <pbuf_realloc+0xca>
 800ee48:	4b0f      	ldr	r3, [pc, #60]	; (800ee88 <pbuf_realloc+0xfc>)
 800ee4a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ee4e:	4912      	ldr	r1, [pc, #72]	; (800ee98 <pbuf_realloc+0x10c>)
 800ee50:	480f      	ldr	r0, [pc, #60]	; (800ee90 <pbuf_realloc+0x104>)
 800ee52:	f00c ffe9 	bl	801be28 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	897a      	ldrh	r2, [r7, #10]
 800ee5a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	895a      	ldrh	r2, [r3, #10]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d004      	beq.n	800ee76 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 f911 	bl	800f098 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	601a      	str	r2, [r3, #0]
 800ee7c:	e000      	b.n	800ee80 <pbuf_realloc+0xf4>
    return;
 800ee7e:	bf00      	nop

}
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	0801f8cc 	.word	0x0801f8cc
 800ee8c:	0801f9e4 	.word	0x0801f9e4
 800ee90:	0801f92c 	.word	0x0801f92c
 800ee94:	0801f9fc 	.word	0x0801f9fc
 800ee98:	0801fa14 	.word	0x0801fa14

0800ee9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	60f8      	str	r0, [r7, #12]
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	4613      	mov	r3, r2
 800eea8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d106      	bne.n	800eebe <pbuf_add_header_impl+0x22>
 800eeb0:	4b2b      	ldr	r3, [pc, #172]	; (800ef60 <pbuf_add_header_impl+0xc4>)
 800eeb2:	f240 12df 	movw	r2, #479	; 0x1df
 800eeb6:	492b      	ldr	r1, [pc, #172]	; (800ef64 <pbuf_add_header_impl+0xc8>)
 800eeb8:	482b      	ldr	r0, [pc, #172]	; (800ef68 <pbuf_add_header_impl+0xcc>)
 800eeba:	f00c ffb5 	bl	801be28 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d003      	beq.n	800eecc <pbuf_add_header_impl+0x30>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eeca:	d301      	bcc.n	800eed0 <pbuf_add_header_impl+0x34>
    return 1;
 800eecc:	2301      	movs	r3, #1
 800eece:	e043      	b.n	800ef58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <pbuf_add_header_impl+0x3e>
    return 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	e03e      	b.n	800ef58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	891a      	ldrh	r2, [r3, #8]
 800eee2:	8a7b      	ldrh	r3, [r7, #18]
 800eee4:	4413      	add	r3, r2
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	8a7a      	ldrh	r2, [r7, #18]
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d901      	bls.n	800eef2 <pbuf_add_header_impl+0x56>
    return 1;
 800eeee:	2301      	movs	r3, #1
 800eef0:	e032      	b.n	800ef58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	7b1b      	ldrb	r3, [r3, #12]
 800eef6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eef8:	8a3b      	ldrh	r3, [r7, #16]
 800eefa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00c      	beq.n	800ef1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	685a      	ldr	r2, [r3, #4]
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	425b      	negs	r3, r3
 800ef0a:	4413      	add	r3, r2
 800ef0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3310      	adds	r3, #16
 800ef12:	697a      	ldr	r2, [r7, #20]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d20d      	bcs.n	800ef34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e01d      	b.n	800ef58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d006      	beq.n	800ef30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	425b      	negs	r3, r3
 800ef2a:	4413      	add	r3, r2
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	e001      	b.n	800ef34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ef30:	2301      	movs	r3, #1
 800ef32:	e011      	b.n	800ef58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	697a      	ldr	r2, [r7, #20]
 800ef38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	895a      	ldrh	r2, [r3, #10]
 800ef3e:	8a7b      	ldrh	r3, [r7, #18]
 800ef40:	4413      	add	r3, r2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	891a      	ldrh	r2, [r3, #8]
 800ef4c:	8a7b      	ldrh	r3, [r7, #18]
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	811a      	strh	r2, [r3, #8]


  return 0;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	0801f8cc 	.word	0x0801f8cc
 800ef64:	0801fa30 	.word	0x0801fa30
 800ef68:	0801f92c 	.word	0x0801f92c

0800ef6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ef76:	2200      	movs	r2, #0
 800ef78:	6839      	ldr	r1, [r7, #0]
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff ff8e 	bl	800ee9c <pbuf_add_header_impl>
 800ef80:	4603      	mov	r3, r0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
	...

0800ef8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <pbuf_remove_header+0x1e>
 800ef9c:	4b20      	ldr	r3, [pc, #128]	; (800f020 <pbuf_remove_header+0x94>)
 800ef9e:	f240 224b 	movw	r2, #587	; 0x24b
 800efa2:	4920      	ldr	r1, [pc, #128]	; (800f024 <pbuf_remove_header+0x98>)
 800efa4:	4820      	ldr	r0, [pc, #128]	; (800f028 <pbuf_remove_header+0x9c>)
 800efa6:	f00c ff3f 	bl	801be28 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <pbuf_remove_header+0x2c>
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efb6:	d301      	bcc.n	800efbc <pbuf_remove_header+0x30>
    return 1;
 800efb8:	2301      	movs	r3, #1
 800efba:	e02c      	b.n	800f016 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d101      	bne.n	800efc6 <pbuf_remove_header+0x3a>
    return 0;
 800efc2:	2300      	movs	r3, #0
 800efc4:	e027      	b.n	800f016 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	895b      	ldrh	r3, [r3, #10]
 800efce:	89fa      	ldrh	r2, [r7, #14]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d908      	bls.n	800efe6 <pbuf_remove_header+0x5a>
 800efd4:	4b12      	ldr	r3, [pc, #72]	; (800f020 <pbuf_remove_header+0x94>)
 800efd6:	f240 2255 	movw	r2, #597	; 0x255
 800efda:	4914      	ldr	r1, [pc, #80]	; (800f02c <pbuf_remove_header+0xa0>)
 800efdc:	4812      	ldr	r0, [pc, #72]	; (800f028 <pbuf_remove_header+0x9c>)
 800efde:	f00c ff23 	bl	801be28 <iprintf>
 800efe2:	2301      	movs	r3, #1
 800efe4:	e017      	b.n	800f016 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	685a      	ldr	r2, [r3, #4]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	441a      	add	r2, r3
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	895a      	ldrh	r2, [r3, #10]
 800effc:	89fb      	ldrh	r3, [r7, #14]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	b29a      	uxth	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	891a      	ldrh	r2, [r3, #8]
 800f00a:	89fb      	ldrh	r3, [r7, #14]
 800f00c:	1ad3      	subs	r3, r2, r3
 800f00e:	b29a      	uxth	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop
 800f020:	0801f8cc 	.word	0x0801f8cc
 800f024:	0801fa30 	.word	0x0801fa30
 800f028:	0801f92c 	.word	0x0801f92c
 800f02c:	0801fa3c 	.word	0x0801fa3c

0800f030 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	460b      	mov	r3, r1
 800f03a:	807b      	strh	r3, [r7, #2]
 800f03c:	4613      	mov	r3, r2
 800f03e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f040:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f044:	2b00      	cmp	r3, #0
 800f046:	da08      	bge.n	800f05a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f048:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f04c:	425b      	negs	r3, r3
 800f04e:	4619      	mov	r1, r3
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff ff9b 	bl	800ef8c <pbuf_remove_header>
 800f056:	4603      	mov	r3, r0
 800f058:	e007      	b.n	800f06a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f05a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f05e:	787a      	ldrb	r2, [r7, #1]
 800f060:	4619      	mov	r1, r3
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f7ff ff1a 	bl	800ee9c <pbuf_add_header_impl>
 800f068:	4603      	mov	r3, r0
  }
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}

0800f072 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f072:	b580      	push	{r7, lr}
 800f074:	b082      	sub	sp, #8
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
 800f07a:	460b      	mov	r3, r1
 800f07c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f07e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f082:	2201      	movs	r2, #1
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7ff ffd2 	bl	800f030 <pbuf_header_impl>
 800f08c:	4603      	mov	r3, r0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3708      	adds	r7, #8
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
	...

0800f098 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d10b      	bne.n	800f0be <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d106      	bne.n	800f0ba <pbuf_free+0x22>
 800f0ac:	4b3b      	ldr	r3, [pc, #236]	; (800f19c <pbuf_free+0x104>)
 800f0ae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f0b2:	493b      	ldr	r1, [pc, #236]	; (800f1a0 <pbuf_free+0x108>)
 800f0b4:	483b      	ldr	r0, [pc, #236]	; (800f1a4 <pbuf_free+0x10c>)
 800f0b6:	f00c feb7 	bl	801be28 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	e069      	b.n	800f192 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f0c2:	e062      	b.n	800f18a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f0c4:	f00b ffe6 	bl	801b094 <sys_arch_protect>
 800f0c8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	7b9b      	ldrb	r3, [r3, #14]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d106      	bne.n	800f0e0 <pbuf_free+0x48>
 800f0d2:	4b32      	ldr	r3, [pc, #200]	; (800f19c <pbuf_free+0x104>)
 800f0d4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f0d8:	4933      	ldr	r1, [pc, #204]	; (800f1a8 <pbuf_free+0x110>)
 800f0da:	4832      	ldr	r0, [pc, #200]	; (800f1a4 <pbuf_free+0x10c>)
 800f0dc:	f00c fea4 	bl	801be28 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7b9b      	ldrb	r3, [r3, #14]
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	b2da      	uxtb	r2, r3
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	739a      	strb	r2, [r3, #14]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	7b9b      	ldrb	r3, [r3, #14]
 800f0f0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f0f2:	69b8      	ldr	r0, [r7, #24]
 800f0f4:	f00b ffdc 	bl	801b0b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f0f8:	7dfb      	ldrb	r3, [r7, #23]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d143      	bne.n	800f186 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	7b1b      	ldrb	r3, [r3, #12]
 800f108:	f003 030f 	and.w	r3, r3, #15
 800f10c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	7b5b      	ldrb	r3, [r3, #13]
 800f112:	f003 0302 	and.w	r3, r3, #2
 800f116:	2b00      	cmp	r3, #0
 800f118:	d011      	beq.n	800f13e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d106      	bne.n	800f134 <pbuf_free+0x9c>
 800f126:	4b1d      	ldr	r3, [pc, #116]	; (800f19c <pbuf_free+0x104>)
 800f128:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f12c:	491f      	ldr	r1, [pc, #124]	; (800f1ac <pbuf_free+0x114>)
 800f12e:	481d      	ldr	r0, [pc, #116]	; (800f1a4 <pbuf_free+0x10c>)
 800f130:	f00c fe7a 	bl	801be28 <iprintf>
        pc->custom_free_function(p);
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	691b      	ldr	r3, [r3, #16]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	4798      	blx	r3
 800f13c:	e01d      	b.n	800f17a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
 800f140:	2b02      	cmp	r3, #2
 800f142:	d104      	bne.n	800f14e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f144:	6879      	ldr	r1, [r7, #4]
 800f146:	200c      	movs	r0, #12
 800f148:	f7ff f904 	bl	800e354 <memp_free>
 800f14c:	e015      	b.n	800f17a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d104      	bne.n	800f15e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f154:	6879      	ldr	r1, [r7, #4]
 800f156:	200b      	movs	r0, #11
 800f158:	f7ff f8fc 	bl	800e354 <memp_free>
 800f15c:	e00d      	b.n	800f17a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d103      	bne.n	800f16c <pbuf_free+0xd4>
          mem_free(p);
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f7fe fd87 	bl	800dc78 <mem_free>
 800f16a:	e006      	b.n	800f17a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f16c:	4b0b      	ldr	r3, [pc, #44]	; (800f19c <pbuf_free+0x104>)
 800f16e:	f240 320f 	movw	r2, #783	; 0x30f
 800f172:	490f      	ldr	r1, [pc, #60]	; (800f1b0 <pbuf_free+0x118>)
 800f174:	480b      	ldr	r0, [pc, #44]	; (800f1a4 <pbuf_free+0x10c>)
 800f176:	f00c fe57 	bl	801be28 <iprintf>
        }
      }
      count++;
 800f17a:	7ffb      	ldrb	r3, [r7, #31]
 800f17c:	3301      	adds	r3, #1
 800f17e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	607b      	str	r3, [r7, #4]
 800f184:	e001      	b.n	800f18a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f186:	2300      	movs	r3, #0
 800f188:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d199      	bne.n	800f0c4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f190:	7ffb      	ldrb	r3, [r7, #31]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3720      	adds	r7, #32
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	0801f8cc 	.word	0x0801f8cc
 800f1a0:	0801fa30 	.word	0x0801fa30
 800f1a4:	0801f92c 	.word	0x0801f92c
 800f1a8:	0801fa5c 	.word	0x0801fa5c
 800f1ac:	0801fa74 	.word	0x0801fa74
 800f1b0:	0801fa98 	.word	0x0801fa98

0800f1b4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f1c0:	e005      	b.n	800f1ce <pbuf_clen+0x1a>
    ++len;
 800f1c2:	89fb      	ldrh	r3, [r7, #14]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1f6      	bne.n	800f1c2 <pbuf_clen+0xe>
  }
  return len;
 800f1d4:	89fb      	ldrh	r3, [r7, #14]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
	...

0800f1e4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d016      	beq.n	800f220 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f1f2:	f00b ff4f 	bl	801b094 <sys_arch_protect>
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7b9b      	ldrb	r3, [r3, #14]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	739a      	strb	r2, [r3, #14]
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f00b ff53 	bl	801b0b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7b9b      	ldrb	r3, [r3, #14]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d106      	bne.n	800f220 <pbuf_ref+0x3c>
 800f212:	4b05      	ldr	r3, [pc, #20]	; (800f228 <pbuf_ref+0x44>)
 800f214:	f240 3242 	movw	r2, #834	; 0x342
 800f218:	4904      	ldr	r1, [pc, #16]	; (800f22c <pbuf_ref+0x48>)
 800f21a:	4805      	ldr	r0, [pc, #20]	; (800f230 <pbuf_ref+0x4c>)
 800f21c:	f00c fe04 	bl	801be28 <iprintf>
  }
}
 800f220:	bf00      	nop
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	0801f8cc 	.word	0x0801f8cc
 800f22c:	0801faac 	.word	0x0801faac
 800f230:	0801f92c 	.word	0x0801f92c

0800f234 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d002      	beq.n	800f24a <pbuf_cat+0x16>
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d107      	bne.n	800f25a <pbuf_cat+0x26>
 800f24a:	4b20      	ldr	r3, [pc, #128]	; (800f2cc <pbuf_cat+0x98>)
 800f24c:	f240 3259 	movw	r2, #857	; 0x359
 800f250:	491f      	ldr	r1, [pc, #124]	; (800f2d0 <pbuf_cat+0x9c>)
 800f252:	4820      	ldr	r0, [pc, #128]	; (800f2d4 <pbuf_cat+0xa0>)
 800f254:	f00c fde8 	bl	801be28 <iprintf>
 800f258:	e034      	b.n	800f2c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	e00a      	b.n	800f276 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	891a      	ldrh	r2, [r3, #8]
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	891b      	ldrh	r3, [r3, #8]
 800f268:	4413      	add	r3, r2
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	60fb      	str	r3, [r7, #12]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1f0      	bne.n	800f260 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	891a      	ldrh	r2, [r3, #8]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	895b      	ldrh	r3, [r3, #10]
 800f286:	429a      	cmp	r2, r3
 800f288:	d006      	beq.n	800f298 <pbuf_cat+0x64>
 800f28a:	4b10      	ldr	r3, [pc, #64]	; (800f2cc <pbuf_cat+0x98>)
 800f28c:	f240 3262 	movw	r2, #866	; 0x362
 800f290:	4911      	ldr	r1, [pc, #68]	; (800f2d8 <pbuf_cat+0xa4>)
 800f292:	4810      	ldr	r0, [pc, #64]	; (800f2d4 <pbuf_cat+0xa0>)
 800f294:	f00c fdc8 	bl	801be28 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d006      	beq.n	800f2ae <pbuf_cat+0x7a>
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <pbuf_cat+0x98>)
 800f2a2:	f240 3263 	movw	r2, #867	; 0x363
 800f2a6:	490d      	ldr	r1, [pc, #52]	; (800f2dc <pbuf_cat+0xa8>)
 800f2a8:	480a      	ldr	r0, [pc, #40]	; (800f2d4 <pbuf_cat+0xa0>)
 800f2aa:	f00c fdbd 	bl	801be28 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	891a      	ldrh	r2, [r3, #8]
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	891b      	ldrh	r3, [r3, #8]
 800f2b6:	4413      	add	r3, r2
 800f2b8:	b29a      	uxth	r2, r3
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f2c4:	3710      	adds	r7, #16
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0801f8cc 	.word	0x0801f8cc
 800f2d0:	0801fac0 	.word	0x0801fac0
 800f2d4:	0801f92c 	.word	0x0801f92c
 800f2d8:	0801faf8 	.word	0x0801faf8
 800f2dc:	0801fb28 	.word	0x0801fb28

0800f2e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff ffa1 	bl	800f234 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f2f2:	6838      	ldr	r0, [r7, #0]
 800f2f4:	f7ff ff76 	bl	800f1e4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f30a:	2300      	movs	r3, #0
 800f30c:	617b      	str	r3, [r7, #20]
 800f30e:	2300      	movs	r3, #0
 800f310:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d008      	beq.n	800f32a <pbuf_copy+0x2a>
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <pbuf_copy+0x2a>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	891a      	ldrh	r2, [r3, #8]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	891b      	ldrh	r3, [r3, #8]
 800f326:	429a      	cmp	r2, r3
 800f328:	d209      	bcs.n	800f33e <pbuf_copy+0x3e>
 800f32a:	4b57      	ldr	r3, [pc, #348]	; (800f488 <pbuf_copy+0x188>)
 800f32c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f330:	4956      	ldr	r1, [pc, #344]	; (800f48c <pbuf_copy+0x18c>)
 800f332:	4857      	ldr	r0, [pc, #348]	; (800f490 <pbuf_copy+0x190>)
 800f334:	f00c fd78 	bl	801be28 <iprintf>
 800f338:	f06f 030f 	mvn.w	r3, #15
 800f33c:	e09f      	b.n	800f47e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	895b      	ldrh	r3, [r3, #10]
 800f342:	461a      	mov	r2, r3
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	1ad2      	subs	r2, r2, r3
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	895b      	ldrh	r3, [r3, #10]
 800f34c:	4619      	mov	r1, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	1acb      	subs	r3, r1, r3
 800f352:	429a      	cmp	r2, r3
 800f354:	d306      	bcc.n	800f364 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	895b      	ldrh	r3, [r3, #10]
 800f35a:	461a      	mov	r2, r3
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	1ad3      	subs	r3, r2, r3
 800f360:	60fb      	str	r3, [r7, #12]
 800f362:	e005      	b.n	800f370 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	895b      	ldrh	r3, [r3, #10]
 800f368:	461a      	mov	r2, r3
 800f36a:	697b      	ldr	r3, [r7, #20]
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	685a      	ldr	r2, [r3, #4]
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	18d0      	adds	r0, r2, r3
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	685a      	ldr	r2, [r3, #4]
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	4413      	add	r3, r2
 800f380:	68fa      	ldr	r2, [r7, #12]
 800f382:	4619      	mov	r1, r3
 800f384:	f00c ff77 	bl	801c276 <memcpy>
    offset_to += len;
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	4413      	add	r3, r2
 800f38e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f390:	693a      	ldr	r2, [r7, #16]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4413      	add	r3, r2
 800f396:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	895b      	ldrh	r3, [r3, #10]
 800f39c:	461a      	mov	r2, r3
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d906      	bls.n	800f3b2 <pbuf_copy+0xb2>
 800f3a4:	4b38      	ldr	r3, [pc, #224]	; (800f488 <pbuf_copy+0x188>)
 800f3a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f3aa:	493a      	ldr	r1, [pc, #232]	; (800f494 <pbuf_copy+0x194>)
 800f3ac:	4838      	ldr	r0, [pc, #224]	; (800f490 <pbuf_copy+0x190>)
 800f3ae:	f00c fd3b 	bl	801be28 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	895b      	ldrh	r3, [r3, #10]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d906      	bls.n	800f3cc <pbuf_copy+0xcc>
 800f3be:	4b32      	ldr	r3, [pc, #200]	; (800f488 <pbuf_copy+0x188>)
 800f3c0:	f240 32da 	movw	r2, #986	; 0x3da
 800f3c4:	4934      	ldr	r1, [pc, #208]	; (800f498 <pbuf_copy+0x198>)
 800f3c6:	4832      	ldr	r0, [pc, #200]	; (800f490 <pbuf_copy+0x190>)
 800f3c8:	f00c fd2e 	bl	801be28 <iprintf>
    if (offset_from >= p_from->len) {
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	895b      	ldrh	r3, [r3, #10]
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d304      	bcc.n	800f3e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f3d8:	2300      	movs	r3, #0
 800f3da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	895b      	ldrh	r3, [r3, #10]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d114      	bne.n	800f418 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d10c      	bne.n	800f418 <pbuf_copy+0x118>
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d009      	beq.n	800f418 <pbuf_copy+0x118>
 800f404:	4b20      	ldr	r3, [pc, #128]	; (800f488 <pbuf_copy+0x188>)
 800f406:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f40a:	4924      	ldr	r1, [pc, #144]	; (800f49c <pbuf_copy+0x19c>)
 800f40c:	4820      	ldr	r0, [pc, #128]	; (800f490 <pbuf_copy+0x190>)
 800f40e:	f00c fd0b 	bl	801be28 <iprintf>
 800f412:	f06f 030f 	mvn.w	r3, #15
 800f416:	e032      	b.n	800f47e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d013      	beq.n	800f446 <pbuf_copy+0x146>
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	895a      	ldrh	r2, [r3, #10]
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	891b      	ldrh	r3, [r3, #8]
 800f426:	429a      	cmp	r2, r3
 800f428:	d10d      	bne.n	800f446 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d009      	beq.n	800f446 <pbuf_copy+0x146>
 800f432:	4b15      	ldr	r3, [pc, #84]	; (800f488 <pbuf_copy+0x188>)
 800f434:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f438:	4919      	ldr	r1, [pc, #100]	; (800f4a0 <pbuf_copy+0x1a0>)
 800f43a:	4815      	ldr	r0, [pc, #84]	; (800f490 <pbuf_copy+0x190>)
 800f43c:	f00c fcf4 	bl	801be28 <iprintf>
 800f440:	f06f 0305 	mvn.w	r3, #5
 800f444:	e01b      	b.n	800f47e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d013      	beq.n	800f474 <pbuf_copy+0x174>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	895a      	ldrh	r2, [r3, #10]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	891b      	ldrh	r3, [r3, #8]
 800f454:	429a      	cmp	r2, r3
 800f456:	d10d      	bne.n	800f474 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d009      	beq.n	800f474 <pbuf_copy+0x174>
 800f460:	4b09      	ldr	r3, [pc, #36]	; (800f488 <pbuf_copy+0x188>)
 800f462:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f466:	490e      	ldr	r1, [pc, #56]	; (800f4a0 <pbuf_copy+0x1a0>)
 800f468:	4809      	ldr	r0, [pc, #36]	; (800f490 <pbuf_copy+0x190>)
 800f46a:	f00c fcdd 	bl	801be28 <iprintf>
 800f46e:	f06f 0305 	mvn.w	r3, #5
 800f472:	e004      	b.n	800f47e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f47f af61 	bne.w	800f33e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f47c:	2300      	movs	r3, #0
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3718      	adds	r7, #24
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
 800f486:	bf00      	nop
 800f488:	0801f8cc 	.word	0x0801f8cc
 800f48c:	0801fb74 	.word	0x0801fb74
 800f490:	0801f92c 	.word	0x0801f92c
 800f494:	0801fba4 	.word	0x0801fba4
 800f498:	0801fbbc 	.word	0x0801fbbc
 800f49c:	0801fbd8 	.word	0x0801fbd8
 800f4a0:	0801fbe8 	.word	0x0801fbe8

0800f4a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	80fb      	strh	r3, [r7, #6]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d108      	bne.n	800f4da <pbuf_copy_partial+0x36>
 800f4c8:	4b2b      	ldr	r3, [pc, #172]	; (800f578 <pbuf_copy_partial+0xd4>)
 800f4ca:	f240 420a 	movw	r2, #1034	; 0x40a
 800f4ce:	492b      	ldr	r1, [pc, #172]	; (800f57c <pbuf_copy_partial+0xd8>)
 800f4d0:	482b      	ldr	r0, [pc, #172]	; (800f580 <pbuf_copy_partial+0xdc>)
 800f4d2:	f00c fca9 	bl	801be28 <iprintf>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e04a      	b.n	800f570 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d108      	bne.n	800f4f2 <pbuf_copy_partial+0x4e>
 800f4e0:	4b25      	ldr	r3, [pc, #148]	; (800f578 <pbuf_copy_partial+0xd4>)
 800f4e2:	f240 420b 	movw	r2, #1035	; 0x40b
 800f4e6:	4927      	ldr	r1, [pc, #156]	; (800f584 <pbuf_copy_partial+0xe0>)
 800f4e8:	4825      	ldr	r0, [pc, #148]	; (800f580 <pbuf_copy_partial+0xdc>)
 800f4ea:	f00c fc9d 	bl	801be28 <iprintf>
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e03e      	b.n	800f570 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	61fb      	str	r3, [r7, #28]
 800f4f6:	e034      	b.n	800f562 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f4f8:	88bb      	ldrh	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00a      	beq.n	800f514 <pbuf_copy_partial+0x70>
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	895b      	ldrh	r3, [r3, #10]
 800f502:	88ba      	ldrh	r2, [r7, #4]
 800f504:	429a      	cmp	r2, r3
 800f506:	d305      	bcc.n	800f514 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	895b      	ldrh	r3, [r3, #10]
 800f50c:	88ba      	ldrh	r2, [r7, #4]
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	80bb      	strh	r3, [r7, #4]
 800f512:	e023      	b.n	800f55c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	895a      	ldrh	r2, [r3, #10]
 800f518:	88bb      	ldrh	r3, [r7, #4]
 800f51a:	1ad3      	subs	r3, r2, r3
 800f51c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f51e:	8b3a      	ldrh	r2, [r7, #24]
 800f520:	88fb      	ldrh	r3, [r7, #6]
 800f522:	429a      	cmp	r2, r3
 800f524:	d901      	bls.n	800f52a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f526:	88fb      	ldrh	r3, [r7, #6]
 800f528:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f52a:	8b7b      	ldrh	r3, [r7, #26]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	18d0      	adds	r0, r2, r3
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	685a      	ldr	r2, [r3, #4]
 800f534:	88bb      	ldrh	r3, [r7, #4]
 800f536:	4413      	add	r3, r2
 800f538:	8b3a      	ldrh	r2, [r7, #24]
 800f53a:	4619      	mov	r1, r3
 800f53c:	f00c fe9b 	bl	801c276 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f540:	8afa      	ldrh	r2, [r7, #22]
 800f542:	8b3b      	ldrh	r3, [r7, #24]
 800f544:	4413      	add	r3, r2
 800f546:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f548:	8b7a      	ldrh	r2, [r7, #26]
 800f54a:	8b3b      	ldrh	r3, [r7, #24]
 800f54c:	4413      	add	r3, r2
 800f54e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f550:	88fa      	ldrh	r2, [r7, #6]
 800f552:	8b3b      	ldrh	r3, [r7, #24]
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f558:	2300      	movs	r3, #0
 800f55a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	61fb      	str	r3, [r7, #28]
 800f562:	88fb      	ldrh	r3, [r7, #6]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d002      	beq.n	800f56e <pbuf_copy_partial+0xca>
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d1c4      	bne.n	800f4f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f56e:	8afb      	ldrh	r3, [r7, #22]
}
 800f570:	4618      	mov	r0, r3
 800f572:	3720      	adds	r7, #32
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	0801f8cc 	.word	0x0801f8cc
 800f57c:	0801fc14 	.word	0x0801fc14
 800f580:	0801f92c 	.word	0x0801f92c
 800f584:	0801fc34 	.word	0x0801fc34

0800f588 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	460b      	mov	r3, r1
 800f592:	607a      	str	r2, [r7, #4]
 800f594:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f596:	897b      	ldrh	r3, [r7, #10]
 800f598:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f59e:	e007      	b.n	800f5b0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	895b      	ldrh	r3, [r3, #10]
 800f5a4:	8afa      	ldrh	r2, [r7, #22]
 800f5a6:	1ad3      	subs	r3, r2, r3
 800f5a8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d004      	beq.n	800f5c0 <pbuf_skip_const+0x38>
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	895b      	ldrh	r3, [r3, #10]
 800f5ba:	8afa      	ldrh	r2, [r7, #22]
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d2ef      	bcs.n	800f5a0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d002      	beq.n	800f5cc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	8afa      	ldrh	r2, [r7, #22]
 800f5ca:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f5cc:	693b      	ldr	r3, [r7, #16]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	371c      	adds	r7, #28
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b086      	sub	sp, #24
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	607a      	str	r2, [r7, #4]
 800f5e6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f5e8:	897b      	ldrh	r3, [r7, #10]
 800f5ea:	687a      	ldr	r2, [r7, #4]
 800f5ec:	4619      	mov	r1, r3
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	f7ff ffca 	bl	800f588 <pbuf_skip_const>
 800f5f4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f5f6:	697b      	ldr	r3, [r7, #20]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b088      	sub	sp, #32
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	4613      	mov	r3, r2
 800f60c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f60e:	88fb      	ldrh	r3, [r7, #6]
 800f610:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f612:	2300      	movs	r3, #0
 800f614:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d109      	bne.n	800f630 <pbuf_take+0x30>
 800f61c:	4b3a      	ldr	r3, [pc, #232]	; (800f708 <pbuf_take+0x108>)
 800f61e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f622:	493a      	ldr	r1, [pc, #232]	; (800f70c <pbuf_take+0x10c>)
 800f624:	483a      	ldr	r0, [pc, #232]	; (800f710 <pbuf_take+0x110>)
 800f626:	f00c fbff 	bl	801be28 <iprintf>
 800f62a:	f06f 030f 	mvn.w	r3, #15
 800f62e:	e067      	b.n	800f700 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d109      	bne.n	800f64a <pbuf_take+0x4a>
 800f636:	4b34      	ldr	r3, [pc, #208]	; (800f708 <pbuf_take+0x108>)
 800f638:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f63c:	4935      	ldr	r1, [pc, #212]	; (800f714 <pbuf_take+0x114>)
 800f63e:	4834      	ldr	r0, [pc, #208]	; (800f710 <pbuf_take+0x110>)
 800f640:	f00c fbf2 	bl	801be28 <iprintf>
 800f644:	f06f 030f 	mvn.w	r3, #15
 800f648:	e05a      	b.n	800f700 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	891b      	ldrh	r3, [r3, #8]
 800f64e:	88fa      	ldrh	r2, [r7, #6]
 800f650:	429a      	cmp	r2, r3
 800f652:	d909      	bls.n	800f668 <pbuf_take+0x68>
 800f654:	4b2c      	ldr	r3, [pc, #176]	; (800f708 <pbuf_take+0x108>)
 800f656:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f65a:	492f      	ldr	r1, [pc, #188]	; (800f718 <pbuf_take+0x118>)
 800f65c:	482c      	ldr	r0, [pc, #176]	; (800f710 <pbuf_take+0x110>)
 800f65e:	f00c fbe3 	bl	801be28 <iprintf>
 800f662:	f04f 33ff 	mov.w	r3, #4294967295
 800f666:	e04b      	b.n	800f700 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <pbuf_take+0x7e>
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d004      	beq.n	800f67e <pbuf_take+0x7e>
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	891b      	ldrh	r3, [r3, #8]
 800f678:	88fa      	ldrh	r2, [r7, #6]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d902      	bls.n	800f684 <pbuf_take+0x84>
    return ERR_ARG;
 800f67e:	f06f 030f 	mvn.w	r3, #15
 800f682:	e03d      	b.n	800f700 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	61fb      	str	r3, [r7, #28]
 800f688:	e028      	b.n	800f6dc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d106      	bne.n	800f69e <pbuf_take+0x9e>
 800f690:	4b1d      	ldr	r3, [pc, #116]	; (800f708 <pbuf_take+0x108>)
 800f692:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f696:	4921      	ldr	r1, [pc, #132]	; (800f71c <pbuf_take+0x11c>)
 800f698:	481d      	ldr	r0, [pc, #116]	; (800f710 <pbuf_take+0x110>)
 800f69a:	f00c fbc5 	bl	801be28 <iprintf>
    buf_copy_len = total_copy_len;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	895b      	ldrh	r3, [r3, #10]
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d902      	bls.n	800f6b4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	895b      	ldrh	r3, [r3, #10]
 800f6b2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f6b4:	69fb      	ldr	r3, [r7, #28]
 800f6b6:	6858      	ldr	r0, [r3, #4]
 800f6b8:	68ba      	ldr	r2, [r7, #8]
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	4413      	add	r3, r2
 800f6be:	69ba      	ldr	r2, [r7, #24]
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	f00c fdd8 	bl	801c276 <memcpy>
    total_copy_len -= buf_copy_len;
 800f6c6:	697a      	ldr	r2, [r7, #20]
 800f6c8:	69bb      	ldr	r3, [r7, #24]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	61fb      	str	r3, [r7, #28]
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d1d3      	bne.n	800f68a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d103      	bne.n	800f6f0 <pbuf_take+0xf0>
 800f6e8:	88fb      	ldrh	r3, [r7, #6]
 800f6ea:	693a      	ldr	r2, [r7, #16]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d006      	beq.n	800f6fe <pbuf_take+0xfe>
 800f6f0:	4b05      	ldr	r3, [pc, #20]	; (800f708 <pbuf_take+0x108>)
 800f6f2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f6f6:	490a      	ldr	r1, [pc, #40]	; (800f720 <pbuf_take+0x120>)
 800f6f8:	4805      	ldr	r0, [pc, #20]	; (800f710 <pbuf_take+0x110>)
 800f6fa:	f00c fb95 	bl	801be28 <iprintf>
  return ERR_OK;
 800f6fe:	2300      	movs	r3, #0
}
 800f700:	4618      	mov	r0, r3
 800f702:	3720      	adds	r7, #32
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	0801f8cc 	.word	0x0801f8cc
 800f70c:	0801fca4 	.word	0x0801fca4
 800f710:	0801f92c 	.word	0x0801f92c
 800f714:	0801fcbc 	.word	0x0801fcbc
 800f718:	0801fcd8 	.word	0x0801fcd8
 800f71c:	0801fcf8 	.word	0x0801fcf8
 800f720:	0801fd10 	.word	0x0801fd10

0800f724 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b088      	sub	sp, #32
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	4611      	mov	r1, r2
 800f730:	461a      	mov	r2, r3
 800f732:	460b      	mov	r3, r1
 800f734:	80fb      	strh	r3, [r7, #6]
 800f736:	4613      	mov	r3, r2
 800f738:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800f73a:	f107 0210 	add.w	r2, r7, #16
 800f73e:	88bb      	ldrh	r3, [r7, #4]
 800f740:	4619      	mov	r1, r3
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f7ff ff49 	bl	800f5da <pbuf_skip>
 800f748:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d047      	beq.n	800f7e0 <pbuf_take_at+0xbc>
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	891b      	ldrh	r3, [r3, #8]
 800f754:	461a      	mov	r2, r3
 800f756:	8a3b      	ldrh	r3, [r7, #16]
 800f758:	4619      	mov	r1, r3
 800f75a:	88fb      	ldrh	r3, [r7, #6]
 800f75c:	440b      	add	r3, r1
 800f75e:	429a      	cmp	r2, r3
 800f760:	db3e      	blt.n	800f7e0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800f762:	88fb      	ldrh	r3, [r7, #6]
 800f764:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	895a      	ldrh	r2, [r3, #10]
 800f76e:	8a3b      	ldrh	r3, [r7, #16]
 800f770:	429a      	cmp	r2, r3
 800f772:	d806      	bhi.n	800f782 <pbuf_take_at+0x5e>
 800f774:	4b1d      	ldr	r3, [pc, #116]	; (800f7ec <pbuf_take_at+0xc8>)
 800f776:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f77a:	491d      	ldr	r1, [pc, #116]	; (800f7f0 <pbuf_take_at+0xcc>)
 800f77c:	481d      	ldr	r0, [pc, #116]	; (800f7f4 <pbuf_take_at+0xd0>)
 800f77e:	f00c fb53 	bl	801be28 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	895b      	ldrh	r3, [r3, #10]
 800f786:	461a      	mov	r2, r3
 800f788:	8a3b      	ldrh	r3, [r7, #16]
 800f78a:	1ad2      	subs	r2, r2, r3
 800f78c:	88fb      	ldrh	r3, [r7, #6]
 800f78e:	429a      	cmp	r2, r3
 800f790:	da05      	bge.n	800f79e <pbuf_take_at+0x7a>
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	895a      	ldrh	r2, [r3, #10]
 800f796:	8a3b      	ldrh	r3, [r7, #16]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	e000      	b.n	800f7a0 <pbuf_take_at+0x7c>
 800f79e:	88fb      	ldrh	r3, [r7, #6]
 800f7a0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	8a3a      	ldrh	r2, [r7, #16]
 800f7a8:	4413      	add	r3, r2
 800f7aa:	8a7a      	ldrh	r2, [r7, #18]
 800f7ac:	68b9      	ldr	r1, [r7, #8]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f00c fd61 	bl	801c276 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f7b4:	8b7a      	ldrh	r2, [r7, #26]
 800f7b6:	8a7b      	ldrh	r3, [r7, #18]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800f7bc:	8a7b      	ldrh	r3, [r7, #18]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	4413      	add	r3, r2
 800f7c2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800f7c4:	8b7b      	ldrh	r3, [r7, #26]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d008      	beq.n	800f7dc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f7ca:	69fb      	ldr	r3, [r7, #28]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	8b7a      	ldrh	r2, [r7, #26]
 800f7d0:	6979      	ldr	r1, [r7, #20]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7ff ff14 	bl	800f600 <pbuf_take>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	e003      	b.n	800f7e4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	e001      	b.n	800f7e4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800f7e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3720      	adds	r7, #32
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}
 800f7ec:	0801f8cc 	.word	0x0801f8cc
 800f7f0:	0801fd28 	.word	0x0801fd28
 800f7f4:	0801f92c 	.word	0x0801f92c

0800f7f8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	4603      	mov	r3, r0
 800f800:	603a      	str	r2, [r7, #0]
 800f802:	71fb      	strb	r3, [r7, #7]
 800f804:	460b      	mov	r3, r1
 800f806:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	8919      	ldrh	r1, [r3, #8]
 800f80c:	88ba      	ldrh	r2, [r7, #4]
 800f80e:	79fb      	ldrb	r3, [r7, #7]
 800f810:	4618      	mov	r0, r3
 800f812:	f7ff f959 	bl	800eac8 <pbuf_alloc>
 800f816:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <pbuf_clone+0x2a>
    return NULL;
 800f81e:	2300      	movs	r3, #0
 800f820:	e011      	b.n	800f846 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f7ff fd6b 	bl	800f300 <pbuf_copy>
 800f82a:	4603      	mov	r3, r0
 800f82c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f82e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d006      	beq.n	800f844 <pbuf_clone+0x4c>
 800f836:	4b06      	ldr	r3, [pc, #24]	; (800f850 <pbuf_clone+0x58>)
 800f838:	f240 5224 	movw	r2, #1316	; 0x524
 800f83c:	4905      	ldr	r1, [pc, #20]	; (800f854 <pbuf_clone+0x5c>)
 800f83e:	4806      	ldr	r0, [pc, #24]	; (800f858 <pbuf_clone+0x60>)
 800f840:	f00c faf2 	bl	801be28 <iprintf>
  return q;
 800f844:	68fb      	ldr	r3, [r7, #12]
}
 800f846:	4618      	mov	r0, r3
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	0801f8cc 	.word	0x0801f8cc
 800f854:	0801fd40 	.word	0x0801fd40
 800f858:	0801f92c 	.word	0x0801f92c

0800f85c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	460b      	mov	r3, r1
 800f866:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f868:	887b      	ldrh	r3, [r7, #2]
 800f86a:	4619      	mov	r1, r3
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f80c 	bl	800f88a <pbuf_try_get_at>
 800f872:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2b00      	cmp	r3, #0
 800f878:	db02      	blt.n	800f880 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	e000      	b.n	800f882 <pbuf_get_at+0x26>
  }
  return 0;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f896:	f107 020a 	add.w	r2, r7, #10
 800f89a:	887b      	ldrh	r3, [r7, #2]
 800f89c:	4619      	mov	r1, r3
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff fe72 	bl	800f588 <pbuf_skip_const>
 800f8a4:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00a      	beq.n	800f8c2 <pbuf_try_get_at+0x38>
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	895a      	ldrh	r2, [r3, #10]
 800f8b0:	897b      	ldrh	r3, [r7, #10]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d905      	bls.n	800f8c2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	897a      	ldrh	r2, [r7, #10]
 800f8bc:	4413      	add	r3, r2
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	e001      	b.n	800f8c6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800f8c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3710      	adds	r7, #16
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b084      	sub	sp, #16
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	807b      	strh	r3, [r7, #2]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f8de:	f107 020a 	add.w	r2, r7, #10
 800f8e2:	887b      	ldrh	r3, [r7, #2]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7ff fe77 	bl	800f5da <pbuf_skip>
 800f8ec:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00a      	beq.n	800f90a <pbuf_put_at+0x3c>
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	895a      	ldrh	r2, [r3, #10]
 800f8f8:	897b      	ldrh	r3, [r7, #10]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d905      	bls.n	800f90a <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	685b      	ldr	r3, [r3, #4]
 800f902:	897a      	ldrh	r2, [r7, #10]
 800f904:	4413      	add	r3, r2
 800f906:	787a      	ldrb	r2, [r7, #1]
 800f908:	701a      	strb	r2, [r3, #0]
  }
}
 800f90a:	bf00      	nop
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f918:	f00b fca4 	bl	801b264 <rand>
 800f91c:	4603      	mov	r3, r0
 800f91e:	b29b      	uxth	r3, r3
 800f920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f924:	b29b      	uxth	r3, r3
 800f926:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f92a:	b29a      	uxth	r2, r3
 800f92c:	4b01      	ldr	r3, [pc, #4]	; (800f934 <tcp_init+0x20>)
 800f92e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f930:	bf00      	nop
 800f932:	bd80      	pop	{r7, pc}
 800f934:	200000b8 	.word	0x200000b8

0800f938 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	7d1b      	ldrb	r3, [r3, #20]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d105      	bne.n	800f954 <tcp_free+0x1c>
 800f948:	4b06      	ldr	r3, [pc, #24]	; (800f964 <tcp_free+0x2c>)
 800f94a:	22d4      	movs	r2, #212	; 0xd4
 800f94c:	4906      	ldr	r1, [pc, #24]	; (800f968 <tcp_free+0x30>)
 800f94e:	4807      	ldr	r0, [pc, #28]	; (800f96c <tcp_free+0x34>)
 800f950:	f00c fa6a 	bl	801be28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f954:	6879      	ldr	r1, [r7, #4]
 800f956:	2001      	movs	r0, #1
 800f958:	f7fe fcfc 	bl	800e354 <memp_free>
}
 800f95c:	bf00      	nop
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	0801fdcc 	.word	0x0801fdcc
 800f968:	0801fdfc 	.word	0x0801fdfc
 800f96c:	0801fe10 	.word	0x0801fe10

0800f970 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	7d1b      	ldrb	r3, [r3, #20]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	d105      	bne.n	800f98c <tcp_free_listen+0x1c>
 800f980:	4b06      	ldr	r3, [pc, #24]	; (800f99c <tcp_free_listen+0x2c>)
 800f982:	22df      	movs	r2, #223	; 0xdf
 800f984:	4906      	ldr	r1, [pc, #24]	; (800f9a0 <tcp_free_listen+0x30>)
 800f986:	4807      	ldr	r0, [pc, #28]	; (800f9a4 <tcp_free_listen+0x34>)
 800f988:	f00c fa4e 	bl	801be28 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f98c:	6879      	ldr	r1, [r7, #4]
 800f98e:	2002      	movs	r0, #2
 800f990:	f7fe fce0 	bl	800e354 <memp_free>
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	0801fdcc 	.word	0x0801fdcc
 800f9a0:	0801fe38 	.word	0x0801fe38
 800f9a4:	0801fe10 	.word	0x0801fe10

0800f9a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f9ac:	f001 f802 	bl	80109b4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f9b0:	4b07      	ldr	r3, [pc, #28]	; (800f9d0 <tcp_tmr+0x28>)
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	4b05      	ldr	r3, [pc, #20]	; (800f9d0 <tcp_tmr+0x28>)
 800f9ba:	701a      	strb	r2, [r3, #0]
 800f9bc:	4b04      	ldr	r3, [pc, #16]	; (800f9d0 <tcp_tmr+0x28>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f003 0301 	and.w	r3, r3, #1
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d001      	beq.n	800f9cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f9c8:	f000 fcb4 	bl	8010334 <tcp_slowtmr>
  }
}
 800f9cc:	bf00      	nop
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	20013ced 	.word	0x20013ced

0800f9d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
 800f9dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d105      	bne.n	800f9f0 <tcp_remove_listener+0x1c>
 800f9e4:	4b0d      	ldr	r3, [pc, #52]	; (800fa1c <tcp_remove_listener+0x48>)
 800f9e6:	22ff      	movs	r2, #255	; 0xff
 800f9e8:	490d      	ldr	r1, [pc, #52]	; (800fa20 <tcp_remove_listener+0x4c>)
 800f9ea:	480e      	ldr	r0, [pc, #56]	; (800fa24 <tcp_remove_listener+0x50>)
 800f9ec:	f00c fa1c 	bl	801be28 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	60fb      	str	r3, [r7, #12]
 800f9f4:	e00a      	b.n	800fa0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d102      	bne.n	800fa06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	68db      	ldr	r3, [r3, #12]
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1f1      	bne.n	800f9f6 <tcp_remove_listener+0x22>
    }
  }
}
 800fa12:	bf00      	nop
 800fa14:	bf00      	nop
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}
 800fa1c:	0801fdcc 	.word	0x0801fdcc
 800fa20:	0801fe54 	.word	0x0801fe54
 800fa24:	0801fe10 	.word	0x0801fe10

0800fa28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d106      	bne.n	800fa44 <tcp_listen_closed+0x1c>
 800fa36:	4b14      	ldr	r3, [pc, #80]	; (800fa88 <tcp_listen_closed+0x60>)
 800fa38:	f240 1211 	movw	r2, #273	; 0x111
 800fa3c:	4913      	ldr	r1, [pc, #76]	; (800fa8c <tcp_listen_closed+0x64>)
 800fa3e:	4814      	ldr	r0, [pc, #80]	; (800fa90 <tcp_listen_closed+0x68>)
 800fa40:	f00c f9f2 	bl	801be28 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	7d1b      	ldrb	r3, [r3, #20]
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	d006      	beq.n	800fa5a <tcp_listen_closed+0x32>
 800fa4c:	4b0e      	ldr	r3, [pc, #56]	; (800fa88 <tcp_listen_closed+0x60>)
 800fa4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fa52:	4910      	ldr	r1, [pc, #64]	; (800fa94 <tcp_listen_closed+0x6c>)
 800fa54:	480e      	ldr	r0, [pc, #56]	; (800fa90 <tcp_listen_closed+0x68>)
 800fa56:	f00c f9e7 	bl	801be28 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	e00b      	b.n	800fa78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fa60:	4a0d      	ldr	r2, [pc, #52]	; (800fa98 <tcp_listen_closed+0x70>)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	6879      	ldr	r1, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f7ff ffb1 	bl	800f9d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2b03      	cmp	r3, #3
 800fa7c:	d9f0      	bls.n	800fa60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fa7e:	bf00      	nop
 800fa80:	bf00      	nop
 800fa82:	3710      	adds	r7, #16
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	0801fdcc 	.word	0x0801fdcc
 800fa8c:	0801fe7c 	.word	0x0801fe7c
 800fa90:	0801fe10 	.word	0x0801fe10
 800fa94:	0801fe88 	.word	0x0801fe88
 800fa98:	0806df08 	.word	0x0806df08

0800fa9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fa9c:	b5b0      	push	{r4, r5, r7, lr}
 800fa9e:	b088      	sub	sp, #32
 800faa0:	af04      	add	r7, sp, #16
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <tcp_close_shutdown+0x20>
 800faae:	4b63      	ldr	r3, [pc, #396]	; (800fc3c <tcp_close_shutdown+0x1a0>)
 800fab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fab4:	4962      	ldr	r1, [pc, #392]	; (800fc40 <tcp_close_shutdown+0x1a4>)
 800fab6:	4863      	ldr	r0, [pc, #396]	; (800fc44 <tcp_close_shutdown+0x1a8>)
 800fab8:	f00c f9b6 	bl	801be28 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fabc:	78fb      	ldrb	r3, [r7, #3]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d067      	beq.n	800fb92 <tcp_close_shutdown+0xf6>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	7d1b      	ldrb	r3, [r3, #20]
 800fac6:	2b04      	cmp	r3, #4
 800fac8:	d003      	beq.n	800fad2 <tcp_close_shutdown+0x36>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	7d1b      	ldrb	r3, [r3, #20]
 800face:	2b07      	cmp	r3, #7
 800fad0:	d15f      	bne.n	800fb92 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d105      	bne.n	800fae6 <tcp_close_shutdown+0x4a>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fade:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d055      	beq.n	800fb92 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	8b5b      	ldrh	r3, [r3, #26]
 800faea:	f003 0310 	and.w	r3, r3, #16
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <tcp_close_shutdown+0x64>
 800faf2:	4b52      	ldr	r3, [pc, #328]	; (800fc3c <tcp_close_shutdown+0x1a0>)
 800faf4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800faf8:	4953      	ldr	r1, [pc, #332]	; (800fc48 <tcp_close_shutdown+0x1ac>)
 800fafa:	4852      	ldr	r0, [pc, #328]	; (800fc44 <tcp_close_shutdown+0x1a8>)
 800fafc:	f00c f994 	bl	801be28 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fb08:	687d      	ldr	r5, [r7, #4]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	3304      	adds	r3, #4
 800fb0e:	687a      	ldr	r2, [r7, #4]
 800fb10:	8ad2      	ldrh	r2, [r2, #22]
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	8b09      	ldrh	r1, [r1, #24]
 800fb16:	9102      	str	r1, [sp, #8]
 800fb18:	9201      	str	r2, [sp, #4]
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	462b      	mov	r3, r5
 800fb1e:	4622      	mov	r2, r4
 800fb20:	4601      	mov	r1, r0
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f005 fd28 	bl	8015578 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f001 fa63 	bl	8010ff4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fb2e:	4b47      	ldr	r3, [pc, #284]	; (800fc4c <tcp_close_shutdown+0x1b0>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d105      	bne.n	800fb44 <tcp_close_shutdown+0xa8>
 800fb38:	4b44      	ldr	r3, [pc, #272]	; (800fc4c <tcp_close_shutdown+0x1b0>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	68db      	ldr	r3, [r3, #12]
 800fb3e:	4a43      	ldr	r2, [pc, #268]	; (800fc4c <tcp_close_shutdown+0x1b0>)
 800fb40:	6013      	str	r3, [r2, #0]
 800fb42:	e013      	b.n	800fb6c <tcp_close_shutdown+0xd0>
 800fb44:	4b41      	ldr	r3, [pc, #260]	; (800fc4c <tcp_close_shutdown+0x1b0>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	60fb      	str	r3, [r7, #12]
 800fb4a:	e00c      	b.n	800fb66 <tcp_close_shutdown+0xca>
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d104      	bne.n	800fb60 <tcp_close_shutdown+0xc4>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68da      	ldr	r2, [r3, #12]
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	60da      	str	r2, [r3, #12]
 800fb5e:	e005      	b.n	800fb6c <tcp_close_shutdown+0xd0>
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	60fb      	str	r3, [r7, #12]
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1ef      	bne.n	800fb4c <tcp_close_shutdown+0xb0>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	60da      	str	r2, [r3, #12]
 800fb72:	4b37      	ldr	r3, [pc, #220]	; (800fc50 <tcp_close_shutdown+0x1b4>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fb78:	4b36      	ldr	r3, [pc, #216]	; (800fc54 <tcp_close_shutdown+0x1b8>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	429a      	cmp	r2, r3
 800fb80:	d102      	bne.n	800fb88 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fb82:	f003 ff0f 	bl	80139a4 <tcp_trigger_input_pcb_close>
 800fb86:	e002      	b.n	800fb8e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f7ff fed5 	bl	800f938 <tcp_free>
      }
      return ERR_OK;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	e050      	b.n	800fc34 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7d1b      	ldrb	r3, [r3, #20]
 800fb96:	2b02      	cmp	r3, #2
 800fb98:	d03b      	beq.n	800fc12 <tcp_close_shutdown+0x176>
 800fb9a:	2b02      	cmp	r3, #2
 800fb9c:	dc44      	bgt.n	800fc28 <tcp_close_shutdown+0x18c>
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d002      	beq.n	800fba8 <tcp_close_shutdown+0x10c>
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d02a      	beq.n	800fbfc <tcp_close_shutdown+0x160>
 800fba6:	e03f      	b.n	800fc28 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8adb      	ldrh	r3, [r3, #22]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d021      	beq.n	800fbf4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fbb0:	4b29      	ldr	r3, [pc, #164]	; (800fc58 <tcp_close_shutdown+0x1bc>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	687a      	ldr	r2, [r7, #4]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d105      	bne.n	800fbc6 <tcp_close_shutdown+0x12a>
 800fbba:	4b27      	ldr	r3, [pc, #156]	; (800fc58 <tcp_close_shutdown+0x1bc>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	4a25      	ldr	r2, [pc, #148]	; (800fc58 <tcp_close_shutdown+0x1bc>)
 800fbc2:	6013      	str	r3, [r2, #0]
 800fbc4:	e013      	b.n	800fbee <tcp_close_shutdown+0x152>
 800fbc6:	4b24      	ldr	r3, [pc, #144]	; (800fc58 <tcp_close_shutdown+0x1bc>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	60bb      	str	r3, [r7, #8]
 800fbcc:	e00c      	b.n	800fbe8 <tcp_close_shutdown+0x14c>
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	687a      	ldr	r2, [r7, #4]
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d104      	bne.n	800fbe2 <tcp_close_shutdown+0x146>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	68da      	ldr	r2, [r3, #12]
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	60da      	str	r2, [r3, #12]
 800fbe0:	e005      	b.n	800fbee <tcp_close_shutdown+0x152>
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	60bb      	str	r3, [r7, #8]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1ef      	bne.n	800fbce <tcp_close_shutdown+0x132>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2200      	movs	r2, #0
 800fbf2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fbf4:	6878      	ldr	r0, [r7, #4]
 800fbf6:	f7ff fe9f 	bl	800f938 <tcp_free>
      break;
 800fbfa:	e01a      	b.n	800fc32 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ff13 	bl	800fa28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fc02:	6879      	ldr	r1, [r7, #4]
 800fc04:	4815      	ldr	r0, [pc, #84]	; (800fc5c <tcp_close_shutdown+0x1c0>)
 800fc06:	f001 fa45 	bl	8011094 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f7ff feb0 	bl	800f970 <tcp_free_listen>
      break;
 800fc10:	e00f      	b.n	800fc32 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fc12:	6879      	ldr	r1, [r7, #4]
 800fc14:	480d      	ldr	r0, [pc, #52]	; (800fc4c <tcp_close_shutdown+0x1b0>)
 800fc16:	f001 fa3d 	bl	8011094 <tcp_pcb_remove>
 800fc1a:	4b0d      	ldr	r3, [pc, #52]	; (800fc50 <tcp_close_shutdown+0x1b4>)
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f7ff fe89 	bl	800f938 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fc26:	e004      	b.n	800fc32 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 f819 	bl	800fc60 <tcp_close_shutdown_fin>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	e000      	b.n	800fc34 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800fc32:	2300      	movs	r3, #0
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3710      	adds	r7, #16
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc3c:	0801fdcc 	.word	0x0801fdcc
 800fc40:	0801fea0 	.word	0x0801fea0
 800fc44:	0801fe10 	.word	0x0801fe10
 800fc48:	0801fec0 	.word	0x0801fec0
 800fc4c:	20013ce4 	.word	0x20013ce4
 800fc50:	20013cec 	.word	0x20013cec
 800fc54:	20013d28 	.word	0x20013d28
 800fc58:	20013cdc 	.word	0x20013cdc
 800fc5c:	20013ce0 	.word	0x20013ce0

0800fc60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <tcp_close_shutdown_fin+0x1c>
 800fc6e:	4b2e      	ldr	r3, [pc, #184]	; (800fd28 <tcp_close_shutdown_fin+0xc8>)
 800fc70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fc74:	492d      	ldr	r1, [pc, #180]	; (800fd2c <tcp_close_shutdown_fin+0xcc>)
 800fc76:	482e      	ldr	r0, [pc, #184]	; (800fd30 <tcp_close_shutdown_fin+0xd0>)
 800fc78:	f00c f8d6 	bl	801be28 <iprintf>

  switch (pcb->state) {
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	7d1b      	ldrb	r3, [r3, #20]
 800fc80:	2b07      	cmp	r3, #7
 800fc82:	d020      	beq.n	800fcc6 <tcp_close_shutdown_fin+0x66>
 800fc84:	2b07      	cmp	r3, #7
 800fc86:	dc2b      	bgt.n	800fce0 <tcp_close_shutdown_fin+0x80>
 800fc88:	2b03      	cmp	r3, #3
 800fc8a:	d002      	beq.n	800fc92 <tcp_close_shutdown_fin+0x32>
 800fc8c:	2b04      	cmp	r3, #4
 800fc8e:	d00d      	beq.n	800fcac <tcp_close_shutdown_fin+0x4c>
 800fc90:	e026      	b.n	800fce0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f004 fd50 	bl	8014738 <tcp_send_fin>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d11f      	bne.n	800fce4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2205      	movs	r2, #5
 800fca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fcaa:	e01b      	b.n	800fce4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f004 fd43 	bl	8014738 <tcp_send_fin>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d114      	bne.n	800fce8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2205      	movs	r2, #5
 800fcc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fcc4:	e010      	b.n	800fce8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f004 fd36 	bl	8014738 <tcp_send_fin>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d109      	bne.n	800fcec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2209      	movs	r2, #9
 800fcdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fcde:	e005      	b.n	800fcec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	e01c      	b.n	800fd1e <tcp_close_shutdown_fin+0xbe>
      break;
 800fce4:	bf00      	nop
 800fce6:	e002      	b.n	800fcee <tcp_close_shutdown_fin+0x8e>
      break;
 800fce8:	bf00      	nop
 800fcea:	e000      	b.n	800fcee <tcp_close_shutdown_fin+0x8e>
      break;
 800fcec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d103      	bne.n	800fcfe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f004 fe5c 	bl	80149b4 <tcp_output>
 800fcfc:	e00d      	b.n	800fd1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd06:	d108      	bne.n	800fd1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	8b5b      	ldrh	r3, [r3, #26]
 800fd0c:	f043 0308 	orr.w	r3, r3, #8
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e001      	b.n	800fd1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3710      	adds	r7, #16
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	0801fdcc 	.word	0x0801fdcc
 800fd2c:	0801fe7c 	.word	0x0801fe7c
 800fd30:	0801fe10 	.word	0x0801fe10

0800fd34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d109      	bne.n	800fd56 <tcp_close+0x22>
 800fd42:	4b0f      	ldr	r3, [pc, #60]	; (800fd80 <tcp_close+0x4c>)
 800fd44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fd48:	490e      	ldr	r1, [pc, #56]	; (800fd84 <tcp_close+0x50>)
 800fd4a:	480f      	ldr	r0, [pc, #60]	; (800fd88 <tcp_close+0x54>)
 800fd4c:	f00c f86c 	bl	801be28 <iprintf>
 800fd50:	f06f 030f 	mvn.w	r3, #15
 800fd54:	e00f      	b.n	800fd76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	7d1b      	ldrb	r3, [r3, #20]
 800fd5a:	2b01      	cmp	r3, #1
 800fd5c:	d006      	beq.n	800fd6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	8b5b      	ldrh	r3, [r3, #26]
 800fd62:	f043 0310 	orr.w	r3, r3, #16
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fd6c:	2101      	movs	r1, #1
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f7ff fe94 	bl	800fa9c <tcp_close_shutdown>
 800fd74:	4603      	mov	r3, r0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3708      	adds	r7, #8
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	0801fdcc 	.word	0x0801fdcc
 800fd84:	0801fedc 	.word	0x0801fedc
 800fd88:	0801fe10 	.word	0x0801fe10

0800fd8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b08e      	sub	sp, #56	; 0x38
 800fd90:	af04      	add	r7, sp, #16
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d107      	bne.n	800fdac <tcp_abandon+0x20>
 800fd9c:	4b52      	ldr	r3, [pc, #328]	; (800fee8 <tcp_abandon+0x15c>)
 800fd9e:	f240 223d 	movw	r2, #573	; 0x23d
 800fda2:	4952      	ldr	r1, [pc, #328]	; (800feec <tcp_abandon+0x160>)
 800fda4:	4852      	ldr	r0, [pc, #328]	; (800fef0 <tcp_abandon+0x164>)
 800fda6:	f00c f83f 	bl	801be28 <iprintf>
 800fdaa:	e099      	b.n	800fee0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	7d1b      	ldrb	r3, [r3, #20]
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d106      	bne.n	800fdc2 <tcp_abandon+0x36>
 800fdb4:	4b4c      	ldr	r3, [pc, #304]	; (800fee8 <tcp_abandon+0x15c>)
 800fdb6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fdba:	494e      	ldr	r1, [pc, #312]	; (800fef4 <tcp_abandon+0x168>)
 800fdbc:	484c      	ldr	r0, [pc, #304]	; (800fef0 <tcp_abandon+0x164>)
 800fdbe:	f00c f833 	bl	801be28 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b0a      	cmp	r3, #10
 800fdc8:	d107      	bne.n	800fdda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fdca:	6879      	ldr	r1, [r7, #4]
 800fdcc:	484a      	ldr	r0, [pc, #296]	; (800fef8 <tcp_abandon+0x16c>)
 800fdce:	f001 f961 	bl	8011094 <tcp_pcb_remove>
    tcp_free(pcb);
 800fdd2:	6878      	ldr	r0, [r7, #4]
 800fdd4:	f7ff fdb0 	bl	800f938 <tcp_free>
 800fdd8:	e082      	b.n	800fee0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fde6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdf4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	7d1b      	ldrb	r3, [r3, #20]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d126      	bne.n	800fe52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	8adb      	ldrh	r3, [r3, #22]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d02e      	beq.n	800fe6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe0c:	4b3b      	ldr	r3, [pc, #236]	; (800fefc <tcp_abandon+0x170>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d105      	bne.n	800fe22 <tcp_abandon+0x96>
 800fe16:	4b39      	ldr	r3, [pc, #228]	; (800fefc <tcp_abandon+0x170>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	4a37      	ldr	r2, [pc, #220]	; (800fefc <tcp_abandon+0x170>)
 800fe1e:	6013      	str	r3, [r2, #0]
 800fe20:	e013      	b.n	800fe4a <tcp_abandon+0xbe>
 800fe22:	4b36      	ldr	r3, [pc, #216]	; (800fefc <tcp_abandon+0x170>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	61fb      	str	r3, [r7, #28]
 800fe28:	e00c      	b.n	800fe44 <tcp_abandon+0xb8>
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d104      	bne.n	800fe3e <tcp_abandon+0xb2>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	68da      	ldr	r2, [r3, #12]
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	60da      	str	r2, [r3, #12]
 800fe3c:	e005      	b.n	800fe4a <tcp_abandon+0xbe>
 800fe3e:	69fb      	ldr	r3, [r7, #28]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	61fb      	str	r3, [r7, #28]
 800fe44:	69fb      	ldr	r3, [r7, #28]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1ef      	bne.n	800fe2a <tcp_abandon+0x9e>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	60da      	str	r2, [r3, #12]
 800fe50:	e00b      	b.n	800fe6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	8adb      	ldrh	r3, [r3, #22]
 800fe5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fe5c:	6879      	ldr	r1, [r7, #4]
 800fe5e:	4828      	ldr	r0, [pc, #160]	; (800ff00 <tcp_abandon+0x174>)
 800fe60:	f001 f918 	bl	8011094 <tcp_pcb_remove>
 800fe64:	4b27      	ldr	r3, [pc, #156]	; (800ff04 <tcp_abandon+0x178>)
 800fe66:	2201      	movs	r2, #1
 800fe68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d004      	beq.n	800fe7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe76:	4618      	mov	r0, r3
 800fe78:	f000 fe7e 	bl	8010b78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d004      	beq.n	800fe8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f000 fe75 	bl	8010b78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d004      	beq.n	800fea0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f000 fe6c 	bl	8010b78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00e      	beq.n	800fec4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fea6:	6879      	ldr	r1, [r7, #4]
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	3304      	adds	r3, #4
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	8b12      	ldrh	r2, [r2, #24]
 800feb0:	9202      	str	r2, [sp, #8]
 800feb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800feb4:	9201      	str	r2, [sp, #4]
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	460b      	mov	r3, r1
 800feba:	697a      	ldr	r2, [r7, #20]
 800febc:	69b9      	ldr	r1, [r7, #24]
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f005 fb5a 	bl	8015578 <tcp_rst>
    }
    last_state = pcb->state;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	7d1b      	ldrb	r3, [r3, #20]
 800fec8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7ff fd34 	bl	800f938 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d004      	beq.n	800fee0 <tcp_abandon+0x154>
 800fed6:	693b      	ldr	r3, [r7, #16]
 800fed8:	f06f 010c 	mvn.w	r1, #12
 800fedc:	68f8      	ldr	r0, [r7, #12]
 800fede:	4798      	blx	r3
  }
}
 800fee0:	3728      	adds	r7, #40	; 0x28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	0801fdcc 	.word	0x0801fdcc
 800feec:	0801ff10 	.word	0x0801ff10
 800fef0:	0801fe10 	.word	0x0801fe10
 800fef4:	0801ff2c 	.word	0x0801ff2c
 800fef8:	20013ce8 	.word	0x20013ce8
 800fefc:	20013cdc 	.word	0x20013cdc
 800ff00:	20013ce4 	.word	0x20013ce4
 800ff04:	20013cec 	.word	0x20013cec

0800ff08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ff10:	2101      	movs	r1, #1
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff ff3a 	bl	800fd8c <tcp_abandon>
}
 800ff18:	bf00      	nop
 800ff1a:	3708      	adds	r7, #8
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}

0800ff20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <tcp_update_rcv_ann_wnd+0x1c>
 800ff2e:	4b25      	ldr	r3, [pc, #148]	; (800ffc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ff30:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ff34:	4924      	ldr	r1, [pc, #144]	; (800ffc8 <tcp_update_rcv_ann_wnd+0xa8>)
 800ff36:	4825      	ldr	r0, [pc, #148]	; (800ffcc <tcp_update_rcv_ann_wnd+0xac>)
 800ff38:	f00b ff76 	bl	801be28 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff40:	687a      	ldr	r2, [r7, #4]
 800ff42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ff44:	4413      	add	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ff50:	f241 61d0 	movw	r1, #5840	; 0x16d0
 800ff54:	428a      	cmp	r2, r1
 800ff56:	bf28      	it	cs
 800ff58:	460a      	movcs	r2, r1
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	4413      	add	r3, r2
 800ff5e:	68fa      	ldr	r2, [r7, #12]
 800ff60:	1ad3      	subs	r3, r2, r3
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	db08      	blt.n	800ff78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff72:	68fa      	ldr	r2, [r7, #12]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	e020      	b.n	800ffba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	dd03      	ble.n	800ff8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ff8c:	e014      	b.n	800ffb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffa0:	d306      	bcc.n	800ffb0 <tcp_update_rcv_ann_wnd+0x90>
 800ffa2:	4b08      	ldr	r3, [pc, #32]	; (800ffc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ffa4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ffa8:	4909      	ldr	r1, [pc, #36]	; (800ffd0 <tcp_update_rcv_ann_wnd+0xb0>)
 800ffaa:	4808      	ldr	r0, [pc, #32]	; (800ffcc <tcp_update_rcv_ann_wnd+0xac>)
 800ffac:	f00b ff3c 	bl	801be28 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ffb8:	2300      	movs	r3, #0
  }
}
 800ffba:	4618      	mov	r0, r3
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	0801fdcc 	.word	0x0801fdcc
 800ffc8:	08020028 	.word	0x08020028
 800ffcc:	0801fe10 	.word	0x0801fe10
 800ffd0:	0802004c 	.word	0x0802004c

0800ffd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d107      	bne.n	800fff6 <tcp_recved+0x22>
 800ffe6:	4b20      	ldr	r3, [pc, #128]	; (8010068 <tcp_recved+0x94>)
 800ffe8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ffec:	491f      	ldr	r1, [pc, #124]	; (801006c <tcp_recved+0x98>)
 800ffee:	4820      	ldr	r0, [pc, #128]	; (8010070 <tcp_recved+0x9c>)
 800fff0:	f00b ff1a 	bl	801be28 <iprintf>
 800fff4:	e034      	b.n	8010060 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	7d1b      	ldrb	r3, [r3, #20]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d106      	bne.n	801000c <tcp_recved+0x38>
 800fffe:	4b1a      	ldr	r3, [pc, #104]	; (8010068 <tcp_recved+0x94>)
 8010000:	f240 32d2 	movw	r2, #978	; 0x3d2
 8010004:	491b      	ldr	r1, [pc, #108]	; (8010074 <tcp_recved+0xa0>)
 8010006:	481a      	ldr	r0, [pc, #104]	; (8010070 <tcp_recved+0x9c>)
 8010008:	f00b ff0e 	bl	801be28 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010010:	887b      	ldrh	r3, [r7, #2]
 8010012:	4413      	add	r3, r2
 8010014:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8010016:	89fb      	ldrh	r3, [r7, #14]
 8010018:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801001c:	4293      	cmp	r3, r2
 801001e:	d804      	bhi.n	801002a <tcp_recved+0x56>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010024:	89fa      	ldrh	r2, [r7, #14]
 8010026:	429a      	cmp	r2, r3
 8010028:	d204      	bcs.n	8010034 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010030:	851a      	strh	r2, [r3, #40]	; 0x28
 8010032:	e002      	b.n	801003a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	89fa      	ldrh	r2, [r7, #14]
 8010038:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7ff ff70 	bl	800ff20 <tcp_update_rcv_ann_wnd>
 8010040:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	f640 3267 	movw	r2, #2919	; 0xb67
 8010048:	4293      	cmp	r3, r2
 801004a:	d909      	bls.n	8010060 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	8b5b      	ldrh	r3, [r3, #26]
 8010050:	f043 0302 	orr.w	r3, r3, #2
 8010054:	b29a      	uxth	r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f004 fcaa 	bl	80149b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	bd80      	pop	{r7, pc}
 8010066:	bf00      	nop
 8010068:	0801fdcc 	.word	0x0801fdcc
 801006c:	08020068 	.word	0x08020068
 8010070:	0801fe10 	.word	0x0801fe10
 8010074:	08020080 	.word	0x08020080

08010078 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010082:	4b1e      	ldr	r3, [pc, #120]	; (80100fc <tcp_new_port+0x84>)
 8010084:	881b      	ldrh	r3, [r3, #0]
 8010086:	3301      	adds	r3, #1
 8010088:	b29a      	uxth	r2, r3
 801008a:	4b1c      	ldr	r3, [pc, #112]	; (80100fc <tcp_new_port+0x84>)
 801008c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801008e:	4b1b      	ldr	r3, [pc, #108]	; (80100fc <tcp_new_port+0x84>)
 8010090:	881b      	ldrh	r3, [r3, #0]
 8010092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010096:	4293      	cmp	r3, r2
 8010098:	d103      	bne.n	80100a2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801009a:	4b18      	ldr	r3, [pc, #96]	; (80100fc <tcp_new_port+0x84>)
 801009c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80100a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80100a2:	2300      	movs	r3, #0
 80100a4:	71fb      	strb	r3, [r7, #7]
 80100a6:	e01e      	b.n	80100e6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80100a8:	79fb      	ldrb	r3, [r7, #7]
 80100aa:	4a15      	ldr	r2, [pc, #84]	; (8010100 <tcp_new_port+0x88>)
 80100ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	603b      	str	r3, [r7, #0]
 80100b4:	e011      	b.n	80100da <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	8ada      	ldrh	r2, [r3, #22]
 80100ba:	4b10      	ldr	r3, [pc, #64]	; (80100fc <tcp_new_port+0x84>)
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d108      	bne.n	80100d4 <tcp_new_port+0x5c>
        n++;
 80100c2:	88bb      	ldrh	r3, [r7, #4]
 80100c4:	3301      	adds	r3, #1
 80100c6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80100c8:	88bb      	ldrh	r3, [r7, #4]
 80100ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100ce:	d3d8      	bcc.n	8010082 <tcp_new_port+0xa>
          return 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e00d      	b.n	80100f0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	68db      	ldr	r3, [r3, #12]
 80100d8:	603b      	str	r3, [r7, #0]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d1ea      	bne.n	80100b6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80100e0:	79fb      	ldrb	r3, [r7, #7]
 80100e2:	3301      	adds	r3, #1
 80100e4:	71fb      	strb	r3, [r7, #7]
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	2b03      	cmp	r3, #3
 80100ea:	d9dd      	bls.n	80100a8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80100ec:	4b03      	ldr	r3, [pc, #12]	; (80100fc <tcp_new_port+0x84>)
 80100ee:	881b      	ldrh	r3, [r3, #0]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	200000b8 	.word	0x200000b8
 8010100:	0806df08 	.word	0x0806df08

08010104 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b08a      	sub	sp, #40	; 0x28
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	603b      	str	r3, [r7, #0]
 8010110:	4613      	mov	r3, r2
 8010112:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010114:	2300      	movs	r3, #0
 8010116:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d109      	bne.n	8010132 <tcp_connect+0x2e>
 801011e:	4b7d      	ldr	r3, [pc, #500]	; (8010314 <tcp_connect+0x210>)
 8010120:	f240 4235 	movw	r2, #1077	; 0x435
 8010124:	497c      	ldr	r1, [pc, #496]	; (8010318 <tcp_connect+0x214>)
 8010126:	487d      	ldr	r0, [pc, #500]	; (801031c <tcp_connect+0x218>)
 8010128:	f00b fe7e 	bl	801be28 <iprintf>
 801012c:	f06f 030f 	mvn.w	r3, #15
 8010130:	e0ec      	b.n	801030c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d109      	bne.n	801014c <tcp_connect+0x48>
 8010138:	4b76      	ldr	r3, [pc, #472]	; (8010314 <tcp_connect+0x210>)
 801013a:	f240 4236 	movw	r2, #1078	; 0x436
 801013e:	4978      	ldr	r1, [pc, #480]	; (8010320 <tcp_connect+0x21c>)
 8010140:	4876      	ldr	r0, [pc, #472]	; (801031c <tcp_connect+0x218>)
 8010142:	f00b fe71 	bl	801be28 <iprintf>
 8010146:	f06f 030f 	mvn.w	r3, #15
 801014a:	e0df      	b.n	801030c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	7d1b      	ldrb	r3, [r3, #20]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d009      	beq.n	8010168 <tcp_connect+0x64>
 8010154:	4b6f      	ldr	r3, [pc, #444]	; (8010314 <tcp_connect+0x210>)
 8010156:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801015a:	4972      	ldr	r1, [pc, #456]	; (8010324 <tcp_connect+0x220>)
 801015c:	486f      	ldr	r0, [pc, #444]	; (801031c <tcp_connect+0x218>)
 801015e:	f00b fe63 	bl	801be28 <iprintf>
 8010162:	f06f 0309 	mvn.w	r3, #9
 8010166:	e0d1      	b.n	801030c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d002      	beq.n	8010174 <tcp_connect+0x70>
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	e000      	b.n	8010176 <tcp_connect+0x72>
 8010174:	2300      	movs	r3, #0
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	88fa      	ldrh	r2, [r7, #6]
 801017e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	7a1b      	ldrb	r3, [r3, #8]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d006      	beq.n	8010196 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	7a1b      	ldrb	r3, [r3, #8]
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fbf1 	bl	800e974 <netif_get_by_index>
 8010192:	6278      	str	r0, [r7, #36]	; 0x24
 8010194:	e005      	b.n	80101a2 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	3304      	adds	r3, #4
 801019a:	4618      	mov	r0, r3
 801019c:	f009 fac4 	bl	8019728 <ip4_route>
 80101a0:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d102      	bne.n	80101ae <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80101a8:	f06f 0303 	mvn.w	r3, #3
 80101ac:	e0ae      	b.n	801030c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d003      	beq.n	80101bc <tcp_connect+0xb8>
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d111      	bne.n	80101e0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d002      	beq.n	80101c8 <tcp_connect+0xc4>
 80101c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c4:	3304      	adds	r3, #4
 80101c6:	e000      	b.n	80101ca <tcp_connect+0xc6>
 80101c8:	2300      	movs	r3, #0
 80101ca:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d102      	bne.n	80101d8 <tcp_connect+0xd4>
      return ERR_RTE;
 80101d2:	f06f 0303 	mvn.w	r3, #3
 80101d6:	e099      	b.n	801030c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	8adb      	ldrh	r3, [r3, #22]
 80101e4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	8adb      	ldrh	r3, [r3, #22]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10c      	bne.n	8010208 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80101ee:	f7ff ff43 	bl	8010078 <tcp_new_port>
 80101f2:	4603      	mov	r3, r0
 80101f4:	461a      	mov	r2, r3
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	8adb      	ldrh	r3, [r3, #22]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d102      	bne.n	8010208 <tcp_connect+0x104>
      return ERR_BUF;
 8010202:	f06f 0301 	mvn.w	r3, #1
 8010206:	e081      	b.n	801030c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f000 ffd7 	bl	80111bc <tcp_next_iss>
 801020e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	697a      	ldr	r2, [r7, #20]
 801021a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801021c:	697b      	ldr	r3, [r7, #20]
 801021e:	1e5a      	subs	r2, r3, #1
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	1e5a      	subs	r2, r3, #1
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801022c:	697b      	ldr	r3, [r7, #20]
 801022e:	1e5a      	subs	r2, r3, #1
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801023a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010252:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	f44f 7206 	mov.w	r2, #536	; 0x218
 801025c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	3304      	adds	r3, #4
 8010266:	461a      	mov	r2, r3
 8010268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801026a:	f000 ffcd 	bl	8011208 <tcp_eff_send_mss_netif>
 801026e:	4603      	mov	r3, r0
 8010270:	461a      	mov	r2, r3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2201      	movs	r2, #1
 801027a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	683a      	ldr	r2, [r7, #0]
 8010282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010286:	2102      	movs	r1, #2
 8010288:	68f8      	ldr	r0, [r7, #12]
 801028a:	f004 faa5 	bl	80147d8 <tcp_enqueue_flags>
 801028e:	4603      	mov	r3, r0
 8010290:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8010292:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d136      	bne.n	8010308 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2202      	movs	r2, #2
 801029e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80102a0:	8b7b      	ldrh	r3, [r7, #26]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d021      	beq.n	80102ea <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80102a6:	4b20      	ldr	r3, [pc, #128]	; (8010328 <tcp_connect+0x224>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d105      	bne.n	80102bc <tcp_connect+0x1b8>
 80102b0:	4b1d      	ldr	r3, [pc, #116]	; (8010328 <tcp_connect+0x224>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	4a1c      	ldr	r2, [pc, #112]	; (8010328 <tcp_connect+0x224>)
 80102b8:	6013      	str	r3, [r2, #0]
 80102ba:	e013      	b.n	80102e4 <tcp_connect+0x1e0>
 80102bc:	4b1a      	ldr	r3, [pc, #104]	; (8010328 <tcp_connect+0x224>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	623b      	str	r3, [r7, #32]
 80102c2:	e00c      	b.n	80102de <tcp_connect+0x1da>
 80102c4:	6a3b      	ldr	r3, [r7, #32]
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	68fa      	ldr	r2, [r7, #12]
 80102ca:	429a      	cmp	r2, r3
 80102cc:	d104      	bne.n	80102d8 <tcp_connect+0x1d4>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	68da      	ldr	r2, [r3, #12]
 80102d2:	6a3b      	ldr	r3, [r7, #32]
 80102d4:	60da      	str	r2, [r3, #12]
 80102d6:	e005      	b.n	80102e4 <tcp_connect+0x1e0>
 80102d8:	6a3b      	ldr	r3, [r7, #32]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	623b      	str	r3, [r7, #32]
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d1ef      	bne.n	80102c4 <tcp_connect+0x1c0>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2200      	movs	r2, #0
 80102e8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80102ea:	4b10      	ldr	r3, [pc, #64]	; (801032c <tcp_connect+0x228>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	60da      	str	r2, [r3, #12]
 80102f2:	4a0e      	ldr	r2, [pc, #56]	; (801032c <tcp_connect+0x228>)
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	f005 fb00 	bl	80158fc <tcp_timer_needed>
 80102fc:	4b0c      	ldr	r3, [pc, #48]	; (8010330 <tcp_connect+0x22c>)
 80102fe:	2201      	movs	r2, #1
 8010300:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8010302:	68f8      	ldr	r0, [r7, #12]
 8010304:	f004 fb56 	bl	80149b4 <tcp_output>
  }
  return ret;
 8010308:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3728      	adds	r7, #40	; 0x28
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	0801fdcc 	.word	0x0801fdcc
 8010318:	080200a8 	.word	0x080200a8
 801031c:	0801fe10 	.word	0x0801fe10
 8010320:	080200c4 	.word	0x080200c4
 8010324:	080200e0 	.word	0x080200e0
 8010328:	20013cdc 	.word	0x20013cdc
 801032c:	20013ce4 	.word	0x20013ce4
 8010330:	20013cec 	.word	0x20013cec

08010334 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b090      	sub	sp, #64	; 0x40
 8010338:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801033a:	2300      	movs	r3, #0
 801033c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8010340:	4b94      	ldr	r3, [pc, #592]	; (8010594 <tcp_slowtmr+0x260>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	3301      	adds	r3, #1
 8010346:	4a93      	ldr	r2, [pc, #588]	; (8010594 <tcp_slowtmr+0x260>)
 8010348:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801034a:	4b93      	ldr	r3, [pc, #588]	; (8010598 <tcp_slowtmr+0x264>)
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	3301      	adds	r3, #1
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b91      	ldr	r3, [pc, #580]	; (8010598 <tcp_slowtmr+0x264>)
 8010354:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010356:	2300      	movs	r3, #0
 8010358:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801035a:	4b90      	ldr	r3, [pc, #576]	; (801059c <tcp_slowtmr+0x268>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8010360:	e29f      	b.n	80108a2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	7d1b      	ldrb	r3, [r3, #20]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d106      	bne.n	8010378 <tcp_slowtmr+0x44>
 801036a:	4b8d      	ldr	r3, [pc, #564]	; (80105a0 <tcp_slowtmr+0x26c>)
 801036c:	f240 42be 	movw	r2, #1214	; 0x4be
 8010370:	498c      	ldr	r1, [pc, #560]	; (80105a4 <tcp_slowtmr+0x270>)
 8010372:	488d      	ldr	r0, [pc, #564]	; (80105a8 <tcp_slowtmr+0x274>)
 8010374:	f00b fd58 	bl	801be28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d106      	bne.n	801038e <tcp_slowtmr+0x5a>
 8010380:	4b87      	ldr	r3, [pc, #540]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010382:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010386:	4989      	ldr	r1, [pc, #548]	; (80105ac <tcp_slowtmr+0x278>)
 8010388:	4887      	ldr	r0, [pc, #540]	; (80105a8 <tcp_slowtmr+0x274>)
 801038a:	f00b fd4d 	bl	801be28 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	7d1b      	ldrb	r3, [r3, #20]
 8010392:	2b0a      	cmp	r3, #10
 8010394:	d106      	bne.n	80103a4 <tcp_slowtmr+0x70>
 8010396:	4b82      	ldr	r3, [pc, #520]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010398:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801039c:	4984      	ldr	r1, [pc, #528]	; (80105b0 <tcp_slowtmr+0x27c>)
 801039e:	4882      	ldr	r0, [pc, #520]	; (80105a8 <tcp_slowtmr+0x274>)
 80103a0:	f00b fd42 	bl	801be28 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80103a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a6:	7f9a      	ldrb	r2, [r3, #30]
 80103a8:	4b7b      	ldr	r3, [pc, #492]	; (8010598 <tcp_slowtmr+0x264>)
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d105      	bne.n	80103bc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80103b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80103ba:	e272      	b.n	80108a2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80103bc:	4b76      	ldr	r3, [pc, #472]	; (8010598 <tcp_slowtmr+0x264>)
 80103be:	781a      	ldrb	r2, [r3, #0]
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80103c4:	2300      	movs	r3, #0
 80103c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80103d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d2:	7d1b      	ldrb	r3, [r3, #20]
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d10a      	bne.n	80103ee <tcp_slowtmr+0xba>
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103de:	2b05      	cmp	r3, #5
 80103e0:	d905      	bls.n	80103ee <tcp_slowtmr+0xba>
      ++pcb_remove;
 80103e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e6:	3301      	adds	r3, #1
 80103e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80103ec:	e11e      	b.n	801062c <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103f4:	2b0b      	cmp	r3, #11
 80103f6:	d905      	bls.n	8010404 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80103f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103fc:	3301      	adds	r3, #1
 80103fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010402:	e113      	b.n	801062c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801040a:	2b00      	cmp	r3, #0
 801040c:	d075      	beq.n	80104fa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010412:	2b00      	cmp	r3, #0
 8010414:	d006      	beq.n	8010424 <tcp_slowtmr+0xf0>
 8010416:	4b62      	ldr	r3, [pc, #392]	; (80105a0 <tcp_slowtmr+0x26c>)
 8010418:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801041c:	4965      	ldr	r1, [pc, #404]	; (80105b4 <tcp_slowtmr+0x280>)
 801041e:	4862      	ldr	r0, [pc, #392]	; (80105a8 <tcp_slowtmr+0x274>)
 8010420:	f00b fd02 	bl	801be28 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010428:	2b00      	cmp	r3, #0
 801042a:	d106      	bne.n	801043a <tcp_slowtmr+0x106>
 801042c:	4b5c      	ldr	r3, [pc, #368]	; (80105a0 <tcp_slowtmr+0x26c>)
 801042e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010432:	4961      	ldr	r1, [pc, #388]	; (80105b8 <tcp_slowtmr+0x284>)
 8010434:	485c      	ldr	r0, [pc, #368]	; (80105a8 <tcp_slowtmr+0x274>)
 8010436:	f00b fcf7 	bl	801be28 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801043a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010440:	2b0b      	cmp	r3, #11
 8010442:	d905      	bls.n	8010450 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010448:	3301      	adds	r3, #1
 801044a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801044e:	e0ed      	b.n	801062c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010456:	3b01      	subs	r3, #1
 8010458:	4a58      	ldr	r2, [pc, #352]	; (80105bc <tcp_slowtmr+0x288>)
 801045a:	5cd3      	ldrb	r3, [r2, r3]
 801045c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010460:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010464:	7c7a      	ldrb	r2, [r7, #17]
 8010466:	429a      	cmp	r2, r3
 8010468:	d907      	bls.n	801047a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010470:	3301      	adds	r3, #1
 8010472:	b2da      	uxtb	r2, r3
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010480:	7c7a      	ldrb	r2, [r7, #17]
 8010482:	429a      	cmp	r2, r3
 8010484:	f200 80d2 	bhi.w	801062c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010488:	2301      	movs	r3, #1
 801048a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010492:	2b00      	cmp	r3, #0
 8010494:	d108      	bne.n	80104a8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010498:	f005 f962 	bl	8015760 <tcp_zero_window_probe>
 801049c:	4603      	mov	r3, r0
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d014      	beq.n	80104cc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80104a2:	2300      	movs	r3, #0
 80104a4:	623b      	str	r3, [r7, #32]
 80104a6:	e011      	b.n	80104cc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ae:	4619      	mov	r1, r3
 80104b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104b2:	f003 fff5 	bl	80144a0 <tcp_split_unsent_seg>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d107      	bne.n	80104cc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80104bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104be:	f004 fa79 	bl	80149b4 <tcp_output>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d101      	bne.n	80104cc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	f000 80ac 	beq.w	801062c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	2200      	movs	r2, #0
 80104d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104e2:	2b06      	cmp	r3, #6
 80104e4:	f200 80a2 	bhi.w	801062c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80104ee:	3301      	adds	r3, #1
 80104f0:	b2da      	uxtb	r2, r3
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80104f8:	e098      	b.n	801062c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80104fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010500:	2b00      	cmp	r3, #0
 8010502:	db0f      	blt.n	8010524 <tcp_slowtmr+0x1f0>
 8010504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010506:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801050a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801050e:	4293      	cmp	r3, r2
 8010510:	d008      	beq.n	8010524 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010518:	b29b      	uxth	r3, r3
 801051a:	3301      	adds	r3, #1
 801051c:	b29b      	uxth	r3, r3
 801051e:	b21a      	sxth	r2, r3
 8010520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010522:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010526:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801052a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010530:	429a      	cmp	r2, r3
 8010532:	db7b      	blt.n	801062c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010536:	f004 fd45 	bl	8014fc4 <tcp_rexmit_rto_prepare>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d007      	beq.n	8010550 <tcp_slowtmr+0x21c>
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010544:	2b00      	cmp	r3, #0
 8010546:	d171      	bne.n	801062c <tcp_slowtmr+0x2f8>
 8010548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054c:	2b00      	cmp	r3, #0
 801054e:	d06d      	beq.n	801062c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	7d1b      	ldrb	r3, [r3, #20]
 8010554:	2b02      	cmp	r3, #2
 8010556:	d03a      	beq.n	80105ce <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801055e:	2b0c      	cmp	r3, #12
 8010560:	bf28      	it	cs
 8010562:	230c      	movcs	r3, #12
 8010564:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801056c:	10db      	asrs	r3, r3, #3
 801056e:	b21b      	sxth	r3, r3
 8010570:	461a      	mov	r2, r3
 8010572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010574:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010578:	4413      	add	r3, r2
 801057a:	7efa      	ldrb	r2, [r7, #27]
 801057c:	4910      	ldr	r1, [pc, #64]	; (80105c0 <tcp_slowtmr+0x28c>)
 801057e:	5c8a      	ldrb	r2, [r1, r2]
 8010580:	4093      	lsls	r3, r2
 8010582:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801058a:	4293      	cmp	r3, r2
 801058c:	dc1a      	bgt.n	80105c4 <tcp_slowtmr+0x290>
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	b21a      	sxth	r2, r3
 8010592:	e019      	b.n	80105c8 <tcp_slowtmr+0x294>
 8010594:	20013cd8 	.word	0x20013cd8
 8010598:	20013cee 	.word	0x20013cee
 801059c:	20013ce4 	.word	0x20013ce4
 80105a0:	0801fdcc 	.word	0x0801fdcc
 80105a4:	08020110 	.word	0x08020110
 80105a8:	0801fe10 	.word	0x0801fe10
 80105ac:	0802013c 	.word	0x0802013c
 80105b0:	08020168 	.word	0x08020168
 80105b4:	08020198 	.word	0x08020198
 80105b8:	080201cc 	.word	0x080201cc
 80105bc:	0806df00 	.word	0x0806df00
 80105c0:	0806def0 	.word	0x0806def0
 80105c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80105ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d0:	2200      	movs	r2, #0
 80105d2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105e0:	4293      	cmp	r3, r2
 80105e2:	bf28      	it	cs
 80105e4:	4613      	movcs	r3, r2
 80105e6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80105e8:	8a7b      	ldrh	r3, [r7, #18]
 80105ea:	085b      	lsrs	r3, r3, #1
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80105fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	b29b      	uxth	r3, r3
 8010602:	429a      	cmp	r2, r3
 8010604:	d206      	bcs.n	8010614 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801060a:	005b      	lsls	r3, r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010610:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010616:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010620:	2200      	movs	r2, #0
 8010622:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010628:	f004 fd46 	bl	80150b8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	7d1b      	ldrb	r3, [r3, #20]
 8010630:	2b06      	cmp	r3, #6
 8010632:	d111      	bne.n	8010658 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010636:	8b5b      	ldrh	r3, [r3, #26]
 8010638:	f003 0310 	and.w	r3, r3, #16
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00b      	beq.n	8010658 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010640:	4b9d      	ldr	r3, [pc, #628]	; (80108b8 <tcp_slowtmr+0x584>)
 8010642:	681a      	ldr	r2, [r3, #0]
 8010644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010646:	6a1b      	ldr	r3, [r3, #32]
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	2b28      	cmp	r3, #40	; 0x28
 801064c:	d904      	bls.n	8010658 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801064e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010652:	3301      	adds	r3, #1
 8010654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065a:	7a5b      	ldrb	r3, [r3, #9]
 801065c:	f003 0308 	and.w	r3, r3, #8
 8010660:	2b00      	cmp	r3, #0
 8010662:	d04c      	beq.n	80106fe <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010666:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010668:	2b04      	cmp	r3, #4
 801066a:	d003      	beq.n	8010674 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010670:	2b07      	cmp	r3, #7
 8010672:	d144      	bne.n	80106fe <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010674:	4b90      	ldr	r3, [pc, #576]	; (80108b8 <tcp_slowtmr+0x584>)
 8010676:	681a      	ldr	r2, [r3, #0]
 8010678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801067a:	6a1b      	ldr	r3, [r3, #32]
 801067c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801067e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010684:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010688:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 801068c:	498b      	ldr	r1, [pc, #556]	; (80108bc <tcp_slowtmr+0x588>)
 801068e:	fba1 1303 	umull	r1, r3, r1, r3
 8010692:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010694:	429a      	cmp	r2, r3
 8010696:	d90a      	bls.n	80106ae <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801069c:	3301      	adds	r3, #1
 801069e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80106a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80106a6:	3301      	adds	r3, #1
 80106a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80106ac:	e027      	b.n	80106fe <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106ae:	4b82      	ldr	r3, [pc, #520]	; (80108b8 <tcp_slowtmr+0x584>)
 80106b0:	681a      	ldr	r2, [r3, #0]
 80106b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106b4:	6a1b      	ldr	r3, [r3, #32]
 80106b6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80106b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ba:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80106c4:	4618      	mov	r0, r3
 80106c6:	4b7e      	ldr	r3, [pc, #504]	; (80108c0 <tcp_slowtmr+0x58c>)
 80106c8:	fb00 f303 	mul.w	r3, r0, r3
 80106cc:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80106ce:	497b      	ldr	r1, [pc, #492]	; (80108bc <tcp_slowtmr+0x588>)
 80106d0:	fba1 1303 	umull	r1, r3, r1, r3
 80106d4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d911      	bls.n	80106fe <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80106da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106dc:	f005 f800 	bl	80156e0 <tcp_keepalive>
 80106e0:	4603      	mov	r3, r0
 80106e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80106e6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d107      	bne.n	80106fe <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80106ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80106f4:	3301      	adds	r3, #1
 80106f6:	b2da      	uxtb	r2, r3
 80106f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010702:	2b00      	cmp	r3, #0
 8010704:	d011      	beq.n	801072a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010706:	4b6c      	ldr	r3, [pc, #432]	; (80108b8 <tcp_slowtmr+0x584>)
 8010708:	681a      	ldr	r2, [r3, #0]
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	1ad2      	subs	r2, r2, r3
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010716:	4619      	mov	r1, r3
 8010718:	460b      	mov	r3, r1
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	440b      	add	r3, r1
 801071e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010720:	429a      	cmp	r2, r3
 8010722:	d302      	bcc.n	801072a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010726:	f000 fe19 	bl	801135c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	7d1b      	ldrb	r3, [r3, #20]
 801072e:	2b03      	cmp	r3, #3
 8010730:	d10b      	bne.n	801074a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010732:	4b61      	ldr	r3, [pc, #388]	; (80108b8 <tcp_slowtmr+0x584>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	6a1b      	ldr	r3, [r3, #32]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	2b28      	cmp	r3, #40	; 0x28
 801073e:	d904      	bls.n	801074a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010744:	3301      	adds	r3, #1
 8010746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	2b09      	cmp	r3, #9
 8010750:	d10b      	bne.n	801076a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010752:	4b59      	ldr	r3, [pc, #356]	; (80108b8 <tcp_slowtmr+0x584>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010758:	6a1b      	ldr	r3, [r3, #32]
 801075a:	1ad3      	subs	r3, r2, r3
 801075c:	2bf0      	cmp	r3, #240	; 0xf0
 801075e:	d904      	bls.n	801076a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010764:	3301      	adds	r3, #1
 8010766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801076a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801076e:	2b00      	cmp	r3, #0
 8010770:	d060      	beq.n	8010834 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010778:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801077a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801077c:	f000 fc3a 	bl	8010ff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010782:	2b00      	cmp	r3, #0
 8010784:	d010      	beq.n	80107a8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010786:	4b4f      	ldr	r3, [pc, #316]	; (80108c4 <tcp_slowtmr+0x590>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801078c:	429a      	cmp	r2, r3
 801078e:	d106      	bne.n	801079e <tcp_slowtmr+0x46a>
 8010790:	4b4d      	ldr	r3, [pc, #308]	; (80108c8 <tcp_slowtmr+0x594>)
 8010792:	f240 526d 	movw	r2, #1389	; 0x56d
 8010796:	494d      	ldr	r1, [pc, #308]	; (80108cc <tcp_slowtmr+0x598>)
 8010798:	484d      	ldr	r0, [pc, #308]	; (80108d0 <tcp_slowtmr+0x59c>)
 801079a:	f00b fb45 	bl	801be28 <iprintf>
        prev->next = pcb->next;
 801079e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a0:	68da      	ldr	r2, [r3, #12]
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	60da      	str	r2, [r3, #12]
 80107a6:	e00f      	b.n	80107c8 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80107a8:	4b46      	ldr	r3, [pc, #280]	; (80108c4 <tcp_slowtmr+0x590>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d006      	beq.n	80107c0 <tcp_slowtmr+0x48c>
 80107b2:	4b45      	ldr	r3, [pc, #276]	; (80108c8 <tcp_slowtmr+0x594>)
 80107b4:	f240 5271 	movw	r2, #1393	; 0x571
 80107b8:	4946      	ldr	r1, [pc, #280]	; (80108d4 <tcp_slowtmr+0x5a0>)
 80107ba:	4845      	ldr	r0, [pc, #276]	; (80108d0 <tcp_slowtmr+0x59c>)
 80107bc:	f00b fb34 	bl	801be28 <iprintf>
        tcp_active_pcbs = pcb->next;
 80107c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c2:	68db      	ldr	r3, [r3, #12]
 80107c4:	4a3f      	ldr	r2, [pc, #252]	; (80108c4 <tcp_slowtmr+0x590>)
 80107c6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80107c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d013      	beq.n	80107f8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80107d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80107d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80107d8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80107da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107dc:	3304      	adds	r3, #4
 80107de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e0:	8ad2      	ldrh	r2, [r2, #22]
 80107e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107e4:	8b09      	ldrh	r1, [r1, #24]
 80107e6:	9102      	str	r1, [sp, #8]
 80107e8:	9201      	str	r2, [sp, #4]
 80107ea:	9300      	str	r3, [sp, #0]
 80107ec:	462b      	mov	r3, r5
 80107ee:	4622      	mov	r2, r4
 80107f0:	4601      	mov	r1, r0
 80107f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107f4:	f004 fec0 	bl	8015578 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80107f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107fa:	691b      	ldr	r3, [r3, #16]
 80107fc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	7d1b      	ldrb	r3, [r3, #20]
 8010802:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010806:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801080e:	6838      	ldr	r0, [r7, #0]
 8010810:	f7ff f892 	bl	800f938 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010814:	4b30      	ldr	r3, [pc, #192]	; (80108d8 <tcp_slowtmr+0x5a4>)
 8010816:	2200      	movs	r2, #0
 8010818:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d004      	beq.n	801082a <tcp_slowtmr+0x4f6>
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	f06f 010c 	mvn.w	r1, #12
 8010826:	68b8      	ldr	r0, [r7, #8]
 8010828:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801082a:	4b2b      	ldr	r3, [pc, #172]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d037      	beq.n	80108a2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010832:	e590      	b.n	8010356 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	7f1b      	ldrb	r3, [r3, #28]
 8010842:	3301      	adds	r3, #1
 8010844:	b2da      	uxtb	r2, r3
 8010846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010848:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801084a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084c:	7f1a      	ldrb	r2, [r3, #28]
 801084e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010850:	7f5b      	ldrb	r3, [r3, #29]
 8010852:	429a      	cmp	r2, r3
 8010854:	d325      	bcc.n	80108a2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010858:	2200      	movs	r2, #0
 801085a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801085c:	4b1e      	ldr	r3, [pc, #120]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801085e:	2200      	movs	r2, #0
 8010860:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010868:	2b00      	cmp	r3, #0
 801086a:	d00b      	beq.n	8010884 <tcp_slowtmr+0x550>
 801086c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010874:	6912      	ldr	r2, [r2, #16]
 8010876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010878:	4610      	mov	r0, r2
 801087a:	4798      	blx	r3
 801087c:	4603      	mov	r3, r0
 801087e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010882:	e002      	b.n	801088a <tcp_slowtmr+0x556>
 8010884:	2300      	movs	r3, #0
 8010886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801088a:	4b13      	ldr	r3, [pc, #76]	; (80108d8 <tcp_slowtmr+0x5a4>)
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d000      	beq.n	8010894 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010892:	e560      	b.n	8010356 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010894:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010898:	2b00      	cmp	r3, #0
 801089a:	d102      	bne.n	80108a2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 801089c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801089e:	f004 f889 	bl	80149b4 <tcp_output>
  while (pcb != NULL) {
 80108a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	f47f ad5c 	bne.w	8010362 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80108ae:	4b0b      	ldr	r3, [pc, #44]	; (80108dc <tcp_slowtmr+0x5a8>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80108b4:	e067      	b.n	8010986 <tcp_slowtmr+0x652>
 80108b6:	bf00      	nop
 80108b8:	20013cd8 	.word	0x20013cd8
 80108bc:	10624dd3 	.word	0x10624dd3
 80108c0:	000124f8 	.word	0x000124f8
 80108c4:	20013ce4 	.word	0x20013ce4
 80108c8:	0801fdcc 	.word	0x0801fdcc
 80108cc:	08020204 	.word	0x08020204
 80108d0:	0801fe10 	.word	0x0801fe10
 80108d4:	08020230 	.word	0x08020230
 80108d8:	20013cec 	.word	0x20013cec
 80108dc:	20013ce8 	.word	0x20013ce8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80108e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e2:	7d1b      	ldrb	r3, [r3, #20]
 80108e4:	2b0a      	cmp	r3, #10
 80108e6:	d006      	beq.n	80108f6 <tcp_slowtmr+0x5c2>
 80108e8:	4b2b      	ldr	r3, [pc, #172]	; (8010998 <tcp_slowtmr+0x664>)
 80108ea:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80108ee:	492b      	ldr	r1, [pc, #172]	; (801099c <tcp_slowtmr+0x668>)
 80108f0:	482b      	ldr	r0, [pc, #172]	; (80109a0 <tcp_slowtmr+0x66c>)
 80108f2:	f00b fa99 	bl	801be28 <iprintf>
    pcb_remove = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80108fc:	4b29      	ldr	r3, [pc, #164]	; (80109a4 <tcp_slowtmr+0x670>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010902:	6a1b      	ldr	r3, [r3, #32]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	2bf0      	cmp	r3, #240	; 0xf0
 8010908:	d904      	bls.n	8010914 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801090a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801090e:	3301      	adds	r3, #1
 8010910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010918:	2b00      	cmp	r3, #0
 801091a:	d02f      	beq.n	801097c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801091c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801091e:	f000 fb69 	bl	8010ff4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	2b00      	cmp	r3, #0
 8010926:	d010      	beq.n	801094a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010928:	4b1f      	ldr	r3, [pc, #124]	; (80109a8 <tcp_slowtmr+0x674>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801092e:	429a      	cmp	r2, r3
 8010930:	d106      	bne.n	8010940 <tcp_slowtmr+0x60c>
 8010932:	4b19      	ldr	r3, [pc, #100]	; (8010998 <tcp_slowtmr+0x664>)
 8010934:	f240 52af 	movw	r2, #1455	; 0x5af
 8010938:	491c      	ldr	r1, [pc, #112]	; (80109ac <tcp_slowtmr+0x678>)
 801093a:	4819      	ldr	r0, [pc, #100]	; (80109a0 <tcp_slowtmr+0x66c>)
 801093c:	f00b fa74 	bl	801be28 <iprintf>
        prev->next = pcb->next;
 8010940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010942:	68da      	ldr	r2, [r3, #12]
 8010944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010946:	60da      	str	r2, [r3, #12]
 8010948:	e00f      	b.n	801096a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801094a:	4b17      	ldr	r3, [pc, #92]	; (80109a8 <tcp_slowtmr+0x674>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010950:	429a      	cmp	r2, r3
 8010952:	d006      	beq.n	8010962 <tcp_slowtmr+0x62e>
 8010954:	4b10      	ldr	r3, [pc, #64]	; (8010998 <tcp_slowtmr+0x664>)
 8010956:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801095a:	4915      	ldr	r1, [pc, #84]	; (80109b0 <tcp_slowtmr+0x67c>)
 801095c:	4810      	ldr	r0, [pc, #64]	; (80109a0 <tcp_slowtmr+0x66c>)
 801095e:	f00b fa63 	bl	801be28 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <tcp_slowtmr+0x674>)
 8010968:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010974:	69f8      	ldr	r0, [r7, #28]
 8010976:	f7fe ffdf 	bl	800f938 <tcp_free>
 801097a:	e004      	b.n	8010986 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1a9      	bne.n	80108e0 <tcp_slowtmr+0x5ac>
    }
  }
}
 801098c:	bf00      	nop
 801098e:	bf00      	nop
 8010990:	3730      	adds	r7, #48	; 0x30
 8010992:	46bd      	mov	sp, r7
 8010994:	bdb0      	pop	{r4, r5, r7, pc}
 8010996:	bf00      	nop
 8010998:	0801fdcc 	.word	0x0801fdcc
 801099c:	0802025c 	.word	0x0802025c
 80109a0:	0801fe10 	.word	0x0801fe10
 80109a4:	20013cd8 	.word	0x20013cd8
 80109a8:	20013ce8 	.word	0x20013ce8
 80109ac:	0802028c 	.word	0x0802028c
 80109b0:	080202b4 	.word	0x080202b4

080109b4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80109ba:	4b2d      	ldr	r3, [pc, #180]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	3301      	adds	r3, #1
 80109c0:	b2da      	uxtb	r2, r3
 80109c2:	4b2b      	ldr	r3, [pc, #172]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109c4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80109c6:	4b2b      	ldr	r3, [pc, #172]	; (8010a74 <tcp_fasttmr+0xc0>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80109cc:	e048      	b.n	8010a60 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	7f9a      	ldrb	r2, [r3, #30]
 80109d2:	4b27      	ldr	r3, [pc, #156]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d03f      	beq.n	8010a5a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80109da:	4b25      	ldr	r3, [pc, #148]	; (8010a70 <tcp_fasttmr+0xbc>)
 80109dc:	781a      	ldrb	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8b5b      	ldrh	r3, [r3, #26]
 80109e6:	f003 0301 	and.w	r3, r3, #1
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d010      	beq.n	8010a10 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	8b5b      	ldrh	r3, [r3, #26]
 80109f2:	f043 0302 	orr.w	r3, r3, #2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f003 ffd9 	bl	80149b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f023 0303 	bic.w	r3, r3, #3
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	8b5b      	ldrh	r3, [r3, #26]
 8010a14:	f003 0308 	and.w	r3, r3, #8
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d009      	beq.n	8010a30 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8b5b      	ldrh	r3, [r3, #26]
 8010a20:	f023 0308 	bic.w	r3, r3, #8
 8010a24:	b29a      	uxth	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff f918 	bl	800fc60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00a      	beq.n	8010a54 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010a3e:	4b0e      	ldr	r3, [pc, #56]	; (8010a78 <tcp_fasttmr+0xc4>)
 8010a40:	2200      	movs	r2, #0
 8010a42:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f000 f819 	bl	8010a7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	; (8010a78 <tcp_fasttmr+0xc4>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d000      	beq.n	8010a54 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010a52:	e7b8      	b.n	80109c6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	607b      	str	r3, [r7, #4]
 8010a58:	e002      	b.n	8010a60 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d1b3      	bne.n	80109ce <tcp_fasttmr+0x1a>
    }
  }
}
 8010a66:	bf00      	nop
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	20013cee 	.word	0x20013cee
 8010a74:	20013ce4 	.word	0x20013ce4
 8010a78:	20013cec 	.word	0x20013cec

08010a7c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010a7c:	b590      	push	{r4, r7, lr}
 8010a7e:	b085      	sub	sp, #20
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d109      	bne.n	8010a9e <tcp_process_refused_data+0x22>
 8010a8a:	4b38      	ldr	r3, [pc, #224]	; (8010b6c <tcp_process_refused_data+0xf0>)
 8010a8c:	f240 6209 	movw	r2, #1545	; 0x609
 8010a90:	4937      	ldr	r1, [pc, #220]	; (8010b70 <tcp_process_refused_data+0xf4>)
 8010a92:	4838      	ldr	r0, [pc, #224]	; (8010b74 <tcp_process_refused_data+0xf8>)
 8010a94:	f00b f9c8 	bl	801be28 <iprintf>
 8010a98:	f06f 030f 	mvn.w	r3, #15
 8010a9c:	e061      	b.n	8010b62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aa2:	7b5b      	ldrb	r3, [r3, #13]
 8010aa4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010aaa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00b      	beq.n	8010ad4 <tcp_process_refused_data+0x58>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6918      	ldr	r0, [r3, #16]
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	68ba      	ldr	r2, [r7, #8]
 8010aca:	6879      	ldr	r1, [r7, #4]
 8010acc:	47a0      	blx	r4
 8010ace:	4603      	mov	r3, r0
 8010ad0:	73fb      	strb	r3, [r7, #15]
 8010ad2:	e007      	b.n	8010ae4 <tcp_process_refused_data+0x68>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	6879      	ldr	r1, [r7, #4]
 8010ada:	2000      	movs	r0, #0
 8010adc:	f000 f8a6 	bl	8010c2c <tcp_recv_null>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d12b      	bne.n	8010b44 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010aec:	7bbb      	ldrb	r3, [r7, #14]
 8010aee:	f003 0320 	and.w	r3, r3, #32
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d034      	beq.n	8010b60 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010afa:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d005      	beq.n	8010b0e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010b06:	3301      	adds	r3, #1
 8010b08:	b29a      	uxth	r2, r3
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d00b      	beq.n	8010b30 <tcp_process_refused_data+0xb4>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6918      	ldr	r0, [r3, #16]
 8010b22:	2300      	movs	r3, #0
 8010b24:	2200      	movs	r2, #0
 8010b26:	6879      	ldr	r1, [r7, #4]
 8010b28:	47a0      	blx	r4
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	73fb      	strb	r3, [r7, #15]
 8010b2e:	e001      	b.n	8010b34 <tcp_process_refused_data+0xb8>
 8010b30:	2300      	movs	r3, #0
 8010b32:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b38:	f113 0f0d 	cmn.w	r3, #13
 8010b3c:	d110      	bne.n	8010b60 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010b3e:	f06f 030c 	mvn.w	r3, #12
 8010b42:	e00e      	b.n	8010b62 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b48:	f113 0f0d 	cmn.w	r3, #13
 8010b4c:	d102      	bne.n	8010b54 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010b4e:	f06f 030c 	mvn.w	r3, #12
 8010b52:	e006      	b.n	8010b62 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010b5a:	f06f 0304 	mvn.w	r3, #4
 8010b5e:	e000      	b.n	8010b62 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3714      	adds	r7, #20
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd90      	pop	{r4, r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	0801fdcc 	.word	0x0801fdcc
 8010b70:	080202dc 	.word	0x080202dc
 8010b74:	0801fe10 	.word	0x0801fe10

08010b78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010b80:	e007      	b.n	8010b92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f000 f80a 	bl	8010ba2 <tcp_seg_free>
    seg = next;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d1f4      	bne.n	8010b82 <tcp_segs_free+0xa>
  }
}
 8010b98:	bf00      	nop
 8010b9a:	bf00      	nop
 8010b9c:	3710      	adds	r7, #16
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b082      	sub	sp, #8
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d00c      	beq.n	8010bca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d004      	beq.n	8010bc2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f7fe fa6b 	bl	800f098 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010bc2:	6879      	ldr	r1, [r7, #4]
 8010bc4:	2003      	movs	r0, #3
 8010bc6:	f7fd fbc5 	bl	800e354 <memp_free>
  }
}
 8010bca:	bf00      	nop
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
	...

08010bd4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <tcp_seg_copy+0x1c>
 8010be2:	4b0f      	ldr	r3, [pc, #60]	; (8010c20 <tcp_seg_copy+0x4c>)
 8010be4:	f240 6282 	movw	r2, #1666	; 0x682
 8010be8:	490e      	ldr	r1, [pc, #56]	; (8010c24 <tcp_seg_copy+0x50>)
 8010bea:	480f      	ldr	r0, [pc, #60]	; (8010c28 <tcp_seg_copy+0x54>)
 8010bec:	f00b f91c 	bl	801be28 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010bf0:	2003      	movs	r0, #3
 8010bf2:	f7fd fb5d 	bl	800e2b0 <memp_malloc>
 8010bf6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d101      	bne.n	8010c02 <tcp_seg_copy+0x2e>
    return NULL;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	e00a      	b.n	8010c18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010c02:	2214      	movs	r2, #20
 8010c04:	6879      	ldr	r1, [r7, #4]
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f00b fb35 	bl	801c276 <memcpy>
  pbuf_ref(cseg->p);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe fae7 	bl	800f1e4 <pbuf_ref>
  return cseg;
 8010c16:	68fb      	ldr	r3, [r7, #12]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0801fdcc 	.word	0x0801fdcc
 8010c24:	08020320 	.word	0x08020320
 8010c28:	0801fe10 	.word	0x0801fe10

08010c2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b084      	sub	sp, #16
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d109      	bne.n	8010c54 <tcp_recv_null+0x28>
 8010c40:	4b12      	ldr	r3, [pc, #72]	; (8010c8c <tcp_recv_null+0x60>)
 8010c42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010c46:	4912      	ldr	r1, [pc, #72]	; (8010c90 <tcp_recv_null+0x64>)
 8010c48:	4812      	ldr	r0, [pc, #72]	; (8010c94 <tcp_recv_null+0x68>)
 8010c4a:	f00b f8ed 	bl	801be28 <iprintf>
 8010c4e:	f06f 030f 	mvn.w	r3, #15
 8010c52:	e016      	b.n	8010c82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d009      	beq.n	8010c6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	891b      	ldrh	r3, [r3, #8]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	68b8      	ldr	r0, [r7, #8]
 8010c62:	f7ff f9b7 	bl	800ffd4 <tcp_recved>
    pbuf_free(p);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7fe fa16 	bl	800f098 <pbuf_free>
 8010c6c:	e008      	b.n	8010c80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d104      	bne.n	8010c80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010c76:	68b8      	ldr	r0, [r7, #8]
 8010c78:	f7ff f85c 	bl	800fd34 <tcp_close>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	e000      	b.n	8010c82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	0801fdcc 	.word	0x0801fdcc
 8010c90:	0802033c 	.word	0x0802033c
 8010c94:	0801fe10 	.word	0x0801fe10

08010c98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	db01      	blt.n	8010cae <tcp_kill_prio+0x16>
 8010caa:	79fb      	ldrb	r3, [r7, #7]
 8010cac:	e000      	b.n	8010cb0 <tcp_kill_prio+0x18>
 8010cae:	237f      	movs	r3, #127	; 0x7f
 8010cb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010cb2:	7afb      	ldrb	r3, [r7, #11]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d034      	beq.n	8010d22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010cb8:	7afb      	ldrb	r3, [r7, #11]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cc6:	4b19      	ldr	r3, [pc, #100]	; (8010d2c <tcp_kill_prio+0x94>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	617b      	str	r3, [r7, #20]
 8010ccc:	e01f      	b.n	8010d0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010cce:	697b      	ldr	r3, [r7, #20]
 8010cd0:	7d5b      	ldrb	r3, [r3, #21]
 8010cd2:	7afa      	ldrb	r2, [r7, #11]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d80c      	bhi.n	8010cf2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010cdc:	7afa      	ldrb	r2, [r7, #11]
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d112      	bne.n	8010d08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010ce2:	4b13      	ldr	r3, [pc, #76]	; (8010d30 <tcp_kill_prio+0x98>)
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	6a1b      	ldr	r3, [r3, #32]
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	68fa      	ldr	r2, [r7, #12]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d80a      	bhi.n	8010d08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010cf2:	4b0f      	ldr	r3, [pc, #60]	; (8010d30 <tcp_kill_prio+0x98>)
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	6a1b      	ldr	r3, [r3, #32]
 8010cfa:	1ad3      	subs	r3, r2, r3
 8010cfc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	7d5b      	ldrb	r3, [r3, #21]
 8010d06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	68db      	ldr	r3, [r3, #12]
 8010d0c:	617b      	str	r3, [r7, #20]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d1dc      	bne.n	8010cce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d004      	beq.n	8010d24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d1a:	6938      	ldr	r0, [r7, #16]
 8010d1c:	f7ff f8f4 	bl	800ff08 <tcp_abort>
 8010d20:	e000      	b.n	8010d24 <tcp_kill_prio+0x8c>
    return;
 8010d22:	bf00      	nop
  }
}
 8010d24:	3718      	adds	r7, #24
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20013ce4 	.word	0x20013ce4
 8010d30:	20013cd8 	.word	0x20013cd8

08010d34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b086      	sub	sp, #24
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010d3e:	79fb      	ldrb	r3, [r7, #7]
 8010d40:	2b08      	cmp	r3, #8
 8010d42:	d009      	beq.n	8010d58 <tcp_kill_state+0x24>
 8010d44:	79fb      	ldrb	r3, [r7, #7]
 8010d46:	2b09      	cmp	r3, #9
 8010d48:	d006      	beq.n	8010d58 <tcp_kill_state+0x24>
 8010d4a:	4b1a      	ldr	r3, [pc, #104]	; (8010db4 <tcp_kill_state+0x80>)
 8010d4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010d50:	4919      	ldr	r1, [pc, #100]	; (8010db8 <tcp_kill_state+0x84>)
 8010d52:	481a      	ldr	r0, [pc, #104]	; (8010dbc <tcp_kill_state+0x88>)
 8010d54:	f00b f868 	bl	801be28 <iprintf>

  inactivity = 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d60:	4b17      	ldr	r3, [pc, #92]	; (8010dc0 <tcp_kill_state+0x8c>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	617b      	str	r3, [r7, #20]
 8010d66:	e017      	b.n	8010d98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	7d1b      	ldrb	r3, [r3, #20]
 8010d6c:	79fa      	ldrb	r2, [r7, #7]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d10f      	bne.n	8010d92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010d72:	4b14      	ldr	r3, [pc, #80]	; (8010dc4 <tcp_kill_state+0x90>)
 8010d74:	681a      	ldr	r2, [r3, #0]
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	1ad3      	subs	r3, r2, r3
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	d807      	bhi.n	8010d92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010d82:	4b10      	ldr	r3, [pc, #64]	; (8010dc4 <tcp_kill_state+0x90>)
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	6a1b      	ldr	r3, [r3, #32]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	617b      	str	r3, [r7, #20]
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d1e4      	bne.n	8010d68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d003      	beq.n	8010dac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010da4:	2100      	movs	r1, #0
 8010da6:	6938      	ldr	r0, [r7, #16]
 8010da8:	f7fe fff0 	bl	800fd8c <tcp_abandon>
  }
}
 8010dac:	bf00      	nop
 8010dae:	3718      	adds	r7, #24
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	0801fdcc 	.word	0x0801fdcc
 8010db8:	08020358 	.word	0x08020358
 8010dbc:	0801fe10 	.word	0x0801fe10
 8010dc0:	20013ce4 	.word	0x20013ce4
 8010dc4:	20013cd8 	.word	0x20013cd8

08010dc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b084      	sub	sp, #16
 8010dcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dd6:	4b12      	ldr	r3, [pc, #72]	; (8010e20 <tcp_kill_timewait+0x58>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	60fb      	str	r3, [r7, #12]
 8010ddc:	e012      	b.n	8010e04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010dde:	4b11      	ldr	r3, [pc, #68]	; (8010e24 <tcp_kill_timewait+0x5c>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6a1b      	ldr	r3, [r3, #32]
 8010de6:	1ad3      	subs	r3, r2, r3
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d807      	bhi.n	8010dfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010dee:	4b0d      	ldr	r3, [pc, #52]	; (8010e24 <tcp_kill_timewait+0x5c>)
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6a1b      	ldr	r3, [r3, #32]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	68db      	ldr	r3, [r3, #12]
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e9      	bne.n	8010dde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010e10:	68b8      	ldr	r0, [r7, #8]
 8010e12:	f7ff f879 	bl	800ff08 <tcp_abort>
  }
}
 8010e16:	bf00      	nop
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
 8010e1e:	bf00      	nop
 8010e20:	20013ce8 	.word	0x20013ce8
 8010e24:	20013cd8 	.word	0x20013cd8

08010e28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010e2e:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <tcp_handle_closepend+0x48>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e34:	e014      	b.n	8010e60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	8b5b      	ldrh	r3, [r3, #26]
 8010e40:	f003 0308 	and.w	r3, r3, #8
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d009      	beq.n	8010e5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	8b5b      	ldrh	r3, [r3, #26]
 8010e4c:	f023 0308 	bic.w	r3, r3, #8
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f7fe ff02 	bl	800fc60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d1e7      	bne.n	8010e36 <tcp_handle_closepend+0xe>
  }
}
 8010e66:	bf00      	nop
 8010e68:	bf00      	nop
 8010e6a:	3708      	adds	r7, #8
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	20013ce4 	.word	0x20013ce4

08010e74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e7e:	2001      	movs	r0, #1
 8010e80:	f7fd fa16 	bl	800e2b0 <memp_malloc>
 8010e84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d126      	bne.n	8010eda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010e8c:	f7ff ffcc 	bl	8010e28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010e90:	f7ff ff9a 	bl	8010dc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010e94:	2001      	movs	r0, #1
 8010e96:	f7fd fa0b 	bl	800e2b0 <memp_malloc>
 8010e9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d11b      	bne.n	8010eda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010ea2:	2009      	movs	r0, #9
 8010ea4:	f7ff ff46 	bl	8010d34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ea8:	2001      	movs	r0, #1
 8010eaa:	f7fd fa01 	bl	800e2b0 <memp_malloc>
 8010eae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d111      	bne.n	8010eda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010eb6:	2008      	movs	r0, #8
 8010eb8:	f7ff ff3c 	bl	8010d34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ebc:	2001      	movs	r0, #1
 8010ebe:	f7fd f9f7 	bl	800e2b0 <memp_malloc>
 8010ec2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d107      	bne.n	8010eda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7ff fee3 	bl	8010c98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010ed2:	2001      	movs	r0, #1
 8010ed4:	f7fd f9ec 	bl	800e2b0 <memp_malloc>
 8010ed8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d03f      	beq.n	8010f60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010ee0:	229c      	movs	r2, #156	; 0x9c
 8010ee2:	2100      	movs	r1, #0
 8010ee4:	68f8      	ldr	r0, [r7, #12]
 8010ee6:	f00b f909 	bl	801c0fc <memset>
    pcb->prio = prio;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	79fa      	ldrb	r2, [r7, #7]
 8010eee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010ef6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010f00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	22ff      	movs	r2, #255	; 0xff
 8010f0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010f16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2206      	movs	r2, #6
 8010f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	2206      	movs	r2, #6
 8010f24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010f36:	4b0d      	ldr	r3, [pc, #52]	; (8010f6c <tcp_alloc+0xf8>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010f3e:	4b0c      	ldr	r3, [pc, #48]	; (8010f70 <tcp_alloc+0xfc>)
 8010f40:	781a      	ldrb	r2, [r3, #0]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010f4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	4a08      	ldr	r2, [pc, #32]	; (8010f74 <tcp_alloc+0x100>)
 8010f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	4a07      	ldr	r2, [pc, #28]	; (8010f78 <tcp_alloc+0x104>)
 8010f5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010f60:	68fb      	ldr	r3, [r7, #12]
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	3710      	adds	r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	20013cd8 	.word	0x20013cd8
 8010f70:	20013cee 	.word	0x20013cee
 8010f74:	08010c2d 	.word	0x08010c2d
 8010f78:	006ddd00 	.word	0x006ddd00

08010f7c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8010f80:	2040      	movs	r0, #64	; 0x40
 8010f82:	f7ff ff77 	bl	8010e74 <tcp_alloc>
 8010f86:	4603      	mov	r3, r0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
 8010f94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	683a      	ldr	r2, [r7, #0]
 8010fa0:	611a      	str	r2, [r3, #16]
  }
}
 8010fa2:	bf00      	nop
 8010fa4:	370c      	adds	r7, #12
 8010fa6:	46bd      	mov	sp, r7
 8010fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fac:	4770      	bx	lr
	...

08010fb0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010fb0:	b580      	push	{r7, lr}
 8010fb2:	b082      	sub	sp, #8
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
 8010fb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00e      	beq.n	8010fde <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7d1b      	ldrb	r3, [r3, #20]
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d106      	bne.n	8010fd6 <tcp_recv+0x26>
 8010fc8:	4b07      	ldr	r3, [pc, #28]	; (8010fe8 <tcp_recv+0x38>)
 8010fca:	f240 72df 	movw	r2, #2015	; 0x7df
 8010fce:	4907      	ldr	r1, [pc, #28]	; (8010fec <tcp_recv+0x3c>)
 8010fd0:	4807      	ldr	r0, [pc, #28]	; (8010ff0 <tcp_recv+0x40>)
 8010fd2:	f00a ff29 	bl	801be28 <iprintf>
    pcb->recv = recv;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010fde:	bf00      	nop
 8010fe0:	3708      	adds	r7, #8
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	0801fdcc 	.word	0x0801fdcc
 8010fec:	08020368 	.word	0x08020368
 8010ff0:	0801fe10 	.word	0x0801fe10

08010ff4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d107      	bne.n	8011012 <tcp_pcb_purge+0x1e>
 8011002:	4b21      	ldr	r3, [pc, #132]	; (8011088 <tcp_pcb_purge+0x94>)
 8011004:	f640 0251 	movw	r2, #2129	; 0x851
 8011008:	4920      	ldr	r1, [pc, #128]	; (801108c <tcp_pcb_purge+0x98>)
 801100a:	4821      	ldr	r0, [pc, #132]	; (8011090 <tcp_pcb_purge+0x9c>)
 801100c:	f00a ff0c 	bl	801be28 <iprintf>
 8011010:	e037      	b.n	8011082 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	7d1b      	ldrb	r3, [r3, #20]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d033      	beq.n	8011082 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801101e:	2b0a      	cmp	r3, #10
 8011020:	d02f      	beq.n	8011082 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011026:	2b01      	cmp	r3, #1
 8011028:	d02b      	beq.n	8011082 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801102e:	2b00      	cmp	r3, #0
 8011030:	d007      	beq.n	8011042 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011036:	4618      	mov	r0, r3
 8011038:	f7fe f82e 	bl	800f098 <pbuf_free>
      pcb->refused_data = NULL;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2200      	movs	r2, #0
 8011040:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011046:	2b00      	cmp	r3, #0
 8011048:	d002      	beq.n	8011050 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f986 	bl	801135c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011056:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801105c:	4618      	mov	r0, r3
 801105e:	f7ff fd8b 	bl	8010b78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fd86 	bl	8010b78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2200      	movs	r2, #0
 8011070:	66da      	str	r2, [r3, #108]	; 0x6c
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	0801fdcc 	.word	0x0801fdcc
 801108c:	08020418 	.word	0x08020418
 8011090:	0801fe10 	.word	0x0801fe10

08011094 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b084      	sub	sp, #16
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d106      	bne.n	80110b2 <tcp_pcb_remove+0x1e>
 80110a4:	4b3e      	ldr	r3, [pc, #248]	; (80111a0 <tcp_pcb_remove+0x10c>)
 80110a6:	f640 0283 	movw	r2, #2179	; 0x883
 80110aa:	493e      	ldr	r1, [pc, #248]	; (80111a4 <tcp_pcb_remove+0x110>)
 80110ac:	483e      	ldr	r0, [pc, #248]	; (80111a8 <tcp_pcb_remove+0x114>)
 80110ae:	f00a febb 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d106      	bne.n	80110c6 <tcp_pcb_remove+0x32>
 80110b8:	4b39      	ldr	r3, [pc, #228]	; (80111a0 <tcp_pcb_remove+0x10c>)
 80110ba:	f640 0284 	movw	r2, #2180	; 0x884
 80110be:	493b      	ldr	r1, [pc, #236]	; (80111ac <tcp_pcb_remove+0x118>)
 80110c0:	4839      	ldr	r0, [pc, #228]	; (80111a8 <tcp_pcb_remove+0x114>)
 80110c2:	f00a feb1 	bl	801be28 <iprintf>

  TCP_RMV(pcblist, pcb);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d105      	bne.n	80110dc <tcp_pcb_remove+0x48>
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68da      	ldr	r2, [r3, #12]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	601a      	str	r2, [r3, #0]
 80110da:	e013      	b.n	8011104 <tcp_pcb_remove+0x70>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	60fb      	str	r3, [r7, #12]
 80110e2:	e00c      	b.n	80110fe <tcp_pcb_remove+0x6a>
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	683a      	ldr	r2, [r7, #0]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d104      	bne.n	80110f8 <tcp_pcb_remove+0x64>
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	68da      	ldr	r2, [r3, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	60da      	str	r2, [r3, #12]
 80110f6:	e005      	b.n	8011104 <tcp_pcb_remove+0x70>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	68db      	ldr	r3, [r3, #12]
 80110fc:	60fb      	str	r3, [r7, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1ef      	bne.n	80110e4 <tcp_pcb_remove+0x50>
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	2200      	movs	r2, #0
 8011108:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801110a:	6838      	ldr	r0, [r7, #0]
 801110c:	f7ff ff72 	bl	8010ff4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	7d1b      	ldrb	r3, [r3, #20]
 8011114:	2b0a      	cmp	r3, #10
 8011116:	d013      	beq.n	8011140 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801111c:	2b01      	cmp	r3, #1
 801111e:	d00f      	beq.n	8011140 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	8b5b      	ldrh	r3, [r3, #26]
 8011124:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011128:	2b00      	cmp	r3, #0
 801112a:	d009      	beq.n	8011140 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	8b5b      	ldrh	r3, [r3, #26]
 8011130:	f043 0302 	orr.w	r3, r3, #2
 8011134:	b29a      	uxth	r2, r3
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801113a:	6838      	ldr	r0, [r7, #0]
 801113c:	f003 fc3a 	bl	80149b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	7d1b      	ldrb	r3, [r3, #20]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d020      	beq.n	801118a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114c:	2b00      	cmp	r3, #0
 801114e:	d006      	beq.n	801115e <tcp_pcb_remove+0xca>
 8011150:	4b13      	ldr	r3, [pc, #76]	; (80111a0 <tcp_pcb_remove+0x10c>)
 8011152:	f640 0293 	movw	r2, #2195	; 0x893
 8011156:	4916      	ldr	r1, [pc, #88]	; (80111b0 <tcp_pcb_remove+0x11c>)
 8011158:	4813      	ldr	r0, [pc, #76]	; (80111a8 <tcp_pcb_remove+0x114>)
 801115a:	f00a fe65 	bl	801be28 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011162:	2b00      	cmp	r3, #0
 8011164:	d006      	beq.n	8011174 <tcp_pcb_remove+0xe0>
 8011166:	4b0e      	ldr	r3, [pc, #56]	; (80111a0 <tcp_pcb_remove+0x10c>)
 8011168:	f640 0294 	movw	r2, #2196	; 0x894
 801116c:	4911      	ldr	r1, [pc, #68]	; (80111b4 <tcp_pcb_remove+0x120>)
 801116e:	480e      	ldr	r0, [pc, #56]	; (80111a8 <tcp_pcb_remove+0x114>)
 8011170:	f00a fe5a 	bl	801be28 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011174:	683b      	ldr	r3, [r7, #0]
 8011176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011178:	2b00      	cmp	r3, #0
 801117a:	d006      	beq.n	801118a <tcp_pcb_remove+0xf6>
 801117c:	4b08      	ldr	r3, [pc, #32]	; (80111a0 <tcp_pcb_remove+0x10c>)
 801117e:	f640 0296 	movw	r2, #2198	; 0x896
 8011182:	490d      	ldr	r1, [pc, #52]	; (80111b8 <tcp_pcb_remove+0x124>)
 8011184:	4808      	ldr	r0, [pc, #32]	; (80111a8 <tcp_pcb_remove+0x114>)
 8011186:	f00a fe4f 	bl	801be28 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	2200      	movs	r2, #0
 801118e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	2200      	movs	r2, #0
 8011194:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011196:	bf00      	nop
 8011198:	3710      	adds	r7, #16
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	0801fdcc 	.word	0x0801fdcc
 80111a4:	08020434 	.word	0x08020434
 80111a8:	0801fe10 	.word	0x0801fe10
 80111ac:	08020450 	.word	0x08020450
 80111b0:	08020470 	.word	0x08020470
 80111b4:	08020488 	.word	0x08020488
 80111b8:	080204a4 	.word	0x080204a4

080111bc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <tcp_next_iss+0x1c>
 80111ca:	4b0a      	ldr	r3, [pc, #40]	; (80111f4 <tcp_next_iss+0x38>)
 80111cc:	f640 02af 	movw	r2, #2223	; 0x8af
 80111d0:	4909      	ldr	r1, [pc, #36]	; (80111f8 <tcp_next_iss+0x3c>)
 80111d2:	480a      	ldr	r0, [pc, #40]	; (80111fc <tcp_next_iss+0x40>)
 80111d4:	f00a fe28 	bl	801be28 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80111d8:	4b09      	ldr	r3, [pc, #36]	; (8011200 <tcp_next_iss+0x44>)
 80111da:	681a      	ldr	r2, [r3, #0]
 80111dc:	4b09      	ldr	r3, [pc, #36]	; (8011204 <tcp_next_iss+0x48>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4413      	add	r3, r2
 80111e2:	4a07      	ldr	r2, [pc, #28]	; (8011200 <tcp_next_iss+0x44>)
 80111e4:	6013      	str	r3, [r2, #0]
  return iss;
 80111e6:	4b06      	ldr	r3, [pc, #24]	; (8011200 <tcp_next_iss+0x44>)
 80111e8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3708      	adds	r7, #8
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0801fdcc 	.word	0x0801fdcc
 80111f8:	080204bc 	.word	0x080204bc
 80111fc:	0801fe10 	.word	0x0801fe10
 8011200:	200000bc 	.word	0x200000bc
 8011204:	20013cd8 	.word	0x20013cd8

08011208 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b086      	sub	sp, #24
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	60b9      	str	r1, [r7, #8]
 8011212:	607a      	str	r2, [r7, #4]
 8011214:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d106      	bne.n	801122a <tcp_eff_send_mss_netif+0x22>
 801121c:	4b14      	ldr	r3, [pc, #80]	; (8011270 <tcp_eff_send_mss_netif+0x68>)
 801121e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011222:	4914      	ldr	r1, [pc, #80]	; (8011274 <tcp_eff_send_mss_netif+0x6c>)
 8011224:	4814      	ldr	r0, [pc, #80]	; (8011278 <tcp_eff_send_mss_netif+0x70>)
 8011226:	f00a fdff 	bl	801be28 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d101      	bne.n	8011234 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011230:	89fb      	ldrh	r3, [r7, #14]
 8011232:	e019      	b.n	8011268 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011238:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801123a:	8afb      	ldrh	r3, [r7, #22]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d012      	beq.n	8011266 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011240:	2328      	movs	r3, #40	; 0x28
 8011242:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011244:	8afa      	ldrh	r2, [r7, #22]
 8011246:	8abb      	ldrh	r3, [r7, #20]
 8011248:	429a      	cmp	r2, r3
 801124a:	d904      	bls.n	8011256 <tcp_eff_send_mss_netif+0x4e>
 801124c:	8afa      	ldrh	r2, [r7, #22]
 801124e:	8abb      	ldrh	r3, [r7, #20]
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	b29b      	uxth	r3, r3
 8011254:	e000      	b.n	8011258 <tcp_eff_send_mss_netif+0x50>
 8011256:	2300      	movs	r3, #0
 8011258:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801125a:	8a7a      	ldrh	r2, [r7, #18]
 801125c:	89fb      	ldrh	r3, [r7, #14]
 801125e:	4293      	cmp	r3, r2
 8011260:	bf28      	it	cs
 8011262:	4613      	movcs	r3, r2
 8011264:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011266:	89fb      	ldrh	r3, [r7, #14]
}
 8011268:	4618      	mov	r0, r3
 801126a:	3718      	adds	r7, #24
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	0801fdcc 	.word	0x0801fdcc
 8011274:	080204d8 	.word	0x080204d8
 8011278:	0801fe10 	.word	0x0801fe10

0801127c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d119      	bne.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011290:	4b10      	ldr	r3, [pc, #64]	; (80112d4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011292:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011296:	4910      	ldr	r1, [pc, #64]	; (80112d8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011298:	4810      	ldr	r0, [pc, #64]	; (80112dc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801129a:	f00a fdc5 	bl	801be28 <iprintf>

  while (pcb != NULL) {
 801129e:	e011      	b.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d108      	bne.n	80112be <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7fe fe28 	bl	800ff08 <tcp_abort>
      pcb = next;
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	60fb      	str	r3, [r7, #12]
 80112bc:	e002      	b.n	80112c4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1ea      	bne.n	80112a0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80112ca:	bf00      	nop
 80112cc:	bf00      	nop
 80112ce:	3710      	adds	r7, #16
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	0801fdcc 	.word	0x0801fdcc
 80112d8:	08020500 	.word	0x08020500
 80112dc:	0801fe10 	.word	0x0801fe10

080112e0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d02a      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d026      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80112f8:	4b15      	ldr	r3, [pc, #84]	; (8011350 <tcp_netif_ip_addr_changed+0x70>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	4619      	mov	r1, r3
 80112fe:	6878      	ldr	r0, [r7, #4]
 8011300:	f7ff ffbc 	bl	801127c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011304:	4b13      	ldr	r3, [pc, #76]	; (8011354 <tcp_netif_ip_addr_changed+0x74>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4619      	mov	r1, r3
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7ff ffb6 	bl	801127c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d017      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d013      	beq.n	8011346 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801131e:	4b0e      	ldr	r3, [pc, #56]	; (8011358 <tcp_netif_ip_addr_changed+0x78>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	60fb      	str	r3, [r7, #12]
 8011324:	e00c      	b.n	8011340 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681a      	ldr	r2, [r3, #0]
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	429a      	cmp	r2, r3
 8011330:	d103      	bne.n	801133a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	681a      	ldr	r2, [r3, #0]
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	68db      	ldr	r3, [r3, #12]
 801133e:	60fb      	str	r3, [r7, #12]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1ef      	bne.n	8011326 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011346:	bf00      	nop
 8011348:	3710      	adds	r7, #16
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	20013ce4 	.word	0x20013ce4
 8011354:	20013cdc 	.word	0x20013cdc
 8011358:	20013ce0 	.word	0x20013ce0

0801135c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011368:	2b00      	cmp	r3, #0
 801136a:	d007      	beq.n	801137c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011370:	4618      	mov	r0, r3
 8011372:	f7ff fc01 	bl	8010b78 <tcp_segs_free>
    pcb->ooseq = NULL;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801137c:	bf00      	nop
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011384:	b590      	push	{r4, r7, lr}
 8011386:	b08d      	sub	sp, #52	; 0x34
 8011388:	af04      	add	r7, sp, #16
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d105      	bne.n	80113a0 <tcp_input+0x1c>
 8011394:	4b8b      	ldr	r3, [pc, #556]	; (80115c4 <tcp_input+0x240>)
 8011396:	2283      	movs	r2, #131	; 0x83
 8011398:	498b      	ldr	r1, [pc, #556]	; (80115c8 <tcp_input+0x244>)
 801139a:	488c      	ldr	r0, [pc, #560]	; (80115cc <tcp_input+0x248>)
 801139c:	f00a fd44 	bl	801be28 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	4a8a      	ldr	r2, [pc, #552]	; (80115d0 <tcp_input+0x24c>)
 80113a6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	895b      	ldrh	r3, [r3, #10]
 80113ac:	2b13      	cmp	r3, #19
 80113ae:	f240 83e3 	bls.w	8011b78 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80113b2:	4b88      	ldr	r3, [pc, #544]	; (80115d4 <tcp_input+0x250>)
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	4a87      	ldr	r2, [pc, #540]	; (80115d4 <tcp_input+0x250>)
 80113b8:	6812      	ldr	r2, [r2, #0]
 80113ba:	4611      	mov	r1, r2
 80113bc:	4618      	mov	r0, r3
 80113be:	f008 fcd9 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f040 83d9 	bne.w	8011b7c <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80113ca:	4b82      	ldr	r3, [pc, #520]	; (80115d4 <tcp_input+0x250>)
 80113cc:	695b      	ldr	r3, [r3, #20]
 80113ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80113d2:	2be0      	cmp	r3, #224	; 0xe0
 80113d4:	f000 83d2 	beq.w	8011b7c <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	891a      	ldrh	r2, [r3, #8]
 80113dc:	4b7e      	ldr	r3, [pc, #504]	; (80115d8 <tcp_input+0x254>)
 80113de:	9300      	str	r3, [sp, #0]
 80113e0:	4b7e      	ldr	r3, [pc, #504]	; (80115dc <tcp_input+0x258>)
 80113e2:	2106      	movs	r1, #6
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7fc fa67 	bl	800d8b8 <ip_chksum_pseudo>
 80113ea:	4603      	mov	r3, r0
 80113ec:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 80113ee:	8a3b      	ldrh	r3, [r7, #16]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f040 83c5 	bne.w	8011b80 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80113f6:	4b76      	ldr	r3, [pc, #472]	; (80115d0 <tcp_input+0x24c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	899b      	ldrh	r3, [r3, #12]
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	4618      	mov	r0, r3
 8011400:	f7fc f928 	bl	800d654 <lwip_htons>
 8011404:	4603      	mov	r3, r0
 8011406:	0b1b      	lsrs	r3, r3, #12
 8011408:	b29b      	uxth	r3, r3
 801140a:	b2db      	uxtb	r3, r3
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011410:	7bfb      	ldrb	r3, [r7, #15]
 8011412:	2b13      	cmp	r3, #19
 8011414:	f240 83b6 	bls.w	8011b84 <tcp_input+0x800>
 8011418:	7bfb      	ldrb	r3, [r7, #15]
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	891b      	ldrh	r3, [r3, #8]
 8011420:	429a      	cmp	r2, r3
 8011422:	f200 83af 	bhi.w	8011b84 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011426:	7bfb      	ldrb	r3, [r7, #15]
 8011428:	b29b      	uxth	r3, r3
 801142a:	3b14      	subs	r3, #20
 801142c:	b29a      	uxth	r2, r3
 801142e:	4b6c      	ldr	r3, [pc, #432]	; (80115e0 <tcp_input+0x25c>)
 8011430:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011432:	4b6c      	ldr	r3, [pc, #432]	; (80115e4 <tcp_input+0x260>)
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	895a      	ldrh	r2, [r3, #10]
 801143c:	7bfb      	ldrb	r3, [r7, #15]
 801143e:	b29b      	uxth	r3, r3
 8011440:	429a      	cmp	r2, r3
 8011442:	d309      	bcc.n	8011458 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011444:	4b66      	ldr	r3, [pc, #408]	; (80115e0 <tcp_input+0x25c>)
 8011446:	881a      	ldrh	r2, [r3, #0]
 8011448:	4b67      	ldr	r3, [pc, #412]	; (80115e8 <tcp_input+0x264>)
 801144a:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801144c:	7bfb      	ldrb	r3, [r7, #15]
 801144e:	4619      	mov	r1, r3
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7fd fd9b 	bl	800ef8c <pbuf_remove_header>
 8011456:	e04e      	b.n	80114f6 <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d105      	bne.n	801146c <tcp_input+0xe8>
 8011460:	4b58      	ldr	r3, [pc, #352]	; (80115c4 <tcp_input+0x240>)
 8011462:	22c2      	movs	r2, #194	; 0xc2
 8011464:	4961      	ldr	r1, [pc, #388]	; (80115ec <tcp_input+0x268>)
 8011466:	4859      	ldr	r0, [pc, #356]	; (80115cc <tcp_input+0x248>)
 8011468:	f00a fcde 	bl	801be28 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801146c:	2114      	movs	r1, #20
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7fd fd8c 	bl	800ef8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	895a      	ldrh	r2, [r3, #10]
 8011478:	4b5b      	ldr	r3, [pc, #364]	; (80115e8 <tcp_input+0x264>)
 801147a:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801147c:	4b58      	ldr	r3, [pc, #352]	; (80115e0 <tcp_input+0x25c>)
 801147e:	881a      	ldrh	r2, [r3, #0]
 8011480:	4b59      	ldr	r3, [pc, #356]	; (80115e8 <tcp_input+0x264>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011488:	4b57      	ldr	r3, [pc, #348]	; (80115e8 <tcp_input+0x264>)
 801148a:	881b      	ldrh	r3, [r3, #0]
 801148c:	4619      	mov	r1, r3
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7fd fd7c 	bl	800ef8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	89ba      	ldrh	r2, [r7, #12]
 801149c:	429a      	cmp	r2, r3
 801149e:	f200 8373 	bhi.w	8011b88 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	4a4e      	ldr	r2, [pc, #312]	; (80115e4 <tcp_input+0x260>)
 80114aa:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	89ba      	ldrh	r2, [r7, #12]
 80114b2:	4611      	mov	r1, r2
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7fd fd69 	bl	800ef8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	891a      	ldrh	r2, [r3, #8]
 80114be:	89bb      	ldrh	r3, [r7, #12]
 80114c0:	1ad3      	subs	r3, r2, r3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	895b      	ldrh	r3, [r3, #10]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d005      	beq.n	80114dc <tcp_input+0x158>
 80114d0:	4b3c      	ldr	r3, [pc, #240]	; (80115c4 <tcp_input+0x240>)
 80114d2:	22df      	movs	r2, #223	; 0xdf
 80114d4:	4946      	ldr	r1, [pc, #280]	; (80115f0 <tcp_input+0x26c>)
 80114d6:	483d      	ldr	r0, [pc, #244]	; (80115cc <tcp_input+0x248>)
 80114d8:	f00a fca6 	bl	801be28 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	891a      	ldrh	r2, [r3, #8]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	891b      	ldrh	r3, [r3, #8]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d005      	beq.n	80114f6 <tcp_input+0x172>
 80114ea:	4b36      	ldr	r3, [pc, #216]	; (80115c4 <tcp_input+0x240>)
 80114ec:	22e0      	movs	r2, #224	; 0xe0
 80114ee:	4941      	ldr	r1, [pc, #260]	; (80115f4 <tcp_input+0x270>)
 80114f0:	4836      	ldr	r0, [pc, #216]	; (80115cc <tcp_input+0x248>)
 80114f2:	f00a fc99 	bl	801be28 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80114f6:	4b36      	ldr	r3, [pc, #216]	; (80115d0 <tcp_input+0x24c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	881b      	ldrh	r3, [r3, #0]
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	4a34      	ldr	r2, [pc, #208]	; (80115d0 <tcp_input+0x24c>)
 8011500:	6814      	ldr	r4, [r2, #0]
 8011502:	4618      	mov	r0, r3
 8011504:	f7fc f8a6 	bl	800d654 <lwip_htons>
 8011508:	4603      	mov	r3, r0
 801150a:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801150c:	4b30      	ldr	r3, [pc, #192]	; (80115d0 <tcp_input+0x24c>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	885b      	ldrh	r3, [r3, #2]
 8011512:	b29b      	uxth	r3, r3
 8011514:	4a2e      	ldr	r2, [pc, #184]	; (80115d0 <tcp_input+0x24c>)
 8011516:	6814      	ldr	r4, [r2, #0]
 8011518:	4618      	mov	r0, r3
 801151a:	f7fc f89b 	bl	800d654 <lwip_htons>
 801151e:	4603      	mov	r3, r0
 8011520:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011522:	4b2b      	ldr	r3, [pc, #172]	; (80115d0 <tcp_input+0x24c>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	4a29      	ldr	r2, [pc, #164]	; (80115d0 <tcp_input+0x24c>)
 801152a:	6814      	ldr	r4, [r2, #0]
 801152c:	4618      	mov	r0, r3
 801152e:	f7fc f8a6 	bl	800d67e <lwip_htonl>
 8011532:	4603      	mov	r3, r0
 8011534:	6063      	str	r3, [r4, #4]
 8011536:	6863      	ldr	r3, [r4, #4]
 8011538:	4a2f      	ldr	r2, [pc, #188]	; (80115f8 <tcp_input+0x274>)
 801153a:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801153c:	4b24      	ldr	r3, [pc, #144]	; (80115d0 <tcp_input+0x24c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	689b      	ldr	r3, [r3, #8]
 8011542:	4a23      	ldr	r2, [pc, #140]	; (80115d0 <tcp_input+0x24c>)
 8011544:	6814      	ldr	r4, [r2, #0]
 8011546:	4618      	mov	r0, r3
 8011548:	f7fc f899 	bl	800d67e <lwip_htonl>
 801154c:	4603      	mov	r3, r0
 801154e:	60a3      	str	r3, [r4, #8]
 8011550:	68a3      	ldr	r3, [r4, #8]
 8011552:	4a2a      	ldr	r2, [pc, #168]	; (80115fc <tcp_input+0x278>)
 8011554:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011556:	4b1e      	ldr	r3, [pc, #120]	; (80115d0 <tcp_input+0x24c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	89db      	ldrh	r3, [r3, #14]
 801155c:	b29b      	uxth	r3, r3
 801155e:	4a1c      	ldr	r2, [pc, #112]	; (80115d0 <tcp_input+0x24c>)
 8011560:	6814      	ldr	r4, [r2, #0]
 8011562:	4618      	mov	r0, r3
 8011564:	f7fc f876 	bl	800d654 <lwip_htons>
 8011568:	4603      	mov	r3, r0
 801156a:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801156c:	4b18      	ldr	r3, [pc, #96]	; (80115d0 <tcp_input+0x24c>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	899b      	ldrh	r3, [r3, #12]
 8011572:	b29b      	uxth	r3, r3
 8011574:	4618      	mov	r0, r3
 8011576:	f7fc f86d 	bl	800d654 <lwip_htons>
 801157a:	4603      	mov	r3, r0
 801157c:	b2db      	uxtb	r3, r3
 801157e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011582:	b2da      	uxtb	r2, r3
 8011584:	4b1e      	ldr	r3, [pc, #120]	; (8011600 <tcp_input+0x27c>)
 8011586:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	891a      	ldrh	r2, [r3, #8]
 801158c:	4b1d      	ldr	r3, [pc, #116]	; (8011604 <tcp_input+0x280>)
 801158e:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011590:	4b1b      	ldr	r3, [pc, #108]	; (8011600 <tcp_input+0x27c>)
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	f003 0303 	and.w	r3, r3, #3
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00c      	beq.n	80115b6 <tcp_input+0x232>
    tcplen++;
 801159c:	4b19      	ldr	r3, [pc, #100]	; (8011604 <tcp_input+0x280>)
 801159e:	881b      	ldrh	r3, [r3, #0]
 80115a0:	3301      	adds	r3, #1
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	4b17      	ldr	r3, [pc, #92]	; (8011604 <tcp_input+0x280>)
 80115a6:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	891a      	ldrh	r2, [r3, #8]
 80115ac:	4b15      	ldr	r3, [pc, #84]	; (8011604 <tcp_input+0x280>)
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	f200 82eb 	bhi.w	8011b8c <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80115b6:	2300      	movs	r3, #0
 80115b8:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80115ba:	4b13      	ldr	r3, [pc, #76]	; (8011608 <tcp_input+0x284>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	61bb      	str	r3, [r7, #24]
 80115c0:	e09b      	b.n	80116fa <tcp_input+0x376>
 80115c2:	bf00      	nop
 80115c4:	08020534 	.word	0x08020534
 80115c8:	08020568 	.word	0x08020568
 80115cc:	08020580 	.word	0x08020580
 80115d0:	20013d04 	.word	0x20013d04
 80115d4:	2000a264 	.word	0x2000a264
 80115d8:	2000a278 	.word	0x2000a278
 80115dc:	2000a274 	.word	0x2000a274
 80115e0:	20013d08 	.word	0x20013d08
 80115e4:	20013d0c 	.word	0x20013d0c
 80115e8:	20013d0a 	.word	0x20013d0a
 80115ec:	080205a8 	.word	0x080205a8
 80115f0:	080205b8 	.word	0x080205b8
 80115f4:	080205c4 	.word	0x080205c4
 80115f8:	20013d14 	.word	0x20013d14
 80115fc:	20013d18 	.word	0x20013d18
 8011600:	20013d20 	.word	0x20013d20
 8011604:	20013d1e 	.word	0x20013d1e
 8011608:	20013ce4 	.word	0x20013ce4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	7d1b      	ldrb	r3, [r3, #20]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d105      	bne.n	8011620 <tcp_input+0x29c>
 8011614:	4b88      	ldr	r3, [pc, #544]	; (8011838 <tcp_input+0x4b4>)
 8011616:	22fb      	movs	r2, #251	; 0xfb
 8011618:	4988      	ldr	r1, [pc, #544]	; (801183c <tcp_input+0x4b8>)
 801161a:	4889      	ldr	r0, [pc, #548]	; (8011840 <tcp_input+0x4bc>)
 801161c:	f00a fc04 	bl	801be28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	7d1b      	ldrb	r3, [r3, #20]
 8011624:	2b0a      	cmp	r3, #10
 8011626:	d105      	bne.n	8011634 <tcp_input+0x2b0>
 8011628:	4b83      	ldr	r3, [pc, #524]	; (8011838 <tcp_input+0x4b4>)
 801162a:	22fc      	movs	r2, #252	; 0xfc
 801162c:	4985      	ldr	r1, [pc, #532]	; (8011844 <tcp_input+0x4c0>)
 801162e:	4884      	ldr	r0, [pc, #528]	; (8011840 <tcp_input+0x4bc>)
 8011630:	f00a fbfa 	bl	801be28 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	7d1b      	ldrb	r3, [r3, #20]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d105      	bne.n	8011648 <tcp_input+0x2c4>
 801163c:	4b7e      	ldr	r3, [pc, #504]	; (8011838 <tcp_input+0x4b4>)
 801163e:	22fd      	movs	r2, #253	; 0xfd
 8011640:	4981      	ldr	r1, [pc, #516]	; (8011848 <tcp_input+0x4c4>)
 8011642:	487f      	ldr	r0, [pc, #508]	; (8011840 <tcp_input+0x4bc>)
 8011644:	f00a fbf0 	bl	801be28 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011648:	69bb      	ldr	r3, [r7, #24]
 801164a:	7a1b      	ldrb	r3, [r3, #8]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d00c      	beq.n	801166a <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	7a1a      	ldrb	r2, [r3, #8]
 8011654:	4b7d      	ldr	r3, [pc, #500]	; (801184c <tcp_input+0x4c8>)
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801165c:	3301      	adds	r3, #1
 801165e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011660:	429a      	cmp	r2, r3
 8011662:	d002      	beq.n	801166a <tcp_input+0x2e6>
      prev = pcb;
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	61fb      	str	r3, [r7, #28]
      continue;
 8011668:	e044      	b.n	80116f4 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	8b1a      	ldrh	r2, [r3, #24]
 801166e:	4b78      	ldr	r3, [pc, #480]	; (8011850 <tcp_input+0x4cc>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	881b      	ldrh	r3, [r3, #0]
 8011674:	b29b      	uxth	r3, r3
 8011676:	429a      	cmp	r2, r3
 8011678:	d13a      	bne.n	80116f0 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	8ada      	ldrh	r2, [r3, #22]
 801167e:	4b74      	ldr	r3, [pc, #464]	; (8011850 <tcp_input+0x4cc>)
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	885b      	ldrh	r3, [r3, #2]
 8011684:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011686:	429a      	cmp	r2, r3
 8011688:	d132      	bne.n	80116f0 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	4b6f      	ldr	r3, [pc, #444]	; (801184c <tcp_input+0x4c8>)
 8011690:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011692:	429a      	cmp	r2, r3
 8011694:	d12c      	bne.n	80116f0 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	4b6c      	ldr	r3, [pc, #432]	; (801184c <tcp_input+0x4c8>)
 801169c:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801169e:	429a      	cmp	r2, r3
 80116a0:	d126      	bne.n	80116f0 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	69ba      	ldr	r2, [r7, #24]
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d106      	bne.n	80116ba <tcp_input+0x336>
 80116ac:	4b62      	ldr	r3, [pc, #392]	; (8011838 <tcp_input+0x4b4>)
 80116ae:	f240 120d 	movw	r2, #269	; 0x10d
 80116b2:	4968      	ldr	r1, [pc, #416]	; (8011854 <tcp_input+0x4d0>)
 80116b4:	4862      	ldr	r0, [pc, #392]	; (8011840 <tcp_input+0x4bc>)
 80116b6:	f00a fbb7 	bl	801be28 <iprintf>
      if (prev != NULL) {
 80116ba:	69fb      	ldr	r3, [r7, #28]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00a      	beq.n	80116d6 <tcp_input+0x352>
        prev->next = pcb->next;
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	68da      	ldr	r2, [r3, #12]
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80116c8:	4b63      	ldr	r3, [pc, #396]	; (8011858 <tcp_input+0x4d4>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80116d0:	4a61      	ldr	r2, [pc, #388]	; (8011858 <tcp_input+0x4d4>)
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80116d6:	69bb      	ldr	r3, [r7, #24]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	429a      	cmp	r2, r3
 80116de:	d110      	bne.n	8011702 <tcp_input+0x37e>
 80116e0:	4b55      	ldr	r3, [pc, #340]	; (8011838 <tcp_input+0x4b4>)
 80116e2:	f240 1215 	movw	r2, #277	; 0x115
 80116e6:	495d      	ldr	r1, [pc, #372]	; (801185c <tcp_input+0x4d8>)
 80116e8:	4855      	ldr	r0, [pc, #340]	; (8011840 <tcp_input+0x4bc>)
 80116ea:	f00a fb9d 	bl	801be28 <iprintf>
      break;
 80116ee:	e008      	b.n	8011702 <tcp_input+0x37e>
    }
    prev = pcb;
 80116f0:	69bb      	ldr	r3, [r7, #24]
 80116f2:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116f4:	69bb      	ldr	r3, [r7, #24]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	61bb      	str	r3, [r7, #24]
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d185      	bne.n	801160c <tcp_input+0x288>
 8011700:	e000      	b.n	8011704 <tcp_input+0x380>
      break;
 8011702:	bf00      	nop
  }

  if (pcb == NULL) {
 8011704:	69bb      	ldr	r3, [r7, #24]
 8011706:	2b00      	cmp	r3, #0
 8011708:	f040 80b0 	bne.w	801186c <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801170c:	4b54      	ldr	r3, [pc, #336]	; (8011860 <tcp_input+0x4dc>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	61bb      	str	r3, [r7, #24]
 8011712:	e03f      	b.n	8011794 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	7d1b      	ldrb	r3, [r3, #20]
 8011718:	2b0a      	cmp	r3, #10
 801171a:	d006      	beq.n	801172a <tcp_input+0x3a6>
 801171c:	4b46      	ldr	r3, [pc, #280]	; (8011838 <tcp_input+0x4b4>)
 801171e:	f240 121f 	movw	r2, #287	; 0x11f
 8011722:	4950      	ldr	r1, [pc, #320]	; (8011864 <tcp_input+0x4e0>)
 8011724:	4846      	ldr	r0, [pc, #280]	; (8011840 <tcp_input+0x4bc>)
 8011726:	f00a fb7f 	bl	801be28 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	7a1b      	ldrb	r3, [r3, #8]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d009      	beq.n	8011746 <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011732:	69bb      	ldr	r3, [r7, #24]
 8011734:	7a1a      	ldrb	r2, [r3, #8]
 8011736:	4b45      	ldr	r3, [pc, #276]	; (801184c <tcp_input+0x4c8>)
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801173e:	3301      	adds	r3, #1
 8011740:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011742:	429a      	cmp	r2, r3
 8011744:	d122      	bne.n	801178c <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	8b1a      	ldrh	r2, [r3, #24]
 801174a:	4b41      	ldr	r3, [pc, #260]	; (8011850 <tcp_input+0x4cc>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	881b      	ldrh	r3, [r3, #0]
 8011750:	b29b      	uxth	r3, r3
 8011752:	429a      	cmp	r2, r3
 8011754:	d11b      	bne.n	801178e <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 8011756:	69bb      	ldr	r3, [r7, #24]
 8011758:	8ada      	ldrh	r2, [r3, #22]
 801175a:	4b3d      	ldr	r3, [pc, #244]	; (8011850 <tcp_input+0x4cc>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	885b      	ldrh	r3, [r3, #2]
 8011760:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011762:	429a      	cmp	r2, r3
 8011764:	d113      	bne.n	801178e <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	4b38      	ldr	r3, [pc, #224]	; (801184c <tcp_input+0x4c8>)
 801176c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801176e:	429a      	cmp	r2, r3
 8011770:	d10d      	bne.n	801178e <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011772:	69bb      	ldr	r3, [r7, #24]
 8011774:	681a      	ldr	r2, [r3, #0]
 8011776:	4b35      	ldr	r3, [pc, #212]	; (801184c <tcp_input+0x4c8>)
 8011778:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801177a:	429a      	cmp	r2, r3
 801177c:	d107      	bne.n	801178e <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801177e:	69b8      	ldr	r0, [r7, #24]
 8011780:	f000 fb5e 	bl	8011e40 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011784:	6878      	ldr	r0, [r7, #4]
 8011786:	f7fd fc87 	bl	800f098 <pbuf_free>
        return;
 801178a:	e205      	b.n	8011b98 <tcp_input+0x814>
        continue;
 801178c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	61bb      	str	r3, [r7, #24]
 8011794:	69bb      	ldr	r3, [r7, #24]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d1bc      	bne.n	8011714 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801179e:	4b32      	ldr	r3, [pc, #200]	; (8011868 <tcp_input+0x4e4>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	617b      	str	r3, [r7, #20]
 80117a4:	e02a      	b.n	80117fc <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	7a1b      	ldrb	r3, [r3, #8]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00c      	beq.n	80117c8 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	7a1a      	ldrb	r2, [r3, #8]
 80117b2:	4b26      	ldr	r3, [pc, #152]	; (801184c <tcp_input+0x4c8>)
 80117b4:	685b      	ldr	r3, [r3, #4]
 80117b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80117ba:	3301      	adds	r3, #1
 80117bc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80117be:	429a      	cmp	r2, r3
 80117c0:	d002      	beq.n	80117c8 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	61fb      	str	r3, [r7, #28]
        continue;
 80117c6:	e016      	b.n	80117f6 <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	8ada      	ldrh	r2, [r3, #22]
 80117cc:	4b20      	ldr	r3, [pc, #128]	; (8011850 <tcp_input+0x4cc>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	885b      	ldrh	r3, [r3, #2]
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d10c      	bne.n	80117f2 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	4b1b      	ldr	r3, [pc, #108]	; (801184c <tcp_input+0x4c8>)
 80117de:	695b      	ldr	r3, [r3, #20]
 80117e0:	429a      	cmp	r2, r3
 80117e2:	d00f      	beq.n	8011804 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d00d      	beq.n	8011806 <tcp_input+0x482>
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d009      	beq.n	8011806 <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	617b      	str	r3, [r7, #20]
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1d1      	bne.n	80117a6 <tcp_input+0x422>
 8011802:	e000      	b.n	8011806 <tcp_input+0x482>
            break;
 8011804:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d02f      	beq.n	801186c <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00a      	beq.n	8011828 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	68da      	ldr	r2, [r3, #12]
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801181a:	4b13      	ldr	r3, [pc, #76]	; (8011868 <tcp_input+0x4e4>)
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011822:	4a11      	ldr	r2, [pc, #68]	; (8011868 <tcp_input+0x4e4>)
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011828:	6978      	ldr	r0, [r7, #20]
 801182a:	f000 fa0b 	bl	8011c44 <tcp_listen_input>
      }
      pbuf_free(p);
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f7fd fc32 	bl	800f098 <pbuf_free>
      return;
 8011834:	e1b0      	b.n	8011b98 <tcp_input+0x814>
 8011836:	bf00      	nop
 8011838:	08020534 	.word	0x08020534
 801183c:	080205e4 	.word	0x080205e4
 8011840:	08020580 	.word	0x08020580
 8011844:	0802060c 	.word	0x0802060c
 8011848:	08020638 	.word	0x08020638
 801184c:	2000a264 	.word	0x2000a264
 8011850:	20013d04 	.word	0x20013d04
 8011854:	08020660 	.word	0x08020660
 8011858:	20013ce4 	.word	0x20013ce4
 801185c:	0802068c 	.word	0x0802068c
 8011860:	20013ce8 	.word	0x20013ce8
 8011864:	080206b8 	.word	0x080206b8
 8011868:	20013ce0 	.word	0x20013ce0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	2b00      	cmp	r3, #0
 8011870:	f000 8158 	beq.w	8011b24 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011874:	4b95      	ldr	r3, [pc, #596]	; (8011acc <tcp_input+0x748>)
 8011876:	2200      	movs	r2, #0
 8011878:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	891a      	ldrh	r2, [r3, #8]
 801187e:	4b93      	ldr	r3, [pc, #588]	; (8011acc <tcp_input+0x748>)
 8011880:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011882:	4a92      	ldr	r2, [pc, #584]	; (8011acc <tcp_input+0x748>)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011888:	4b91      	ldr	r3, [pc, #580]	; (8011ad0 <tcp_input+0x74c>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4a8f      	ldr	r2, [pc, #572]	; (8011acc <tcp_input+0x748>)
 801188e:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8011890:	4b90      	ldr	r3, [pc, #576]	; (8011ad4 <tcp_input+0x750>)
 8011892:	2200      	movs	r2, #0
 8011894:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011896:	4b90      	ldr	r3, [pc, #576]	; (8011ad8 <tcp_input+0x754>)
 8011898:	2200      	movs	r2, #0
 801189a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801189c:	4b8f      	ldr	r3, [pc, #572]	; (8011adc <tcp_input+0x758>)
 801189e:	2200      	movs	r2, #0
 80118a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80118a2:	4b8f      	ldr	r3, [pc, #572]	; (8011ae0 <tcp_input+0x75c>)
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	f003 0308 	and.w	r3, r3, #8
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d006      	beq.n	80118bc <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	7b5b      	ldrb	r3, [r3, #13]
 80118b2:	f043 0301 	orr.w	r3, r3, #1
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80118bc:	69bb      	ldr	r3, [r7, #24]
 80118be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d017      	beq.n	80118f4 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80118c4:	69b8      	ldr	r0, [r7, #24]
 80118c6:	f7ff f8d9 	bl	8010a7c <tcp_process_refused_data>
 80118ca:	4603      	mov	r3, r0
 80118cc:	f113 0f0d 	cmn.w	r3, #13
 80118d0:	d007      	beq.n	80118e2 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00c      	beq.n	80118f4 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80118da:	4b82      	ldr	r3, [pc, #520]	; (8011ae4 <tcp_input+0x760>)
 80118dc:	881b      	ldrh	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d008      	beq.n	80118f4 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80118e2:	69bb      	ldr	r3, [r7, #24]
 80118e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f040 80e4 	bne.w	8011ab4 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80118ec:	69b8      	ldr	r0, [r7, #24]
 80118ee:	f003 fe95 	bl	801561c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80118f2:	e0df      	b.n	8011ab4 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 80118f4:	4a7c      	ldr	r2, [pc, #496]	; (8011ae8 <tcp_input+0x764>)
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80118fa:	69b8      	ldr	r0, [r7, #24]
 80118fc:	f000 fb1a 	bl	8011f34 <tcp_process>
 8011900:	4603      	mov	r3, r0
 8011902:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011904:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011908:	f113 0f0d 	cmn.w	r3, #13
 801190c:	f000 80d4 	beq.w	8011ab8 <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8011910:	4b71      	ldr	r3, [pc, #452]	; (8011ad8 <tcp_input+0x754>)
 8011912:	781b      	ldrb	r3, [r3, #0]
 8011914:	f003 0308 	and.w	r3, r3, #8
 8011918:	2b00      	cmp	r3, #0
 801191a:	d015      	beq.n	8011948 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011922:	2b00      	cmp	r3, #0
 8011924:	d008      	beq.n	8011938 <tcp_input+0x5b4>
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801192c:	69ba      	ldr	r2, [r7, #24]
 801192e:	6912      	ldr	r2, [r2, #16]
 8011930:	f06f 010d 	mvn.w	r1, #13
 8011934:	4610      	mov	r0, r2
 8011936:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011938:	69b9      	ldr	r1, [r7, #24]
 801193a:	486c      	ldr	r0, [pc, #432]	; (8011aec <tcp_input+0x768>)
 801193c:	f7ff fbaa 	bl	8011094 <tcp_pcb_remove>
        tcp_free(pcb);
 8011940:	69b8      	ldr	r0, [r7, #24]
 8011942:	f7fd fff9 	bl	800f938 <tcp_free>
 8011946:	e0da      	b.n	8011afe <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801194c:	4b63      	ldr	r3, [pc, #396]	; (8011adc <tcp_input+0x758>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d01d      	beq.n	8011990 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011954:	4b61      	ldr	r3, [pc, #388]	; (8011adc <tcp_input+0x758>)
 8011956:	881b      	ldrh	r3, [r3, #0]
 8011958:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011960:	2b00      	cmp	r3, #0
 8011962:	d00a      	beq.n	801197a <tcp_input+0x5f6>
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801196a:	69ba      	ldr	r2, [r7, #24]
 801196c:	6910      	ldr	r0, [r2, #16]
 801196e:	897a      	ldrh	r2, [r7, #10]
 8011970:	69b9      	ldr	r1, [r7, #24]
 8011972:	4798      	blx	r3
 8011974:	4603      	mov	r3, r0
 8011976:	74fb      	strb	r3, [r7, #19]
 8011978:	e001      	b.n	801197e <tcp_input+0x5fa>
 801197a:	2300      	movs	r3, #0
 801197c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801197e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011982:	f113 0f0d 	cmn.w	r3, #13
 8011986:	f000 8099 	beq.w	8011abc <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 801198a:	4b54      	ldr	r3, [pc, #336]	; (8011adc <tcp_input+0x758>)
 801198c:	2200      	movs	r2, #0
 801198e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011990:	69b8      	ldr	r0, [r7, #24]
 8011992:	f000 f917 	bl	8011bc4 <tcp_input_delayed_close>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	f040 8091 	bne.w	8011ac0 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801199e:	4b4d      	ldr	r3, [pc, #308]	; (8011ad4 <tcp_input+0x750>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d041      	beq.n	8011a2a <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d006      	beq.n	80119bc <tcp_input+0x638>
 80119ae:	4b50      	ldr	r3, [pc, #320]	; (8011af0 <tcp_input+0x76c>)
 80119b0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80119b4:	494f      	ldr	r1, [pc, #316]	; (8011af4 <tcp_input+0x770>)
 80119b6:	4850      	ldr	r0, [pc, #320]	; (8011af8 <tcp_input+0x774>)
 80119b8:	f00a fa36 	bl	801be28 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	8b5b      	ldrh	r3, [r3, #26]
 80119c0:	f003 0310 	and.w	r3, r3, #16
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d008      	beq.n	80119da <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80119c8:	4b42      	ldr	r3, [pc, #264]	; (8011ad4 <tcp_input+0x750>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4618      	mov	r0, r3
 80119ce:	f7fd fb63 	bl	800f098 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80119d2:	69b8      	ldr	r0, [r7, #24]
 80119d4:	f7fe fa98 	bl	800ff08 <tcp_abort>
            goto aborted;
 80119d8:	e091      	b.n	8011afe <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80119da:	69bb      	ldr	r3, [r7, #24]
 80119dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00c      	beq.n	80119fe <tcp_input+0x67a>
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	6918      	ldr	r0, [r3, #16]
 80119ee:	4b39      	ldr	r3, [pc, #228]	; (8011ad4 <tcp_input+0x750>)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	2300      	movs	r3, #0
 80119f4:	69b9      	ldr	r1, [r7, #24]
 80119f6:	47a0      	blx	r4
 80119f8:	4603      	mov	r3, r0
 80119fa:	74fb      	strb	r3, [r7, #19]
 80119fc:	e008      	b.n	8011a10 <tcp_input+0x68c>
 80119fe:	4b35      	ldr	r3, [pc, #212]	; (8011ad4 <tcp_input+0x750>)
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	2300      	movs	r3, #0
 8011a04:	69b9      	ldr	r1, [r7, #24]
 8011a06:	2000      	movs	r0, #0
 8011a08:	f7ff f910 	bl	8010c2c <tcp_recv_null>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011a10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a14:	f113 0f0d 	cmn.w	r3, #13
 8011a18:	d054      	beq.n	8011ac4 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011a1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011a22:	4b2c      	ldr	r3, [pc, #176]	; (8011ad4 <tcp_input+0x750>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011a2a:	4b2b      	ldr	r3, [pc, #172]	; (8011ad8 <tcp_input+0x754>)
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	f003 0320 	and.w	r3, r3, #32
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d031      	beq.n	8011a9a <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d009      	beq.n	8011a52 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a42:	7b5a      	ldrb	r2, [r3, #13]
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a48:	f042 0220 	orr.w	r2, r2, #32
 8011a4c:	b2d2      	uxtb	r2, r2
 8011a4e:	735a      	strb	r2, [r3, #13]
 8011a50:	e023      	b.n	8011a9a <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a56:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d005      	beq.n	8011a6a <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a62:	3301      	adds	r3, #1
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d00b      	beq.n	8011a8c <tcp_input+0x708>
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	6918      	ldr	r0, [r3, #16]
 8011a7e:	2300      	movs	r3, #0
 8011a80:	2200      	movs	r2, #0
 8011a82:	69b9      	ldr	r1, [r7, #24]
 8011a84:	47a0      	blx	r4
 8011a86:	4603      	mov	r3, r0
 8011a88:	74fb      	strb	r3, [r7, #19]
 8011a8a:	e001      	b.n	8011a90 <tcp_input+0x70c>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a94:	f113 0f0d 	cmn.w	r3, #13
 8011a98:	d016      	beq.n	8011ac8 <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a9a:	4b13      	ldr	r3, [pc, #76]	; (8011ae8 <tcp_input+0x764>)
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011aa0:	69b8      	ldr	r0, [r7, #24]
 8011aa2:	f000 f88f 	bl	8011bc4 <tcp_input_delayed_close>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d127      	bne.n	8011afc <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011aac:	69b8      	ldr	r0, [r7, #24]
 8011aae:	f002 ff81 	bl	80149b4 <tcp_output>
 8011ab2:	e024      	b.n	8011afe <tcp_input+0x77a>
        goto aborted;
 8011ab4:	bf00      	nop
 8011ab6:	e022      	b.n	8011afe <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011ab8:	bf00      	nop
 8011aba:	e020      	b.n	8011afe <tcp_input+0x77a>
              goto aborted;
 8011abc:	bf00      	nop
 8011abe:	e01e      	b.n	8011afe <tcp_input+0x77a>
          goto aborted;
 8011ac0:	bf00      	nop
 8011ac2:	e01c      	b.n	8011afe <tcp_input+0x77a>
            goto aborted;
 8011ac4:	bf00      	nop
 8011ac6:	e01a      	b.n	8011afe <tcp_input+0x77a>
              goto aborted;
 8011ac8:	bf00      	nop
 8011aca:	e018      	b.n	8011afe <tcp_input+0x77a>
 8011acc:	20013cf0 	.word	0x20013cf0
 8011ad0:	20013d04 	.word	0x20013d04
 8011ad4:	20013d24 	.word	0x20013d24
 8011ad8:	20013d21 	.word	0x20013d21
 8011adc:	20013d1c 	.word	0x20013d1c
 8011ae0:	20013d20 	.word	0x20013d20
 8011ae4:	20013d1e 	.word	0x20013d1e
 8011ae8:	20013d28 	.word	0x20013d28
 8011aec:	20013ce4 	.word	0x20013ce4
 8011af0:	08020534 	.word	0x08020534
 8011af4:	080206e8 	.word	0x080206e8
 8011af8:	08020580 	.word	0x08020580
          goto aborted;
 8011afc:	bf00      	nop
    tcp_input_pcb = NULL;
 8011afe:	4b28      	ldr	r3, [pc, #160]	; (8011ba0 <tcp_input+0x81c>)
 8011b00:	2200      	movs	r2, #0
 8011b02:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011b04:	4b27      	ldr	r3, [pc, #156]	; (8011ba4 <tcp_input+0x820>)
 8011b06:	2200      	movs	r2, #0
 8011b08:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011b0a:	4b27      	ldr	r3, [pc, #156]	; (8011ba8 <tcp_input+0x824>)
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d041      	beq.n	8011b96 <tcp_input+0x812>
      pbuf_free(inseg.p);
 8011b12:	4b25      	ldr	r3, [pc, #148]	; (8011ba8 <tcp_input+0x824>)
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7fd fabe 	bl	800f098 <pbuf_free>
      inseg.p = NULL;
 8011b1c:	4b22      	ldr	r3, [pc, #136]	; (8011ba8 <tcp_input+0x824>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011b22:	e038      	b.n	8011b96 <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011b24:	4b21      	ldr	r3, [pc, #132]	; (8011bac <tcp_input+0x828>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	899b      	ldrh	r3, [r3, #12]
 8011b2a:	b29b      	uxth	r3, r3
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fb fd91 	bl	800d654 <lwip_htons>
 8011b32:	4603      	mov	r3, r0
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	f003 0304 	and.w	r3, r3, #4
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d118      	bne.n	8011b70 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b3e:	4b1c      	ldr	r3, [pc, #112]	; (8011bb0 <tcp_input+0x82c>)
 8011b40:	6819      	ldr	r1, [r3, #0]
 8011b42:	4b1c      	ldr	r3, [pc, #112]	; (8011bb4 <tcp_input+0x830>)
 8011b44:	881b      	ldrh	r3, [r3, #0]
 8011b46:	461a      	mov	r2, r3
 8011b48:	4b1b      	ldr	r3, [pc, #108]	; (8011bb8 <tcp_input+0x834>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b4e:	4b17      	ldr	r3, [pc, #92]	; (8011bac <tcp_input+0x828>)
 8011b50:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b52:	885b      	ldrh	r3, [r3, #2]
 8011b54:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b56:	4a15      	ldr	r2, [pc, #84]	; (8011bac <tcp_input+0x828>)
 8011b58:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b5a:	8812      	ldrh	r2, [r2, #0]
 8011b5c:	b292      	uxth	r2, r2
 8011b5e:	9202      	str	r2, [sp, #8]
 8011b60:	9301      	str	r3, [sp, #4]
 8011b62:	4b16      	ldr	r3, [pc, #88]	; (8011bbc <tcp_input+0x838>)
 8011b64:	9300      	str	r3, [sp, #0]
 8011b66:	4b16      	ldr	r3, [pc, #88]	; (8011bc0 <tcp_input+0x83c>)
 8011b68:	4602      	mov	r2, r0
 8011b6a:	2000      	movs	r0, #0
 8011b6c:	f003 fd04 	bl	8015578 <tcp_rst>
    pbuf_free(p);
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f7fd fa91 	bl	800f098 <pbuf_free>
  return;
 8011b76:	e00e      	b.n	8011b96 <tcp_input+0x812>
    goto dropped;
 8011b78:	bf00      	nop
 8011b7a:	e008      	b.n	8011b8e <tcp_input+0x80a>
    goto dropped;
 8011b7c:	bf00      	nop
 8011b7e:	e006      	b.n	8011b8e <tcp_input+0x80a>
      goto dropped;
 8011b80:	bf00      	nop
 8011b82:	e004      	b.n	8011b8e <tcp_input+0x80a>
    goto dropped;
 8011b84:	bf00      	nop
 8011b86:	e002      	b.n	8011b8e <tcp_input+0x80a>
      goto dropped;
 8011b88:	bf00      	nop
 8011b8a:	e000      	b.n	8011b8e <tcp_input+0x80a>
      goto dropped;
 8011b8c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011b8e:	6878      	ldr	r0, [r7, #4]
 8011b90:	f7fd fa82 	bl	800f098 <pbuf_free>
 8011b94:	e000      	b.n	8011b98 <tcp_input+0x814>
  return;
 8011b96:	bf00      	nop
}
 8011b98:	3724      	adds	r7, #36	; 0x24
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd90      	pop	{r4, r7, pc}
 8011b9e:	bf00      	nop
 8011ba0:	20013d28 	.word	0x20013d28
 8011ba4:	20013d24 	.word	0x20013d24
 8011ba8:	20013cf0 	.word	0x20013cf0
 8011bac:	20013d04 	.word	0x20013d04
 8011bb0:	20013d18 	.word	0x20013d18
 8011bb4:	20013d1e 	.word	0x20013d1e
 8011bb8:	20013d14 	.word	0x20013d14
 8011bbc:	2000a274 	.word	0x2000a274
 8011bc0:	2000a278 	.word	0x2000a278

08011bc4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b082      	sub	sp, #8
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d106      	bne.n	8011be0 <tcp_input_delayed_close+0x1c>
 8011bd2:	4b17      	ldr	r3, [pc, #92]	; (8011c30 <tcp_input_delayed_close+0x6c>)
 8011bd4:	f240 225a 	movw	r2, #602	; 0x25a
 8011bd8:	4916      	ldr	r1, [pc, #88]	; (8011c34 <tcp_input_delayed_close+0x70>)
 8011bda:	4817      	ldr	r0, [pc, #92]	; (8011c38 <tcp_input_delayed_close+0x74>)
 8011bdc:	f00a f924 	bl	801be28 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011be0:	4b16      	ldr	r3, [pc, #88]	; (8011c3c <tcp_input_delayed_close+0x78>)
 8011be2:	781b      	ldrb	r3, [r3, #0]
 8011be4:	f003 0310 	and.w	r3, r3, #16
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d01c      	beq.n	8011c26 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	8b5b      	ldrh	r3, [r3, #26]
 8011bf0:	f003 0310 	and.w	r3, r3, #16
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d10d      	bne.n	8011c14 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d008      	beq.n	8011c14 <tcp_input_delayed_close+0x50>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	6912      	ldr	r2, [r2, #16]
 8011c0c:	f06f 010e 	mvn.w	r1, #14
 8011c10:	4610      	mov	r0, r2
 8011c12:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	480a      	ldr	r0, [pc, #40]	; (8011c40 <tcp_input_delayed_close+0x7c>)
 8011c18:	f7ff fa3c 	bl	8011094 <tcp_pcb_remove>
    tcp_free(pcb);
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7fd fe8b 	bl	800f938 <tcp_free>
    return 1;
 8011c22:	2301      	movs	r3, #1
 8011c24:	e000      	b.n	8011c28 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	08020534 	.word	0x08020534
 8011c34:	08020704 	.word	0x08020704
 8011c38:	08020580 	.word	0x08020580
 8011c3c:	20013d21 	.word	0x20013d21
 8011c40:	20013ce4 	.word	0x20013ce4

08011c44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011c44:	b590      	push	{r4, r7, lr}
 8011c46:	b08b      	sub	sp, #44	; 0x2c
 8011c48:	af04      	add	r7, sp, #16
 8011c4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011c4c:	4b6f      	ldr	r3, [pc, #444]	; (8011e0c <tcp_listen_input+0x1c8>)
 8011c4e:	781b      	ldrb	r3, [r3, #0]
 8011c50:	f003 0304 	and.w	r3, r3, #4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	f040 80d2 	bne.w	8011dfe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d106      	bne.n	8011c6e <tcp_listen_input+0x2a>
 8011c60:	4b6b      	ldr	r3, [pc, #428]	; (8011e10 <tcp_listen_input+0x1cc>)
 8011c62:	f240 2281 	movw	r2, #641	; 0x281
 8011c66:	496b      	ldr	r1, [pc, #428]	; (8011e14 <tcp_listen_input+0x1d0>)
 8011c68:	486b      	ldr	r0, [pc, #428]	; (8011e18 <tcp_listen_input+0x1d4>)
 8011c6a:	f00a f8dd 	bl	801be28 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011c6e:	4b67      	ldr	r3, [pc, #412]	; (8011e0c <tcp_listen_input+0x1c8>)
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	f003 0310 	and.w	r3, r3, #16
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d019      	beq.n	8011cae <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c7a:	4b68      	ldr	r3, [pc, #416]	; (8011e1c <tcp_listen_input+0x1d8>)
 8011c7c:	6819      	ldr	r1, [r3, #0]
 8011c7e:	4b68      	ldr	r3, [pc, #416]	; (8011e20 <tcp_listen_input+0x1dc>)
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	461a      	mov	r2, r3
 8011c84:	4b67      	ldr	r3, [pc, #412]	; (8011e24 <tcp_listen_input+0x1e0>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c8a:	4b67      	ldr	r3, [pc, #412]	; (8011e28 <tcp_listen_input+0x1e4>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c8e:	885b      	ldrh	r3, [r3, #2]
 8011c90:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c92:	4a65      	ldr	r2, [pc, #404]	; (8011e28 <tcp_listen_input+0x1e4>)
 8011c94:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c96:	8812      	ldrh	r2, [r2, #0]
 8011c98:	b292      	uxth	r2, r2
 8011c9a:	9202      	str	r2, [sp, #8]
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	4b63      	ldr	r3, [pc, #396]	; (8011e2c <tcp_listen_input+0x1e8>)
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	4b63      	ldr	r3, [pc, #396]	; (8011e30 <tcp_listen_input+0x1ec>)
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f003 fc66 	bl	8015578 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011cac:	e0a9      	b.n	8011e02 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011cae:	4b57      	ldr	r3, [pc, #348]	; (8011e0c <tcp_listen_input+0x1c8>)
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	f003 0302 	and.w	r3, r3, #2
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 80a3 	beq.w	8011e02 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	7d5b      	ldrb	r3, [r3, #21]
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7ff f8d7 	bl	8010e74 <tcp_alloc>
 8011cc6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d111      	bne.n	8011cf2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d00a      	beq.n	8011cec <tcp_listen_input+0xa8>
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	699b      	ldr	r3, [r3, #24]
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	6910      	ldr	r0, [r2, #16]
 8011cde:	f04f 32ff 	mov.w	r2, #4294967295
 8011ce2:	2100      	movs	r1, #0
 8011ce4:	4798      	blx	r3
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	73bb      	strb	r3, [r7, #14]
      return;
 8011cea:	e08b      	b.n	8011e04 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011cec:	23f0      	movs	r3, #240	; 0xf0
 8011cee:	73bb      	strb	r3, [r7, #14]
      return;
 8011cf0:	e088      	b.n	8011e04 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011cf2:	4b50      	ldr	r3, [pc, #320]	; (8011e34 <tcp_listen_input+0x1f0>)
 8011cf4:	695a      	ldr	r2, [r3, #20]
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011cfa:	4b4e      	ldr	r3, [pc, #312]	; (8011e34 <tcp_listen_input+0x1f0>)
 8011cfc:	691a      	ldr	r2, [r3, #16]
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	8ada      	ldrh	r2, [r3, #22]
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011d0a:	4b47      	ldr	r3, [pc, #284]	; (8011e28 <tcp_listen_input+0x1e4>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	2203      	movs	r2, #3
 8011d1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011d1c:	4b41      	ldr	r3, [pc, #260]	; (8011e24 <tcp_listen_input+0x1e0>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011d2e:	6978      	ldr	r0, [r7, #20]
 8011d30:	f7ff fa44 	bl	80111bc <tcp_next_iss>
 8011d34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	693a      	ldr	r2, [r7, #16]
 8011d3a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	693a      	ldr	r2, [r7, #16]
 8011d40:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	693a      	ldr	r2, [r7, #16]
 8011d46:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011d48:	697b      	ldr	r3, [r7, #20]
 8011d4a:	693a      	ldr	r2, [r7, #16]
 8011d4c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011d4e:	4b35      	ldr	r3, [pc, #212]	; (8011e24 <tcp_listen_input+0x1e0>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	1e5a      	subs	r2, r3, #1
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	691a      	ldr	r2, [r3, #16]
 8011d5c:	697b      	ldr	r3, [r7, #20]
 8011d5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	7a5b      	ldrb	r3, [r3, #9]
 8011d6a:	f003 030c 	and.w	r3, r3, #12
 8011d6e:	b2da      	uxtb	r2, r3
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	7a1a      	ldrb	r2, [r3, #8]
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011d7c:	4b2e      	ldr	r3, [pc, #184]	; (8011e38 <tcp_listen_input+0x1f4>)
 8011d7e:	681a      	ldr	r2, [r3, #0]
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	60da      	str	r2, [r3, #12]
 8011d84:	4a2c      	ldr	r2, [pc, #176]	; (8011e38 <tcp_listen_input+0x1f4>)
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	f003 fdb7 	bl	80158fc <tcp_timer_needed>
 8011d8e:	4b2b      	ldr	r3, [pc, #172]	; (8011e3c <tcp_listen_input+0x1f8>)
 8011d90:	2201      	movs	r2, #1
 8011d92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011d94:	6978      	ldr	r0, [r7, #20]
 8011d96:	f001 fd8f 	bl	80138b8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011d9a:	4b23      	ldr	r3, [pc, #140]	; (8011e28 <tcp_listen_input+0x1e4>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	89db      	ldrh	r3, [r3, #14]
 8011da0:	b29a      	uxth	r2, r3
 8011da2:	697b      	ldr	r3, [r7, #20]
 8011da4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011dae:	697b      	ldr	r3, [r7, #20]
 8011db0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f007 fcb3 	bl	8019728 <ip4_route>
 8011dc2:	4601      	mov	r1, r0
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	3304      	adds	r3, #4
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f7ff fa1c 	bl	8011208 <tcp_eff_send_mss_netif>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	461a      	mov	r2, r3
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011dd8:	2112      	movs	r1, #18
 8011dda:	6978      	ldr	r0, [r7, #20]
 8011ddc:	f002 fcfc 	bl	80147d8 <tcp_enqueue_flags>
 8011de0:	4603      	mov	r3, r0
 8011de2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d004      	beq.n	8011df6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011dec:	2100      	movs	r1, #0
 8011dee:	6978      	ldr	r0, [r7, #20]
 8011df0:	f7fd ffcc 	bl	800fd8c <tcp_abandon>
      return;
 8011df4:	e006      	b.n	8011e04 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011df6:	6978      	ldr	r0, [r7, #20]
 8011df8:	f002 fddc 	bl	80149b4 <tcp_output>
  return;
 8011dfc:	e001      	b.n	8011e02 <tcp_listen_input+0x1be>
    return;
 8011dfe:	bf00      	nop
 8011e00:	e000      	b.n	8011e04 <tcp_listen_input+0x1c0>
  return;
 8011e02:	bf00      	nop
}
 8011e04:	371c      	adds	r7, #28
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd90      	pop	{r4, r7, pc}
 8011e0a:	bf00      	nop
 8011e0c:	20013d20 	.word	0x20013d20
 8011e10:	08020534 	.word	0x08020534
 8011e14:	0802072c 	.word	0x0802072c
 8011e18:	08020580 	.word	0x08020580
 8011e1c:	20013d18 	.word	0x20013d18
 8011e20:	20013d1e 	.word	0x20013d1e
 8011e24:	20013d14 	.word	0x20013d14
 8011e28:	20013d04 	.word	0x20013d04
 8011e2c:	2000a274 	.word	0x2000a274
 8011e30:	2000a278 	.word	0x2000a278
 8011e34:	2000a264 	.word	0x2000a264
 8011e38:	20013ce4 	.word	0x20013ce4
 8011e3c:	20013cec 	.word	0x20013cec

08011e40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b086      	sub	sp, #24
 8011e44:	af04      	add	r7, sp, #16
 8011e46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011e48:	4b2f      	ldr	r3, [pc, #188]	; (8011f08 <tcp_timewait_input+0xc8>)
 8011e4a:	781b      	ldrb	r3, [r3, #0]
 8011e4c:	f003 0304 	and.w	r3, r3, #4
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d153      	bne.n	8011efc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <tcp_timewait_input+0x28>
 8011e5a:	4b2c      	ldr	r3, [pc, #176]	; (8011f0c <tcp_timewait_input+0xcc>)
 8011e5c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011e60:	492b      	ldr	r1, [pc, #172]	; (8011f10 <tcp_timewait_input+0xd0>)
 8011e62:	482c      	ldr	r0, [pc, #176]	; (8011f14 <tcp_timewait_input+0xd4>)
 8011e64:	f009 ffe0 	bl	801be28 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011e68:	4b27      	ldr	r3, [pc, #156]	; (8011f08 <tcp_timewait_input+0xc8>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	f003 0302 	and.w	r3, r3, #2
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d02a      	beq.n	8011eca <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011e74:	4b28      	ldr	r3, [pc, #160]	; (8011f18 <tcp_timewait_input+0xd8>)
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	db2d      	blt.n	8011ede <tcp_timewait_input+0x9e>
 8011e82:	4b25      	ldr	r3, [pc, #148]	; (8011f18 <tcp_timewait_input+0xd8>)
 8011e84:	681a      	ldr	r2, [r3, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8a:	6879      	ldr	r1, [r7, #4]
 8011e8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e8e:	440b      	add	r3, r1
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dc23      	bgt.n	8011ede <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e96:	4b21      	ldr	r3, [pc, #132]	; (8011f1c <tcp_timewait_input+0xdc>)
 8011e98:	6819      	ldr	r1, [r3, #0]
 8011e9a:	4b21      	ldr	r3, [pc, #132]	; (8011f20 <tcp_timewait_input+0xe0>)
 8011e9c:	881b      	ldrh	r3, [r3, #0]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	4b1d      	ldr	r3, [pc, #116]	; (8011f18 <tcp_timewait_input+0xd8>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ea6:	4b1f      	ldr	r3, [pc, #124]	; (8011f24 <tcp_timewait_input+0xe4>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011eaa:	885b      	ldrh	r3, [r3, #2]
 8011eac:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011eae:	4a1d      	ldr	r2, [pc, #116]	; (8011f24 <tcp_timewait_input+0xe4>)
 8011eb0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011eb2:	8812      	ldrh	r2, [r2, #0]
 8011eb4:	b292      	uxth	r2, r2
 8011eb6:	9202      	str	r2, [sp, #8]
 8011eb8:	9301      	str	r3, [sp, #4]
 8011eba:	4b1b      	ldr	r3, [pc, #108]	; (8011f28 <tcp_timewait_input+0xe8>)
 8011ebc:	9300      	str	r3, [sp, #0]
 8011ebe:	4b1b      	ldr	r3, [pc, #108]	; (8011f2c <tcp_timewait_input+0xec>)
 8011ec0:	4602      	mov	r2, r0
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f003 fb58 	bl	8015578 <tcp_rst>
      return;
 8011ec8:	e01b      	b.n	8011f02 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011eca:	4b0f      	ldr	r3, [pc, #60]	; (8011f08 <tcp_timewait_input+0xc8>)
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	f003 0301 	and.w	r3, r3, #1
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d003      	beq.n	8011ede <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011ed6:	4b16      	ldr	r3, [pc, #88]	; (8011f30 <tcp_timewait_input+0xf0>)
 8011ed8:	681a      	ldr	r2, [r3, #0]
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011ede:	4b10      	ldr	r3, [pc, #64]	; (8011f20 <tcp_timewait_input+0xe0>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00c      	beq.n	8011f00 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8b5b      	ldrh	r3, [r3, #26]
 8011eea:	f043 0302 	orr.w	r3, r3, #2
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f002 fd5d 	bl	80149b4 <tcp_output>
  }
  return;
 8011efa:	e001      	b.n	8011f00 <tcp_timewait_input+0xc0>
    return;
 8011efc:	bf00      	nop
 8011efe:	e000      	b.n	8011f02 <tcp_timewait_input+0xc2>
  return;
 8011f00:	bf00      	nop
}
 8011f02:	3708      	adds	r7, #8
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd80      	pop	{r7, pc}
 8011f08:	20013d20 	.word	0x20013d20
 8011f0c:	08020534 	.word	0x08020534
 8011f10:	0802074c 	.word	0x0802074c
 8011f14:	08020580 	.word	0x08020580
 8011f18:	20013d14 	.word	0x20013d14
 8011f1c:	20013d18 	.word	0x20013d18
 8011f20:	20013d1e 	.word	0x20013d1e
 8011f24:	20013d04 	.word	0x20013d04
 8011f28:	2000a274 	.word	0x2000a274
 8011f2c:	2000a278 	.word	0x2000a278
 8011f30:	20013cd8 	.word	0x20013cd8

08011f34 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011f34:	b590      	push	{r4, r7, lr}
 8011f36:	b08d      	sub	sp, #52	; 0x34
 8011f38:	af04      	add	r7, sp, #16
 8011f3a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8011f40:	2300      	movs	r3, #0
 8011f42:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d106      	bne.n	8011f58 <tcp_process+0x24>
 8011f4a:	4b9d      	ldr	r3, [pc, #628]	; (80121c0 <tcp_process+0x28c>)
 8011f4c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011f50:	499c      	ldr	r1, [pc, #624]	; (80121c4 <tcp_process+0x290>)
 8011f52:	489d      	ldr	r0, [pc, #628]	; (80121c8 <tcp_process+0x294>)
 8011f54:	f009 ff68 	bl	801be28 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011f58:	4b9c      	ldr	r3, [pc, #624]	; (80121cc <tcp_process+0x298>)
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	f003 0304 	and.w	r3, r3, #4
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d04e      	beq.n	8012002 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	7d1b      	ldrb	r3, [r3, #20]
 8011f68:	2b02      	cmp	r3, #2
 8011f6a:	d108      	bne.n	8011f7e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f70:	4b97      	ldr	r3, [pc, #604]	; (80121d0 <tcp_process+0x29c>)
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d123      	bne.n	8011fc0 <tcp_process+0x8c>
        acceptable = 1;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	77fb      	strb	r3, [r7, #31]
 8011f7c:	e020      	b.n	8011fc0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f82:	4b94      	ldr	r3, [pc, #592]	; (80121d4 <tcp_process+0x2a0>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d102      	bne.n	8011f90 <tcp_process+0x5c>
        acceptable = 1;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	77fb      	strb	r3, [r7, #31]
 8011f8e:	e017      	b.n	8011fc0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f90:	4b90      	ldr	r3, [pc, #576]	; (80121d4 <tcp_process+0x2a0>)
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	db10      	blt.n	8011fc0 <tcp_process+0x8c>
 8011f9e:	4b8d      	ldr	r3, [pc, #564]	; (80121d4 <tcp_process+0x2a0>)
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fa6:	6879      	ldr	r1, [r7, #4]
 8011fa8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011faa:	440b      	add	r3, r1
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	dc06      	bgt.n	8011fc0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	8b5b      	ldrh	r3, [r3, #26]
 8011fb6:	f043 0302 	orr.w	r3, r3, #2
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011fc0:	7ffb      	ldrb	r3, [r7, #31]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d01b      	beq.n	8011ffe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	7d1b      	ldrb	r3, [r3, #20]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d106      	bne.n	8011fdc <tcp_process+0xa8>
 8011fce:	4b7c      	ldr	r3, [pc, #496]	; (80121c0 <tcp_process+0x28c>)
 8011fd0:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011fd4:	4980      	ldr	r1, [pc, #512]	; (80121d8 <tcp_process+0x2a4>)
 8011fd6:	487c      	ldr	r0, [pc, #496]	; (80121c8 <tcp_process+0x294>)
 8011fd8:	f009 ff26 	bl	801be28 <iprintf>
      recv_flags |= TF_RESET;
 8011fdc:	4b7f      	ldr	r3, [pc, #508]	; (80121dc <tcp_process+0x2a8>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	f043 0308 	orr.w	r3, r3, #8
 8011fe4:	b2da      	uxtb	r2, r3
 8011fe6:	4b7d      	ldr	r3, [pc, #500]	; (80121dc <tcp_process+0x2a8>)
 8011fe8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	8b5b      	ldrh	r3, [r3, #26]
 8011fee:	f023 0301 	bic.w	r3, r3, #1
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011ff8:	f06f 030d 	mvn.w	r3, #13
 8011ffc:	e37a      	b.n	80126f4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011ffe:	2300      	movs	r3, #0
 8012000:	e378      	b.n	80126f4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8012002:	4b72      	ldr	r3, [pc, #456]	; (80121cc <tcp_process+0x298>)
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	f003 0302 	and.w	r3, r3, #2
 801200a:	2b00      	cmp	r3, #0
 801200c:	d010      	beq.n	8012030 <tcp_process+0xfc>
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	7d1b      	ldrb	r3, [r3, #20]
 8012012:	2b02      	cmp	r3, #2
 8012014:	d00c      	beq.n	8012030 <tcp_process+0xfc>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	7d1b      	ldrb	r3, [r3, #20]
 801201a:	2b03      	cmp	r3, #3
 801201c:	d008      	beq.n	8012030 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	8b5b      	ldrh	r3, [r3, #26]
 8012022:	f043 0302 	orr.w	r3, r3, #2
 8012026:	b29a      	uxth	r2, r3
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801202c:	2300      	movs	r3, #0
 801202e:	e361      	b.n	80126f4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	8b5b      	ldrh	r3, [r3, #26]
 8012034:	f003 0310 	and.w	r3, r3, #16
 8012038:	2b00      	cmp	r3, #0
 801203a:	d103      	bne.n	8012044 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801203c:	4b68      	ldr	r3, [pc, #416]	; (80121e0 <tcp_process+0x2ac>)
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f001 fc2f 	bl	80138b8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	7d1b      	ldrb	r3, [r3, #20]
 801205e:	3b02      	subs	r3, #2
 8012060:	2b07      	cmp	r3, #7
 8012062:	f200 8337 	bhi.w	80126d4 <tcp_process+0x7a0>
 8012066:	a201      	add	r2, pc, #4	; (adr r2, 801206c <tcp_process+0x138>)
 8012068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801206c:	0801208d 	.word	0x0801208d
 8012070:	080122bd 	.word	0x080122bd
 8012074:	08012435 	.word	0x08012435
 8012078:	0801245f 	.word	0x0801245f
 801207c:	08012583 	.word	0x08012583
 8012080:	08012435 	.word	0x08012435
 8012084:	0801260f 	.word	0x0801260f
 8012088:	0801269f 	.word	0x0801269f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801208c:	4b4f      	ldr	r3, [pc, #316]	; (80121cc <tcp_process+0x298>)
 801208e:	781b      	ldrb	r3, [r3, #0]
 8012090:	f003 0310 	and.w	r3, r3, #16
 8012094:	2b00      	cmp	r3, #0
 8012096:	f000 80e4 	beq.w	8012262 <tcp_process+0x32e>
 801209a:	4b4c      	ldr	r3, [pc, #304]	; (80121cc <tcp_process+0x298>)
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	f003 0302 	and.w	r3, r3, #2
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f000 80dd 	beq.w	8012262 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120ac:	1c5a      	adds	r2, r3, #1
 80120ae:	4b48      	ldr	r3, [pc, #288]	; (80121d0 <tcp_process+0x29c>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	f040 80d5 	bne.w	8012262 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80120b8:	4b46      	ldr	r3, [pc, #280]	; (80121d4 <tcp_process+0x2a0>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80120ca:	4b41      	ldr	r3, [pc, #260]	; (80121d0 <tcp_process+0x29c>)
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80120d2:	4b44      	ldr	r3, [pc, #272]	; (80121e4 <tcp_process+0x2b0>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	89db      	ldrh	r3, [r3, #14]
 80120d8:	b29a      	uxth	r2, r3
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80120ec:	4b39      	ldr	r3, [pc, #228]	; (80121d4 <tcp_process+0x2a0>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	1e5a      	subs	r2, r3, #1
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2204      	movs	r2, #4
 80120fa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	3304      	adds	r3, #4
 8012104:	4618      	mov	r0, r3
 8012106:	f007 fb0f 	bl	8019728 <ip4_route>
 801210a:	4601      	mov	r1, r0
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	3304      	adds	r3, #4
 8012110:	461a      	mov	r2, r3
 8012112:	4620      	mov	r0, r4
 8012114:	f7ff f878 	bl	8011208 <tcp_eff_send_mss_netif>
 8012118:	4603      	mov	r3, r0
 801211a:	461a      	mov	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012124:	009a      	lsls	r2, r3, #2
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801212a:	005b      	lsls	r3, r3, #1
 801212c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012130:	428b      	cmp	r3, r1
 8012132:	bf38      	it	cc
 8012134:	460b      	movcc	r3, r1
 8012136:	429a      	cmp	r2, r3
 8012138:	d204      	bcs.n	8012144 <tcp_process+0x210>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801213e:	009b      	lsls	r3, r3, #2
 8012140:	b29b      	uxth	r3, r3
 8012142:	e00d      	b.n	8012160 <tcp_process+0x22c>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012148:	005b      	lsls	r3, r3, #1
 801214a:	f241 121c 	movw	r2, #4380	; 0x111c
 801214e:	4293      	cmp	r3, r2
 8012150:	d904      	bls.n	801215c <tcp_process+0x228>
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012156:	005b      	lsls	r3, r3, #1
 8012158:	b29b      	uxth	r3, r3
 801215a:	e001      	b.n	8012160 <tcp_process+0x22c>
 801215c:	f241 131c 	movw	r3, #4380	; 0x111c
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801216c:	2b00      	cmp	r3, #0
 801216e:	d106      	bne.n	801217e <tcp_process+0x24a>
 8012170:	4b13      	ldr	r3, [pc, #76]	; (80121c0 <tcp_process+0x28c>)
 8012172:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012176:	491c      	ldr	r1, [pc, #112]	; (80121e8 <tcp_process+0x2b4>)
 8012178:	4813      	ldr	r0, [pc, #76]	; (80121c8 <tcp_process+0x294>)
 801217a:	f009 fe55 	bl	801be28 <iprintf>
        --pcb->snd_queuelen;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012184:	3b01      	subs	r3, #1
 8012186:	b29a      	uxth	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012192:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d12a      	bne.n	80121f0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801219e:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d106      	bne.n	80121b4 <tcp_process+0x280>
 80121a6:	4b06      	ldr	r3, [pc, #24]	; (80121c0 <tcp_process+0x28c>)
 80121a8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80121ac:	490f      	ldr	r1, [pc, #60]	; (80121ec <tcp_process+0x2b8>)
 80121ae:	4806      	ldr	r0, [pc, #24]	; (80121c8 <tcp_process+0x294>)
 80121b0:	f009 fe3a 	bl	801be28 <iprintf>
          pcb->unsent = rseg->next;
 80121b4:	697b      	ldr	r3, [r7, #20]
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80121bc:	e01c      	b.n	80121f8 <tcp_process+0x2c4>
 80121be:	bf00      	nop
 80121c0:	08020534 	.word	0x08020534
 80121c4:	0802076c 	.word	0x0802076c
 80121c8:	08020580 	.word	0x08020580
 80121cc:	20013d20 	.word	0x20013d20
 80121d0:	20013d18 	.word	0x20013d18
 80121d4:	20013d14 	.word	0x20013d14
 80121d8:	08020788 	.word	0x08020788
 80121dc:	20013d21 	.word	0x20013d21
 80121e0:	20013cd8 	.word	0x20013cd8
 80121e4:	20013d04 	.word	0x20013d04
 80121e8:	080207a8 	.word	0x080207a8
 80121ec:	080207c0 	.word	0x080207c0
        } else {
          pcb->unacked = rseg->next;
 80121f0:	697b      	ldr	r3, [r7, #20]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80121f8:	6978      	ldr	r0, [r7, #20]
 80121fa:	f7fe fcd2 	bl	8010ba2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012202:	2b00      	cmp	r3, #0
 8012204:	d104      	bne.n	8012210 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801220c:	861a      	strh	r2, [r3, #48]	; 0x30
 801220e:	e006      	b.n	801221e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2200      	movs	r2, #0
 8012214:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	2200      	movs	r2, #0
 801221a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00a      	beq.n	801223e <tcp_process+0x30a>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801222e:	687a      	ldr	r2, [r7, #4]
 8012230:	6910      	ldr	r0, [r2, #16]
 8012232:	2200      	movs	r2, #0
 8012234:	6879      	ldr	r1, [r7, #4]
 8012236:	4798      	blx	r3
 8012238:	4603      	mov	r3, r0
 801223a:	77bb      	strb	r3, [r7, #30]
 801223c:	e001      	b.n	8012242 <tcp_process+0x30e>
 801223e:	2300      	movs	r3, #0
 8012240:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8012242:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012246:	f113 0f0d 	cmn.w	r3, #13
 801224a:	d102      	bne.n	8012252 <tcp_process+0x31e>
          return ERR_ABRT;
 801224c:	f06f 030c 	mvn.w	r3, #12
 8012250:	e250      	b.n	80126f4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	8b5b      	ldrh	r3, [r3, #26]
 8012256:	f043 0302 	orr.w	r3, r3, #2
 801225a:	b29a      	uxth	r2, r3
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012260:	e23a      	b.n	80126d8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012262:	4b98      	ldr	r3, [pc, #608]	; (80124c4 <tcp_process+0x590>)
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	f003 0310 	and.w	r3, r3, #16
 801226a:	2b00      	cmp	r3, #0
 801226c:	f000 8234 	beq.w	80126d8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012270:	4b95      	ldr	r3, [pc, #596]	; (80124c8 <tcp_process+0x594>)
 8012272:	6819      	ldr	r1, [r3, #0]
 8012274:	4b95      	ldr	r3, [pc, #596]	; (80124cc <tcp_process+0x598>)
 8012276:	881b      	ldrh	r3, [r3, #0]
 8012278:	461a      	mov	r2, r3
 801227a:	4b95      	ldr	r3, [pc, #596]	; (80124d0 <tcp_process+0x59c>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012280:	4b94      	ldr	r3, [pc, #592]	; (80124d4 <tcp_process+0x5a0>)
 8012282:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012284:	885b      	ldrh	r3, [r3, #2]
 8012286:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012288:	4a92      	ldr	r2, [pc, #584]	; (80124d4 <tcp_process+0x5a0>)
 801228a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801228c:	8812      	ldrh	r2, [r2, #0]
 801228e:	b292      	uxth	r2, r2
 8012290:	9202      	str	r2, [sp, #8]
 8012292:	9301      	str	r3, [sp, #4]
 8012294:	4b90      	ldr	r3, [pc, #576]	; (80124d8 <tcp_process+0x5a4>)
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	4b90      	ldr	r3, [pc, #576]	; (80124dc <tcp_process+0x5a8>)
 801229a:	4602      	mov	r2, r0
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f003 f96b 	bl	8015578 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80122a8:	2b05      	cmp	r3, #5
 80122aa:	f200 8215 	bhi.w	80126d8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f002 ff27 	bl	8015108 <tcp_rexmit_rto>
      break;
 80122ba:	e20d      	b.n	80126d8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80122bc:	4b81      	ldr	r3, [pc, #516]	; (80124c4 <tcp_process+0x590>)
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	f003 0310 	and.w	r3, r3, #16
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f000 80a1 	beq.w	801240c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80122ca:	4b7f      	ldr	r3, [pc, #508]	; (80124c8 <tcp_process+0x594>)
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	3b01      	subs	r3, #1
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	db7e      	blt.n	80123d8 <tcp_process+0x4a4>
 80122da:	4b7b      	ldr	r3, [pc, #492]	; (80124c8 <tcp_process+0x594>)
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122e2:	1ad3      	subs	r3, r2, r3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	dc77      	bgt.n	80123d8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2204      	movs	r2, #4
 80122ec:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d102      	bne.n	80122fc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80122f6:	23fa      	movs	r3, #250	; 0xfa
 80122f8:	77bb      	strb	r3, [r7, #30]
 80122fa:	e01d      	b.n	8012338 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012300:	699b      	ldr	r3, [r3, #24]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d106      	bne.n	8012314 <tcp_process+0x3e0>
 8012306:	4b76      	ldr	r3, [pc, #472]	; (80124e0 <tcp_process+0x5ac>)
 8012308:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801230c:	4975      	ldr	r1, [pc, #468]	; (80124e4 <tcp_process+0x5b0>)
 801230e:	4876      	ldr	r0, [pc, #472]	; (80124e8 <tcp_process+0x5b4>)
 8012310:	f009 fd8a 	bl	801be28 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012318:	699b      	ldr	r3, [r3, #24]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d00a      	beq.n	8012334 <tcp_process+0x400>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012322:	699b      	ldr	r3, [r3, #24]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	6910      	ldr	r0, [r2, #16]
 8012328:	2200      	movs	r2, #0
 801232a:	6879      	ldr	r1, [r7, #4]
 801232c:	4798      	blx	r3
 801232e:	4603      	mov	r3, r0
 8012330:	77bb      	strb	r3, [r7, #30]
 8012332:	e001      	b.n	8012338 <tcp_process+0x404>
 8012334:	23f0      	movs	r3, #240	; 0xf0
 8012336:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 8012338:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00a      	beq.n	8012356 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012340:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012344:	f113 0f0d 	cmn.w	r3, #13
 8012348:	d002      	beq.n	8012350 <tcp_process+0x41c>
              tcp_abort(pcb);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7fd fddc 	bl	800ff08 <tcp_abort>
            }
            return ERR_ABRT;
 8012350:	f06f 030c 	mvn.w	r3, #12
 8012354:	e1ce      	b.n	80126f4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f000 fae0 	bl	801291c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801235c:	4b63      	ldr	r3, [pc, #396]	; (80124ec <tcp_process+0x5b8>)
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d005      	beq.n	8012370 <tcp_process+0x43c>
            recv_acked--;
 8012364:	4b61      	ldr	r3, [pc, #388]	; (80124ec <tcp_process+0x5b8>)
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	3b01      	subs	r3, #1
 801236a:	b29a      	uxth	r2, r3
 801236c:	4b5f      	ldr	r3, [pc, #380]	; (80124ec <tcp_process+0x5b8>)
 801236e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012374:	009a      	lsls	r2, r3, #2
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801237a:	005b      	lsls	r3, r3, #1
 801237c:	f241 111c 	movw	r1, #4380	; 0x111c
 8012380:	428b      	cmp	r3, r1
 8012382:	bf38      	it	cc
 8012384:	460b      	movcc	r3, r1
 8012386:	429a      	cmp	r2, r3
 8012388:	d204      	bcs.n	8012394 <tcp_process+0x460>
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801238e:	009b      	lsls	r3, r3, #2
 8012390:	b29b      	uxth	r3, r3
 8012392:	e00d      	b.n	80123b0 <tcp_process+0x47c>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012398:	005b      	lsls	r3, r3, #1
 801239a:	f241 121c 	movw	r2, #4380	; 0x111c
 801239e:	4293      	cmp	r3, r2
 80123a0:	d904      	bls.n	80123ac <tcp_process+0x478>
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80123a6:	005b      	lsls	r3, r3, #1
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	e001      	b.n	80123b0 <tcp_process+0x47c>
 80123ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80123b6:	4b4e      	ldr	r3, [pc, #312]	; (80124f0 <tcp_process+0x5bc>)
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	f003 0320 	and.w	r3, r3, #32
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d037      	beq.n	8012432 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	8b5b      	ldrh	r3, [r3, #26]
 80123c6:	f043 0302 	orr.w	r3, r3, #2
 80123ca:	b29a      	uxth	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2207      	movs	r2, #7
 80123d4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80123d6:	e02c      	b.n	8012432 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123d8:	4b3b      	ldr	r3, [pc, #236]	; (80124c8 <tcp_process+0x594>)
 80123da:	6819      	ldr	r1, [r3, #0]
 80123dc:	4b3b      	ldr	r3, [pc, #236]	; (80124cc <tcp_process+0x598>)
 80123de:	881b      	ldrh	r3, [r3, #0]
 80123e0:	461a      	mov	r2, r3
 80123e2:	4b3b      	ldr	r3, [pc, #236]	; (80124d0 <tcp_process+0x59c>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123e8:	4b3a      	ldr	r3, [pc, #232]	; (80124d4 <tcp_process+0x5a0>)
 80123ea:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123ec:	885b      	ldrh	r3, [r3, #2]
 80123ee:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123f0:	4a38      	ldr	r2, [pc, #224]	; (80124d4 <tcp_process+0x5a0>)
 80123f2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123f4:	8812      	ldrh	r2, [r2, #0]
 80123f6:	b292      	uxth	r2, r2
 80123f8:	9202      	str	r2, [sp, #8]
 80123fa:	9301      	str	r3, [sp, #4]
 80123fc:	4b36      	ldr	r3, [pc, #216]	; (80124d8 <tcp_process+0x5a4>)
 80123fe:	9300      	str	r3, [sp, #0]
 8012400:	4b36      	ldr	r3, [pc, #216]	; (80124dc <tcp_process+0x5a8>)
 8012402:	4602      	mov	r2, r0
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f003 f8b7 	bl	8015578 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801240a:	e167      	b.n	80126dc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801240c:	4b2d      	ldr	r3, [pc, #180]	; (80124c4 <tcp_process+0x590>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	f003 0302 	and.w	r3, r3, #2
 8012414:	2b00      	cmp	r3, #0
 8012416:	f000 8161 	beq.w	80126dc <tcp_process+0x7a8>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801241e:	1e5a      	subs	r2, r3, #1
 8012420:	4b2b      	ldr	r3, [pc, #172]	; (80124d0 <tcp_process+0x59c>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	429a      	cmp	r2, r3
 8012426:	f040 8159 	bne.w	80126dc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f002 fe8e 	bl	801514c <tcp_rexmit>
      break;
 8012430:	e154      	b.n	80126dc <tcp_process+0x7a8>
 8012432:	e153      	b.n	80126dc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012434:	6878      	ldr	r0, [r7, #4]
 8012436:	f000 fa71 	bl	801291c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801243a:	4b2d      	ldr	r3, [pc, #180]	; (80124f0 <tcp_process+0x5bc>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	f003 0320 	and.w	r3, r3, #32
 8012442:	2b00      	cmp	r3, #0
 8012444:	f000 814c 	beq.w	80126e0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8b5b      	ldrh	r3, [r3, #26]
 801244c:	f043 0302 	orr.w	r3, r3, #2
 8012450:	b29a      	uxth	r2, r3
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2207      	movs	r2, #7
 801245a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801245c:	e140      	b.n	80126e0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fa5c 	bl	801291c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012464:	4b22      	ldr	r3, [pc, #136]	; (80124f0 <tcp_process+0x5bc>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	f003 0320 	and.w	r3, r3, #32
 801246c:	2b00      	cmp	r3, #0
 801246e:	d071      	beq.n	8012554 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012470:	4b14      	ldr	r3, [pc, #80]	; (80124c4 <tcp_process+0x590>)
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	f003 0310 	and.w	r3, r3, #16
 8012478:	2b00      	cmp	r3, #0
 801247a:	d060      	beq.n	801253e <tcp_process+0x60a>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012480:	4b11      	ldr	r3, [pc, #68]	; (80124c8 <tcp_process+0x594>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	429a      	cmp	r2, r3
 8012486:	d15a      	bne.n	801253e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801248c:	2b00      	cmp	r3, #0
 801248e:	d156      	bne.n	801253e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	8b5b      	ldrh	r3, [r3, #26]
 8012494:	f043 0302 	orr.w	r3, r3, #2
 8012498:	b29a      	uxth	r2, r3
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fe fda8 	bl	8010ff4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80124a4:	4b13      	ldr	r3, [pc, #76]	; (80124f4 <tcp_process+0x5c0>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	429a      	cmp	r2, r3
 80124ac:	d105      	bne.n	80124ba <tcp_process+0x586>
 80124ae:	4b11      	ldr	r3, [pc, #68]	; (80124f4 <tcp_process+0x5c0>)
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	4a0f      	ldr	r2, [pc, #60]	; (80124f4 <tcp_process+0x5c0>)
 80124b6:	6013      	str	r3, [r2, #0]
 80124b8:	e02e      	b.n	8012518 <tcp_process+0x5e4>
 80124ba:	4b0e      	ldr	r3, [pc, #56]	; (80124f4 <tcp_process+0x5c0>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	613b      	str	r3, [r7, #16]
 80124c0:	e027      	b.n	8012512 <tcp_process+0x5de>
 80124c2:	bf00      	nop
 80124c4:	20013d20 	.word	0x20013d20
 80124c8:	20013d18 	.word	0x20013d18
 80124cc:	20013d1e 	.word	0x20013d1e
 80124d0:	20013d14 	.word	0x20013d14
 80124d4:	20013d04 	.word	0x20013d04
 80124d8:	2000a274 	.word	0x2000a274
 80124dc:	2000a278 	.word	0x2000a278
 80124e0:	08020534 	.word	0x08020534
 80124e4:	080207d4 	.word	0x080207d4
 80124e8:	08020580 	.word	0x08020580
 80124ec:	20013d1c 	.word	0x20013d1c
 80124f0:	20013d21 	.word	0x20013d21
 80124f4:	20013ce4 	.word	0x20013ce4
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d104      	bne.n	801250c <tcp_process+0x5d8>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	68da      	ldr	r2, [r3, #12]
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	60da      	str	r2, [r3, #12]
 801250a:	e005      	b.n	8012518 <tcp_process+0x5e4>
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	613b      	str	r3, [r7, #16]
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1ef      	bne.n	80124f8 <tcp_process+0x5c4>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	60da      	str	r2, [r3, #12]
 801251e:	4b77      	ldr	r3, [pc, #476]	; (80126fc <tcp_process+0x7c8>)
 8012520:	2201      	movs	r2, #1
 8012522:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	220a      	movs	r2, #10
 8012528:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801252a:	4b75      	ldr	r3, [pc, #468]	; (8012700 <tcp_process+0x7cc>)
 801252c:	681a      	ldr	r2, [r3, #0]
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	60da      	str	r2, [r3, #12]
 8012532:	4a73      	ldr	r2, [pc, #460]	; (8012700 <tcp_process+0x7cc>)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6013      	str	r3, [r2, #0]
 8012538:	f003 f9e0 	bl	80158fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801253c:	e0d2      	b.n	80126e4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	8b5b      	ldrh	r3, [r3, #26]
 8012542:	f043 0302 	orr.w	r3, r3, #2
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2208      	movs	r2, #8
 8012550:	751a      	strb	r2, [r3, #20]
      break;
 8012552:	e0c7      	b.n	80126e4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012554:	4b6b      	ldr	r3, [pc, #428]	; (8012704 <tcp_process+0x7d0>)
 8012556:	781b      	ldrb	r3, [r3, #0]
 8012558:	f003 0310 	and.w	r3, r3, #16
 801255c:	2b00      	cmp	r3, #0
 801255e:	f000 80c1 	beq.w	80126e4 <tcp_process+0x7b0>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012566:	4b68      	ldr	r3, [pc, #416]	; (8012708 <tcp_process+0x7d4>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	429a      	cmp	r2, r3
 801256c:	f040 80ba 	bne.w	80126e4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012574:	2b00      	cmp	r3, #0
 8012576:	f040 80b5 	bne.w	80126e4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2206      	movs	r2, #6
 801257e:	751a      	strb	r2, [r3, #20]
      break;
 8012580:	e0b0      	b.n	80126e4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f000 f9ca 	bl	801291c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012588:	4b60      	ldr	r3, [pc, #384]	; (801270c <tcp_process+0x7d8>)
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	f003 0320 	and.w	r3, r3, #32
 8012590:	2b00      	cmp	r3, #0
 8012592:	f000 80a9 	beq.w	80126e8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	8b5b      	ldrh	r3, [r3, #26]
 801259a:	f043 0302 	orr.w	r3, r3, #2
 801259e:	b29a      	uxth	r2, r3
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80125a4:	6878      	ldr	r0, [r7, #4]
 80125a6:	f7fe fd25 	bl	8010ff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80125aa:	4b59      	ldr	r3, [pc, #356]	; (8012710 <tcp_process+0x7dc>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	429a      	cmp	r2, r3
 80125b2:	d105      	bne.n	80125c0 <tcp_process+0x68c>
 80125b4:	4b56      	ldr	r3, [pc, #344]	; (8012710 <tcp_process+0x7dc>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	68db      	ldr	r3, [r3, #12]
 80125ba:	4a55      	ldr	r2, [pc, #340]	; (8012710 <tcp_process+0x7dc>)
 80125bc:	6013      	str	r3, [r2, #0]
 80125be:	e013      	b.n	80125e8 <tcp_process+0x6b4>
 80125c0:	4b53      	ldr	r3, [pc, #332]	; (8012710 <tcp_process+0x7dc>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	60fb      	str	r3, [r7, #12]
 80125c6:	e00c      	b.n	80125e2 <tcp_process+0x6ae>
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	68db      	ldr	r3, [r3, #12]
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d104      	bne.n	80125dc <tcp_process+0x6a8>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	68da      	ldr	r2, [r3, #12]
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	60da      	str	r2, [r3, #12]
 80125da:	e005      	b.n	80125e8 <tcp_process+0x6b4>
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	60fb      	str	r3, [r7, #12]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d1ef      	bne.n	80125c8 <tcp_process+0x694>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2200      	movs	r2, #0
 80125ec:	60da      	str	r2, [r3, #12]
 80125ee:	4b43      	ldr	r3, [pc, #268]	; (80126fc <tcp_process+0x7c8>)
 80125f0:	2201      	movs	r2, #1
 80125f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	220a      	movs	r2, #10
 80125f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80125fa:	4b41      	ldr	r3, [pc, #260]	; (8012700 <tcp_process+0x7cc>)
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	60da      	str	r2, [r3, #12]
 8012602:	4a3f      	ldr	r2, [pc, #252]	; (8012700 <tcp_process+0x7cc>)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6013      	str	r3, [r2, #0]
 8012608:	f003 f978 	bl	80158fc <tcp_timer_needed>
      }
      break;
 801260c:	e06c      	b.n	80126e8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801260e:	6878      	ldr	r0, [r7, #4]
 8012610:	f000 f984 	bl	801291c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012614:	4b3b      	ldr	r3, [pc, #236]	; (8012704 <tcp_process+0x7d0>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	f003 0310 	and.w	r3, r3, #16
 801261c:	2b00      	cmp	r3, #0
 801261e:	d065      	beq.n	80126ec <tcp_process+0x7b8>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012624:	4b38      	ldr	r3, [pc, #224]	; (8012708 <tcp_process+0x7d4>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	429a      	cmp	r2, r3
 801262a:	d15f      	bne.n	80126ec <tcp_process+0x7b8>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012630:	2b00      	cmp	r3, #0
 8012632:	d15b      	bne.n	80126ec <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7fe fcdd 	bl	8010ff4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801263a:	4b35      	ldr	r3, [pc, #212]	; (8012710 <tcp_process+0x7dc>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	429a      	cmp	r2, r3
 8012642:	d105      	bne.n	8012650 <tcp_process+0x71c>
 8012644:	4b32      	ldr	r3, [pc, #200]	; (8012710 <tcp_process+0x7dc>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	4a31      	ldr	r2, [pc, #196]	; (8012710 <tcp_process+0x7dc>)
 801264c:	6013      	str	r3, [r2, #0]
 801264e:	e013      	b.n	8012678 <tcp_process+0x744>
 8012650:	4b2f      	ldr	r3, [pc, #188]	; (8012710 <tcp_process+0x7dc>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	61bb      	str	r3, [r7, #24]
 8012656:	e00c      	b.n	8012672 <tcp_process+0x73e>
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	429a      	cmp	r2, r3
 8012660:	d104      	bne.n	801266c <tcp_process+0x738>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	68da      	ldr	r2, [r3, #12]
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	60da      	str	r2, [r3, #12]
 801266a:	e005      	b.n	8012678 <tcp_process+0x744>
 801266c:	69bb      	ldr	r3, [r7, #24]
 801266e:	68db      	ldr	r3, [r3, #12]
 8012670:	61bb      	str	r3, [r7, #24]
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d1ef      	bne.n	8012658 <tcp_process+0x724>
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	60da      	str	r2, [r3, #12]
 801267e:	4b1f      	ldr	r3, [pc, #124]	; (80126fc <tcp_process+0x7c8>)
 8012680:	2201      	movs	r2, #1
 8012682:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	220a      	movs	r2, #10
 8012688:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801268a:	4b1d      	ldr	r3, [pc, #116]	; (8012700 <tcp_process+0x7cc>)
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	60da      	str	r2, [r3, #12]
 8012692:	4a1b      	ldr	r2, [pc, #108]	; (8012700 <tcp_process+0x7cc>)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6013      	str	r3, [r2, #0]
 8012698:	f003 f930 	bl	80158fc <tcp_timer_needed>
      }
      break;
 801269c:	e026      	b.n	80126ec <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f93c 	bl	801291c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80126a4:	4b17      	ldr	r3, [pc, #92]	; (8012704 <tcp_process+0x7d0>)
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	f003 0310 	and.w	r3, r3, #16
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d01f      	beq.n	80126f0 <tcp_process+0x7bc>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126b4:	4b14      	ldr	r3, [pc, #80]	; (8012708 <tcp_process+0x7d4>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d119      	bne.n	80126f0 <tcp_process+0x7bc>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d115      	bne.n	80126f0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80126c4:	4b11      	ldr	r3, [pc, #68]	; (801270c <tcp_process+0x7d8>)
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f043 0310 	orr.w	r3, r3, #16
 80126cc:	b2da      	uxtb	r2, r3
 80126ce:	4b0f      	ldr	r3, [pc, #60]	; (801270c <tcp_process+0x7d8>)
 80126d0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80126d2:	e00d      	b.n	80126f0 <tcp_process+0x7bc>
    default:
      break;
 80126d4:	bf00      	nop
 80126d6:	e00c      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126d8:	bf00      	nop
 80126da:	e00a      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126dc:	bf00      	nop
 80126de:	e008      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126e0:	bf00      	nop
 80126e2:	e006      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126e4:	bf00      	nop
 80126e6:	e004      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126e8:	bf00      	nop
 80126ea:	e002      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126ec:	bf00      	nop
 80126ee:	e000      	b.n	80126f2 <tcp_process+0x7be>
      break;
 80126f0:	bf00      	nop
  }
  return ERR_OK;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3724      	adds	r7, #36	; 0x24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd90      	pop	{r4, r7, pc}
 80126fc:	20013cec 	.word	0x20013cec
 8012700:	20013ce8 	.word	0x20013ce8
 8012704:	20013d20 	.word	0x20013d20
 8012708:	20013d18 	.word	0x20013d18
 801270c:	20013d21 	.word	0x20013d21
 8012710:	20013ce4 	.word	0x20013ce4

08012714 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012714:	b590      	push	{r4, r7, lr}
 8012716:	b085      	sub	sp, #20
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d106      	bne.n	8012732 <tcp_oos_insert_segment+0x1e>
 8012724:	4b3b      	ldr	r3, [pc, #236]	; (8012814 <tcp_oos_insert_segment+0x100>)
 8012726:	f240 421f 	movw	r2, #1055	; 0x41f
 801272a:	493b      	ldr	r1, [pc, #236]	; (8012818 <tcp_oos_insert_segment+0x104>)
 801272c:	483b      	ldr	r0, [pc, #236]	; (801281c <tcp_oos_insert_segment+0x108>)
 801272e:	f009 fb7b 	bl	801be28 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	691b      	ldr	r3, [r3, #16]
 8012736:	899b      	ldrh	r3, [r3, #12]
 8012738:	b29b      	uxth	r3, r3
 801273a:	4618      	mov	r0, r3
 801273c:	f7fa ff8a 	bl	800d654 <lwip_htons>
 8012740:	4603      	mov	r3, r0
 8012742:	b2db      	uxtb	r3, r3
 8012744:	f003 0301 	and.w	r3, r3, #1
 8012748:	2b00      	cmp	r3, #0
 801274a:	d028      	beq.n	801279e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801274c:	6838      	ldr	r0, [r7, #0]
 801274e:	f7fe fa13 	bl	8010b78 <tcp_segs_free>
    next = NULL;
 8012752:	2300      	movs	r3, #0
 8012754:	603b      	str	r3, [r7, #0]
 8012756:	e056      	b.n	8012806 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	691b      	ldr	r3, [r3, #16]
 801275c:	899b      	ldrh	r3, [r3, #12]
 801275e:	b29b      	uxth	r3, r3
 8012760:	4618      	mov	r0, r3
 8012762:	f7fa ff77 	bl	800d654 <lwip_htons>
 8012766:	4603      	mov	r3, r0
 8012768:	b2db      	uxtb	r3, r3
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00d      	beq.n	801278e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	691b      	ldr	r3, [r3, #16]
 8012776:	899b      	ldrh	r3, [r3, #12]
 8012778:	b29c      	uxth	r4, r3
 801277a:	2001      	movs	r0, #1
 801277c:	f7fa ff6a 	bl	800d654 <lwip_htons>
 8012780:	4603      	mov	r3, r0
 8012782:	461a      	mov	r2, r3
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	691b      	ldr	r3, [r3, #16]
 8012788:	4322      	orrs	r2, r4
 801278a:	b292      	uxth	r2, r2
 801278c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f7fe fa02 	bl	8010ba2 <tcp_seg_free>
    while (next &&
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d00e      	beq.n	80127c2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	891b      	ldrh	r3, [r3, #8]
 80127a8:	461a      	mov	r2, r3
 80127aa:	4b1d      	ldr	r3, [pc, #116]	; (8012820 <tcp_oos_insert_segment+0x10c>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	441a      	add	r2, r3
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	691b      	ldr	r3, [r3, #16]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	6839      	ldr	r1, [r7, #0]
 80127b8:	8909      	ldrh	r1, [r1, #8]
 80127ba:	440b      	add	r3, r1
 80127bc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80127be:	2b00      	cmp	r3, #0
 80127c0:	daca      	bge.n	8012758 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80127c2:	683b      	ldr	r3, [r7, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d01e      	beq.n	8012806 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	891b      	ldrh	r3, [r3, #8]
 80127cc:	461a      	mov	r2, r3
 80127ce:	4b14      	ldr	r3, [pc, #80]	; (8012820 <tcp_oos_insert_segment+0x10c>)
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	441a      	add	r2, r3
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	691b      	ldr	r3, [r3, #16]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	1ad3      	subs	r3, r2, r3
    if (next &&
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dd12      	ble.n	8012806 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	691b      	ldr	r3, [r3, #16]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	b29a      	uxth	r2, r3
 80127e8:	4b0d      	ldr	r3, [pc, #52]	; (8012820 <tcp_oos_insert_segment+0x10c>)
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	b29a      	uxth	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	685a      	ldr	r2, [r3, #4]
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	891b      	ldrh	r3, [r3, #8]
 80127fe:	4619      	mov	r1, r3
 8012800:	4610      	mov	r0, r2
 8012802:	f7fc fac3 	bl	800ed8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	683a      	ldr	r2, [r7, #0]
 801280a:	601a      	str	r2, [r3, #0]
}
 801280c:	bf00      	nop
 801280e:	3714      	adds	r7, #20
 8012810:	46bd      	mov	sp, r7
 8012812:	bd90      	pop	{r4, r7, pc}
 8012814:	08020534 	.word	0x08020534
 8012818:	080207f4 	.word	0x080207f4
 801281c:	08020580 	.word	0x08020580
 8012820:	20013d14 	.word	0x20013d14

08012824 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012824:	b5b0      	push	{r4, r5, r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af00      	add	r7, sp, #0
 801282a:	60f8      	str	r0, [r7, #12]
 801282c:	60b9      	str	r1, [r7, #8]
 801282e:	607a      	str	r2, [r7, #4]
 8012830:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012832:	e03e      	b.n	80128b2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012838:	68bb      	ldr	r3, [r7, #8]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	4618      	mov	r0, r3
 8012844:	f7fc fcb6 	bl	800f1b4 <pbuf_clen>
 8012848:	4603      	mov	r3, r0
 801284a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012852:	8a7a      	ldrh	r2, [r7, #18]
 8012854:	429a      	cmp	r2, r3
 8012856:	d906      	bls.n	8012866 <tcp_free_acked_segments+0x42>
 8012858:	4b2a      	ldr	r3, [pc, #168]	; (8012904 <tcp_free_acked_segments+0xe0>)
 801285a:	f240 4257 	movw	r2, #1111	; 0x457
 801285e:	492a      	ldr	r1, [pc, #168]	; (8012908 <tcp_free_acked_segments+0xe4>)
 8012860:	482a      	ldr	r0, [pc, #168]	; (801290c <tcp_free_acked_segments+0xe8>)
 8012862:	f009 fae1 	bl	801be28 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801286c:	8a7b      	ldrh	r3, [r7, #18]
 801286e:	1ad3      	subs	r3, r2, r3
 8012870:	b29a      	uxth	r2, r3
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	891a      	ldrh	r2, [r3, #8]
 801287c:	4b24      	ldr	r3, [pc, #144]	; (8012910 <tcp_free_acked_segments+0xec>)
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	4413      	add	r3, r2
 8012882:	b29a      	uxth	r2, r3
 8012884:	4b22      	ldr	r3, [pc, #136]	; (8012910 <tcp_free_acked_segments+0xec>)
 8012886:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012888:	6978      	ldr	r0, [r7, #20]
 801288a:	f7fe f98a 	bl	8010ba2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012894:	2b00      	cmp	r3, #0
 8012896:	d00c      	beq.n	80128b2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d109      	bne.n	80128b2 <tcp_free_acked_segments+0x8e>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d106      	bne.n	80128b2 <tcp_free_acked_segments+0x8e>
 80128a4:	4b17      	ldr	r3, [pc, #92]	; (8012904 <tcp_free_acked_segments+0xe0>)
 80128a6:	f240 4261 	movw	r2, #1121	; 0x461
 80128aa:	491a      	ldr	r1, [pc, #104]	; (8012914 <tcp_free_acked_segments+0xf0>)
 80128ac:	4817      	ldr	r0, [pc, #92]	; (801290c <tcp_free_acked_segments+0xe8>)
 80128ae:	f009 fabb 	bl	801be28 <iprintf>
  while (seg_list != NULL &&
 80128b2:	68bb      	ldr	r3, [r7, #8]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d020      	beq.n	80128fa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	691b      	ldr	r3, [r3, #16]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4618      	mov	r0, r3
 80128c0:	f7fa fedd 	bl	800d67e <lwip_htonl>
 80128c4:	4604      	mov	r4, r0
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	891b      	ldrh	r3, [r3, #8]
 80128ca:	461d      	mov	r5, r3
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	691b      	ldr	r3, [r3, #16]
 80128d0:	899b      	ldrh	r3, [r3, #12]
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7fa febd 	bl	800d654 <lwip_htons>
 80128da:	4603      	mov	r3, r0
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	f003 0303 	and.w	r3, r3, #3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d001      	beq.n	80128ea <tcp_free_acked_segments+0xc6>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e000      	b.n	80128ec <tcp_free_acked_segments+0xc8>
 80128ea:	2300      	movs	r3, #0
 80128ec:	442b      	add	r3, r5
 80128ee:	18e2      	adds	r2, r4, r3
 80128f0:	4b09      	ldr	r3, [pc, #36]	; (8012918 <tcp_free_acked_segments+0xf4>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	dd9c      	ble.n	8012834 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80128fa:	68bb      	ldr	r3, [r7, #8]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3718      	adds	r7, #24
 8012900:	46bd      	mov	sp, r7
 8012902:	bdb0      	pop	{r4, r5, r7, pc}
 8012904:	08020534 	.word	0x08020534
 8012908:	0802081c 	.word	0x0802081c
 801290c:	08020580 	.word	0x08020580
 8012910:	20013d1c 	.word	0x20013d1c
 8012914:	08020844 	.word	0x08020844
 8012918:	20013d18 	.word	0x20013d18

0801291c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801291c:	b5b0      	push	{r4, r5, r7, lr}
 801291e:	b094      	sub	sp, #80	; 0x50
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012924:	2300      	movs	r3, #0
 8012926:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d106      	bne.n	801293c <tcp_receive+0x20>
 801292e:	4b91      	ldr	r3, [pc, #580]	; (8012b74 <tcp_receive+0x258>)
 8012930:	f240 427b 	movw	r2, #1147	; 0x47b
 8012934:	4990      	ldr	r1, [pc, #576]	; (8012b78 <tcp_receive+0x25c>)
 8012936:	4891      	ldr	r0, [pc, #580]	; (8012b7c <tcp_receive+0x260>)
 8012938:	f009 fa76 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	7d1b      	ldrb	r3, [r3, #20]
 8012940:	2b03      	cmp	r3, #3
 8012942:	d806      	bhi.n	8012952 <tcp_receive+0x36>
 8012944:	4b8b      	ldr	r3, [pc, #556]	; (8012b74 <tcp_receive+0x258>)
 8012946:	f240 427c 	movw	r2, #1148	; 0x47c
 801294a:	498d      	ldr	r1, [pc, #564]	; (8012b80 <tcp_receive+0x264>)
 801294c:	488b      	ldr	r0, [pc, #556]	; (8012b7c <tcp_receive+0x260>)
 801294e:	f009 fa6b 	bl	801be28 <iprintf>

  if (flags & TCP_ACK) {
 8012952:	4b8c      	ldr	r3, [pc, #560]	; (8012b84 <tcp_receive+0x268>)
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f003 0310 	and.w	r3, r3, #16
 801295a:	2b00      	cmp	r3, #0
 801295c:	f000 8264 	beq.w	8012e28 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012966:	461a      	mov	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801296c:	4413      	add	r3, r2
 801296e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012974:	4b84      	ldr	r3, [pc, #528]	; (8012b88 <tcp_receive+0x26c>)
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	1ad3      	subs	r3, r2, r3
 801297a:	2b00      	cmp	r3, #0
 801297c:	db1b      	blt.n	80129b6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012982:	4b81      	ldr	r3, [pc, #516]	; (8012b88 <tcp_receive+0x26c>)
 8012984:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012986:	429a      	cmp	r2, r3
 8012988:	d106      	bne.n	8012998 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801298e:	4b7f      	ldr	r3, [pc, #508]	; (8012b8c <tcp_receive+0x270>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	2b00      	cmp	r3, #0
 8012996:	db0e      	blt.n	80129b6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801299c:	4b7b      	ldr	r3, [pc, #492]	; (8012b8c <tcp_receive+0x270>)
 801299e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d125      	bne.n	80129f0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80129a4:	4b7a      	ldr	r3, [pc, #488]	; (8012b90 <tcp_receive+0x274>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	89db      	ldrh	r3, [r3, #14]
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d91c      	bls.n	80129f0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80129b6:	4b76      	ldr	r3, [pc, #472]	; (8012b90 <tcp_receive+0x274>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	89db      	ldrh	r3, [r3, #14]
 80129bc:	b29a      	uxth	r2, r3
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d205      	bcs.n	80129e0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80129e0:	4b69      	ldr	r3, [pc, #420]	; (8012b88 <tcp_receive+0x26c>)
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80129e8:	4b68      	ldr	r3, [pc, #416]	; (8012b8c <tcp_receive+0x270>)
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80129f0:	4b66      	ldr	r3, [pc, #408]	; (8012b8c <tcp_receive+0x270>)
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	dc58      	bgt.n	8012ab0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80129fe:	4b65      	ldr	r3, [pc, #404]	; (8012b94 <tcp_receive+0x278>)
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d14b      	bne.n	8012a9e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a0a:	687a      	ldr	r2, [r7, #4]
 8012a0c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012a10:	4413      	add	r3, r2
 8012a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d142      	bne.n	8012a9e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	db3d      	blt.n	8012a9e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a26:	4b59      	ldr	r3, [pc, #356]	; (8012b8c <tcp_receive+0x270>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d137      	bne.n	8012a9e <tcp_receive+0x182>
              found_dupack = 1;
 8012a2e:	2301      	movs	r3, #1
 8012a30:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a38:	2bff      	cmp	r3, #255	; 0xff
 8012a3a:	d007      	beq.n	8012a4c <tcp_receive+0x130>
                ++pcb->dupacks;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a42:	3301      	adds	r3, #1
 8012a44:	b2da      	uxtb	r2, r3
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a52:	2b03      	cmp	r3, #3
 8012a54:	d91b      	bls.n	8012a8e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a60:	4413      	add	r3, r2
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d30a      	bcc.n	8012a84 <tcp_receive+0x168>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a78:	4413      	add	r3, r2
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a82:	e004      	b.n	8012a8e <tcp_receive+0x172>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d902      	bls.n	8012a9e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f002 fbc3 	bl	8015224 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	f040 8161 	bne.w	8012d68 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012aae:	e15b      	b.n	8012d68 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012ab0:	4b36      	ldr	r3, [pc, #216]	; (8012b8c <tcp_receive+0x270>)
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ab8:	1ad3      	subs	r3, r2, r3
 8012aba:	3b01      	subs	r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	f2c0 814e 	blt.w	8012d5e <tcp_receive+0x442>
 8012ac2:	4b32      	ldr	r3, [pc, #200]	; (8012b8c <tcp_receive+0x270>)
 8012ac4:	681a      	ldr	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012aca:	1ad3      	subs	r3, r2, r3
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	f300 8146 	bgt.w	8012d5e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	8b5b      	ldrh	r3, [r3, #26]
 8012ad6:	f003 0304 	and.w	r3, r3, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d010      	beq.n	8012b00 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	8b5b      	ldrh	r3, [r3, #26]
 8012ae2:	f023 0304 	bic.w	r3, r3, #4
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2200      	movs	r2, #0
 8012afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	2200      	movs	r2, #0
 8012b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012b0e:	10db      	asrs	r3, r3, #3
 8012b10:	b21b      	sxth	r3, r3
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012b1a:	b29b      	uxth	r3, r3
 8012b1c:	4413      	add	r3, r2
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	b21a      	sxth	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012b28:	4b18      	ldr	r3, [pc, #96]	; (8012b8c <tcp_receive+0x270>)
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012b40:	4b12      	ldr	r3, [pc, #72]	; (8012b8c <tcp_receive+0x270>)
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	7d1b      	ldrb	r3, [r3, #20]
 8012b4c:	2b03      	cmp	r3, #3
 8012b4e:	f240 8097 	bls.w	8012c80 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d245      	bcs.n	8012bee <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	8b5b      	ldrh	r3, [r3, #26]
 8012b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d014      	beq.n	8012b98 <tcp_receive+0x27c>
 8012b6e:	2301      	movs	r3, #1
 8012b70:	e013      	b.n	8012b9a <tcp_receive+0x27e>
 8012b72:	bf00      	nop
 8012b74:	08020534 	.word	0x08020534
 8012b78:	08020864 	.word	0x08020864
 8012b7c:	08020580 	.word	0x08020580
 8012b80:	08020880 	.word	0x08020880
 8012b84:	20013d20 	.word	0x20013d20
 8012b88:	20013d14 	.word	0x20013d14
 8012b8c:	20013d18 	.word	0x20013d18
 8012b90:	20013d04 	.word	0x20013d04
 8012b94:	20013d1e 	.word	0x20013d1e
 8012b98:	2302      	movs	r3, #2
 8012b9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012b9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ba8:	fb12 f303 	smulbb	r3, r2, r3
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012bb0:	4293      	cmp	r3, r2
 8012bb2:	bf28      	it	cs
 8012bb4:	4613      	movcs	r3, r2
 8012bb6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012bc0:	4413      	add	r3, r2
 8012bc2:	b29a      	uxth	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012bca:	429a      	cmp	r2, r3
 8012bcc:	d309      	bcc.n	8012be2 <tcp_receive+0x2c6>
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012bd6:	4413      	add	r3, r2
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012be0:	e04e      	b.n	8012c80 <tcp_receive+0x364>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012bec:	e048      	b.n	8012c80 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012bf6:	4413      	add	r3, r2
 8012bf8:	b29a      	uxth	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d309      	bcc.n	8012c18 <tcp_receive+0x2fc>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c0c:	4413      	add	r3, r2
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012c16:	e004      	b.n	8012c22 <tcp_receive+0x306>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d326      	bcc.n	8012c80 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c52:	4413      	add	r3, r2
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d30a      	bcc.n	8012c76 <tcp_receive+0x35a>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c6a:	4413      	add	r3, r2
 8012c6c:	b29a      	uxth	r2, r3
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012c74:	e004      	b.n	8012c80 <tcp_receive+0x364>
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c88:	4a98      	ldr	r2, [pc, #608]	; (8012eec <tcp_receive+0x5d0>)
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f7ff fdca 	bl	8012824 <tcp_free_acked_segments>
 8012c90:	4602      	mov	r2, r0
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c9e:	4a94      	ldr	r2, [pc, #592]	; (8012ef0 <tcp_receive+0x5d4>)
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7ff fdbf 	bl	8012824 <tcp_free_acked_segments>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d104      	bne.n	8012cbe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012cba:	861a      	strh	r2, [r3, #48]	; 0x30
 8012cbc:	e002      	b.n	8012cc4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d103      	bne.n	8012cda <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012ce0:	4b84      	ldr	r3, [pc, #528]	; (8012ef4 <tcp_receive+0x5d8>)
 8012ce2:	881b      	ldrh	r3, [r3, #0]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	8b5b      	ldrh	r3, [r3, #26]
 8012cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d035      	beq.n	8012d66 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d118      	bne.n	8012d34 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00c      	beq.n	8012d24 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fa fcb1 	bl	800d67e <lwip_htonl>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	dc20      	bgt.n	8012d66 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	8b5b      	ldrh	r3, [r3, #26]
 8012d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d32:	e018      	b.n	8012d66 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3c:	691b      	ldr	r3, [r3, #16]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fa fc9c 	bl	800d67e <lwip_htonl>
 8012d46:	4603      	mov	r3, r0
 8012d48:	1ae3      	subs	r3, r4, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	dc0b      	bgt.n	8012d66 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	8b5b      	ldrh	r3, [r3, #26]
 8012d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012d56:	b29a      	uxth	r2, r3
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d5c:	e003      	b.n	8012d66 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f002 fc5c 	bl	801561c <tcp_send_empty_ack>
 8012d64:	e000      	b.n	8012d68 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012d66:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d05b      	beq.n	8012e28 <tcp_receive+0x50c>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012d74:	4b60      	ldr	r3, [pc, #384]	; (8012ef8 <tcp_receive+0x5dc>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	da54      	bge.n	8012e28 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012d7e:	4b5f      	ldr	r3, [pc, #380]	; (8012efc <tcp_receive+0x5e0>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012d92:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012d9c:	10db      	asrs	r3, r3, #3
 8012d9e:	b21b      	sxth	r3, r3
 8012da0:	b29b      	uxth	r3, r3
 8012da2:	1ad3      	subs	r3, r2, r3
 8012da4:	b29b      	uxth	r3, r3
 8012da6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012db6:	4413      	add	r3, r2
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	b21a      	sxth	r2, r3
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012dc0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	da05      	bge.n	8012dd4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012dc8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012dcc:	425b      	negs	r3, r3
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012dd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012dde:	109b      	asrs	r3, r3, #2
 8012de0:	b21b      	sxth	r3, r3
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012df2:	b29a      	uxth	r2, r3
 8012df4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012df8:	4413      	add	r3, r2
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	b21a      	sxth	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012e08:	10db      	asrs	r3, r3, #3
 8012e0a:	b21b      	sxth	r3, r3
 8012e0c:	b29a      	uxth	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012e14:	b29b      	uxth	r3, r3
 8012e16:	4413      	add	r3, r2
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	b21a      	sxth	r2, r3
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	2200      	movs	r2, #0
 8012e26:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012e28:	4b35      	ldr	r3, [pc, #212]	; (8012f00 <tcp_receive+0x5e4>)
 8012e2a:	881b      	ldrh	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f000 84e2 	beq.w	80137f6 <tcp_receive+0xeda>
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	7d1b      	ldrb	r3, [r3, #20]
 8012e36:	2b06      	cmp	r3, #6
 8012e38:	f200 84dd 	bhi.w	80137f6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e40:	4b30      	ldr	r3, [pc, #192]	; (8012f04 <tcp_receive+0x5e8>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	3b01      	subs	r3, #1
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f2c0 808f 	blt.w	8012f6c <tcp_receive+0x650>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e52:	4b2b      	ldr	r3, [pc, #172]	; (8012f00 <tcp_receive+0x5e4>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	4619      	mov	r1, r3
 8012e58:	4b2a      	ldr	r3, [pc, #168]	; (8012f04 <tcp_receive+0x5e8>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	440b      	add	r3, r1
 8012e5e:	1ad3      	subs	r3, r2, r3
 8012e60:	3301      	adds	r3, #1
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	f300 8082 	bgt.w	8012f6c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012e68:	4b27      	ldr	r3, [pc, #156]	; (8012f08 <tcp_receive+0x5ec>)
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e72:	4b24      	ldr	r3, [pc, #144]	; (8012f04 <tcp_receive+0x5e8>)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012e7a:	4b23      	ldr	r3, [pc, #140]	; (8012f08 <tcp_receive+0x5ec>)
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <tcp_receive+0x574>
 8012e82:	4b22      	ldr	r3, [pc, #136]	; (8012f0c <tcp_receive+0x5f0>)
 8012e84:	f240 5294 	movw	r2, #1428	; 0x594
 8012e88:	4921      	ldr	r1, [pc, #132]	; (8012f10 <tcp_receive+0x5f4>)
 8012e8a:	4822      	ldr	r0, [pc, #136]	; (8012f14 <tcp_receive+0x5f8>)
 8012e8c:	f008 ffcc 	bl	801be28 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d906      	bls.n	8012ea8 <tcp_receive+0x58c>
 8012e9a:	4b1c      	ldr	r3, [pc, #112]	; (8012f0c <tcp_receive+0x5f0>)
 8012e9c:	f240 5295 	movw	r2, #1429	; 0x595
 8012ea0:	491d      	ldr	r1, [pc, #116]	; (8012f18 <tcp_receive+0x5fc>)
 8012ea2:	481c      	ldr	r0, [pc, #112]	; (8012f14 <tcp_receive+0x5f8>)
 8012ea4:	f008 ffc0 	bl	801be28 <iprintf>
      off = (u16_t)off32;
 8012ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012eae:	4b16      	ldr	r3, [pc, #88]	; (8012f08 <tcp_receive+0x5ec>)
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	891b      	ldrh	r3, [r3, #8]
 8012eb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	d906      	bls.n	8012eca <tcp_receive+0x5ae>
 8012ebc:	4b13      	ldr	r3, [pc, #76]	; (8012f0c <tcp_receive+0x5f0>)
 8012ebe:	f240 5297 	movw	r2, #1431	; 0x597
 8012ec2:	4916      	ldr	r1, [pc, #88]	; (8012f1c <tcp_receive+0x600>)
 8012ec4:	4813      	ldr	r0, [pc, #76]	; (8012f14 <tcp_receive+0x5f8>)
 8012ec6:	f008 ffaf 	bl	801be28 <iprintf>
      inseg.len -= off;
 8012eca:	4b0f      	ldr	r3, [pc, #60]	; (8012f08 <tcp_receive+0x5ec>)
 8012ecc:	891a      	ldrh	r2, [r3, #8]
 8012ece:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ed2:	1ad3      	subs	r3, r2, r3
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <tcp_receive+0x5ec>)
 8012ed8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012eda:	4b0b      	ldr	r3, [pc, #44]	; (8012f08 <tcp_receive+0x5ec>)
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	891a      	ldrh	r2, [r3, #8]
 8012ee0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012ee4:	1ad3      	subs	r3, r2, r3
 8012ee6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012ee8:	e02a      	b.n	8012f40 <tcp_receive+0x624>
 8012eea:	bf00      	nop
 8012eec:	0802089c 	.word	0x0802089c
 8012ef0:	080208a4 	.word	0x080208a4
 8012ef4:	20013d1c 	.word	0x20013d1c
 8012ef8:	20013d18 	.word	0x20013d18
 8012efc:	20013cd8 	.word	0x20013cd8
 8012f00:	20013d1e 	.word	0x20013d1e
 8012f04:	20013d14 	.word	0x20013d14
 8012f08:	20013cf0 	.word	0x20013cf0
 8012f0c:	08020534 	.word	0x08020534
 8012f10:	080208ac 	.word	0x080208ac
 8012f14:	08020580 	.word	0x08020580
 8012f18:	080208bc 	.word	0x080208bc
 8012f1c:	080208cc 	.word	0x080208cc
        off -= p->len;
 8012f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f22:	895b      	ldrh	r3, [r3, #10]
 8012f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f30:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012f32:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f36:	2200      	movs	r2, #0
 8012f38:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012f42:	895b      	ldrh	r3, [r3, #10]
 8012f44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d8e9      	bhi.n	8012f20 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012f4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012f50:	4619      	mov	r1, r3
 8012f52:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f54:	f7fc f81a 	bl	800ef8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f5c:	4a91      	ldr	r2, [pc, #580]	; (80131a4 <tcp_receive+0x888>)
 8012f5e:	6013      	str	r3, [r2, #0]
 8012f60:	4b91      	ldr	r3, [pc, #580]	; (80131a8 <tcp_receive+0x88c>)
 8012f62:	691b      	ldr	r3, [r3, #16]
 8012f64:	4a8f      	ldr	r2, [pc, #572]	; (80131a4 <tcp_receive+0x888>)
 8012f66:	6812      	ldr	r2, [r2, #0]
 8012f68:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012f6a:	e00d      	b.n	8012f88 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012f6c:	4b8d      	ldr	r3, [pc, #564]	; (80131a4 <tcp_receive+0x888>)
 8012f6e:	681a      	ldr	r2, [r3, #0]
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	da06      	bge.n	8012f88 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	8b5b      	ldrh	r3, [r3, #26]
 8012f7e:	f043 0302 	orr.w	r3, r3, #2
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012f88:	4b86      	ldr	r3, [pc, #536]	; (80131a4 <tcp_receive+0x888>)
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	1ad3      	subs	r3, r2, r3
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	f2c0 842a 	blt.w	80137ec <tcp_receive+0xed0>
 8012f98:	4b82      	ldr	r3, [pc, #520]	; (80131a4 <tcp_receive+0x888>)
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa0:	6879      	ldr	r1, [r7, #4]
 8012fa2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fa4:	440b      	add	r3, r1
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	3301      	adds	r3, #1
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	f300 841e 	bgt.w	80137ec <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012fb4:	4b7b      	ldr	r3, [pc, #492]	; (80131a4 <tcp_receive+0x888>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	429a      	cmp	r2, r3
 8012fba:	f040 829a 	bne.w	80134f2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012fbe:	4b7a      	ldr	r3, [pc, #488]	; (80131a8 <tcp_receive+0x88c>)
 8012fc0:	891c      	ldrh	r4, [r3, #8]
 8012fc2:	4b79      	ldr	r3, [pc, #484]	; (80131a8 <tcp_receive+0x88c>)
 8012fc4:	691b      	ldr	r3, [r3, #16]
 8012fc6:	899b      	ldrh	r3, [r3, #12]
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7fa fb42 	bl	800d654 <lwip_htons>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	f003 0303 	and.w	r3, r3, #3
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <tcp_receive+0x6c4>
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e000      	b.n	8012fe2 <tcp_receive+0x6c6>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4423      	add	r3, r4
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	4b71      	ldr	r3, [pc, #452]	; (80131ac <tcp_receive+0x890>)
 8012fe8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012fee:	4b6f      	ldr	r3, [pc, #444]	; (80131ac <tcp_receive+0x890>)
 8012ff0:	881b      	ldrh	r3, [r3, #0]
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d275      	bcs.n	80130e2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012ff6:	4b6c      	ldr	r3, [pc, #432]	; (80131a8 <tcp_receive+0x88c>)
 8012ff8:	691b      	ldr	r3, [r3, #16]
 8012ffa:	899b      	ldrh	r3, [r3, #12]
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fa fb28 	bl	800d654 <lwip_htons>
 8013004:	4603      	mov	r3, r0
 8013006:	b2db      	uxtb	r3, r3
 8013008:	f003 0301 	and.w	r3, r3, #1
 801300c:	2b00      	cmp	r3, #0
 801300e:	d01f      	beq.n	8013050 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013010:	4b65      	ldr	r3, [pc, #404]	; (80131a8 <tcp_receive+0x88c>)
 8013012:	691b      	ldr	r3, [r3, #16]
 8013014:	899b      	ldrh	r3, [r3, #12]
 8013016:	b29b      	uxth	r3, r3
 8013018:	b21b      	sxth	r3, r3
 801301a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801301e:	b21c      	sxth	r4, r3
 8013020:	4b61      	ldr	r3, [pc, #388]	; (80131a8 <tcp_receive+0x88c>)
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	899b      	ldrh	r3, [r3, #12]
 8013026:	b29b      	uxth	r3, r3
 8013028:	4618      	mov	r0, r3
 801302a:	f7fa fb13 	bl	800d654 <lwip_htons>
 801302e:	4603      	mov	r3, r0
 8013030:	b2db      	uxtb	r3, r3
 8013032:	b29b      	uxth	r3, r3
 8013034:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013038:	b29b      	uxth	r3, r3
 801303a:	4618      	mov	r0, r3
 801303c:	f7fa fb0a 	bl	800d654 <lwip_htons>
 8013040:	4603      	mov	r3, r0
 8013042:	b21b      	sxth	r3, r3
 8013044:	4323      	orrs	r3, r4
 8013046:	b21a      	sxth	r2, r3
 8013048:	4b57      	ldr	r3, [pc, #348]	; (80131a8 <tcp_receive+0x88c>)
 801304a:	691b      	ldr	r3, [r3, #16]
 801304c:	b292      	uxth	r2, r2
 801304e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013054:	4b54      	ldr	r3, [pc, #336]	; (80131a8 <tcp_receive+0x88c>)
 8013056:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013058:	4b53      	ldr	r3, [pc, #332]	; (80131a8 <tcp_receive+0x88c>)
 801305a:	691b      	ldr	r3, [r3, #16]
 801305c:	899b      	ldrh	r3, [r3, #12]
 801305e:	b29b      	uxth	r3, r3
 8013060:	4618      	mov	r0, r3
 8013062:	f7fa faf7 	bl	800d654 <lwip_htons>
 8013066:	4603      	mov	r3, r0
 8013068:	b2db      	uxtb	r3, r3
 801306a:	f003 0302 	and.w	r3, r3, #2
 801306e:	2b00      	cmp	r3, #0
 8013070:	d005      	beq.n	801307e <tcp_receive+0x762>
            inseg.len -= 1;
 8013072:	4b4d      	ldr	r3, [pc, #308]	; (80131a8 <tcp_receive+0x88c>)
 8013074:	891b      	ldrh	r3, [r3, #8]
 8013076:	3b01      	subs	r3, #1
 8013078:	b29a      	uxth	r2, r3
 801307a:	4b4b      	ldr	r3, [pc, #300]	; (80131a8 <tcp_receive+0x88c>)
 801307c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801307e:	4b4a      	ldr	r3, [pc, #296]	; (80131a8 <tcp_receive+0x88c>)
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	4a49      	ldr	r2, [pc, #292]	; (80131a8 <tcp_receive+0x88c>)
 8013084:	8912      	ldrh	r2, [r2, #8]
 8013086:	4611      	mov	r1, r2
 8013088:	4618      	mov	r0, r3
 801308a:	f7fb fe7f 	bl	800ed8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801308e:	4b46      	ldr	r3, [pc, #280]	; (80131a8 <tcp_receive+0x88c>)
 8013090:	891c      	ldrh	r4, [r3, #8]
 8013092:	4b45      	ldr	r3, [pc, #276]	; (80131a8 <tcp_receive+0x88c>)
 8013094:	691b      	ldr	r3, [r3, #16]
 8013096:	899b      	ldrh	r3, [r3, #12]
 8013098:	b29b      	uxth	r3, r3
 801309a:	4618      	mov	r0, r3
 801309c:	f7fa fada 	bl	800d654 <lwip_htons>
 80130a0:	4603      	mov	r3, r0
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	f003 0303 	and.w	r3, r3, #3
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d001      	beq.n	80130b0 <tcp_receive+0x794>
 80130ac:	2301      	movs	r3, #1
 80130ae:	e000      	b.n	80130b2 <tcp_receive+0x796>
 80130b0:	2300      	movs	r3, #0
 80130b2:	4423      	add	r3, r4
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	4b3d      	ldr	r3, [pc, #244]	; (80131ac <tcp_receive+0x890>)
 80130b8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80130ba:	4b3c      	ldr	r3, [pc, #240]	; (80131ac <tcp_receive+0x890>)
 80130bc:	881b      	ldrh	r3, [r3, #0]
 80130be:	461a      	mov	r2, r3
 80130c0:	4b38      	ldr	r3, [pc, #224]	; (80131a4 <tcp_receive+0x888>)
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	441a      	add	r2, r3
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ca:	6879      	ldr	r1, [r7, #4]
 80130cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130ce:	440b      	add	r3, r1
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d006      	beq.n	80130e2 <tcp_receive+0x7c6>
 80130d4:	4b36      	ldr	r3, [pc, #216]	; (80131b0 <tcp_receive+0x894>)
 80130d6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80130da:	4936      	ldr	r1, [pc, #216]	; (80131b4 <tcp_receive+0x898>)
 80130dc:	4836      	ldr	r0, [pc, #216]	; (80131b8 <tcp_receive+0x89c>)
 80130de:	f008 fea3 	bl	801be28 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	f000 80e7 	beq.w	80132ba <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80130ec:	4b2e      	ldr	r3, [pc, #184]	; (80131a8 <tcp_receive+0x88c>)
 80130ee:	691b      	ldr	r3, [r3, #16]
 80130f0:	899b      	ldrh	r3, [r3, #12]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fa faad 	bl	800d654 <lwip_htons>
 80130fa:	4603      	mov	r3, r0
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	f003 0301 	and.w	r3, r3, #1
 8013102:	2b00      	cmp	r3, #0
 8013104:	d010      	beq.n	8013128 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8013106:	e00a      	b.n	801311e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801310c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013118:	68f8      	ldr	r0, [r7, #12]
 801311a:	f7fd fd42 	bl	8010ba2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1f0      	bne.n	8013108 <tcp_receive+0x7ec>
 8013126:	e0c8      	b.n	80132ba <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801312c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801312e:	e052      	b.n	80131d6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	899b      	ldrh	r3, [r3, #12]
 8013136:	b29b      	uxth	r3, r3
 8013138:	4618      	mov	r0, r3
 801313a:	f7fa fa8b 	bl	800d654 <lwip_htons>
 801313e:	4603      	mov	r3, r0
 8013140:	b2db      	uxtb	r3, r3
 8013142:	f003 0301 	and.w	r3, r3, #1
 8013146:	2b00      	cmp	r3, #0
 8013148:	d03d      	beq.n	80131c6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801314a:	4b17      	ldr	r3, [pc, #92]	; (80131a8 <tcp_receive+0x88c>)
 801314c:	691b      	ldr	r3, [r3, #16]
 801314e:	899b      	ldrh	r3, [r3, #12]
 8013150:	b29b      	uxth	r3, r3
 8013152:	4618      	mov	r0, r3
 8013154:	f7fa fa7e 	bl	800d654 <lwip_htons>
 8013158:	4603      	mov	r3, r0
 801315a:	b2db      	uxtb	r3, r3
 801315c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013160:	2b00      	cmp	r3, #0
 8013162:	d130      	bne.n	80131c6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013164:	4b10      	ldr	r3, [pc, #64]	; (80131a8 <tcp_receive+0x88c>)
 8013166:	691b      	ldr	r3, [r3, #16]
 8013168:	899b      	ldrh	r3, [r3, #12]
 801316a:	b29c      	uxth	r4, r3
 801316c:	2001      	movs	r0, #1
 801316e:	f7fa fa71 	bl	800d654 <lwip_htons>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	4b0c      	ldr	r3, [pc, #48]	; (80131a8 <tcp_receive+0x88c>)
 8013178:	691b      	ldr	r3, [r3, #16]
 801317a:	4322      	orrs	r2, r4
 801317c:	b292      	uxth	r2, r2
 801317e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013180:	4b09      	ldr	r3, [pc, #36]	; (80131a8 <tcp_receive+0x88c>)
 8013182:	891c      	ldrh	r4, [r3, #8]
 8013184:	4b08      	ldr	r3, [pc, #32]	; (80131a8 <tcp_receive+0x88c>)
 8013186:	691b      	ldr	r3, [r3, #16]
 8013188:	899b      	ldrh	r3, [r3, #12]
 801318a:	b29b      	uxth	r3, r3
 801318c:	4618      	mov	r0, r3
 801318e:	f7fa fa61 	bl	800d654 <lwip_htons>
 8013192:	4603      	mov	r3, r0
 8013194:	b2db      	uxtb	r3, r3
 8013196:	f003 0303 	and.w	r3, r3, #3
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00e      	beq.n	80131bc <tcp_receive+0x8a0>
 801319e:	2301      	movs	r3, #1
 80131a0:	e00d      	b.n	80131be <tcp_receive+0x8a2>
 80131a2:	bf00      	nop
 80131a4:	20013d14 	.word	0x20013d14
 80131a8:	20013cf0 	.word	0x20013cf0
 80131ac:	20013d1e 	.word	0x20013d1e
 80131b0:	08020534 	.word	0x08020534
 80131b4:	080208dc 	.word	0x080208dc
 80131b8:	08020580 	.word	0x08020580
 80131bc:	2300      	movs	r3, #0
 80131be:	4423      	add	r3, r4
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	4b98      	ldr	r3, [pc, #608]	; (8013424 <tcp_receive+0xb08>)
 80131c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80131c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80131ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80131d0:	6938      	ldr	r0, [r7, #16]
 80131d2:	f7fd fce6 	bl	8010ba2 <tcp_seg_free>
            while (next &&
 80131d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d00e      	beq.n	80131fa <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80131dc:	4b91      	ldr	r3, [pc, #580]	; (8013424 <tcp_receive+0xb08>)
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	461a      	mov	r2, r3
 80131e2:	4b91      	ldr	r3, [pc, #580]	; (8013428 <tcp_receive+0xb0c>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	441a      	add	r2, r3
 80131e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131ea:	691b      	ldr	r3, [r3, #16]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80131f0:	8909      	ldrh	r1, [r1, #8]
 80131f2:	440b      	add	r3, r1
 80131f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	da9a      	bge.n	8013130 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80131fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d059      	beq.n	80132b4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013200:	4b88      	ldr	r3, [pc, #544]	; (8013424 <tcp_receive+0xb08>)
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	461a      	mov	r2, r3
 8013206:	4b88      	ldr	r3, [pc, #544]	; (8013428 <tcp_receive+0xb0c>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	441a      	add	r2, r3
 801320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801320e:	691b      	ldr	r3, [r3, #16]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013214:	2b00      	cmp	r3, #0
 8013216:	dd4d      	ble.n	80132b4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801321a:	691b      	ldr	r3, [r3, #16]
 801321c:	685b      	ldr	r3, [r3, #4]
 801321e:	b29a      	uxth	r2, r3
 8013220:	4b81      	ldr	r3, [pc, #516]	; (8013428 <tcp_receive+0xb0c>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	b29b      	uxth	r3, r3
 8013226:	1ad3      	subs	r3, r2, r3
 8013228:	b29a      	uxth	r2, r3
 801322a:	4b80      	ldr	r3, [pc, #512]	; (801342c <tcp_receive+0xb10>)
 801322c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801322e:	4b7f      	ldr	r3, [pc, #508]	; (801342c <tcp_receive+0xb10>)
 8013230:	691b      	ldr	r3, [r3, #16]
 8013232:	899b      	ldrh	r3, [r3, #12]
 8013234:	b29b      	uxth	r3, r3
 8013236:	4618      	mov	r0, r3
 8013238:	f7fa fa0c 	bl	800d654 <lwip_htons>
 801323c:	4603      	mov	r3, r0
 801323e:	b2db      	uxtb	r3, r3
 8013240:	f003 0302 	and.w	r3, r3, #2
 8013244:	2b00      	cmp	r3, #0
 8013246:	d005      	beq.n	8013254 <tcp_receive+0x938>
                inseg.len -= 1;
 8013248:	4b78      	ldr	r3, [pc, #480]	; (801342c <tcp_receive+0xb10>)
 801324a:	891b      	ldrh	r3, [r3, #8]
 801324c:	3b01      	subs	r3, #1
 801324e:	b29a      	uxth	r2, r3
 8013250:	4b76      	ldr	r3, [pc, #472]	; (801342c <tcp_receive+0xb10>)
 8013252:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013254:	4b75      	ldr	r3, [pc, #468]	; (801342c <tcp_receive+0xb10>)
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	4a74      	ldr	r2, [pc, #464]	; (801342c <tcp_receive+0xb10>)
 801325a:	8912      	ldrh	r2, [r2, #8]
 801325c:	4611      	mov	r1, r2
 801325e:	4618      	mov	r0, r3
 8013260:	f7fb fd94 	bl	800ed8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013264:	4b71      	ldr	r3, [pc, #452]	; (801342c <tcp_receive+0xb10>)
 8013266:	891c      	ldrh	r4, [r3, #8]
 8013268:	4b70      	ldr	r3, [pc, #448]	; (801342c <tcp_receive+0xb10>)
 801326a:	691b      	ldr	r3, [r3, #16]
 801326c:	899b      	ldrh	r3, [r3, #12]
 801326e:	b29b      	uxth	r3, r3
 8013270:	4618      	mov	r0, r3
 8013272:	f7fa f9ef 	bl	800d654 <lwip_htons>
 8013276:	4603      	mov	r3, r0
 8013278:	b2db      	uxtb	r3, r3
 801327a:	f003 0303 	and.w	r3, r3, #3
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <tcp_receive+0x96a>
 8013282:	2301      	movs	r3, #1
 8013284:	e000      	b.n	8013288 <tcp_receive+0x96c>
 8013286:	2300      	movs	r3, #0
 8013288:	4423      	add	r3, r4
 801328a:	b29a      	uxth	r2, r3
 801328c:	4b65      	ldr	r3, [pc, #404]	; (8013424 <tcp_receive+0xb08>)
 801328e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013290:	4b64      	ldr	r3, [pc, #400]	; (8013424 <tcp_receive+0xb08>)
 8013292:	881b      	ldrh	r3, [r3, #0]
 8013294:	461a      	mov	r2, r3
 8013296:	4b64      	ldr	r3, [pc, #400]	; (8013428 <tcp_receive+0xb0c>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	441a      	add	r2, r3
 801329c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801329e:	691b      	ldr	r3, [r3, #16]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	d006      	beq.n	80132b4 <tcp_receive+0x998>
 80132a6:	4b62      	ldr	r3, [pc, #392]	; (8013430 <tcp_receive+0xb14>)
 80132a8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80132ac:	4961      	ldr	r1, [pc, #388]	; (8013434 <tcp_receive+0xb18>)
 80132ae:	4862      	ldr	r0, [pc, #392]	; (8013438 <tcp_receive+0xb1c>)
 80132b0:	f008 fdba 	bl	801be28 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80132b8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80132ba:	4b5a      	ldr	r3, [pc, #360]	; (8013424 <tcp_receive+0xb08>)
 80132bc:	881b      	ldrh	r3, [r3, #0]
 80132be:	461a      	mov	r2, r3
 80132c0:	4b59      	ldr	r3, [pc, #356]	; (8013428 <tcp_receive+0xb0c>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	441a      	add	r2, r3
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132ce:	4b55      	ldr	r3, [pc, #340]	; (8013424 <tcp_receive+0xb08>)
 80132d0:	881b      	ldrh	r3, [r3, #0]
 80132d2:	429a      	cmp	r2, r3
 80132d4:	d206      	bcs.n	80132e4 <tcp_receive+0x9c8>
 80132d6:	4b56      	ldr	r3, [pc, #344]	; (8013430 <tcp_receive+0xb14>)
 80132d8:	f240 6207 	movw	r2, #1543	; 0x607
 80132dc:	4957      	ldr	r1, [pc, #348]	; (801343c <tcp_receive+0xb20>)
 80132de:	4856      	ldr	r0, [pc, #344]	; (8013438 <tcp_receive+0xb1c>)
 80132e0:	f008 fda2 	bl	801be28 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80132e8:	4b4e      	ldr	r3, [pc, #312]	; (8013424 <tcp_receive+0xb08>)
 80132ea:	881b      	ldrh	r3, [r3, #0]
 80132ec:	1ad3      	subs	r3, r2, r3
 80132ee:	b29a      	uxth	r2, r3
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80132f4:	6878      	ldr	r0, [r7, #4]
 80132f6:	f7fc fe13 	bl	800ff20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80132fa:	4b4c      	ldr	r3, [pc, #304]	; (801342c <tcp_receive+0xb10>)
 80132fc:	685b      	ldr	r3, [r3, #4]
 80132fe:	891b      	ldrh	r3, [r3, #8]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d006      	beq.n	8013312 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013304:	4b49      	ldr	r3, [pc, #292]	; (801342c <tcp_receive+0xb10>)
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	4a4d      	ldr	r2, [pc, #308]	; (8013440 <tcp_receive+0xb24>)
 801330a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801330c:	4b47      	ldr	r3, [pc, #284]	; (801342c <tcp_receive+0xb10>)
 801330e:	2200      	movs	r2, #0
 8013310:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013312:	4b46      	ldr	r3, [pc, #280]	; (801342c <tcp_receive+0xb10>)
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	899b      	ldrh	r3, [r3, #12]
 8013318:	b29b      	uxth	r3, r3
 801331a:	4618      	mov	r0, r3
 801331c:	f7fa f99a 	bl	800d654 <lwip_htons>
 8013320:	4603      	mov	r3, r0
 8013322:	b2db      	uxtb	r3, r3
 8013324:	f003 0301 	and.w	r3, r3, #1
 8013328:	2b00      	cmp	r3, #0
 801332a:	f000 80b8 	beq.w	801349e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801332e:	4b45      	ldr	r3, [pc, #276]	; (8013444 <tcp_receive+0xb28>)
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	f043 0320 	orr.w	r3, r3, #32
 8013336:	b2da      	uxtb	r2, r3
 8013338:	4b42      	ldr	r3, [pc, #264]	; (8013444 <tcp_receive+0xb28>)
 801333a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801333c:	e0af      	b.n	801349e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013342:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013348:	691b      	ldr	r3, [r3, #16]
 801334a:	685b      	ldr	r3, [r3, #4]
 801334c:	4a36      	ldr	r2, [pc, #216]	; (8013428 <tcp_receive+0xb0c>)
 801334e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	891b      	ldrh	r3, [r3, #8]
 8013354:	461c      	mov	r4, r3
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	691b      	ldr	r3, [r3, #16]
 801335a:	899b      	ldrh	r3, [r3, #12]
 801335c:	b29b      	uxth	r3, r3
 801335e:	4618      	mov	r0, r3
 8013360:	f7fa f978 	bl	800d654 <lwip_htons>
 8013364:	4603      	mov	r3, r0
 8013366:	b2db      	uxtb	r3, r3
 8013368:	f003 0303 	and.w	r3, r3, #3
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <tcp_receive+0xa58>
 8013370:	2301      	movs	r3, #1
 8013372:	e000      	b.n	8013376 <tcp_receive+0xa5a>
 8013374:	2300      	movs	r3, #0
 8013376:	191a      	adds	r2, r3, r4
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801337c:	441a      	add	r2, r3
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013386:	461c      	mov	r4, r3
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	891b      	ldrh	r3, [r3, #8]
 801338c:	461d      	mov	r5, r3
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	899b      	ldrh	r3, [r3, #12]
 8013394:	b29b      	uxth	r3, r3
 8013396:	4618      	mov	r0, r3
 8013398:	f7fa f95c 	bl	800d654 <lwip_htons>
 801339c:	4603      	mov	r3, r0
 801339e:	b2db      	uxtb	r3, r3
 80133a0:	f003 0303 	and.w	r3, r3, #3
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d001      	beq.n	80133ac <tcp_receive+0xa90>
 80133a8:	2301      	movs	r3, #1
 80133aa:	e000      	b.n	80133ae <tcp_receive+0xa92>
 80133ac:	2300      	movs	r3, #0
 80133ae:	442b      	add	r3, r5
 80133b0:	429c      	cmp	r4, r3
 80133b2:	d206      	bcs.n	80133c2 <tcp_receive+0xaa6>
 80133b4:	4b1e      	ldr	r3, [pc, #120]	; (8013430 <tcp_receive+0xb14>)
 80133b6:	f240 622b 	movw	r2, #1579	; 0x62b
 80133ba:	4923      	ldr	r1, [pc, #140]	; (8013448 <tcp_receive+0xb2c>)
 80133bc:	481e      	ldr	r0, [pc, #120]	; (8013438 <tcp_receive+0xb1c>)
 80133be:	f008 fd33 	bl	801be28 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	891b      	ldrh	r3, [r3, #8]
 80133c6:	461c      	mov	r4, r3
 80133c8:	68bb      	ldr	r3, [r7, #8]
 80133ca:	691b      	ldr	r3, [r3, #16]
 80133cc:	899b      	ldrh	r3, [r3, #12]
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fa f93f 	bl	800d654 <lwip_htons>
 80133d6:	4603      	mov	r3, r0
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	f003 0303 	and.w	r3, r3, #3
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <tcp_receive+0xaca>
 80133e2:	2301      	movs	r3, #1
 80133e4:	e000      	b.n	80133e8 <tcp_receive+0xacc>
 80133e6:	2300      	movs	r3, #0
 80133e8:	1919      	adds	r1, r3, r4
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80133ee:	b28b      	uxth	r3, r1
 80133f0:	1ad3      	subs	r3, r2, r3
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7fc fd91 	bl	800ff20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	891b      	ldrh	r3, [r3, #8]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d028      	beq.n	801345a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013408:	4b0d      	ldr	r3, [pc, #52]	; (8013440 <tcp_receive+0xb24>)
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d01d      	beq.n	801344c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013410:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <tcp_receive+0xb24>)
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	685b      	ldr	r3, [r3, #4]
 8013418:	4619      	mov	r1, r3
 801341a:	4610      	mov	r0, r2
 801341c:	f7fb ff0a 	bl	800f234 <pbuf_cat>
 8013420:	e018      	b.n	8013454 <tcp_receive+0xb38>
 8013422:	bf00      	nop
 8013424:	20013d1e 	.word	0x20013d1e
 8013428:	20013d14 	.word	0x20013d14
 801342c:	20013cf0 	.word	0x20013cf0
 8013430:	08020534 	.word	0x08020534
 8013434:	08020914 	.word	0x08020914
 8013438:	08020580 	.word	0x08020580
 801343c:	08020950 	.word	0x08020950
 8013440:	20013d24 	.word	0x20013d24
 8013444:	20013d21 	.word	0x20013d21
 8013448:	08020970 	.word	0x08020970
            } else {
              recv_data = cseg->p;
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	4a70      	ldr	r2, [pc, #448]	; (8013614 <tcp_receive+0xcf8>)
 8013452:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	2200      	movs	r2, #0
 8013458:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	691b      	ldr	r3, [r3, #16]
 801345e:	899b      	ldrh	r3, [r3, #12]
 8013460:	b29b      	uxth	r3, r3
 8013462:	4618      	mov	r0, r3
 8013464:	f7fa f8f6 	bl	800d654 <lwip_htons>
 8013468:	4603      	mov	r3, r0
 801346a:	b2db      	uxtb	r3, r3
 801346c:	f003 0301 	and.w	r3, r3, #1
 8013470:	2b00      	cmp	r3, #0
 8013472:	d00d      	beq.n	8013490 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013474:	4b68      	ldr	r3, [pc, #416]	; (8013618 <tcp_receive+0xcfc>)
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	f043 0320 	orr.w	r3, r3, #32
 801347c:	b2da      	uxtb	r2, r3
 801347e:	4b66      	ldr	r3, [pc, #408]	; (8013618 <tcp_receive+0xcfc>)
 8013480:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	7d1b      	ldrb	r3, [r3, #20]
 8013486:	2b04      	cmp	r3, #4
 8013488:	d102      	bne.n	8013490 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2207      	movs	r2, #7
 801348e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	681a      	ldr	r2, [r3, #0]
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8013498:	68b8      	ldr	r0, [r7, #8]
 801349a:	f7fd fb82 	bl	8010ba2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d008      	beq.n	80134b8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	685a      	ldr	r2, [r3, #4]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80134b2:	429a      	cmp	r2, r3
 80134b4:	f43f af43 	beq.w	801333e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	8b5b      	ldrh	r3, [r3, #26]
 80134bc:	f003 0301 	and.w	r3, r3, #1
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d00e      	beq.n	80134e2 <tcp_receive+0xbc6>
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	8b5b      	ldrh	r3, [r3, #26]
 80134c8:	f023 0301 	bic.w	r3, r3, #1
 80134cc:	b29a      	uxth	r2, r3
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	835a      	strh	r2, [r3, #26]
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8b5b      	ldrh	r3, [r3, #26]
 80134d6:	f043 0302 	orr.w	r3, r3, #2
 80134da:	b29a      	uxth	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80134e0:	e188      	b.n	80137f4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	8b5b      	ldrh	r3, [r3, #26]
 80134e6:	f043 0301 	orr.w	r3, r3, #1
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80134f0:	e180      	b.n	80137f4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d106      	bne.n	8013508 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80134fa:	4848      	ldr	r0, [pc, #288]	; (801361c <tcp_receive+0xd00>)
 80134fc:	f7fd fb6a 	bl	8010bd4 <tcp_seg_copy>
 8013500:	4602      	mov	r2, r0
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	675a      	str	r2, [r3, #116]	; 0x74
 8013506:	e16d      	b.n	80137e4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013508:	2300      	movs	r3, #0
 801350a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013510:	63bb      	str	r3, [r7, #56]	; 0x38
 8013512:	e157      	b.n	80137c4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	685a      	ldr	r2, [r3, #4]
 801351a:	4b41      	ldr	r3, [pc, #260]	; (8013620 <tcp_receive+0xd04>)
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	429a      	cmp	r2, r3
 8013520:	d11d      	bne.n	801355e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013522:	4b3e      	ldr	r3, [pc, #248]	; (801361c <tcp_receive+0xd00>)
 8013524:	891a      	ldrh	r2, [r3, #8]
 8013526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013528:	891b      	ldrh	r3, [r3, #8]
 801352a:	429a      	cmp	r2, r3
 801352c:	f240 814f 	bls.w	80137ce <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013530:	483a      	ldr	r0, [pc, #232]	; (801361c <tcp_receive+0xd00>)
 8013532:	f7fd fb4f 	bl	8010bd4 <tcp_seg_copy>
 8013536:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013538:	697b      	ldr	r3, [r7, #20]
 801353a:	2b00      	cmp	r3, #0
 801353c:	f000 8149 	beq.w	80137d2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013542:	2b00      	cmp	r3, #0
 8013544:	d003      	beq.n	801354e <tcp_receive+0xc32>
                    prev->next = cseg;
 8013546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013548:	697a      	ldr	r2, [r7, #20]
 801354a:	601a      	str	r2, [r3, #0]
 801354c:	e002      	b.n	8013554 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	697a      	ldr	r2, [r7, #20]
 8013552:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013556:	6978      	ldr	r0, [r7, #20]
 8013558:	f7ff f8dc 	bl	8012714 <tcp_oos_insert_segment>
                }
                break;
 801355c:	e139      	b.n	80137d2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013560:	2b00      	cmp	r3, #0
 8013562:	d117      	bne.n	8013594 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013564:	4b2e      	ldr	r3, [pc, #184]	; (8013620 <tcp_receive+0xd04>)
 8013566:	681a      	ldr	r2, [r3, #0]
 8013568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	1ad3      	subs	r3, r2, r3
 8013570:	2b00      	cmp	r3, #0
 8013572:	da57      	bge.n	8013624 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013574:	4829      	ldr	r0, [pc, #164]	; (801361c <tcp_receive+0xd00>)
 8013576:	f7fd fb2d 	bl	8010bd4 <tcp_seg_copy>
 801357a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801357c:	69bb      	ldr	r3, [r7, #24]
 801357e:	2b00      	cmp	r3, #0
 8013580:	f000 8129 	beq.w	80137d6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	69ba      	ldr	r2, [r7, #24]
 8013588:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801358a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801358c:	69b8      	ldr	r0, [r7, #24]
 801358e:	f7ff f8c1 	bl	8012714 <tcp_oos_insert_segment>
                  }
                  break;
 8013592:	e120      	b.n	80137d6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013594:	4b22      	ldr	r3, [pc, #136]	; (8013620 <tcp_receive+0xd04>)
 8013596:	681a      	ldr	r2, [r3, #0]
 8013598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801359a:	691b      	ldr	r3, [r3, #16]
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	3b01      	subs	r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	db3e      	blt.n	8013624 <tcp_receive+0xd08>
 80135a6:	4b1e      	ldr	r3, [pc, #120]	; (8013620 <tcp_receive+0xd04>)
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ac:	691b      	ldr	r3, [r3, #16]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	1ad3      	subs	r3, r2, r3
 80135b2:	3301      	adds	r3, #1
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	dc35      	bgt.n	8013624 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80135b8:	4818      	ldr	r0, [pc, #96]	; (801361c <tcp_receive+0xd00>)
 80135ba:	f7fd fb0b 	bl	8010bd4 <tcp_seg_copy>
 80135be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f000 8109 	beq.w	80137da <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80135c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135d0:	8912      	ldrh	r2, [r2, #8]
 80135d2:	441a      	add	r2, r3
 80135d4:	4b12      	ldr	r3, [pc, #72]	; (8013620 <tcp_receive+0xd04>)
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	2b00      	cmp	r3, #0
 80135dc:	dd12      	ble.n	8013604 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80135de:	4b10      	ldr	r3, [pc, #64]	; (8013620 <tcp_receive+0xd04>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135e6:	691b      	ldr	r3, [r3, #16]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	b29b      	uxth	r3, r3
 80135ec:	1ad3      	subs	r3, r2, r3
 80135ee:	b29a      	uxth	r2, r3
 80135f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80135f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135f6:	685a      	ldr	r2, [r3, #4]
 80135f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135fa:	891b      	ldrh	r3, [r3, #8]
 80135fc:	4619      	mov	r1, r3
 80135fe:	4610      	mov	r0, r2
 8013600:	f7fb fbc4 	bl	800ed8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013606:	69fa      	ldr	r2, [r7, #28]
 8013608:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801360a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801360c:	69f8      	ldr	r0, [r7, #28]
 801360e:	f7ff f881 	bl	8012714 <tcp_oos_insert_segment>
                  }
                  break;
 8013612:	e0e2      	b.n	80137da <tcp_receive+0xebe>
 8013614:	20013d24 	.word	0x20013d24
 8013618:	20013d21 	.word	0x20013d21
 801361c:	20013cf0 	.word	0x20013cf0
 8013620:	20013d14 	.word	0x20013d14
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013626:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	f040 80c6 	bne.w	80137be <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013632:	4b80      	ldr	r3, [pc, #512]	; (8013834 <tcp_receive+0xf18>)
 8013634:	681a      	ldr	r2, [r3, #0]
 8013636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013638:	691b      	ldr	r3, [r3, #16]
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801363e:	2b00      	cmp	r3, #0
 8013640:	f340 80bd 	ble.w	80137be <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013646:	691b      	ldr	r3, [r3, #16]
 8013648:	899b      	ldrh	r3, [r3, #12]
 801364a:	b29b      	uxth	r3, r3
 801364c:	4618      	mov	r0, r3
 801364e:	f7fa f801 	bl	800d654 <lwip_htons>
 8013652:	4603      	mov	r3, r0
 8013654:	b2db      	uxtb	r3, r3
 8013656:	f003 0301 	and.w	r3, r3, #1
 801365a:	2b00      	cmp	r3, #0
 801365c:	f040 80bf 	bne.w	80137de <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013660:	4875      	ldr	r0, [pc, #468]	; (8013838 <tcp_receive+0xf1c>)
 8013662:	f7fd fab7 	bl	8010bd4 <tcp_seg_copy>
 8013666:	4602      	mov	r2, r0
 8013668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801366c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	f000 80b6 	beq.w	80137e2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013678:	691b      	ldr	r3, [r3, #16]
 801367a:	685b      	ldr	r3, [r3, #4]
 801367c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801367e:	8912      	ldrh	r2, [r2, #8]
 8013680:	441a      	add	r2, r3
 8013682:	4b6c      	ldr	r3, [pc, #432]	; (8013834 <tcp_receive+0xf18>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	1ad3      	subs	r3, r2, r3
 8013688:	2b00      	cmp	r3, #0
 801368a:	dd12      	ble.n	80136b2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801368c:	4b69      	ldr	r3, [pc, #420]	; (8013834 <tcp_receive+0xf18>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	b29a      	uxth	r2, r3
 8013692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013694:	691b      	ldr	r3, [r3, #16]
 8013696:	685b      	ldr	r3, [r3, #4]
 8013698:	b29b      	uxth	r3, r3
 801369a:	1ad3      	subs	r3, r2, r3
 801369c:	b29a      	uxth	r2, r3
 801369e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80136a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a4:	685a      	ldr	r2, [r3, #4]
 80136a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a8:	891b      	ldrh	r3, [r3, #8]
 80136aa:	4619      	mov	r1, r3
 80136ac:	4610      	mov	r0, r2
 80136ae:	f7fb fb6d 	bl	800ed8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80136b2:	4b62      	ldr	r3, [pc, #392]	; (801383c <tcp_receive+0xf20>)
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	461a      	mov	r2, r3
 80136b8:	4b5e      	ldr	r3, [pc, #376]	; (8013834 <tcp_receive+0xf18>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	441a      	add	r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c2:	6879      	ldr	r1, [r7, #4]
 80136c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80136c6:	440b      	add	r3, r1
 80136c8:	1ad3      	subs	r3, r2, r3
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f340 8089 	ble.w	80137e2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80136d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	691b      	ldr	r3, [r3, #16]
 80136d6:	899b      	ldrh	r3, [r3, #12]
 80136d8:	b29b      	uxth	r3, r3
 80136da:	4618      	mov	r0, r3
 80136dc:	f7f9 ffba 	bl	800d654 <lwip_htons>
 80136e0:	4603      	mov	r3, r0
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	f003 0301 	and.w	r3, r3, #1
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d022      	beq.n	8013732 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80136ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	899b      	ldrh	r3, [r3, #12]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	b21b      	sxth	r3, r3
 80136f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80136fc:	b21c      	sxth	r4, r3
 80136fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	691b      	ldr	r3, [r3, #16]
 8013704:	899b      	ldrh	r3, [r3, #12]
 8013706:	b29b      	uxth	r3, r3
 8013708:	4618      	mov	r0, r3
 801370a:	f7f9 ffa3 	bl	800d654 <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	b2db      	uxtb	r3, r3
 8013712:	b29b      	uxth	r3, r3
 8013714:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013718:	b29b      	uxth	r3, r3
 801371a:	4618      	mov	r0, r3
 801371c:	f7f9 ff9a 	bl	800d654 <lwip_htons>
 8013720:	4603      	mov	r3, r0
 8013722:	b21b      	sxth	r3, r3
 8013724:	4323      	orrs	r3, r4
 8013726:	b21a      	sxth	r2, r3
 8013728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	691b      	ldr	r3, [r3, #16]
 801372e:	b292      	uxth	r2, r2
 8013730:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013736:	b29a      	uxth	r2, r3
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801373c:	4413      	add	r3, r2
 801373e:	b299      	uxth	r1, r3
 8013740:	4b3c      	ldr	r3, [pc, #240]	; (8013834 <tcp_receive+0xf18>)
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	b29a      	uxth	r2, r3
 8013746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	1a8a      	subs	r2, r1, r2
 801374c:	b292      	uxth	r2, r2
 801374e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	685a      	ldr	r2, [r3, #4]
 8013756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	891b      	ldrh	r3, [r3, #8]
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7fb fb14 	bl	800ed8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	891c      	ldrh	r4, [r3, #8]
 801376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	691b      	ldr	r3, [r3, #16]
 8013770:	899b      	ldrh	r3, [r3, #12]
 8013772:	b29b      	uxth	r3, r3
 8013774:	4618      	mov	r0, r3
 8013776:	f7f9 ff6d 	bl	800d654 <lwip_htons>
 801377a:	4603      	mov	r3, r0
 801377c:	b2db      	uxtb	r3, r3
 801377e:	f003 0303 	and.w	r3, r3, #3
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <tcp_receive+0xe6e>
 8013786:	2301      	movs	r3, #1
 8013788:	e000      	b.n	801378c <tcp_receive+0xe70>
 801378a:	2300      	movs	r3, #0
 801378c:	4423      	add	r3, r4
 801378e:	b29a      	uxth	r2, r3
 8013790:	4b2a      	ldr	r3, [pc, #168]	; (801383c <tcp_receive+0xf20>)
 8013792:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013794:	4b29      	ldr	r3, [pc, #164]	; (801383c <tcp_receive+0xf20>)
 8013796:	881b      	ldrh	r3, [r3, #0]
 8013798:	461a      	mov	r2, r3
 801379a:	4b26      	ldr	r3, [pc, #152]	; (8013834 <tcp_receive+0xf18>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	441a      	add	r2, r3
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137a4:	6879      	ldr	r1, [r7, #4]
 80137a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80137a8:	440b      	add	r3, r1
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d019      	beq.n	80137e2 <tcp_receive+0xec6>
 80137ae:	4b24      	ldr	r3, [pc, #144]	; (8013840 <tcp_receive+0xf24>)
 80137b0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80137b4:	4923      	ldr	r1, [pc, #140]	; (8013844 <tcp_receive+0xf28>)
 80137b6:	4824      	ldr	r0, [pc, #144]	; (8013848 <tcp_receive+0xf2c>)
 80137b8:	f008 fb36 	bl	801be28 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80137bc:	e011      	b.n	80137e2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80137be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80137c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f47f aea4 	bne.w	8013514 <tcp_receive+0xbf8>
 80137cc:	e00a      	b.n	80137e4 <tcp_receive+0xec8>
                break;
 80137ce:	bf00      	nop
 80137d0:	e008      	b.n	80137e4 <tcp_receive+0xec8>
                break;
 80137d2:	bf00      	nop
 80137d4:	e006      	b.n	80137e4 <tcp_receive+0xec8>
                  break;
 80137d6:	bf00      	nop
 80137d8:	e004      	b.n	80137e4 <tcp_receive+0xec8>
                  break;
 80137da:	bf00      	nop
 80137dc:	e002      	b.n	80137e4 <tcp_receive+0xec8>
                  break;
 80137de:	bf00      	nop
 80137e0:	e000      	b.n	80137e4 <tcp_receive+0xec8>
                break;
 80137e2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f001 ff19 	bl	801561c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80137ea:	e003      	b.n	80137f4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f001 ff15 	bl	801561c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80137f2:	e01a      	b.n	801382a <tcp_receive+0xf0e>
 80137f4:	e019      	b.n	801382a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80137f6:	4b0f      	ldr	r3, [pc, #60]	; (8013834 <tcp_receive+0xf18>)
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	db0a      	blt.n	801381a <tcp_receive+0xefe>
 8013804:	4b0b      	ldr	r3, [pc, #44]	; (8013834 <tcp_receive+0xf18>)
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801380c:	6879      	ldr	r1, [r7, #4]
 801380e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013810:	440b      	add	r3, r1
 8013812:	1ad3      	subs	r3, r2, r3
 8013814:	3301      	adds	r3, #1
 8013816:	2b00      	cmp	r3, #0
 8013818:	dd07      	ble.n	801382a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	8b5b      	ldrh	r3, [r3, #26]
 801381e:	f043 0302 	orr.w	r3, r3, #2
 8013822:	b29a      	uxth	r2, r3
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013828:	e7ff      	b.n	801382a <tcp_receive+0xf0e>
 801382a:	bf00      	nop
 801382c:	3750      	adds	r7, #80	; 0x50
 801382e:	46bd      	mov	sp, r7
 8013830:	bdb0      	pop	{r4, r5, r7, pc}
 8013832:	bf00      	nop
 8013834:	20013d14 	.word	0x20013d14
 8013838:	20013cf0 	.word	0x20013cf0
 801383c:	20013d1e 	.word	0x20013d1e
 8013840:	08020534 	.word	0x08020534
 8013844:	080208dc 	.word	0x080208dc
 8013848:	08020580 	.word	0x08020580

0801384c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013852:	4b15      	ldr	r3, [pc, #84]	; (80138a8 <tcp_get_next_optbyte+0x5c>)
 8013854:	881b      	ldrh	r3, [r3, #0]
 8013856:	1c5a      	adds	r2, r3, #1
 8013858:	b291      	uxth	r1, r2
 801385a:	4a13      	ldr	r2, [pc, #76]	; (80138a8 <tcp_get_next_optbyte+0x5c>)
 801385c:	8011      	strh	r1, [r2, #0]
 801385e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013860:	4b12      	ldr	r3, [pc, #72]	; (80138ac <tcp_get_next_optbyte+0x60>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d004      	beq.n	8013872 <tcp_get_next_optbyte+0x26>
 8013868:	4b11      	ldr	r3, [pc, #68]	; (80138b0 <tcp_get_next_optbyte+0x64>)
 801386a:	881b      	ldrh	r3, [r3, #0]
 801386c:	88fa      	ldrh	r2, [r7, #6]
 801386e:	429a      	cmp	r2, r3
 8013870:	d208      	bcs.n	8013884 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013872:	4b10      	ldr	r3, [pc, #64]	; (80138b4 <tcp_get_next_optbyte+0x68>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	3314      	adds	r3, #20
 8013878:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801387a:	88fb      	ldrh	r3, [r7, #6]
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	4413      	add	r3, r2
 8013880:	781b      	ldrb	r3, [r3, #0]
 8013882:	e00b      	b.n	801389c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013884:	88fb      	ldrh	r3, [r7, #6]
 8013886:	b2da      	uxtb	r2, r3
 8013888:	4b09      	ldr	r3, [pc, #36]	; (80138b0 <tcp_get_next_optbyte+0x64>)
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	b2db      	uxtb	r3, r3
 801388e:	1ad3      	subs	r3, r2, r3
 8013890:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013892:	4b06      	ldr	r3, [pc, #24]	; (80138ac <tcp_get_next_optbyte+0x60>)
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	797b      	ldrb	r3, [r7, #5]
 8013898:	4413      	add	r3, r2
 801389a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801389c:	4618      	mov	r0, r3
 801389e:	370c      	adds	r7, #12
 80138a0:	46bd      	mov	sp, r7
 80138a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a6:	4770      	bx	lr
 80138a8:	20013d10 	.word	0x20013d10
 80138ac:	20013d0c 	.word	0x20013d0c
 80138b0:	20013d0a 	.word	0x20013d0a
 80138b4:	20013d04 	.word	0x20013d04

080138b8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d106      	bne.n	80138d4 <tcp_parseopt+0x1c>
 80138c6:	4b32      	ldr	r3, [pc, #200]	; (8013990 <tcp_parseopt+0xd8>)
 80138c8:	f240 727d 	movw	r2, #1917	; 0x77d
 80138cc:	4931      	ldr	r1, [pc, #196]	; (8013994 <tcp_parseopt+0xdc>)
 80138ce:	4832      	ldr	r0, [pc, #200]	; (8013998 <tcp_parseopt+0xe0>)
 80138d0:	f008 faaa 	bl	801be28 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80138d4:	4b31      	ldr	r3, [pc, #196]	; (801399c <tcp_parseopt+0xe4>)
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d056      	beq.n	801398a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80138dc:	4b30      	ldr	r3, [pc, #192]	; (80139a0 <tcp_parseopt+0xe8>)
 80138de:	2200      	movs	r2, #0
 80138e0:	801a      	strh	r2, [r3, #0]
 80138e2:	e046      	b.n	8013972 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80138e4:	f7ff ffb2 	bl	801384c <tcp_get_next_optbyte>
 80138e8:	4603      	mov	r3, r0
 80138ea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
 80138ee:	2b02      	cmp	r3, #2
 80138f0:	d006      	beq.n	8013900 <tcp_parseopt+0x48>
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	dc2c      	bgt.n	8013950 <tcp_parseopt+0x98>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d042      	beq.n	8013980 <tcp_parseopt+0xc8>
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d128      	bne.n	8013950 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80138fe:	e038      	b.n	8013972 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013900:	f7ff ffa4 	bl	801384c <tcp_get_next_optbyte>
 8013904:	4603      	mov	r3, r0
 8013906:	2b04      	cmp	r3, #4
 8013908:	d13c      	bne.n	8013984 <tcp_parseopt+0xcc>
 801390a:	4b25      	ldr	r3, [pc, #148]	; (80139a0 <tcp_parseopt+0xe8>)
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	3301      	adds	r3, #1
 8013910:	4a22      	ldr	r2, [pc, #136]	; (801399c <tcp_parseopt+0xe4>)
 8013912:	8812      	ldrh	r2, [r2, #0]
 8013914:	4293      	cmp	r3, r2
 8013916:	da35      	bge.n	8013984 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013918:	f7ff ff98 	bl	801384c <tcp_get_next_optbyte>
 801391c:	4603      	mov	r3, r0
 801391e:	b29b      	uxth	r3, r3
 8013920:	021b      	lsls	r3, r3, #8
 8013922:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013924:	f7ff ff92 	bl	801384c <tcp_get_next_optbyte>
 8013928:	4603      	mov	r3, r0
 801392a:	b29a      	uxth	r2, r3
 801392c:	89bb      	ldrh	r3, [r7, #12]
 801392e:	4313      	orrs	r3, r2
 8013930:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013932:	89bb      	ldrh	r3, [r7, #12]
 8013934:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8013938:	4293      	cmp	r3, r2
 801393a:	d804      	bhi.n	8013946 <tcp_parseopt+0x8e>
 801393c:	89bb      	ldrh	r3, [r7, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d001      	beq.n	8013946 <tcp_parseopt+0x8e>
 8013942:	89ba      	ldrh	r2, [r7, #12]
 8013944:	e001      	b.n	801394a <tcp_parseopt+0x92>
 8013946:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801394e:	e010      	b.n	8013972 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013950:	f7ff ff7c 	bl	801384c <tcp_get_next_optbyte>
 8013954:	4603      	mov	r3, r0
 8013956:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013958:	7afb      	ldrb	r3, [r7, #11]
 801395a:	2b01      	cmp	r3, #1
 801395c:	d914      	bls.n	8013988 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801395e:	7afb      	ldrb	r3, [r7, #11]
 8013960:	b29a      	uxth	r2, r3
 8013962:	4b0f      	ldr	r3, [pc, #60]	; (80139a0 <tcp_parseopt+0xe8>)
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	4413      	add	r3, r2
 8013968:	b29b      	uxth	r3, r3
 801396a:	3b02      	subs	r3, #2
 801396c:	b29a      	uxth	r2, r3
 801396e:	4b0c      	ldr	r3, [pc, #48]	; (80139a0 <tcp_parseopt+0xe8>)
 8013970:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013972:	4b0b      	ldr	r3, [pc, #44]	; (80139a0 <tcp_parseopt+0xe8>)
 8013974:	881a      	ldrh	r2, [r3, #0]
 8013976:	4b09      	ldr	r3, [pc, #36]	; (801399c <tcp_parseopt+0xe4>)
 8013978:	881b      	ldrh	r3, [r3, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	d3b2      	bcc.n	80138e4 <tcp_parseopt+0x2c>
 801397e:	e004      	b.n	801398a <tcp_parseopt+0xd2>
          return;
 8013980:	bf00      	nop
 8013982:	e002      	b.n	801398a <tcp_parseopt+0xd2>
            return;
 8013984:	bf00      	nop
 8013986:	e000      	b.n	801398a <tcp_parseopt+0xd2>
            return;
 8013988:	bf00      	nop
      }
    }
  }
}
 801398a:	3710      	adds	r7, #16
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}
 8013990:	08020534 	.word	0x08020534
 8013994:	08020998 	.word	0x08020998
 8013998:	08020580 	.word	0x08020580
 801399c:	20013d08 	.word	0x20013d08
 80139a0:	20013d10 	.word	0x20013d10

080139a4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80139a4:	b480      	push	{r7}
 80139a6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80139a8:	4b05      	ldr	r3, [pc, #20]	; (80139c0 <tcp_trigger_input_pcb_close+0x1c>)
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	f043 0310 	orr.w	r3, r3, #16
 80139b0:	b2da      	uxtb	r2, r3
 80139b2:	4b03      	ldr	r3, [pc, #12]	; (80139c0 <tcp_trigger_input_pcb_close+0x1c>)
 80139b4:	701a      	strb	r2, [r3, #0]
}
 80139b6:	bf00      	nop
 80139b8:	46bd      	mov	sp, r7
 80139ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139be:	4770      	bx	lr
 80139c0:	20013d21 	.word	0x20013d21

080139c4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00a      	beq.n	80139ec <tcp_route+0x28>
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	7a1b      	ldrb	r3, [r3, #8]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d006      	beq.n	80139ec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	7a1b      	ldrb	r3, [r3, #8]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7fa ffc6 	bl	800e974 <netif_get_by_index>
 80139e8:	4603      	mov	r3, r0
 80139ea:	e003      	b.n	80139f4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f005 fe9b 	bl	8019728 <ip4_route>
 80139f2:	4603      	mov	r3, r0
  }
}
 80139f4:	4618      	mov	r0, r3
 80139f6:	3710      	adds	r7, #16
 80139f8:	46bd      	mov	sp, r7
 80139fa:	bd80      	pop	{r7, pc}

080139fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80139fc:	b590      	push	{r4, r7, lr}
 80139fe:	b087      	sub	sp, #28
 8013a00:	af00      	add	r7, sp, #0
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	603b      	str	r3, [r7, #0]
 8013a08:	4613      	mov	r3, r2
 8013a0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d105      	bne.n	8013a1e <tcp_create_segment+0x22>
 8013a12:	4b45      	ldr	r3, [pc, #276]	; (8013b28 <tcp_create_segment+0x12c>)
 8013a14:	22a3      	movs	r2, #163	; 0xa3
 8013a16:	4945      	ldr	r1, [pc, #276]	; (8013b2c <tcp_create_segment+0x130>)
 8013a18:	4845      	ldr	r0, [pc, #276]	; (8013b30 <tcp_create_segment+0x134>)
 8013a1a:	f008 fa05 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d105      	bne.n	8013a30 <tcp_create_segment+0x34>
 8013a24:	4b40      	ldr	r3, [pc, #256]	; (8013b28 <tcp_create_segment+0x12c>)
 8013a26:	22a4      	movs	r2, #164	; 0xa4
 8013a28:	4942      	ldr	r1, [pc, #264]	; (8013b34 <tcp_create_segment+0x138>)
 8013a2a:	4841      	ldr	r0, [pc, #260]	; (8013b30 <tcp_create_segment+0x134>)
 8013a2c:	f008 f9fc 	bl	801be28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a34:	009b      	lsls	r3, r3, #2
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	f003 0304 	and.w	r3, r3, #4
 8013a3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013a3e:	2003      	movs	r0, #3
 8013a40:	f7fa fc36 	bl	800e2b0 <memp_malloc>
 8013a44:	6138      	str	r0, [r7, #16]
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d104      	bne.n	8013a56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013a4c:	68b8      	ldr	r0, [r7, #8]
 8013a4e:	f7fb fb23 	bl	800f098 <pbuf_free>
    return NULL;
 8013a52:	2300      	movs	r3, #0
 8013a54:	e064      	b.n	8013b20 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013a5c:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	2200      	movs	r2, #0
 8013a62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	68ba      	ldr	r2, [r7, #8]
 8013a68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	891a      	ldrh	r2, [r3, #8]
 8013a6e:	7dfb      	ldrb	r3, [r7, #23]
 8013a70:	b29b      	uxth	r3, r3
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d205      	bcs.n	8013a82 <tcp_create_segment+0x86>
 8013a76:	4b2c      	ldr	r3, [pc, #176]	; (8013b28 <tcp_create_segment+0x12c>)
 8013a78:	22b0      	movs	r2, #176	; 0xb0
 8013a7a:	492f      	ldr	r1, [pc, #188]	; (8013b38 <tcp_create_segment+0x13c>)
 8013a7c:	482c      	ldr	r0, [pc, #176]	; (8013b30 <tcp_create_segment+0x134>)
 8013a7e:	f008 f9d3 	bl	801be28 <iprintf>
  seg->len = p->tot_len - optlen;
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	891a      	ldrh	r2, [r3, #8]
 8013a86:	7dfb      	ldrb	r3, [r7, #23]
 8013a88:	b29b      	uxth	r3, r3
 8013a8a:	1ad3      	subs	r3, r2, r3
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	2200      	movs	r2, #0
 8013a96:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013a98:	2114      	movs	r1, #20
 8013a9a:	68b8      	ldr	r0, [r7, #8]
 8013a9c:	f7fb fa66 	bl	800ef6c <pbuf_add_header>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d004      	beq.n	8013ab0 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013aa6:	6938      	ldr	r0, [r7, #16]
 8013aa8:	f7fd f87b 	bl	8010ba2 <tcp_seg_free>
    return NULL;
 8013aac:	2300      	movs	r3, #0
 8013aae:	e037      	b.n	8013b20 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	685a      	ldr	r2, [r3, #4]
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	8ada      	ldrh	r2, [r3, #22]
 8013abe:	693b      	ldr	r3, [r7, #16]
 8013ac0:	691c      	ldr	r4, [r3, #16]
 8013ac2:	4610      	mov	r0, r2
 8013ac4:	f7f9 fdc6 	bl	800d654 <lwip_htons>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	8b1a      	ldrh	r2, [r3, #24]
 8013ad0:	693b      	ldr	r3, [r7, #16]
 8013ad2:	691c      	ldr	r4, [r3, #16]
 8013ad4:	4610      	mov	r0, r2
 8013ad6:	f7f9 fdbd 	bl	800d654 <lwip_htons>
 8013ada:	4603      	mov	r3, r0
 8013adc:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013ade:	693b      	ldr	r3, [r7, #16]
 8013ae0:	691c      	ldr	r4, [r3, #16]
 8013ae2:	6838      	ldr	r0, [r7, #0]
 8013ae4:	f7f9 fdcb 	bl	800d67e <lwip_htonl>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013aec:	7dfb      	ldrb	r3, [r7, #23]
 8013aee:	089b      	lsrs	r3, r3, #2
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	3305      	adds	r3, #5
 8013af6:	b29b      	uxth	r3, r3
 8013af8:	031b      	lsls	r3, r3, #12
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	79fb      	ldrb	r3, [r7, #7]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	4313      	orrs	r3, r2
 8013b02:	b29a      	uxth	r2, r3
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	691c      	ldr	r4, [r3, #16]
 8013b08:	4610      	mov	r0, r2
 8013b0a:	f7f9 fda3 	bl	800d654 <lwip_htons>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	691b      	ldr	r3, [r3, #16]
 8013b16:	2200      	movs	r2, #0
 8013b18:	749a      	strb	r2, [r3, #18]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	74da      	strb	r2, [r3, #19]
  return seg;
 8013b1e:	693b      	ldr	r3, [r7, #16]
}
 8013b20:	4618      	mov	r0, r3
 8013b22:	371c      	adds	r7, #28
 8013b24:	46bd      	mov	sp, r7
 8013b26:	bd90      	pop	{r4, r7, pc}
 8013b28:	080209b4 	.word	0x080209b4
 8013b2c:	080209e8 	.word	0x080209e8
 8013b30:	08020a08 	.word	0x08020a08
 8013b34:	08020a30 	.word	0x08020a30
 8013b38:	08020a54 	.word	0x08020a54

08013b3c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	607b      	str	r3, [r7, #4]
 8013b44:	4603      	mov	r3, r0
 8013b46:	73fb      	strb	r3, [r7, #15]
 8013b48:	460b      	mov	r3, r1
 8013b4a:	81bb      	strh	r3, [r7, #12]
 8013b4c:	4613      	mov	r3, r2
 8013b4e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013b50:	89bb      	ldrh	r3, [r7, #12]
 8013b52:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d105      	bne.n	8013b66 <tcp_pbuf_prealloc+0x2a>
 8013b5a:	4b30      	ldr	r3, [pc, #192]	; (8013c1c <tcp_pbuf_prealloc+0xe0>)
 8013b5c:	22e8      	movs	r2, #232	; 0xe8
 8013b5e:	4930      	ldr	r1, [pc, #192]	; (8013c20 <tcp_pbuf_prealloc+0xe4>)
 8013b60:	4830      	ldr	r0, [pc, #192]	; (8013c24 <tcp_pbuf_prealloc+0xe8>)
 8013b62:	f008 f961 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013b66:	6a3b      	ldr	r3, [r7, #32]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d105      	bne.n	8013b78 <tcp_pbuf_prealloc+0x3c>
 8013b6c:	4b2b      	ldr	r3, [pc, #172]	; (8013c1c <tcp_pbuf_prealloc+0xe0>)
 8013b6e:	22e9      	movs	r2, #233	; 0xe9
 8013b70:	492d      	ldr	r1, [pc, #180]	; (8013c28 <tcp_pbuf_prealloc+0xec>)
 8013b72:	482c      	ldr	r0, [pc, #176]	; (8013c24 <tcp_pbuf_prealloc+0xe8>)
 8013b74:	f008 f958 	bl	801be28 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013b78:	89ba      	ldrh	r2, [r7, #12]
 8013b7a:	897b      	ldrh	r3, [r7, #10]
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d221      	bcs.n	8013bc4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013b80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013b84:	f003 0302 	and.w	r3, r3, #2
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d111      	bne.n	8013bb0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013b8c:	6a3b      	ldr	r3, [r7, #32]
 8013b8e:	8b5b      	ldrh	r3, [r3, #26]
 8013b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d115      	bne.n	8013bc4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013b98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d007      	beq.n	8013bb0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013ba0:	6a3b      	ldr	r3, [r7, #32]
 8013ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d103      	bne.n	8013bb0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013ba8:	6a3b      	ldr	r3, [r7, #32]
 8013baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d009      	beq.n	8013bc4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013bb0:	89bb      	ldrh	r3, [r7, #12]
 8013bb2:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8013bb6:	f023 0203 	bic.w	r2, r3, #3
 8013bba:	897b      	ldrh	r3, [r7, #10]
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	bf28      	it	cs
 8013bc0:	4613      	movcs	r3, r2
 8013bc2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013bc4:	8af9      	ldrh	r1, [r7, #22]
 8013bc6:	7bfb      	ldrb	r3, [r7, #15]
 8013bc8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fa ff7b 	bl	800eac8 <pbuf_alloc>
 8013bd2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d101      	bne.n	8013bde <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e019      	b.n	8013c12 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d006      	beq.n	8013bf4 <tcp_pbuf_prealloc+0xb8>
 8013be6:	4b0d      	ldr	r3, [pc, #52]	; (8013c1c <tcp_pbuf_prealloc+0xe0>)
 8013be8:	f240 120b 	movw	r2, #267	; 0x10b
 8013bec:	490f      	ldr	r1, [pc, #60]	; (8013c2c <tcp_pbuf_prealloc+0xf0>)
 8013bee:	480d      	ldr	r0, [pc, #52]	; (8013c24 <tcp_pbuf_prealloc+0xe8>)
 8013bf0:	f008 f91a 	bl	801be28 <iprintf>
  *oversize = p->len - length;
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	895a      	ldrh	r2, [r3, #10]
 8013bf8:	89bb      	ldrh	r3, [r7, #12]
 8013bfa:	1ad3      	subs	r3, r2, r3
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	89ba      	ldrh	r2, [r7, #12]
 8013c06:	811a      	strh	r2, [r3, #8]
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	891a      	ldrh	r2, [r3, #8]
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	815a      	strh	r2, [r3, #10]
  return p;
 8013c10:	693b      	ldr	r3, [r7, #16]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3718      	adds	r7, #24
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	080209b4 	.word	0x080209b4
 8013c20:	08020a6c 	.word	0x08020a6c
 8013c24:	08020a08 	.word	0x08020a08
 8013c28:	08020a90 	.word	0x08020a90
 8013c2c:	08020ab0 	.word	0x08020ab0

08013c30 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	460b      	mov	r3, r1
 8013c3a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d106      	bne.n	8013c50 <tcp_write_checks+0x20>
 8013c42:	4b33      	ldr	r3, [pc, #204]	; (8013d10 <tcp_write_checks+0xe0>)
 8013c44:	f240 1233 	movw	r2, #307	; 0x133
 8013c48:	4932      	ldr	r1, [pc, #200]	; (8013d14 <tcp_write_checks+0xe4>)
 8013c4a:	4833      	ldr	r0, [pc, #204]	; (8013d18 <tcp_write_checks+0xe8>)
 8013c4c:	f008 f8ec 	bl	801be28 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	7d1b      	ldrb	r3, [r3, #20]
 8013c54:	2b04      	cmp	r3, #4
 8013c56:	d00e      	beq.n	8013c76 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013c5c:	2b07      	cmp	r3, #7
 8013c5e:	d00a      	beq.n	8013c76 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d006      	beq.n	8013c76 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d002      	beq.n	8013c76 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013c70:	f06f 030a 	mvn.w	r3, #10
 8013c74:	e048      	b.n	8013d08 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013c76:	887b      	ldrh	r3, [r7, #2]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d101      	bne.n	8013c80 <tcp_write_checks+0x50>
    return ERR_OK;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	e043      	b.n	8013d08 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013c86:	887a      	ldrh	r2, [r7, #2]
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d909      	bls.n	8013ca0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	8b5b      	ldrh	r3, [r3, #26]
 8013c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c9e:	e033      	b.n	8013d08 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ca6:	2b0f      	cmp	r3, #15
 8013ca8:	d909      	bls.n	8013cbe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	8b5b      	ldrh	r3, [r3, #26]
 8013cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8013cbc:	e024      	b.n	8013d08 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00f      	beq.n	8013ce8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d11a      	bne.n	8013d06 <tcp_write_checks+0xd6>
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d116      	bne.n	8013d06 <tcp_write_checks+0xd6>
 8013cd8:	4b0d      	ldr	r3, [pc, #52]	; (8013d10 <tcp_write_checks+0xe0>)
 8013cda:	f240 1255 	movw	r2, #341	; 0x155
 8013cde:	490f      	ldr	r1, [pc, #60]	; (8013d1c <tcp_write_checks+0xec>)
 8013ce0:	480d      	ldr	r0, [pc, #52]	; (8013d18 <tcp_write_checks+0xe8>)
 8013ce2:	f008 f8a1 	bl	801be28 <iprintf>
 8013ce6:	e00e      	b.n	8013d06 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d103      	bne.n	8013cf8 <tcp_write_checks+0xc8>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d006      	beq.n	8013d06 <tcp_write_checks+0xd6>
 8013cf8:	4b05      	ldr	r3, [pc, #20]	; (8013d10 <tcp_write_checks+0xe0>)
 8013cfa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013cfe:	4908      	ldr	r1, [pc, #32]	; (8013d20 <tcp_write_checks+0xf0>)
 8013d00:	4805      	ldr	r0, [pc, #20]	; (8013d18 <tcp_write_checks+0xe8>)
 8013d02:	f008 f891 	bl	801be28 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013d06:	2300      	movs	r3, #0
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	3708      	adds	r7, #8
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}
 8013d10:	080209b4 	.word	0x080209b4
 8013d14:	08020ac4 	.word	0x08020ac4
 8013d18:	08020a08 	.word	0x08020a08
 8013d1c:	08020ae4 	.word	0x08020ae4
 8013d20:	08020b20 	.word	0x08020b20

08013d24 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013d24:	b590      	push	{r4, r7, lr}
 8013d26:	b09d      	sub	sp, #116	; 0x74
 8013d28:	af04      	add	r7, sp, #16
 8013d2a:	60f8      	str	r0, [r7, #12]
 8013d2c:	60b9      	str	r1, [r7, #8]
 8013d2e:	4611      	mov	r1, r2
 8013d30:	461a      	mov	r2, r3
 8013d32:	460b      	mov	r3, r1
 8013d34:	80fb      	strh	r3, [r7, #6]
 8013d36:	4613      	mov	r3, r2
 8013d38:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013d3e:	2300      	movs	r3, #0
 8013d40:	643b      	str	r3, [r7, #64]	; 0x40
 8013d42:	2300      	movs	r3, #0
 8013d44:	657b      	str	r3, [r7, #84]	; 0x54
 8013d46:	2300      	movs	r3, #0
 8013d48:	653b      	str	r3, [r7, #80]	; 0x50
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013d54:	2300      	movs	r3, #0
 8013d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8013d64:	2300      	movs	r3, #0
 8013d66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d109      	bne.n	8013d8a <tcp_write+0x66>
 8013d76:	4b9c      	ldr	r3, [pc, #624]	; (8013fe8 <tcp_write+0x2c4>)
 8013d78:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013d7c:	499b      	ldr	r1, [pc, #620]	; (8013fec <tcp_write+0x2c8>)
 8013d7e:	489c      	ldr	r0, [pc, #624]	; (8013ff0 <tcp_write+0x2cc>)
 8013d80:	f008 f852 	bl	801be28 <iprintf>
 8013d84:	f06f 030f 	mvn.w	r3, #15
 8013d88:	e379      	b.n	801447e <tcp_write+0x75a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013d90:	085b      	lsrs	r3, r3, #1
 8013d92:	b29a      	uxth	r2, r3
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	bf28      	it	cs
 8013d9c:	4613      	movcs	r3, r2
 8013d9e:	853b      	strh	r3, [r7, #40]	; 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8013da0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d102      	bne.n	8013dac <tcp_write+0x88>
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013daa:	e000      	b.n	8013dae <tcp_write+0x8a>
 8013dac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013dae:	853b      	strh	r3, [r7, #40]	; 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d109      	bne.n	8013dca <tcp_write+0xa6>
 8013db6:	4b8c      	ldr	r3, [pc, #560]	; (8013fe8 <tcp_write+0x2c4>)
 8013db8:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013dbc:	498d      	ldr	r1, [pc, #564]	; (8013ff4 <tcp_write+0x2d0>)
 8013dbe:	488c      	ldr	r0, [pc, #560]	; (8013ff0 <tcp_write+0x2cc>)
 8013dc0:	f008 f832 	bl	801be28 <iprintf>
 8013dc4:	f06f 030f 	mvn.w	r3, #15
 8013dc8:	e359      	b.n	801447e <tcp_write+0x75a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013dca:	88fb      	ldrh	r3, [r7, #6]
 8013dcc:	4619      	mov	r1, r3
 8013dce:	68f8      	ldr	r0, [r7, #12]
 8013dd0:	f7ff ff2e 	bl	8013c30 <tcp_write_checks>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 8013dda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d002      	beq.n	8013de8 <tcp_write+0xc4>
    return err;
 8013de2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013de6:	e34a      	b.n	801447e <tcp_write+0x75a>
  }
  queuelen = pcb->snd_queuelen;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013df2:	2300      	movs	r3, #0
 8013df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	f000 8127 	beq.w	8014050 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e06:	643b      	str	r3, [r7, #64]	; 0x40
 8013e08:	e002      	b.n	8013e10 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 8013e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	643b      	str	r3, [r7, #64]	; 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d1f8      	bne.n	8013e0a <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e1a:	7b1b      	ldrb	r3, [r3, #12]
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	f003 0304 	and.w	r3, r3, #4
 8013e24:	84bb      	strh	r3, [r7, #36]	; 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013e26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e2a:	891b      	ldrh	r3, [r3, #8]
 8013e2c:	4619      	mov	r1, r3
 8013e2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e30:	440b      	add	r3, r1
 8013e32:	429a      	cmp	r2, r3
 8013e34:	da06      	bge.n	8013e44 <tcp_write+0x120>
 8013e36:	4b6c      	ldr	r3, [pc, #432]	; (8013fe8 <tcp_write+0x2c4>)
 8013e38:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013e3c:	496e      	ldr	r1, [pc, #440]	; (8013ff8 <tcp_write+0x2d4>)
 8013e3e:	486c      	ldr	r0, [pc, #432]	; (8013ff0 <tcp_write+0x2cc>)
 8013e40:	f007 fff2 	bl	801be28 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e46:	891a      	ldrh	r2, [r3, #8]
 8013e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013e4a:	4413      	add	r3, r2
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013e50:	1ad3      	subs	r3, r2, r3
 8013e52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8013e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e5e:	895b      	ldrh	r3, [r3, #10]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d006      	beq.n	8013e72 <tcp_write+0x14e>
 8013e64:	4b60      	ldr	r3, [pc, #384]	; (8013fe8 <tcp_write+0x2c4>)
 8013e66:	f240 12f3 	movw	r2, #499	; 0x1f3
 8013e6a:	4964      	ldr	r1, [pc, #400]	; (8013ffc <tcp_write+0x2d8>)
 8013e6c:	4860      	ldr	r0, [pc, #384]	; (8013ff0 <tcp_write+0x2cc>)
 8013e6e:	f007 ffdb 	bl	801be28 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013e78:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 8013e7a:	8afb      	ldrh	r3, [r7, #22]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d02e      	beq.n	8013ede <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013e80:	8afb      	ldrh	r3, [r7, #22]
 8013e82:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013e86:	429a      	cmp	r2, r3
 8013e88:	d206      	bcs.n	8013e98 <tcp_write+0x174>
 8013e8a:	4b57      	ldr	r3, [pc, #348]	; (8013fe8 <tcp_write+0x2c4>)
 8013e8c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013e90:	495b      	ldr	r1, [pc, #364]	; (8014000 <tcp_write+0x2dc>)
 8013e92:	4857      	ldr	r0, [pc, #348]	; (8013ff0 <tcp_write+0x2cc>)
 8013e94:	f007 ffc8 	bl	801be28 <iprintf>
      seg = last_unsent;
 8013e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e9a:	657b      	str	r3, [r7, #84]	; 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013e9c:	8afb      	ldrh	r3, [r7, #22]
 8013e9e:	88fa      	ldrh	r2, [r7, #6]
 8013ea0:	4293      	cmp	r3, r2
 8013ea2:	bf28      	it	cs
 8013ea4:	4613      	movcs	r3, r2
 8013ea6:	b29b      	uxth	r3, r3
 8013ea8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013eac:	4293      	cmp	r3, r2
 8013eae:	bf28      	it	cs
 8013eb0:	4613      	movcs	r3, r2
 8013eb2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      pos += oversize_used;
 8013eb6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013eba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ebe:	4413      	add	r3, r2
 8013ec0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      oversize -= oversize_used;
 8013ec4:	8afa      	ldrh	r2, [r7, #22]
 8013ec6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013eca:	1ad3      	subs	r3, r2, r3
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 8013ed0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013ed4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013ede:	8afb      	ldrh	r3, [r7, #22]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d00b      	beq.n	8013efc <tcp_write+0x1d8>
 8013ee4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013ee8:	88fb      	ldrh	r3, [r7, #6]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	d006      	beq.n	8013efc <tcp_write+0x1d8>
 8013eee:	4b3e      	ldr	r3, [pc, #248]	; (8013fe8 <tcp_write+0x2c4>)
 8013ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ef4:	4943      	ldr	r1, [pc, #268]	; (8014004 <tcp_write+0x2e0>)
 8013ef6:	483e      	ldr	r0, [pc, #248]	; (8013ff0 <tcp_write+0x2cc>)
 8013ef8:	f007 ff96 	bl	801be28 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013efc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8013f00:	88fb      	ldrh	r3, [r7, #6]
 8013f02:	429a      	cmp	r2, r3
 8013f04:	f080 8172 	bcs.w	80141ec <tcp_write+0x4c8>
 8013f08:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	f000 816d 	beq.w	80141ec <tcp_write+0x4c8>
 8013f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f14:	891b      	ldrh	r3, [r3, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 8168 	beq.w	80141ec <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013f1c:	88fa      	ldrh	r2, [r7, #6]
 8013f1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013f22:	1ad2      	subs	r2, r2, r3
 8013f24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	bfa8      	it	ge
 8013f2c:	4613      	movge	r3, r2
 8013f2e:	847b      	strh	r3, [r7, #34]	; 0x22
      seg = last_unsent;
 8013f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f32:	657b      	str	r3, [r7, #84]	; 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013f34:	797b      	ldrb	r3, [r7, #5]
 8013f36:	f003 0301 	and.w	r3, r3, #1
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d02b      	beq.n	8013f96 <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013f3e:	f107 0016 	add.w	r0, r7, #22
 8013f42:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8013f46:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8013f48:	2301      	movs	r3, #1
 8013f4a:	9302      	str	r3, [sp, #8]
 8013f4c:	797b      	ldrb	r3, [r7, #5]
 8013f4e:	9301      	str	r3, [sp, #4]
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	4603      	mov	r3, r0
 8013f56:	2000      	movs	r0, #0
 8013f58:	f7ff fdf0 	bl	8013b3c <tcp_pbuf_prealloc>
 8013f5c:	63f8      	str	r0, [r7, #60]	; 0x3c
 8013f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	f000 825a 	beq.w	801441a <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 8013f66:	8afb      	ldrh	r3, [r7, #22]
 8013f68:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f6e:	6858      	ldr	r0, [r3, #4]
 8013f70:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013f74:	68ba      	ldr	r2, [r7, #8]
 8013f76:	4413      	add	r3, r2
 8013f78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	f008 f97b 	bl	801c276 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f82:	f7fb f917 	bl	800f1b4 <pbuf_clen>
 8013f86:	4603      	mov	r3, r0
 8013f88:	461a      	mov	r2, r3
 8013f8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013f8e:	4413      	add	r3, r2
 8013f90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8013f94:	e055      	b.n	8014042 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f98:	685b      	ldr	r3, [r3, #4]
 8013f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f9c:	e002      	b.n	8013fa4 <tcp_write+0x280>
 8013f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d1f8      	bne.n	8013f9e <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fae:	7b1b      	ldrb	r3, [r3, #12]
 8013fb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d129      	bne.n	801400c <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fba:	685b      	ldr	r3, [r3, #4]
 8013fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013fbe:	8952      	ldrh	r2, [r2, #10]
 8013fc0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d121      	bne.n	801400c <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013fc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d006      	beq.n	8013fde <tcp_write+0x2ba>
 8013fd0:	4b05      	ldr	r3, [pc, #20]	; (8013fe8 <tcp_write+0x2c4>)
 8013fd2:	f240 2231 	movw	r2, #561	; 0x231
 8013fd6:	490c      	ldr	r1, [pc, #48]	; (8014008 <tcp_write+0x2e4>)
 8013fd8:	4805      	ldr	r0, [pc, #20]	; (8013ff0 <tcp_write+0x2cc>)
 8013fda:	f007 ff25 	bl	801be28 <iprintf>
          extendlen = seglen;
 8013fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013fe0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8013fe4:	e02d      	b.n	8014042 <tcp_write+0x31e>
 8013fe6:	bf00      	nop
 8013fe8:	080209b4 	.word	0x080209b4
 8013fec:	08020b54 	.word	0x08020b54
 8013ff0:	08020a08 	.word	0x08020a08
 8013ff4:	08020b6c 	.word	0x08020b6c
 8013ff8:	08020ba0 	.word	0x08020ba0
 8013ffc:	08020bb8 	.word	0x08020bb8
 8014000:	08020be8 	.word	0x08020be8
 8014004:	08020c08 	.word	0x08020c08
 8014008:	08020c28 	.word	0x08020c28
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801400c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801400e:	2201      	movs	r2, #1
 8014010:	4619      	mov	r1, r3
 8014012:	2000      	movs	r0, #0
 8014014:	f7fa fd58 	bl	800eac8 <pbuf_alloc>
 8014018:	63f8      	str	r0, [r7, #60]	; 0x3c
 801401a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801401c:	2b00      	cmp	r3, #0
 801401e:	f000 81fe 	beq.w	801441e <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8014022:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014026:	68ba      	ldr	r2, [r7, #8]
 8014028:	441a      	add	r2, r3
 801402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801402c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801402e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014030:	f7fb f8c0 	bl	800f1b4 <pbuf_clen>
 8014034:	4603      	mov	r3, r0
 8014036:	461a      	mov	r2, r3
 8014038:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801403c:	4413      	add	r3, r2
 801403e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8014042:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8014046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014048:	4413      	add	r3, r2
 801404a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801404e:	e0cd      	b.n	80141ec <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 80c8 	beq.w	80141ec <tcp_write+0x4c8>
 801405c:	4b72      	ldr	r3, [pc, #456]	; (8014228 <tcp_write+0x504>)
 801405e:	f240 224a 	movw	r2, #586	; 0x24a
 8014062:	4972      	ldr	r1, [pc, #456]	; (801422c <tcp_write+0x508>)
 8014064:	4872      	ldr	r0, [pc, #456]	; (8014230 <tcp_write+0x50c>)
 8014066:	f007 fedf 	bl	801be28 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801406a:	e0bf      	b.n	80141ec <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801406c:	88fa      	ldrh	r2, [r7, #6]
 801406e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 8014076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801407a:	b29b      	uxth	r3, r3
 801407c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 8014082:	8bfa      	ldrh	r2, [r7, #30]
 8014084:	8c3b      	ldrh	r3, [r7, #32]
 8014086:	4293      	cmp	r3, r2
 8014088:	bf28      	it	cs
 801408a:	4613      	movcs	r3, r2
 801408c:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801408e:	797b      	ldrb	r3, [r7, #5]
 8014090:	f003 0301 	and.w	r3, r3, #1
 8014094:	2b00      	cmp	r3, #0
 8014096:	d036      	beq.n	8014106 <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8014098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801409c:	b29a      	uxth	r2, r3
 801409e:	8bbb      	ldrh	r3, [r7, #28]
 80140a0:	4413      	add	r3, r2
 80140a2:	b299      	uxth	r1, r3
 80140a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	bf0c      	ite	eq
 80140aa:	2301      	moveq	r3, #1
 80140ac:	2300      	movne	r3, #0
 80140ae:	b2db      	uxtb	r3, r3
 80140b0:	f107 0016 	add.w	r0, r7, #22
 80140b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80140b6:	9302      	str	r3, [sp, #8]
 80140b8:	797b      	ldrb	r3, [r7, #5]
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	4603      	mov	r3, r0
 80140c2:	2036      	movs	r0, #54	; 0x36
 80140c4:	f7ff fd3a 	bl	8013b3c <tcp_pbuf_prealloc>
 80140c8:	6378      	str	r0, [r7, #52]	; 0x34
 80140ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	f000 81a8 	beq.w	8014422 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80140d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d4:	895b      	ldrh	r3, [r3, #10]
 80140d6:	8bba      	ldrh	r2, [r7, #28]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d906      	bls.n	80140ea <tcp_write+0x3c6>
 80140dc:	4b52      	ldr	r3, [pc, #328]	; (8014228 <tcp_write+0x504>)
 80140de:	f240 2266 	movw	r2, #614	; 0x266
 80140e2:	4954      	ldr	r1, [pc, #336]	; (8014234 <tcp_write+0x510>)
 80140e4:	4852      	ldr	r0, [pc, #328]	; (8014230 <tcp_write+0x50c>)
 80140e6:	f007 fe9f 	bl	801be28 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80140ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ec:	685a      	ldr	r2, [r3, #4]
 80140ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140f2:	18d0      	adds	r0, r2, r3
 80140f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	4413      	add	r3, r2
 80140fc:	8bba      	ldrh	r2, [r7, #28]
 80140fe:	4619      	mov	r1, r3
 8014100:	f008 f8b9 	bl	801c276 <memcpy>
 8014104:	e02f      	b.n	8014166 <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8014106:	8afb      	ldrh	r3, [r7, #22]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d006      	beq.n	801411a <tcp_write+0x3f6>
 801410c:	4b46      	ldr	r3, [pc, #280]	; (8014228 <tcp_write+0x504>)
 801410e:	f240 2271 	movw	r2, #625	; 0x271
 8014112:	4949      	ldr	r1, [pc, #292]	; (8014238 <tcp_write+0x514>)
 8014114:	4846      	ldr	r0, [pc, #280]	; (8014230 <tcp_write+0x50c>)
 8014116:	f007 fe87 	bl	801be28 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801411a:	8bbb      	ldrh	r3, [r7, #28]
 801411c:	2201      	movs	r2, #1
 801411e:	4619      	mov	r1, r3
 8014120:	2036      	movs	r0, #54	; 0x36
 8014122:	f7fa fcd1 	bl	800eac8 <pbuf_alloc>
 8014126:	61b8      	str	r0, [r7, #24]
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	2b00      	cmp	r3, #0
 801412c:	f000 817b 	beq.w	8014426 <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8014130:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014134:	68ba      	ldr	r2, [r7, #8]
 8014136:	441a      	add	r2, r3
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801413c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014140:	b29b      	uxth	r3, r3
 8014142:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014146:	4619      	mov	r1, r3
 8014148:	2036      	movs	r0, #54	; 0x36
 801414a:	f7fa fcbd 	bl	800eac8 <pbuf_alloc>
 801414e:	6378      	str	r0, [r7, #52]	; 0x34
 8014150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014152:	2b00      	cmp	r3, #0
 8014154:	d103      	bne.n	801415e <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8014156:	69b8      	ldr	r0, [r7, #24]
 8014158:	f7fa ff9e 	bl	800f098 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801415c:	e166      	b.n	801442c <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801415e:	69b9      	ldr	r1, [r7, #24]
 8014160:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014162:	f7fb f867 	bl	800f234 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8014166:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014168:	f7fb f824 	bl	800f1b4 <pbuf_clen>
 801416c:	4603      	mov	r3, r0
 801416e:	461a      	mov	r2, r3
 8014170:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8014174:	4413      	add	r3, r2
 8014176:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801417a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801417e:	2b10      	cmp	r3, #16
 8014180:	d903      	bls.n	801418a <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8014182:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014184:	f7fa ff88 	bl	800f098 <pbuf_free>
      goto memerr;
 8014188:	e150      	b.n	801442c <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801418e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8014192:	441a      	add	r2, r3
 8014194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014198:	9300      	str	r3, [sp, #0]
 801419a:	4613      	mov	r3, r2
 801419c:	2200      	movs	r2, #0
 801419e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80141a0:	68f8      	ldr	r0, [r7, #12]
 80141a2:	f7ff fc2b 	bl	80139fc <tcp_create_segment>
 80141a6:	6578      	str	r0, [r7, #84]	; 0x54
 80141a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	f000 813d 	beq.w	801442a <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 80141b0:	8afa      	ldrh	r2, [r7, #22]
 80141b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141b4:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80141b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d102      	bne.n	80141c2 <tcp_write+0x49e>
      queue = seg;
 80141bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80141c0:	e00c      	b.n	80141dc <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80141c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d106      	bne.n	80141d6 <tcp_write+0x4b2>
 80141c8:	4b17      	ldr	r3, [pc, #92]	; (8014228 <tcp_write+0x504>)
 80141ca:	f240 22ab 	movw	r2, #683	; 0x2ab
 80141ce:	491b      	ldr	r1, [pc, #108]	; (801423c <tcp_write+0x518>)
 80141d0:	4817      	ldr	r0, [pc, #92]	; (8014230 <tcp_write+0x50c>)
 80141d2:	f007 fe29 	bl	801be28 <iprintf>
      prev_seg->next = seg;
 80141d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80141d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80141da:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80141dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141de:	653b      	str	r3, [r7, #80]	; 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80141e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80141e4:	8bbb      	ldrh	r3, [r7, #28]
 80141e6:	4413      	add	r3, r2
 80141e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  while (pos < len) {
 80141ec:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80141f0:	88fb      	ldrh	r3, [r7, #6]
 80141f2:	429a      	cmp	r2, r3
 80141f4:	f4ff af3a 	bcc.w	801406c <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 80141f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d00b      	beq.n	8014216 <tcp_write+0x4f2>
 80141fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8014202:	2b00      	cmp	r3, #0
 8014204:	d007      	beq.n	8014216 <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 8014206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014208:	895a      	ldrh	r2, [r3, #10]
 801420a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 801420e:	4413      	add	r3, r2
 8014210:	b29a      	uxth	r2, r3
 8014212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014214:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8014216:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801421a:	2b00      	cmp	r3, #0
 801421c:	d052      	beq.n	80142c4 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801421e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014220:	685b      	ldr	r3, [r3, #4]
 8014222:	633b      	str	r3, [r7, #48]	; 0x30
 8014224:	e02e      	b.n	8014284 <tcp_write+0x560>
 8014226:	bf00      	nop
 8014228:	080209b4 	.word	0x080209b4
 801422c:	08020c54 	.word	0x08020c54
 8014230:	08020a08 	.word	0x08020a08
 8014234:	08020c84 	.word	0x08020c84
 8014238:	08020cc4 	.word	0x08020cc4
 801423c:	08020cd4 	.word	0x08020cd4
      p->tot_len += oversize_used;
 8014240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014242:	891a      	ldrh	r2, [r3, #8]
 8014244:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014248:	4413      	add	r3, r2
 801424a:	b29a      	uxth	r2, r3
 801424c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801424e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d112      	bne.n	801427e <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8014258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425a:	685b      	ldr	r3, [r3, #4]
 801425c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801425e:	8952      	ldrh	r2, [r2, #10]
 8014260:	4413      	add	r3, r2
 8014262:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014266:	68b9      	ldr	r1, [r7, #8]
 8014268:	4618      	mov	r0, r3
 801426a:	f008 f804 	bl	801c276 <memcpy>
        p->len += oversize_used;
 801426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014270:	895a      	ldrh	r2, [r3, #10]
 8014272:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014276:	4413      	add	r3, r2
 8014278:	b29a      	uxth	r2, r3
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	633b      	str	r3, [r7, #48]	; 0x30
 8014284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014286:	2b00      	cmp	r3, #0
 8014288:	d1da      	bne.n	8014240 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801428c:	891a      	ldrh	r2, [r3, #8]
 801428e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014292:	4413      	add	r3, r2
 8014294:	b29a      	uxth	r2, r3
 8014296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014298:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801429a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801429c:	895b      	ldrh	r3, [r3, #10]
 801429e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d906      	bls.n	80142b4 <tcp_write+0x590>
 80142a6:	4b78      	ldr	r3, [pc, #480]	; (8014488 <tcp_write+0x764>)
 80142a8:	f240 22d3 	movw	r2, #723	; 0x2d3
 80142ac:	4977      	ldr	r1, [pc, #476]	; (801448c <tcp_write+0x768>)
 80142ae:	4878      	ldr	r0, [pc, #480]	; (8014490 <tcp_write+0x76c>)
 80142b0:	f007 fdba 	bl	801be28 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 80142b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142b6:	895a      	ldrh	r2, [r3, #10]
 80142b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80142bc:	1ad3      	subs	r3, r2, r3
 80142be:	b29a      	uxth	r2, r3
 80142c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142c2:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80142c4:	8afa      	ldrh	r2, [r7, #22]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80142cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d018      	beq.n	8014304 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80142d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d106      	bne.n	80142e6 <tcp_write+0x5c2>
 80142d8:	4b6b      	ldr	r3, [pc, #428]	; (8014488 <tcp_write+0x764>)
 80142da:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80142de:	496d      	ldr	r1, [pc, #436]	; (8014494 <tcp_write+0x770>)
 80142e0:	486b      	ldr	r0, [pc, #428]	; (8014490 <tcp_write+0x76c>)
 80142e2:	f007 fda1 	bl	801be28 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80142e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80142ec:	4618      	mov	r0, r3
 80142ee:	f7fa ffa1 	bl	800f234 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80142f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f4:	891a      	ldrh	r2, [r3, #8]
 80142f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142f8:	891b      	ldrh	r3, [r3, #8]
 80142fa:	4413      	add	r3, r2
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014300:	811a      	strh	r2, [r3, #8]
 8014302:	e03c      	b.n	801437e <tcp_write+0x65a>
  } else if (extendlen > 0) {
 8014304:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014308:	2b00      	cmp	r3, #0
 801430a:	d038      	beq.n	801437e <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801430e:	2b00      	cmp	r3, #0
 8014310:	d003      	beq.n	801431a <tcp_write+0x5f6>
 8014312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d106      	bne.n	8014328 <tcp_write+0x604>
 801431a:	4b5b      	ldr	r3, [pc, #364]	; (8014488 <tcp_write+0x764>)
 801431c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8014320:	495d      	ldr	r1, [pc, #372]	; (8014498 <tcp_write+0x774>)
 8014322:	485b      	ldr	r0, [pc, #364]	; (8014490 <tcp_write+0x76c>)
 8014324:	f007 fd80 	bl	801be28 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801432a:	685b      	ldr	r3, [r3, #4]
 801432c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801432e:	e00a      	b.n	8014346 <tcp_write+0x622>
      p->tot_len += extendlen;
 8014330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014332:	891a      	ldrh	r2, [r3, #8]
 8014334:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014338:	4413      	add	r3, r2
 801433a:	b29a      	uxth	r2, r3
 801433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d1f0      	bne.n	8014330 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014350:	891a      	ldrh	r2, [r3, #8]
 8014352:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014356:	4413      	add	r3, r2
 8014358:	b29a      	uxth	r2, r3
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	895a      	ldrh	r2, [r3, #10]
 8014362:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014366:	4413      	add	r3, r2
 8014368:	b29a      	uxth	r2, r3
 801436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801436e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014370:	891a      	ldrh	r2, [r3, #8]
 8014372:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8014376:	4413      	add	r3, r2
 8014378:	b29a      	uxth	r2, r3
 801437a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801437c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801437e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014380:	2b00      	cmp	r3, #0
 8014382:	d103      	bne.n	801438c <tcp_write+0x668>
    pcb->unsent = queue;
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014388:	66da      	str	r2, [r3, #108]	; 0x6c
 801438a:	e002      	b.n	8014392 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801438e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014390:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014396:	88fb      	ldrh	r3, [r7, #6]
 8014398:	441a      	add	r2, r3
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80143a4:	88fb      	ldrh	r3, [r7, #6]
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80143b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d00e      	beq.n	80143e2 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d10a      	bne.n	80143e2 <tcp_write+0x6be>
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d106      	bne.n	80143e2 <tcp_write+0x6be>
 80143d4:	4b2c      	ldr	r3, [pc, #176]	; (8014488 <tcp_write+0x764>)
 80143d6:	f240 3212 	movw	r2, #786	; 0x312
 80143da:	4930      	ldr	r1, [pc, #192]	; (801449c <tcp_write+0x778>)
 80143dc:	482c      	ldr	r0, [pc, #176]	; (8014490 <tcp_write+0x76c>)
 80143de:	f007 fd23 	bl	801be28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80143e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d016      	beq.n	8014416 <tcp_write+0x6f2>
 80143e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143ea:	691b      	ldr	r3, [r3, #16]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d012      	beq.n	8014416 <tcp_write+0x6f2>
 80143f0:	797b      	ldrb	r3, [r7, #5]
 80143f2:	f003 0302 	and.w	r3, r3, #2
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d10d      	bne.n	8014416 <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80143fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143fc:	691b      	ldr	r3, [r3, #16]
 80143fe:	899b      	ldrh	r3, [r3, #12]
 8014400:	b29c      	uxth	r4, r3
 8014402:	2008      	movs	r0, #8
 8014404:	f7f9 f926 	bl	800d654 <lwip_htons>
 8014408:	4603      	mov	r3, r0
 801440a:	461a      	mov	r2, r3
 801440c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801440e:	691b      	ldr	r3, [r3, #16]
 8014410:	4322      	orrs	r2, r4
 8014412:	b292      	uxth	r2, r2
 8014414:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8014416:	2300      	movs	r3, #0
 8014418:	e031      	b.n	801447e <tcp_write+0x75a>
          goto memerr;
 801441a:	bf00      	nop
 801441c:	e006      	b.n	801442c <tcp_write+0x708>
            goto memerr;
 801441e:	bf00      	nop
 8014420:	e004      	b.n	801442c <tcp_write+0x708>
        goto memerr;
 8014422:	bf00      	nop
 8014424:	e002      	b.n	801442c <tcp_write+0x708>
        goto memerr;
 8014426:	bf00      	nop
 8014428:	e000      	b.n	801442c <tcp_write+0x708>
      goto memerr;
 801442a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	8b5b      	ldrh	r3, [r3, #26]
 8014430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014434:	b29a      	uxth	r2, r3
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801443c:	2b00      	cmp	r3, #0
 801443e:	d002      	beq.n	8014446 <tcp_write+0x722>
    pbuf_free(concat_p);
 8014440:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014442:	f7fa fe29 	bl	800f098 <pbuf_free>
  }
  if (queue != NULL) {
 8014446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014448:	2b00      	cmp	r3, #0
 801444a:	d002      	beq.n	8014452 <tcp_write+0x72e>
    tcp_segs_free(queue);
 801444c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801444e:	f7fc fb93 	bl	8010b78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <tcp_write+0x756>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10a      	bne.n	801447a <tcp_write+0x756>
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <tcp_write+0x756>
 801446c:	4b06      	ldr	r3, [pc, #24]	; (8014488 <tcp_write+0x764>)
 801446e:	f240 3227 	movw	r2, #807	; 0x327
 8014472:	490a      	ldr	r1, [pc, #40]	; (801449c <tcp_write+0x778>)
 8014474:	4806      	ldr	r0, [pc, #24]	; (8014490 <tcp_write+0x76c>)
 8014476:	f007 fcd7 	bl	801be28 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801447a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801447e:	4618      	mov	r0, r3
 8014480:	3764      	adds	r7, #100	; 0x64
 8014482:	46bd      	mov	sp, r7
 8014484:	bd90      	pop	{r4, r7, pc}
 8014486:	bf00      	nop
 8014488:	080209b4 	.word	0x080209b4
 801448c:	08020ce8 	.word	0x08020ce8
 8014490:	08020a08 	.word	0x08020a08
 8014494:	08020d14 	.word	0x08020d14
 8014498:	08020d4c 	.word	0x08020d4c
 801449c:	08020d84 	.word	0x08020d84

080144a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80144a0:	b590      	push	{r4, r7, lr}
 80144a2:	b08b      	sub	sp, #44	; 0x2c
 80144a4:	af02      	add	r7, sp, #8
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	460b      	mov	r3, r1
 80144aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80144ac:	2300      	movs	r3, #0
 80144ae:	61bb      	str	r3, [r7, #24]
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80144b4:	2300      	movs	r3, #0
 80144b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d106      	bne.n	80144cc <tcp_split_unsent_seg+0x2c>
 80144be:	4b97      	ldr	r3, [pc, #604]	; (801471c <tcp_split_unsent_seg+0x27c>)
 80144c0:	f240 324b 	movw	r2, #843	; 0x34b
 80144c4:	4996      	ldr	r1, [pc, #600]	; (8014720 <tcp_split_unsent_seg+0x280>)
 80144c6:	4897      	ldr	r0, [pc, #604]	; (8014724 <tcp_split_unsent_seg+0x284>)
 80144c8:	f007 fcae 	bl	801be28 <iprintf>

  useg = pcb->unsent;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80144d2:	697b      	ldr	r3, [r7, #20]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d102      	bne.n	80144de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80144d8:	f04f 33ff 	mov.w	r3, #4294967295
 80144dc:	e119      	b.n	8014712 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 80144de:	887b      	ldrh	r3, [r7, #2]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d109      	bne.n	80144f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80144e4:	4b8d      	ldr	r3, [pc, #564]	; (801471c <tcp_split_unsent_seg+0x27c>)
 80144e6:	f240 3253 	movw	r2, #851	; 0x353
 80144ea:	498f      	ldr	r1, [pc, #572]	; (8014728 <tcp_split_unsent_seg+0x288>)
 80144ec:	488d      	ldr	r0, [pc, #564]	; (8014724 <tcp_split_unsent_seg+0x284>)
 80144ee:	f007 fc9b 	bl	801be28 <iprintf>
    return ERR_VAL;
 80144f2:	f06f 0305 	mvn.w	r3, #5
 80144f6:	e10c      	b.n	8014712 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	891b      	ldrh	r3, [r3, #8]
 80144fc:	887a      	ldrh	r2, [r7, #2]
 80144fe:	429a      	cmp	r2, r3
 8014500:	d301      	bcc.n	8014506 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014502:	2300      	movs	r3, #0
 8014504:	e105      	b.n	8014712 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801450a:	887a      	ldrh	r2, [r7, #2]
 801450c:	429a      	cmp	r2, r3
 801450e:	d906      	bls.n	801451e <tcp_split_unsent_seg+0x7e>
 8014510:	4b82      	ldr	r3, [pc, #520]	; (801471c <tcp_split_unsent_seg+0x27c>)
 8014512:	f240 325b 	movw	r2, #859	; 0x35b
 8014516:	4985      	ldr	r1, [pc, #532]	; (801472c <tcp_split_unsent_seg+0x28c>)
 8014518:	4882      	ldr	r0, [pc, #520]	; (8014724 <tcp_split_unsent_seg+0x284>)
 801451a:	f007 fc85 	bl	801be28 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	891b      	ldrh	r3, [r3, #8]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d106      	bne.n	8014534 <tcp_split_unsent_seg+0x94>
 8014526:	4b7d      	ldr	r3, [pc, #500]	; (801471c <tcp_split_unsent_seg+0x27c>)
 8014528:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801452c:	4980      	ldr	r1, [pc, #512]	; (8014730 <tcp_split_unsent_seg+0x290>)
 801452e:	487d      	ldr	r0, [pc, #500]	; (8014724 <tcp_split_unsent_seg+0x284>)
 8014530:	f007 fc7a 	bl	801be28 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014534:	697b      	ldr	r3, [r7, #20]
 8014536:	7b1b      	ldrb	r3, [r3, #12]
 8014538:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801453a:	7bfb      	ldrb	r3, [r7, #15]
 801453c:	009b      	lsls	r3, r3, #2
 801453e:	b2db      	uxtb	r3, r3
 8014540:	f003 0304 	and.w	r3, r3, #4
 8014544:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	891a      	ldrh	r2, [r3, #8]
 801454a:	887b      	ldrh	r3, [r7, #2]
 801454c:	1ad3      	subs	r3, r2, r3
 801454e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014550:	7bbb      	ldrb	r3, [r7, #14]
 8014552:	b29a      	uxth	r2, r3
 8014554:	89bb      	ldrh	r3, [r7, #12]
 8014556:	4413      	add	r3, r2
 8014558:	b29b      	uxth	r3, r3
 801455a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801455e:	4619      	mov	r1, r3
 8014560:	2036      	movs	r0, #54	; 0x36
 8014562:	f7fa fab1 	bl	800eac8 <pbuf_alloc>
 8014566:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	2b00      	cmp	r3, #0
 801456c:	f000 80ba 	beq.w	80146e4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	685b      	ldr	r3, [r3, #4]
 8014574:	891a      	ldrh	r2, [r3, #8]
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	891b      	ldrh	r3, [r3, #8]
 801457a:	1ad3      	subs	r3, r2, r3
 801457c:	b29a      	uxth	r2, r3
 801457e:	887b      	ldrh	r3, [r7, #2]
 8014580:	4413      	add	r3, r2
 8014582:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	6858      	ldr	r0, [r3, #4]
 8014588:	693b      	ldr	r3, [r7, #16]
 801458a:	685a      	ldr	r2, [r3, #4]
 801458c:	7bbb      	ldrb	r3, [r7, #14]
 801458e:	18d1      	adds	r1, r2, r3
 8014590:	897b      	ldrh	r3, [r7, #10]
 8014592:	89ba      	ldrh	r2, [r7, #12]
 8014594:	f7fa ff86 	bl	800f4a4 <pbuf_copy_partial>
 8014598:	4603      	mov	r3, r0
 801459a:	461a      	mov	r2, r3
 801459c:	89bb      	ldrh	r3, [r7, #12]
 801459e:	4293      	cmp	r3, r2
 80145a0:	f040 80a2 	bne.w	80146e8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	691b      	ldr	r3, [r3, #16]
 80145a8:	899b      	ldrh	r3, [r3, #12]
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7f9 f851 	bl	800d654 <lwip_htons>
 80145b2:	4603      	mov	r3, r0
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80145ba:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80145bc:	2300      	movs	r3, #0
 80145be:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 80145c0:	7ffb      	ldrb	r3, [r7, #31]
 80145c2:	f003 0308 	and.w	r3, r3, #8
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d007      	beq.n	80145da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80145ca:	7ffb      	ldrb	r3, [r7, #31]
 80145cc:	f023 0308 	bic.w	r3, r3, #8
 80145d0:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 80145d2:	7fbb      	ldrb	r3, [r7, #30]
 80145d4:	f043 0308 	orr.w	r3, r3, #8
 80145d8:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 80145da:	7ffb      	ldrb	r3, [r7, #31]
 80145dc:	f003 0301 	and.w	r3, r3, #1
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d007      	beq.n	80145f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80145e4:	7ffb      	ldrb	r3, [r7, #31]
 80145e6:	f023 0301 	bic.w	r3, r3, #1
 80145ea:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 80145ec:	7fbb      	ldrb	r3, [r7, #30]
 80145ee:	f043 0301 	orr.w	r3, r3, #1
 80145f2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80145f4:	697b      	ldr	r3, [r7, #20]
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7f9 f83f 	bl	800d67e <lwip_htonl>
 8014600:	4602      	mov	r2, r0
 8014602:	887b      	ldrh	r3, [r7, #2]
 8014604:	18d1      	adds	r1, r2, r3
 8014606:	7fba      	ldrb	r2, [r7, #30]
 8014608:	7bfb      	ldrb	r3, [r7, #15]
 801460a:	9300      	str	r3, [sp, #0]
 801460c:	460b      	mov	r3, r1
 801460e:	6939      	ldr	r1, [r7, #16]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7ff f9f3 	bl	80139fc <tcp_create_segment>
 8014616:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8014618:	69bb      	ldr	r3, [r7, #24]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d066      	beq.n	80146ec <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801461e:	697b      	ldr	r3, [r7, #20]
 8014620:	685b      	ldr	r3, [r3, #4]
 8014622:	4618      	mov	r0, r3
 8014624:	f7fa fdc6 	bl	800f1b4 <pbuf_clen>
 8014628:	4603      	mov	r3, r0
 801462a:	461a      	mov	r2, r3
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014632:	1a9b      	subs	r3, r3, r2
 8014634:	b29a      	uxth	r2, r3
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	6858      	ldr	r0, [r3, #4]
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	685b      	ldr	r3, [r3, #4]
 8014644:	891a      	ldrh	r2, [r3, #8]
 8014646:	89bb      	ldrh	r3, [r7, #12]
 8014648:	1ad3      	subs	r3, r2, r3
 801464a:	b29b      	uxth	r3, r3
 801464c:	4619      	mov	r1, r3
 801464e:	f7fa fb9d 	bl	800ed8c <pbuf_realloc>
  useg->len -= remainder;
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	891a      	ldrh	r2, [r3, #8]
 8014656:	89bb      	ldrh	r3, [r7, #12]
 8014658:	1ad3      	subs	r3, r2, r3
 801465a:	b29a      	uxth	r2, r3
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	691b      	ldr	r3, [r3, #16]
 8014664:	899b      	ldrh	r3, [r3, #12]
 8014666:	b29c      	uxth	r4, r3
 8014668:	7ffb      	ldrb	r3, [r7, #31]
 801466a:	b29b      	uxth	r3, r3
 801466c:	4618      	mov	r0, r3
 801466e:	f7f8 fff1 	bl	800d654 <lwip_htons>
 8014672:	4603      	mov	r3, r0
 8014674:	461a      	mov	r2, r3
 8014676:	697b      	ldr	r3, [r7, #20]
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	4322      	orrs	r2, r4
 801467c:	b292      	uxth	r2, r2
 801467e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8014680:	697b      	ldr	r3, [r7, #20]
 8014682:	2200      	movs	r2, #0
 8014684:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	685b      	ldr	r3, [r3, #4]
 801468a:	4618      	mov	r0, r3
 801468c:	f7fa fd92 	bl	800f1b4 <pbuf_clen>
 8014690:	4603      	mov	r3, r0
 8014692:	461a      	mov	r2, r3
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801469a:	4413      	add	r3, r2
 801469c:	b29a      	uxth	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	4618      	mov	r0, r3
 80146aa:	f7fa fd83 	bl	800f1b4 <pbuf_clen>
 80146ae:	4603      	mov	r3, r0
 80146b0:	461a      	mov	r2, r3
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80146b8:	4413      	add	r3, r2
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80146c2:	697b      	ldr	r3, [r7, #20]
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	69bb      	ldr	r3, [r7, #24]
 80146c8:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	69ba      	ldr	r2, [r7, #24]
 80146ce:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80146d0:	69bb      	ldr	r3, [r7, #24]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d103      	bne.n	80146e0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	2200      	movs	r2, #0
 80146dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80146e0:	2300      	movs	r3, #0
 80146e2:	e016      	b.n	8014712 <tcp_split_unsent_seg+0x272>
    goto memerr;
 80146e4:	bf00      	nop
 80146e6:	e002      	b.n	80146ee <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80146e8:	bf00      	nop
 80146ea:	e000      	b.n	80146ee <tcp_split_unsent_seg+0x24e>
    goto memerr;
 80146ec:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80146ee:	69bb      	ldr	r3, [r7, #24]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d006      	beq.n	8014702 <tcp_split_unsent_seg+0x262>
 80146f4:	4b09      	ldr	r3, [pc, #36]	; (801471c <tcp_split_unsent_seg+0x27c>)
 80146f6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80146fa:	490e      	ldr	r1, [pc, #56]	; (8014734 <tcp_split_unsent_seg+0x294>)
 80146fc:	4809      	ldr	r0, [pc, #36]	; (8014724 <tcp_split_unsent_seg+0x284>)
 80146fe:	f007 fb93 	bl	801be28 <iprintf>
  if (p != NULL) {
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d002      	beq.n	801470e <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8014708:	6938      	ldr	r0, [r7, #16]
 801470a:	f7fa fcc5 	bl	800f098 <pbuf_free>
  }

  return ERR_MEM;
 801470e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014712:	4618      	mov	r0, r3
 8014714:	3724      	adds	r7, #36	; 0x24
 8014716:	46bd      	mov	sp, r7
 8014718:	bd90      	pop	{r4, r7, pc}
 801471a:	bf00      	nop
 801471c:	080209b4 	.word	0x080209b4
 8014720:	08020da4 	.word	0x08020da4
 8014724:	08020a08 	.word	0x08020a08
 8014728:	08020dc8 	.word	0x08020dc8
 801472c:	08020dec 	.word	0x08020dec
 8014730:	08020dfc 	.word	0x08020dfc
 8014734:	08020e0c 	.word	0x08020e0c

08014738 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014738:	b590      	push	{r4, r7, lr}
 801473a:	b085      	sub	sp, #20
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d106      	bne.n	8014754 <tcp_send_fin+0x1c>
 8014746:	4b21      	ldr	r3, [pc, #132]	; (80147cc <tcp_send_fin+0x94>)
 8014748:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801474c:	4920      	ldr	r1, [pc, #128]	; (80147d0 <tcp_send_fin+0x98>)
 801474e:	4821      	ldr	r0, [pc, #132]	; (80147d4 <tcp_send_fin+0x9c>)
 8014750:	f007 fb6a 	bl	801be28 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014758:	2b00      	cmp	r3, #0
 801475a:	d02e      	beq.n	80147ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014760:	60fb      	str	r3, [r7, #12]
 8014762:	e002      	b.n	801476a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d1f8      	bne.n	8014764 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	691b      	ldr	r3, [r3, #16]
 8014776:	899b      	ldrh	r3, [r3, #12]
 8014778:	b29b      	uxth	r3, r3
 801477a:	4618      	mov	r0, r3
 801477c:	f7f8 ff6a 	bl	800d654 <lwip_htons>
 8014780:	4603      	mov	r3, r0
 8014782:	b2db      	uxtb	r3, r3
 8014784:	f003 0307 	and.w	r3, r3, #7
 8014788:	2b00      	cmp	r3, #0
 801478a:	d116      	bne.n	80147ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	691b      	ldr	r3, [r3, #16]
 8014790:	899b      	ldrh	r3, [r3, #12]
 8014792:	b29c      	uxth	r4, r3
 8014794:	2001      	movs	r0, #1
 8014796:	f7f8 ff5d 	bl	800d654 <lwip_htons>
 801479a:	4603      	mov	r3, r0
 801479c:	461a      	mov	r2, r3
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	691b      	ldr	r3, [r3, #16]
 80147a2:	4322      	orrs	r2, r4
 80147a4:	b292      	uxth	r2, r2
 80147a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	8b5b      	ldrh	r3, [r3, #26]
 80147ac:	f043 0320 	orr.w	r3, r3, #32
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e004      	b.n	80147c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80147ba:	2101      	movs	r1, #1
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f80b 	bl	80147d8 <tcp_enqueue_flags>
 80147c2:	4603      	mov	r3, r0
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3714      	adds	r7, #20
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd90      	pop	{r4, r7, pc}
 80147cc:	080209b4 	.word	0x080209b4
 80147d0:	08020e18 	.word	0x08020e18
 80147d4:	08020a08 	.word	0x08020a08

080147d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b088      	sub	sp, #32
 80147dc:	af02      	add	r7, sp, #8
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80147e4:	2300      	movs	r3, #0
 80147e6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 80147e8:	2300      	movs	r3, #0
 80147ea:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80147ec:	78fb      	ldrb	r3, [r7, #3]
 80147ee:	f003 0303 	and.w	r3, r3, #3
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d106      	bne.n	8014804 <tcp_enqueue_flags+0x2c>
 80147f6:	4b67      	ldr	r3, [pc, #412]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80147f8:	f240 4211 	movw	r2, #1041	; 0x411
 80147fc:	4966      	ldr	r1, [pc, #408]	; (8014998 <tcp_enqueue_flags+0x1c0>)
 80147fe:	4867      	ldr	r0, [pc, #412]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014800:	f007 fb12 	bl	801be28 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d106      	bne.n	8014818 <tcp_enqueue_flags+0x40>
 801480a:	4b62      	ldr	r3, [pc, #392]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801480c:	f240 4213 	movw	r2, #1043	; 0x413
 8014810:	4963      	ldr	r1, [pc, #396]	; (80149a0 <tcp_enqueue_flags+0x1c8>)
 8014812:	4862      	ldr	r0, [pc, #392]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014814:	f007 fb08 	bl	801be28 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014818:	78fb      	ldrb	r3, [r7, #3]
 801481a:	f003 0302 	and.w	r3, r3, #2
 801481e:	2b00      	cmp	r3, #0
 8014820:	d001      	beq.n	8014826 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014822:	2301      	movs	r3, #1
 8014824:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014826:	7dfb      	ldrb	r3, [r7, #23]
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 0304 	and.w	r3, r3, #4
 8014830:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014832:	7dbb      	ldrb	r3, [r7, #22]
 8014834:	b29b      	uxth	r3, r3
 8014836:	f44f 7220 	mov.w	r2, #640	; 0x280
 801483a:	4619      	mov	r1, r3
 801483c:	2036      	movs	r0, #54	; 0x36
 801483e:	f7fa f943 	bl	800eac8 <pbuf_alloc>
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d109      	bne.n	801485e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8b5b      	ldrh	r3, [r3, #26]
 801484e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014852:	b29a      	uxth	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014858:	f04f 33ff 	mov.w	r3, #4294967295
 801485c:	e095      	b.n	801498a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	895a      	ldrh	r2, [r3, #10]
 8014862:	7dbb      	ldrb	r3, [r7, #22]
 8014864:	b29b      	uxth	r3, r3
 8014866:	429a      	cmp	r2, r3
 8014868:	d206      	bcs.n	8014878 <tcp_enqueue_flags+0xa0>
 801486a:	4b4a      	ldr	r3, [pc, #296]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801486c:	f240 4239 	movw	r2, #1081	; 0x439
 8014870:	494c      	ldr	r1, [pc, #304]	; (80149a4 <tcp_enqueue_flags+0x1cc>)
 8014872:	484a      	ldr	r0, [pc, #296]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014874:	f007 fad8 	bl	801be28 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801487c:	78fa      	ldrb	r2, [r7, #3]
 801487e:	7dfb      	ldrb	r3, [r7, #23]
 8014880:	9300      	str	r3, [sp, #0]
 8014882:	460b      	mov	r3, r1
 8014884:	68f9      	ldr	r1, [r7, #12]
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff f8b8 	bl	80139fc <tcp_create_segment>
 801488c:	60b8      	str	r0, [r7, #8]
 801488e:	68bb      	ldr	r3, [r7, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d109      	bne.n	80148a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	8b5b      	ldrh	r3, [r3, #26]
 8014898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801489c:	b29a      	uxth	r2, r3
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80148a2:	f04f 33ff 	mov.w	r3, #4294967295
 80148a6:	e070      	b.n	801498a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	691b      	ldr	r3, [r3, #16]
 80148ac:	f003 0303 	and.w	r3, r3, #3
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d006      	beq.n	80148c2 <tcp_enqueue_flags+0xea>
 80148b4:	4b37      	ldr	r3, [pc, #220]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80148b6:	f240 4242 	movw	r2, #1090	; 0x442
 80148ba:	493b      	ldr	r1, [pc, #236]	; (80149a8 <tcp_enqueue_flags+0x1d0>)
 80148bc:	4837      	ldr	r0, [pc, #220]	; (801499c <tcp_enqueue_flags+0x1c4>)
 80148be:	f007 fab3 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	891b      	ldrh	r3, [r3, #8]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d006      	beq.n	80148d8 <tcp_enqueue_flags+0x100>
 80148ca:	4b32      	ldr	r3, [pc, #200]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 80148cc:	f240 4243 	movw	r2, #1091	; 0x443
 80148d0:	4936      	ldr	r1, [pc, #216]	; (80149ac <tcp_enqueue_flags+0x1d4>)
 80148d2:	4832      	ldr	r0, [pc, #200]	; (801499c <tcp_enqueue_flags+0x1c4>)
 80148d4:	f007 faa8 	bl	801be28 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d103      	bne.n	80148e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	68ba      	ldr	r2, [r7, #8]
 80148e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80148e6:	e00d      	b.n	8014904 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80148ec:	613b      	str	r3, [r7, #16]
 80148ee:	e002      	b.n	80148f6 <tcp_enqueue_flags+0x11e>
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	613b      	str	r3, [r7, #16]
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d1f8      	bne.n	80148f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	68ba      	ldr	r2, [r7, #8]
 8014902:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2200      	movs	r2, #0
 8014908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801490c:	78fb      	ldrb	r3, [r7, #3]
 801490e:	f003 0302 	and.w	r3, r3, #2
 8014912:	2b00      	cmp	r3, #0
 8014914:	d104      	bne.n	8014920 <tcp_enqueue_flags+0x148>
 8014916:	78fb      	ldrb	r3, [r7, #3]
 8014918:	f003 0301 	and.w	r3, r3, #1
 801491c:	2b00      	cmp	r3, #0
 801491e:	d004      	beq.n	801492a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8014924:	1c5a      	adds	r2, r3, #1
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801492a:	78fb      	ldrb	r3, [r7, #3]
 801492c:	f003 0301 	and.w	r3, r3, #1
 8014930:	2b00      	cmp	r3, #0
 8014932:	d006      	beq.n	8014942 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	8b5b      	ldrh	r3, [r3, #26]
 8014938:	f043 0320 	orr.w	r3, r3, #32
 801493c:	b29a      	uxth	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	685b      	ldr	r3, [r3, #4]
 8014946:	4618      	mov	r0, r3
 8014948:	f7fa fc34 	bl	800f1b4 <pbuf_clen>
 801494c:	4603      	mov	r3, r0
 801494e:	461a      	mov	r2, r3
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014956:	4413      	add	r3, r2
 8014958:	b29a      	uxth	r2, r3
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014966:	2b00      	cmp	r3, #0
 8014968:	d00e      	beq.n	8014988 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801496e:	2b00      	cmp	r3, #0
 8014970:	d10a      	bne.n	8014988 <tcp_enqueue_flags+0x1b0>
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014976:	2b00      	cmp	r3, #0
 8014978:	d106      	bne.n	8014988 <tcp_enqueue_flags+0x1b0>
 801497a:	4b06      	ldr	r3, [pc, #24]	; (8014994 <tcp_enqueue_flags+0x1bc>)
 801497c:	f240 4265 	movw	r2, #1125	; 0x465
 8014980:	490b      	ldr	r1, [pc, #44]	; (80149b0 <tcp_enqueue_flags+0x1d8>)
 8014982:	4806      	ldr	r0, [pc, #24]	; (801499c <tcp_enqueue_flags+0x1c4>)
 8014984:	f007 fa50 	bl	801be28 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3718      	adds	r7, #24
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	080209b4 	.word	0x080209b4
 8014998:	08020e34 	.word	0x08020e34
 801499c:	08020a08 	.word	0x08020a08
 80149a0:	08020e8c 	.word	0x08020e8c
 80149a4:	08020eac 	.word	0x08020eac
 80149a8:	08020ee8 	.word	0x08020ee8
 80149ac:	08020f00 	.word	0x08020f00
 80149b0:	08020f2c 	.word	0x08020f2c

080149b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80149b4:	b5b0      	push	{r4, r5, r7, lr}
 80149b6:	b08a      	sub	sp, #40	; 0x28
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <tcp_output+0x1c>
 80149c2:	4b8a      	ldr	r3, [pc, #552]	; (8014bec <tcp_output+0x238>)
 80149c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80149c8:	4989      	ldr	r1, [pc, #548]	; (8014bf0 <tcp_output+0x23c>)
 80149ca:	488a      	ldr	r0, [pc, #552]	; (8014bf4 <tcp_output+0x240>)
 80149cc:	f007 fa2c 	bl	801be28 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	7d1b      	ldrb	r3, [r3, #20]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d106      	bne.n	80149e6 <tcp_output+0x32>
 80149d8:	4b84      	ldr	r3, [pc, #528]	; (8014bec <tcp_output+0x238>)
 80149da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80149de:	4986      	ldr	r1, [pc, #536]	; (8014bf8 <tcp_output+0x244>)
 80149e0:	4884      	ldr	r0, [pc, #528]	; (8014bf4 <tcp_output+0x240>)
 80149e2:	f007 fa21 	bl	801be28 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80149e6:	4b85      	ldr	r3, [pc, #532]	; (8014bfc <tcp_output+0x248>)
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d101      	bne.n	80149f4 <tcp_output+0x40>
    return ERR_OK;
 80149f0:	2300      	movs	r3, #0
 80149f2:	e1d1      	b.n	8014d98 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014a00:	4293      	cmp	r3, r2
 8014a02:	bf28      	it	cs
 8014a04:	4613      	movcs	r3, r2
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d10b      	bne.n	8014a2e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	8b5b      	ldrh	r3, [r3, #26]
 8014a1a:	f003 0302 	and.w	r3, r3, #2
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	f000 81ad 	beq.w	8014d7e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8014a24:	6878      	ldr	r0, [r7, #4]
 8014a26:	f000 fdf9 	bl	801561c <tcp_send_empty_ack>
 8014a2a:	4603      	mov	r3, r0
 8014a2c:	e1b4      	b.n	8014d98 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014a2e:	6879      	ldr	r1, [r7, #4]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3304      	adds	r3, #4
 8014a34:	461a      	mov	r2, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f7fe ffc4 	bl	80139c4 <tcp_route>
 8014a3c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d102      	bne.n	8014a4a <tcp_output+0x96>
    return ERR_RTE;
 8014a44:	f06f 0303 	mvn.w	r3, #3
 8014a48:	e1a6      	b.n	8014d98 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d003      	beq.n	8014a58 <tcp_output+0xa4>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d111      	bne.n	8014a7c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d002      	beq.n	8014a64 <tcp_output+0xb0>
 8014a5e:	697b      	ldr	r3, [r7, #20]
 8014a60:	3304      	adds	r3, #4
 8014a62:	e000      	b.n	8014a66 <tcp_output+0xb2>
 8014a64:	2300      	movs	r3, #0
 8014a66:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014a68:	693b      	ldr	r3, [r7, #16]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d102      	bne.n	8014a74 <tcp_output+0xc0>
      return ERR_RTE;
 8014a6e:	f06f 0303 	mvn.w	r3, #3
 8014a72:	e191      	b.n	8014d98 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	681a      	ldr	r2, [r3, #0]
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7e:	691b      	ldr	r3, [r3, #16]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7f8 fdfb 	bl	800d67e <lwip_htonl>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a8e:	1ad3      	subs	r3, r2, r3
 8014a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a92:	8912      	ldrh	r2, [r2, #8]
 8014a94:	4413      	add	r3, r2
 8014a96:	69ba      	ldr	r2, [r7, #24]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d227      	bcs.n	8014aec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	4293      	cmp	r3, r2
 8014aa8:	d114      	bne.n	8014ad4 <tcp_output+0x120>
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d110      	bne.n	8014ad4 <tcp_output+0x120>
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d10b      	bne.n	8014ad4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	2201      	movs	r2, #1
 8014ac8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	8b5b      	ldrh	r3, [r3, #26]
 8014ad8:	f003 0302 	and.w	r3, r3, #2
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f000 8150 	beq.w	8014d82 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8014ae2:	6878      	ldr	r0, [r7, #4]
 8014ae4:	f000 fd9a 	bl	801561c <tcp_send_empty_ack>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	e155      	b.n	8014d98 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2200      	movs	r2, #0
 8014af0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014af8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f000 811f 	beq.w	8014d40 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8014b02:	e002      	b.n	8014b0a <tcp_output+0x156>
 8014b04:	6a3b      	ldr	r3, [r7, #32]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	623b      	str	r3, [r7, #32]
 8014b0a:	6a3b      	ldr	r3, [r7, #32]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d1f8      	bne.n	8014b04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014b12:	e115      	b.n	8014d40 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b16:	691b      	ldr	r3, [r3, #16]
 8014b18:	899b      	ldrh	r3, [r3, #12]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f7f8 fd99 	bl	800d654 <lwip_htons>
 8014b22:	4603      	mov	r3, r0
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	f003 0304 	and.w	r3, r3, #4
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d006      	beq.n	8014b3c <tcp_output+0x188>
 8014b2e:	4b2f      	ldr	r3, [pc, #188]	; (8014bec <tcp_output+0x238>)
 8014b30:	f240 5236 	movw	r2, #1334	; 0x536
 8014b34:	4932      	ldr	r1, [pc, #200]	; (8014c00 <tcp_output+0x24c>)
 8014b36:	482f      	ldr	r0, [pc, #188]	; (8014bf4 <tcp_output+0x240>)
 8014b38:	f007 f976 	bl	801be28 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d01f      	beq.n	8014b84 <tcp_output+0x1d0>
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d119      	bne.n	8014b84 <tcp_output+0x1d0>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00b      	beq.n	8014b70 <tcp_output+0x1bc>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d110      	bne.n	8014b84 <tcp_output+0x1d0>
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b66:	891a      	ldrh	r2, [r3, #8]
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b6c:	429a      	cmp	r2, r3
 8014b6e:	d209      	bcs.n	8014b84 <tcp_output+0x1d0>
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d004      	beq.n	8014b84 <tcp_output+0x1d0>
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b80:	2b0f      	cmp	r3, #15
 8014b82:	d901      	bls.n	8014b88 <tcp_output+0x1d4>
 8014b84:	2301      	movs	r3, #1
 8014b86:	e000      	b.n	8014b8a <tcp_output+0x1d6>
 8014b88:	2300      	movs	r3, #0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	8b5b      	ldrh	r3, [r3, #26]
 8014b92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	f000 80e7 	beq.w	8014d6a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ba0:	2b02      	cmp	r3, #2
 8014ba2:	d00d      	beq.n	8014bc0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ba6:	691b      	ldr	r3, [r3, #16]
 8014ba8:	899b      	ldrh	r3, [r3, #12]
 8014baa:	b29c      	uxth	r4, r3
 8014bac:	2010      	movs	r0, #16
 8014bae:	f7f8 fd51 	bl	800d654 <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb8:	691b      	ldr	r3, [r3, #16]
 8014bba:	4322      	orrs	r2, r4
 8014bbc:	b292      	uxth	r2, r2
 8014bbe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014bc0:	697a      	ldr	r2, [r7, #20]
 8014bc2:	6879      	ldr	r1, [r7, #4]
 8014bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014bc6:	f000 f90b 	bl	8014de0 <tcp_output_segment>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d016      	beq.n	8014c04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	8b5b      	ldrh	r3, [r3, #26]
 8014bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	835a      	strh	r2, [r3, #26]
      return err;
 8014be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014be8:	e0d6      	b.n	8014d98 <tcp_output+0x3e4>
 8014bea:	bf00      	nop
 8014bec:	080209b4 	.word	0x080209b4
 8014bf0:	08020f54 	.word	0x08020f54
 8014bf4:	08020a08 	.word	0x08020a08
 8014bf8:	08020f6c 	.word	0x08020f6c
 8014bfc:	20013d28 	.word	0x20013d28
 8014c00:	08020f94 	.word	0x08020f94
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8014c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c06:	2200      	movs	r2, #0
 8014c08:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	7d1b      	ldrb	r3, [r3, #20]
 8014c16:	2b02      	cmp	r3, #2
 8014c18:	d006      	beq.n	8014c28 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	8b5b      	ldrh	r3, [r3, #26]
 8014c1e:	f023 0303 	bic.w	r3, r3, #3
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c2a:	691b      	ldr	r3, [r3, #16]
 8014c2c:	685b      	ldr	r3, [r3, #4]
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7f8 fd25 	bl	800d67e <lwip_htonl>
 8014c34:	4604      	mov	r4, r0
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	891b      	ldrh	r3, [r3, #8]
 8014c3a:	461d      	mov	r5, r3
 8014c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c3e:	691b      	ldr	r3, [r3, #16]
 8014c40:	899b      	ldrh	r3, [r3, #12]
 8014c42:	b29b      	uxth	r3, r3
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7f8 fd05 	bl	800d654 <lwip_htons>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	f003 0303 	and.w	r3, r3, #3
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d001      	beq.n	8014c5a <tcp_output+0x2a6>
 8014c56:	2301      	movs	r3, #1
 8014c58:	e000      	b.n	8014c5c <tcp_output+0x2a8>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	442b      	add	r3, r5
 8014c5e:	4423      	add	r3, r4
 8014c60:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014c66:	68bb      	ldr	r3, [r7, #8]
 8014c68:	1ad3      	subs	r3, r2, r3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	da02      	bge.n	8014c74 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	68ba      	ldr	r2, [r7, #8]
 8014c72:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c76:	891b      	ldrh	r3, [r3, #8]
 8014c78:	461c      	mov	r4, r3
 8014c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c7c:	691b      	ldr	r3, [r3, #16]
 8014c7e:	899b      	ldrh	r3, [r3, #12]
 8014c80:	b29b      	uxth	r3, r3
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f8 fce6 	bl	800d654 <lwip_htons>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	b2db      	uxtb	r3, r3
 8014c8c:	f003 0303 	and.w	r3, r3, #3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d001      	beq.n	8014c98 <tcp_output+0x2e4>
 8014c94:	2301      	movs	r3, #1
 8014c96:	e000      	b.n	8014c9a <tcp_output+0x2e6>
 8014c98:	2300      	movs	r3, #0
 8014c9a:	4423      	add	r3, r4
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d049      	beq.n	8014d34 <tcp_output+0x380>
      seg->next = NULL;
 8014ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca2:	2200      	movs	r2, #0
 8014ca4:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d105      	bne.n	8014cba <tcp_output+0x306>
        pcb->unacked = seg;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cb2:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb6:	623b      	str	r3, [r7, #32]
 8014cb8:	e03f      	b.n	8014d3a <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cbc:	691b      	ldr	r3, [r3, #16]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7f8 fcdc 	bl	800d67e <lwip_htonl>
 8014cc6:	4604      	mov	r4, r0
 8014cc8:	6a3b      	ldr	r3, [r7, #32]
 8014cca:	691b      	ldr	r3, [r3, #16]
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7f8 fcd5 	bl	800d67e <lwip_htonl>
 8014cd4:	4603      	mov	r3, r0
 8014cd6:	1ae3      	subs	r3, r4, r3
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	da24      	bge.n	8014d26 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	3370      	adds	r3, #112	; 0x70
 8014ce0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014ce2:	e002      	b.n	8014cea <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014ce4:	69fb      	ldr	r3, [r7, #28]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014cea:	69fb      	ldr	r3, [r7, #28]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d011      	beq.n	8014d16 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	691b      	ldr	r3, [r3, #16]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7f8 fcbf 	bl	800d67e <lwip_htonl>
 8014d00:	4604      	mov	r4, r0
 8014d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d04:	691b      	ldr	r3, [r3, #16]
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7f8 fcb8 	bl	800d67e <lwip_htonl>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	dbe6      	blt.n	8014ce4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8014d16:	69fb      	ldr	r3, [r7, #28]
 8014d18:	681a      	ldr	r2, [r3, #0]
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014d1e:	69fb      	ldr	r3, [r7, #28]
 8014d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d22:	601a      	str	r2, [r3, #0]
 8014d24:	e009      	b.n	8014d3a <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014d26:	6a3b      	ldr	r3, [r7, #32]
 8014d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d2a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014d2c:	6a3b      	ldr	r3, [r7, #32]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	623b      	str	r3, [r7, #32]
 8014d32:	e002      	b.n	8014d3a <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d36:	f7fb ff34 	bl	8010ba2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d012      	beq.n	8014d6c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d48:	691b      	ldr	r3, [r3, #16]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f7f8 fc96 	bl	800d67e <lwip_htonl>
 8014d52:	4602      	mov	r2, r0
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d58:	1ad3      	subs	r3, r2, r3
 8014d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d5c:	8912      	ldrh	r2, [r2, #8]
 8014d5e:	4413      	add	r3, r2
  while (seg != NULL &&
 8014d60:	69ba      	ldr	r2, [r7, #24]
 8014d62:	429a      	cmp	r2, r3
 8014d64:	f4bf aed6 	bcs.w	8014b14 <tcp_output+0x160>
 8014d68:	e000      	b.n	8014d6c <tcp_output+0x3b8>
      break;
 8014d6a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d108      	bne.n	8014d86 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2200      	movs	r2, #0
 8014d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014d7c:	e004      	b.n	8014d88 <tcp_output+0x3d4>
    goto output_done;
 8014d7e:	bf00      	nop
 8014d80:	e002      	b.n	8014d88 <tcp_output+0x3d4>
    goto output_done;
 8014d82:	bf00      	nop
 8014d84:	e000      	b.n	8014d88 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014d86:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8b5b      	ldrh	r3, [r3, #26]
 8014d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d90:	b29a      	uxth	r2, r3
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014d96:	2300      	movs	r3, #0
}
 8014d98:	4618      	mov	r0, r3
 8014d9a:	3728      	adds	r7, #40	; 0x28
 8014d9c:	46bd      	mov	sp, r7
 8014d9e:	bdb0      	pop	{r4, r5, r7, pc}

08014da0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d106      	bne.n	8014dbc <tcp_output_segment_busy+0x1c>
 8014dae:	4b09      	ldr	r3, [pc, #36]	; (8014dd4 <tcp_output_segment_busy+0x34>)
 8014db0:	f240 529a 	movw	r2, #1434	; 0x59a
 8014db4:	4908      	ldr	r1, [pc, #32]	; (8014dd8 <tcp_output_segment_busy+0x38>)
 8014db6:	4809      	ldr	r0, [pc, #36]	; (8014ddc <tcp_output_segment_busy+0x3c>)
 8014db8:	f007 f836 	bl	801be28 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	685b      	ldr	r3, [r3, #4]
 8014dc0:	7b9b      	ldrb	r3, [r3, #14]
 8014dc2:	2b01      	cmp	r3, #1
 8014dc4:	d001      	beq.n	8014dca <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	e000      	b.n	8014dcc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014dca:	2300      	movs	r3, #0
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3708      	adds	r7, #8
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}
 8014dd4:	080209b4 	.word	0x080209b4
 8014dd8:	08020fac 	.word	0x08020fac
 8014ddc:	08020a08 	.word	0x08020a08

08014de0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014de0:	b5b0      	push	{r4, r5, r7, lr}
 8014de2:	b08c      	sub	sp, #48	; 0x30
 8014de4:	af04      	add	r7, sp, #16
 8014de6:	60f8      	str	r0, [r7, #12]
 8014de8:	60b9      	str	r1, [r7, #8]
 8014dea:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d106      	bne.n	8014e00 <tcp_output_segment+0x20>
 8014df2:	4b6d      	ldr	r3, [pc, #436]	; (8014fa8 <tcp_output_segment+0x1c8>)
 8014df4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014df8:	496c      	ldr	r1, [pc, #432]	; (8014fac <tcp_output_segment+0x1cc>)
 8014dfa:	486d      	ldr	r0, [pc, #436]	; (8014fb0 <tcp_output_segment+0x1d0>)
 8014dfc:	f007 f814 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d106      	bne.n	8014e14 <tcp_output_segment+0x34>
 8014e06:	4b68      	ldr	r3, [pc, #416]	; (8014fa8 <tcp_output_segment+0x1c8>)
 8014e08:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014e0c:	4969      	ldr	r1, [pc, #420]	; (8014fb4 <tcp_output_segment+0x1d4>)
 8014e0e:	4868      	ldr	r0, [pc, #416]	; (8014fb0 <tcp_output_segment+0x1d0>)
 8014e10:	f007 f80a 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d106      	bne.n	8014e28 <tcp_output_segment+0x48>
 8014e1a:	4b63      	ldr	r3, [pc, #396]	; (8014fa8 <tcp_output_segment+0x1c8>)
 8014e1c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014e20:	4965      	ldr	r1, [pc, #404]	; (8014fb8 <tcp_output_segment+0x1d8>)
 8014e22:	4863      	ldr	r0, [pc, #396]	; (8014fb0 <tcp_output_segment+0x1d0>)
 8014e24:	f007 f800 	bl	801be28 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014e28:	68f8      	ldr	r0, [r7, #12]
 8014e2a:	f7ff ffb9 	bl	8014da0 <tcp_output_segment_busy>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d001      	beq.n	8014e38 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014e34:	2300      	movs	r3, #0
 8014e36:	e0b3      	b.n	8014fa0 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014e38:	68bb      	ldr	r3, [r7, #8]
 8014e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	691c      	ldr	r4, [r3, #16]
 8014e40:	4610      	mov	r0, r2
 8014e42:	f7f8 fc1c 	bl	800d67e <lwip_htonl>
 8014e46:	4603      	mov	r3, r0
 8014e48:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	691c      	ldr	r4, [r3, #16]
 8014e52:	4610      	mov	r0, r2
 8014e54:	f7f8 fbfe 	bl	800d654 <lwip_htons>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014e64:	441a      	add	r2, r3
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	3314      	adds	r3, #20
 8014e70:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	7b1b      	ldrb	r3, [r3, #12]
 8014e76:	f003 0301 	and.w	r3, r3, #1
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d015      	beq.n	8014eaa <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	3304      	adds	r3, #4
 8014e82:	461a      	mov	r2, r3
 8014e84:	6879      	ldr	r1, [r7, #4]
 8014e86:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8014e8a:	f7fc f9bd 	bl	8011208 <tcp_eff_send_mss_netif>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014e92:	8b7b      	ldrh	r3, [r7, #26]
 8014e94:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7f8 fbf0 	bl	800d67e <lwip_htonl>
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	3304      	adds	r3, #4
 8014ea8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	da02      	bge.n	8014eba <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d10c      	bne.n	8014edc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014ec2:	4b3e      	ldr	r3, [pc, #248]	; (8014fbc <tcp_output_segment+0x1dc>)
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	685b      	ldr	r3, [r3, #4]
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f7f8 fbd4 	bl	800d67e <lwip_htonl>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	68bb      	ldr	r3, [r7, #8]
 8014eda:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	691a      	ldr	r2, [r3, #16]
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	685b      	ldr	r3, [r3, #4]
 8014eee:	8959      	ldrh	r1, [r3, #10]
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	685b      	ldr	r3, [r3, #4]
 8014ef4:	8b3a      	ldrh	r2, [r7, #24]
 8014ef6:	1a8a      	subs	r2, r1, r2
 8014ef8:	b292      	uxth	r2, r2
 8014efa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	685b      	ldr	r3, [r3, #4]
 8014f00:	8919      	ldrh	r1, [r3, #8]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	685b      	ldr	r3, [r3, #4]
 8014f06:	8b3a      	ldrh	r2, [r7, #24]
 8014f08:	1a8a      	subs	r2, r1, r2
 8014f0a:	b292      	uxth	r2, r2
 8014f0c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	68fa      	ldr	r2, [r7, #12]
 8014f14:	6912      	ldr	r2, [r2, #16]
 8014f16:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	691b      	ldr	r3, [r3, #16]
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	741a      	strb	r2, [r3, #16]
 8014f20:	2200      	movs	r2, #0
 8014f22:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014f24:	68fb      	ldr	r3, [r7, #12]
 8014f26:	691a      	ldr	r2, [r3, #16]
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	7b1b      	ldrb	r3, [r3, #12]
 8014f2c:	f003 0301 	and.w	r3, r3, #1
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d001      	beq.n	8014f38 <tcp_output_segment+0x158>
 8014f34:	2318      	movs	r3, #24
 8014f36:	e000      	b.n	8014f3a <tcp_output_segment+0x15a>
 8014f38:	2314      	movs	r3, #20
 8014f3a:	4413      	add	r3, r2
 8014f3c:	69fa      	ldr	r2, [r7, #28]
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d006      	beq.n	8014f50 <tcp_output_segment+0x170>
 8014f42:	4b19      	ldr	r3, [pc, #100]	; (8014fa8 <tcp_output_segment+0x1c8>)
 8014f44:	f240 621c 	movw	r2, #1564	; 0x61c
 8014f48:	491d      	ldr	r1, [pc, #116]	; (8014fc0 <tcp_output_segment+0x1e0>)
 8014f4a:	4819      	ldr	r0, [pc, #100]	; (8014fb0 <tcp_output_segment+0x1d0>)
 8014f4c:	f006 ff6c 	bl	801be28 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f58:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014f5a:	68bd      	ldr	r5, [r7, #8]
 8014f5c:	68bb      	ldr	r3, [r7, #8]
 8014f5e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014f60:	68fa      	ldr	r2, [r7, #12]
 8014f62:	6914      	ldr	r4, [r2, #16]
 8014f64:	9300      	str	r3, [sp, #0]
 8014f66:	462b      	mov	r3, r5
 8014f68:	460a      	mov	r2, r1
 8014f6a:	2106      	movs	r1, #6
 8014f6c:	f7f8 fca4 	bl	800d8b8 <ip_chksum_pseudo>
 8014f70:	4603      	mov	r3, r0
 8014f72:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	6858      	ldr	r0, [r3, #4]
 8014f78:	68b9      	ldr	r1, [r7, #8]
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	1d1c      	adds	r4, r3, #4
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	7add      	ldrb	r5, [r3, #11]
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	7a9b      	ldrb	r3, [r3, #10]
 8014f86:	687a      	ldr	r2, [r7, #4]
 8014f88:	9202      	str	r2, [sp, #8]
 8014f8a:	2206      	movs	r2, #6
 8014f8c:	9201      	str	r2, [sp, #4]
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	462b      	mov	r3, r5
 8014f92:	4622      	mov	r2, r4
 8014f94:	f004 fdb0 	bl	8019af8 <ip4_output_if>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3720      	adds	r7, #32
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8014fa8:	080209b4 	.word	0x080209b4
 8014fac:	08020fd4 	.word	0x08020fd4
 8014fb0:	08020a08 	.word	0x08020a08
 8014fb4:	08020ff4 	.word	0x08020ff4
 8014fb8:	08021014 	.word	0x08021014
 8014fbc:	20013cd8 	.word	0x20013cd8
 8014fc0:	08021038 	.word	0x08021038

08014fc4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014fc4:	b5b0      	push	{r4, r5, r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d106      	bne.n	8014fe0 <tcp_rexmit_rto_prepare+0x1c>
 8014fd2:	4b36      	ldr	r3, [pc, #216]	; (80150ac <tcp_rexmit_rto_prepare+0xe8>)
 8014fd4:	f240 6263 	movw	r2, #1635	; 0x663
 8014fd8:	4935      	ldr	r1, [pc, #212]	; (80150b0 <tcp_rexmit_rto_prepare+0xec>)
 8014fda:	4836      	ldr	r0, [pc, #216]	; (80150b4 <tcp_rexmit_rto_prepare+0xf0>)
 8014fdc:	f006 ff24 	bl	801be28 <iprintf>

  if (pcb->unacked == NULL) {
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d102      	bne.n	8014fee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014fe8:	f06f 0305 	mvn.w	r3, #5
 8014fec:	e059      	b.n	80150a2 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ff2:	60fb      	str	r3, [r7, #12]
 8014ff4:	e00b      	b.n	801500e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7ff fed2 	bl	8014da0 <tcp_output_segment_busy>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d002      	beq.n	8015008 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8015002:	f06f 0305 	mvn.w	r3, #5
 8015006:	e04c      	b.n	80150a2 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	60fb      	str	r3, [r7, #12]
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d1ef      	bne.n	8014ff6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f7ff fec2 	bl	8014da0 <tcp_output_segment_busy>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d002      	beq.n	8015028 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8015022:	f06f 0305 	mvn.w	r3, #5
 8015026:	e03c      	b.n	80150a2 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015034:	2b00      	cmp	r3, #0
 8015036:	d104      	bne.n	8015042 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	895a      	ldrh	r2, [r3, #10]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	2200      	movs	r2, #0
 801504e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	8b5b      	ldrh	r3, [r3, #26]
 8015054:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015058:	b29a      	uxth	r2, r3
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	691b      	ldr	r3, [r3, #16]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	4618      	mov	r0, r3
 8015066:	f7f8 fb0a 	bl	800d67e <lwip_htonl>
 801506a:	4604      	mov	r4, r0
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	891b      	ldrh	r3, [r3, #8]
 8015070:	461d      	mov	r5, r3
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	691b      	ldr	r3, [r3, #16]
 8015076:	899b      	ldrh	r3, [r3, #12]
 8015078:	b29b      	uxth	r3, r3
 801507a:	4618      	mov	r0, r3
 801507c:	f7f8 faea 	bl	800d654 <lwip_htons>
 8015080:	4603      	mov	r3, r0
 8015082:	b2db      	uxtb	r3, r3
 8015084:	f003 0303 	and.w	r3, r3, #3
 8015088:	2b00      	cmp	r3, #0
 801508a:	d001      	beq.n	8015090 <tcp_rexmit_rto_prepare+0xcc>
 801508c:	2301      	movs	r3, #1
 801508e:	e000      	b.n	8015092 <tcp_rexmit_rto_prepare+0xce>
 8015090:	2300      	movs	r3, #0
 8015092:	442b      	add	r3, r5
 8015094:	18e2      	adds	r2, r4, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2200      	movs	r2, #0
 801509e:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80150a0:	2300      	movs	r3, #0
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3710      	adds	r7, #16
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bdb0      	pop	{r4, r5, r7, pc}
 80150aa:	bf00      	nop
 80150ac:	080209b4 	.word	0x080209b4
 80150b0:	0802104c 	.word	0x0802104c
 80150b4:	08020a08 	.word	0x08020a08

080150b8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d106      	bne.n	80150d4 <tcp_rexmit_rto_commit+0x1c>
 80150c6:	4b0d      	ldr	r3, [pc, #52]	; (80150fc <tcp_rexmit_rto_commit+0x44>)
 80150c8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80150cc:	490c      	ldr	r1, [pc, #48]	; (8015100 <tcp_rexmit_rto_commit+0x48>)
 80150ce:	480d      	ldr	r0, [pc, #52]	; (8015104 <tcp_rexmit_rto_commit+0x4c>)
 80150d0:	f006 feaa 	bl	801be28 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80150da:	2bff      	cmp	r3, #255	; 0xff
 80150dc:	d007      	beq.n	80150ee <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80150e4:	3301      	adds	r3, #1
 80150e6:	b2da      	uxtb	r2, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f7ff fc60 	bl	80149b4 <tcp_output>
}
 80150f4:	bf00      	nop
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	080209b4 	.word	0x080209b4
 8015100:	08021070 	.word	0x08021070
 8015104:	08020a08 	.word	0x08020a08

08015108 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b082      	sub	sp, #8
 801510c:	af00      	add	r7, sp, #0
 801510e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d106      	bne.n	8015124 <tcp_rexmit_rto+0x1c>
 8015116:	4b0a      	ldr	r3, [pc, #40]	; (8015140 <tcp_rexmit_rto+0x38>)
 8015118:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801511c:	4909      	ldr	r1, [pc, #36]	; (8015144 <tcp_rexmit_rto+0x3c>)
 801511e:	480a      	ldr	r0, [pc, #40]	; (8015148 <tcp_rexmit_rto+0x40>)
 8015120:	f006 fe82 	bl	801be28 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f7ff ff4d 	bl	8014fc4 <tcp_rexmit_rto_prepare>
 801512a:	4603      	mov	r3, r0
 801512c:	2b00      	cmp	r3, #0
 801512e:	d102      	bne.n	8015136 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f7ff ffc1 	bl	80150b8 <tcp_rexmit_rto_commit>
  }
}
 8015136:	bf00      	nop
 8015138:	3708      	adds	r7, #8
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	080209b4 	.word	0x080209b4
 8015144:	08021094 	.word	0x08021094
 8015148:	08020a08 	.word	0x08020a08

0801514c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801514c:	b590      	push	{r4, r7, lr}
 801514e:	b085      	sub	sp, #20
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d106      	bne.n	8015168 <tcp_rexmit+0x1c>
 801515a:	4b2f      	ldr	r3, [pc, #188]	; (8015218 <tcp_rexmit+0xcc>)
 801515c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8015160:	492e      	ldr	r1, [pc, #184]	; (801521c <tcp_rexmit+0xd0>)
 8015162:	482f      	ldr	r0, [pc, #188]	; (8015220 <tcp_rexmit+0xd4>)
 8015164:	f006 fe60 	bl	801be28 <iprintf>

  if (pcb->unacked == NULL) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801516c:	2b00      	cmp	r3, #0
 801516e:	d102      	bne.n	8015176 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015170:	f06f 0305 	mvn.w	r3, #5
 8015174:	e04c      	b.n	8015210 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801517a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801517c:	68b8      	ldr	r0, [r7, #8]
 801517e:	f7ff fe0f 	bl	8014da0 <tcp_output_segment_busy>
 8015182:	4603      	mov	r3, r0
 8015184:	2b00      	cmp	r3, #0
 8015186:	d002      	beq.n	801518e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8015188:	f06f 0305 	mvn.w	r3, #5
 801518c:	e040      	b.n	8015210 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	336c      	adds	r3, #108	; 0x6c
 801519a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801519c:	e002      	b.n	80151a4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d011      	beq.n	80151d0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	691b      	ldr	r3, [r3, #16]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	4618      	mov	r0, r3
 80151b6:	f7f8 fa62 	bl	800d67e <lwip_htonl>
 80151ba:	4604      	mov	r4, r0
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	691b      	ldr	r3, [r3, #16]
 80151c0:	685b      	ldr	r3, [r3, #4]
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7f8 fa5b 	bl	800d67e <lwip_htonl>
 80151c8:	4603      	mov	r3, r0
 80151ca:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	dbe6      	blt.n	801519e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	681a      	ldr	r2, [r3, #0]
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d103      	bne.n	80151ee <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2200      	movs	r2, #0
 80151ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151f4:	2bff      	cmp	r3, #255	; 0xff
 80151f6:	d007      	beq.n	8015208 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80151fe:	3301      	adds	r3, #1
 8015200:	b2da      	uxtb	r2, r3
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2200      	movs	r2, #0
 801520c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801520e:	2300      	movs	r3, #0
}
 8015210:	4618      	mov	r0, r3
 8015212:	3714      	adds	r7, #20
 8015214:	46bd      	mov	sp, r7
 8015216:	bd90      	pop	{r4, r7, pc}
 8015218:	080209b4 	.word	0x080209b4
 801521c:	080210b0 	.word	0x080210b0
 8015220:	08020a08 	.word	0x08020a08

08015224 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d106      	bne.n	8015240 <tcp_rexmit_fast+0x1c>
 8015232:	4b2a      	ldr	r3, [pc, #168]	; (80152dc <tcp_rexmit_fast+0xb8>)
 8015234:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8015238:	4929      	ldr	r1, [pc, #164]	; (80152e0 <tcp_rexmit_fast+0xbc>)
 801523a:	482a      	ldr	r0, [pc, #168]	; (80152e4 <tcp_rexmit_fast+0xc0>)
 801523c:	f006 fdf4 	bl	801be28 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015244:	2b00      	cmp	r3, #0
 8015246:	d044      	beq.n	80152d2 <tcp_rexmit_fast+0xae>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	8b5b      	ldrh	r3, [r3, #26]
 801524c:	f003 0304 	and.w	r3, r3, #4
 8015250:	2b00      	cmp	r3, #0
 8015252:	d13e      	bne.n	80152d2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8015254:	6878      	ldr	r0, [r7, #4]
 8015256:	f7ff ff79 	bl	801514c <tcp_rexmit>
 801525a:	4603      	mov	r3, r0
 801525c:	2b00      	cmp	r3, #0
 801525e:	d138      	bne.n	80152d2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801526c:	4293      	cmp	r3, r2
 801526e:	bf28      	it	cs
 8015270:	4613      	movcs	r3, r2
 8015272:	b29b      	uxth	r3, r3
 8015274:	0fda      	lsrs	r2, r3, #31
 8015276:	4413      	add	r3, r2
 8015278:	105b      	asrs	r3, r3, #1
 801527a:	b29a      	uxth	r2, r3
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015288:	461a      	mov	r2, r3
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	429a      	cmp	r2, r3
 8015292:	d206      	bcs.n	80152a2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015298:	005b      	lsls	r3, r3, #1
 801529a:	b29a      	uxth	r2, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80152ac:	4619      	mov	r1, r3
 80152ae:	0049      	lsls	r1, r1, #1
 80152b0:	440b      	add	r3, r1
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4413      	add	r3, r2
 80152b6:	b29a      	uxth	r2, r3
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	8b5b      	ldrh	r3, [r3, #26]
 80152c2:	f043 0304 	orr.w	r3, r3, #4
 80152c6:	b29a      	uxth	r2, r3
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2200      	movs	r2, #0
 80152d0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80152d2:	bf00      	nop
 80152d4:	3708      	adds	r7, #8
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	080209b4 	.word	0x080209b4
 80152e0:	080210c8 	.word	0x080210c8
 80152e4:	08020a08 	.word	0x08020a08

080152e8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b086      	sub	sp, #24
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	607b      	str	r3, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	817b      	strh	r3, [r7, #10]
 80152f6:	4613      	mov	r3, r2
 80152f8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80152fa:	897a      	ldrh	r2, [r7, #10]
 80152fc:	893b      	ldrh	r3, [r7, #8]
 80152fe:	4413      	add	r3, r2
 8015300:	b29b      	uxth	r3, r3
 8015302:	3314      	adds	r3, #20
 8015304:	b29b      	uxth	r3, r3
 8015306:	f44f 7220 	mov.w	r2, #640	; 0x280
 801530a:	4619      	mov	r1, r3
 801530c:	2022      	movs	r0, #34	; 0x22
 801530e:	f7f9 fbdb 	bl	800eac8 <pbuf_alloc>
 8015312:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d04d      	beq.n	80153b6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801531a:	897b      	ldrh	r3, [r7, #10]
 801531c:	3313      	adds	r3, #19
 801531e:	697a      	ldr	r2, [r7, #20]
 8015320:	8952      	ldrh	r2, [r2, #10]
 8015322:	4293      	cmp	r3, r2
 8015324:	db06      	blt.n	8015334 <tcp_output_alloc_header_common+0x4c>
 8015326:	4b26      	ldr	r3, [pc, #152]	; (80153c0 <tcp_output_alloc_header_common+0xd8>)
 8015328:	f240 7223 	movw	r2, #1827	; 0x723
 801532c:	4925      	ldr	r1, [pc, #148]	; (80153c4 <tcp_output_alloc_header_common+0xdc>)
 801532e:	4826      	ldr	r0, [pc, #152]	; (80153c8 <tcp_output_alloc_header_common+0xe0>)
 8015330:	f006 fd7a 	bl	801be28 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	685b      	ldr	r3, [r3, #4]
 8015338:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801533a:	8c3b      	ldrh	r3, [r7, #32]
 801533c:	4618      	mov	r0, r3
 801533e:	f7f8 f989 	bl	800d654 <lwip_htons>
 8015342:	4603      	mov	r3, r0
 8015344:	461a      	mov	r2, r3
 8015346:	693b      	ldr	r3, [r7, #16]
 8015348:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801534a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801534c:	4618      	mov	r0, r3
 801534e:	f7f8 f981 	bl	800d654 <lwip_htons>
 8015352:	4603      	mov	r3, r0
 8015354:	461a      	mov	r2, r3
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801535a:	693b      	ldr	r3, [r7, #16]
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8015360:	68f8      	ldr	r0, [r7, #12]
 8015362:	f7f8 f98c 	bl	800d67e <lwip_htonl>
 8015366:	4602      	mov	r2, r0
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801536c:	897b      	ldrh	r3, [r7, #10]
 801536e:	089b      	lsrs	r3, r3, #2
 8015370:	b29b      	uxth	r3, r3
 8015372:	3305      	adds	r3, #5
 8015374:	b29b      	uxth	r3, r3
 8015376:	031b      	lsls	r3, r3, #12
 8015378:	b29a      	uxth	r2, r3
 801537a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801537e:	b29b      	uxth	r3, r3
 8015380:	4313      	orrs	r3, r2
 8015382:	b29b      	uxth	r3, r3
 8015384:	4618      	mov	r0, r3
 8015386:	f7f8 f965 	bl	800d654 <lwip_htons>
 801538a:	4603      	mov	r3, r0
 801538c:	461a      	mov	r2, r3
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015392:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015394:	4618      	mov	r0, r3
 8015396:	f7f8 f95d 	bl	800d654 <lwip_htons>
 801539a:	4603      	mov	r3, r0
 801539c:	461a      	mov	r2, r3
 801539e:	693b      	ldr	r3, [r7, #16]
 80153a0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	2200      	movs	r2, #0
 80153a6:	741a      	strb	r2, [r3, #16]
 80153a8:	2200      	movs	r2, #0
 80153aa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	2200      	movs	r2, #0
 80153b0:	749a      	strb	r2, [r3, #18]
 80153b2:	2200      	movs	r2, #0
 80153b4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80153b6:	697b      	ldr	r3, [r7, #20]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3718      	adds	r7, #24
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	080209b4 	.word	0x080209b4
 80153c4:	080210e8 	.word	0x080210e8
 80153c8:	08020a08 	.word	0x08020a08

080153cc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80153cc:	b5b0      	push	{r4, r5, r7, lr}
 80153ce:	b08a      	sub	sp, #40	; 0x28
 80153d0:	af04      	add	r7, sp, #16
 80153d2:	60f8      	str	r0, [r7, #12]
 80153d4:	607b      	str	r3, [r7, #4]
 80153d6:	460b      	mov	r3, r1
 80153d8:	817b      	strh	r3, [r7, #10]
 80153da:	4613      	mov	r3, r2
 80153dc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d106      	bne.n	80153f2 <tcp_output_alloc_header+0x26>
 80153e4:	4b15      	ldr	r3, [pc, #84]	; (801543c <tcp_output_alloc_header+0x70>)
 80153e6:	f240 7242 	movw	r2, #1858	; 0x742
 80153ea:	4915      	ldr	r1, [pc, #84]	; (8015440 <tcp_output_alloc_header+0x74>)
 80153ec:	4815      	ldr	r0, [pc, #84]	; (8015444 <tcp_output_alloc_header+0x78>)
 80153ee:	f006 fd1b 	bl	801be28 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	8adb      	ldrh	r3, [r3, #22]
 80153fa:	68fa      	ldr	r2, [r7, #12]
 80153fc:	8b12      	ldrh	r2, [r2, #24]
 80153fe:	68f9      	ldr	r1, [r7, #12]
 8015400:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015402:	893d      	ldrh	r5, [r7, #8]
 8015404:	897c      	ldrh	r4, [r7, #10]
 8015406:	9103      	str	r1, [sp, #12]
 8015408:	2110      	movs	r1, #16
 801540a:	9102      	str	r1, [sp, #8]
 801540c:	9201      	str	r2, [sp, #4]
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	462a      	mov	r2, r5
 8015414:	4621      	mov	r1, r4
 8015416:	f7ff ff67 	bl	80152e8 <tcp_output_alloc_header_common>
 801541a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d006      	beq.n	8015430 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015426:	68fa      	ldr	r2, [r7, #12]
 8015428:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801542a:	441a      	add	r2, r3
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015430:	697b      	ldr	r3, [r7, #20]
}
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	bdb0      	pop	{r4, r5, r7, pc}
 801543a:	bf00      	nop
 801543c:	080209b4 	.word	0x080209b4
 8015440:	08021118 	.word	0x08021118
 8015444:	08020a08 	.word	0x08020a08

08015448 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b088      	sub	sp, #32
 801544c:	af00      	add	r7, sp, #0
 801544e:	60f8      	str	r0, [r7, #12]
 8015450:	60b9      	str	r1, [r7, #8]
 8015452:	4611      	mov	r1, r2
 8015454:	461a      	mov	r2, r3
 8015456:	460b      	mov	r3, r1
 8015458:	71fb      	strb	r3, [r7, #7]
 801545a:	4613      	mov	r3, r2
 801545c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801545e:	2300      	movs	r3, #0
 8015460:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d106      	bne.n	8015476 <tcp_output_fill_options+0x2e>
 8015468:	4b12      	ldr	r3, [pc, #72]	; (80154b4 <tcp_output_fill_options+0x6c>)
 801546a:	f240 7256 	movw	r2, #1878	; 0x756
 801546e:	4912      	ldr	r1, [pc, #72]	; (80154b8 <tcp_output_fill_options+0x70>)
 8015470:	4812      	ldr	r0, [pc, #72]	; (80154bc <tcp_output_fill_options+0x74>)
 8015472:	f006 fcd9 	bl	801be28 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015476:	68bb      	ldr	r3, [r7, #8]
 8015478:	685b      	ldr	r3, [r3, #4]
 801547a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801547c:	69bb      	ldr	r3, [r7, #24]
 801547e:	3314      	adds	r3, #20
 8015480:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015482:	8bfb      	ldrh	r3, [r7, #30]
 8015484:	009b      	lsls	r3, r3, #2
 8015486:	461a      	mov	r2, r3
 8015488:	79fb      	ldrb	r3, [r7, #7]
 801548a:	009b      	lsls	r3, r3, #2
 801548c:	f003 0304 	and.w	r3, r3, #4
 8015490:	4413      	add	r3, r2
 8015492:	3314      	adds	r3, #20
 8015494:	69ba      	ldr	r2, [r7, #24]
 8015496:	4413      	add	r3, r2
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	429a      	cmp	r2, r3
 801549c:	d006      	beq.n	80154ac <tcp_output_fill_options+0x64>
 801549e:	4b05      	ldr	r3, [pc, #20]	; (80154b4 <tcp_output_fill_options+0x6c>)
 80154a0:	f240 7275 	movw	r2, #1909	; 0x775
 80154a4:	4906      	ldr	r1, [pc, #24]	; (80154c0 <tcp_output_fill_options+0x78>)
 80154a6:	4805      	ldr	r0, [pc, #20]	; (80154bc <tcp_output_fill_options+0x74>)
 80154a8:	f006 fcbe 	bl	801be28 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80154ac:	bf00      	nop
 80154ae:	3720      	adds	r7, #32
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	080209b4 	.word	0x080209b4
 80154b8:	08021140 	.word	0x08021140
 80154bc:	08020a08 	.word	0x08020a08
 80154c0:	08021038 	.word	0x08021038

080154c4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b08c      	sub	sp, #48	; 0x30
 80154c8:	af04      	add	r7, sp, #16
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
 80154d0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d106      	bne.n	80154e6 <tcp_output_control_segment+0x22>
 80154d8:	4b24      	ldr	r3, [pc, #144]	; (801556c <tcp_output_control_segment+0xa8>)
 80154da:	f240 7287 	movw	r2, #1927	; 0x787
 80154de:	4924      	ldr	r1, [pc, #144]	; (8015570 <tcp_output_control_segment+0xac>)
 80154e0:	4824      	ldr	r0, [pc, #144]	; (8015574 <tcp_output_control_segment+0xb0>)
 80154e2:	f006 fca1 	bl	801be28 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80154e6:	683a      	ldr	r2, [r7, #0]
 80154e8:	6879      	ldr	r1, [r7, #4]
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f7fe fa6a 	bl	80139c4 <tcp_route>
 80154f0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d102      	bne.n	80154fe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80154f8:	23fc      	movs	r3, #252	; 0xfc
 80154fa:	77fb      	strb	r3, [r7, #31]
 80154fc:	e02c      	b.n	8015558 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	685b      	ldr	r3, [r3, #4]
 8015502:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	891a      	ldrh	r2, [r3, #8]
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	9300      	str	r3, [sp, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2106      	movs	r1, #6
 8015510:	68b8      	ldr	r0, [r7, #8]
 8015512:	f7f8 f9d1 	bl	800d8b8 <ip_chksum_pseudo>
 8015516:	4603      	mov	r3, r0
 8015518:	461a      	mov	r2, r3
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d006      	beq.n	8015532 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	7adb      	ldrb	r3, [r3, #11]
 8015528:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	7a9b      	ldrb	r3, [r3, #10]
 801552e:	777b      	strb	r3, [r7, #29]
 8015530:	e003      	b.n	801553a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015532:	23ff      	movs	r3, #255	; 0xff
 8015534:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8015536:	2300      	movs	r3, #0
 8015538:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801553a:	7fba      	ldrb	r2, [r7, #30]
 801553c:	69bb      	ldr	r3, [r7, #24]
 801553e:	9302      	str	r3, [sp, #8]
 8015540:	2306      	movs	r3, #6
 8015542:	9301      	str	r3, [sp, #4]
 8015544:	7f7b      	ldrb	r3, [r7, #29]
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	4613      	mov	r3, r2
 801554a:	683a      	ldr	r2, [r7, #0]
 801554c:	6879      	ldr	r1, [r7, #4]
 801554e:	68b8      	ldr	r0, [r7, #8]
 8015550:	f004 fad2 	bl	8019af8 <ip4_output_if>
 8015554:	4603      	mov	r3, r0
 8015556:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015558:	68b8      	ldr	r0, [r7, #8]
 801555a:	f7f9 fd9d 	bl	800f098 <pbuf_free>
  return err;
 801555e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015562:	4618      	mov	r0, r3
 8015564:	3720      	adds	r7, #32
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}
 801556a:	bf00      	nop
 801556c:	080209b4 	.word	0x080209b4
 8015570:	08021168 	.word	0x08021168
 8015574:	08020a08 	.word	0x08020a08

08015578 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015578:	b590      	push	{r4, r7, lr}
 801557a:	b08b      	sub	sp, #44	; 0x2c
 801557c:	af04      	add	r7, sp, #16
 801557e:	60f8      	str	r0, [r7, #12]
 8015580:	60b9      	str	r1, [r7, #8]
 8015582:	607a      	str	r2, [r7, #4]
 8015584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d106      	bne.n	801559a <tcp_rst+0x22>
 801558c:	4b1f      	ldr	r3, [pc, #124]	; (801560c <tcp_rst+0x94>)
 801558e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8015592:	491f      	ldr	r1, [pc, #124]	; (8015610 <tcp_rst+0x98>)
 8015594:	481f      	ldr	r0, [pc, #124]	; (8015614 <tcp_rst+0x9c>)
 8015596:	f006 fc47 	bl	801be28 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559c:	2b00      	cmp	r3, #0
 801559e:	d106      	bne.n	80155ae <tcp_rst+0x36>
 80155a0:	4b1a      	ldr	r3, [pc, #104]	; (801560c <tcp_rst+0x94>)
 80155a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80155a6:	491c      	ldr	r1, [pc, #112]	; (8015618 <tcp_rst+0xa0>)
 80155a8:	481a      	ldr	r0, [pc, #104]	; (8015614 <tcp_rst+0x9c>)
 80155aa:	f006 fc3d 	bl	801be28 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80155ae:	2300      	movs	r3, #0
 80155b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80155b2:	f24a 032d 	movw	r3, #41005	; 0xa02d
 80155b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80155b8:	7dfb      	ldrb	r3, [r7, #23]
 80155ba:	b29c      	uxth	r4, r3
 80155bc:	68b8      	ldr	r0, [r7, #8]
 80155be:	f7f8 f85e 	bl	800d67e <lwip_htonl>
 80155c2:	4602      	mov	r2, r0
 80155c4:	8abb      	ldrh	r3, [r7, #20]
 80155c6:	9303      	str	r3, [sp, #12]
 80155c8:	2314      	movs	r3, #20
 80155ca:	9302      	str	r3, [sp, #8]
 80155cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80155d2:	9300      	str	r3, [sp, #0]
 80155d4:	4613      	mov	r3, r2
 80155d6:	2200      	movs	r2, #0
 80155d8:	4621      	mov	r1, r4
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f7ff fe84 	bl	80152e8 <tcp_output_alloc_header_common>
 80155e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80155e2:	693b      	ldr	r3, [r7, #16]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00c      	beq.n	8015602 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80155e8:	7dfb      	ldrb	r3, [r7, #23]
 80155ea:	2200      	movs	r2, #0
 80155ec:	6939      	ldr	r1, [r7, #16]
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	f7ff ff2a 	bl	8015448 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80155f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	6939      	ldr	r1, [r7, #16]
 80155fa:	68f8      	ldr	r0, [r7, #12]
 80155fc:	f7ff ff62 	bl	80154c4 <tcp_output_control_segment>
 8015600:	e000      	b.n	8015604 <tcp_rst+0x8c>
    return;
 8015602:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015604:	371c      	adds	r7, #28
 8015606:	46bd      	mov	sp, r7
 8015608:	bd90      	pop	{r4, r7, pc}
 801560a:	bf00      	nop
 801560c:	080209b4 	.word	0x080209b4
 8015610:	08021194 	.word	0x08021194
 8015614:	08020a08 	.word	0x08020a08
 8015618:	080211b0 	.word	0x080211b0

0801561c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801561c:	b590      	push	{r4, r7, lr}
 801561e:	b087      	sub	sp, #28
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015624:	2300      	movs	r3, #0
 8015626:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015628:	2300      	movs	r3, #0
 801562a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d106      	bne.n	8015640 <tcp_send_empty_ack+0x24>
 8015632:	4b28      	ldr	r3, [pc, #160]	; (80156d4 <tcp_send_empty_ack+0xb8>)
 8015634:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015638:	4927      	ldr	r1, [pc, #156]	; (80156d8 <tcp_send_empty_ack+0xbc>)
 801563a:	4828      	ldr	r0, [pc, #160]	; (80156dc <tcp_send_empty_ack+0xc0>)
 801563c:	f006 fbf4 	bl	801be28 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015640:	7dfb      	ldrb	r3, [r7, #23]
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	b2db      	uxtb	r3, r3
 8015646:	f003 0304 	and.w	r3, r3, #4
 801564a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801564c:	7d7b      	ldrb	r3, [r7, #21]
 801564e:	b29c      	uxth	r4, r3
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015654:	4618      	mov	r0, r3
 8015656:	f7f8 f812 	bl	800d67e <lwip_htonl>
 801565a:	4603      	mov	r3, r0
 801565c:	2200      	movs	r2, #0
 801565e:	4621      	mov	r1, r4
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f7ff feb3 	bl	80153cc <tcp_output_alloc_header>
 8015666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d109      	bne.n	8015682 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	8b5b      	ldrh	r3, [r3, #26]
 8015672:	f043 0303 	orr.w	r3, r3, #3
 8015676:	b29a      	uxth	r2, r3
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801567c:	f06f 0301 	mvn.w	r3, #1
 8015680:	e023      	b.n	80156ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015682:	7dbb      	ldrb	r3, [r7, #22]
 8015684:	7dfa      	ldrb	r2, [r7, #23]
 8015686:	6939      	ldr	r1, [r7, #16]
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	f7ff fedd 	bl	8015448 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801568e:	687a      	ldr	r2, [r7, #4]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	3304      	adds	r3, #4
 8015694:	6939      	ldr	r1, [r7, #16]
 8015696:	6878      	ldr	r0, [r7, #4]
 8015698:	f7ff ff14 	bl	80154c4 <tcp_output_control_segment>
 801569c:	4603      	mov	r3, r0
 801569e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80156a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d007      	beq.n	80156b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	8b5b      	ldrh	r3, [r3, #26]
 80156ac:	f043 0303 	orr.w	r3, r3, #3
 80156b0:	b29a      	uxth	r2, r3
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	835a      	strh	r2, [r3, #26]
 80156b6:	e006      	b.n	80156c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	8b5b      	ldrh	r3, [r3, #26]
 80156bc:	f023 0303 	bic.w	r3, r3, #3
 80156c0:	b29a      	uxth	r2, r3
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80156c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	371c      	adds	r7, #28
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd90      	pop	{r4, r7, pc}
 80156d2:	bf00      	nop
 80156d4:	080209b4 	.word	0x080209b4
 80156d8:	080211cc 	.word	0x080211cc
 80156dc:	08020a08 	.word	0x08020a08

080156e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80156e0:	b590      	push	{r4, r7, lr}
 80156e2:	b085      	sub	sp, #20
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80156e8:	2300      	movs	r3, #0
 80156ea:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d106      	bne.n	8015700 <tcp_keepalive+0x20>
 80156f2:	4b18      	ldr	r3, [pc, #96]	; (8015754 <tcp_keepalive+0x74>)
 80156f4:	f640 0224 	movw	r2, #2084	; 0x824
 80156f8:	4917      	ldr	r1, [pc, #92]	; (8015758 <tcp_keepalive+0x78>)
 80156fa:	4818      	ldr	r0, [pc, #96]	; (801575c <tcp_keepalive+0x7c>)
 80156fc:	f006 fb94 	bl	801be28 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015700:	7abb      	ldrb	r3, [r7, #10]
 8015702:	b29c      	uxth	r4, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015708:	3b01      	subs	r3, #1
 801570a:	4618      	mov	r0, r3
 801570c:	f7f7 ffb7 	bl	800d67e <lwip_htonl>
 8015710:	4603      	mov	r3, r0
 8015712:	2200      	movs	r2, #0
 8015714:	4621      	mov	r1, r4
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f7ff fe58 	bl	80153cc <tcp_output_alloc_header>
 801571c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d102      	bne.n	801572a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015724:	f04f 33ff 	mov.w	r3, #4294967295
 8015728:	e010      	b.n	801574c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801572a:	7abb      	ldrb	r3, [r7, #10]
 801572c:	2200      	movs	r2, #0
 801572e:	68f9      	ldr	r1, [r7, #12]
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f7ff fe89 	bl	8015448 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	3304      	adds	r3, #4
 801573c:	68f9      	ldr	r1, [r7, #12]
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7ff fec0 	bl	80154c4 <tcp_output_control_segment>
 8015744:	4603      	mov	r3, r0
 8015746:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015748:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801574c:	4618      	mov	r0, r3
 801574e:	3714      	adds	r7, #20
 8015750:	46bd      	mov	sp, r7
 8015752:	bd90      	pop	{r4, r7, pc}
 8015754:	080209b4 	.word	0x080209b4
 8015758:	080211ec 	.word	0x080211ec
 801575c:	08020a08 	.word	0x08020a08

08015760 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015760:	b590      	push	{r4, r7, lr}
 8015762:	b08b      	sub	sp, #44	; 0x2c
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015768:	2300      	movs	r3, #0
 801576a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d106      	bne.n	8015780 <tcp_zero_window_probe+0x20>
 8015772:	4b4d      	ldr	r3, [pc, #308]	; (80158a8 <tcp_zero_window_probe+0x148>)
 8015774:	f640 024f 	movw	r2, #2127	; 0x84f
 8015778:	494c      	ldr	r1, [pc, #304]	; (80158ac <tcp_zero_window_probe+0x14c>)
 801577a:	484d      	ldr	r0, [pc, #308]	; (80158b0 <tcp_zero_window_probe+0x150>)
 801577c:	f006 fb54 	bl	801be28 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015784:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 8015786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015788:	2b00      	cmp	r3, #0
 801578a:	d101      	bne.n	8015790 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801578c:	2300      	movs	r3, #0
 801578e:	e087      	b.n	80158a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015796:	2bff      	cmp	r3, #255	; 0xff
 8015798:	d007      	beq.n	80157aa <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80157a0:	3301      	adds	r3, #1
 80157a2:	b2da      	uxtb	r2, r3
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80157aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ac:	691b      	ldr	r3, [r3, #16]
 80157ae:	899b      	ldrh	r3, [r3, #12]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7f7 ff4e 	bl	800d654 <lwip_htons>
 80157b8:	4603      	mov	r3, r0
 80157ba:	b2db      	uxtb	r3, r3
 80157bc:	f003 0301 	and.w	r3, r3, #1
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d005      	beq.n	80157d0 <tcp_zero_window_probe+0x70>
 80157c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c6:	891b      	ldrh	r3, [r3, #8]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d101      	bne.n	80157d0 <tcp_zero_window_probe+0x70>
 80157cc:	2301      	movs	r3, #1
 80157ce:	e000      	b.n	80157d2 <tcp_zero_window_probe+0x72>
 80157d0:	2300      	movs	r3, #0
 80157d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80157d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157da:	2b00      	cmp	r3, #0
 80157dc:	bf0c      	ite	eq
 80157de:	2301      	moveq	r3, #1
 80157e0:	2300      	movne	r3, #0
 80157e2:	b2db      	uxtb	r3, r3
 80157e4:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80157e6:	7cfb      	ldrb	r3, [r7, #19]
 80157e8:	b299      	uxth	r1, r3
 80157ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ec:	691b      	ldr	r3, [r3, #16]
 80157ee:	685b      	ldr	r3, [r3, #4]
 80157f0:	8c3a      	ldrh	r2, [r7, #32]
 80157f2:	6878      	ldr	r0, [r7, #4]
 80157f4:	f7ff fdea 	bl	80153cc <tcp_output_alloc_header>
 80157f8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d102      	bne.n	8015806 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015800:	f04f 33ff 	mov.w	r3, #4294967295
 8015804:	e04c      	b.n	80158a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801580c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015810:	2b00      	cmp	r3, #0
 8015812:	d011      	beq.n	8015838 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015814:	69bb      	ldr	r3, [r7, #24]
 8015816:	899b      	ldrh	r3, [r3, #12]
 8015818:	b29b      	uxth	r3, r3
 801581a:	b21b      	sxth	r3, r3
 801581c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015820:	b21c      	sxth	r4, r3
 8015822:	2011      	movs	r0, #17
 8015824:	f7f7 ff16 	bl	800d654 <lwip_htons>
 8015828:	4603      	mov	r3, r0
 801582a:	b21b      	sxth	r3, r3
 801582c:	4323      	orrs	r3, r4
 801582e:	b21b      	sxth	r3, r3
 8015830:	b29a      	uxth	r2, r3
 8015832:	69bb      	ldr	r3, [r7, #24]
 8015834:	819a      	strh	r2, [r3, #12]
 8015836:	e010      	b.n	801585a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	685b      	ldr	r3, [r3, #4]
 801583c:	3314      	adds	r3, #20
 801583e:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015842:	6858      	ldr	r0, [r3, #4]
 8015844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	891a      	ldrh	r2, [r3, #8]
 801584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584c:	891b      	ldrh	r3, [r3, #8]
 801584e:	1ad3      	subs	r3, r2, r3
 8015850:	b29b      	uxth	r3, r3
 8015852:	2201      	movs	r2, #1
 8015854:	6979      	ldr	r1, [r7, #20]
 8015856:	f7f9 fe25 	bl	800f4a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	4618      	mov	r0, r3
 8015862:	f7f7 ff0c 	bl	800d67e <lwip_htonl>
 8015866:	4603      	mov	r3, r0
 8015868:	3301      	adds	r3, #1
 801586a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	1ad3      	subs	r3, r2, r3
 8015874:	2b00      	cmp	r3, #0
 8015876:	da02      	bge.n	801587e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	68fa      	ldr	r2, [r7, #12]
 801587c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801587e:	7cfb      	ldrb	r3, [r7, #19]
 8015880:	2200      	movs	r2, #0
 8015882:	69f9      	ldr	r1, [r7, #28]
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f7ff fddf 	bl	8015448 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	3304      	adds	r3, #4
 8015890:	69f9      	ldr	r1, [r7, #28]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7ff fe16 	bl	80154c4 <tcp_output_control_segment>
 8015898:	4603      	mov	r3, r0
 801589a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801589c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80158a0:	4618      	mov	r0, r3
 80158a2:	372c      	adds	r7, #44	; 0x2c
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd90      	pop	{r4, r7, pc}
 80158a8:	080209b4 	.word	0x080209b4
 80158ac:	08021208 	.word	0x08021208
 80158b0:	08020a08 	.word	0x08020a08

080158b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80158bc:	f7fa f874 	bl	800f9a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80158c0:	4b0a      	ldr	r3, [pc, #40]	; (80158ec <tcpip_tcp_timer+0x38>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d103      	bne.n	80158d0 <tcpip_tcp_timer+0x1c>
 80158c8:	4b09      	ldr	r3, [pc, #36]	; (80158f0 <tcpip_tcp_timer+0x3c>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d005      	beq.n	80158dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80158d0:	2200      	movs	r2, #0
 80158d2:	4908      	ldr	r1, [pc, #32]	; (80158f4 <tcpip_tcp_timer+0x40>)
 80158d4:	20fa      	movs	r0, #250	; 0xfa
 80158d6:	f000 f8f3 	bl	8015ac0 <sys_timeout>
 80158da:	e003      	b.n	80158e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80158dc:	4b06      	ldr	r3, [pc, #24]	; (80158f8 <tcpip_tcp_timer+0x44>)
 80158de:	2200      	movs	r2, #0
 80158e0:	601a      	str	r2, [r3, #0]
  }
}
 80158e2:	bf00      	nop
 80158e4:	bf00      	nop
 80158e6:	3708      	adds	r7, #8
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}
 80158ec:	20013ce4 	.word	0x20013ce4
 80158f0:	20013ce8 	.word	0x20013ce8
 80158f4:	080158b5 	.word	0x080158b5
 80158f8:	20013d34 	.word	0x20013d34

080158fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015900:	4b0a      	ldr	r3, [pc, #40]	; (801592c <tcp_timer_needed+0x30>)
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d10f      	bne.n	8015928 <tcp_timer_needed+0x2c>
 8015908:	4b09      	ldr	r3, [pc, #36]	; (8015930 <tcp_timer_needed+0x34>)
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d103      	bne.n	8015918 <tcp_timer_needed+0x1c>
 8015910:	4b08      	ldr	r3, [pc, #32]	; (8015934 <tcp_timer_needed+0x38>)
 8015912:	681b      	ldr	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d007      	beq.n	8015928 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015918:	4b04      	ldr	r3, [pc, #16]	; (801592c <tcp_timer_needed+0x30>)
 801591a:	2201      	movs	r2, #1
 801591c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801591e:	2200      	movs	r2, #0
 8015920:	4905      	ldr	r1, [pc, #20]	; (8015938 <tcp_timer_needed+0x3c>)
 8015922:	20fa      	movs	r0, #250	; 0xfa
 8015924:	f000 f8cc 	bl	8015ac0 <sys_timeout>
  }
}
 8015928:	bf00      	nop
 801592a:	bd80      	pop	{r7, pc}
 801592c:	20013d34 	.word	0x20013d34
 8015930:	20013ce4 	.word	0x20013ce4
 8015934:	20013ce8 	.word	0x20013ce8
 8015938:	080158b5 	.word	0x080158b5

0801593c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801593c:	b580      	push	{r7, lr}
 801593e:	b086      	sub	sp, #24
 8015940:	af00      	add	r7, sp, #0
 8015942:	60f8      	str	r0, [r7, #12]
 8015944:	60b9      	str	r1, [r7, #8]
 8015946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015948:	200a      	movs	r0, #10
 801594a:	f7f8 fcb1 	bl	800e2b0 <memp_malloc>
 801594e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d109      	bne.n	801596a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015956:	693b      	ldr	r3, [r7, #16]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d151      	bne.n	8015a00 <sys_timeout_abs+0xc4>
 801595c:	4b2a      	ldr	r3, [pc, #168]	; (8015a08 <sys_timeout_abs+0xcc>)
 801595e:	22be      	movs	r2, #190	; 0xbe
 8015960:	492a      	ldr	r1, [pc, #168]	; (8015a0c <sys_timeout_abs+0xd0>)
 8015962:	482b      	ldr	r0, [pc, #172]	; (8015a10 <sys_timeout_abs+0xd4>)
 8015964:	f006 fa60 	bl	801be28 <iprintf>
    return;
 8015968:	e04a      	b.n	8015a00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801596a:	693b      	ldr	r3, [r7, #16]
 801596c:	2200      	movs	r2, #0
 801596e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	687a      	ldr	r2, [r7, #4]
 801597a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015982:	4b24      	ldr	r3, [pc, #144]	; (8015a14 <sys_timeout_abs+0xd8>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d103      	bne.n	8015992 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801598a:	4a22      	ldr	r2, [pc, #136]	; (8015a14 <sys_timeout_abs+0xd8>)
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	6013      	str	r3, [r2, #0]
    return;
 8015990:	e037      	b.n	8015a02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8015992:	693b      	ldr	r3, [r7, #16]
 8015994:	685a      	ldr	r2, [r3, #4]
 8015996:	4b1f      	ldr	r3, [pc, #124]	; (8015a14 <sys_timeout_abs+0xd8>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	685b      	ldr	r3, [r3, #4]
 801599c:	1ad3      	subs	r3, r2, r3
 801599e:	0fdb      	lsrs	r3, r3, #31
 80159a0:	f003 0301 	and.w	r3, r3, #1
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d007      	beq.n	80159ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80159aa:	4b1a      	ldr	r3, [pc, #104]	; (8015a14 <sys_timeout_abs+0xd8>)
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80159b2:	4a18      	ldr	r2, [pc, #96]	; (8015a14 <sys_timeout_abs+0xd8>)
 80159b4:	693b      	ldr	r3, [r7, #16]
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	e023      	b.n	8015a02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80159ba:	4b16      	ldr	r3, [pc, #88]	; (8015a14 <sys_timeout_abs+0xd8>)
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	617b      	str	r3, [r7, #20]
 80159c0:	e01a      	b.n	80159f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00b      	beq.n	80159e2 <sys_timeout_abs+0xa6>
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	685a      	ldr	r2, [r3, #4]
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	1ad3      	subs	r3, r2, r3
 80159d6:	0fdb      	lsrs	r3, r3, #31
 80159d8:	f003 0301 	and.w	r3, r3, #1
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d007      	beq.n	80159f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	681a      	ldr	r2, [r3, #0]
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	693a      	ldr	r2, [r7, #16]
 80159ee:	601a      	str	r2, [r3, #0]
        break;
 80159f0:	e007      	b.n	8015a02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	617b      	str	r3, [r7, #20]
 80159f8:	697b      	ldr	r3, [r7, #20]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d1e1      	bne.n	80159c2 <sys_timeout_abs+0x86>
 80159fe:	e000      	b.n	8015a02 <sys_timeout_abs+0xc6>
    return;
 8015a00:	bf00      	nop
      }
    }
  }
}
 8015a02:	3718      	adds	r7, #24
 8015a04:	46bd      	mov	sp, r7
 8015a06:	bd80      	pop	{r7, pc}
 8015a08:	0802122c 	.word	0x0802122c
 8015a0c:	08021260 	.word	0x08021260
 8015a10:	080212a0 	.word	0x080212a0
 8015a14:	20013d2c 	.word	0x20013d2c

08015a18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	4798      	blx	r3

  now = sys_now();
 8015a2a:	f7ed fb39 	bl	80030a0 <sys_now>
 8015a2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	4b0f      	ldr	r3, [pc, #60]	; (8015a74 <lwip_cyclic_timer+0x5c>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	4413      	add	r3, r2
 8015a3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015a3c:	68fa      	ldr	r2, [r7, #12]
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	1ad3      	subs	r3, r2, r3
 8015a42:	0fdb      	lsrs	r3, r3, #31
 8015a44:	f003 0301 	and.w	r3, r3, #1
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d009      	beq.n	8015a62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	693b      	ldr	r3, [r7, #16]
 8015a54:	4413      	add	r3, r2
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	4907      	ldr	r1, [pc, #28]	; (8015a78 <lwip_cyclic_timer+0x60>)
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7ff ff6e 	bl	801593c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015a60:	e004      	b.n	8015a6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015a62:	687a      	ldr	r2, [r7, #4]
 8015a64:	4904      	ldr	r1, [pc, #16]	; (8015a78 <lwip_cyclic_timer+0x60>)
 8015a66:	68f8      	ldr	r0, [r7, #12]
 8015a68:	f7ff ff68 	bl	801593c <sys_timeout_abs>
}
 8015a6c:	bf00      	nop
 8015a6e:	3718      	adds	r7, #24
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	20013d30 	.word	0x20013d30
 8015a78:	08015a19 	.word	0x08015a19

08015a7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015a82:	2301      	movs	r3, #1
 8015a84:	607b      	str	r3, [r7, #4]
 8015a86:	e00e      	b.n	8015aa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015a88:	4a0b      	ldr	r2, [pc, #44]	; (8015ab8 <sys_timeouts_init+0x3c>)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	00db      	lsls	r3, r3, #3
 8015a94:	4a08      	ldr	r2, [pc, #32]	; (8015ab8 <sys_timeouts_init+0x3c>)
 8015a96:	4413      	add	r3, r2
 8015a98:	461a      	mov	r2, r3
 8015a9a:	4908      	ldr	r1, [pc, #32]	; (8015abc <sys_timeouts_init+0x40>)
 8015a9c:	f000 f810 	bl	8015ac0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	607b      	str	r3, [r7, #4]
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2b04      	cmp	r3, #4
 8015aaa:	d9ed      	bls.n	8015a88 <sys_timeouts_init+0xc>
  }
}
 8015aac:	bf00      	nop
 8015aae:	bf00      	nop
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	0806df18 	.word	0x0806df18
 8015abc:	08015a19 	.word	0x08015a19

08015ac0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b086      	sub	sp, #24
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	60f8      	str	r0, [r7, #12]
 8015ac8:	60b9      	str	r1, [r7, #8]
 8015aca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ad2:	d306      	bcc.n	8015ae2 <sys_timeout+0x22>
 8015ad4:	4b0a      	ldr	r3, [pc, #40]	; (8015b00 <sys_timeout+0x40>)
 8015ad6:	f240 1229 	movw	r2, #297	; 0x129
 8015ada:	490a      	ldr	r1, [pc, #40]	; (8015b04 <sys_timeout+0x44>)
 8015adc:	480a      	ldr	r0, [pc, #40]	; (8015b08 <sys_timeout+0x48>)
 8015ade:	f006 f9a3 	bl	801be28 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015ae2:	f7ed fadd 	bl	80030a0 <sys_now>
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	4413      	add	r3, r2
 8015aec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015aee:	687a      	ldr	r2, [r7, #4]
 8015af0:	68b9      	ldr	r1, [r7, #8]
 8015af2:	6978      	ldr	r0, [r7, #20]
 8015af4:	f7ff ff22 	bl	801593c <sys_timeout_abs>
#endif
}
 8015af8:	bf00      	nop
 8015afa:	3718      	adds	r7, #24
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	0802122c 	.word	0x0802122c
 8015b04:	080212c8 	.word	0x080212c8
 8015b08:	080212a0 	.word	0x080212a0

08015b0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015b0c:	b580      	push	{r7, lr}
 8015b0e:	b084      	sub	sp, #16
 8015b10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015b12:	f7ed fac5 	bl	80030a0 <sys_now>
 8015b16:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015b18:	4b17      	ldr	r3, [pc, #92]	; (8015b78 <sys_check_timeouts+0x6c>)
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d022      	beq.n	8015b6a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	68fa      	ldr	r2, [r7, #12]
 8015b2a:	1ad3      	subs	r3, r2, r3
 8015b2c:	0fdb      	lsrs	r3, r3, #31
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	b2db      	uxtb	r3, r3
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d11a      	bne.n	8015b6e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	681b      	ldr	r3, [r3, #0]
 8015b3c:	4a0e      	ldr	r2, [pc, #56]	; (8015b78 <sys_check_timeouts+0x6c>)
 8015b3e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	689b      	ldr	r3, [r3, #8]
 8015b44:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015b46:	68bb      	ldr	r3, [r7, #8]
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	4a0a      	ldr	r2, [pc, #40]	; (8015b7c <sys_check_timeouts+0x70>)
 8015b52:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015b54:	68b9      	ldr	r1, [r7, #8]
 8015b56:	200a      	movs	r0, #10
 8015b58:	f7f8 fbfc 	bl	800e354 <memp_free>
    if (handler != NULL) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d0da      	beq.n	8015b18 <sys_check_timeouts+0xc>
      handler(arg);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6838      	ldr	r0, [r7, #0]
 8015b66:	4798      	blx	r3
  do {
 8015b68:	e7d6      	b.n	8015b18 <sys_check_timeouts+0xc>
      return;
 8015b6a:	bf00      	nop
 8015b6c:	e000      	b.n	8015b70 <sys_check_timeouts+0x64>
      return;
 8015b6e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015b70:	3710      	adds	r7, #16
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	20013d2c 	.word	0x20013d2c
 8015b7c:	20013d30 	.word	0x20013d30

08015b80 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015b86:	4b16      	ldr	r3, [pc, #88]	; (8015be0 <sys_timeouts_sleeptime+0x60>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d102      	bne.n	8015b94 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b92:	e020      	b.n	8015bd6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015b94:	f7ed fa84 	bl	80030a0 <sys_now>
 8015b98:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015b9a:	4b11      	ldr	r3, [pc, #68]	; (8015be0 <sys_timeouts_sleeptime+0x60>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	685a      	ldr	r2, [r3, #4]
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	0fdb      	lsrs	r3, r3, #31
 8015ba6:	f003 0301 	and.w	r3, r3, #1
 8015baa:	b2db      	uxtb	r3, r3
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d001      	beq.n	8015bb4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	e010      	b.n	8015bd6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015bb4:	4b0a      	ldr	r3, [pc, #40]	; (8015be0 <sys_timeouts_sleeptime+0x60>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	685a      	ldr	r2, [r3, #4]
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	1ad3      	subs	r3, r2, r3
 8015bbe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	da06      	bge.n	8015bd4 <sys_timeouts_sleeptime+0x54>
 8015bc6:	4b07      	ldr	r3, [pc, #28]	; (8015be4 <sys_timeouts_sleeptime+0x64>)
 8015bc8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015bcc:	4906      	ldr	r1, [pc, #24]	; (8015be8 <sys_timeouts_sleeptime+0x68>)
 8015bce:	4807      	ldr	r0, [pc, #28]	; (8015bec <sys_timeouts_sleeptime+0x6c>)
 8015bd0:	f006 f92a 	bl	801be28 <iprintf>
    return ret;
 8015bd4:	683b      	ldr	r3, [r7, #0]
  }
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3708      	adds	r7, #8
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	20013d2c 	.word	0x20013d2c
 8015be4:	0802122c 	.word	0x0802122c
 8015be8:	08021300 	.word	0x08021300
 8015bec:	080212a0 	.word	0x080212a0

08015bf0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015bf4:	f005 fb36 	bl	801b264 <rand>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	b29b      	uxth	r3, r3
 8015bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	4b01      	ldr	r3, [pc, #4]	; (8015c10 <udp_init+0x20>)
 8015c0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015c0c:	bf00      	nop
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	200000c0 	.word	0x200000c0

08015c14 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015c14:	b480      	push	{r7}
 8015c16:	b083      	sub	sp, #12
 8015c18:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015c1e:	4b17      	ldr	r3, [pc, #92]	; (8015c7c <udp_new_port+0x68>)
 8015c20:	881b      	ldrh	r3, [r3, #0]
 8015c22:	1c5a      	adds	r2, r3, #1
 8015c24:	b291      	uxth	r1, r2
 8015c26:	4a15      	ldr	r2, [pc, #84]	; (8015c7c <udp_new_port+0x68>)
 8015c28:	8011      	strh	r1, [r2, #0]
 8015c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c2e:	4293      	cmp	r3, r2
 8015c30:	d103      	bne.n	8015c3a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015c32:	4b12      	ldr	r3, [pc, #72]	; (8015c7c <udp_new_port+0x68>)
 8015c34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015c38:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c3a:	4b11      	ldr	r3, [pc, #68]	; (8015c80 <udp_new_port+0x6c>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	603b      	str	r3, [r7, #0]
 8015c40:	e011      	b.n	8015c66 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	8a5a      	ldrh	r2, [r3, #18]
 8015c46:	4b0d      	ldr	r3, [pc, #52]	; (8015c7c <udp_new_port+0x68>)
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d108      	bne.n	8015c60 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015c4e:	88fb      	ldrh	r3, [r7, #6]
 8015c50:	3301      	adds	r3, #1
 8015c52:	80fb      	strh	r3, [r7, #6]
 8015c54:	88fb      	ldrh	r3, [r7, #6]
 8015c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c5a:	d3e0      	bcc.n	8015c1e <udp_new_port+0xa>
        return 0;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	e007      	b.n	8015c70 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	603b      	str	r3, [r7, #0]
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d1ea      	bne.n	8015c42 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015c6c:	4b03      	ldr	r3, [pc, #12]	; (8015c7c <udp_new_port+0x68>)
 8015c6e:	881b      	ldrh	r3, [r3, #0]
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	370c      	adds	r7, #12
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr
 8015c7c:	200000c0 	.word	0x200000c0
 8015c80:	20013d38 	.word	0x20013d38

08015c84 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b084      	sub	sp, #16
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	60f8      	str	r0, [r7, #12]
 8015c8c:	60b9      	str	r1, [r7, #8]
 8015c8e:	4613      	mov	r3, r2
 8015c90:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d105      	bne.n	8015ca4 <udp_input_local_match+0x20>
 8015c98:	4b27      	ldr	r3, [pc, #156]	; (8015d38 <udp_input_local_match+0xb4>)
 8015c9a:	2287      	movs	r2, #135	; 0x87
 8015c9c:	4927      	ldr	r1, [pc, #156]	; (8015d3c <udp_input_local_match+0xb8>)
 8015c9e:	4828      	ldr	r0, [pc, #160]	; (8015d40 <udp_input_local_match+0xbc>)
 8015ca0:	f006 f8c2 	bl	801be28 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d105      	bne.n	8015cb6 <udp_input_local_match+0x32>
 8015caa:	4b23      	ldr	r3, [pc, #140]	; (8015d38 <udp_input_local_match+0xb4>)
 8015cac:	2288      	movs	r2, #136	; 0x88
 8015cae:	4925      	ldr	r1, [pc, #148]	; (8015d44 <udp_input_local_match+0xc0>)
 8015cb0:	4823      	ldr	r0, [pc, #140]	; (8015d40 <udp_input_local_match+0xbc>)
 8015cb2:	f006 f8b9 	bl	801be28 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	7a1b      	ldrb	r3, [r3, #8]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d00b      	beq.n	8015cd6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	7a1a      	ldrb	r2, [r3, #8]
 8015cc2:	4b21      	ldr	r3, [pc, #132]	; (8015d48 <udp_input_local_match+0xc4>)
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015cca:	3301      	adds	r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cce:	429a      	cmp	r2, r3
 8015cd0:	d001      	beq.n	8015cd6 <udp_input_local_match+0x52>
    return 0;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	e02b      	b.n	8015d2e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015cd6:	79fb      	ldrb	r3, [r7, #7]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d018      	beq.n	8015d0e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d013      	beq.n	8015d0a <udp_input_local_match+0x86>
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d00f      	beq.n	8015d0a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015cea:	4b17      	ldr	r3, [pc, #92]	; (8015d48 <udp_input_local_match+0xc4>)
 8015cec:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cf2:	d00a      	beq.n	8015d0a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	4b13      	ldr	r3, [pc, #76]	; (8015d48 <udp_input_local_match+0xc4>)
 8015cfa:	695b      	ldr	r3, [r3, #20]
 8015cfc:	405a      	eors	r2, r3
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	3308      	adds	r3, #8
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d110      	bne.n	8015d2c <udp_input_local_match+0xa8>
          return 1;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	e00f      	b.n	8015d2e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d009      	beq.n	8015d28 <udp_input_local_match+0xa4>
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d005      	beq.n	8015d28 <udp_input_local_match+0xa4>
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	4b09      	ldr	r3, [pc, #36]	; (8015d48 <udp_input_local_match+0xc4>)
 8015d22:	695b      	ldr	r3, [r3, #20]
 8015d24:	429a      	cmp	r2, r3
 8015d26:	d101      	bne.n	8015d2c <udp_input_local_match+0xa8>
        return 1;
 8015d28:	2301      	movs	r3, #1
 8015d2a:	e000      	b.n	8015d2e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015d2c:	2300      	movs	r3, #0
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	08021314 	.word	0x08021314
 8015d3c:	08021344 	.word	0x08021344
 8015d40:	08021368 	.word	0x08021368
 8015d44:	08021390 	.word	0x08021390
 8015d48:	2000a264 	.word	0x2000a264

08015d4c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015d4c:	b590      	push	{r4, r7, lr}
 8015d4e:	b08d      	sub	sp, #52	; 0x34
 8015d50:	af02      	add	r7, sp, #8
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015d56:	2300      	movs	r3, #0
 8015d58:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d105      	bne.n	8015d6c <udp_input+0x20>
 8015d60:	4b87      	ldr	r3, [pc, #540]	; (8015f80 <udp_input+0x234>)
 8015d62:	22cf      	movs	r2, #207	; 0xcf
 8015d64:	4987      	ldr	r1, [pc, #540]	; (8015f84 <udp_input+0x238>)
 8015d66:	4888      	ldr	r0, [pc, #544]	; (8015f88 <udp_input+0x23c>)
 8015d68:	f006 f85e 	bl	801be28 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d105      	bne.n	8015d7e <udp_input+0x32>
 8015d72:	4b83      	ldr	r3, [pc, #524]	; (8015f80 <udp_input+0x234>)
 8015d74:	22d0      	movs	r2, #208	; 0xd0
 8015d76:	4985      	ldr	r1, [pc, #532]	; (8015f8c <udp_input+0x240>)
 8015d78:	4883      	ldr	r0, [pc, #524]	; (8015f88 <udp_input+0x23c>)
 8015d7a:	f006 f855 	bl	801be28 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	895b      	ldrh	r3, [r3, #10]
 8015d82:	2b07      	cmp	r3, #7
 8015d84:	d803      	bhi.n	8015d8e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f7f9 f986 	bl	800f098 <pbuf_free>
    goto end;
 8015d8c:	e0f0      	b.n	8015f70 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	685b      	ldr	r3, [r3, #4]
 8015d92:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015d94:	4b7e      	ldr	r3, [pc, #504]	; (8015f90 <udp_input+0x244>)
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	4a7d      	ldr	r2, [pc, #500]	; (8015f90 <udp_input+0x244>)
 8015d9a:	6812      	ldr	r2, [r2, #0]
 8015d9c:	4611      	mov	r1, r2
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f003 ffe8 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8015da4:	4603      	mov	r3, r0
 8015da6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	881b      	ldrh	r3, [r3, #0]
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7f7 fc50 	bl	800d654 <lwip_htons>
 8015db4:	4603      	mov	r3, r0
 8015db6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	885b      	ldrh	r3, [r3, #2]
 8015dbc:	b29b      	uxth	r3, r3
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	f7f7 fc48 	bl	800d654 <lwip_htons>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 8015dcc:	2300      	movs	r3, #0
 8015dce:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015dd4:	4b6f      	ldr	r3, [pc, #444]	; (8015f94 <udp_input+0x248>)
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	61fb      	str	r3, [r7, #28]
 8015dda:	e054      	b.n	8015e86 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015ddc:	69fb      	ldr	r3, [r7, #28]
 8015dde:	8a5b      	ldrh	r3, [r3, #18]
 8015de0:	89fa      	ldrh	r2, [r7, #14]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	d14a      	bne.n	8015e7c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015de6:	7cfb      	ldrb	r3, [r7, #19]
 8015de8:	461a      	mov	r2, r3
 8015dea:	6839      	ldr	r1, [r7, #0]
 8015dec:	69f8      	ldr	r0, [r7, #28]
 8015dee:	f7ff ff49 	bl	8015c84 <udp_input_local_match>
 8015df2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d041      	beq.n	8015e7c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015df8:	69fb      	ldr	r3, [r7, #28]
 8015dfa:	7c1b      	ldrb	r3, [r3, #16]
 8015dfc:	f003 0304 	and.w	r3, r3, #4
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d11d      	bne.n	8015e40 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d102      	bne.n	8015e10 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015e0a:	69fb      	ldr	r3, [r7, #28]
 8015e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e0e:	e017      	b.n	8015e40 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015e10:	7cfb      	ldrb	r3, [r7, #19]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d014      	beq.n	8015e40 <udp_input+0xf4>
 8015e16:	4b5e      	ldr	r3, [pc, #376]	; (8015f90 <udp_input+0x244>)
 8015e18:	695b      	ldr	r3, [r3, #20]
 8015e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e1e:	d10f      	bne.n	8015e40 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e22:	681a      	ldr	r2, [r3, #0]
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	3304      	adds	r3, #4
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d008      	beq.n	8015e40 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	681a      	ldr	r2, [r3, #0]
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	3304      	adds	r3, #4
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d101      	bne.n	8015e40 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015e3c:	69fb      	ldr	r3, [r7, #28]
 8015e3e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015e40:	69fb      	ldr	r3, [r7, #28]
 8015e42:	8a9b      	ldrh	r3, [r3, #20]
 8015e44:	8a3a      	ldrh	r2, [r7, #16]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d118      	bne.n	8015e7c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d005      	beq.n	8015e5e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015e52:	69fb      	ldr	r3, [r7, #28]
 8015e54:	685a      	ldr	r2, [r3, #4]
 8015e56:	4b4e      	ldr	r3, [pc, #312]	; (8015f90 <udp_input+0x244>)
 8015e58:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d10e      	bne.n	8015e7c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015e5e:	6a3b      	ldr	r3, [r7, #32]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d014      	beq.n	8015e8e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015e64:	69fb      	ldr	r3, [r7, #28]
 8015e66:	68da      	ldr	r2, [r3, #12]
 8015e68:	6a3b      	ldr	r3, [r7, #32]
 8015e6a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015e6c:	4b49      	ldr	r3, [pc, #292]	; (8015f94 <udp_input+0x248>)
 8015e6e:	681a      	ldr	r2, [r3, #0]
 8015e70:	69fb      	ldr	r3, [r7, #28]
 8015e72:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015e74:	4a47      	ldr	r2, [pc, #284]	; (8015f94 <udp_input+0x248>)
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015e7a:	e008      	b.n	8015e8e <udp_input+0x142>
      }
    }

    prev = pcb;
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	61fb      	str	r3, [r7, #28]
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d1a7      	bne.n	8015ddc <udp_input+0x90>
 8015e8c:	e000      	b.n	8015e90 <udp_input+0x144>
        break;
 8015e8e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015e90:	69fb      	ldr	r3, [r7, #28]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d101      	bne.n	8015e9a <udp_input+0x14e>
    pcb = uncon_pcb;
 8015e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e98:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d002      	beq.n	8015ea6 <udp_input+0x15a>
    for_us = 1;
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	76fb      	strb	r3, [r7, #27]
 8015ea4:	e00a      	b.n	8015ebc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	3304      	adds	r3, #4
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	4b38      	ldr	r3, [pc, #224]	; (8015f90 <udp_input+0x244>)
 8015eae:	695b      	ldr	r3, [r3, #20]
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	bf0c      	ite	eq
 8015eb4:	2301      	moveq	r3, #1
 8015eb6:	2300      	movne	r3, #0
 8015eb8:	b2db      	uxtb	r3, r3
 8015eba:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015ebc:	7efb      	ldrb	r3, [r7, #27]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d052      	beq.n	8015f68 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	88db      	ldrh	r3, [r3, #6]
 8015ec6:	b29b      	uxth	r3, r3
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d00b      	beq.n	8015ee4 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	891a      	ldrh	r2, [r3, #8]
 8015ed0:	4b31      	ldr	r3, [pc, #196]	; (8015f98 <udp_input+0x24c>)
 8015ed2:	9300      	str	r3, [sp, #0]
 8015ed4:	4b31      	ldr	r3, [pc, #196]	; (8015f9c <udp_input+0x250>)
 8015ed6:	2111      	movs	r1, #17
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f7f7 fced 	bl	800d8b8 <ip_chksum_pseudo>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d146      	bne.n	8015f72 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015ee4:	2108      	movs	r1, #8
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f7f9 f850 	bl	800ef8c <pbuf_remove_header>
 8015eec:	4603      	mov	r3, r0
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d00a      	beq.n	8015f08 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015ef2:	4b23      	ldr	r3, [pc, #140]	; (8015f80 <udp_input+0x234>)
 8015ef4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015ef8:	4929      	ldr	r1, [pc, #164]	; (8015fa0 <udp_input+0x254>)
 8015efa:	4823      	ldr	r0, [pc, #140]	; (8015f88 <udp_input+0x23c>)
 8015efc:	f005 ff94 	bl	801be28 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f7f9 f8c9 	bl	800f098 <pbuf_free>
      goto end;
 8015f06:	e033      	b.n	8015f70 <udp_input+0x224>
    }

    if (pcb != NULL) {
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d012      	beq.n	8015f34 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	699b      	ldr	r3, [r3, #24]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d00a      	beq.n	8015f2c <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015f16:	69fb      	ldr	r3, [r7, #28]
 8015f18:	699c      	ldr	r4, [r3, #24]
 8015f1a:	69fb      	ldr	r3, [r7, #28]
 8015f1c:	69d8      	ldr	r0, [r3, #28]
 8015f1e:	8a3b      	ldrh	r3, [r7, #16]
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	4b1e      	ldr	r3, [pc, #120]	; (8015f9c <udp_input+0x250>)
 8015f24:	687a      	ldr	r2, [r7, #4]
 8015f26:	69f9      	ldr	r1, [r7, #28]
 8015f28:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015f2a:	e026      	b.n	8015f7a <udp_input+0x22e>
        pbuf_free(p);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7f9 f8b3 	bl	800f098 <pbuf_free>
        goto end;
 8015f32:	e01d      	b.n	8015f70 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015f34:	7cfb      	ldrb	r3, [r7, #19]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d112      	bne.n	8015f60 <udp_input+0x214>
 8015f3a:	4b15      	ldr	r3, [pc, #84]	; (8015f90 <udp_input+0x244>)
 8015f3c:	695b      	ldr	r3, [r3, #20]
 8015f3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f42:	2be0      	cmp	r3, #224	; 0xe0
 8015f44:	d00c      	beq.n	8015f60 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015f46:	4b12      	ldr	r3, [pc, #72]	; (8015f90 <udp_input+0x244>)
 8015f48:	899b      	ldrh	r3, [r3, #12]
 8015f4a:	3308      	adds	r3, #8
 8015f4c:	b29b      	uxth	r3, r3
 8015f4e:	b21b      	sxth	r3, r3
 8015f50:	4619      	mov	r1, r3
 8015f52:	6878      	ldr	r0, [r7, #4]
 8015f54:	f7f9 f88d 	bl	800f072 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015f58:	2103      	movs	r1, #3
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f003 fb50 	bl	8019600 <icmp_dest_unreach>
      pbuf_free(p);
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f7f9 f899 	bl	800f098 <pbuf_free>
  return;
 8015f66:	e008      	b.n	8015f7a <udp_input+0x22e>
    pbuf_free(p);
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f7f9 f895 	bl	800f098 <pbuf_free>
  return;
 8015f6e:	e004      	b.n	8015f7a <udp_input+0x22e>
 8015f70:	e003      	b.n	8015f7a <udp_input+0x22e>
            goto chkerr;
 8015f72:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7f9 f88f 	bl	800f098 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015f7a:	372c      	adds	r7, #44	; 0x2c
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	bd90      	pop	{r4, r7, pc}
 8015f80:	08021314 	.word	0x08021314
 8015f84:	080213b8 	.word	0x080213b8
 8015f88:	08021368 	.word	0x08021368
 8015f8c:	080213d0 	.word	0x080213d0
 8015f90:	2000a264 	.word	0x2000a264
 8015f94:	20013d38 	.word	0x20013d38
 8015f98:	2000a278 	.word	0x2000a278
 8015f9c:	2000a274 	.word	0x2000a274
 8015fa0:	080213ec 	.word	0x080213ec

08015fa4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b088      	sub	sp, #32
 8015fa8:	af02      	add	r7, sp, #8
 8015faa:	60f8      	str	r0, [r7, #12]
 8015fac:	60b9      	str	r1, [r7, #8]
 8015fae:	607a      	str	r2, [r7, #4]
 8015fb0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d109      	bne.n	8015fcc <udp_sendto+0x28>
 8015fb8:	4b23      	ldr	r3, [pc, #140]	; (8016048 <udp_sendto+0xa4>)
 8015fba:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015fbe:	4923      	ldr	r1, [pc, #140]	; (801604c <udp_sendto+0xa8>)
 8015fc0:	4823      	ldr	r0, [pc, #140]	; (8016050 <udp_sendto+0xac>)
 8015fc2:	f005 ff31 	bl	801be28 <iprintf>
 8015fc6:	f06f 030f 	mvn.w	r3, #15
 8015fca:	e038      	b.n	801603e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015fcc:	68bb      	ldr	r3, [r7, #8]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d109      	bne.n	8015fe6 <udp_sendto+0x42>
 8015fd2:	4b1d      	ldr	r3, [pc, #116]	; (8016048 <udp_sendto+0xa4>)
 8015fd4:	f240 2219 	movw	r2, #537	; 0x219
 8015fd8:	491e      	ldr	r1, [pc, #120]	; (8016054 <udp_sendto+0xb0>)
 8015fda:	481d      	ldr	r0, [pc, #116]	; (8016050 <udp_sendto+0xac>)
 8015fdc:	f005 ff24 	bl	801be28 <iprintf>
 8015fe0:	f06f 030f 	mvn.w	r3, #15
 8015fe4:	e02b      	b.n	801603e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d109      	bne.n	8016000 <udp_sendto+0x5c>
 8015fec:	4b16      	ldr	r3, [pc, #88]	; (8016048 <udp_sendto+0xa4>)
 8015fee:	f240 221a 	movw	r2, #538	; 0x21a
 8015ff2:	4919      	ldr	r1, [pc, #100]	; (8016058 <udp_sendto+0xb4>)
 8015ff4:	4816      	ldr	r0, [pc, #88]	; (8016050 <udp_sendto+0xac>)
 8015ff6:	f005 ff17 	bl	801be28 <iprintf>
 8015ffa:	f06f 030f 	mvn.w	r3, #15
 8015ffe:	e01e      	b.n	801603e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	7a1b      	ldrb	r3, [r3, #8]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d006      	beq.n	8016016 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	7a1b      	ldrb	r3, [r3, #8]
 801600c:	4618      	mov	r0, r3
 801600e:	f7f8 fcb1 	bl	800e974 <netif_get_by_index>
 8016012:	6178      	str	r0, [r7, #20]
 8016014:	e003      	b.n	801601e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8016016:	6878      	ldr	r0, [r7, #4]
 8016018:	f003 fb86 	bl	8019728 <ip4_route>
 801601c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d102      	bne.n	801602a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016024:	f06f 0303 	mvn.w	r3, #3
 8016028:	e009      	b.n	801603e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801602a:	887a      	ldrh	r2, [r7, #2]
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	9300      	str	r3, [sp, #0]
 8016030:	4613      	mov	r3, r2
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	68b9      	ldr	r1, [r7, #8]
 8016036:	68f8      	ldr	r0, [r7, #12]
 8016038:	f000 f810 	bl	801605c <udp_sendto_if>
 801603c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801603e:	4618      	mov	r0, r3
 8016040:	3718      	adds	r7, #24
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	08021314 	.word	0x08021314
 801604c:	08021438 	.word	0x08021438
 8016050:	08021368 	.word	0x08021368
 8016054:	08021450 	.word	0x08021450
 8016058:	0802146c 	.word	0x0802146c

0801605c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b088      	sub	sp, #32
 8016060:	af02      	add	r7, sp, #8
 8016062:	60f8      	str	r0, [r7, #12]
 8016064:	60b9      	str	r1, [r7, #8]
 8016066:	607a      	str	r2, [r7, #4]
 8016068:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d109      	bne.n	8016084 <udp_sendto_if+0x28>
 8016070:	4b2e      	ldr	r3, [pc, #184]	; (801612c <udp_sendto_if+0xd0>)
 8016072:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016076:	492e      	ldr	r1, [pc, #184]	; (8016130 <udp_sendto_if+0xd4>)
 8016078:	482e      	ldr	r0, [pc, #184]	; (8016134 <udp_sendto_if+0xd8>)
 801607a:	f005 fed5 	bl	801be28 <iprintf>
 801607e:	f06f 030f 	mvn.w	r3, #15
 8016082:	e04f      	b.n	8016124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d109      	bne.n	801609e <udp_sendto_if+0x42>
 801608a:	4b28      	ldr	r3, [pc, #160]	; (801612c <udp_sendto_if+0xd0>)
 801608c:	f240 2281 	movw	r2, #641	; 0x281
 8016090:	4929      	ldr	r1, [pc, #164]	; (8016138 <udp_sendto_if+0xdc>)
 8016092:	4828      	ldr	r0, [pc, #160]	; (8016134 <udp_sendto_if+0xd8>)
 8016094:	f005 fec8 	bl	801be28 <iprintf>
 8016098:	f06f 030f 	mvn.w	r3, #15
 801609c:	e042      	b.n	8016124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d109      	bne.n	80160b8 <udp_sendto_if+0x5c>
 80160a4:	4b21      	ldr	r3, [pc, #132]	; (801612c <udp_sendto_if+0xd0>)
 80160a6:	f240 2282 	movw	r2, #642	; 0x282
 80160aa:	4924      	ldr	r1, [pc, #144]	; (801613c <udp_sendto_if+0xe0>)
 80160ac:	4821      	ldr	r0, [pc, #132]	; (8016134 <udp_sendto_if+0xd8>)
 80160ae:	f005 febb 	bl	801be28 <iprintf>
 80160b2:	f06f 030f 	mvn.w	r3, #15
 80160b6:	e035      	b.n	8016124 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80160b8:	6a3b      	ldr	r3, [r7, #32]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d109      	bne.n	80160d2 <udp_sendto_if+0x76>
 80160be:	4b1b      	ldr	r3, [pc, #108]	; (801612c <udp_sendto_if+0xd0>)
 80160c0:	f240 2283 	movw	r2, #643	; 0x283
 80160c4:	491e      	ldr	r1, [pc, #120]	; (8016140 <udp_sendto_if+0xe4>)
 80160c6:	481b      	ldr	r0, [pc, #108]	; (8016134 <udp_sendto_if+0xd8>)
 80160c8:	f005 feae 	bl	801be28 <iprintf>
 80160cc:	f06f 030f 	mvn.w	r3, #15
 80160d0:	e028      	b.n	8016124 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d009      	beq.n	80160ec <udp_sendto_if+0x90>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d005      	beq.n	80160ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80160e8:	2be0      	cmp	r3, #224	; 0xe0
 80160ea:	d103      	bne.n	80160f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80160ec:	6a3b      	ldr	r3, [r7, #32]
 80160ee:	3304      	adds	r3, #4
 80160f0:	617b      	str	r3, [r7, #20]
 80160f2:	e00b      	b.n	801610c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	6a3b      	ldr	r3, [r7, #32]
 80160fa:	3304      	adds	r3, #4
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d002      	beq.n	8016108 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016102:	f06f 0303 	mvn.w	r3, #3
 8016106:	e00d      	b.n	8016124 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801610c:	887a      	ldrh	r2, [r7, #2]
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	9301      	str	r3, [sp, #4]
 8016112:	6a3b      	ldr	r3, [r7, #32]
 8016114:	9300      	str	r3, [sp, #0]
 8016116:	4613      	mov	r3, r2
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	68b9      	ldr	r1, [r7, #8]
 801611c:	68f8      	ldr	r0, [r7, #12]
 801611e:	f000 f811 	bl	8016144 <udp_sendto_if_src>
 8016122:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016124:	4618      	mov	r0, r3
 8016126:	3718      	adds	r7, #24
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}
 801612c:	08021314 	.word	0x08021314
 8016130:	08021488 	.word	0x08021488
 8016134:	08021368 	.word	0x08021368
 8016138:	080214a4 	.word	0x080214a4
 801613c:	080214c0 	.word	0x080214c0
 8016140:	080214e0 	.word	0x080214e0

08016144 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b08c      	sub	sp, #48	; 0x30
 8016148:	af04      	add	r7, sp, #16
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
 8016150:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d109      	bne.n	801616c <udp_sendto_if_src+0x28>
 8016158:	4b65      	ldr	r3, [pc, #404]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 801615a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801615e:	4965      	ldr	r1, [pc, #404]	; (80162f4 <udp_sendto_if_src+0x1b0>)
 8016160:	4865      	ldr	r0, [pc, #404]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 8016162:	f005 fe61 	bl	801be28 <iprintf>
 8016166:	f06f 030f 	mvn.w	r3, #15
 801616a:	e0bc      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d109      	bne.n	8016186 <udp_sendto_if_src+0x42>
 8016172:	4b5f      	ldr	r3, [pc, #380]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 8016174:	f240 22d2 	movw	r2, #722	; 0x2d2
 8016178:	4960      	ldr	r1, [pc, #384]	; (80162fc <udp_sendto_if_src+0x1b8>)
 801617a:	485f      	ldr	r0, [pc, #380]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 801617c:	f005 fe54 	bl	801be28 <iprintf>
 8016180:	f06f 030f 	mvn.w	r3, #15
 8016184:	e0af      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d109      	bne.n	80161a0 <udp_sendto_if_src+0x5c>
 801618c:	4b58      	ldr	r3, [pc, #352]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 801618e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8016192:	495b      	ldr	r1, [pc, #364]	; (8016300 <udp_sendto_if_src+0x1bc>)
 8016194:	4858      	ldr	r0, [pc, #352]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 8016196:	f005 fe47 	bl	801be28 <iprintf>
 801619a:	f06f 030f 	mvn.w	r3, #15
 801619e:	e0a2      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80161a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d109      	bne.n	80161ba <udp_sendto_if_src+0x76>
 80161a6:	4b52      	ldr	r3, [pc, #328]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 80161a8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80161ac:	4955      	ldr	r1, [pc, #340]	; (8016304 <udp_sendto_if_src+0x1c0>)
 80161ae:	4852      	ldr	r0, [pc, #328]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 80161b0:	f005 fe3a 	bl	801be28 <iprintf>
 80161b4:	f06f 030f 	mvn.w	r3, #15
 80161b8:	e095      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80161ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d109      	bne.n	80161d4 <udp_sendto_if_src+0x90>
 80161c0:	4b4b      	ldr	r3, [pc, #300]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 80161c2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80161c6:	4950      	ldr	r1, [pc, #320]	; (8016308 <udp_sendto_if_src+0x1c4>)
 80161c8:	484b      	ldr	r0, [pc, #300]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 80161ca:	f005 fe2d 	bl	801be28 <iprintf>
 80161ce:	f06f 030f 	mvn.w	r3, #15
 80161d2:	e088      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	8a5b      	ldrh	r3, [r3, #18]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d10f      	bne.n	80161fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80161dc:	68f9      	ldr	r1, [r7, #12]
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	8a5b      	ldrh	r3, [r3, #18]
 80161e2:	461a      	mov	r2, r3
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f000 f893 	bl	8016310 <udp_bind>
 80161ea:	4603      	mov	r3, r0
 80161ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80161ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d002      	beq.n	80161fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80161f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80161fa:	e074      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	891b      	ldrh	r3, [r3, #8]
 8016200:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016204:	4293      	cmp	r3, r2
 8016206:	d902      	bls.n	801620e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8016208:	f04f 33ff 	mov.w	r3, #4294967295
 801620c:	e06b      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801620e:	2108      	movs	r1, #8
 8016210:	68b8      	ldr	r0, [r7, #8]
 8016212:	f7f8 feab 	bl	800ef6c <pbuf_add_header>
 8016216:	4603      	mov	r3, r0
 8016218:	2b00      	cmp	r3, #0
 801621a:	d015      	beq.n	8016248 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801621c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016220:	2108      	movs	r1, #8
 8016222:	2022      	movs	r0, #34	; 0x22
 8016224:	f7f8 fc50 	bl	800eac8 <pbuf_alloc>
 8016228:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801622a:	69fb      	ldr	r3, [r7, #28]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d102      	bne.n	8016236 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016230:	f04f 33ff 	mov.w	r3, #4294967295
 8016234:	e057      	b.n	80162e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	891b      	ldrh	r3, [r3, #8]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d006      	beq.n	801624c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801623e:	68b9      	ldr	r1, [r7, #8]
 8016240:	69f8      	ldr	r0, [r7, #28]
 8016242:	f7f9 f84d 	bl	800f2e0 <pbuf_chain>
 8016246:	e001      	b.n	801624c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8016248:	68bb      	ldr	r3, [r7, #8]
 801624a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801624c:	69fb      	ldr	r3, [r7, #28]
 801624e:	895b      	ldrh	r3, [r3, #10]
 8016250:	2b07      	cmp	r3, #7
 8016252:	d806      	bhi.n	8016262 <udp_sendto_if_src+0x11e>
 8016254:	4b26      	ldr	r3, [pc, #152]	; (80162f0 <udp_sendto_if_src+0x1ac>)
 8016256:	f240 320d 	movw	r2, #781	; 0x30d
 801625a:	492c      	ldr	r1, [pc, #176]	; (801630c <udp_sendto_if_src+0x1c8>)
 801625c:	4826      	ldr	r0, [pc, #152]	; (80162f8 <udp_sendto_if_src+0x1b4>)
 801625e:	f005 fde3 	bl	801be28 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016262:	69fb      	ldr	r3, [r7, #28]
 8016264:	685b      	ldr	r3, [r3, #4]
 8016266:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	8a5b      	ldrh	r3, [r3, #18]
 801626c:	4618      	mov	r0, r3
 801626e:	f7f7 f9f1 	bl	800d654 <lwip_htons>
 8016272:	4603      	mov	r3, r0
 8016274:	461a      	mov	r2, r3
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801627a:	887b      	ldrh	r3, [r7, #2]
 801627c:	4618      	mov	r0, r3
 801627e:	f7f7 f9e9 	bl	800d654 <lwip_htons>
 8016282:	4603      	mov	r3, r0
 8016284:	461a      	mov	r2, r3
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801628a:	697b      	ldr	r3, [r7, #20]
 801628c:	2200      	movs	r2, #0
 801628e:	719a      	strb	r2, [r3, #6]
 8016290:	2200      	movs	r2, #0
 8016292:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016294:	69fb      	ldr	r3, [r7, #28]
 8016296:	891b      	ldrh	r3, [r3, #8]
 8016298:	4618      	mov	r0, r3
 801629a:	f7f7 f9db 	bl	800d654 <lwip_htons>
 801629e:	4603      	mov	r3, r0
 80162a0:	461a      	mov	r2, r3
 80162a2:	697b      	ldr	r3, [r7, #20]
 80162a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80162a6:	2311      	movs	r3, #17
 80162a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	7adb      	ldrb	r3, [r3, #11]
 80162ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	7a9b      	ldrb	r3, [r3, #10]
 80162b4:	7cb9      	ldrb	r1, [r7, #18]
 80162b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162b8:	9202      	str	r2, [sp, #8]
 80162ba:	7cfa      	ldrb	r2, [r7, #19]
 80162bc:	9201      	str	r2, [sp, #4]
 80162be:	9300      	str	r3, [sp, #0]
 80162c0:	460b      	mov	r3, r1
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162c6:	69f8      	ldr	r0, [r7, #28]
 80162c8:	f003 fc40 	bl	8019b4c <ip4_output_if_src>
 80162cc:	4603      	mov	r3, r0
 80162ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80162d0:	69fa      	ldr	r2, [r7, #28]
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d004      	beq.n	80162e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80162d8:	69f8      	ldr	r0, [r7, #28]
 80162da:	f7f8 fedd 	bl	800f098 <pbuf_free>
    q = NULL;
 80162de:	2300      	movs	r3, #0
 80162e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80162e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80162e6:	4618      	mov	r0, r3
 80162e8:	3720      	adds	r7, #32
 80162ea:	46bd      	mov	sp, r7
 80162ec:	bd80      	pop	{r7, pc}
 80162ee:	bf00      	nop
 80162f0:	08021314 	.word	0x08021314
 80162f4:	08021500 	.word	0x08021500
 80162f8:	08021368 	.word	0x08021368
 80162fc:	08021520 	.word	0x08021520
 8016300:	08021540 	.word	0x08021540
 8016304:	08021564 	.word	0x08021564
 8016308:	08021588 	.word	0x08021588
 801630c:	080215ac 	.word	0x080215ac

08016310 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b086      	sub	sp, #24
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	4613      	mov	r3, r2
 801631c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d101      	bne.n	8016328 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016324:	4b39      	ldr	r3, [pc, #228]	; (801640c <udp_bind+0xfc>)
 8016326:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d109      	bne.n	8016342 <udp_bind+0x32>
 801632e:	4b38      	ldr	r3, [pc, #224]	; (8016410 <udp_bind+0x100>)
 8016330:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016334:	4937      	ldr	r1, [pc, #220]	; (8016414 <udp_bind+0x104>)
 8016336:	4838      	ldr	r0, [pc, #224]	; (8016418 <udp_bind+0x108>)
 8016338:	f005 fd76 	bl	801be28 <iprintf>
 801633c:	f06f 030f 	mvn.w	r3, #15
 8016340:	e060      	b.n	8016404 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016342:	2300      	movs	r3, #0
 8016344:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016346:	4b35      	ldr	r3, [pc, #212]	; (801641c <udp_bind+0x10c>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	617b      	str	r3, [r7, #20]
 801634c:	e009      	b.n	8016362 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	429a      	cmp	r2, r3
 8016354:	d102      	bne.n	801635c <udp_bind+0x4c>
      rebind = 1;
 8016356:	2301      	movs	r3, #1
 8016358:	74fb      	strb	r3, [r7, #19]
      break;
 801635a:	e005      	b.n	8016368 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	68db      	ldr	r3, [r3, #12]
 8016360:	617b      	str	r3, [r7, #20]
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d1f2      	bne.n	801634e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016368:	88fb      	ldrh	r3, [r7, #6]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d109      	bne.n	8016382 <udp_bind+0x72>
    port = udp_new_port();
 801636e:	f7ff fc51 	bl	8015c14 <udp_new_port>
 8016372:	4603      	mov	r3, r0
 8016374:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016376:	88fb      	ldrh	r3, [r7, #6]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d12c      	bne.n	80163d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801637c:	f06f 0307 	mvn.w	r3, #7
 8016380:	e040      	b.n	8016404 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016382:	4b26      	ldr	r3, [pc, #152]	; (801641c <udp_bind+0x10c>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	617b      	str	r3, [r7, #20]
 8016388:	e022      	b.n	80163d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801638a:	68fa      	ldr	r2, [r7, #12]
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	429a      	cmp	r2, r3
 8016390:	d01b      	beq.n	80163ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	8a5b      	ldrh	r3, [r3, #18]
 8016396:	88fa      	ldrh	r2, [r7, #6]
 8016398:	429a      	cmp	r2, r3
 801639a:	d116      	bne.n	80163ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	681a      	ldr	r2, [r3, #0]
 80163a0:	68bb      	ldr	r3, [r7, #8]
 80163a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d00d      	beq.n	80163c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163a8:	68bb      	ldr	r3, [r7, #8]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d00a      	beq.n	80163c4 <udp_bind+0xb4>
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d006      	beq.n	80163c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d003      	beq.n	80163c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80163bc:	697b      	ldr	r3, [r7, #20]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d102      	bne.n	80163ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80163c4:	f06f 0307 	mvn.w	r3, #7
 80163c8:	e01c      	b.n	8016404 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80163ca:	697b      	ldr	r3, [r7, #20]
 80163cc:	68db      	ldr	r3, [r3, #12]
 80163ce:	617b      	str	r3, [r7, #20]
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d1d9      	bne.n	801638a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d002      	beq.n	80163e2 <udp_bind+0xd2>
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	e000      	b.n	80163e4 <udp_bind+0xd4>
 80163e2:	2300      	movs	r3, #0
 80163e4:	68fa      	ldr	r2, [r7, #12]
 80163e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	88fa      	ldrh	r2, [r7, #6]
 80163ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80163ee:	7cfb      	ldrb	r3, [r7, #19]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d106      	bne.n	8016402 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80163f4:	4b09      	ldr	r3, [pc, #36]	; (801641c <udp_bind+0x10c>)
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80163fc:	4a07      	ldr	r2, [pc, #28]	; (801641c <udp_bind+0x10c>)
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016402:	2300      	movs	r3, #0
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	0806df40 	.word	0x0806df40
 8016410:	08021314 	.word	0x08021314
 8016414:	080215dc 	.word	0x080215dc
 8016418:	08021368 	.word	0x08021368
 801641c:	20013d38 	.word	0x20013d38

08016420 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 8016420:	b480      	push	{r7}
 8016422:	b083      	sub	sp, #12
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]
 8016428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d007      	beq.n	8016440 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016436:	3301      	adds	r3, #1
 8016438:	b2da      	uxtb	r2, r3
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 801643e:	e002      	b.n	8016446 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2200      	movs	r2, #0
 8016444:	721a      	strb	r2, [r3, #8]
}
 8016446:	bf00      	nop
 8016448:	370c      	adds	r7, #12
 801644a:	46bd      	mov	sp, r7
 801644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016450:	4770      	bx	lr
	...

08016454 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b086      	sub	sp, #24
 8016458:	af00      	add	r7, sp, #0
 801645a:	60f8      	str	r0, [r7, #12]
 801645c:	60b9      	str	r1, [r7, #8]
 801645e:	4613      	mov	r3, r2
 8016460:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d109      	bne.n	801647c <udp_connect+0x28>
 8016468:	4b2c      	ldr	r3, [pc, #176]	; (801651c <udp_connect+0xc8>)
 801646a:	f240 4235 	movw	r2, #1077	; 0x435
 801646e:	492c      	ldr	r1, [pc, #176]	; (8016520 <udp_connect+0xcc>)
 8016470:	482c      	ldr	r0, [pc, #176]	; (8016524 <udp_connect+0xd0>)
 8016472:	f005 fcd9 	bl	801be28 <iprintf>
 8016476:	f06f 030f 	mvn.w	r3, #15
 801647a:	e04b      	b.n	8016514 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d109      	bne.n	8016496 <udp_connect+0x42>
 8016482:	4b26      	ldr	r3, [pc, #152]	; (801651c <udp_connect+0xc8>)
 8016484:	f240 4236 	movw	r2, #1078	; 0x436
 8016488:	4927      	ldr	r1, [pc, #156]	; (8016528 <udp_connect+0xd4>)
 801648a:	4826      	ldr	r0, [pc, #152]	; (8016524 <udp_connect+0xd0>)
 801648c:	f005 fccc 	bl	801be28 <iprintf>
 8016490:	f06f 030f 	mvn.w	r3, #15
 8016494:	e03e      	b.n	8016514 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	8a5b      	ldrh	r3, [r3, #18]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d10f      	bne.n	80164be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801649e:	68f9      	ldr	r1, [r7, #12]
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	8a5b      	ldrh	r3, [r3, #18]
 80164a4:	461a      	mov	r2, r3
 80164a6:	68f8      	ldr	r0, [r7, #12]
 80164a8:	f7ff ff32 	bl	8016310 <udp_bind>
 80164ac:	4603      	mov	r3, r0
 80164ae:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 80164b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d002      	beq.n	80164be <udp_connect+0x6a>
      return err;
 80164b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80164bc:	e02a      	b.n	8016514 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d002      	beq.n	80164ca <udp_connect+0x76>
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	e000      	b.n	80164cc <udp_connect+0x78>
 80164ca:	2300      	movs	r3, #0
 80164cc:	68fa      	ldr	r2, [r7, #12]
 80164ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	88fa      	ldrh	r2, [r7, #6]
 80164d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80164d6:	68fb      	ldr	r3, [r7, #12]
 80164d8:	7c1b      	ldrb	r3, [r3, #16]
 80164da:	f043 0304 	orr.w	r3, r3, #4
 80164de:	b2da      	uxtb	r2, r3
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80164e4:	4b11      	ldr	r3, [pc, #68]	; (801652c <udp_connect+0xd8>)
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	613b      	str	r3, [r7, #16]
 80164ea:	e008      	b.n	80164fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80164ec:	68fa      	ldr	r2, [r7, #12]
 80164ee:	693b      	ldr	r3, [r7, #16]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d101      	bne.n	80164f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80164f4:	2300      	movs	r3, #0
 80164f6:	e00d      	b.n	8016514 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	68db      	ldr	r3, [r3, #12]
 80164fc:	613b      	str	r3, [r7, #16]
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d1f3      	bne.n	80164ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8016504:	4b09      	ldr	r3, [pc, #36]	; (801652c <udp_connect+0xd8>)
 8016506:	681a      	ldr	r2, [r3, #0]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801650c:	4a07      	ldr	r2, [pc, #28]	; (801652c <udp_connect+0xd8>)
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8016512:	2300      	movs	r3, #0
}
 8016514:	4618      	mov	r0, r3
 8016516:	3718      	adds	r7, #24
 8016518:	46bd      	mov	sp, r7
 801651a:	bd80      	pop	{r7, pc}
 801651c:	08021314 	.word	0x08021314
 8016520:	080215f4 	.word	0x080215f4
 8016524:	08021368 	.word	0x08021368
 8016528:	08021610 	.word	0x08021610
 801652c:	20013d38 	.word	0x20013d38

08016530 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b082      	sub	sp, #8
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d107      	bne.n	801654e <udp_disconnect+0x1e>
 801653e:	4b0d      	ldr	r3, [pc, #52]	; (8016574 <udp_disconnect+0x44>)
 8016540:	f240 426a 	movw	r2, #1130	; 0x46a
 8016544:	490c      	ldr	r1, [pc, #48]	; (8016578 <udp_disconnect+0x48>)
 8016546:	480d      	ldr	r0, [pc, #52]	; (801657c <udp_disconnect+0x4c>)
 8016548:	f005 fc6e 	bl	801be28 <iprintf>
 801654c:	e00f      	b.n	801656e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2200      	movs	r2, #0
 8016552:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	2200      	movs	r2, #0
 8016558:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2200      	movs	r2, #0
 801655e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	7c1b      	ldrb	r3, [r3, #16]
 8016564:	f023 0304 	bic.w	r3, r3, #4
 8016568:	b2da      	uxtb	r2, r3
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	741a      	strb	r2, [r3, #16]
}
 801656e:	3708      	adds	r7, #8
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	08021314 	.word	0x08021314
 8016578:	0802162c 	.word	0x0802162c
 801657c:	08021368 	.word	0x08021368

08016580 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b084      	sub	sp, #16
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d107      	bne.n	80165a2 <udp_recv+0x22>
 8016592:	4b08      	ldr	r3, [pc, #32]	; (80165b4 <udp_recv+0x34>)
 8016594:	f240 428a 	movw	r2, #1162	; 0x48a
 8016598:	4907      	ldr	r1, [pc, #28]	; (80165b8 <udp_recv+0x38>)
 801659a:	4808      	ldr	r0, [pc, #32]	; (80165bc <udp_recv+0x3c>)
 801659c:	f005 fc44 	bl	801be28 <iprintf>
 80165a0:	e005      	b.n	80165ae <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	68ba      	ldr	r2, [r7, #8]
 80165a6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	61da      	str	r2, [r3, #28]
}
 80165ae:	3710      	adds	r7, #16
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	08021314 	.word	0x08021314
 80165b8:	08021648 	.word	0x08021648
 80165bc:	08021368 	.word	0x08021368

080165c0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80165c0:	b580      	push	{r7, lr}
 80165c2:	b084      	sub	sp, #16
 80165c4:	af00      	add	r7, sp, #0
 80165c6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d107      	bne.n	80165de <udp_remove+0x1e>
 80165ce:	4b19      	ldr	r3, [pc, #100]	; (8016634 <udp_remove+0x74>)
 80165d0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80165d4:	4918      	ldr	r1, [pc, #96]	; (8016638 <udp_remove+0x78>)
 80165d6:	4819      	ldr	r0, [pc, #100]	; (801663c <udp_remove+0x7c>)
 80165d8:	f005 fc26 	bl	801be28 <iprintf>
 80165dc:	e026      	b.n	801662c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80165de:	4b18      	ldr	r3, [pc, #96]	; (8016640 <udp_remove+0x80>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	687a      	ldr	r2, [r7, #4]
 80165e4:	429a      	cmp	r2, r3
 80165e6:	d105      	bne.n	80165f4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80165e8:	4b15      	ldr	r3, [pc, #84]	; (8016640 <udp_remove+0x80>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	68db      	ldr	r3, [r3, #12]
 80165ee:	4a14      	ldr	r2, [pc, #80]	; (8016640 <udp_remove+0x80>)
 80165f0:	6013      	str	r3, [r2, #0]
 80165f2:	e017      	b.n	8016624 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80165f4:	4b12      	ldr	r3, [pc, #72]	; (8016640 <udp_remove+0x80>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	60fb      	str	r3, [r7, #12]
 80165fa:	e010      	b.n	801661e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d009      	beq.n	8016618 <udp_remove+0x58>
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	429a      	cmp	r2, r3
 801660c:	d104      	bne.n	8016618 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	68da      	ldr	r2, [r3, #12]
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	60da      	str	r2, [r3, #12]
        break;
 8016616:	e005      	b.n	8016624 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	60fb      	str	r3, [r7, #12]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d1eb      	bne.n	80165fc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016624:	6879      	ldr	r1, [r7, #4]
 8016626:	2000      	movs	r0, #0
 8016628:	f7f7 fe94 	bl	800e354 <memp_free>
}
 801662c:	3710      	adds	r7, #16
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	08021314 	.word	0x08021314
 8016638:	08021660 	.word	0x08021660
 801663c:	08021368 	.word	0x08021368
 8016640:	20013d38 	.word	0x20013d38

08016644 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801664a:	2000      	movs	r0, #0
 801664c:	f7f7 fe30 	bl	800e2b0 <memp_malloc>
 8016650:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d007      	beq.n	8016668 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016658:	2220      	movs	r2, #32
 801665a:	2100      	movs	r1, #0
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f005 fd4d 	bl	801c0fc <memset>
    pcb->ttl = UDP_TTL;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	22ff      	movs	r2, #255	; 0xff
 8016666:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016668:	687b      	ldr	r3, [r7, #4]
}
 801666a:	4618      	mov	r0, r3
 801666c:	3708      	adds	r7, #8
 801666e:	46bd      	mov	sp, r7
 8016670:	bd80      	pop	{r7, pc}
	...

08016674 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016674:	b480      	push	{r7}
 8016676:	b085      	sub	sp, #20
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d01e      	beq.n	80166c2 <udp_netif_ip_addr_changed+0x4e>
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	681b      	ldr	r3, [r3, #0]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d01a      	beq.n	80166c2 <udp_netif_ip_addr_changed+0x4e>
 801668c:	683b      	ldr	r3, [r7, #0]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d017      	beq.n	80166c2 <udp_netif_ip_addr_changed+0x4e>
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d013      	beq.n	80166c2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801669a:	4b0d      	ldr	r3, [pc, #52]	; (80166d0 <udp_netif_ip_addr_changed+0x5c>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	60fb      	str	r3, [r7, #12]
 80166a0:	e00c      	b.n	80166bc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	681a      	ldr	r2, [r3, #0]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	429a      	cmp	r2, r3
 80166ac:	d103      	bne.n	80166b6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80166ae:	683b      	ldr	r3, [r7, #0]
 80166b0:	681a      	ldr	r2, [r3, #0]
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	60fb      	str	r3, [r7, #12]
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d1ef      	bne.n	80166a2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80166c2:	bf00      	nop
 80166c4:	3714      	adds	r7, #20
 80166c6:	46bd      	mov	sp, r7
 80166c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166cc:	4770      	bx	lr
 80166ce:	bf00      	nop
 80166d0:	20013d38 	.word	0x20013d38

080166d4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80166d8:	4b20      	ldr	r3, [pc, #128]	; (801675c <dhcp_inc_pcb_refcount+0x88>)
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d133      	bne.n	8016748 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80166e0:	4b1f      	ldr	r3, [pc, #124]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d005      	beq.n	80166f4 <dhcp_inc_pcb_refcount+0x20>
 80166e8:	4b1e      	ldr	r3, [pc, #120]	; (8016764 <dhcp_inc_pcb_refcount+0x90>)
 80166ea:	22e5      	movs	r2, #229	; 0xe5
 80166ec:	491e      	ldr	r1, [pc, #120]	; (8016768 <dhcp_inc_pcb_refcount+0x94>)
 80166ee:	481f      	ldr	r0, [pc, #124]	; (801676c <dhcp_inc_pcb_refcount+0x98>)
 80166f0:	f005 fb9a 	bl	801be28 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80166f4:	f7ff ffa6 	bl	8016644 <udp_new>
 80166f8:	4603      	mov	r3, r0
 80166fa:	4a19      	ldr	r2, [pc, #100]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 80166fc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80166fe:	4b18      	ldr	r3, [pc, #96]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d102      	bne.n	801670c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8016706:	f04f 33ff 	mov.w	r3, #4294967295
 801670a:	e024      	b.n	8016756 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801670c:	4b14      	ldr	r3, [pc, #80]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	7a5a      	ldrb	r2, [r3, #9]
 8016712:	4b13      	ldr	r3, [pc, #76]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	f042 0220 	orr.w	r2, r2, #32
 801671a:	b2d2      	uxtb	r2, r2
 801671c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801671e:	4b10      	ldr	r3, [pc, #64]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	2244      	movs	r2, #68	; 0x44
 8016724:	4912      	ldr	r1, [pc, #72]	; (8016770 <dhcp_inc_pcb_refcount+0x9c>)
 8016726:	4618      	mov	r0, r3
 8016728:	f7ff fdf2 	bl	8016310 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801672c:	4b0c      	ldr	r3, [pc, #48]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 801672e:	681b      	ldr	r3, [r3, #0]
 8016730:	2243      	movs	r2, #67	; 0x43
 8016732:	490f      	ldr	r1, [pc, #60]	; (8016770 <dhcp_inc_pcb_refcount+0x9c>)
 8016734:	4618      	mov	r0, r3
 8016736:	f7ff fe8d 	bl	8016454 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801673a:	4b09      	ldr	r3, [pc, #36]	; (8016760 <dhcp_inc_pcb_refcount+0x8c>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	2200      	movs	r2, #0
 8016740:	490c      	ldr	r1, [pc, #48]	; (8016774 <dhcp_inc_pcb_refcount+0xa0>)
 8016742:	4618      	mov	r0, r3
 8016744:	f7ff ff1c 	bl	8016580 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8016748:	4b04      	ldr	r3, [pc, #16]	; (801675c <dhcp_inc_pcb_refcount+0x88>)
 801674a:	781b      	ldrb	r3, [r3, #0]
 801674c:	3301      	adds	r3, #1
 801674e:	b2da      	uxtb	r2, r3
 8016750:	4b02      	ldr	r3, [pc, #8]	; (801675c <dhcp_inc_pcb_refcount+0x88>)
 8016752:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8016754:	2300      	movs	r3, #0
}
 8016756:	4618      	mov	r0, r3
 8016758:	bd80      	pop	{r7, pc}
 801675a:	bf00      	nop
 801675c:	20013d68 	.word	0x20013d68
 8016760:	20013d64 	.word	0x20013d64
 8016764:	08021678 	.word	0x08021678
 8016768:	080216b0 	.word	0x080216b0
 801676c:	080216d8 	.word	0x080216d8
 8016770:	0806df40 	.word	0x0806df40
 8016774:	08018041 	.word	0x08018041

08016778 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8016778:	b580      	push	{r7, lr}
 801677a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801677c:	4b0e      	ldr	r3, [pc, #56]	; (80167b8 <dhcp_dec_pcb_refcount+0x40>)
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d105      	bne.n	8016790 <dhcp_dec_pcb_refcount+0x18>
 8016784:	4b0d      	ldr	r3, [pc, #52]	; (80167bc <dhcp_dec_pcb_refcount+0x44>)
 8016786:	22ff      	movs	r2, #255	; 0xff
 8016788:	490d      	ldr	r1, [pc, #52]	; (80167c0 <dhcp_dec_pcb_refcount+0x48>)
 801678a:	480e      	ldr	r0, [pc, #56]	; (80167c4 <dhcp_dec_pcb_refcount+0x4c>)
 801678c:	f005 fb4c 	bl	801be28 <iprintf>
  dhcp_pcb_refcount--;
 8016790:	4b09      	ldr	r3, [pc, #36]	; (80167b8 <dhcp_dec_pcb_refcount+0x40>)
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	3b01      	subs	r3, #1
 8016796:	b2da      	uxtb	r2, r3
 8016798:	4b07      	ldr	r3, [pc, #28]	; (80167b8 <dhcp_dec_pcb_refcount+0x40>)
 801679a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801679c:	4b06      	ldr	r3, [pc, #24]	; (80167b8 <dhcp_dec_pcb_refcount+0x40>)
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d107      	bne.n	80167b4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80167a4:	4b08      	ldr	r3, [pc, #32]	; (80167c8 <dhcp_dec_pcb_refcount+0x50>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7ff ff09 	bl	80165c0 <udp_remove>
    dhcp_pcb = NULL;
 80167ae:	4b06      	ldr	r3, [pc, #24]	; (80167c8 <dhcp_dec_pcb_refcount+0x50>)
 80167b0:	2200      	movs	r2, #0
 80167b2:	601a      	str	r2, [r3, #0]
  }
}
 80167b4:	bf00      	nop
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	20013d68 	.word	0x20013d68
 80167bc:	08021678 	.word	0x08021678
 80167c0:	08021700 	.word	0x08021700
 80167c4:	080216d8 	.word	0x080216d8
 80167c8:	20013d64 	.word	0x20013d64

080167cc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167d8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80167da:	210c      	movs	r1, #12
 80167dc:	68f8      	ldr	r0, [r7, #12]
 80167de:	f001 f860 	bl	80178a2 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80167e2:	4b06      	ldr	r3, [pc, #24]	; (80167fc <dhcp_handle_nak+0x30>)
 80167e4:	4a05      	ldr	r2, [pc, #20]	; (80167fc <dhcp_handle_nak+0x30>)
 80167e6:	4905      	ldr	r1, [pc, #20]	; (80167fc <dhcp_handle_nak+0x30>)
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7f7 ff55 	bl	800e698 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80167ee:	6878      	ldr	r0, [r7, #4]
 80167f0:	f000 fc48 	bl	8017084 <dhcp_discover>
}
 80167f4:	bf00      	nop
 80167f6:	3710      	adds	r7, #16
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	0806df40 	.word	0x0806df40

08016800 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b084      	sub	sp, #16
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801680c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801680e:	2108      	movs	r1, #8
 8016810:	68f8      	ldr	r0, [r7, #12]
 8016812:	f001 f846 	bl	80178a2 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	331c      	adds	r3, #28
 801681a:	2200      	movs	r2, #0
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f002 fbc2 	bl	8018fa8 <etharp_query>
 8016824:	4603      	mov	r3, r0
 8016826:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	799b      	ldrb	r3, [r3, #6]
 801682c:	2bff      	cmp	r3, #255	; 0xff
 801682e:	d005      	beq.n	801683c <dhcp_check+0x3c>
    dhcp->tries++;
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	799b      	ldrb	r3, [r3, #6]
 8016834:	3301      	adds	r3, #1
 8016836:	b2da      	uxtb	r2, r3
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801683c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8016840:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016842:	893b      	ldrh	r3, [r7, #8]
 8016844:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016848:	4a06      	ldr	r2, [pc, #24]	; (8016864 <dhcp_check+0x64>)
 801684a:	fb82 1203 	smull	r1, r2, r2, r3
 801684e:	1152      	asrs	r2, r2, #5
 8016850:	17db      	asrs	r3, r3, #31
 8016852:	1ad3      	subs	r3, r2, r3
 8016854:	b29a      	uxth	r2, r3
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801685a:	bf00      	nop
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	10624dd3 	.word	0x10624dd3

08016868 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b084      	sub	sp, #16
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
 8016870:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016876:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8016878:	4b0c      	ldr	r3, [pc, #48]	; (80168ac <dhcp_handle_offer+0x44>)
 801687a:	789b      	ldrb	r3, [r3, #2]
 801687c:	2b00      	cmp	r3, #0
 801687e:	d011      	beq.n	80168a4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	2200      	movs	r2, #0
 8016884:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8016886:	4b0a      	ldr	r3, [pc, #40]	; (80168b0 <dhcp_handle_offer+0x48>)
 8016888:	689b      	ldr	r3, [r3, #8]
 801688a:	4618      	mov	r0, r3
 801688c:	f7f6 fef7 	bl	800d67e <lwip_htonl>
 8016890:	4602      	mov	r2, r0
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	691a      	ldr	r2, [r3, #16]
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 f808 	bl	80168b4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80168a4:	bf00      	nop
 80168a6:	3710      	adds	r7, #16
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}
 80168ac:	20013d5c 	.word	0x20013d5c
 80168b0:	20013d3c 	.word	0x20013d3c

080168b4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80168b4:	b5b0      	push	{r4, r5, r7, lr}
 80168b6:	b08a      	sub	sp, #40	; 0x28
 80168b8:	af02      	add	r7, sp, #8
 80168ba:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d109      	bne.n	80168d6 <dhcp_select+0x22>
 80168c2:	4b71      	ldr	r3, [pc, #452]	; (8016a88 <dhcp_select+0x1d4>)
 80168c4:	f240 1277 	movw	r2, #375	; 0x177
 80168c8:	4970      	ldr	r1, [pc, #448]	; (8016a8c <dhcp_select+0x1d8>)
 80168ca:	4871      	ldr	r0, [pc, #452]	; (8016a90 <dhcp_select+0x1dc>)
 80168cc:	f005 faac 	bl	801be28 <iprintf>
 80168d0:	f06f 030f 	mvn.w	r3, #15
 80168d4:	e0d3      	b.n	8016a7e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168da:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80168dc:	69bb      	ldr	r3, [r7, #24]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d109      	bne.n	80168f6 <dhcp_select+0x42>
 80168e2:	4b69      	ldr	r3, [pc, #420]	; (8016a88 <dhcp_select+0x1d4>)
 80168e4:	f240 1279 	movw	r2, #377	; 0x179
 80168e8:	496a      	ldr	r1, [pc, #424]	; (8016a94 <dhcp_select+0x1e0>)
 80168ea:	4869      	ldr	r0, [pc, #420]	; (8016a90 <dhcp_select+0x1dc>)
 80168ec:	f005 fa9c 	bl	801be28 <iprintf>
 80168f0:	f06f 0305 	mvn.w	r3, #5
 80168f4:	e0c3      	b.n	8016a7e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80168f6:	2101      	movs	r1, #1
 80168f8:	69b8      	ldr	r0, [r7, #24]
 80168fa:	f000 ffd2 	bl	80178a2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80168fe:	f107 030c 	add.w	r3, r7, #12
 8016902:	2203      	movs	r2, #3
 8016904:	69b9      	ldr	r1, [r7, #24]
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f001 fc64 	bl	80181d4 <dhcp_create_msg>
 801690c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801690e:	697b      	ldr	r3, [r7, #20]
 8016910:	2b00      	cmp	r3, #0
 8016912:	f000 8085 	beq.w	8016a20 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016916:	697b      	ldr	r3, [r7, #20]
 8016918:	685b      	ldr	r3, [r3, #4]
 801691a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801691c:	89b8      	ldrh	r0, [r7, #12]
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016924:	2302      	movs	r3, #2
 8016926:	2239      	movs	r2, #57	; 0x39
 8016928:	f000 ffd6 	bl	80178d8 <dhcp_option>
 801692c:	4603      	mov	r3, r0
 801692e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016930:	89b8      	ldrh	r0, [r7, #12]
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801693c:	461a      	mov	r2, r3
 801693e:	f001 f825 	bl	801798c <dhcp_option_short>
 8016942:	4603      	mov	r3, r0
 8016944:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016946:	89b8      	ldrh	r0, [r7, #12]
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801694e:	2304      	movs	r3, #4
 8016950:	2232      	movs	r2, #50	; 0x32
 8016952:	f000 ffc1 	bl	80178d8 <dhcp_option>
 8016956:	4603      	mov	r3, r0
 8016958:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801695a:	89bc      	ldrh	r4, [r7, #12]
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	69db      	ldr	r3, [r3, #28]
 8016966:	4618      	mov	r0, r3
 8016968:	f7f6 fe89 	bl	800d67e <lwip_htonl>
 801696c:	4603      	mov	r3, r0
 801696e:	461a      	mov	r2, r3
 8016970:	4629      	mov	r1, r5
 8016972:	4620      	mov	r0, r4
 8016974:	f001 f83c 	bl	80179f0 <dhcp_option_long>
 8016978:	4603      	mov	r3, r0
 801697a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801697c:	89b8      	ldrh	r0, [r7, #12]
 801697e:	693b      	ldr	r3, [r7, #16]
 8016980:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016984:	2304      	movs	r3, #4
 8016986:	2236      	movs	r2, #54	; 0x36
 8016988:	f000 ffa6 	bl	80178d8 <dhcp_option>
 801698c:	4603      	mov	r3, r0
 801698e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8016990:	89bc      	ldrh	r4, [r7, #12]
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016998:	69bb      	ldr	r3, [r7, #24]
 801699a:	699b      	ldr	r3, [r3, #24]
 801699c:	4618      	mov	r0, r3
 801699e:	f7f6 fe6e 	bl	800d67e <lwip_htonl>
 80169a2:	4603      	mov	r3, r0
 80169a4:	461a      	mov	r2, r3
 80169a6:	4629      	mov	r1, r5
 80169a8:	4620      	mov	r0, r4
 80169aa:	f001 f821 	bl	80179f0 <dhcp_option_long>
 80169ae:	4603      	mov	r3, r0
 80169b0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80169b2:	89b8      	ldrh	r0, [r7, #12]
 80169b4:	693b      	ldr	r3, [r7, #16]
 80169b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169ba:	2303      	movs	r3, #3
 80169bc:	2237      	movs	r2, #55	; 0x37
 80169be:	f000 ff8b 	bl	80178d8 <dhcp_option>
 80169c2:	4603      	mov	r3, r0
 80169c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169c6:	2300      	movs	r3, #0
 80169c8:	77fb      	strb	r3, [r7, #31]
 80169ca:	e00e      	b.n	80169ea <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80169cc:	89b8      	ldrh	r0, [r7, #12]
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169d4:	7ffb      	ldrb	r3, [r7, #31]
 80169d6:	4a30      	ldr	r2, [pc, #192]	; (8016a98 <dhcp_select+0x1e4>)
 80169d8:	5cd3      	ldrb	r3, [r2, r3]
 80169da:	461a      	mov	r2, r3
 80169dc:	f000 ffb0 	bl	8017940 <dhcp_option_byte>
 80169e0:	4603      	mov	r3, r0
 80169e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169e4:	7ffb      	ldrb	r3, [r7, #31]
 80169e6:	3301      	adds	r3, #1
 80169e8:	77fb      	strb	r3, [r7, #31]
 80169ea:	7ffb      	ldrb	r3, [r7, #31]
 80169ec:	2b02      	cmp	r3, #2
 80169ee:	d9ed      	bls.n	80169cc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80169f0:	89b8      	ldrh	r0, [r7, #12]
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	33f0      	adds	r3, #240	; 0xf0
 80169f6:	697a      	ldr	r2, [r7, #20]
 80169f8:	4619      	mov	r1, r3
 80169fa:	f001 fcc1 	bl	8018380 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80169fe:	4b27      	ldr	r3, [pc, #156]	; (8016a9c <dhcp_select+0x1e8>)
 8016a00:	6818      	ldr	r0, [r3, #0]
 8016a02:	4b27      	ldr	r3, [pc, #156]	; (8016aa0 <dhcp_select+0x1ec>)
 8016a04:	9301      	str	r3, [sp, #4]
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	9300      	str	r3, [sp, #0]
 8016a0a:	2343      	movs	r3, #67	; 0x43
 8016a0c:	4a25      	ldr	r2, [pc, #148]	; (8016aa4 <dhcp_select+0x1f0>)
 8016a0e:	6979      	ldr	r1, [r7, #20]
 8016a10:	f7ff fb98 	bl	8016144 <udp_sendto_if_src>
 8016a14:	4603      	mov	r3, r0
 8016a16:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8016a18:	6978      	ldr	r0, [r7, #20]
 8016a1a:	f7f8 fb3d 	bl	800f098 <pbuf_free>
 8016a1e:	e001      	b.n	8016a24 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016a20:	23ff      	movs	r3, #255	; 0xff
 8016a22:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8016a24:	69bb      	ldr	r3, [r7, #24]
 8016a26:	799b      	ldrb	r3, [r3, #6]
 8016a28:	2bff      	cmp	r3, #255	; 0xff
 8016a2a:	d005      	beq.n	8016a38 <dhcp_select+0x184>
    dhcp->tries++;
 8016a2c:	69bb      	ldr	r3, [r7, #24]
 8016a2e:	799b      	ldrb	r3, [r3, #6]
 8016a30:	3301      	adds	r3, #1
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016a38:	69bb      	ldr	r3, [r7, #24]
 8016a3a:	799b      	ldrb	r3, [r3, #6]
 8016a3c:	2b05      	cmp	r3, #5
 8016a3e:	d80d      	bhi.n	8016a5c <dhcp_select+0x1a8>
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	799b      	ldrb	r3, [r3, #6]
 8016a44:	461a      	mov	r2, r3
 8016a46:	2301      	movs	r3, #1
 8016a48:	4093      	lsls	r3, r2
 8016a4a:	b29b      	uxth	r3, r3
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	0152      	lsls	r2, r2, #5
 8016a50:	1ad2      	subs	r2, r2, r3
 8016a52:	0092      	lsls	r2, r2, #2
 8016a54:	4413      	add	r3, r2
 8016a56:	00db      	lsls	r3, r3, #3
 8016a58:	b29b      	uxth	r3, r3
 8016a5a:	e001      	b.n	8016a60 <dhcp_select+0x1ac>
 8016a5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8016a60:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a62:	89fb      	ldrh	r3, [r7, #14]
 8016a64:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016a68:	4a0f      	ldr	r2, [pc, #60]	; (8016aa8 <dhcp_select+0x1f4>)
 8016a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8016a6e:	1152      	asrs	r2, r2, #5
 8016a70:	17db      	asrs	r3, r3, #31
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	b29a      	uxth	r2, r3
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016a7a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3720      	adds	r7, #32
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bdb0      	pop	{r4, r5, r7, pc}
 8016a86:	bf00      	nop
 8016a88:	08021678 	.word	0x08021678
 8016a8c:	08021724 	.word	0x08021724
 8016a90:	080216d8 	.word	0x080216d8
 8016a94:	08021740 	.word	0x08021740
 8016a98:	200000c4 	.word	0x200000c4
 8016a9c:	20013d64 	.word	0x20013d64
 8016aa0:	0806df40 	.word	0x0806df40
 8016aa4:	0806df44 	.word	0x0806df44
 8016aa8:	10624dd3 	.word	0x10624dd3

08016aac <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8016ab2:	4b27      	ldr	r3, [pc, #156]	; (8016b50 <dhcp_coarse_tmr+0xa4>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	607b      	str	r3, [r7, #4]
 8016ab8:	e042      	b.n	8016b40 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016abe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d039      	beq.n	8016b3a <dhcp_coarse_tmr+0x8e>
 8016ac6:	683b      	ldr	r3, [r7, #0]
 8016ac8:	795b      	ldrb	r3, [r3, #5]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d035      	beq.n	8016b3a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8016ace:	683b      	ldr	r3, [r7, #0]
 8016ad0:	8a9b      	ldrh	r3, [r3, #20]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d012      	beq.n	8016afc <dhcp_coarse_tmr+0x50>
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	8a5b      	ldrh	r3, [r3, #18]
 8016ada:	3301      	adds	r3, #1
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	825a      	strh	r2, [r3, #18]
 8016ae2:	683b      	ldr	r3, [r7, #0]
 8016ae4:	8a5a      	ldrh	r2, [r3, #18]
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	8a9b      	ldrh	r3, [r3, #20]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d106      	bne.n	8016afc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f000 fe32 	bl	8017758 <dhcp_release_and_stop>
        dhcp_start(netif);
 8016af4:	6878      	ldr	r0, [r7, #4]
 8016af6:	f000 f969 	bl	8016dcc <dhcp_start>
 8016afa:	e01e      	b.n	8016b3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	8a1b      	ldrh	r3, [r3, #16]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d00b      	beq.n	8016b1c <dhcp_coarse_tmr+0x70>
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	8a1b      	ldrh	r3, [r3, #16]
 8016b08:	1e5a      	subs	r2, r3, #1
 8016b0a:	b291      	uxth	r1, r2
 8016b0c:	683a      	ldr	r2, [r7, #0]
 8016b0e:	8211      	strh	r1, [r2, #16]
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d103      	bne.n	8016b1c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 f8c6 	bl	8016ca6 <dhcp_t2_timeout>
 8016b1a:	e00e      	b.n	8016b3a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8016b1c:	683b      	ldr	r3, [r7, #0]
 8016b1e:	89db      	ldrh	r3, [r3, #14]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d00a      	beq.n	8016b3a <dhcp_coarse_tmr+0x8e>
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	89db      	ldrh	r3, [r3, #14]
 8016b28:	1e5a      	subs	r2, r3, #1
 8016b2a:	b291      	uxth	r1, r2
 8016b2c:	683a      	ldr	r2, [r7, #0]
 8016b2e:	81d1      	strh	r1, [r2, #14]
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d102      	bne.n	8016b3a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f000 f888 	bl	8016c4a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	607b      	str	r3, [r7, #4]
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d1b9      	bne.n	8016aba <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016b46:	bf00      	nop
 8016b48:	bf00      	nop
 8016b4a:	3708      	adds	r7, #8
 8016b4c:	46bd      	mov	sp, r7
 8016b4e:	bd80      	pop	{r7, pc}
 8016b50:	20013ccc 	.word	0x20013ccc

08016b54 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b082      	sub	sp, #8
 8016b58:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8016b5a:	4b16      	ldr	r3, [pc, #88]	; (8016bb4 <dhcp_fine_tmr+0x60>)
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	607b      	str	r3, [r7, #4]
 8016b60:	e020      	b.n	8016ba4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b66:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016b68:	683b      	ldr	r3, [r7, #0]
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d017      	beq.n	8016b9e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	891b      	ldrh	r3, [r3, #8]
 8016b72:	2b01      	cmp	r3, #1
 8016b74:	d906      	bls.n	8016b84 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016b76:	683b      	ldr	r3, [r7, #0]
 8016b78:	891b      	ldrh	r3, [r3, #8]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	b29a      	uxth	r2, r3
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	811a      	strh	r2, [r3, #8]
 8016b82:	e00c      	b.n	8016b9e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	891b      	ldrh	r3, [r3, #8]
 8016b88:	2b01      	cmp	r3, #1
 8016b8a:	d108      	bne.n	8016b9e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	891b      	ldrh	r3, [r3, #8]
 8016b90:	3b01      	subs	r3, #1
 8016b92:	b29a      	uxth	r2, r3
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f000 f80d 	bl	8016bb8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	607b      	str	r3, [r7, #4]
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d1db      	bne.n	8016b62 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8016baa:	bf00      	nop
 8016bac:	bf00      	nop
 8016bae:	3708      	adds	r7, #8
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	20013ccc 	.word	0x20013ccc

08016bb8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016bc4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	795b      	ldrb	r3, [r3, #5]
 8016bca:	2b0c      	cmp	r3, #12
 8016bcc:	d003      	beq.n	8016bd6 <dhcp_timeout+0x1e>
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	795b      	ldrb	r3, [r3, #5]
 8016bd2:	2b06      	cmp	r3, #6
 8016bd4:	d103      	bne.n	8016bde <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016bd6:	6878      	ldr	r0, [r7, #4]
 8016bd8:	f000 fa54 	bl	8017084 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016bdc:	e031      	b.n	8016c42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	795b      	ldrb	r3, [r3, #5]
 8016be2:	2b01      	cmp	r3, #1
 8016be4:	d10e      	bne.n	8016c04 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	799b      	ldrb	r3, [r3, #6]
 8016bea:	2b05      	cmp	r3, #5
 8016bec:	d803      	bhi.n	8016bf6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f7ff fe60 	bl	80168b4 <dhcp_select>
}
 8016bf4:	e025      	b.n	8016c42 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f000 fdae 	bl	8017758 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 f8e5 	bl	8016dcc <dhcp_start>
}
 8016c02:	e01e      	b.n	8016c42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	795b      	ldrb	r3, [r3, #5]
 8016c08:	2b08      	cmp	r3, #8
 8016c0a:	d10b      	bne.n	8016c24 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	799b      	ldrb	r3, [r3, #6]
 8016c10:	2b01      	cmp	r3, #1
 8016c12:	d803      	bhi.n	8016c1c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f7ff fdf3 	bl	8016800 <dhcp_check>
}
 8016c1a:	e012      	b.n	8016c42 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f000 fad3 	bl	80171c8 <dhcp_bind>
}
 8016c22:	e00e      	b.n	8016c42 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	795b      	ldrb	r3, [r3, #5]
 8016c28:	2b03      	cmp	r3, #3
 8016c2a:	d10a      	bne.n	8016c42 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	799b      	ldrb	r3, [r3, #6]
 8016c30:	2b01      	cmp	r3, #1
 8016c32:	d803      	bhi.n	8016c3c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f000 fcd9 	bl	80175ec <dhcp_reboot>
}
 8016c3a:	e002      	b.n	8016c42 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8016c3c:	6878      	ldr	r0, [r7, #4]
 8016c3e:	f000 fa21 	bl	8017084 <dhcp_discover>
}
 8016c42:	bf00      	nop
 8016c44:	3710      	adds	r7, #16
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}

08016c4a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8016c4a:	b580      	push	{r7, lr}
 8016c4c:	b084      	sub	sp, #16
 8016c4e:	af00      	add	r7, sp, #0
 8016c50:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	795b      	ldrb	r3, [r3, #5]
 8016c5c:	2b01      	cmp	r3, #1
 8016c5e:	d007      	beq.n	8016c70 <dhcp_t1_timeout+0x26>
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	795b      	ldrb	r3, [r3, #5]
 8016c64:	2b0a      	cmp	r3, #10
 8016c66:	d003      	beq.n	8016c70 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016c6c:	2b05      	cmp	r3, #5
 8016c6e:	d116      	bne.n	8016c9e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016c70:	6878      	ldr	r0, [r7, #4]
 8016c72:	f000 fb83 	bl	801737c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	899b      	ldrh	r3, [r3, #12]
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	8a5b      	ldrh	r3, [r3, #18]
 8016c80:	1ad3      	subs	r3, r2, r3
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	dd0b      	ble.n	8016c9e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016c86:	68fb      	ldr	r3, [r7, #12]
 8016c88:	899b      	ldrh	r3, [r3, #12]
 8016c8a:	461a      	mov	r2, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	8a5b      	ldrh	r3, [r3, #18]
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	0fda      	lsrs	r2, r3, #31
 8016c94:	4413      	add	r3, r2
 8016c96:	105b      	asrs	r3, r3, #1
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8016c9e:	bf00      	nop
 8016ca0:	3710      	adds	r7, #16
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b084      	sub	sp, #16
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cb2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	795b      	ldrb	r3, [r3, #5]
 8016cb8:	2b01      	cmp	r3, #1
 8016cba:	d00b      	beq.n	8016cd4 <dhcp_t2_timeout+0x2e>
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	795b      	ldrb	r3, [r3, #5]
 8016cc0:	2b0a      	cmp	r3, #10
 8016cc2:	d007      	beq.n	8016cd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016cc8:	2b05      	cmp	r3, #5
 8016cca:	d003      	beq.n	8016cd4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	795b      	ldrb	r3, [r3, #5]
 8016cd0:	2b04      	cmp	r3, #4
 8016cd2:	d116      	bne.n	8016d02 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016cd4:	6878      	ldr	r0, [r7, #4]
 8016cd6:	f000 fbed 	bl	80174b4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	8a9b      	ldrh	r3, [r3, #20]
 8016cde:	461a      	mov	r2, r3
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	8a5b      	ldrh	r3, [r3, #18]
 8016ce4:	1ad3      	subs	r3, r2, r3
 8016ce6:	2b01      	cmp	r3, #1
 8016ce8:	dd0b      	ble.n	8016d02 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	8a9b      	ldrh	r3, [r3, #20]
 8016cee:	461a      	mov	r2, r3
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	8a5b      	ldrh	r3, [r3, #18]
 8016cf4:	1ad3      	subs	r3, r2, r3
 8016cf6:	0fda      	lsrs	r2, r3, #31
 8016cf8:	4413      	add	r3, r2
 8016cfa:	105b      	asrs	r3, r3, #1
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8016d02:	bf00      	nop
 8016d04:	3710      	adds	r7, #16
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}
	...

08016d0c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b084      	sub	sp, #16
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d1a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	2200      	movs	r2, #0
 8016d26:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8016d28:	4b26      	ldr	r3, [pc, #152]	; (8016dc4 <dhcp_handle_ack+0xb8>)
 8016d2a:	78db      	ldrb	r3, [r3, #3]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d003      	beq.n	8016d38 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016d30:	4b25      	ldr	r3, [pc, #148]	; (8016dc8 <dhcp_handle_ack+0xbc>)
 8016d32:	68da      	ldr	r2, [r3, #12]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8016d38:	4b22      	ldr	r3, [pc, #136]	; (8016dc4 <dhcp_handle_ack+0xb8>)
 8016d3a:	791b      	ldrb	r3, [r3, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d004      	beq.n	8016d4a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016d40:	4b21      	ldr	r3, [pc, #132]	; (8016dc8 <dhcp_handle_ack+0xbc>)
 8016d42:	691a      	ldr	r2, [r3, #16]
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8016d48:	e004      	b.n	8016d54 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d4e:	085a      	lsrs	r2, r3, #1
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016d54:	4b1b      	ldr	r3, [pc, #108]	; (8016dc4 <dhcp_handle_ack+0xb8>)
 8016d56:	795b      	ldrb	r3, [r3, #5]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d004      	beq.n	8016d66 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016d5c:	4b1a      	ldr	r3, [pc, #104]	; (8016dc8 <dhcp_handle_ack+0xbc>)
 8016d5e:	695a      	ldr	r2, [r3, #20]
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	631a      	str	r2, [r3, #48]	; 0x30
 8016d64:	e007      	b.n	8016d76 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d6a:	4613      	mov	r3, r2
 8016d6c:	00db      	lsls	r3, r3, #3
 8016d6e:	1a9b      	subs	r3, r3, r2
 8016d70:	08da      	lsrs	r2, r3, #3
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	691a      	ldr	r2, [r3, #16]
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016d7e:	4b11      	ldr	r3, [pc, #68]	; (8016dc4 <dhcp_handle_ack+0xb8>)
 8016d80:	799b      	ldrb	r3, [r3, #6]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d00b      	beq.n	8016d9e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016d86:	4b10      	ldr	r3, [pc, #64]	; (8016dc8 <dhcp_handle_ack+0xbc>)
 8016d88:	699b      	ldr	r3, [r3, #24]
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7f6 fc77 	bl	800d67e <lwip_htonl>
 8016d90:	4602      	mov	r2, r0
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	2201      	movs	r2, #1
 8016d9a:	71da      	strb	r2, [r3, #7]
 8016d9c:	e002      	b.n	8016da4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	2200      	movs	r2, #0
 8016da2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016da4:	4b07      	ldr	r3, [pc, #28]	; (8016dc4 <dhcp_handle_ack+0xb8>)
 8016da6:	79db      	ldrb	r3, [r3, #7]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d007      	beq.n	8016dbc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016dac:	4b06      	ldr	r3, [pc, #24]	; (8016dc8 <dhcp_handle_ack+0xbc>)
 8016dae:	69db      	ldr	r3, [r3, #28]
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7f6 fc64 	bl	800d67e <lwip_htonl>
 8016db6:	4602      	mov	r2, r0
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016dbc:	bf00      	nop
 8016dbe:	3710      	adds	r7, #16
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	20013d5c 	.word	0x20013d5c
 8016dc8:	20013d3c 	.word	0x20013d3c

08016dcc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b084      	sub	sp, #16
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d109      	bne.n	8016dee <dhcp_start+0x22>
 8016dda:	4b37      	ldr	r3, [pc, #220]	; (8016eb8 <dhcp_start+0xec>)
 8016ddc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8016de0:	4936      	ldr	r1, [pc, #216]	; (8016ebc <dhcp_start+0xf0>)
 8016de2:	4837      	ldr	r0, [pc, #220]	; (8016ec0 <dhcp_start+0xf4>)
 8016de4:	f005 f820 	bl	801be28 <iprintf>
 8016de8:	f06f 030f 	mvn.w	r3, #15
 8016dec:	e060      	b.n	8016eb0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016df4:	f003 0301 	and.w	r3, r3, #1
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d109      	bne.n	8016e10 <dhcp_start+0x44>
 8016dfc:	4b2e      	ldr	r3, [pc, #184]	; (8016eb8 <dhcp_start+0xec>)
 8016dfe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8016e02:	4930      	ldr	r1, [pc, #192]	; (8016ec4 <dhcp_start+0xf8>)
 8016e04:	482e      	ldr	r0, [pc, #184]	; (8016ec0 <dhcp_start+0xf4>)
 8016e06:	f005 f80f 	bl	801be28 <iprintf>
 8016e0a:	f06f 030f 	mvn.w	r3, #15
 8016e0e:	e04f      	b.n	8016eb0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016e1a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8016e1e:	d202      	bcs.n	8016e26 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8016e20:	f04f 33ff 	mov.w	r3, #4294967295
 8016e24:	e044      	b.n	8016eb0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d10d      	bne.n	8016e48 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8016e2c:	2034      	movs	r0, #52	; 0x34
 8016e2e:	f7f7 f8bd 	bl	800dfac <mem_malloc>
 8016e32:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d102      	bne.n	8016e40 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8016e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016e3e:	e037      	b.n	8016eb0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	625a      	str	r2, [r3, #36]	; 0x24
 8016e46:	e005      	b.n	8016e54 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	791b      	ldrb	r3, [r3, #4]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d001      	beq.n	8016e54 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016e50:	f7ff fc92 	bl	8016778 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016e54:	2234      	movs	r2, #52	; 0x34
 8016e56:	2100      	movs	r1, #0
 8016e58:	68f8      	ldr	r0, [r7, #12]
 8016e5a:	f005 f94f 	bl	801c0fc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8016e5e:	f7ff fc39 	bl	80166d4 <dhcp_inc_pcb_refcount>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <dhcp_start+0xa2>
    return ERR_MEM;
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	e020      	b.n	8016eb0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2201      	movs	r2, #1
 8016e72:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016e7a:	f003 0304 	and.w	r3, r3, #4
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d105      	bne.n	8016e8e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016e82:	2102      	movs	r1, #2
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	f000 fd0c 	bl	80178a2 <dhcp_set_state>
    return ERR_OK;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	e010      	b.n	8016eb0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f000 f8f8 	bl	8017084 <dhcp_discover>
 8016e94:	4603      	mov	r3, r0
 8016e96:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016e98:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d005      	beq.n	8016eac <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016ea0:	6878      	ldr	r0, [r7, #4]
 8016ea2:	f000 fc59 	bl	8017758 <dhcp_release_and_stop>
    return ERR_MEM;
 8016ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8016eaa:	e001      	b.n	8016eb0 <dhcp_start+0xe4>
  }
  return result;
 8016eac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3710      	adds	r7, #16
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	08021678 	.word	0x08021678
 8016ebc:	0802175c 	.word	0x0802175c
 8016ec0:	080216d8 	.word	0x080216d8
 8016ec4:	080217a0 	.word	0x080217a0

08016ec8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d025      	beq.n	8016f28 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	795b      	ldrb	r3, [r3, #5]
 8016ee0:	2b0a      	cmp	r3, #10
 8016ee2:	d008      	beq.n	8016ef6 <dhcp_network_changed+0x2e>
 8016ee4:	2b0a      	cmp	r3, #10
 8016ee6:	dc0d      	bgt.n	8016f04 <dhcp_network_changed+0x3c>
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d01f      	beq.n	8016f2c <dhcp_network_changed+0x64>
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	db09      	blt.n	8016f04 <dhcp_network_changed+0x3c>
 8016ef0:	3b03      	subs	r3, #3
 8016ef2:	2b02      	cmp	r3, #2
 8016ef4:	d806      	bhi.n	8016f04 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	2200      	movs	r2, #0
 8016efa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 fb75 	bl	80175ec <dhcp_reboot>
      break;
 8016f02:	e014      	b.n	8016f2e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	795b      	ldrb	r3, [r3, #5]
 8016f08:	2b0c      	cmp	r3, #12
 8016f0a:	d906      	bls.n	8016f1a <dhcp_network_changed+0x52>
 8016f0c:	4b09      	ldr	r3, [pc, #36]	; (8016f34 <dhcp_network_changed+0x6c>)
 8016f0e:	f240 326d 	movw	r2, #877	; 0x36d
 8016f12:	4909      	ldr	r1, [pc, #36]	; (8016f38 <dhcp_network_changed+0x70>)
 8016f14:	4809      	ldr	r0, [pc, #36]	; (8016f3c <dhcp_network_changed+0x74>)
 8016f16:	f004 ff87 	bl	801be28 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	2200      	movs	r2, #0
 8016f1e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	f000 f8af 	bl	8017084 <dhcp_discover>
      break;
 8016f26:	e002      	b.n	8016f2e <dhcp_network_changed+0x66>
    return;
 8016f28:	bf00      	nop
 8016f2a:	e000      	b.n	8016f2e <dhcp_network_changed+0x66>
      break;
 8016f2c:	bf00      	nop
  }
}
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	08021678 	.word	0x08021678
 8016f38:	080217c4 	.word	0x080217c4
 8016f3c:	080216d8 	.word	0x080216d8

08016f40 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d107      	bne.n	8016f60 <dhcp_arp_reply+0x20>
 8016f50:	4b0e      	ldr	r3, [pc, #56]	; (8016f8c <dhcp_arp_reply+0x4c>)
 8016f52:	f240 328b 	movw	r2, #907	; 0x38b
 8016f56:	490e      	ldr	r1, [pc, #56]	; (8016f90 <dhcp_arp_reply+0x50>)
 8016f58:	480e      	ldr	r0, [pc, #56]	; (8016f94 <dhcp_arp_reply+0x54>)
 8016f5a:	f004 ff65 	bl	801be28 <iprintf>
 8016f5e:	e012      	b.n	8016f86 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f64:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d00c      	beq.n	8016f86 <dhcp_arp_reply+0x46>
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	795b      	ldrb	r3, [r3, #5]
 8016f70:	2b08      	cmp	r3, #8
 8016f72:	d108      	bne.n	8016f86 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	69db      	ldr	r3, [r3, #28]
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	d102      	bne.n	8016f86 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016f80:	6878      	ldr	r0, [r7, #4]
 8016f82:	f000 f809 	bl	8016f98 <dhcp_decline>
    }
  }
}
 8016f86:	3710      	adds	r7, #16
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd80      	pop	{r7, pc}
 8016f8c:	08021678 	.word	0x08021678
 8016f90:	0802175c 	.word	0x0802175c
 8016f94:	080216d8 	.word	0x080216d8

08016f98 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016f98:	b5b0      	push	{r4, r5, r7, lr}
 8016f9a:	b08a      	sub	sp, #40	; 0x28
 8016f9c:	af02      	add	r7, sp, #8
 8016f9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fa4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016fa6:	210c      	movs	r1, #12
 8016fa8:	69b8      	ldr	r0, [r7, #24]
 8016faa:	f000 fc7a 	bl	80178a2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8016fae:	f107 030c 	add.w	r3, r7, #12
 8016fb2:	2204      	movs	r2, #4
 8016fb4:	69b9      	ldr	r1, [r7, #24]
 8016fb6:	6878      	ldr	r0, [r7, #4]
 8016fb8:	f001 f90c 	bl	80181d4 <dhcp_create_msg>
 8016fbc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016fbe:	697b      	ldr	r3, [r7, #20]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d035      	beq.n	8017030 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016fca:	89b8      	ldrh	r0, [r7, #12]
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016fd2:	2304      	movs	r3, #4
 8016fd4:	2232      	movs	r2, #50	; 0x32
 8016fd6:	f000 fc7f 	bl	80178d8 <dhcp_option>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016fde:	89bc      	ldrh	r4, [r7, #12]
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016fe6:	69bb      	ldr	r3, [r7, #24]
 8016fe8:	69db      	ldr	r3, [r3, #28]
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7f6 fb47 	bl	800d67e <lwip_htonl>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	461a      	mov	r2, r3
 8016ff4:	4629      	mov	r1, r5
 8016ff6:	4620      	mov	r0, r4
 8016ff8:	f000 fcfa 	bl	80179f0 <dhcp_option_long>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017000:	89b8      	ldrh	r0, [r7, #12]
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	33f0      	adds	r3, #240	; 0xf0
 8017006:	697a      	ldr	r2, [r7, #20]
 8017008:	4619      	mov	r1, r3
 801700a:	f001 f9b9 	bl	8018380 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801700e:	4b19      	ldr	r3, [pc, #100]	; (8017074 <dhcp_decline+0xdc>)
 8017010:	6818      	ldr	r0, [r3, #0]
 8017012:	4b19      	ldr	r3, [pc, #100]	; (8017078 <dhcp_decline+0xe0>)
 8017014:	9301      	str	r3, [sp, #4]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	9300      	str	r3, [sp, #0]
 801701a:	2343      	movs	r3, #67	; 0x43
 801701c:	4a17      	ldr	r2, [pc, #92]	; (801707c <dhcp_decline+0xe4>)
 801701e:	6979      	ldr	r1, [r7, #20]
 8017020:	f7ff f890 	bl	8016144 <udp_sendto_if_src>
 8017024:	4603      	mov	r3, r0
 8017026:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017028:	6978      	ldr	r0, [r7, #20]
 801702a:	f7f8 f835 	bl	800f098 <pbuf_free>
 801702e:	e001      	b.n	8017034 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017030:	23ff      	movs	r3, #255	; 0xff
 8017032:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8017034:	69bb      	ldr	r3, [r7, #24]
 8017036:	799b      	ldrb	r3, [r3, #6]
 8017038:	2bff      	cmp	r3, #255	; 0xff
 801703a:	d005      	beq.n	8017048 <dhcp_decline+0xb0>
    dhcp->tries++;
 801703c:	69bb      	ldr	r3, [r7, #24]
 801703e:	799b      	ldrb	r3, [r3, #6]
 8017040:	3301      	adds	r3, #1
 8017042:	b2da      	uxtb	r2, r3
 8017044:	69bb      	ldr	r3, [r7, #24]
 8017046:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8017048:	f242 7310 	movw	r3, #10000	; 0x2710
 801704c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801704e:	89fb      	ldrh	r3, [r7, #14]
 8017050:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017054:	4a0a      	ldr	r2, [pc, #40]	; (8017080 <dhcp_decline+0xe8>)
 8017056:	fb82 1203 	smull	r1, r2, r2, r3
 801705a:	1152      	asrs	r2, r2, #5
 801705c:	17db      	asrs	r3, r3, #31
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	b29a      	uxth	r2, r3
 8017062:	69bb      	ldr	r3, [r7, #24]
 8017064:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8017066:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801706a:	4618      	mov	r0, r3
 801706c:	3720      	adds	r7, #32
 801706e:	46bd      	mov	sp, r7
 8017070:	bdb0      	pop	{r4, r5, r7, pc}
 8017072:	bf00      	nop
 8017074:	20013d64 	.word	0x20013d64
 8017078:	0806df40 	.word	0x0806df40
 801707c:	0806df44 	.word	0x0806df44
 8017080:	10624dd3 	.word	0x10624dd3

08017084 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b08a      	sub	sp, #40	; 0x28
 8017088:	af02      	add	r7, sp, #8
 801708a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017090:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8017092:	2300      	movs	r3, #0
 8017094:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	2200      	movs	r2, #0
 801709a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801709c:	2106      	movs	r1, #6
 801709e:	69b8      	ldr	r0, [r7, #24]
 80170a0:	f000 fbff 	bl	80178a2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80170a4:	f107 0308 	add.w	r3, r7, #8
 80170a8:	2201      	movs	r2, #1
 80170aa:	69b9      	ldr	r1, [r7, #24]
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f001 f891 	bl	80181d4 <dhcp_create_msg>
 80170b2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d04b      	beq.n	8017152 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80170ba:	693b      	ldr	r3, [r7, #16]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80170c0:	8938      	ldrh	r0, [r7, #8]
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170c8:	2302      	movs	r3, #2
 80170ca:	2239      	movs	r2, #57	; 0x39
 80170cc:	f000 fc04 	bl	80178d8 <dhcp_option>
 80170d0:	4603      	mov	r3, r0
 80170d2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80170d4:	8938      	ldrh	r0, [r7, #8]
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80170e0:	461a      	mov	r2, r3
 80170e2:	f000 fc53 	bl	801798c <dhcp_option_short>
 80170e6:	4603      	mov	r3, r0
 80170e8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80170ea:	8938      	ldrh	r0, [r7, #8]
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80170f2:	2303      	movs	r3, #3
 80170f4:	2237      	movs	r2, #55	; 0x37
 80170f6:	f000 fbef 	bl	80178d8 <dhcp_option>
 80170fa:	4603      	mov	r3, r0
 80170fc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80170fe:	2300      	movs	r3, #0
 8017100:	77fb      	strb	r3, [r7, #31]
 8017102:	e00e      	b.n	8017122 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017104:	8938      	ldrh	r0, [r7, #8]
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801710c:	7ffb      	ldrb	r3, [r7, #31]
 801710e:	4a29      	ldr	r2, [pc, #164]	; (80171b4 <dhcp_discover+0x130>)
 8017110:	5cd3      	ldrb	r3, [r2, r3]
 8017112:	461a      	mov	r2, r3
 8017114:	f000 fc14 	bl	8017940 <dhcp_option_byte>
 8017118:	4603      	mov	r3, r0
 801711a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801711c:	7ffb      	ldrb	r3, [r7, #31]
 801711e:	3301      	adds	r3, #1
 8017120:	77fb      	strb	r3, [r7, #31]
 8017122:	7ffb      	ldrb	r3, [r7, #31]
 8017124:	2b02      	cmp	r3, #2
 8017126:	d9ed      	bls.n	8017104 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017128:	8938      	ldrh	r0, [r7, #8]
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	33f0      	adds	r3, #240	; 0xf0
 801712e:	693a      	ldr	r2, [r7, #16]
 8017130:	4619      	mov	r1, r3
 8017132:	f001 f925 	bl	8018380 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8017136:	4b20      	ldr	r3, [pc, #128]	; (80171b8 <dhcp_discover+0x134>)
 8017138:	6818      	ldr	r0, [r3, #0]
 801713a:	4b20      	ldr	r3, [pc, #128]	; (80171bc <dhcp_discover+0x138>)
 801713c:	9301      	str	r3, [sp, #4]
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	9300      	str	r3, [sp, #0]
 8017142:	2343      	movs	r3, #67	; 0x43
 8017144:	4a1e      	ldr	r2, [pc, #120]	; (80171c0 <dhcp_discover+0x13c>)
 8017146:	6939      	ldr	r1, [r7, #16]
 8017148:	f7fe fffc 	bl	8016144 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801714c:	6938      	ldr	r0, [r7, #16]
 801714e:	f7f7 ffa3 	bl	800f098 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	799b      	ldrb	r3, [r3, #6]
 8017156:	2bff      	cmp	r3, #255	; 0xff
 8017158:	d005      	beq.n	8017166 <dhcp_discover+0xe2>
    dhcp->tries++;
 801715a:	69bb      	ldr	r3, [r7, #24]
 801715c:	799b      	ldrb	r3, [r3, #6]
 801715e:	3301      	adds	r3, #1
 8017160:	b2da      	uxtb	r2, r3
 8017162:	69bb      	ldr	r3, [r7, #24]
 8017164:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8017166:	69bb      	ldr	r3, [r7, #24]
 8017168:	799b      	ldrb	r3, [r3, #6]
 801716a:	2b05      	cmp	r3, #5
 801716c:	d80d      	bhi.n	801718a <dhcp_discover+0x106>
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	799b      	ldrb	r3, [r3, #6]
 8017172:	461a      	mov	r2, r3
 8017174:	2301      	movs	r3, #1
 8017176:	4093      	lsls	r3, r2
 8017178:	b29b      	uxth	r3, r3
 801717a:	461a      	mov	r2, r3
 801717c:	0152      	lsls	r2, r2, #5
 801717e:	1ad2      	subs	r2, r2, r3
 8017180:	0092      	lsls	r2, r2, #2
 8017182:	4413      	add	r3, r2
 8017184:	00db      	lsls	r3, r3, #3
 8017186:	b29b      	uxth	r3, r3
 8017188:	e001      	b.n	801718e <dhcp_discover+0x10a>
 801718a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801718e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017190:	897b      	ldrh	r3, [r7, #10]
 8017192:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017196:	4a0b      	ldr	r2, [pc, #44]	; (80171c4 <dhcp_discover+0x140>)
 8017198:	fb82 1203 	smull	r1, r2, r2, r3
 801719c:	1152      	asrs	r2, r2, #5
 801719e:	17db      	asrs	r3, r3, #31
 80171a0:	1ad3      	subs	r3, r2, r3
 80171a2:	b29a      	uxth	r2, r3
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80171a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3720      	adds	r7, #32
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	200000c4 	.word	0x200000c4
 80171b8:	20013d64 	.word	0x20013d64
 80171bc:	0806df40 	.word	0x0806df40
 80171c0:	0806df44 	.word	0x0806df44
 80171c4:	10624dd3 	.word	0x10624dd3

080171c8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b088      	sub	sp, #32
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d107      	bne.n	80171e6 <dhcp_bind+0x1e>
 80171d6:	4b64      	ldr	r3, [pc, #400]	; (8017368 <dhcp_bind+0x1a0>)
 80171d8:	f240 4215 	movw	r2, #1045	; 0x415
 80171dc:	4963      	ldr	r1, [pc, #396]	; (801736c <dhcp_bind+0x1a4>)
 80171de:	4864      	ldr	r0, [pc, #400]	; (8017370 <dhcp_bind+0x1a8>)
 80171e0:	f004 fe22 	bl	801be28 <iprintf>
 80171e4:	e0bc      	b.n	8017360 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171ea:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d107      	bne.n	8017202 <dhcp_bind+0x3a>
 80171f2:	4b5d      	ldr	r3, [pc, #372]	; (8017368 <dhcp_bind+0x1a0>)
 80171f4:	f240 4217 	movw	r2, #1047	; 0x417
 80171f8:	495e      	ldr	r1, [pc, #376]	; (8017374 <dhcp_bind+0x1ac>)
 80171fa:	485d      	ldr	r0, [pc, #372]	; (8017370 <dhcp_bind+0x1a8>)
 80171fc:	f004 fe14 	bl	801be28 <iprintf>
 8017200:	e0ae      	b.n	8017360 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	2200      	movs	r2, #0
 8017206:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8017208:	69fb      	ldr	r3, [r7, #28]
 801720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017210:	d019      	beq.n	8017246 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017212:	69fb      	ldr	r3, [r7, #28]
 8017214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017216:	331e      	adds	r3, #30
 8017218:	4a57      	ldr	r2, [pc, #348]	; (8017378 <dhcp_bind+0x1b0>)
 801721a:	fba2 2303 	umull	r2, r3, r2, r3
 801721e:	095b      	lsrs	r3, r3, #5
 8017220:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017222:	69bb      	ldr	r3, [r7, #24]
 8017224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017228:	d302      	bcc.n	8017230 <dhcp_bind+0x68>
      timeout = 0xffff;
 801722a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801722e:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8017230:	69bb      	ldr	r3, [r7, #24]
 8017232:	b29a      	uxth	r2, r3
 8017234:	69fb      	ldr	r3, [r7, #28]
 8017236:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8017238:	69fb      	ldr	r3, [r7, #28]
 801723a:	8a9b      	ldrh	r3, [r3, #20]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d102      	bne.n	8017246 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8017240:	69fb      	ldr	r3, [r7, #28]
 8017242:	2201      	movs	r2, #1
 8017244:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8017246:	69fb      	ldr	r3, [r7, #28]
 8017248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801724e:	d01d      	beq.n	801728c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017250:	69fb      	ldr	r3, [r7, #28]
 8017252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017254:	331e      	adds	r3, #30
 8017256:	4a48      	ldr	r2, [pc, #288]	; (8017378 <dhcp_bind+0x1b0>)
 8017258:	fba2 2303 	umull	r2, r3, r2, r3
 801725c:	095b      	lsrs	r3, r3, #5
 801725e:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8017260:	69bb      	ldr	r3, [r7, #24]
 8017262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017266:	d302      	bcc.n	801726e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8017268:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801726c:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801726e:	69bb      	ldr	r3, [r7, #24]
 8017270:	b29a      	uxth	r2, r3
 8017272:	69fb      	ldr	r3, [r7, #28]
 8017274:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8017276:	69fb      	ldr	r3, [r7, #28]
 8017278:	895b      	ldrh	r3, [r3, #10]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d102      	bne.n	8017284 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801727e:	69fb      	ldr	r3, [r7, #28]
 8017280:	2201      	movs	r2, #1
 8017282:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8017284:	69fb      	ldr	r3, [r7, #28]
 8017286:	895a      	ldrh	r2, [r3, #10]
 8017288:	69fb      	ldr	r3, [r7, #28]
 801728a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801728c:	69fb      	ldr	r3, [r7, #28]
 801728e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017294:	d01d      	beq.n	80172d2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8017296:	69fb      	ldr	r3, [r7, #28]
 8017298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801729a:	331e      	adds	r3, #30
 801729c:	4a36      	ldr	r2, [pc, #216]	; (8017378 <dhcp_bind+0x1b0>)
 801729e:	fba2 2303 	umull	r2, r3, r2, r3
 80172a2:	095b      	lsrs	r3, r3, #5
 80172a4:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80172a6:	69bb      	ldr	r3, [r7, #24]
 80172a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172ac:	d302      	bcc.n	80172b4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80172ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80172b2:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80172b4:	69bb      	ldr	r3, [r7, #24]
 80172b6:	b29a      	uxth	r2, r3
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80172bc:	69fb      	ldr	r3, [r7, #28]
 80172be:	899b      	ldrh	r3, [r3, #12]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d102      	bne.n	80172ca <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80172c4:	69fb      	ldr	r3, [r7, #28]
 80172c6:	2201      	movs	r2, #1
 80172c8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80172ca:	69fb      	ldr	r3, [r7, #28]
 80172cc:	899a      	ldrh	r2, [r3, #12]
 80172ce:	69fb      	ldr	r3, [r7, #28]
 80172d0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80172d2:	69fb      	ldr	r3, [r7, #28]
 80172d4:	895a      	ldrh	r2, [r3, #10]
 80172d6:	69fb      	ldr	r3, [r7, #28]
 80172d8:	899b      	ldrh	r3, [r3, #12]
 80172da:	429a      	cmp	r2, r3
 80172dc:	d306      	bcc.n	80172ec <dhcp_bind+0x124>
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	899b      	ldrh	r3, [r3, #12]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d002      	beq.n	80172ec <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80172e6:	69fb      	ldr	r3, [r7, #28]
 80172e8:	2200      	movs	r2, #0
 80172ea:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80172ec:	69fb      	ldr	r3, [r7, #28]
 80172ee:	79db      	ldrb	r3, [r3, #7]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d003      	beq.n	80172fc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80172f4:	69fb      	ldr	r3, [r7, #28]
 80172f6:	6a1b      	ldr	r3, [r3, #32]
 80172f8:	613b      	str	r3, [r7, #16]
 80172fa:	e014      	b.n	8017326 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80172fc:	69fb      	ldr	r3, [r7, #28]
 80172fe:	331c      	adds	r3, #28
 8017300:	781b      	ldrb	r3, [r3, #0]
 8017302:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8017304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017308:	2b00      	cmp	r3, #0
 801730a:	db02      	blt.n	8017312 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801730c:	23ff      	movs	r3, #255	; 0xff
 801730e:	613b      	str	r3, [r7, #16]
 8017310:	e009      	b.n	8017326 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8017312:	7dfb      	ldrb	r3, [r7, #23]
 8017314:	2bbf      	cmp	r3, #191	; 0xbf
 8017316:	d903      	bls.n	8017320 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8017318:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801731c:	613b      	str	r3, [r7, #16]
 801731e:	e002      	b.n	8017326 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8017320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017324:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8017326:	69fb      	ldr	r3, [r7, #28]
 8017328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801732a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d108      	bne.n	8017344 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	69da      	ldr	r2, [r3, #28]
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	4013      	ands	r3, r2
 801733a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017342:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8017344:	210a      	movs	r1, #10
 8017346:	69f8      	ldr	r0, [r7, #28]
 8017348:	f000 faab 	bl	80178a2 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801734c:	69fb      	ldr	r3, [r7, #28]
 801734e:	f103 011c 	add.w	r1, r3, #28
 8017352:	f107 030c 	add.w	r3, r7, #12
 8017356:	f107 0210 	add.w	r2, r7, #16
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7f7 f99c 	bl	800e698 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8017360:	3720      	adds	r7, #32
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	08021678 	.word	0x08021678
 801736c:	080217d8 	.word	0x080217d8
 8017370:	080216d8 	.word	0x080216d8
 8017374:	080217f4 	.word	0x080217f4
 8017378:	88888889 	.word	0x88888889

0801737c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08a      	sub	sp, #40	; 0x28
 8017380:	af02      	add	r7, sp, #8
 8017382:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017388:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801738a:	2105      	movs	r1, #5
 801738c:	69b8      	ldr	r0, [r7, #24]
 801738e:	f000 fa88 	bl	80178a2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017392:	f107 030c 	add.w	r3, r7, #12
 8017396:	2203      	movs	r2, #3
 8017398:	69b9      	ldr	r1, [r7, #24]
 801739a:	6878      	ldr	r0, [r7, #4]
 801739c:	f000 ff1a 	bl	80181d4 <dhcp_create_msg>
 80173a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80173a2:	697b      	ldr	r3, [r7, #20]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d04e      	beq.n	8017446 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	685b      	ldr	r3, [r3, #4]
 80173ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80173ae:	89b8      	ldrh	r0, [r7, #12]
 80173b0:	693b      	ldr	r3, [r7, #16]
 80173b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173b6:	2302      	movs	r3, #2
 80173b8:	2239      	movs	r2, #57	; 0x39
 80173ba:	f000 fa8d 	bl	80178d8 <dhcp_option>
 80173be:	4603      	mov	r3, r0
 80173c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80173c2:	89b8      	ldrh	r0, [r7, #12]
 80173c4:	693b      	ldr	r3, [r7, #16]
 80173c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80173ce:	461a      	mov	r2, r3
 80173d0:	f000 fadc 	bl	801798c <dhcp_option_short>
 80173d4:	4603      	mov	r3, r0
 80173d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80173d8:	89b8      	ldrh	r0, [r7, #12]
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173e0:	2303      	movs	r3, #3
 80173e2:	2237      	movs	r2, #55	; 0x37
 80173e4:	f000 fa78 	bl	80178d8 <dhcp_option>
 80173e8:	4603      	mov	r3, r0
 80173ea:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80173ec:	2300      	movs	r3, #0
 80173ee:	77bb      	strb	r3, [r7, #30]
 80173f0:	e00e      	b.n	8017410 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80173f2:	89b8      	ldrh	r0, [r7, #12]
 80173f4:	693b      	ldr	r3, [r7, #16]
 80173f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80173fa:	7fbb      	ldrb	r3, [r7, #30]
 80173fc:	4a2a      	ldr	r2, [pc, #168]	; (80174a8 <dhcp_renew+0x12c>)
 80173fe:	5cd3      	ldrb	r3, [r2, r3]
 8017400:	461a      	mov	r2, r3
 8017402:	f000 fa9d 	bl	8017940 <dhcp_option_byte>
 8017406:	4603      	mov	r3, r0
 8017408:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801740a:	7fbb      	ldrb	r3, [r7, #30]
 801740c:	3301      	adds	r3, #1
 801740e:	77bb      	strb	r3, [r7, #30]
 8017410:	7fbb      	ldrb	r3, [r7, #30]
 8017412:	2b02      	cmp	r3, #2
 8017414:	d9ed      	bls.n	80173f2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017416:	89b8      	ldrh	r0, [r7, #12]
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	33f0      	adds	r3, #240	; 0xf0
 801741c:	697a      	ldr	r2, [r7, #20]
 801741e:	4619      	mov	r1, r3
 8017420:	f000 ffae 	bl	8018380 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017424:	4b21      	ldr	r3, [pc, #132]	; (80174ac <dhcp_renew+0x130>)
 8017426:	6818      	ldr	r0, [r3, #0]
 8017428:	69bb      	ldr	r3, [r7, #24]
 801742a:	f103 0218 	add.w	r2, r3, #24
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	2343      	movs	r3, #67	; 0x43
 8017434:	6979      	ldr	r1, [r7, #20]
 8017436:	f7fe fe11 	bl	801605c <udp_sendto_if>
 801743a:	4603      	mov	r3, r0
 801743c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801743e:	6978      	ldr	r0, [r7, #20]
 8017440:	f7f7 fe2a 	bl	800f098 <pbuf_free>
 8017444:	e001      	b.n	801744a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8017446:	23ff      	movs	r3, #255	; 0xff
 8017448:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801744a:	69bb      	ldr	r3, [r7, #24]
 801744c:	799b      	ldrb	r3, [r3, #6]
 801744e:	2bff      	cmp	r3, #255	; 0xff
 8017450:	d005      	beq.n	801745e <dhcp_renew+0xe2>
    dhcp->tries++;
 8017452:	69bb      	ldr	r3, [r7, #24]
 8017454:	799b      	ldrb	r3, [r3, #6]
 8017456:	3301      	adds	r3, #1
 8017458:	b2da      	uxtb	r2, r3
 801745a:	69bb      	ldr	r3, [r7, #24]
 801745c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801745e:	69bb      	ldr	r3, [r7, #24]
 8017460:	799b      	ldrb	r3, [r3, #6]
 8017462:	2b09      	cmp	r3, #9
 8017464:	d80a      	bhi.n	801747c <dhcp_renew+0x100>
 8017466:	69bb      	ldr	r3, [r7, #24]
 8017468:	799b      	ldrb	r3, [r3, #6]
 801746a:	b29b      	uxth	r3, r3
 801746c:	461a      	mov	r2, r3
 801746e:	0152      	lsls	r2, r2, #5
 8017470:	1ad2      	subs	r2, r2, r3
 8017472:	0092      	lsls	r2, r2, #2
 8017474:	4413      	add	r3, r2
 8017476:	011b      	lsls	r3, r3, #4
 8017478:	b29b      	uxth	r3, r3
 801747a:	e001      	b.n	8017480 <dhcp_renew+0x104>
 801747c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017480:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017482:	89fb      	ldrh	r3, [r7, #14]
 8017484:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017488:	4a09      	ldr	r2, [pc, #36]	; (80174b0 <dhcp_renew+0x134>)
 801748a:	fb82 1203 	smull	r1, r2, r2, r3
 801748e:	1152      	asrs	r2, r2, #5
 8017490:	17db      	asrs	r3, r3, #31
 8017492:	1ad3      	subs	r3, r2, r3
 8017494:	b29a      	uxth	r2, r3
 8017496:	69bb      	ldr	r3, [r7, #24]
 8017498:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801749a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3720      	adds	r7, #32
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	200000c4 	.word	0x200000c4
 80174ac:	20013d64 	.word	0x20013d64
 80174b0:	10624dd3 	.word	0x10624dd3

080174b4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b08a      	sub	sp, #40	; 0x28
 80174b8:	af02      	add	r7, sp, #8
 80174ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174c0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80174c2:	2104      	movs	r1, #4
 80174c4:	69b8      	ldr	r0, [r7, #24]
 80174c6:	f000 f9ec 	bl	80178a2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80174ca:	f107 030c 	add.w	r3, r7, #12
 80174ce:	2203      	movs	r2, #3
 80174d0:	69b9      	ldr	r1, [r7, #24]
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f000 fe7e 	bl	80181d4 <dhcp_create_msg>
 80174d8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80174da:	697b      	ldr	r3, [r7, #20]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d04c      	beq.n	801757a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80174e0:	697b      	ldr	r3, [r7, #20]
 80174e2:	685b      	ldr	r3, [r3, #4]
 80174e4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80174e6:	89b8      	ldrh	r0, [r7, #12]
 80174e8:	693b      	ldr	r3, [r7, #16]
 80174ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80174ee:	2302      	movs	r3, #2
 80174f0:	2239      	movs	r2, #57	; 0x39
 80174f2:	f000 f9f1 	bl	80178d8 <dhcp_option>
 80174f6:	4603      	mov	r3, r0
 80174f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80174fa:	89b8      	ldrh	r0, [r7, #12]
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017506:	461a      	mov	r2, r3
 8017508:	f000 fa40 	bl	801798c <dhcp_option_short>
 801750c:	4603      	mov	r3, r0
 801750e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8017510:	89b8      	ldrh	r0, [r7, #12]
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017518:	2303      	movs	r3, #3
 801751a:	2237      	movs	r2, #55	; 0x37
 801751c:	f000 f9dc 	bl	80178d8 <dhcp_option>
 8017520:	4603      	mov	r3, r0
 8017522:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017524:	2300      	movs	r3, #0
 8017526:	77bb      	strb	r3, [r7, #30]
 8017528:	e00e      	b.n	8017548 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801752a:	89b8      	ldrh	r0, [r7, #12]
 801752c:	693b      	ldr	r3, [r7, #16]
 801752e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017532:	7fbb      	ldrb	r3, [r7, #30]
 8017534:	4a29      	ldr	r2, [pc, #164]	; (80175dc <dhcp_rebind+0x128>)
 8017536:	5cd3      	ldrb	r3, [r2, r3]
 8017538:	461a      	mov	r2, r3
 801753a:	f000 fa01 	bl	8017940 <dhcp_option_byte>
 801753e:	4603      	mov	r3, r0
 8017540:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017542:	7fbb      	ldrb	r3, [r7, #30]
 8017544:	3301      	adds	r3, #1
 8017546:	77bb      	strb	r3, [r7, #30]
 8017548:	7fbb      	ldrb	r3, [r7, #30]
 801754a:	2b02      	cmp	r3, #2
 801754c:	d9ed      	bls.n	801752a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801754e:	89b8      	ldrh	r0, [r7, #12]
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	33f0      	adds	r3, #240	; 0xf0
 8017554:	697a      	ldr	r2, [r7, #20]
 8017556:	4619      	mov	r1, r3
 8017558:	f000 ff12 	bl	8018380 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801755c:	4b20      	ldr	r3, [pc, #128]	; (80175e0 <dhcp_rebind+0x12c>)
 801755e:	6818      	ldr	r0, [r3, #0]
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	9300      	str	r3, [sp, #0]
 8017564:	2343      	movs	r3, #67	; 0x43
 8017566:	4a1f      	ldr	r2, [pc, #124]	; (80175e4 <dhcp_rebind+0x130>)
 8017568:	6979      	ldr	r1, [r7, #20]
 801756a:	f7fe fd77 	bl	801605c <udp_sendto_if>
 801756e:	4603      	mov	r3, r0
 8017570:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8017572:	6978      	ldr	r0, [r7, #20]
 8017574:	f7f7 fd90 	bl	800f098 <pbuf_free>
 8017578:	e001      	b.n	801757e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801757a:	23ff      	movs	r3, #255	; 0xff
 801757c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	799b      	ldrb	r3, [r3, #6]
 8017582:	2bff      	cmp	r3, #255	; 0xff
 8017584:	d005      	beq.n	8017592 <dhcp_rebind+0xde>
    dhcp->tries++;
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	799b      	ldrb	r3, [r3, #6]
 801758a:	3301      	adds	r3, #1
 801758c:	b2da      	uxtb	r2, r3
 801758e:	69bb      	ldr	r3, [r7, #24]
 8017590:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8017592:	69bb      	ldr	r3, [r7, #24]
 8017594:	799b      	ldrb	r3, [r3, #6]
 8017596:	2b09      	cmp	r3, #9
 8017598:	d80a      	bhi.n	80175b0 <dhcp_rebind+0xfc>
 801759a:	69bb      	ldr	r3, [r7, #24]
 801759c:	799b      	ldrb	r3, [r3, #6]
 801759e:	b29b      	uxth	r3, r3
 80175a0:	461a      	mov	r2, r3
 80175a2:	0152      	lsls	r2, r2, #5
 80175a4:	1ad2      	subs	r2, r2, r3
 80175a6:	0092      	lsls	r2, r2, #2
 80175a8:	4413      	add	r3, r2
 80175aa:	00db      	lsls	r3, r3, #3
 80175ac:	b29b      	uxth	r3, r3
 80175ae:	e001      	b.n	80175b4 <dhcp_rebind+0x100>
 80175b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80175b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80175b6:	89fb      	ldrh	r3, [r7, #14]
 80175b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80175bc:	4a0a      	ldr	r2, [pc, #40]	; (80175e8 <dhcp_rebind+0x134>)
 80175be:	fb82 1203 	smull	r1, r2, r2, r3
 80175c2:	1152      	asrs	r2, r2, #5
 80175c4:	17db      	asrs	r3, r3, #31
 80175c6:	1ad3      	subs	r3, r2, r3
 80175c8:	b29a      	uxth	r2, r3
 80175ca:	69bb      	ldr	r3, [r7, #24]
 80175cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80175ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3720      	adds	r7, #32
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	200000c4 	.word	0x200000c4
 80175e0:	20013d64 	.word	0x20013d64
 80175e4:	0806df44 	.word	0x0806df44
 80175e8:	10624dd3 	.word	0x10624dd3

080175ec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80175ec:	b5b0      	push	{r4, r5, r7, lr}
 80175ee:	b08a      	sub	sp, #40	; 0x28
 80175f0:	af02      	add	r7, sp, #8
 80175f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175f8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80175fa:	2103      	movs	r1, #3
 80175fc:	69b8      	ldr	r0, [r7, #24]
 80175fe:	f000 f950 	bl	80178a2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8017602:	f107 030c 	add.w	r3, r7, #12
 8017606:	2203      	movs	r2, #3
 8017608:	69b9      	ldr	r1, [r7, #24]
 801760a:	6878      	ldr	r0, [r7, #4]
 801760c:	f000 fde2 	bl	80181d4 <dhcp_create_msg>
 8017610:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8017612:	697b      	ldr	r3, [r7, #20]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d066      	beq.n	80176e6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017618:	697b      	ldr	r3, [r7, #20]
 801761a:	685b      	ldr	r3, [r3, #4]
 801761c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801761e:	89b8      	ldrh	r0, [r7, #12]
 8017620:	693b      	ldr	r3, [r7, #16]
 8017622:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017626:	2302      	movs	r3, #2
 8017628:	2239      	movs	r2, #57	; 0x39
 801762a:	f000 f955 	bl	80178d8 <dhcp_option>
 801762e:	4603      	mov	r3, r0
 8017630:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8017632:	89b8      	ldrh	r0, [r7, #12]
 8017634:	693b      	ldr	r3, [r7, #16]
 8017636:	33f0      	adds	r3, #240	; 0xf0
 8017638:	f44f 7210 	mov.w	r2, #576	; 0x240
 801763c:	4619      	mov	r1, r3
 801763e:	f000 f9a5 	bl	801798c <dhcp_option_short>
 8017642:	4603      	mov	r3, r0
 8017644:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8017646:	89b8      	ldrh	r0, [r7, #12]
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801764e:	2304      	movs	r3, #4
 8017650:	2232      	movs	r2, #50	; 0x32
 8017652:	f000 f941 	bl	80178d8 <dhcp_option>
 8017656:	4603      	mov	r3, r0
 8017658:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801765a:	89bc      	ldrh	r4, [r7, #12]
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	69db      	ldr	r3, [r3, #28]
 8017666:	4618      	mov	r0, r3
 8017668:	f7f6 f809 	bl	800d67e <lwip_htonl>
 801766c:	4603      	mov	r3, r0
 801766e:	461a      	mov	r2, r3
 8017670:	4629      	mov	r1, r5
 8017672:	4620      	mov	r0, r4
 8017674:	f000 f9bc 	bl	80179f0 <dhcp_option_long>
 8017678:	4603      	mov	r3, r0
 801767a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801767c:	89b8      	ldrh	r0, [r7, #12]
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017684:	2303      	movs	r3, #3
 8017686:	2237      	movs	r2, #55	; 0x37
 8017688:	f000 f926 	bl	80178d8 <dhcp_option>
 801768c:	4603      	mov	r3, r0
 801768e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8017690:	2300      	movs	r3, #0
 8017692:	77bb      	strb	r3, [r7, #30]
 8017694:	e00e      	b.n	80176b4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8017696:	89b8      	ldrh	r0, [r7, #12]
 8017698:	693b      	ldr	r3, [r7, #16]
 801769a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801769e:	7fbb      	ldrb	r3, [r7, #30]
 80176a0:	4a29      	ldr	r2, [pc, #164]	; (8017748 <dhcp_reboot+0x15c>)
 80176a2:	5cd3      	ldrb	r3, [r2, r3]
 80176a4:	461a      	mov	r2, r3
 80176a6:	f000 f94b 	bl	8017940 <dhcp_option_byte>
 80176aa:	4603      	mov	r3, r0
 80176ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80176ae:	7fbb      	ldrb	r3, [r7, #30]
 80176b0:	3301      	adds	r3, #1
 80176b2:	77bb      	strb	r3, [r7, #30]
 80176b4:	7fbb      	ldrb	r3, [r7, #30]
 80176b6:	2b02      	cmp	r3, #2
 80176b8:	d9ed      	bls.n	8017696 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80176ba:	89b8      	ldrh	r0, [r7, #12]
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	33f0      	adds	r3, #240	; 0xf0
 80176c0:	697a      	ldr	r2, [r7, #20]
 80176c2:	4619      	mov	r1, r3
 80176c4:	f000 fe5c 	bl	8018380 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80176c8:	4b20      	ldr	r3, [pc, #128]	; (801774c <dhcp_reboot+0x160>)
 80176ca:	6818      	ldr	r0, [r3, #0]
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	9300      	str	r3, [sp, #0]
 80176d0:	2343      	movs	r3, #67	; 0x43
 80176d2:	4a1f      	ldr	r2, [pc, #124]	; (8017750 <dhcp_reboot+0x164>)
 80176d4:	6979      	ldr	r1, [r7, #20]
 80176d6:	f7fe fcc1 	bl	801605c <udp_sendto_if>
 80176da:	4603      	mov	r3, r0
 80176dc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80176de:	6978      	ldr	r0, [r7, #20]
 80176e0:	f7f7 fcda 	bl	800f098 <pbuf_free>
 80176e4:	e001      	b.n	80176ea <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80176e6:	23ff      	movs	r3, #255	; 0xff
 80176e8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80176ea:	69bb      	ldr	r3, [r7, #24]
 80176ec:	799b      	ldrb	r3, [r3, #6]
 80176ee:	2bff      	cmp	r3, #255	; 0xff
 80176f0:	d005      	beq.n	80176fe <dhcp_reboot+0x112>
    dhcp->tries++;
 80176f2:	69bb      	ldr	r3, [r7, #24]
 80176f4:	799b      	ldrb	r3, [r3, #6]
 80176f6:	3301      	adds	r3, #1
 80176f8:	b2da      	uxtb	r2, r3
 80176fa:	69bb      	ldr	r3, [r7, #24]
 80176fc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80176fe:	69bb      	ldr	r3, [r7, #24]
 8017700:	799b      	ldrb	r3, [r3, #6]
 8017702:	2b09      	cmp	r3, #9
 8017704:	d80a      	bhi.n	801771c <dhcp_reboot+0x130>
 8017706:	69bb      	ldr	r3, [r7, #24]
 8017708:	799b      	ldrb	r3, [r3, #6]
 801770a:	b29b      	uxth	r3, r3
 801770c:	461a      	mov	r2, r3
 801770e:	0152      	lsls	r2, r2, #5
 8017710:	1ad2      	subs	r2, r2, r3
 8017712:	0092      	lsls	r2, r2, #2
 8017714:	4413      	add	r3, r2
 8017716:	00db      	lsls	r3, r3, #3
 8017718:	b29b      	uxth	r3, r3
 801771a:	e001      	b.n	8017720 <dhcp_reboot+0x134>
 801771c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017720:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8017722:	89fb      	ldrh	r3, [r7, #14]
 8017724:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8017728:	4a0a      	ldr	r2, [pc, #40]	; (8017754 <dhcp_reboot+0x168>)
 801772a:	fb82 1203 	smull	r1, r2, r2, r3
 801772e:	1152      	asrs	r2, r2, #5
 8017730:	17db      	asrs	r3, r3, #31
 8017732:	1ad3      	subs	r3, r2, r3
 8017734:	b29a      	uxth	r2, r3
 8017736:	69bb      	ldr	r3, [r7, #24]
 8017738:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801773a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801773e:	4618      	mov	r0, r3
 8017740:	3720      	adds	r7, #32
 8017742:	46bd      	mov	sp, r7
 8017744:	bdb0      	pop	{r4, r5, r7, pc}
 8017746:	bf00      	nop
 8017748:	200000c4 	.word	0x200000c4
 801774c:	20013d64 	.word	0x20013d64
 8017750:	0806df44 	.word	0x0806df44
 8017754:	10624dd3 	.word	0x10624dd3

08017758 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8017758:	b5b0      	push	{r4, r5, r7, lr}
 801775a:	b08a      	sub	sp, #40	; 0x28
 801775c:	af02      	add	r7, sp, #8
 801775e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017764:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8017766:	69fb      	ldr	r3, [r7, #28]
 8017768:	2b00      	cmp	r3, #0
 801776a:	f000 8084 	beq.w	8017876 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801776e:	69fb      	ldr	r3, [r7, #28]
 8017770:	795b      	ldrb	r3, [r3, #5]
 8017772:	2b00      	cmp	r3, #0
 8017774:	f000 8081 	beq.w	801787a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8017778:	69fb      	ldr	r3, [r7, #28]
 801777a:	699b      	ldr	r3, [r3, #24]
 801777c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801777e:	69fb      	ldr	r3, [r7, #28]
 8017780:	2200      	movs	r2, #0
 8017782:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8017784:	69fb      	ldr	r3, [r7, #28]
 8017786:	2200      	movs	r2, #0
 8017788:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801778a:	69fb      	ldr	r3, [r7, #28]
 801778c:	2200      	movs	r2, #0
 801778e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	2200      	movs	r2, #0
 8017794:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8017796:	69fb      	ldr	r3, [r7, #28]
 8017798:	2200      	movs	r2, #0
 801779a:	631a      	str	r2, [r3, #48]	; 0x30
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80177a0:	69fb      	ldr	r3, [r7, #28]
 80177a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177a8:	69fb      	ldr	r3, [r7, #28]
 80177aa:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80177ac:	69fb      	ldr	r3, [r7, #28]
 80177ae:	2200      	movs	r2, #0
 80177b0:	829a      	strh	r2, [r3, #20]
 80177b2:	69fb      	ldr	r3, [r7, #28]
 80177b4:	8a9a      	ldrh	r2, [r3, #20]
 80177b6:	69fb      	ldr	r3, [r7, #28]
 80177b8:	825a      	strh	r2, [r3, #18]
 80177ba:	69fb      	ldr	r3, [r7, #28]
 80177bc:	8a5a      	ldrh	r2, [r3, #18]
 80177be:	69fb      	ldr	r3, [r7, #28]
 80177c0:	821a      	strh	r2, [r3, #16]
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	8a1a      	ldrh	r2, [r3, #16]
 80177c6:	69fb      	ldr	r3, [r7, #28]
 80177c8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f000 fe06 	bl	80183dc <dhcp_supplied_address>
 80177d0:	4603      	mov	r3, r0
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d03b      	beq.n	801784e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80177d6:	f107 030e 	add.w	r3, r7, #14
 80177da:	2207      	movs	r2, #7
 80177dc:	69f9      	ldr	r1, [r7, #28]
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 fcf8 	bl	80181d4 <dhcp_create_msg>
 80177e4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80177e6:	69bb      	ldr	r3, [r7, #24]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d030      	beq.n	801784e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	685b      	ldr	r3, [r3, #4]
 80177f0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80177f2:	89f8      	ldrh	r0, [r7, #14]
 80177f4:	697b      	ldr	r3, [r7, #20]
 80177f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80177fa:	2304      	movs	r3, #4
 80177fc:	2236      	movs	r2, #54	; 0x36
 80177fe:	f000 f86b 	bl	80178d8 <dhcp_option>
 8017802:	4603      	mov	r3, r0
 8017804:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017806:	89fc      	ldrh	r4, [r7, #14]
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801780e:	693b      	ldr	r3, [r7, #16]
 8017810:	4618      	mov	r0, r3
 8017812:	f7f5 ff34 	bl	800d67e <lwip_htonl>
 8017816:	4603      	mov	r3, r0
 8017818:	461a      	mov	r2, r3
 801781a:	4629      	mov	r1, r5
 801781c:	4620      	mov	r0, r4
 801781e:	f000 f8e7 	bl	80179f0 <dhcp_option_long>
 8017822:	4603      	mov	r3, r0
 8017824:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017826:	89f8      	ldrh	r0, [r7, #14]
 8017828:	697b      	ldr	r3, [r7, #20]
 801782a:	33f0      	adds	r3, #240	; 0xf0
 801782c:	69ba      	ldr	r2, [r7, #24]
 801782e:	4619      	mov	r1, r3
 8017830:	f000 fda6 	bl	8018380 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017834:	4b13      	ldr	r3, [pc, #76]	; (8017884 <dhcp_release_and_stop+0x12c>)
 8017836:	6818      	ldr	r0, [r3, #0]
 8017838:	f107 0210 	add.w	r2, r7, #16
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	9300      	str	r3, [sp, #0]
 8017840:	2343      	movs	r3, #67	; 0x43
 8017842:	69b9      	ldr	r1, [r7, #24]
 8017844:	f7fe fc0a 	bl	801605c <udp_sendto_if>
      pbuf_free(p_out);
 8017848:	69b8      	ldr	r0, [r7, #24]
 801784a:	f7f7 fc25 	bl	800f098 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801784e:	4b0e      	ldr	r3, [pc, #56]	; (8017888 <dhcp_release_and_stop+0x130>)
 8017850:	4a0d      	ldr	r2, [pc, #52]	; (8017888 <dhcp_release_and_stop+0x130>)
 8017852:	490d      	ldr	r1, [pc, #52]	; (8017888 <dhcp_release_and_stop+0x130>)
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7f6 ff1f 	bl	800e698 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801785a:	2100      	movs	r1, #0
 801785c:	69f8      	ldr	r0, [r7, #28]
 801785e:	f000 f820 	bl	80178a2 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017862:	69fb      	ldr	r3, [r7, #28]
 8017864:	791b      	ldrb	r3, [r3, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d008      	beq.n	801787c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801786a:	f7fe ff85 	bl	8016778 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801786e:	69fb      	ldr	r3, [r7, #28]
 8017870:	2200      	movs	r2, #0
 8017872:	711a      	strb	r2, [r3, #4]
 8017874:	e002      	b.n	801787c <dhcp_release_and_stop+0x124>
    return;
 8017876:	bf00      	nop
 8017878:	e000      	b.n	801787c <dhcp_release_and_stop+0x124>
    return;
 801787a:	bf00      	nop
  }
}
 801787c:	3720      	adds	r7, #32
 801787e:	46bd      	mov	sp, r7
 8017880:	bdb0      	pop	{r4, r5, r7, pc}
 8017882:	bf00      	nop
 8017884:	20013d64 	.word	0x20013d64
 8017888:	0806df40 	.word	0x0806df40

0801788c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b082      	sub	sp, #8
 8017890:	af00      	add	r7, sp, #0
 8017892:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7ff ff5f 	bl	8017758 <dhcp_release_and_stop>
}
 801789a:	bf00      	nop
 801789c:	3708      	adds	r7, #8
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}

080178a2 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80178a2:	b480      	push	{r7}
 80178a4:	b083      	sub	sp, #12
 80178a6:	af00      	add	r7, sp, #0
 80178a8:	6078      	str	r0, [r7, #4]
 80178aa:	460b      	mov	r3, r1
 80178ac:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	795b      	ldrb	r3, [r3, #5]
 80178b2:	78fa      	ldrb	r2, [r7, #3]
 80178b4:	429a      	cmp	r2, r3
 80178b6:	d008      	beq.n	80178ca <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	78fa      	ldrb	r2, [r7, #3]
 80178bc:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	2200      	movs	r2, #0
 80178c2:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	2200      	movs	r2, #0
 80178c8:	811a      	strh	r2, [r3, #8]
  }
}
 80178ca:	bf00      	nop
 80178cc:	370c      	adds	r7, #12
 80178ce:	46bd      	mov	sp, r7
 80178d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d4:	4770      	bx	lr
	...

080178d8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b082      	sub	sp, #8
 80178dc:	af00      	add	r7, sp, #0
 80178de:	6039      	str	r1, [r7, #0]
 80178e0:	4611      	mov	r1, r2
 80178e2:	461a      	mov	r2, r3
 80178e4:	4603      	mov	r3, r0
 80178e6:	80fb      	strh	r3, [r7, #6]
 80178e8:	460b      	mov	r3, r1
 80178ea:	717b      	strb	r3, [r7, #5]
 80178ec:	4613      	mov	r3, r2
 80178ee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80178f0:	88fa      	ldrh	r2, [r7, #6]
 80178f2:	793b      	ldrb	r3, [r7, #4]
 80178f4:	4413      	add	r3, r2
 80178f6:	3302      	adds	r3, #2
 80178f8:	2b44      	cmp	r3, #68	; 0x44
 80178fa:	d906      	bls.n	801790a <dhcp_option+0x32>
 80178fc:	4b0d      	ldr	r3, [pc, #52]	; (8017934 <dhcp_option+0x5c>)
 80178fe:	f240 529a 	movw	r2, #1434	; 0x59a
 8017902:	490d      	ldr	r1, [pc, #52]	; (8017938 <dhcp_option+0x60>)
 8017904:	480d      	ldr	r0, [pc, #52]	; (801793c <dhcp_option+0x64>)
 8017906:	f004 fa8f 	bl	801be28 <iprintf>
  options[options_out_len++] = option_type;
 801790a:	88fb      	ldrh	r3, [r7, #6]
 801790c:	1c5a      	adds	r2, r3, #1
 801790e:	80fa      	strh	r2, [r7, #6]
 8017910:	461a      	mov	r2, r3
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	4413      	add	r3, r2
 8017916:	797a      	ldrb	r2, [r7, #5]
 8017918:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801791a:	88fb      	ldrh	r3, [r7, #6]
 801791c:	1c5a      	adds	r2, r3, #1
 801791e:	80fa      	strh	r2, [r7, #6]
 8017920:	461a      	mov	r2, r3
 8017922:	683b      	ldr	r3, [r7, #0]
 8017924:	4413      	add	r3, r2
 8017926:	793a      	ldrb	r2, [r7, #4]
 8017928:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801792a:	88fb      	ldrh	r3, [r7, #6]
}
 801792c:	4618      	mov	r0, r3
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	08021678 	.word	0x08021678
 8017938:	0802180c 	.word	0x0802180c
 801793c:	080216d8 	.word	0x080216d8

08017940 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	4603      	mov	r3, r0
 8017948:	6039      	str	r1, [r7, #0]
 801794a:	80fb      	strh	r3, [r7, #6]
 801794c:	4613      	mov	r3, r2
 801794e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017950:	88fb      	ldrh	r3, [r7, #6]
 8017952:	2b43      	cmp	r3, #67	; 0x43
 8017954:	d906      	bls.n	8017964 <dhcp_option_byte+0x24>
 8017956:	4b0a      	ldr	r3, [pc, #40]	; (8017980 <dhcp_option_byte+0x40>)
 8017958:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801795c:	4909      	ldr	r1, [pc, #36]	; (8017984 <dhcp_option_byte+0x44>)
 801795e:	480a      	ldr	r0, [pc, #40]	; (8017988 <dhcp_option_byte+0x48>)
 8017960:	f004 fa62 	bl	801be28 <iprintf>
  options[options_out_len++] = value;
 8017964:	88fb      	ldrh	r3, [r7, #6]
 8017966:	1c5a      	adds	r2, r3, #1
 8017968:	80fa      	strh	r2, [r7, #6]
 801796a:	461a      	mov	r2, r3
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	4413      	add	r3, r2
 8017970:	797a      	ldrb	r2, [r7, #5]
 8017972:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017974:	88fb      	ldrh	r3, [r7, #6]
}
 8017976:	4618      	mov	r0, r3
 8017978:	3708      	adds	r7, #8
 801797a:	46bd      	mov	sp, r7
 801797c:	bd80      	pop	{r7, pc}
 801797e:	bf00      	nop
 8017980:	08021678 	.word	0x08021678
 8017984:	08021850 	.word	0x08021850
 8017988:	080216d8 	.word	0x080216d8

0801798c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b082      	sub	sp, #8
 8017990:	af00      	add	r7, sp, #0
 8017992:	4603      	mov	r3, r0
 8017994:	6039      	str	r1, [r7, #0]
 8017996:	80fb      	strh	r3, [r7, #6]
 8017998:	4613      	mov	r3, r2
 801799a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801799c:	88fb      	ldrh	r3, [r7, #6]
 801799e:	3302      	adds	r3, #2
 80179a0:	2b44      	cmp	r3, #68	; 0x44
 80179a2:	d906      	bls.n	80179b2 <dhcp_option_short+0x26>
 80179a4:	4b0f      	ldr	r3, [pc, #60]	; (80179e4 <dhcp_option_short+0x58>)
 80179a6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80179aa:	490f      	ldr	r1, [pc, #60]	; (80179e8 <dhcp_option_short+0x5c>)
 80179ac:	480f      	ldr	r0, [pc, #60]	; (80179ec <dhcp_option_short+0x60>)
 80179ae:	f004 fa3b 	bl	801be28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80179b2:	88bb      	ldrh	r3, [r7, #4]
 80179b4:	0a1b      	lsrs	r3, r3, #8
 80179b6:	b29a      	uxth	r2, r3
 80179b8:	88fb      	ldrh	r3, [r7, #6]
 80179ba:	1c59      	adds	r1, r3, #1
 80179bc:	80f9      	strh	r1, [r7, #6]
 80179be:	4619      	mov	r1, r3
 80179c0:	683b      	ldr	r3, [r7, #0]
 80179c2:	440b      	add	r3, r1
 80179c4:	b2d2      	uxtb	r2, r2
 80179c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80179c8:	88fb      	ldrh	r3, [r7, #6]
 80179ca:	1c5a      	adds	r2, r3, #1
 80179cc:	80fa      	strh	r2, [r7, #6]
 80179ce:	461a      	mov	r2, r3
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	4413      	add	r3, r2
 80179d4:	88ba      	ldrh	r2, [r7, #4]
 80179d6:	b2d2      	uxtb	r2, r2
 80179d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80179da:	88fb      	ldrh	r3, [r7, #6]
}
 80179dc:	4618      	mov	r0, r3
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	08021678 	.word	0x08021678
 80179e8:	08021888 	.word	0x08021888
 80179ec:	080216d8 	.word	0x080216d8

080179f0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b084      	sub	sp, #16
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	4603      	mov	r3, r0
 80179f8:	60b9      	str	r1, [r7, #8]
 80179fa:	607a      	str	r2, [r7, #4]
 80179fc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80179fe:	89fb      	ldrh	r3, [r7, #14]
 8017a00:	3304      	adds	r3, #4
 8017a02:	2b44      	cmp	r3, #68	; 0x44
 8017a04:	d906      	bls.n	8017a14 <dhcp_option_long+0x24>
 8017a06:	4b19      	ldr	r3, [pc, #100]	; (8017a6c <dhcp_option_long+0x7c>)
 8017a08:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8017a0c:	4918      	ldr	r1, [pc, #96]	; (8017a70 <dhcp_option_long+0x80>)
 8017a0e:	4819      	ldr	r0, [pc, #100]	; (8017a74 <dhcp_option_long+0x84>)
 8017a10:	f004 fa0a 	bl	801be28 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	0e1a      	lsrs	r2, r3, #24
 8017a18:	89fb      	ldrh	r3, [r7, #14]
 8017a1a:	1c59      	adds	r1, r3, #1
 8017a1c:	81f9      	strh	r1, [r7, #14]
 8017a1e:	4619      	mov	r1, r3
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	440b      	add	r3, r1
 8017a24:	b2d2      	uxtb	r2, r2
 8017a26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	0c1a      	lsrs	r2, r3, #16
 8017a2c:	89fb      	ldrh	r3, [r7, #14]
 8017a2e:	1c59      	adds	r1, r3, #1
 8017a30:	81f9      	strh	r1, [r7, #14]
 8017a32:	4619      	mov	r1, r3
 8017a34:	68bb      	ldr	r3, [r7, #8]
 8017a36:	440b      	add	r3, r1
 8017a38:	b2d2      	uxtb	r2, r2
 8017a3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	0a1a      	lsrs	r2, r3, #8
 8017a40:	89fb      	ldrh	r3, [r7, #14]
 8017a42:	1c59      	adds	r1, r3, #1
 8017a44:	81f9      	strh	r1, [r7, #14]
 8017a46:	4619      	mov	r1, r3
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	440b      	add	r3, r1
 8017a4c:	b2d2      	uxtb	r2, r2
 8017a4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017a50:	89fb      	ldrh	r3, [r7, #14]
 8017a52:	1c5a      	adds	r2, r3, #1
 8017a54:	81fa      	strh	r2, [r7, #14]
 8017a56:	461a      	mov	r2, r3
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	4413      	add	r3, r2
 8017a5c:	687a      	ldr	r2, [r7, #4]
 8017a5e:	b2d2      	uxtb	r2, r2
 8017a60:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017a62:	89fb      	ldrh	r3, [r7, #14]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3710      	adds	r7, #16
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}
 8017a6c:	08021678 	.word	0x08021678
 8017a70:	080218c4 	.word	0x080218c4
 8017a74:	080216d8 	.word	0x080216d8

08017a78 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b092      	sub	sp, #72	; 0x48
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8017a82:	2300      	movs	r3, #0
 8017a84:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8017a86:	2300      	movs	r3, #0
 8017a88:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8017a8a:	2208      	movs	r2, #8
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	48b8      	ldr	r0, [pc, #736]	; (8017d70 <dhcp_parse_reply+0x2f8>)
 8017a90:	f004 fb34 	bl	801c0fc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	895b      	ldrh	r3, [r3, #10]
 8017a98:	2b2b      	cmp	r3, #43	; 0x2b
 8017a9a:	d802      	bhi.n	8017aa2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8017a9c:	f06f 0301 	mvn.w	r3, #1
 8017aa0:	e2b8      	b.n	8018014 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8017aa8:	23f0      	movs	r3, #240	; 0xf0
 8017aaa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	891b      	ldrh	r3, [r3, #8]
 8017ab0:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8017ab6:	e00c      	b.n	8017ad2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8017ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017aba:	895b      	ldrh	r3, [r3, #10]
 8017abc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017abe:	1ad3      	subs	r3, r2, r3
 8017ac0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ac4:	895b      	ldrh	r3, [r3, #10]
 8017ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ac8:	1ad3      	subs	r3, r2, r3
 8017aca:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 8017acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8017ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d004      	beq.n	8017ae2 <dhcp_parse_reply+0x6a>
 8017ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ada:	895b      	ldrh	r3, [r3, #10]
 8017adc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	d2ea      	bcs.n	8017ab8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d102      	bne.n	8017aee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8017ae8:	f06f 0301 	mvn.w	r3, #1
 8017aec:	e292      	b.n	8018014 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 8017aee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017af0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 8017af4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017af6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 8017af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017afe:	e247      	b.n	8017f90 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8017b00:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017b06:	4413      	add	r3, r2
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 8017b12:	f04f 33ff 	mov.w	r3, #4294967295
 8017b16:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8017b18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b1c:	3302      	adds	r3, #2
 8017b1e:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8017b20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d202      	bcs.n	8017b30 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 8017b2a:	f06f 0301 	mvn.w	r3, #1
 8017b2e:	e271      	b.n	8018014 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8017b30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b34:	3301      	adds	r3, #1
 8017b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b38:	8952      	ldrh	r2, [r2, #10]
 8017b3a:	4293      	cmp	r3, r2
 8017b3c:	da08      	bge.n	8017b50 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 8017b3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017b42:	3301      	adds	r3, #1
 8017b44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017b46:	4413      	add	r3, r2
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017b4e:	e00b      	b.n	8017b68 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d004      	beq.n	8017b62 <dhcp_parse_reply+0xea>
 8017b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	685b      	ldr	r3, [r3, #4]
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	e000      	b.n	8017b64 <dhcp_parse_reply+0xec>
 8017b62:	2300      	movs	r3, #0
 8017b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8017b70:	7efb      	ldrb	r3, [r7, #27]
 8017b72:	2b3b      	cmp	r3, #59	; 0x3b
 8017b74:	f200 812c 	bhi.w	8017dd0 <dhcp_parse_reply+0x358>
 8017b78:	a201      	add	r2, pc, #4	; (adr r2, 8017b80 <dhcp_parse_reply+0x108>)
 8017b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b7e:	bf00      	nop
 8017b80:	08017c71 	.word	0x08017c71
 8017b84:	08017c81 	.word	0x08017c81
 8017b88:	08017dd1 	.word	0x08017dd1
 8017b8c:	08017ca3 	.word	0x08017ca3
 8017b90:	08017dd1 	.word	0x08017dd1
 8017b94:	08017dd1 	.word	0x08017dd1
 8017b98:	08017dd1 	.word	0x08017dd1
 8017b9c:	08017dd1 	.word	0x08017dd1
 8017ba0:	08017dd1 	.word	0x08017dd1
 8017ba4:	08017dd1 	.word	0x08017dd1
 8017ba8:	08017dd1 	.word	0x08017dd1
 8017bac:	08017dd1 	.word	0x08017dd1
 8017bb0:	08017dd1 	.word	0x08017dd1
 8017bb4:	08017dd1 	.word	0x08017dd1
 8017bb8:	08017dd1 	.word	0x08017dd1
 8017bbc:	08017dd1 	.word	0x08017dd1
 8017bc0:	08017dd1 	.word	0x08017dd1
 8017bc4:	08017dd1 	.word	0x08017dd1
 8017bc8:	08017dd1 	.word	0x08017dd1
 8017bcc:	08017dd1 	.word	0x08017dd1
 8017bd0:	08017dd1 	.word	0x08017dd1
 8017bd4:	08017dd1 	.word	0x08017dd1
 8017bd8:	08017dd1 	.word	0x08017dd1
 8017bdc:	08017dd1 	.word	0x08017dd1
 8017be0:	08017dd1 	.word	0x08017dd1
 8017be4:	08017dd1 	.word	0x08017dd1
 8017be8:	08017dd1 	.word	0x08017dd1
 8017bec:	08017dd1 	.word	0x08017dd1
 8017bf0:	08017dd1 	.word	0x08017dd1
 8017bf4:	08017dd1 	.word	0x08017dd1
 8017bf8:	08017dd1 	.word	0x08017dd1
 8017bfc:	08017dd1 	.word	0x08017dd1
 8017c00:	08017dd1 	.word	0x08017dd1
 8017c04:	08017dd1 	.word	0x08017dd1
 8017c08:	08017dd1 	.word	0x08017dd1
 8017c0c:	08017dd1 	.word	0x08017dd1
 8017c10:	08017dd1 	.word	0x08017dd1
 8017c14:	08017dd1 	.word	0x08017dd1
 8017c18:	08017dd1 	.word	0x08017dd1
 8017c1c:	08017dd1 	.word	0x08017dd1
 8017c20:	08017dd1 	.word	0x08017dd1
 8017c24:	08017dd1 	.word	0x08017dd1
 8017c28:	08017dd1 	.word	0x08017dd1
 8017c2c:	08017dd1 	.word	0x08017dd1
 8017c30:	08017dd1 	.word	0x08017dd1
 8017c34:	08017dd1 	.word	0x08017dd1
 8017c38:	08017dd1 	.word	0x08017dd1
 8017c3c:	08017dd1 	.word	0x08017dd1
 8017c40:	08017dd1 	.word	0x08017dd1
 8017c44:	08017dd1 	.word	0x08017dd1
 8017c48:	08017dd1 	.word	0x08017dd1
 8017c4c:	08017ccf 	.word	0x08017ccf
 8017c50:	08017cf1 	.word	0x08017cf1
 8017c54:	08017d2d 	.word	0x08017d2d
 8017c58:	08017d4f 	.word	0x08017d4f
 8017c5c:	08017dd1 	.word	0x08017dd1
 8017c60:	08017dd1 	.word	0x08017dd1
 8017c64:	08017dd1 	.word	0x08017dd1
 8017c68:	08017d8d 	.word	0x08017d8d
 8017c6c:	08017daf 	.word	0x08017daf
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017c70:	2300      	movs	r3, #0
 8017c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017c7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 8017c7e:	e0ab      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017c80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017c84:	2b04      	cmp	r3, #4
 8017c86:	d009      	beq.n	8017c9c <dhcp_parse_reply+0x224>
 8017c88:	4b3a      	ldr	r3, [pc, #232]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017c8a:	f240 622e 	movw	r2, #1582	; 0x62e
 8017c8e:	493a      	ldr	r1, [pc, #232]	; (8017d78 <dhcp_parse_reply+0x300>)
 8017c90:	483a      	ldr	r0, [pc, #232]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017c92:	f004 f8c9 	bl	801be28 <iprintf>
 8017c96:	f06f 0305 	mvn.w	r3, #5
 8017c9a:	e1bb      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8017c9c:	2306      	movs	r3, #6
 8017c9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017ca0:	e09a      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017ca2:	2304      	movs	r3, #4
 8017ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017ca8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8017cac:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d209      	bcs.n	8017cc8 <dhcp_parse_reply+0x250>
 8017cb4:	4b2f      	ldr	r3, [pc, #188]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017cb6:	f240 6233 	movw	r2, #1587	; 0x633
 8017cba:	4931      	ldr	r1, [pc, #196]	; (8017d80 <dhcp_parse_reply+0x308>)
 8017cbc:	482f      	ldr	r0, [pc, #188]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017cbe:	f004 f8b3 	bl	801be28 <iprintf>
 8017cc2:	f06f 0305 	mvn.w	r3, #5
 8017cc6:	e1a5      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017cc8:	2307      	movs	r3, #7
 8017cca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017ccc:	e084      	b.n	8017dd8 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017cd2:	2b04      	cmp	r3, #4
 8017cd4:	d009      	beq.n	8017cea <dhcp_parse_reply+0x272>
 8017cd6:	4b27      	ldr	r3, [pc, #156]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017cd8:	f240 6241 	movw	r2, #1601	; 0x641
 8017cdc:	4926      	ldr	r1, [pc, #152]	; (8017d78 <dhcp_parse_reply+0x300>)
 8017cde:	4827      	ldr	r0, [pc, #156]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017ce0:	f004 f8a2 	bl	801be28 <iprintf>
 8017ce4:	f06f 0305 	mvn.w	r3, #5
 8017ce8:	e194      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017cea:	2303      	movs	r3, #3
 8017cec:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017cee:	e073      	b.n	8017dd8 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017cf4:	2b01      	cmp	r3, #1
 8017cf6:	d009      	beq.n	8017d0c <dhcp_parse_reply+0x294>
 8017cf8:	4b1e      	ldr	r3, [pc, #120]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017cfa:	f240 624f 	movw	r2, #1615	; 0x64f
 8017cfe:	4921      	ldr	r1, [pc, #132]	; (8017d84 <dhcp_parse_reply+0x30c>)
 8017d00:	481e      	ldr	r0, [pc, #120]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017d02:	f004 f891 	bl	801be28 <iprintf>
 8017d06:	f06f 0305 	mvn.w	r3, #5
 8017d0a:	e183      	b.n	8018014 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8017d0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d0e:	2bf0      	cmp	r3, #240	; 0xf0
 8017d10:	d009      	beq.n	8017d26 <dhcp_parse_reply+0x2ae>
 8017d12:	4b18      	ldr	r3, [pc, #96]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017d14:	f240 6251 	movw	r2, #1617	; 0x651
 8017d18:	491b      	ldr	r1, [pc, #108]	; (8017d88 <dhcp_parse_reply+0x310>)
 8017d1a:	4818      	ldr	r0, [pc, #96]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017d1c:	f004 f884 	bl	801be28 <iprintf>
 8017d20:	f06f 0305 	mvn.w	r3, #5
 8017d24:	e176      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8017d26:	2300      	movs	r3, #0
 8017d28:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017d2a:	e055      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017d2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d30:	2b01      	cmp	r3, #1
 8017d32:	d009      	beq.n	8017d48 <dhcp_parse_reply+0x2d0>
 8017d34:	4b0f      	ldr	r3, [pc, #60]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017d36:	f240 6255 	movw	r2, #1621	; 0x655
 8017d3a:	4912      	ldr	r1, [pc, #72]	; (8017d84 <dhcp_parse_reply+0x30c>)
 8017d3c:	480f      	ldr	r0, [pc, #60]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017d3e:	f004 f873 	bl	801be28 <iprintf>
 8017d42:	f06f 0305 	mvn.w	r3, #5
 8017d46:	e165      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017d4c:	e044      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d52:	2b04      	cmp	r3, #4
 8017d54:	d009      	beq.n	8017d6a <dhcp_parse_reply+0x2f2>
 8017d56:	4b07      	ldr	r3, [pc, #28]	; (8017d74 <dhcp_parse_reply+0x2fc>)
 8017d58:	f240 6259 	movw	r2, #1625	; 0x659
 8017d5c:	4906      	ldr	r1, [pc, #24]	; (8017d78 <dhcp_parse_reply+0x300>)
 8017d5e:	4807      	ldr	r0, [pc, #28]	; (8017d7c <dhcp_parse_reply+0x304>)
 8017d60:	f004 f862 	bl	801be28 <iprintf>
 8017d64:	f06f 0305 	mvn.w	r3, #5
 8017d68:	e154      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8017d6a:	2302      	movs	r3, #2
 8017d6c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017d6e:	e033      	b.n	8017dd8 <dhcp_parse_reply+0x360>
 8017d70:	20013d5c 	.word	0x20013d5c
 8017d74:	08021678 	.word	0x08021678
 8017d78:	08021900 	.word	0x08021900
 8017d7c:	080216d8 	.word	0x080216d8
 8017d80:	0802190c 	.word	0x0802190c
 8017d84:	08021920 	.word	0x08021920
 8017d88:	0802192c 	.word	0x0802192c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017d90:	2b04      	cmp	r3, #4
 8017d92:	d009      	beq.n	8017da8 <dhcp_parse_reply+0x330>
 8017d94:	4ba1      	ldr	r3, [pc, #644]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017d96:	f240 625d 	movw	r2, #1629	; 0x65d
 8017d9a:	49a1      	ldr	r1, [pc, #644]	; (8018020 <dhcp_parse_reply+0x5a8>)
 8017d9c:	48a1      	ldr	r0, [pc, #644]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017d9e:	f004 f843 	bl	801be28 <iprintf>
 8017da2:	f06f 0305 	mvn.w	r3, #5
 8017da6:	e135      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017da8:	2304      	movs	r3, #4
 8017daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017dac:	e014      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017db2:	2b04      	cmp	r3, #4
 8017db4:	d009      	beq.n	8017dca <dhcp_parse_reply+0x352>
 8017db6:	4b99      	ldr	r3, [pc, #612]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017db8:	f240 6261 	movw	r2, #1633	; 0x661
 8017dbc:	4998      	ldr	r1, [pc, #608]	; (8018020 <dhcp_parse_reply+0x5a8>)
 8017dbe:	4899      	ldr	r0, [pc, #612]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017dc0:	f004 f832 	bl	801be28 <iprintf>
 8017dc4:	f06f 0305 	mvn.w	r3, #5
 8017dc8:	e124      	b.n	8018014 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8017dca:	2305      	movs	r3, #5
 8017dcc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017dce:	e003      	b.n	8017dd8 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017dd6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017dd8:	7efb      	ldrb	r3, [r7, #27]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d105      	bne.n	8017dea <dhcp_parse_reply+0x372>
      offset++;
 8017dde:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017de2:	3301      	adds	r3, #1
 8017de4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8017de8:	e0a4      	b.n	8017f34 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017dea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017df2:	4413      	add	r3, r2
 8017df4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8017df8:	4293      	cmp	r3, r2
 8017dfa:	dd02      	ble.n	8017e02 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 8017dfc:	f06f 0301 	mvn.w	r3, #1
 8017e00:	e108      	b.n	8018014 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 8017e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e0c:	4413      	add	r3, r2
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	3302      	adds	r3, #2
 8017e12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 8017e16:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	f000 808a 	beq.w	8017f34 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 8017e20:	2300      	movs	r3, #0
 8017e22:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8017e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	db02      	blt.n	8017e30 <dhcp_parse_reply+0x3b8>
 8017e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2c:	2b07      	cmp	r3, #7
 8017e2e:	dd06      	ble.n	8017e3e <dhcp_parse_reply+0x3c6>
 8017e30:	4b7a      	ldr	r3, [pc, #488]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017e32:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8017e36:	497c      	ldr	r1, [pc, #496]	; (8018028 <dhcp_parse_reply+0x5b0>)
 8017e38:	487a      	ldr	r0, [pc, #488]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017e3a:	f003 fff5 	bl	801be28 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8017e3e:	4a7b      	ldr	r2, [pc, #492]	; (801802c <dhcp_parse_reply+0x5b4>)
 8017e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e42:	4413      	add	r3, r2
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d174      	bne.n	8017f34 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 8017e4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017e4e:	2b04      	cmp	r3, #4
 8017e50:	bf28      	it	cs
 8017e52:	2304      	movcs	r3, #4
 8017e54:	b2db      	uxtb	r3, r3
 8017e56:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e5a:	8b3a      	ldrh	r2, [r7, #24]
 8017e5c:	f107 010c 	add.w	r1, r7, #12
 8017e60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e62:	f7f7 fb1f 	bl	800f4a4 <pbuf_copy_partial>
 8017e66:	4603      	mov	r3, r0
 8017e68:	461a      	mov	r2, r3
 8017e6a:	8b3b      	ldrh	r3, [r7, #24]
 8017e6c:	4293      	cmp	r3, r2
 8017e6e:	d002      	beq.n	8017e76 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8017e70:	f06f 0301 	mvn.w	r3, #1
 8017e74:	e0ce      	b.n	8018014 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8017e76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017e7a:	2b04      	cmp	r3, #4
 8017e7c:	d933      	bls.n	8017ee6 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8017e7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017e82:	f003 0303 	and.w	r3, r3, #3
 8017e86:	b2db      	uxtb	r3, r3
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d009      	beq.n	8017ea0 <dhcp_parse_reply+0x428>
 8017e8c:	4b63      	ldr	r3, [pc, #396]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017e8e:	f240 6281 	movw	r2, #1665	; 0x681
 8017e92:	4967      	ldr	r1, [pc, #412]	; (8018030 <dhcp_parse_reply+0x5b8>)
 8017e94:	4863      	ldr	r0, [pc, #396]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017e96:	f003 ffc7 	bl	801be28 <iprintf>
 8017e9a:	f06f 0305 	mvn.w	r3, #5
 8017e9e:	e0b9      	b.n	8018014 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8017ea0:	4a62      	ldr	r2, [pc, #392]	; (801802c <dhcp_parse_reply+0x5b4>)
 8017ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea4:	4413      	add	r3, r2
 8017ea6:	2201      	movs	r2, #1
 8017ea8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f5 fbe6 	bl	800d67e <lwip_htonl>
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	495f      	ldr	r1, [pc, #380]	; (8018034 <dhcp_parse_reply+0x5bc>)
 8017eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8017ebc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017ec0:	3b04      	subs	r3, #4
 8017ec2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017ec6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ec8:	3304      	adds	r3, #4
 8017eca:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 8017ecc:	8afa      	ldrh	r2, [r7, #22]
 8017ece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d202      	bcs.n	8017eda <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8017ed4:	f06f 0301 	mvn.w	r3, #1
 8017ed8:	e09c      	b.n	8018014 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 8017eda:	8afb      	ldrh	r3, [r7, #22]
 8017edc:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 8017ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 8017ee4:	e79e      	b.n	8017e24 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 8017ee6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017eea:	2b04      	cmp	r3, #4
 8017eec:	d106      	bne.n	8017efc <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7f5 fbc4 	bl	800d67e <lwip_htonl>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	60fb      	str	r3, [r7, #12]
 8017efa:	e011      	b.n	8017f20 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017efc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d009      	beq.n	8017f18 <dhcp_parse_reply+0x4a0>
 8017f04:	4b45      	ldr	r3, [pc, #276]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017f06:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8017f0a:	494b      	ldr	r1, [pc, #300]	; (8018038 <dhcp_parse_reply+0x5c0>)
 8017f0c:	4845      	ldr	r0, [pc, #276]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017f0e:	f003 ff8b 	bl	801be28 <iprintf>
 8017f12:	f06f 0305 	mvn.w	r3, #5
 8017f16:	e07d      	b.n	8018014 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 8017f18:	f107 030c 	add.w	r3, r7, #12
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017f20:	4a42      	ldr	r2, [pc, #264]	; (801802c <dhcp_parse_reply+0x5b4>)
 8017f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f24:	4413      	add	r3, r2
 8017f26:	2201      	movs	r2, #1
 8017f28:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8017f2a:	68fa      	ldr	r2, [r7, #12]
 8017f2c:	4941      	ldr	r1, [pc, #260]	; (8018034 <dhcp_parse_reply+0x5bc>)
 8017f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f36:	895b      	ldrh	r3, [r3, #10]
 8017f38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017f3c:	429a      	cmp	r2, r3
 8017f3e:	d327      	bcc.n	8017f90 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8017f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f42:	895b      	ldrh	r3, [r3, #10]
 8017f44:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017f48:	1ad3      	subs	r3, r2, r3
 8017f4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 8017f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f50:	895b      	ldrh	r3, [r3, #10]
 8017f52:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8017f58:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017f5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d213      	bcs.n	8017f8a <dhcp_parse_reply+0x512>
        q = q->next;
 8017f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d109      	bne.n	8017f82 <dhcp_parse_reply+0x50a>
 8017f6e:	4b2b      	ldr	r3, [pc, #172]	; (801801c <dhcp_parse_reply+0x5a4>)
 8017f70:	f240 629d 	movw	r2, #1693	; 0x69d
 8017f74:	4931      	ldr	r1, [pc, #196]	; (801803c <dhcp_parse_reply+0x5c4>)
 8017f76:	482b      	ldr	r0, [pc, #172]	; (8018024 <dhcp_parse_reply+0x5ac>)
 8017f78:	f003 ff56 	bl	801be28 <iprintf>
 8017f7c:	f06f 0305 	mvn.w	r3, #5
 8017f80:	e048      	b.n	8018014 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8017f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	643b      	str	r3, [r7, #64]	; 0x40
 8017f88:	e002      	b.n	8017f90 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017f8a:	f06f 0301 	mvn.w	r3, #1
 8017f8e:	e041      	b.n	8018014 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d00c      	beq.n	8017fb0 <dhcp_parse_reply+0x538>
 8017f96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017f9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d207      	bcs.n	8017fb0 <dhcp_parse_reply+0x538>
 8017fa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017fa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017fa6:	4413      	add	r3, r2
 8017fa8:	781b      	ldrb	r3, [r3, #0]
 8017faa:	2bff      	cmp	r3, #255	; 0xff
 8017fac:	f47f ada8 	bne.w	8017b00 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017fb0:	4b1e      	ldr	r3, [pc, #120]	; (801802c <dhcp_parse_reply+0x5b4>)
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d018      	beq.n	8017fea <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017fb8:	4b1e      	ldr	r3, [pc, #120]	; (8018034 <dhcp_parse_reply+0x5bc>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017fbe:	4b1b      	ldr	r3, [pc, #108]	; (801802c <dhcp_parse_reply+0x5b4>)
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017fc4:	693b      	ldr	r3, [r7, #16]
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d102      	bne.n	8017fd0 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 8017fca:	2301      	movs	r3, #1
 8017fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8017fce:	e00c      	b.n	8017fea <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017fd0:	693b      	ldr	r3, [r7, #16]
 8017fd2:	2b02      	cmp	r3, #2
 8017fd4:	d102      	bne.n	8017fdc <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8017fd6:	2301      	movs	r3, #1
 8017fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fda:	e006      	b.n	8017fea <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017fdc:	693b      	ldr	r3, [r7, #16]
 8017fde:	2b03      	cmp	r3, #3
 8017fe0:	d103      	bne.n	8017fea <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 8017fe6:	2301      	movs	r3, #1
 8017fe8:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d006      	beq.n	8017ffe <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 8017ff4:	236c      	movs	r3, #108	; 0x6c
 8017ff6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017ff8:	23ec      	movs	r3, #236	; 0xec
 8017ffa:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017ffc:	e559      	b.n	8017ab2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018000:	2b00      	cmp	r3, #0
 8018002:	d006      	beq.n	8018012 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 8018004:	2300      	movs	r3, #0
 8018006:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 8018008:	232c      	movs	r3, #44	; 0x2c
 801800a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801800c:	236c      	movs	r3, #108	; 0x6c
 801800e:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 8018010:	e54f      	b.n	8017ab2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8018012:	2300      	movs	r3, #0
}
 8018014:	4618      	mov	r0, r3
 8018016:	3748      	adds	r7, #72	; 0x48
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	08021678 	.word	0x08021678
 8018020:	08021900 	.word	0x08021900
 8018024:	080216d8 	.word	0x080216d8
 8018028:	08021944 	.word	0x08021944
 801802c:	20013d5c 	.word	0x20013d5c
 8018030:	08021958 	.word	0x08021958
 8018034:	20013d3c 	.word	0x20013d3c
 8018038:	08021970 	.word	0x08021970
 801803c:	08021984 	.word	0x08021984

08018040 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b08a      	sub	sp, #40	; 0x28
 8018044:	af00      	add	r7, sp, #0
 8018046:	60f8      	str	r0, [r7, #12]
 8018048:	60b9      	str	r1, [r7, #8]
 801804a:	607a      	str	r2, [r7, #4]
 801804c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801804e:	4b5e      	ldr	r3, [pc, #376]	; (80181c8 <dhcp_recv+0x188>)
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018054:	69fb      	ldr	r3, [r7, #28]
 8018056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018058:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	685b      	ldr	r3, [r3, #4]
 801805e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8018060:	69bb      	ldr	r3, [r7, #24]
 8018062:	2b00      	cmp	r3, #0
 8018064:	f000 809a 	beq.w	801819c <dhcp_recv+0x15c>
 8018068:	69bb      	ldr	r3, [r7, #24]
 801806a:	791b      	ldrb	r3, [r3, #4]
 801806c:	2b00      	cmp	r3, #0
 801806e:	f000 8095 	beq.w	801819c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	895b      	ldrh	r3, [r3, #10]
 8018076:	2b2b      	cmp	r3, #43	; 0x2b
 8018078:	f240 8092 	bls.w	80181a0 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	781b      	ldrb	r3, [r3, #0]
 8018080:	2b02      	cmp	r3, #2
 8018082:	f040 808f 	bne.w	80181a4 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8018086:	2300      	movs	r3, #0
 8018088:	74fb      	strb	r3, [r7, #19]
 801808a:	e00e      	b.n	80180aa <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801808c:	7cfb      	ldrb	r3, [r7, #19]
 801808e:	69fa      	ldr	r2, [r7, #28]
 8018090:	4413      	add	r3, r2
 8018092:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8018096:	7cfb      	ldrb	r3, [r7, #19]
 8018098:	6979      	ldr	r1, [r7, #20]
 801809a:	440b      	add	r3, r1
 801809c:	7f1b      	ldrb	r3, [r3, #28]
 801809e:	429a      	cmp	r2, r3
 80180a0:	f040 8082 	bne.w	80181a8 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80180a4:	7cfb      	ldrb	r3, [r7, #19]
 80180a6:	3301      	adds	r3, #1
 80180a8:	74fb      	strb	r3, [r7, #19]
 80180aa:	69fb      	ldr	r3, [r7, #28]
 80180ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80180b0:	7cfa      	ldrb	r2, [r7, #19]
 80180b2:	429a      	cmp	r2, r3
 80180b4:	d202      	bcs.n	80180bc <dhcp_recv+0x7c>
 80180b6:	7cfb      	ldrb	r3, [r7, #19]
 80180b8:	2b05      	cmp	r3, #5
 80180ba:	d9e7      	bls.n	801808c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	685b      	ldr	r3, [r3, #4]
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7f5 fadc 	bl	800d67e <lwip_htonl>
 80180c6:	4602      	mov	r2, r0
 80180c8:	69bb      	ldr	r3, [r7, #24]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d16d      	bne.n	80181ac <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80180d0:	69b9      	ldr	r1, [r7, #24]
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7ff fcd0 	bl	8017a78 <dhcp_parse_reply>
 80180d8:	4603      	mov	r3, r0
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d168      	bne.n	80181b0 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80180de:	4b3b      	ldr	r3, [pc, #236]	; (80181cc <dhcp_recv+0x18c>)
 80180e0:	785b      	ldrb	r3, [r3, #1]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d066      	beq.n	80181b4 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	685b      	ldr	r3, [r3, #4]
 80180ea:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80180ec:	4b38      	ldr	r3, [pc, #224]	; (80181d0 <dhcp_recv+0x190>)
 80180ee:	685b      	ldr	r3, [r3, #4]
 80180f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80180f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180f8:	2b05      	cmp	r3, #5
 80180fa:	d12a      	bne.n	8018152 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80180fc:	69bb      	ldr	r3, [r7, #24]
 80180fe:	795b      	ldrb	r3, [r3, #5]
 8018100:	2b01      	cmp	r3, #1
 8018102:	d112      	bne.n	801812a <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 8018104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018106:	69f8      	ldr	r0, [r7, #28]
 8018108:	f7fe fe00 	bl	8016d0c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801810c:	69fb      	ldr	r3, [r7, #28]
 801810e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018112:	f003 0308 	and.w	r3, r3, #8
 8018116:	2b00      	cmp	r3, #0
 8018118:	d003      	beq.n	8018122 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801811a:	69f8      	ldr	r0, [r7, #28]
 801811c:	f7fe fb70 	bl	8016800 <dhcp_check>
 8018120:	e04b      	b.n	80181ba <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8018122:	69f8      	ldr	r0, [r7, #28]
 8018124:	f7ff f850 	bl	80171c8 <dhcp_bind>
 8018128:	e047      	b.n	80181ba <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801812a:	69bb      	ldr	r3, [r7, #24]
 801812c:	795b      	ldrb	r3, [r3, #5]
 801812e:	2b03      	cmp	r3, #3
 8018130:	d007      	beq.n	8018142 <dhcp_recv+0x102>
 8018132:	69bb      	ldr	r3, [r7, #24]
 8018134:	795b      	ldrb	r3, [r3, #5]
 8018136:	2b04      	cmp	r3, #4
 8018138:	d003      	beq.n	8018142 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801813a:	69bb      	ldr	r3, [r7, #24]
 801813c:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801813e:	2b05      	cmp	r3, #5
 8018140:	d13b      	bne.n	80181ba <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8018142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018144:	69f8      	ldr	r0, [r7, #28]
 8018146:	f7fe fde1 	bl	8016d0c <dhcp_handle_ack>
      dhcp_bind(netif);
 801814a:	69f8      	ldr	r0, [r7, #28]
 801814c:	f7ff f83c 	bl	80171c8 <dhcp_bind>
 8018150:	e033      	b.n	80181ba <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8018152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018156:	2b06      	cmp	r3, #6
 8018158:	d113      	bne.n	8018182 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801815a:	69bb      	ldr	r3, [r7, #24]
 801815c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801815e:	2b03      	cmp	r3, #3
 8018160:	d00b      	beq.n	801817a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8018162:	69bb      	ldr	r3, [r7, #24]
 8018164:	795b      	ldrb	r3, [r3, #5]
 8018166:	2b01      	cmp	r3, #1
 8018168:	d007      	beq.n	801817a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801816a:	69bb      	ldr	r3, [r7, #24]
 801816c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801816e:	2b04      	cmp	r3, #4
 8018170:	d003      	beq.n	801817a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	795b      	ldrb	r3, [r3, #5]
 8018176:	2b05      	cmp	r3, #5
 8018178:	d103      	bne.n	8018182 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801817a:	69f8      	ldr	r0, [r7, #28]
 801817c:	f7fe fb26 	bl	80167cc <dhcp_handle_nak>
 8018180:	e01b      	b.n	80181ba <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8018182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018186:	2b02      	cmp	r3, #2
 8018188:	d116      	bne.n	80181b8 <dhcp_recv+0x178>
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	795b      	ldrb	r3, [r3, #5]
 801818e:	2b06      	cmp	r3, #6
 8018190:	d112      	bne.n	80181b8 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8018192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018194:	69f8      	ldr	r0, [r7, #28]
 8018196:	f7fe fb67 	bl	8016868 <dhcp_handle_offer>
 801819a:	e00e      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801819c:	bf00      	nop
 801819e:	e00c      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80181a0:	bf00      	nop
 80181a2:	e00a      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80181a4:	bf00      	nop
 80181a6:	e008      	b.n	80181ba <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 80181a8:	bf00      	nop
 80181aa:	e006      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80181ac:	bf00      	nop
 80181ae:	e004      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80181b0:	bf00      	nop
 80181b2:	e002      	b.n	80181ba <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 80181b4:	bf00      	nop
 80181b6:	e000      	b.n	80181ba <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 80181b8:	bf00      	nop
  pbuf_free(p);
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7f6 ff6c 	bl	800f098 <pbuf_free>
}
 80181c0:	bf00      	nop
 80181c2:	3728      	adds	r7, #40	; 0x28
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	2000a264 	.word	0x2000a264
 80181cc:	20013d5c 	.word	0x20013d5c
 80181d0:	20013d3c 	.word	0x20013d3c

080181d4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b088      	sub	sp, #32
 80181d8:	af00      	add	r7, sp, #0
 80181da:	60f8      	str	r0, [r7, #12]
 80181dc:	60b9      	str	r1, [r7, #8]
 80181de:	603b      	str	r3, [r7, #0]
 80181e0:	4613      	mov	r3, r2
 80181e2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d108      	bne.n	80181fc <dhcp_create_msg+0x28>
 80181ea:	4b5f      	ldr	r3, [pc, #380]	; (8018368 <dhcp_create_msg+0x194>)
 80181ec:	f240 7269 	movw	r2, #1897	; 0x769
 80181f0:	495e      	ldr	r1, [pc, #376]	; (801836c <dhcp_create_msg+0x198>)
 80181f2:	485f      	ldr	r0, [pc, #380]	; (8018370 <dhcp_create_msg+0x19c>)
 80181f4:	f003 fe18 	bl	801be28 <iprintf>
 80181f8:	2300      	movs	r3, #0
 80181fa:	e0b1      	b.n	8018360 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80181fc:	68bb      	ldr	r3, [r7, #8]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	d108      	bne.n	8018214 <dhcp_create_msg+0x40>
 8018202:	4b59      	ldr	r3, [pc, #356]	; (8018368 <dhcp_create_msg+0x194>)
 8018204:	f240 726a 	movw	r2, #1898	; 0x76a
 8018208:	495a      	ldr	r1, [pc, #360]	; (8018374 <dhcp_create_msg+0x1a0>)
 801820a:	4859      	ldr	r0, [pc, #356]	; (8018370 <dhcp_create_msg+0x19c>)
 801820c:	f003 fe0c 	bl	801be28 <iprintf>
 8018210:	2300      	movs	r3, #0
 8018212:	e0a5      	b.n	8018360 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8018214:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018218:	f44f 719a 	mov.w	r1, #308	; 0x134
 801821c:	2036      	movs	r0, #54	; 0x36
 801821e:	f7f6 fc53 	bl	800eac8 <pbuf_alloc>
 8018222:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8018224:	69bb      	ldr	r3, [r7, #24]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d101      	bne.n	801822e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801822a:	2300      	movs	r3, #0
 801822c:	e098      	b.n	8018360 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801822e:	69bb      	ldr	r3, [r7, #24]
 8018230:	895b      	ldrh	r3, [r3, #10]
 8018232:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8018236:	d206      	bcs.n	8018246 <dhcp_create_msg+0x72>
 8018238:	4b4b      	ldr	r3, [pc, #300]	; (8018368 <dhcp_create_msg+0x194>)
 801823a:	f240 7271 	movw	r2, #1905	; 0x771
 801823e:	494e      	ldr	r1, [pc, #312]	; (8018378 <dhcp_create_msg+0x1a4>)
 8018240:	484b      	ldr	r0, [pc, #300]	; (8018370 <dhcp_create_msg+0x19c>)
 8018242:	f003 fdf1 	bl	801be28 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8018246:	79fb      	ldrb	r3, [r7, #7]
 8018248:	2b03      	cmp	r3, #3
 801824a:	d103      	bne.n	8018254 <dhcp_create_msg+0x80>
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	795b      	ldrb	r3, [r3, #5]
 8018250:	2b03      	cmp	r3, #3
 8018252:	d10d      	bne.n	8018270 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	799b      	ldrb	r3, [r3, #6]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d105      	bne.n	8018268 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801825c:	f003 f802 	bl	801b264 <rand>
 8018260:	4603      	mov	r3, r0
 8018262:	461a      	mov	r2, r3
 8018264:	4b45      	ldr	r3, [pc, #276]	; (801837c <dhcp_create_msg+0x1a8>)
 8018266:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8018268:	4b44      	ldr	r3, [pc, #272]	; (801837c <dhcp_create_msg+0x1a8>)
 801826a:	681a      	ldr	r2, [r3, #0]
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8018270:	69bb      	ldr	r3, [r7, #24]
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8018276:	f44f 729a 	mov.w	r2, #308	; 0x134
 801827a:	2100      	movs	r1, #0
 801827c:	6978      	ldr	r0, [r7, #20]
 801827e:	f003 ff3d 	bl	801c0fc <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	2201      	movs	r2, #1
 8018286:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	2201      	movs	r2, #1
 801828c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4618      	mov	r0, r3
 801829e:	f7f5 f9ee 	bl	800d67e <lwip_htonl>
 80182a2:	4602      	mov	r2, r0
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80182a8:	79fb      	ldrb	r3, [r7, #7]
 80182aa:	2b08      	cmp	r3, #8
 80182ac:	d010      	beq.n	80182d0 <dhcp_create_msg+0xfc>
 80182ae:	79fb      	ldrb	r3, [r7, #7]
 80182b0:	2b04      	cmp	r3, #4
 80182b2:	d00d      	beq.n	80182d0 <dhcp_create_msg+0xfc>
 80182b4:	79fb      	ldrb	r3, [r7, #7]
 80182b6:	2b07      	cmp	r3, #7
 80182b8:	d00a      	beq.n	80182d0 <dhcp_create_msg+0xfc>
 80182ba:	79fb      	ldrb	r3, [r7, #7]
 80182bc:	2b03      	cmp	r3, #3
 80182be:	d10c      	bne.n	80182da <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80182c4:	2b05      	cmp	r3, #5
 80182c6:	d003      	beq.n	80182d0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	795b      	ldrb	r3, [r3, #5]
 80182cc:	2b04      	cmp	r3, #4
 80182ce:	d104      	bne.n	80182da <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	3304      	adds	r3, #4
 80182d4:	681a      	ldr	r2, [r3, #0]
 80182d6:	697b      	ldr	r3, [r7, #20]
 80182d8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80182da:	2300      	movs	r3, #0
 80182dc:	83fb      	strh	r3, [r7, #30]
 80182de:	e00c      	b.n	80182fa <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80182e0:	8bfa      	ldrh	r2, [r7, #30]
 80182e2:	8bfb      	ldrh	r3, [r7, #30]
 80182e4:	68f9      	ldr	r1, [r7, #12]
 80182e6:	440a      	add	r2, r1
 80182e8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80182ec:	697a      	ldr	r2, [r7, #20]
 80182ee:	4413      	add	r3, r2
 80182f0:	460a      	mov	r2, r1
 80182f2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80182f4:	8bfb      	ldrh	r3, [r7, #30]
 80182f6:	3301      	adds	r3, #1
 80182f8:	83fb      	strh	r3, [r7, #30]
 80182fa:	8bfb      	ldrh	r3, [r7, #30]
 80182fc:	2b05      	cmp	r3, #5
 80182fe:	d9ef      	bls.n	80182e0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	2200      	movs	r2, #0
 8018304:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018308:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801830c:	2200      	movs	r2, #0
 801830e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8018312:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8018316:	2200      	movs	r2, #0
 8018318:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801831c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8018320:	2200      	movs	r2, #0
 8018322:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8018326:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018330:	2301      	movs	r3, #1
 8018332:	2235      	movs	r2, #53	; 0x35
 8018334:	2000      	movs	r0, #0
 8018336:	f7ff facf 	bl	80178d8 <dhcp_option>
 801833a:	4603      	mov	r3, r0
 801833c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801833e:	697b      	ldr	r3, [r7, #20]
 8018340:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8018344:	79fa      	ldrb	r2, [r7, #7]
 8018346:	8a7b      	ldrh	r3, [r7, #18]
 8018348:	4618      	mov	r0, r3
 801834a:	f7ff faf9 	bl	8017940 <dhcp_option_byte>
 801834e:	4603      	mov	r3, r0
 8018350:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	2b00      	cmp	r3, #0
 8018356:	d002      	beq.n	801835e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	8a7a      	ldrh	r2, [r7, #18]
 801835c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801835e:	69bb      	ldr	r3, [r7, #24]
}
 8018360:	4618      	mov	r0, r3
 8018362:	3720      	adds	r7, #32
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}
 8018368:	08021678 	.word	0x08021678
 801836c:	08021998 	.word	0x08021998
 8018370:	080216d8 	.word	0x080216d8
 8018374:	080219b8 	.word	0x080219b8
 8018378:	080219d8 	.word	0x080219d8
 801837c:	20013d6c 	.word	0x20013d6c

08018380 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8018380:	b580      	push	{r7, lr}
 8018382:	b084      	sub	sp, #16
 8018384:	af00      	add	r7, sp, #0
 8018386:	4603      	mov	r3, r0
 8018388:	60b9      	str	r1, [r7, #8]
 801838a:	607a      	str	r2, [r7, #4]
 801838c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801838e:	89fb      	ldrh	r3, [r7, #14]
 8018390:	1c5a      	adds	r2, r3, #1
 8018392:	81fa      	strh	r2, [r7, #14]
 8018394:	461a      	mov	r2, r3
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	4413      	add	r3, r2
 801839a:	22ff      	movs	r2, #255	; 0xff
 801839c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801839e:	e007      	b.n	80183b0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80183a0:	89fb      	ldrh	r3, [r7, #14]
 80183a2:	1c5a      	adds	r2, r3, #1
 80183a4:	81fa      	strh	r2, [r7, #14]
 80183a6:	461a      	mov	r2, r3
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	4413      	add	r3, r2
 80183ac:	2200      	movs	r2, #0
 80183ae:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80183b0:	89fb      	ldrh	r3, [r7, #14]
 80183b2:	2b43      	cmp	r3, #67	; 0x43
 80183b4:	d904      	bls.n	80183c0 <dhcp_option_trailer+0x40>
 80183b6:	89fb      	ldrh	r3, [r7, #14]
 80183b8:	f003 0303 	and.w	r3, r3, #3
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d002      	beq.n	80183c6 <dhcp_option_trailer+0x46>
 80183c0:	89fb      	ldrh	r3, [r7, #14]
 80183c2:	2b43      	cmp	r3, #67	; 0x43
 80183c4:	d9ec      	bls.n	80183a0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80183c6:	89fb      	ldrh	r3, [r7, #14]
 80183c8:	33f0      	adds	r3, #240	; 0xf0
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	4619      	mov	r1, r3
 80183ce:	6878      	ldr	r0, [r7, #4]
 80183d0:	f7f6 fcdc 	bl	800ed8c <pbuf_realloc>
}
 80183d4:	bf00      	nop
 80183d6:	3710      	adds	r7, #16
 80183d8:	46bd      	mov	sp, r7
 80183da:	bd80      	pop	{r7, pc}

080183dc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80183dc:	b480      	push	{r7}
 80183de:	b085      	sub	sp, #20
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d017      	beq.n	801841a <dhcp_supplied_address+0x3e>
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d013      	beq.n	801841a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183f6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80183f8:	68fb      	ldr	r3, [r7, #12]
 80183fa:	795b      	ldrb	r3, [r3, #5]
 80183fc:	2b0a      	cmp	r3, #10
 80183fe:	d007      	beq.n	8018410 <dhcp_supplied_address+0x34>
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	795b      	ldrb	r3, [r3, #5]
 8018404:	2b05      	cmp	r3, #5
 8018406:	d003      	beq.n	8018410 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801840c:	2b04      	cmp	r3, #4
 801840e:	d101      	bne.n	8018414 <dhcp_supplied_address+0x38>
 8018410:	2301      	movs	r3, #1
 8018412:	e000      	b.n	8018416 <dhcp_supplied_address+0x3a>
 8018414:	2300      	movs	r3, #0
 8018416:	b2db      	uxtb	r3, r3
 8018418:	e000      	b.n	801841c <dhcp_supplied_address+0x40>
  }
  return 0;
 801841a:	2300      	movs	r3, #0
}
 801841c:	4618      	mov	r0, r3
 801841e:	3714      	adds	r7, #20
 8018420:	46bd      	mov	sp, r7
 8018422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018426:	4770      	bx	lr

08018428 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018430:	492b      	ldr	r1, [pc, #172]	; (80184e0 <etharp_free_entry+0xb8>)
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	4613      	mov	r3, r2
 8018436:	005b      	lsls	r3, r3, #1
 8018438:	4413      	add	r3, r2
 801843a:	00db      	lsls	r3, r3, #3
 801843c:	440b      	add	r3, r1
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d013      	beq.n	801846c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018444:	4926      	ldr	r1, [pc, #152]	; (80184e0 <etharp_free_entry+0xb8>)
 8018446:	687a      	ldr	r2, [r7, #4]
 8018448:	4613      	mov	r3, r2
 801844a:	005b      	lsls	r3, r3, #1
 801844c:	4413      	add	r3, r2
 801844e:	00db      	lsls	r3, r3, #3
 8018450:	440b      	add	r3, r1
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	4618      	mov	r0, r3
 8018456:	f7f6 fe1f 	bl	800f098 <pbuf_free>
    arp_table[i].q = NULL;
 801845a:	4921      	ldr	r1, [pc, #132]	; (80184e0 <etharp_free_entry+0xb8>)
 801845c:	687a      	ldr	r2, [r7, #4]
 801845e:	4613      	mov	r3, r2
 8018460:	005b      	lsls	r3, r3, #1
 8018462:	4413      	add	r3, r2
 8018464:	00db      	lsls	r3, r3, #3
 8018466:	440b      	add	r3, r1
 8018468:	2200      	movs	r2, #0
 801846a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801846c:	491c      	ldr	r1, [pc, #112]	; (80184e0 <etharp_free_entry+0xb8>)
 801846e:	687a      	ldr	r2, [r7, #4]
 8018470:	4613      	mov	r3, r2
 8018472:	005b      	lsls	r3, r3, #1
 8018474:	4413      	add	r3, r2
 8018476:	00db      	lsls	r3, r3, #3
 8018478:	440b      	add	r3, r1
 801847a:	3314      	adds	r3, #20
 801847c:	2200      	movs	r2, #0
 801847e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8018480:	4917      	ldr	r1, [pc, #92]	; (80184e0 <etharp_free_entry+0xb8>)
 8018482:	687a      	ldr	r2, [r7, #4]
 8018484:	4613      	mov	r3, r2
 8018486:	005b      	lsls	r3, r3, #1
 8018488:	4413      	add	r3, r2
 801848a:	00db      	lsls	r3, r3, #3
 801848c:	440b      	add	r3, r1
 801848e:	3312      	adds	r3, #18
 8018490:	2200      	movs	r2, #0
 8018492:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8018494:	4912      	ldr	r1, [pc, #72]	; (80184e0 <etharp_free_entry+0xb8>)
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	4613      	mov	r3, r2
 801849a:	005b      	lsls	r3, r3, #1
 801849c:	4413      	add	r3, r2
 801849e:	00db      	lsls	r3, r3, #3
 80184a0:	440b      	add	r3, r1
 80184a2:	3308      	adds	r3, #8
 80184a4:	2200      	movs	r2, #0
 80184a6:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 80184a8:	490d      	ldr	r1, [pc, #52]	; (80184e0 <etharp_free_entry+0xb8>)
 80184aa:	687a      	ldr	r2, [r7, #4]
 80184ac:	4613      	mov	r3, r2
 80184ae:	005b      	lsls	r3, r3, #1
 80184b0:	4413      	add	r3, r2
 80184b2:	00db      	lsls	r3, r3, #3
 80184b4:	440b      	add	r3, r1
 80184b6:	3304      	adds	r3, #4
 80184b8:	2200      	movs	r2, #0
 80184ba:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 80184bc:	4908      	ldr	r1, [pc, #32]	; (80184e0 <etharp_free_entry+0xb8>)
 80184be:	687a      	ldr	r2, [r7, #4]
 80184c0:	4613      	mov	r3, r2
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	4413      	add	r3, r2
 80184c6:	00db      	lsls	r3, r3, #3
 80184c8:	440b      	add	r3, r1
 80184ca:	3308      	adds	r3, #8
 80184cc:	4a05      	ldr	r2, [pc, #20]	; (80184e4 <etharp_free_entry+0xbc>)
 80184ce:	3304      	adds	r3, #4
 80184d0:	6810      	ldr	r0, [r2, #0]
 80184d2:	6018      	str	r0, [r3, #0]
 80184d4:	8892      	ldrh	r2, [r2, #4]
 80184d6:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 80184d8:	bf00      	nop
 80184da:	3708      	adds	r7, #8
 80184dc:	46bd      	mov	sp, r7
 80184de:	bd80      	pop	{r7, pc}
 80184e0:	20013d70 	.word	0x20013d70
 80184e4:	0806df50 	.word	0x0806df50

080184e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b082      	sub	sp, #8
 80184ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184ee:	2300      	movs	r3, #0
 80184f0:	607b      	str	r3, [r7, #4]
 80184f2:	e09a      	b.n	801862a <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80184f4:	4951      	ldr	r1, [pc, #324]	; (801863c <etharp_tmr+0x154>)
 80184f6:	687a      	ldr	r2, [r7, #4]
 80184f8:	4613      	mov	r3, r2
 80184fa:	005b      	lsls	r3, r3, #1
 80184fc:	4413      	add	r3, r2
 80184fe:	00db      	lsls	r3, r3, #3
 8018500:	440b      	add	r3, r1
 8018502:	3314      	adds	r3, #20
 8018504:	781b      	ldrb	r3, [r3, #0]
 8018506:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018508:	78fb      	ldrb	r3, [r7, #3]
 801850a:	2b00      	cmp	r3, #0
 801850c:	f000 808a 	beq.w	8018624 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 8018510:	78fb      	ldrb	r3, [r7, #3]
 8018512:	2b05      	cmp	r3, #5
 8018514:	f000 8086 	beq.w	8018624 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018518:	4948      	ldr	r1, [pc, #288]	; (801863c <etharp_tmr+0x154>)
 801851a:	687a      	ldr	r2, [r7, #4]
 801851c:	4613      	mov	r3, r2
 801851e:	005b      	lsls	r3, r3, #1
 8018520:	4413      	add	r3, r2
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	440b      	add	r3, r1
 8018526:	3312      	adds	r3, #18
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	3301      	adds	r3, #1
 801852c:	b298      	uxth	r0, r3
 801852e:	4943      	ldr	r1, [pc, #268]	; (801863c <etharp_tmr+0x154>)
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	4613      	mov	r3, r2
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	4413      	add	r3, r2
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	440b      	add	r3, r1
 801853c:	3312      	adds	r3, #18
 801853e:	4602      	mov	r2, r0
 8018540:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018542:	493e      	ldr	r1, [pc, #248]	; (801863c <etharp_tmr+0x154>)
 8018544:	687a      	ldr	r2, [r7, #4]
 8018546:	4613      	mov	r3, r2
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	4413      	add	r3, r2
 801854c:	00db      	lsls	r3, r3, #3
 801854e:	440b      	add	r3, r1
 8018550:	3312      	adds	r3, #18
 8018552:	881b      	ldrh	r3, [r3, #0]
 8018554:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018558:	d215      	bcs.n	8018586 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801855a:	4938      	ldr	r1, [pc, #224]	; (801863c <etharp_tmr+0x154>)
 801855c:	687a      	ldr	r2, [r7, #4]
 801855e:	4613      	mov	r3, r2
 8018560:	005b      	lsls	r3, r3, #1
 8018562:	4413      	add	r3, r2
 8018564:	00db      	lsls	r3, r3, #3
 8018566:	440b      	add	r3, r1
 8018568:	3314      	adds	r3, #20
 801856a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801856c:	2b01      	cmp	r3, #1
 801856e:	d10e      	bne.n	801858e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018570:	4932      	ldr	r1, [pc, #200]	; (801863c <etharp_tmr+0x154>)
 8018572:	687a      	ldr	r2, [r7, #4]
 8018574:	4613      	mov	r3, r2
 8018576:	005b      	lsls	r3, r3, #1
 8018578:	4413      	add	r3, r2
 801857a:	00db      	lsls	r3, r3, #3
 801857c:	440b      	add	r3, r1
 801857e:	3312      	adds	r3, #18
 8018580:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018582:	2b04      	cmp	r3, #4
 8018584:	d903      	bls.n	801858e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018586:	6878      	ldr	r0, [r7, #4]
 8018588:	f7ff ff4e 	bl	8018428 <etharp_free_entry>
 801858c:	e04a      	b.n	8018624 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801858e:	492b      	ldr	r1, [pc, #172]	; (801863c <etharp_tmr+0x154>)
 8018590:	687a      	ldr	r2, [r7, #4]
 8018592:	4613      	mov	r3, r2
 8018594:	005b      	lsls	r3, r3, #1
 8018596:	4413      	add	r3, r2
 8018598:	00db      	lsls	r3, r3, #3
 801859a:	440b      	add	r3, r1
 801859c:	3314      	adds	r3, #20
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	2b03      	cmp	r3, #3
 80185a2:	d10a      	bne.n	80185ba <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80185a4:	4925      	ldr	r1, [pc, #148]	; (801863c <etharp_tmr+0x154>)
 80185a6:	687a      	ldr	r2, [r7, #4]
 80185a8:	4613      	mov	r3, r2
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	4413      	add	r3, r2
 80185ae:	00db      	lsls	r3, r3, #3
 80185b0:	440b      	add	r3, r1
 80185b2:	3314      	adds	r3, #20
 80185b4:	2204      	movs	r2, #4
 80185b6:	701a      	strb	r2, [r3, #0]
 80185b8:	e034      	b.n	8018624 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80185ba:	4920      	ldr	r1, [pc, #128]	; (801863c <etharp_tmr+0x154>)
 80185bc:	687a      	ldr	r2, [r7, #4]
 80185be:	4613      	mov	r3, r2
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	4413      	add	r3, r2
 80185c4:	00db      	lsls	r3, r3, #3
 80185c6:	440b      	add	r3, r1
 80185c8:	3314      	adds	r3, #20
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	2b04      	cmp	r3, #4
 80185ce:	d10a      	bne.n	80185e6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80185d0:	491a      	ldr	r1, [pc, #104]	; (801863c <etharp_tmr+0x154>)
 80185d2:	687a      	ldr	r2, [r7, #4]
 80185d4:	4613      	mov	r3, r2
 80185d6:	005b      	lsls	r3, r3, #1
 80185d8:	4413      	add	r3, r2
 80185da:	00db      	lsls	r3, r3, #3
 80185dc:	440b      	add	r3, r1
 80185de:	3314      	adds	r3, #20
 80185e0:	2202      	movs	r2, #2
 80185e2:	701a      	strb	r2, [r3, #0]
 80185e4:	e01e      	b.n	8018624 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80185e6:	4915      	ldr	r1, [pc, #84]	; (801863c <etharp_tmr+0x154>)
 80185e8:	687a      	ldr	r2, [r7, #4]
 80185ea:	4613      	mov	r3, r2
 80185ec:	005b      	lsls	r3, r3, #1
 80185ee:	4413      	add	r3, r2
 80185f0:	00db      	lsls	r3, r3, #3
 80185f2:	440b      	add	r3, r1
 80185f4:	3314      	adds	r3, #20
 80185f6:	781b      	ldrb	r3, [r3, #0]
 80185f8:	2b01      	cmp	r3, #1
 80185fa:	d113      	bne.n	8018624 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80185fc:	490f      	ldr	r1, [pc, #60]	; (801863c <etharp_tmr+0x154>)
 80185fe:	687a      	ldr	r2, [r7, #4]
 8018600:	4613      	mov	r3, r2
 8018602:	005b      	lsls	r3, r3, #1
 8018604:	4413      	add	r3, r2
 8018606:	00db      	lsls	r3, r3, #3
 8018608:	440b      	add	r3, r1
 801860a:	3308      	adds	r3, #8
 801860c:	6818      	ldr	r0, [r3, #0]
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	4613      	mov	r3, r2
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	4413      	add	r3, r2
 8018616:	00db      	lsls	r3, r3, #3
 8018618:	4a08      	ldr	r2, [pc, #32]	; (801863c <etharp_tmr+0x154>)
 801861a:	4413      	add	r3, r2
 801861c:	3304      	adds	r3, #4
 801861e:	4619      	mov	r1, r3
 8018620:	f000 feae 	bl	8019380 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	3301      	adds	r3, #1
 8018628:	607b      	str	r3, [r7, #4]
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	2b09      	cmp	r3, #9
 801862e:	f77f af61 	ble.w	80184f4 <etharp_tmr+0xc>
      }
    }
  }
}
 8018632:	bf00      	nop
 8018634:	bf00      	nop
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}
 801863c:	20013d70 	.word	0x20013d70

08018640 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b08a      	sub	sp, #40	; 0x28
 8018644:	af00      	add	r7, sp, #0
 8018646:	60f8      	str	r0, [r7, #12]
 8018648:	460b      	mov	r3, r1
 801864a:	607a      	str	r2, [r7, #4]
 801864c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801864e:	230a      	movs	r3, #10
 8018650:	843b      	strh	r3, [r7, #32]
 8018652:	230a      	movs	r3, #10
 8018654:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8018656:	230a      	movs	r3, #10
 8018658:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 801865a:	2300      	movs	r3, #0
 801865c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801865e:	230a      	movs	r3, #10
 8018660:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018662:	2300      	movs	r3, #0
 8018664:	83bb      	strh	r3, [r7, #28]
 8018666:	2300      	movs	r3, #0
 8018668:	837b      	strh	r3, [r7, #26]
 801866a:	2300      	movs	r3, #0
 801866c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801866e:	2300      	movs	r3, #0
 8018670:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018672:	e0b1      	b.n	80187d8 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8018674:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018678:	49a7      	ldr	r1, [pc, #668]	; (8018918 <etharp_find_entry+0x2d8>)
 801867a:	4613      	mov	r3, r2
 801867c:	005b      	lsls	r3, r3, #1
 801867e:	4413      	add	r3, r2
 8018680:	00db      	lsls	r3, r3, #3
 8018682:	440b      	add	r3, r1
 8018684:	3314      	adds	r3, #20
 8018686:	781b      	ldrb	r3, [r3, #0]
 8018688:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801868a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801868e:	2b0a      	cmp	r3, #10
 8018690:	d105      	bne.n	801869e <etharp_find_entry+0x5e>
 8018692:	7dfb      	ldrb	r3, [r7, #23]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d102      	bne.n	801869e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801869a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801869c:	e098      	b.n	80187d0 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 801869e:	7dfb      	ldrb	r3, [r7, #23]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	f000 8095 	beq.w	80187d0 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80186a6:	7dfb      	ldrb	r3, [r7, #23]
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d009      	beq.n	80186c0 <etharp_find_entry+0x80>
 80186ac:	7dfb      	ldrb	r3, [r7, #23]
 80186ae:	2b01      	cmp	r3, #1
 80186b0:	d806      	bhi.n	80186c0 <etharp_find_entry+0x80>
 80186b2:	4b9a      	ldr	r3, [pc, #616]	; (801891c <etharp_find_entry+0x2dc>)
 80186b4:	f240 1223 	movw	r2, #291	; 0x123
 80186b8:	4999      	ldr	r1, [pc, #612]	; (8018920 <etharp_find_entry+0x2e0>)
 80186ba:	489a      	ldr	r0, [pc, #616]	; (8018924 <etharp_find_entry+0x2e4>)
 80186bc:	f003 fbb4 	bl	801be28 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80186c0:	68fb      	ldr	r3, [r7, #12]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d020      	beq.n	8018708 <etharp_find_entry+0xc8>
 80186c6:	68fb      	ldr	r3, [r7, #12]
 80186c8:	6819      	ldr	r1, [r3, #0]
 80186ca:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80186ce:	4892      	ldr	r0, [pc, #584]	; (8018918 <etharp_find_entry+0x2d8>)
 80186d0:	4613      	mov	r3, r2
 80186d2:	005b      	lsls	r3, r3, #1
 80186d4:	4413      	add	r3, r2
 80186d6:	00db      	lsls	r3, r3, #3
 80186d8:	4403      	add	r3, r0
 80186da:	3304      	adds	r3, #4
 80186dc:	681b      	ldr	r3, [r3, #0]
 80186de:	4299      	cmp	r1, r3
 80186e0:	d112      	bne.n	8018708 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d00c      	beq.n	8018702 <etharp_find_entry+0xc2>
 80186e8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80186ec:	498a      	ldr	r1, [pc, #552]	; (8018918 <etharp_find_entry+0x2d8>)
 80186ee:	4613      	mov	r3, r2
 80186f0:	005b      	lsls	r3, r3, #1
 80186f2:	4413      	add	r3, r2
 80186f4:	00db      	lsls	r3, r3, #3
 80186f6:	440b      	add	r3, r1
 80186f8:	3308      	adds	r3, #8
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	687a      	ldr	r2, [r7, #4]
 80186fe:	429a      	cmp	r2, r3
 8018700:	d102      	bne.n	8018708 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018702:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018706:	e103      	b.n	8018910 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018708:	7dfb      	ldrb	r3, [r7, #23]
 801870a:	2b01      	cmp	r3, #1
 801870c:	d140      	bne.n	8018790 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801870e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018712:	4981      	ldr	r1, [pc, #516]	; (8018918 <etharp_find_entry+0x2d8>)
 8018714:	4613      	mov	r3, r2
 8018716:	005b      	lsls	r3, r3, #1
 8018718:	4413      	add	r3, r2
 801871a:	00db      	lsls	r3, r3, #3
 801871c:	440b      	add	r3, r1
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d01a      	beq.n	801875a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018724:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018728:	497b      	ldr	r1, [pc, #492]	; (8018918 <etharp_find_entry+0x2d8>)
 801872a:	4613      	mov	r3, r2
 801872c:	005b      	lsls	r3, r3, #1
 801872e:	4413      	add	r3, r2
 8018730:	00db      	lsls	r3, r3, #3
 8018732:	440b      	add	r3, r1
 8018734:	3312      	adds	r3, #18
 8018736:	881b      	ldrh	r3, [r3, #0]
 8018738:	8bba      	ldrh	r2, [r7, #28]
 801873a:	429a      	cmp	r2, r3
 801873c:	d848      	bhi.n	80187d0 <etharp_find_entry+0x190>
            old_queue = i;
 801873e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018740:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018742:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018746:	4974      	ldr	r1, [pc, #464]	; (8018918 <etharp_find_entry+0x2d8>)
 8018748:	4613      	mov	r3, r2
 801874a:	005b      	lsls	r3, r3, #1
 801874c:	4413      	add	r3, r2
 801874e:	00db      	lsls	r3, r3, #3
 8018750:	440b      	add	r3, r1
 8018752:	3312      	adds	r3, #18
 8018754:	881b      	ldrh	r3, [r3, #0]
 8018756:	83bb      	strh	r3, [r7, #28]
 8018758:	e03a      	b.n	80187d0 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801875a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801875e:	496e      	ldr	r1, [pc, #440]	; (8018918 <etharp_find_entry+0x2d8>)
 8018760:	4613      	mov	r3, r2
 8018762:	005b      	lsls	r3, r3, #1
 8018764:	4413      	add	r3, r2
 8018766:	00db      	lsls	r3, r3, #3
 8018768:	440b      	add	r3, r1
 801876a:	3312      	adds	r3, #18
 801876c:	881b      	ldrh	r3, [r3, #0]
 801876e:	8b7a      	ldrh	r2, [r7, #26]
 8018770:	429a      	cmp	r2, r3
 8018772:	d82d      	bhi.n	80187d0 <etharp_find_entry+0x190>
            old_pending = i;
 8018774:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018776:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8018778:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 801877c:	4966      	ldr	r1, [pc, #408]	; (8018918 <etharp_find_entry+0x2d8>)
 801877e:	4613      	mov	r3, r2
 8018780:	005b      	lsls	r3, r3, #1
 8018782:	4413      	add	r3, r2
 8018784:	00db      	lsls	r3, r3, #3
 8018786:	440b      	add	r3, r1
 8018788:	3312      	adds	r3, #18
 801878a:	881b      	ldrh	r3, [r3, #0]
 801878c:	837b      	strh	r3, [r7, #26]
 801878e:	e01f      	b.n	80187d0 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018790:	7dfb      	ldrb	r3, [r7, #23]
 8018792:	2b01      	cmp	r3, #1
 8018794:	d91c      	bls.n	80187d0 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8018796:	7dfb      	ldrb	r3, [r7, #23]
 8018798:	2b04      	cmp	r3, #4
 801879a:	d819      	bhi.n	80187d0 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801879c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80187a0:	495d      	ldr	r1, [pc, #372]	; (8018918 <etharp_find_entry+0x2d8>)
 80187a2:	4613      	mov	r3, r2
 80187a4:	005b      	lsls	r3, r3, #1
 80187a6:	4413      	add	r3, r2
 80187a8:	00db      	lsls	r3, r3, #3
 80187aa:	440b      	add	r3, r1
 80187ac:	3312      	adds	r3, #18
 80187ae:	881b      	ldrh	r3, [r3, #0]
 80187b0:	8b3a      	ldrh	r2, [r7, #24]
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d80c      	bhi.n	80187d0 <etharp_find_entry+0x190>
            old_stable = i;
 80187b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80187b8:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 80187ba:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80187be:	4956      	ldr	r1, [pc, #344]	; (8018918 <etharp_find_entry+0x2d8>)
 80187c0:	4613      	mov	r3, r2
 80187c2:	005b      	lsls	r3, r3, #1
 80187c4:	4413      	add	r3, r2
 80187c6:	00db      	lsls	r3, r3, #3
 80187c8:	440b      	add	r3, r1
 80187ca:	3312      	adds	r3, #18
 80187cc:	881b      	ldrh	r3, [r3, #0]
 80187ce:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80187d2:	3301      	adds	r3, #1
 80187d4:	b29b      	uxth	r3, r3
 80187d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80187d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80187dc:	2b09      	cmp	r3, #9
 80187de:	f77f af49 	ble.w	8018674 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80187e2:	7afb      	ldrb	r3, [r7, #11]
 80187e4:	f003 0302 	and.w	r3, r3, #2
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d108      	bne.n	80187fe <etharp_find_entry+0x1be>
 80187ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80187f0:	2b0a      	cmp	r3, #10
 80187f2:	d107      	bne.n	8018804 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80187f4:	7afb      	ldrb	r3, [r7, #11]
 80187f6:	f003 0301 	and.w	r3, r3, #1
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d102      	bne.n	8018804 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80187fe:	f04f 33ff 	mov.w	r3, #4294967295
 8018802:	e085      	b.n	8018910 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018804:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018808:	2b09      	cmp	r3, #9
 801880a:	dc02      	bgt.n	8018812 <etharp_find_entry+0x1d2>
    i = empty;
 801880c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801880e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018810:	e039      	b.n	8018886 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018812:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018816:	2b09      	cmp	r3, #9
 8018818:	dc14      	bgt.n	8018844 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 801881a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801881c:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801881e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8018822:	493d      	ldr	r1, [pc, #244]	; (8018918 <etharp_find_entry+0x2d8>)
 8018824:	4613      	mov	r3, r2
 8018826:	005b      	lsls	r3, r3, #1
 8018828:	4413      	add	r3, r2
 801882a:	00db      	lsls	r3, r3, #3
 801882c:	440b      	add	r3, r1
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2b00      	cmp	r3, #0
 8018832:	d018      	beq.n	8018866 <etharp_find_entry+0x226>
 8018834:	4b39      	ldr	r3, [pc, #228]	; (801891c <etharp_find_entry+0x2dc>)
 8018836:	f240 126d 	movw	r2, #365	; 0x16d
 801883a:	493b      	ldr	r1, [pc, #236]	; (8018928 <etharp_find_entry+0x2e8>)
 801883c:	4839      	ldr	r0, [pc, #228]	; (8018924 <etharp_find_entry+0x2e4>)
 801883e:	f003 faf3 	bl	801be28 <iprintf>
 8018842:	e010      	b.n	8018866 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018844:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018848:	2b09      	cmp	r3, #9
 801884a:	dc02      	bgt.n	8018852 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 801884c:	8c3b      	ldrh	r3, [r7, #32]
 801884e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018850:	e009      	b.n	8018866 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018852:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018856:	2b09      	cmp	r3, #9
 8018858:	dc02      	bgt.n	8018860 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801885a:	8bfb      	ldrh	r3, [r7, #30]
 801885c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801885e:	e002      	b.n	8018866 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018860:	f04f 33ff 	mov.w	r3, #4294967295
 8018864:	e054      	b.n	8018910 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018866:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801886a:	2b09      	cmp	r3, #9
 801886c:	dd06      	ble.n	801887c <etharp_find_entry+0x23c>
 801886e:	4b2b      	ldr	r3, [pc, #172]	; (801891c <etharp_find_entry+0x2dc>)
 8018870:	f240 127f 	movw	r2, #383	; 0x17f
 8018874:	492d      	ldr	r1, [pc, #180]	; (801892c <etharp_find_entry+0x2ec>)
 8018876:	482b      	ldr	r0, [pc, #172]	; (8018924 <etharp_find_entry+0x2e4>)
 8018878:	f003 fad6 	bl	801be28 <iprintf>
    etharp_free_entry(i);
 801887c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018880:	4618      	mov	r0, r3
 8018882:	f7ff fdd1 	bl	8018428 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018886:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801888a:	2b09      	cmp	r3, #9
 801888c:	dd06      	ble.n	801889c <etharp_find_entry+0x25c>
 801888e:	4b23      	ldr	r3, [pc, #140]	; (801891c <etharp_find_entry+0x2dc>)
 8018890:	f240 1283 	movw	r2, #387	; 0x183
 8018894:	4925      	ldr	r1, [pc, #148]	; (801892c <etharp_find_entry+0x2ec>)
 8018896:	4823      	ldr	r0, [pc, #140]	; (8018924 <etharp_find_entry+0x2e4>)
 8018898:	f003 fac6 	bl	801be28 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801889c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80188a0:	491d      	ldr	r1, [pc, #116]	; (8018918 <etharp_find_entry+0x2d8>)
 80188a2:	4613      	mov	r3, r2
 80188a4:	005b      	lsls	r3, r3, #1
 80188a6:	4413      	add	r3, r2
 80188a8:	00db      	lsls	r3, r3, #3
 80188aa:	440b      	add	r3, r1
 80188ac:	3314      	adds	r3, #20
 80188ae:	781b      	ldrb	r3, [r3, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d006      	beq.n	80188c2 <etharp_find_entry+0x282>
 80188b4:	4b19      	ldr	r3, [pc, #100]	; (801891c <etharp_find_entry+0x2dc>)
 80188b6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80188ba:	491d      	ldr	r1, [pc, #116]	; (8018930 <etharp_find_entry+0x2f0>)
 80188bc:	4819      	ldr	r0, [pc, #100]	; (8018924 <etharp_find_entry+0x2e4>)
 80188be:	f003 fab3 	bl	801be28 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d00b      	beq.n	80188e0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80188c8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	6819      	ldr	r1, [r3, #0]
 80188d0:	4811      	ldr	r0, [pc, #68]	; (8018918 <etharp_find_entry+0x2d8>)
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	4403      	add	r3, r0
 80188dc:	3304      	adds	r3, #4
 80188de:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80188e0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80188e4:	490c      	ldr	r1, [pc, #48]	; (8018918 <etharp_find_entry+0x2d8>)
 80188e6:	4613      	mov	r3, r2
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	4413      	add	r3, r2
 80188ec:	00db      	lsls	r3, r3, #3
 80188ee:	440b      	add	r3, r1
 80188f0:	3312      	adds	r3, #18
 80188f2:	2200      	movs	r2, #0
 80188f4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80188f6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80188fa:	4907      	ldr	r1, [pc, #28]	; (8018918 <etharp_find_entry+0x2d8>)
 80188fc:	4613      	mov	r3, r2
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	4413      	add	r3, r2
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	440b      	add	r3, r1
 8018906:	3308      	adds	r3, #8
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801890c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8018910:	4618      	mov	r0, r3
 8018912:	3728      	adds	r7, #40	; 0x28
 8018914:	46bd      	mov	sp, r7
 8018916:	bd80      	pop	{r7, pc}
 8018918:	20013d70 	.word	0x20013d70
 801891c:	08021a18 	.word	0x08021a18
 8018920:	08021a50 	.word	0x08021a50
 8018924:	08021a90 	.word	0x08021a90
 8018928:	08021ab8 	.word	0x08021ab8
 801892c:	08021ad0 	.word	0x08021ad0
 8018930:	08021ae4 	.word	0x08021ae4

08018934 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b088      	sub	sp, #32
 8018938:	af02      	add	r7, sp, #8
 801893a:	60f8      	str	r0, [r7, #12]
 801893c:	60b9      	str	r1, [r7, #8]
 801893e:	607a      	str	r2, [r7, #4]
 8018940:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018948:	2b06      	cmp	r3, #6
 801894a:	d006      	beq.n	801895a <etharp_update_arp_entry+0x26>
 801894c:	4b58      	ldr	r3, [pc, #352]	; (8018ab0 <etharp_update_arp_entry+0x17c>)
 801894e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018952:	4958      	ldr	r1, [pc, #352]	; (8018ab4 <etharp_update_arp_entry+0x180>)
 8018954:	4858      	ldr	r0, [pc, #352]	; (8018ab8 <etharp_update_arp_entry+0x184>)
 8018956:	f003 fa67 	bl	801be28 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d012      	beq.n	8018986 <etharp_update_arp_entry+0x52>
 8018960:	68bb      	ldr	r3, [r7, #8]
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d00e      	beq.n	8018986 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	68f9      	ldr	r1, [r7, #12]
 801896e:	4618      	mov	r0, r3
 8018970:	f001 fa00 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8018974:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018976:	2b00      	cmp	r3, #0
 8018978:	d105      	bne.n	8018986 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801897a:	68bb      	ldr	r3, [r7, #8]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018982:	2be0      	cmp	r3, #224	; 0xe0
 8018984:	d102      	bne.n	801898c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018986:	f06f 030f 	mvn.w	r3, #15
 801898a:	e08c      	b.n	8018aa6 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801898c:	78fb      	ldrb	r3, [r7, #3]
 801898e:	68fa      	ldr	r2, [r7, #12]
 8018990:	4619      	mov	r1, r3
 8018992:	68b8      	ldr	r0, [r7, #8]
 8018994:	f7ff fe54 	bl	8018640 <etharp_find_entry>
 8018998:	4603      	mov	r3, r0
 801899a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801899c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	da02      	bge.n	80189aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80189a4:	8afb      	ldrh	r3, [r7, #22]
 80189a6:	b25b      	sxtb	r3, r3
 80189a8:	e07d      	b.n	8018aa6 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 80189aa:	78fb      	ldrb	r3, [r7, #3]
 80189ac:	f003 0304 	and.w	r3, r3, #4
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d00b      	beq.n	80189cc <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 80189b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189b8:	4940      	ldr	r1, [pc, #256]	; (8018abc <etharp_update_arp_entry+0x188>)
 80189ba:	4613      	mov	r3, r2
 80189bc:	005b      	lsls	r3, r3, #1
 80189be:	4413      	add	r3, r2
 80189c0:	00db      	lsls	r3, r3, #3
 80189c2:	440b      	add	r3, r1
 80189c4:	3314      	adds	r3, #20
 80189c6:	2205      	movs	r2, #5
 80189c8:	701a      	strb	r2, [r3, #0]
 80189ca:	e019      	b.n	8018a00 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 80189cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189d0:	493a      	ldr	r1, [pc, #232]	; (8018abc <etharp_update_arp_entry+0x188>)
 80189d2:	4613      	mov	r3, r2
 80189d4:	005b      	lsls	r3, r3, #1
 80189d6:	4413      	add	r3, r2
 80189d8:	00db      	lsls	r3, r3, #3
 80189da:	440b      	add	r3, r1
 80189dc:	3314      	adds	r3, #20
 80189de:	781b      	ldrb	r3, [r3, #0]
 80189e0:	2b05      	cmp	r3, #5
 80189e2:	d102      	bne.n	80189ea <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 80189e4:	f06f 0305 	mvn.w	r3, #5
 80189e8:	e05d      	b.n	8018aa6 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80189ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80189ee:	4933      	ldr	r1, [pc, #204]	; (8018abc <etharp_update_arp_entry+0x188>)
 80189f0:	4613      	mov	r3, r2
 80189f2:	005b      	lsls	r3, r3, #1
 80189f4:	4413      	add	r3, r2
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	440b      	add	r3, r1
 80189fa:	3314      	adds	r3, #20
 80189fc:	2202      	movs	r2, #2
 80189fe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018a00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a04:	492d      	ldr	r1, [pc, #180]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a06:	4613      	mov	r3, r2
 8018a08:	005b      	lsls	r3, r3, #1
 8018a0a:	4413      	add	r3, r2
 8018a0c:	00db      	lsls	r3, r3, #3
 8018a0e:	440b      	add	r3, r1
 8018a10:	3308      	adds	r3, #8
 8018a12:	68fa      	ldr	r2, [r7, #12]
 8018a14:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018a16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	005b      	lsls	r3, r3, #1
 8018a1e:	4413      	add	r3, r2
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	3308      	adds	r3, #8
 8018a24:	4a25      	ldr	r2, [pc, #148]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a26:	4413      	add	r3, r2
 8018a28:	3304      	adds	r3, #4
 8018a2a:	2206      	movs	r2, #6
 8018a2c:	6879      	ldr	r1, [r7, #4]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f003 fc21 	bl	801c276 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018a34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a38:	4920      	ldr	r1, [pc, #128]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	005b      	lsls	r3, r3, #1
 8018a3e:	4413      	add	r3, r2
 8018a40:	00db      	lsls	r3, r3, #3
 8018a42:	440b      	add	r3, r1
 8018a44:	3312      	adds	r3, #18
 8018a46:	2200      	movs	r2, #0
 8018a48:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018a4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a4e:	491b      	ldr	r1, [pc, #108]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a50:	4613      	mov	r3, r2
 8018a52:	005b      	lsls	r3, r3, #1
 8018a54:	4413      	add	r3, r2
 8018a56:	00db      	lsls	r3, r3, #3
 8018a58:	440b      	add	r3, r1
 8018a5a:	681b      	ldr	r3, [r3, #0]
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d021      	beq.n	8018aa4 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8018a60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a64:	4915      	ldr	r1, [pc, #84]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a66:	4613      	mov	r3, r2
 8018a68:	005b      	lsls	r3, r3, #1
 8018a6a:	4413      	add	r3, r2
 8018a6c:	00db      	lsls	r3, r3, #3
 8018a6e:	440b      	add	r3, r1
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018a74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018a78:	4910      	ldr	r1, [pc, #64]	; (8018abc <etharp_update_arp_entry+0x188>)
 8018a7a:	4613      	mov	r3, r2
 8018a7c:	005b      	lsls	r3, r3, #1
 8018a7e:	4413      	add	r3, r2
 8018a80:	00db      	lsls	r3, r3, #3
 8018a82:	440b      	add	r3, r1
 8018a84:	2200      	movs	r2, #0
 8018a86:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018a92:	9300      	str	r3, [sp, #0]
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	6939      	ldr	r1, [r7, #16]
 8018a98:	68f8      	ldr	r0, [r7, #12]
 8018a9a:	f002 f9b3 	bl	801ae04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018a9e:	6938      	ldr	r0, [r7, #16]
 8018aa0:	f7f6 fafa 	bl	800f098 <pbuf_free>
  }
  return ERR_OK;
 8018aa4:	2300      	movs	r3, #0
}
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	3718      	adds	r7, #24
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	08021a18 	.word	0x08021a18
 8018ab4:	08021b10 	.word	0x08021b10
 8018ab8:	08021a90 	.word	0x08021a90
 8018abc:	20013d70 	.word	0x20013d70

08018ac0 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b084      	sub	sp, #16
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 8018aca:	6878      	ldr	r0, [r7, #4]
 8018acc:	f000 fe2c 	bl	8019728 <ip4_route>
 8018ad0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d102      	bne.n	8018ade <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8018ad8:	f06f 0303 	mvn.w	r3, #3
 8018adc:	e006      	b.n	8018aec <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 8018ade:	2305      	movs	r3, #5
 8018ae0:	683a      	ldr	r2, [r7, #0]
 8018ae2:	6879      	ldr	r1, [r7, #4]
 8018ae4:	68f8      	ldr	r0, [r7, #12]
 8018ae6:	f7ff ff25 	bl	8018934 <etharp_update_arp_entry>
 8018aea:	4603      	mov	r3, r0
}
 8018aec:	4618      	mov	r0, r3
 8018aee:	3710      	adds	r7, #16
 8018af0:	46bd      	mov	sp, r7
 8018af2:	bd80      	pop	{r7, pc}

08018af4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b084      	sub	sp, #16
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018afc:	2300      	movs	r3, #0
 8018afe:	60fb      	str	r3, [r7, #12]
 8018b00:	e01e      	b.n	8018b40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018b02:	4913      	ldr	r1, [pc, #76]	; (8018b50 <etharp_cleanup_netif+0x5c>)
 8018b04:	68fa      	ldr	r2, [r7, #12]
 8018b06:	4613      	mov	r3, r2
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	4413      	add	r3, r2
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	440b      	add	r3, r1
 8018b10:	3314      	adds	r3, #20
 8018b12:	781b      	ldrb	r3, [r3, #0]
 8018b14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018b16:	7afb      	ldrb	r3, [r7, #11]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d00e      	beq.n	8018b3a <etharp_cleanup_netif+0x46>
 8018b1c:	490c      	ldr	r1, [pc, #48]	; (8018b50 <etharp_cleanup_netif+0x5c>)
 8018b1e:	68fa      	ldr	r2, [r7, #12]
 8018b20:	4613      	mov	r3, r2
 8018b22:	005b      	lsls	r3, r3, #1
 8018b24:	4413      	add	r3, r2
 8018b26:	00db      	lsls	r3, r3, #3
 8018b28:	440b      	add	r3, r1
 8018b2a:	3308      	adds	r3, #8
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	429a      	cmp	r2, r3
 8018b32:	d102      	bne.n	8018b3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018b34:	68f8      	ldr	r0, [r7, #12]
 8018b36:	f7ff fc77 	bl	8018428 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	60fb      	str	r3, [r7, #12]
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	2b09      	cmp	r3, #9
 8018b44:	dddd      	ble.n	8018b02 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018b46:	bf00      	nop
 8018b48:	bf00      	nop
 8018b4a:	3710      	adds	r7, #16
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}
 8018b50:	20013d70 	.word	0x20013d70

08018b54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018b54:	b5b0      	push	{r4, r5, r7, lr}
 8018b56:	b08a      	sub	sp, #40	; 0x28
 8018b58:	af04      	add	r7, sp, #16
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018b5e:	683b      	ldr	r3, [r7, #0]
 8018b60:	2b00      	cmp	r3, #0
 8018b62:	d107      	bne.n	8018b74 <etharp_input+0x20>
 8018b64:	4b3f      	ldr	r3, [pc, #252]	; (8018c64 <etharp_input+0x110>)
 8018b66:	f240 228a 	movw	r2, #650	; 0x28a
 8018b6a:	493f      	ldr	r1, [pc, #252]	; (8018c68 <etharp_input+0x114>)
 8018b6c:	483f      	ldr	r0, [pc, #252]	; (8018c6c <etharp_input+0x118>)
 8018b6e:	f003 f95b 	bl	801be28 <iprintf>
 8018b72:	e074      	b.n	8018c5e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	685b      	ldr	r3, [r3, #4]
 8018b78:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	881b      	ldrh	r3, [r3, #0]
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018b84:	d10c      	bne.n	8018ba0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018b8a:	2b06      	cmp	r3, #6
 8018b8c:	d108      	bne.n	8018ba0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018b8e:	697b      	ldr	r3, [r7, #20]
 8018b90:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018b92:	2b04      	cmp	r3, #4
 8018b94:	d104      	bne.n	8018ba0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018b96:	697b      	ldr	r3, [r7, #20]
 8018b98:	885b      	ldrh	r3, [r3, #2]
 8018b9a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018b9c:	2b08      	cmp	r3, #8
 8018b9e:	d003      	beq.n	8018ba8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f7f6 fa79 	bl	800f098 <pbuf_free>
    return;
 8018ba6:	e05a      	b.n	8018c5e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018ba8:	697b      	ldr	r3, [r7, #20]
 8018baa:	330e      	adds	r3, #14
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018bb0:	697b      	ldr	r3, [r7, #20]
 8018bb2:	3318      	adds	r3, #24
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018bb8:	683b      	ldr	r3, [r7, #0]
 8018bba:	3304      	adds	r3, #4
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d102      	bne.n	8018bc8 <etharp_input+0x74>
    for_us = 0;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	74fb      	strb	r3, [r7, #19]
 8018bc6:	e009      	b.n	8018bdc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018bc8:	68ba      	ldr	r2, [r7, #8]
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	3304      	adds	r3, #4
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	429a      	cmp	r2, r3
 8018bd2:	bf0c      	ite	eq
 8018bd4:	2301      	moveq	r3, #1
 8018bd6:	2300      	movne	r3, #0
 8018bd8:	b2db      	uxtb	r3, r3
 8018bda:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	f103 0208 	add.w	r2, r3, #8
 8018be2:	7cfb      	ldrb	r3, [r7, #19]
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d001      	beq.n	8018bec <etharp_input+0x98>
 8018be8:	2301      	movs	r3, #1
 8018bea:	e000      	b.n	8018bee <etharp_input+0x9a>
 8018bec:	2302      	movs	r3, #2
 8018bee:	f107 010c 	add.w	r1, r7, #12
 8018bf2:	6838      	ldr	r0, [r7, #0]
 8018bf4:	f7ff fe9e 	bl	8018934 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018bf8:	697b      	ldr	r3, [r7, #20]
 8018bfa:	88db      	ldrh	r3, [r3, #6]
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018c02:	d003      	beq.n	8018c0c <etharp_input+0xb8>
 8018c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c08:	d01e      	beq.n	8018c48 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018c0a:	e025      	b.n	8018c58 <etharp_input+0x104>
      if (for_us) {
 8018c0c:	7cfb      	ldrb	r3, [r7, #19]
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d021      	beq.n	8018c56 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018c12:	683b      	ldr	r3, [r7, #0]
 8018c14:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018c18:	697b      	ldr	r3, [r7, #20]
 8018c1a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018c1e:	683b      	ldr	r3, [r7, #0]
 8018c20:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018c28:	697a      	ldr	r2, [r7, #20]
 8018c2a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018c2c:	2102      	movs	r1, #2
 8018c2e:	9103      	str	r1, [sp, #12]
 8018c30:	f107 010c 	add.w	r1, r7, #12
 8018c34:	9102      	str	r1, [sp, #8]
 8018c36:	9201      	str	r2, [sp, #4]
 8018c38:	9300      	str	r3, [sp, #0]
 8018c3a:	462b      	mov	r3, r5
 8018c3c:	4622      	mov	r2, r4
 8018c3e:	4601      	mov	r1, r0
 8018c40:	6838      	ldr	r0, [r7, #0]
 8018c42:	f000 faef 	bl	8019224 <etharp_raw>
      break;
 8018c46:	e006      	b.n	8018c56 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018c48:	f107 030c 	add.w	r3, r7, #12
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	6838      	ldr	r0, [r7, #0]
 8018c50:	f7fe f976 	bl	8016f40 <dhcp_arp_reply>
      break;
 8018c54:	e000      	b.n	8018c58 <etharp_input+0x104>
      break;
 8018c56:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018c58:	6878      	ldr	r0, [r7, #4]
 8018c5a:	f7f6 fa1d 	bl	800f098 <pbuf_free>
}
 8018c5e:	3718      	adds	r7, #24
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bdb0      	pop	{r4, r5, r7, pc}
 8018c64:	08021a18 	.word	0x08021a18
 8018c68:	08021b68 	.word	0x08021b68
 8018c6c:	08021a90 	.word	0x08021a90

08018c70 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b086      	sub	sp, #24
 8018c74:	af02      	add	r7, sp, #8
 8018c76:	60f8      	str	r0, [r7, #12]
 8018c78:	60b9      	str	r1, [r7, #8]
 8018c7a:	4613      	mov	r3, r2
 8018c7c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018c7e:	79fa      	ldrb	r2, [r7, #7]
 8018c80:	4944      	ldr	r1, [pc, #272]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018c82:	4613      	mov	r3, r2
 8018c84:	005b      	lsls	r3, r3, #1
 8018c86:	4413      	add	r3, r2
 8018c88:	00db      	lsls	r3, r3, #3
 8018c8a:	440b      	add	r3, r1
 8018c8c:	3314      	adds	r3, #20
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	2b01      	cmp	r3, #1
 8018c92:	d806      	bhi.n	8018ca2 <etharp_output_to_arp_index+0x32>
 8018c94:	4b40      	ldr	r3, [pc, #256]	; (8018d98 <etharp_output_to_arp_index+0x128>)
 8018c96:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018c9a:	4940      	ldr	r1, [pc, #256]	; (8018d9c <etharp_output_to_arp_index+0x12c>)
 8018c9c:	4840      	ldr	r0, [pc, #256]	; (8018da0 <etharp_output_to_arp_index+0x130>)
 8018c9e:	f003 f8c3 	bl	801be28 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018ca2:	79fa      	ldrb	r2, [r7, #7]
 8018ca4:	493b      	ldr	r1, [pc, #236]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018ca6:	4613      	mov	r3, r2
 8018ca8:	005b      	lsls	r3, r3, #1
 8018caa:	4413      	add	r3, r2
 8018cac:	00db      	lsls	r3, r3, #3
 8018cae:	440b      	add	r3, r1
 8018cb0:	3314      	adds	r3, #20
 8018cb2:	781b      	ldrb	r3, [r3, #0]
 8018cb4:	2b02      	cmp	r3, #2
 8018cb6:	d153      	bne.n	8018d60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018cb8:	79fa      	ldrb	r2, [r7, #7]
 8018cba:	4936      	ldr	r1, [pc, #216]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018cbc:	4613      	mov	r3, r2
 8018cbe:	005b      	lsls	r3, r3, #1
 8018cc0:	4413      	add	r3, r2
 8018cc2:	00db      	lsls	r3, r3, #3
 8018cc4:	440b      	add	r3, r1
 8018cc6:	3312      	adds	r3, #18
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018cce:	d919      	bls.n	8018d04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018cd0:	79fa      	ldrb	r2, [r7, #7]
 8018cd2:	4613      	mov	r3, r2
 8018cd4:	005b      	lsls	r3, r3, #1
 8018cd6:	4413      	add	r3, r2
 8018cd8:	00db      	lsls	r3, r3, #3
 8018cda:	4a2e      	ldr	r2, [pc, #184]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018cdc:	4413      	add	r3, r2
 8018cde:	3304      	adds	r3, #4
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	68f8      	ldr	r0, [r7, #12]
 8018ce4:	f000 fb4c 	bl	8019380 <etharp_request>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d138      	bne.n	8018d60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018cee:	79fa      	ldrb	r2, [r7, #7]
 8018cf0:	4928      	ldr	r1, [pc, #160]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018cf2:	4613      	mov	r3, r2
 8018cf4:	005b      	lsls	r3, r3, #1
 8018cf6:	4413      	add	r3, r2
 8018cf8:	00db      	lsls	r3, r3, #3
 8018cfa:	440b      	add	r3, r1
 8018cfc:	3314      	adds	r3, #20
 8018cfe:	2203      	movs	r2, #3
 8018d00:	701a      	strb	r2, [r3, #0]
 8018d02:	e02d      	b.n	8018d60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018d04:	79fa      	ldrb	r2, [r7, #7]
 8018d06:	4923      	ldr	r1, [pc, #140]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018d08:	4613      	mov	r3, r2
 8018d0a:	005b      	lsls	r3, r3, #1
 8018d0c:	4413      	add	r3, r2
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	440b      	add	r3, r1
 8018d12:	3312      	adds	r3, #18
 8018d14:	881b      	ldrh	r3, [r3, #0]
 8018d16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018d1a:	d321      	bcc.n	8018d60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018d1c:	79fa      	ldrb	r2, [r7, #7]
 8018d1e:	4613      	mov	r3, r2
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	4413      	add	r3, r2
 8018d24:	00db      	lsls	r3, r3, #3
 8018d26:	4a1b      	ldr	r2, [pc, #108]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018d28:	4413      	add	r3, r2
 8018d2a:	1d19      	adds	r1, r3, #4
 8018d2c:	79fa      	ldrb	r2, [r7, #7]
 8018d2e:	4613      	mov	r3, r2
 8018d30:	005b      	lsls	r3, r3, #1
 8018d32:	4413      	add	r3, r2
 8018d34:	00db      	lsls	r3, r3, #3
 8018d36:	3308      	adds	r3, #8
 8018d38:	4a16      	ldr	r2, [pc, #88]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018d3a:	4413      	add	r3, r2
 8018d3c:	3304      	adds	r3, #4
 8018d3e:	461a      	mov	r2, r3
 8018d40:	68f8      	ldr	r0, [r7, #12]
 8018d42:	f000 fafb 	bl	801933c <etharp_request_dst>
 8018d46:	4603      	mov	r3, r0
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d109      	bne.n	8018d60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018d4c:	79fa      	ldrb	r2, [r7, #7]
 8018d4e:	4911      	ldr	r1, [pc, #68]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018d50:	4613      	mov	r3, r2
 8018d52:	005b      	lsls	r3, r3, #1
 8018d54:	4413      	add	r3, r2
 8018d56:	00db      	lsls	r3, r3, #3
 8018d58:	440b      	add	r3, r1
 8018d5a:	3314      	adds	r3, #20
 8018d5c:	2203      	movs	r2, #3
 8018d5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018d66:	79fa      	ldrb	r2, [r7, #7]
 8018d68:	4613      	mov	r3, r2
 8018d6a:	005b      	lsls	r3, r3, #1
 8018d6c:	4413      	add	r3, r2
 8018d6e:	00db      	lsls	r3, r3, #3
 8018d70:	3308      	adds	r3, #8
 8018d72:	4a08      	ldr	r2, [pc, #32]	; (8018d94 <etharp_output_to_arp_index+0x124>)
 8018d74:	4413      	add	r3, r2
 8018d76:	3304      	adds	r3, #4
 8018d78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d7c:	9200      	str	r2, [sp, #0]
 8018d7e:	460a      	mov	r2, r1
 8018d80:	68b9      	ldr	r1, [r7, #8]
 8018d82:	68f8      	ldr	r0, [r7, #12]
 8018d84:	f002 f83e 	bl	801ae04 <ethernet_output>
 8018d88:	4603      	mov	r3, r0
}
 8018d8a:	4618      	mov	r0, r3
 8018d8c:	3710      	adds	r7, #16
 8018d8e:	46bd      	mov	sp, r7
 8018d90:	bd80      	pop	{r7, pc}
 8018d92:	bf00      	nop
 8018d94:	20013d70 	.word	0x20013d70
 8018d98:	08021a18 	.word	0x08021a18
 8018d9c:	08021b88 	.word	0x08021b88
 8018da0:	08021a90 	.word	0x08021a90

08018da4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	b08a      	sub	sp, #40	; 0x28
 8018da8:	af02      	add	r7, sp, #8
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d106      	bne.n	8018dc8 <etharp_output+0x24>
 8018dba:	4b73      	ldr	r3, [pc, #460]	; (8018f88 <etharp_output+0x1e4>)
 8018dbc:	f240 321e 	movw	r2, #798	; 0x31e
 8018dc0:	4972      	ldr	r1, [pc, #456]	; (8018f8c <etharp_output+0x1e8>)
 8018dc2:	4873      	ldr	r0, [pc, #460]	; (8018f90 <etharp_output+0x1ec>)
 8018dc4:	f003 f830 	bl	801be28 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018dc8:	68bb      	ldr	r3, [r7, #8]
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d106      	bne.n	8018ddc <etharp_output+0x38>
 8018dce:	4b6e      	ldr	r3, [pc, #440]	; (8018f88 <etharp_output+0x1e4>)
 8018dd0:	f240 321f 	movw	r2, #799	; 0x31f
 8018dd4:	496f      	ldr	r1, [pc, #444]	; (8018f94 <etharp_output+0x1f0>)
 8018dd6:	486e      	ldr	r0, [pc, #440]	; (8018f90 <etharp_output+0x1ec>)
 8018dd8:	f003 f826 	bl	801be28 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d106      	bne.n	8018df0 <etharp_output+0x4c>
 8018de2:	4b69      	ldr	r3, [pc, #420]	; (8018f88 <etharp_output+0x1e4>)
 8018de4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018de8:	496b      	ldr	r1, [pc, #428]	; (8018f98 <etharp_output+0x1f4>)
 8018dea:	4869      	ldr	r0, [pc, #420]	; (8018f90 <etharp_output+0x1ec>)
 8018dec:	f003 f81c 	bl	801be28 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	68f9      	ldr	r1, [r7, #12]
 8018df6:	4618      	mov	r0, r3
 8018df8:	f000 ffbc 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d002      	beq.n	8018e08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018e02:	4b66      	ldr	r3, [pc, #408]	; (8018f9c <etharp_output+0x1f8>)
 8018e04:	61fb      	str	r3, [r7, #28]
 8018e06:	e0af      	b.n	8018f68 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018e10:	2be0      	cmp	r3, #224	; 0xe0
 8018e12:	d118      	bne.n	8018e46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018e14:	2301      	movs	r3, #1
 8018e16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018e18:	2300      	movs	r3, #0
 8018e1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018e1c:	235e      	movs	r3, #94	; 0x5e
 8018e1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	3301      	adds	r3, #1
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e2a:	b2db      	uxtb	r3, r3
 8018e2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	3302      	adds	r3, #2
 8018e32:	781b      	ldrb	r3, [r3, #0]
 8018e34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	3303      	adds	r3, #3
 8018e3a:	781b      	ldrb	r3, [r3, #0]
 8018e3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018e3e:	f107 0310 	add.w	r3, r7, #16
 8018e42:	61fb      	str	r3, [r7, #28]
 8018e44:	e090      	b.n	8018f68 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681a      	ldr	r2, [r3, #0]
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	3304      	adds	r3, #4
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	405a      	eors	r2, r3
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	3308      	adds	r3, #8
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	4013      	ands	r3, r2
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d012      	beq.n	8018e84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018e5e:	687b      	ldr	r3, [r7, #4]
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018e64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d00b      	beq.n	8018e84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	330c      	adds	r3, #12
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d003      	beq.n	8018e7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	330c      	adds	r3, #12
 8018e7a:	61bb      	str	r3, [r7, #24]
 8018e7c:	e002      	b.n	8018e84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018e7e:	f06f 0303 	mvn.w	r3, #3
 8018e82:	e07d      	b.n	8018f80 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018e84:	4b46      	ldr	r3, [pc, #280]	; (8018fa0 <etharp_output+0x1fc>)
 8018e86:	781b      	ldrb	r3, [r3, #0]
 8018e88:	4619      	mov	r1, r3
 8018e8a:	4a46      	ldr	r2, [pc, #280]	; (8018fa4 <etharp_output+0x200>)
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	005b      	lsls	r3, r3, #1
 8018e90:	440b      	add	r3, r1
 8018e92:	00db      	lsls	r3, r3, #3
 8018e94:	4413      	add	r3, r2
 8018e96:	3314      	adds	r3, #20
 8018e98:	781b      	ldrb	r3, [r3, #0]
 8018e9a:	2b01      	cmp	r3, #1
 8018e9c:	d925      	bls.n	8018eea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018e9e:	4b40      	ldr	r3, [pc, #256]	; (8018fa0 <etharp_output+0x1fc>)
 8018ea0:	781b      	ldrb	r3, [r3, #0]
 8018ea2:	4619      	mov	r1, r3
 8018ea4:	4a3f      	ldr	r2, [pc, #252]	; (8018fa4 <etharp_output+0x200>)
 8018ea6:	460b      	mov	r3, r1
 8018ea8:	005b      	lsls	r3, r3, #1
 8018eaa:	440b      	add	r3, r1
 8018eac:	00db      	lsls	r3, r3, #3
 8018eae:	4413      	add	r3, r2
 8018eb0:	3308      	adds	r3, #8
 8018eb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018eb4:	68fa      	ldr	r2, [r7, #12]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d117      	bne.n	8018eea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018eba:	69bb      	ldr	r3, [r7, #24]
 8018ebc:	681a      	ldr	r2, [r3, #0]
 8018ebe:	4b38      	ldr	r3, [pc, #224]	; (8018fa0 <etharp_output+0x1fc>)
 8018ec0:	781b      	ldrb	r3, [r3, #0]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	4937      	ldr	r1, [pc, #220]	; (8018fa4 <etharp_output+0x200>)
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	005b      	lsls	r3, r3, #1
 8018eca:	4403      	add	r3, r0
 8018ecc:	00db      	lsls	r3, r3, #3
 8018ece:	440b      	add	r3, r1
 8018ed0:	3304      	adds	r3, #4
 8018ed2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d108      	bne.n	8018eea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018ed8:	4b31      	ldr	r3, [pc, #196]	; (8018fa0 <etharp_output+0x1fc>)
 8018eda:	781b      	ldrb	r3, [r3, #0]
 8018edc:	461a      	mov	r2, r3
 8018ede:	68b9      	ldr	r1, [r7, #8]
 8018ee0:	68f8      	ldr	r0, [r7, #12]
 8018ee2:	f7ff fec5 	bl	8018c70 <etharp_output_to_arp_index>
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	e04a      	b.n	8018f80 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018eea:	2300      	movs	r3, #0
 8018eec:	75fb      	strb	r3, [r7, #23]
 8018eee:	e031      	b.n	8018f54 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018ef0:	7dfa      	ldrb	r2, [r7, #23]
 8018ef2:	492c      	ldr	r1, [pc, #176]	; (8018fa4 <etharp_output+0x200>)
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	005b      	lsls	r3, r3, #1
 8018ef8:	4413      	add	r3, r2
 8018efa:	00db      	lsls	r3, r3, #3
 8018efc:	440b      	add	r3, r1
 8018efe:	3314      	adds	r3, #20
 8018f00:	781b      	ldrb	r3, [r3, #0]
 8018f02:	2b01      	cmp	r3, #1
 8018f04:	d923      	bls.n	8018f4e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018f06:	7dfa      	ldrb	r2, [r7, #23]
 8018f08:	4926      	ldr	r1, [pc, #152]	; (8018fa4 <etharp_output+0x200>)
 8018f0a:	4613      	mov	r3, r2
 8018f0c:	005b      	lsls	r3, r3, #1
 8018f0e:	4413      	add	r3, r2
 8018f10:	00db      	lsls	r3, r3, #3
 8018f12:	440b      	add	r3, r1
 8018f14:	3308      	adds	r3, #8
 8018f16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018f18:	68fa      	ldr	r2, [r7, #12]
 8018f1a:	429a      	cmp	r2, r3
 8018f1c:	d117      	bne.n	8018f4e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018f1e:	69bb      	ldr	r3, [r7, #24]
 8018f20:	6819      	ldr	r1, [r3, #0]
 8018f22:	7dfa      	ldrb	r2, [r7, #23]
 8018f24:	481f      	ldr	r0, [pc, #124]	; (8018fa4 <etharp_output+0x200>)
 8018f26:	4613      	mov	r3, r2
 8018f28:	005b      	lsls	r3, r3, #1
 8018f2a:	4413      	add	r3, r2
 8018f2c:	00db      	lsls	r3, r3, #3
 8018f2e:	4403      	add	r3, r0
 8018f30:	3304      	adds	r3, #4
 8018f32:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018f34:	4299      	cmp	r1, r3
 8018f36:	d10a      	bne.n	8018f4e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018f38:	4a19      	ldr	r2, [pc, #100]	; (8018fa0 <etharp_output+0x1fc>)
 8018f3a:	7dfb      	ldrb	r3, [r7, #23]
 8018f3c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018f3e:	7dfb      	ldrb	r3, [r7, #23]
 8018f40:	461a      	mov	r2, r3
 8018f42:	68b9      	ldr	r1, [r7, #8]
 8018f44:	68f8      	ldr	r0, [r7, #12]
 8018f46:	f7ff fe93 	bl	8018c70 <etharp_output_to_arp_index>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	e018      	b.n	8018f80 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018f4e:	7dfb      	ldrb	r3, [r7, #23]
 8018f50:	3301      	adds	r3, #1
 8018f52:	75fb      	strb	r3, [r7, #23]
 8018f54:	7dfb      	ldrb	r3, [r7, #23]
 8018f56:	2b09      	cmp	r3, #9
 8018f58:	d9ca      	bls.n	8018ef0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018f5a:	68ba      	ldr	r2, [r7, #8]
 8018f5c:	69b9      	ldr	r1, [r7, #24]
 8018f5e:	68f8      	ldr	r0, [r7, #12]
 8018f60:	f000 f822 	bl	8018fa8 <etharp_query>
 8018f64:	4603      	mov	r3, r0
 8018f66:	e00b      	b.n	8018f80 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8018f6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018f72:	9300      	str	r3, [sp, #0]
 8018f74:	69fb      	ldr	r3, [r7, #28]
 8018f76:	68b9      	ldr	r1, [r7, #8]
 8018f78:	68f8      	ldr	r0, [r7, #12]
 8018f7a:	f001 ff43 	bl	801ae04 <ethernet_output>
 8018f7e:	4603      	mov	r3, r0
}
 8018f80:	4618      	mov	r0, r3
 8018f82:	3720      	adds	r7, #32
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}
 8018f88:	08021a18 	.word	0x08021a18
 8018f8c:	08021b68 	.word	0x08021b68
 8018f90:	08021a90 	.word	0x08021a90
 8018f94:	08021bb8 	.word	0x08021bb8
 8018f98:	08021b58 	.word	0x08021b58
 8018f9c:	0806df48 	.word	0x0806df48
 8018fa0:	20013e60 	.word	0x20013e60
 8018fa4:	20013d70 	.word	0x20013d70

08018fa8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b08c      	sub	sp, #48	; 0x30
 8018fac:	af02      	add	r7, sp, #8
 8018fae:	60f8      	str	r0, [r7, #12]
 8018fb0:	60b9      	str	r1, [r7, #8]
 8018fb2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	332a      	adds	r3, #42	; 0x2a
 8018fb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018fba:	23ff      	movs	r3, #255	; 0xff
 8018fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018fc0:	2300      	movs	r3, #0
 8018fc2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fc4:	68bb      	ldr	r3, [r7, #8]
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	68f9      	ldr	r1, [r7, #12]
 8018fca:	4618      	mov	r0, r3
 8018fcc:	f000 fed2 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d10c      	bne.n	8018ff0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fde:	2be0      	cmp	r3, #224	; 0xe0
 8018fe0:	d006      	beq.n	8018ff0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018fe2:	68bb      	ldr	r3, [r7, #8]
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d003      	beq.n	8018ff0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d102      	bne.n	8018ff6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018ff0:	f06f 030f 	mvn.w	r3, #15
 8018ff4:	e101      	b.n	80191fa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018ff6:	68fa      	ldr	r2, [r7, #12]
 8018ff8:	2101      	movs	r1, #1
 8018ffa:	68b8      	ldr	r0, [r7, #8]
 8018ffc:	f7ff fb20 	bl	8018640 <etharp_find_entry>
 8019000:	4603      	mov	r3, r0
 8019002:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019008:	2b00      	cmp	r3, #0
 801900a:	da02      	bge.n	8019012 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801900c:	8a7b      	ldrh	r3, [r7, #18]
 801900e:	b25b      	sxtb	r3, r3
 8019010:	e0f3      	b.n	80191fa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8019012:	8a7b      	ldrh	r3, [r7, #18]
 8019014:	2b7e      	cmp	r3, #126	; 0x7e
 8019016:	d906      	bls.n	8019026 <etharp_query+0x7e>
 8019018:	4b7a      	ldr	r3, [pc, #488]	; (8019204 <etharp_query+0x25c>)
 801901a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801901e:	497a      	ldr	r1, [pc, #488]	; (8019208 <etharp_query+0x260>)
 8019020:	487a      	ldr	r0, [pc, #488]	; (801920c <etharp_query+0x264>)
 8019022:	f002 ff01 	bl	801be28 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019026:	8a7b      	ldrh	r3, [r7, #18]
 8019028:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801902a:	7c7a      	ldrb	r2, [r7, #17]
 801902c:	4978      	ldr	r1, [pc, #480]	; (8019210 <etharp_query+0x268>)
 801902e:	4613      	mov	r3, r2
 8019030:	005b      	lsls	r3, r3, #1
 8019032:	4413      	add	r3, r2
 8019034:	00db      	lsls	r3, r3, #3
 8019036:	440b      	add	r3, r1
 8019038:	3314      	adds	r3, #20
 801903a:	781b      	ldrb	r3, [r3, #0]
 801903c:	2b00      	cmp	r3, #0
 801903e:	d115      	bne.n	801906c <etharp_query+0xc4>
    is_new_entry = 1;
 8019040:	2301      	movs	r3, #1
 8019042:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019044:	7c7a      	ldrb	r2, [r7, #17]
 8019046:	4972      	ldr	r1, [pc, #456]	; (8019210 <etharp_query+0x268>)
 8019048:	4613      	mov	r3, r2
 801904a:	005b      	lsls	r3, r3, #1
 801904c:	4413      	add	r3, r2
 801904e:	00db      	lsls	r3, r3, #3
 8019050:	440b      	add	r3, r1
 8019052:	3314      	adds	r3, #20
 8019054:	2201      	movs	r2, #1
 8019056:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019058:	7c7a      	ldrb	r2, [r7, #17]
 801905a:	496d      	ldr	r1, [pc, #436]	; (8019210 <etharp_query+0x268>)
 801905c:	4613      	mov	r3, r2
 801905e:	005b      	lsls	r3, r3, #1
 8019060:	4413      	add	r3, r2
 8019062:	00db      	lsls	r3, r3, #3
 8019064:	440b      	add	r3, r1
 8019066:	3308      	adds	r3, #8
 8019068:	68fa      	ldr	r2, [r7, #12]
 801906a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801906c:	7c7a      	ldrb	r2, [r7, #17]
 801906e:	4968      	ldr	r1, [pc, #416]	; (8019210 <etharp_query+0x268>)
 8019070:	4613      	mov	r3, r2
 8019072:	005b      	lsls	r3, r3, #1
 8019074:	4413      	add	r3, r2
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	440b      	add	r3, r1
 801907a:	3314      	adds	r3, #20
 801907c:	781b      	ldrb	r3, [r3, #0]
 801907e:	2b01      	cmp	r3, #1
 8019080:	d011      	beq.n	80190a6 <etharp_query+0xfe>
 8019082:	7c7a      	ldrb	r2, [r7, #17]
 8019084:	4962      	ldr	r1, [pc, #392]	; (8019210 <etharp_query+0x268>)
 8019086:	4613      	mov	r3, r2
 8019088:	005b      	lsls	r3, r3, #1
 801908a:	4413      	add	r3, r2
 801908c:	00db      	lsls	r3, r3, #3
 801908e:	440b      	add	r3, r1
 8019090:	3314      	adds	r3, #20
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	2b01      	cmp	r3, #1
 8019096:	d806      	bhi.n	80190a6 <etharp_query+0xfe>
 8019098:	4b5a      	ldr	r3, [pc, #360]	; (8019204 <etharp_query+0x25c>)
 801909a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801909e:	495d      	ldr	r1, [pc, #372]	; (8019214 <etharp_query+0x26c>)
 80190a0:	485a      	ldr	r0, [pc, #360]	; (801920c <etharp_query+0x264>)
 80190a2:	f002 fec1 	bl	801be28 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80190a6:	6a3b      	ldr	r3, [r7, #32]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d102      	bne.n	80190b2 <etharp_query+0x10a>
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d10c      	bne.n	80190cc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80190b2:	68b9      	ldr	r1, [r7, #8]
 80190b4:	68f8      	ldr	r0, [r7, #12]
 80190b6:	f000 f963 	bl	8019380 <etharp_request>
 80190ba:	4603      	mov	r3, r0
 80190bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d102      	bne.n	80190cc <etharp_query+0x124>
      return result;
 80190c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80190ca:	e096      	b.n	80191fa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d106      	bne.n	80190e0 <etharp_query+0x138>
 80190d2:	4b4c      	ldr	r3, [pc, #304]	; (8019204 <etharp_query+0x25c>)
 80190d4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80190d8:	494f      	ldr	r1, [pc, #316]	; (8019218 <etharp_query+0x270>)
 80190da:	484c      	ldr	r0, [pc, #304]	; (801920c <etharp_query+0x264>)
 80190dc:	f002 fea4 	bl	801be28 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80190e0:	7c7a      	ldrb	r2, [r7, #17]
 80190e2:	494b      	ldr	r1, [pc, #300]	; (8019210 <etharp_query+0x268>)
 80190e4:	4613      	mov	r3, r2
 80190e6:	005b      	lsls	r3, r3, #1
 80190e8:	4413      	add	r3, r2
 80190ea:	00db      	lsls	r3, r3, #3
 80190ec:	440b      	add	r3, r1
 80190ee:	3314      	adds	r3, #20
 80190f0:	781b      	ldrb	r3, [r3, #0]
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	d917      	bls.n	8019126 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80190f6:	4a49      	ldr	r2, [pc, #292]	; (801921c <etharp_query+0x274>)
 80190f8:	7c7b      	ldrb	r3, [r7, #17]
 80190fa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80190fc:	7c7a      	ldrb	r2, [r7, #17]
 80190fe:	4613      	mov	r3, r2
 8019100:	005b      	lsls	r3, r3, #1
 8019102:	4413      	add	r3, r2
 8019104:	00db      	lsls	r3, r3, #3
 8019106:	3308      	adds	r3, #8
 8019108:	4a41      	ldr	r2, [pc, #260]	; (8019210 <etharp_query+0x268>)
 801910a:	4413      	add	r3, r2
 801910c:	3304      	adds	r3, #4
 801910e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019112:	9200      	str	r2, [sp, #0]
 8019114:	697a      	ldr	r2, [r7, #20]
 8019116:	6879      	ldr	r1, [r7, #4]
 8019118:	68f8      	ldr	r0, [r7, #12]
 801911a:	f001 fe73 	bl	801ae04 <ethernet_output>
 801911e:	4603      	mov	r3, r0
 8019120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019124:	e067      	b.n	80191f6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019126:	7c7a      	ldrb	r2, [r7, #17]
 8019128:	4939      	ldr	r1, [pc, #228]	; (8019210 <etharp_query+0x268>)
 801912a:	4613      	mov	r3, r2
 801912c:	005b      	lsls	r3, r3, #1
 801912e:	4413      	add	r3, r2
 8019130:	00db      	lsls	r3, r3, #3
 8019132:	440b      	add	r3, r1
 8019134:	3314      	adds	r3, #20
 8019136:	781b      	ldrb	r3, [r3, #0]
 8019138:	2b01      	cmp	r3, #1
 801913a:	d15c      	bne.n	80191f6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801913c:	2300      	movs	r3, #0
 801913e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019144:	e01c      	b.n	8019180 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019146:	69fb      	ldr	r3, [r7, #28]
 8019148:	895a      	ldrh	r2, [r3, #10]
 801914a:	69fb      	ldr	r3, [r7, #28]
 801914c:	891b      	ldrh	r3, [r3, #8]
 801914e:	429a      	cmp	r2, r3
 8019150:	d10a      	bne.n	8019168 <etharp_query+0x1c0>
 8019152:	69fb      	ldr	r3, [r7, #28]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d006      	beq.n	8019168 <etharp_query+0x1c0>
 801915a:	4b2a      	ldr	r3, [pc, #168]	; (8019204 <etharp_query+0x25c>)
 801915c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019160:	492f      	ldr	r1, [pc, #188]	; (8019220 <etharp_query+0x278>)
 8019162:	482a      	ldr	r0, [pc, #168]	; (801920c <etharp_query+0x264>)
 8019164:	f002 fe60 	bl	801be28 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019168:	69fb      	ldr	r3, [r7, #28]
 801916a:	7b1b      	ldrb	r3, [r3, #12]
 801916c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <etharp_query+0x1d2>
        copy_needed = 1;
 8019174:	2301      	movs	r3, #1
 8019176:	61bb      	str	r3, [r7, #24]
        break;
 8019178:	e005      	b.n	8019186 <etharp_query+0x1de>
      }
      p = p->next;
 801917a:	69fb      	ldr	r3, [r7, #28]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019180:	69fb      	ldr	r3, [r7, #28]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d1df      	bne.n	8019146 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019186:	69bb      	ldr	r3, [r7, #24]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d007      	beq.n	801919c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801918c:	687a      	ldr	r2, [r7, #4]
 801918e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019192:	200e      	movs	r0, #14
 8019194:	f7f6 fb30 	bl	800f7f8 <pbuf_clone>
 8019198:	61f8      	str	r0, [r7, #28]
 801919a:	e004      	b.n	80191a6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80191a0:	69f8      	ldr	r0, [r7, #28]
 80191a2:	f7f6 f81f 	bl	800f1e4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80191a6:	69fb      	ldr	r3, [r7, #28]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d021      	beq.n	80191f0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80191ac:	7c7a      	ldrb	r2, [r7, #17]
 80191ae:	4918      	ldr	r1, [pc, #96]	; (8019210 <etharp_query+0x268>)
 80191b0:	4613      	mov	r3, r2
 80191b2:	005b      	lsls	r3, r3, #1
 80191b4:	4413      	add	r3, r2
 80191b6:	00db      	lsls	r3, r3, #3
 80191b8:	440b      	add	r3, r1
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d00a      	beq.n	80191d6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80191c0:	7c7a      	ldrb	r2, [r7, #17]
 80191c2:	4913      	ldr	r1, [pc, #76]	; (8019210 <etharp_query+0x268>)
 80191c4:	4613      	mov	r3, r2
 80191c6:	005b      	lsls	r3, r3, #1
 80191c8:	4413      	add	r3, r2
 80191ca:	00db      	lsls	r3, r3, #3
 80191cc:	440b      	add	r3, r1
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f7f5 ff61 	bl	800f098 <pbuf_free>
      }
      arp_table[i].q = p;
 80191d6:	7c7a      	ldrb	r2, [r7, #17]
 80191d8:	490d      	ldr	r1, [pc, #52]	; (8019210 <etharp_query+0x268>)
 80191da:	4613      	mov	r3, r2
 80191dc:	005b      	lsls	r3, r3, #1
 80191de:	4413      	add	r3, r2
 80191e0:	00db      	lsls	r3, r3, #3
 80191e2:	440b      	add	r3, r1
 80191e4:	69fa      	ldr	r2, [r7, #28]
 80191e6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80191e8:	2300      	movs	r3, #0
 80191ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80191ee:	e002      	b.n	80191f6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80191f0:	23ff      	movs	r3, #255	; 0xff
 80191f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80191f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	3728      	adds	r7, #40	; 0x28
 80191fe:	46bd      	mov	sp, r7
 8019200:	bd80      	pop	{r7, pc}
 8019202:	bf00      	nop
 8019204:	08021a18 	.word	0x08021a18
 8019208:	08021bc4 	.word	0x08021bc4
 801920c:	08021a90 	.word	0x08021a90
 8019210:	20013d70 	.word	0x20013d70
 8019214:	08021bd4 	.word	0x08021bd4
 8019218:	08021bb8 	.word	0x08021bb8
 801921c:	20013e60 	.word	0x20013e60
 8019220:	08021bfc 	.word	0x08021bfc

08019224 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b08a      	sub	sp, #40	; 0x28
 8019228:	af02      	add	r7, sp, #8
 801922a:	60f8      	str	r0, [r7, #12]
 801922c:	60b9      	str	r1, [r7, #8]
 801922e:	607a      	str	r2, [r7, #4]
 8019230:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8019232:	2300      	movs	r3, #0
 8019234:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d106      	bne.n	801924a <etharp_raw+0x26>
 801923c:	4b3a      	ldr	r3, [pc, #232]	; (8019328 <etharp_raw+0x104>)
 801923e:	f240 4257 	movw	r2, #1111	; 0x457
 8019242:	493a      	ldr	r1, [pc, #232]	; (801932c <etharp_raw+0x108>)
 8019244:	483a      	ldr	r0, [pc, #232]	; (8019330 <etharp_raw+0x10c>)
 8019246:	f002 fdef 	bl	801be28 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801924a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801924e:	211c      	movs	r1, #28
 8019250:	200e      	movs	r0, #14
 8019252:	f7f5 fc39 	bl	800eac8 <pbuf_alloc>
 8019256:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019258:	69bb      	ldr	r3, [r7, #24]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d102      	bne.n	8019264 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801925e:	f04f 33ff 	mov.w	r3, #4294967295
 8019262:	e05d      	b.n	8019320 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019264:	69bb      	ldr	r3, [r7, #24]
 8019266:	895b      	ldrh	r3, [r3, #10]
 8019268:	2b1b      	cmp	r3, #27
 801926a:	d806      	bhi.n	801927a <etharp_raw+0x56>
 801926c:	4b2e      	ldr	r3, [pc, #184]	; (8019328 <etharp_raw+0x104>)
 801926e:	f240 4262 	movw	r2, #1122	; 0x462
 8019272:	4930      	ldr	r1, [pc, #192]	; (8019334 <etharp_raw+0x110>)
 8019274:	482e      	ldr	r0, [pc, #184]	; (8019330 <etharp_raw+0x10c>)
 8019276:	f002 fdd7 	bl	801be28 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801927a:	69bb      	ldr	r3, [r7, #24]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019280:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019282:	4618      	mov	r0, r3
 8019284:	f7f4 f9e6 	bl	800d654 <lwip_htons>
 8019288:	4603      	mov	r3, r0
 801928a:	461a      	mov	r2, r3
 801928c:	697b      	ldr	r3, [r7, #20]
 801928e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019296:	2b06      	cmp	r3, #6
 8019298:	d006      	beq.n	80192a8 <etharp_raw+0x84>
 801929a:	4b23      	ldr	r3, [pc, #140]	; (8019328 <etharp_raw+0x104>)
 801929c:	f240 4269 	movw	r2, #1129	; 0x469
 80192a0:	4925      	ldr	r1, [pc, #148]	; (8019338 <etharp_raw+0x114>)
 80192a2:	4823      	ldr	r0, [pc, #140]	; (8019330 <etharp_raw+0x10c>)
 80192a4:	f002 fdc0 	bl	801be28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80192a8:	697b      	ldr	r3, [r7, #20]
 80192aa:	3308      	adds	r3, #8
 80192ac:	2206      	movs	r2, #6
 80192ae:	6839      	ldr	r1, [r7, #0]
 80192b0:	4618      	mov	r0, r3
 80192b2:	f002 ffe0 	bl	801c276 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80192b6:	697b      	ldr	r3, [r7, #20]
 80192b8:	3312      	adds	r3, #18
 80192ba:	2206      	movs	r2, #6
 80192bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80192be:	4618      	mov	r0, r3
 80192c0:	f002 ffd9 	bl	801c276 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	330e      	adds	r3, #14
 80192c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80192ca:	6812      	ldr	r2, [r2, #0]
 80192cc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80192ce:	697b      	ldr	r3, [r7, #20]
 80192d0:	3318      	adds	r3, #24
 80192d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192d4:	6812      	ldr	r2, [r2, #0]
 80192d6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80192d8:	697b      	ldr	r3, [r7, #20]
 80192da:	2200      	movs	r2, #0
 80192dc:	701a      	strb	r2, [r3, #0]
 80192de:	2200      	movs	r2, #0
 80192e0:	f042 0201 	orr.w	r2, r2, #1
 80192e4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80192e6:	697b      	ldr	r3, [r7, #20]
 80192e8:	2200      	movs	r2, #0
 80192ea:	f042 0208 	orr.w	r2, r2, #8
 80192ee:	709a      	strb	r2, [r3, #2]
 80192f0:	2200      	movs	r2, #0
 80192f2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80192f4:	697b      	ldr	r3, [r7, #20]
 80192f6:	2206      	movs	r2, #6
 80192f8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80192fa:	697b      	ldr	r3, [r7, #20]
 80192fc:	2204      	movs	r2, #4
 80192fe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8019300:	f640 0306 	movw	r3, #2054	; 0x806
 8019304:	9300      	str	r3, [sp, #0]
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	68ba      	ldr	r2, [r7, #8]
 801930a:	69b9      	ldr	r1, [r7, #24]
 801930c:	68f8      	ldr	r0, [r7, #12]
 801930e:	f001 fd79 	bl	801ae04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019312:	69b8      	ldr	r0, [r7, #24]
 8019314:	f7f5 fec0 	bl	800f098 <pbuf_free>
  p = NULL;
 8019318:	2300      	movs	r3, #0
 801931a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801931c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019320:	4618      	mov	r0, r3
 8019322:	3720      	adds	r7, #32
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}
 8019328:	08021a18 	.word	0x08021a18
 801932c:	08021b68 	.word	0x08021b68
 8019330:	08021a90 	.word	0x08021a90
 8019334:	08021c18 	.word	0x08021c18
 8019338:	08021c4c 	.word	0x08021c4c

0801933c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	b088      	sub	sp, #32
 8019340:	af04      	add	r7, sp, #16
 8019342:	60f8      	str	r0, [r7, #12]
 8019344:	60b9      	str	r1, [r7, #8]
 8019346:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019358:	2201      	movs	r2, #1
 801935a:	9203      	str	r2, [sp, #12]
 801935c:	68ba      	ldr	r2, [r7, #8]
 801935e:	9202      	str	r2, [sp, #8]
 8019360:	4a06      	ldr	r2, [pc, #24]	; (801937c <etharp_request_dst+0x40>)
 8019362:	9201      	str	r2, [sp, #4]
 8019364:	9300      	str	r3, [sp, #0]
 8019366:	4603      	mov	r3, r0
 8019368:	687a      	ldr	r2, [r7, #4]
 801936a:	68f8      	ldr	r0, [r7, #12]
 801936c:	f7ff ff5a 	bl	8019224 <etharp_raw>
 8019370:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019372:	4618      	mov	r0, r3
 8019374:	3710      	adds	r7, #16
 8019376:	46bd      	mov	sp, r7
 8019378:	bd80      	pop	{r7, pc}
 801937a:	bf00      	nop
 801937c:	0806df50 	.word	0x0806df50

08019380 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
 8019388:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801938a:	4a05      	ldr	r2, [pc, #20]	; (80193a0 <etharp_request+0x20>)
 801938c:	6839      	ldr	r1, [r7, #0]
 801938e:	6878      	ldr	r0, [r7, #4]
 8019390:	f7ff ffd4 	bl	801933c <etharp_request_dst>
 8019394:	4603      	mov	r3, r0
}
 8019396:	4618      	mov	r0, r3
 8019398:	3708      	adds	r7, #8
 801939a:	46bd      	mov	sp, r7
 801939c:	bd80      	pop	{r7, pc}
 801939e:	bf00      	nop
 80193a0:	0806df48 	.word	0x0806df48

080193a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b08e      	sub	sp, #56	; 0x38
 80193a8:	af04      	add	r7, sp, #16
 80193aa:	6078      	str	r0, [r7, #4]
 80193ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80193ae:	4b8e      	ldr	r3, [pc, #568]	; (80195e8 <icmp_input+0x244>)
 80193b0:	689b      	ldr	r3, [r3, #8]
 80193b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80193b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b6:	781b      	ldrb	r3, [r3, #0]
 80193b8:	f003 030f 	and.w	r3, r3, #15
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	b2db      	uxtb	r3, r3
 80193c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80193c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80193c6:	2b13      	cmp	r3, #19
 80193c8:	f240 80f6 	bls.w	80195b8 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	895b      	ldrh	r3, [r3, #10]
 80193d0:	2b03      	cmp	r3, #3
 80193d2:	f240 80f3 	bls.w	80195bc <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	685b      	ldr	r3, [r3, #4]
 80193da:	781b      	ldrb	r3, [r3, #0]
 80193dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	785b      	ldrb	r3, [r3, #1]
 80193e6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80193ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	f000 80db 	beq.w	80195aa <icmp_input+0x206>
 80193f4:	2b08      	cmp	r3, #8
 80193f6:	f040 80db 	bne.w	80195b0 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80193fa:	4b7c      	ldr	r3, [pc, #496]	; (80195ec <icmp_input+0x248>)
 80193fc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80193fe:	4b7a      	ldr	r3, [pc, #488]	; (80195e8 <icmp_input+0x244>)
 8019400:	695b      	ldr	r3, [r3, #20]
 8019402:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019406:	2be0      	cmp	r3, #224	; 0xe0
 8019408:	f000 80df 	beq.w	80195ca <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801940c:	4b76      	ldr	r3, [pc, #472]	; (80195e8 <icmp_input+0x244>)
 801940e:	695b      	ldr	r3, [r3, #20]
 8019410:	4a75      	ldr	r2, [pc, #468]	; (80195e8 <icmp_input+0x244>)
 8019412:	6812      	ldr	r2, [r2, #0]
 8019414:	4611      	mov	r1, r2
 8019416:	4618      	mov	r0, r3
 8019418:	f000 fcac 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 801941c:	4603      	mov	r3, r0
 801941e:	2b00      	cmp	r3, #0
 8019420:	f040 80d5 	bne.w	80195ce <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	891b      	ldrh	r3, [r3, #8]
 8019428:	2b07      	cmp	r3, #7
 801942a:	f240 80c9 	bls.w	80195c0 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801942e:	6878      	ldr	r0, [r7, #4]
 8019430:	f7f4 fa6a 	bl	800d908 <inet_chksum_pbuf>
 8019434:	4603      	mov	r3, r0
 8019436:	2b00      	cmp	r3, #0
 8019438:	d003      	beq.n	8019442 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801943a:	6878      	ldr	r0, [r7, #4]
 801943c:	f7f5 fe2c 	bl	800f098 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019440:	e0ce      	b.n	80195e0 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019444:	330e      	adds	r3, #14
 8019446:	4619      	mov	r1, r3
 8019448:	6878      	ldr	r0, [r7, #4]
 801944a:	f7f5 fd8f 	bl	800ef6c <pbuf_add_header>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	d04b      	beq.n	80194ec <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	891a      	ldrh	r2, [r3, #8]
 8019458:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801945a:	4413      	add	r3, r2
 801945c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	891b      	ldrh	r3, [r3, #8]
 8019462:	8b7a      	ldrh	r2, [r7, #26]
 8019464:	429a      	cmp	r2, r3
 8019466:	f0c0 80b4 	bcc.w	80195d2 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801946a:	8b7b      	ldrh	r3, [r7, #26]
 801946c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019470:	4619      	mov	r1, r3
 8019472:	200e      	movs	r0, #14
 8019474:	f7f5 fb28 	bl	800eac8 <pbuf_alloc>
 8019478:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	2b00      	cmp	r3, #0
 801947e:	f000 80aa 	beq.w	80195d6 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019482:	697b      	ldr	r3, [r7, #20]
 8019484:	895b      	ldrh	r3, [r3, #10]
 8019486:	461a      	mov	r2, r3
 8019488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801948a:	3308      	adds	r3, #8
 801948c:	429a      	cmp	r2, r3
 801948e:	d203      	bcs.n	8019498 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019490:	6978      	ldr	r0, [r7, #20]
 8019492:	f7f5 fe01 	bl	800f098 <pbuf_free>
          goto icmperr;
 8019496:	e09f      	b.n	80195d8 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019498:	697b      	ldr	r3, [r7, #20]
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801949e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80194a0:	4618      	mov	r0, r3
 80194a2:	f002 fee8 	bl	801c276 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80194a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194a8:	4619      	mov	r1, r3
 80194aa:	6978      	ldr	r0, [r7, #20]
 80194ac:	f7f5 fd6e 	bl	800ef8c <pbuf_remove_header>
 80194b0:	4603      	mov	r3, r0
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d009      	beq.n	80194ca <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80194b6:	4b4e      	ldr	r3, [pc, #312]	; (80195f0 <icmp_input+0x24c>)
 80194b8:	22b6      	movs	r2, #182	; 0xb6
 80194ba:	494e      	ldr	r1, [pc, #312]	; (80195f4 <icmp_input+0x250>)
 80194bc:	484e      	ldr	r0, [pc, #312]	; (80195f8 <icmp_input+0x254>)
 80194be:	f002 fcb3 	bl	801be28 <iprintf>
          pbuf_free(r);
 80194c2:	6978      	ldr	r0, [r7, #20]
 80194c4:	f7f5 fde8 	bl	800f098 <pbuf_free>
          goto icmperr;
 80194c8:	e086      	b.n	80195d8 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80194ca:	6879      	ldr	r1, [r7, #4]
 80194cc:	6978      	ldr	r0, [r7, #20]
 80194ce:	f7f5 ff17 	bl	800f300 <pbuf_copy>
 80194d2:	4603      	mov	r3, r0
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d003      	beq.n	80194e0 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80194d8:	6978      	ldr	r0, [r7, #20]
 80194da:	f7f5 fddd 	bl	800f098 <pbuf_free>
          goto icmperr;
 80194de:	e07b      	b.n	80195d8 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80194e0:	6878      	ldr	r0, [r7, #4]
 80194e2:	f7f5 fdd9 	bl	800f098 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80194e6:	697b      	ldr	r3, [r7, #20]
 80194e8:	607b      	str	r3, [r7, #4]
 80194ea:	e00f      	b.n	801950c <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80194ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80194ee:	330e      	adds	r3, #14
 80194f0:	4619      	mov	r1, r3
 80194f2:	6878      	ldr	r0, [r7, #4]
 80194f4:	f7f5 fd4a 	bl	800ef8c <pbuf_remove_header>
 80194f8:	4603      	mov	r3, r0
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d006      	beq.n	801950c <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80194fe:	4b3c      	ldr	r3, [pc, #240]	; (80195f0 <icmp_input+0x24c>)
 8019500:	22c7      	movs	r2, #199	; 0xc7
 8019502:	493e      	ldr	r1, [pc, #248]	; (80195fc <icmp_input+0x258>)
 8019504:	483c      	ldr	r0, [pc, #240]	; (80195f8 <icmp_input+0x254>)
 8019506:	f002 fc8f 	bl	801be28 <iprintf>
          goto icmperr;
 801950a:	e065      	b.n	80195d8 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	685b      	ldr	r3, [r3, #4]
 8019510:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019514:	4619      	mov	r1, r3
 8019516:	6878      	ldr	r0, [r7, #4]
 8019518:	f7f5 fd28 	bl	800ef6c <pbuf_add_header>
 801951c:	4603      	mov	r3, r0
 801951e:	2b00      	cmp	r3, #0
 8019520:	d145      	bne.n	80195ae <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019528:	69fb      	ldr	r3, [r7, #28]
 801952a:	681a      	ldr	r2, [r3, #0]
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019530:	4b2d      	ldr	r3, [pc, #180]	; (80195e8 <icmp_input+0x244>)
 8019532:	691a      	ldr	r2, [r3, #16]
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019538:	693b      	ldr	r3, [r7, #16]
 801953a:	2200      	movs	r2, #0
 801953c:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	885b      	ldrh	r3, [r3, #2]
 8019542:	b29b      	uxth	r3, r3
 8019544:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019548:	4293      	cmp	r3, r2
 801954a:	d907      	bls.n	801955c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801954c:	693b      	ldr	r3, [r7, #16]
 801954e:	885b      	ldrh	r3, [r3, #2]
 8019550:	b29b      	uxth	r3, r3
 8019552:	3309      	adds	r3, #9
 8019554:	b29a      	uxth	r2, r3
 8019556:	693b      	ldr	r3, [r7, #16]
 8019558:	805a      	strh	r2, [r3, #2]
 801955a:	e006      	b.n	801956a <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801955c:	693b      	ldr	r3, [r7, #16]
 801955e:	885b      	ldrh	r3, [r3, #2]
 8019560:	b29b      	uxth	r3, r3
 8019562:	3308      	adds	r3, #8
 8019564:	b29a      	uxth	r2, r3
 8019566:	693b      	ldr	r3, [r7, #16]
 8019568:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	22ff      	movs	r2, #255	; 0xff
 801956e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	2200      	movs	r2, #0
 8019574:	729a      	strb	r2, [r3, #10]
 8019576:	2200      	movs	r2, #0
 8019578:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801957a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801957c:	4619      	mov	r1, r3
 801957e:	68f8      	ldr	r0, [r7, #12]
 8019580:	f7f4 f9b0 	bl	800d8e4 <inet_chksum>
 8019584:	4603      	mov	r3, r0
 8019586:	461a      	mov	r2, r3
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	9302      	str	r3, [sp, #8]
 8019590:	2301      	movs	r3, #1
 8019592:	9301      	str	r3, [sp, #4]
 8019594:	2300      	movs	r3, #0
 8019596:	9300      	str	r3, [sp, #0]
 8019598:	23ff      	movs	r3, #255	; 0xff
 801959a:	2200      	movs	r2, #0
 801959c:	69f9      	ldr	r1, [r7, #28]
 801959e:	6878      	ldr	r0, [r7, #4]
 80195a0:	f000 faaa 	bl	8019af8 <ip4_output_if>
 80195a4:	4603      	mov	r3, r0
 80195a6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80195a8:	e001      	b.n	80195ae <icmp_input+0x20a>
      break;
 80195aa:	bf00      	nop
 80195ac:	e000      	b.n	80195b0 <icmp_input+0x20c>
      break;
 80195ae:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80195b0:	6878      	ldr	r0, [r7, #4]
 80195b2:	f7f5 fd71 	bl	800f098 <pbuf_free>
  return;
 80195b6:	e013      	b.n	80195e0 <icmp_input+0x23c>
    goto lenerr;
 80195b8:	bf00      	nop
 80195ba:	e002      	b.n	80195c2 <icmp_input+0x21e>
    goto lenerr;
 80195bc:	bf00      	nop
 80195be:	e000      	b.n	80195c2 <icmp_input+0x21e>
        goto lenerr;
 80195c0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80195c2:	6878      	ldr	r0, [r7, #4]
 80195c4:	f7f5 fd68 	bl	800f098 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80195c8:	e00a      	b.n	80195e0 <icmp_input+0x23c>
        goto icmperr;
 80195ca:	bf00      	nop
 80195cc:	e004      	b.n	80195d8 <icmp_input+0x234>
        goto icmperr;
 80195ce:	bf00      	nop
 80195d0:	e002      	b.n	80195d8 <icmp_input+0x234>
          goto icmperr;
 80195d2:	bf00      	nop
 80195d4:	e000      	b.n	80195d8 <icmp_input+0x234>
          goto icmperr;
 80195d6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f7f5 fd5d 	bl	800f098 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80195de:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80195e0:	3728      	adds	r7, #40	; 0x28
 80195e2:	46bd      	mov	sp, r7
 80195e4:	bd80      	pop	{r7, pc}
 80195e6:	bf00      	nop
 80195e8:	2000a264 	.word	0x2000a264
 80195ec:	2000a278 	.word	0x2000a278
 80195f0:	08021c90 	.word	0x08021c90
 80195f4:	08021cc8 	.word	0x08021cc8
 80195f8:	08021d00 	.word	0x08021d00
 80195fc:	08021d28 	.word	0x08021d28

08019600 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b082      	sub	sp, #8
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	460b      	mov	r3, r1
 801960a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801960c:	78fb      	ldrb	r3, [r7, #3]
 801960e:	461a      	mov	r2, r3
 8019610:	2103      	movs	r1, #3
 8019612:	6878      	ldr	r0, [r7, #4]
 8019614:	f000 f814 	bl	8019640 <icmp_send_response>
}
 8019618:	bf00      	nop
 801961a:	3708      	adds	r7, #8
 801961c:	46bd      	mov	sp, r7
 801961e:	bd80      	pop	{r7, pc}

08019620 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b082      	sub	sp, #8
 8019624:	af00      	add	r7, sp, #0
 8019626:	6078      	str	r0, [r7, #4]
 8019628:	460b      	mov	r3, r1
 801962a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801962c:	78fb      	ldrb	r3, [r7, #3]
 801962e:	461a      	mov	r2, r3
 8019630:	210b      	movs	r1, #11
 8019632:	6878      	ldr	r0, [r7, #4]
 8019634:	f000 f804 	bl	8019640 <icmp_send_response>
}
 8019638:	bf00      	nop
 801963a:	3708      	adds	r7, #8
 801963c:	46bd      	mov	sp, r7
 801963e:	bd80      	pop	{r7, pc}

08019640 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b08c      	sub	sp, #48	; 0x30
 8019644:	af04      	add	r7, sp, #16
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	460b      	mov	r3, r1
 801964a:	70fb      	strb	r3, [r7, #3]
 801964c:	4613      	mov	r3, r2
 801964e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019650:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019654:	2124      	movs	r1, #36	; 0x24
 8019656:	2022      	movs	r0, #34	; 0x22
 8019658:	f7f5 fa36 	bl	800eac8 <pbuf_alloc>
 801965c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 801965e:	69bb      	ldr	r3, [r7, #24]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d056      	beq.n	8019712 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019664:	69bb      	ldr	r3, [r7, #24]
 8019666:	895b      	ldrh	r3, [r3, #10]
 8019668:	2b23      	cmp	r3, #35	; 0x23
 801966a:	d806      	bhi.n	801967a <icmp_send_response+0x3a>
 801966c:	4b2b      	ldr	r3, [pc, #172]	; (801971c <icmp_send_response+0xdc>)
 801966e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019672:	492b      	ldr	r1, [pc, #172]	; (8019720 <icmp_send_response+0xe0>)
 8019674:	482b      	ldr	r0, [pc, #172]	; (8019724 <icmp_send_response+0xe4>)
 8019676:	f002 fbd7 	bl	801be28 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019680:	69bb      	ldr	r3, [r7, #24]
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	78fa      	ldrb	r2, [r7, #3]
 801968a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801968c:	693b      	ldr	r3, [r7, #16]
 801968e:	78ba      	ldrb	r2, [r7, #2]
 8019690:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019692:	693b      	ldr	r3, [r7, #16]
 8019694:	2200      	movs	r2, #0
 8019696:	711a      	strb	r2, [r3, #4]
 8019698:	2200      	movs	r2, #0
 801969a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801969c:	693b      	ldr	r3, [r7, #16]
 801969e:	2200      	movs	r2, #0
 80196a0:	719a      	strb	r2, [r3, #6]
 80196a2:	2200      	movs	r2, #0
 80196a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80196a6:	69bb      	ldr	r3, [r7, #24]
 80196a8:	685b      	ldr	r3, [r3, #4]
 80196aa:	f103 0008 	add.w	r0, r3, #8
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	685b      	ldr	r3, [r3, #4]
 80196b2:	221c      	movs	r2, #28
 80196b4:	4619      	mov	r1, r3
 80196b6:	f002 fdde 	bl	801c276 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	68db      	ldr	r3, [r3, #12]
 80196be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80196c0:	f107 030c 	add.w	r3, r7, #12
 80196c4:	4618      	mov	r0, r3
 80196c6:	f000 f82f 	bl	8019728 <ip4_route>
 80196ca:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 80196cc:	69fb      	ldr	r3, [r7, #28]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d01b      	beq.n	801970a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	2200      	movs	r2, #0
 80196d6:	709a      	strb	r2, [r3, #2]
 80196d8:	2200      	movs	r2, #0
 80196da:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80196dc:	69bb      	ldr	r3, [r7, #24]
 80196de:	895b      	ldrh	r3, [r3, #10]
 80196e0:	4619      	mov	r1, r3
 80196e2:	6938      	ldr	r0, [r7, #16]
 80196e4:	f7f4 f8fe 	bl	800d8e4 <inet_chksum>
 80196e8:	4603      	mov	r3, r0
 80196ea:	461a      	mov	r2, r3
 80196ec:	693b      	ldr	r3, [r7, #16]
 80196ee:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80196f0:	f107 020c 	add.w	r2, r7, #12
 80196f4:	69fb      	ldr	r3, [r7, #28]
 80196f6:	9302      	str	r3, [sp, #8]
 80196f8:	2301      	movs	r3, #1
 80196fa:	9301      	str	r3, [sp, #4]
 80196fc:	2300      	movs	r3, #0
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	23ff      	movs	r3, #255	; 0xff
 8019702:	2100      	movs	r1, #0
 8019704:	69b8      	ldr	r0, [r7, #24]
 8019706:	f000 f9f7 	bl	8019af8 <ip4_output_if>
  }
  pbuf_free(q);
 801970a:	69b8      	ldr	r0, [r7, #24]
 801970c:	f7f5 fcc4 	bl	800f098 <pbuf_free>
 8019710:	e000      	b.n	8019714 <icmp_send_response+0xd4>
    return;
 8019712:	bf00      	nop
}
 8019714:	3720      	adds	r7, #32
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	08021c90 	.word	0x08021c90
 8019720:	08021d5c 	.word	0x08021d5c
 8019724:	08021d00 	.word	0x08021d00

08019728 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019728:	b480      	push	{r7}
 801972a:	b085      	sub	sp, #20
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019730:	4b33      	ldr	r3, [pc, #204]	; (8019800 <ip4_route+0xd8>)
 8019732:	681b      	ldr	r3, [r3, #0]
 8019734:	60fb      	str	r3, [r7, #12]
 8019736:	e036      	b.n	80197a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019738:	68fb      	ldr	r3, [r7, #12]
 801973a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801973e:	f003 0301 	and.w	r3, r3, #1
 8019742:	b2db      	uxtb	r3, r3
 8019744:	2b00      	cmp	r3, #0
 8019746:	d02b      	beq.n	80197a0 <ip4_route+0x78>
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801974e:	089b      	lsrs	r3, r3, #2
 8019750:	f003 0301 	and.w	r3, r3, #1
 8019754:	b2db      	uxtb	r3, r3
 8019756:	2b00      	cmp	r3, #0
 8019758:	d022      	beq.n	80197a0 <ip4_route+0x78>
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	3304      	adds	r3, #4
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d01d      	beq.n	80197a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	68fb      	ldr	r3, [r7, #12]
 801976a:	3304      	adds	r3, #4
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	405a      	eors	r2, r3
 8019770:	68fb      	ldr	r3, [r7, #12]
 8019772:	3308      	adds	r3, #8
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	4013      	ands	r3, r2
 8019778:	2b00      	cmp	r3, #0
 801977a:	d101      	bne.n	8019780 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	e038      	b.n	80197f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019786:	f003 0302 	and.w	r3, r3, #2
 801978a:	2b00      	cmp	r3, #0
 801978c:	d108      	bne.n	80197a0 <ip4_route+0x78>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681a      	ldr	r2, [r3, #0]
 8019792:	68fb      	ldr	r3, [r7, #12]
 8019794:	330c      	adds	r3, #12
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	429a      	cmp	r2, r3
 801979a:	d101      	bne.n	80197a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	e028      	b.n	80197f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	60fb      	str	r3, [r7, #12]
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d1c5      	bne.n	8019738 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80197ac:	4b15      	ldr	r3, [pc, #84]	; (8019804 <ip4_route+0xdc>)
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d01a      	beq.n	80197ea <ip4_route+0xc2>
 80197b4:	4b13      	ldr	r3, [pc, #76]	; (8019804 <ip4_route+0xdc>)
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80197bc:	f003 0301 	and.w	r3, r3, #1
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d012      	beq.n	80197ea <ip4_route+0xc2>
 80197c4:	4b0f      	ldr	r3, [pc, #60]	; (8019804 <ip4_route+0xdc>)
 80197c6:	681b      	ldr	r3, [r3, #0]
 80197c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80197cc:	f003 0304 	and.w	r3, r3, #4
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d00a      	beq.n	80197ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80197d4:	4b0b      	ldr	r3, [pc, #44]	; (8019804 <ip4_route+0xdc>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	3304      	adds	r3, #4
 80197da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d004      	beq.n	80197ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	b2db      	uxtb	r3, r3
 80197e6:	2b7f      	cmp	r3, #127	; 0x7f
 80197e8:	d101      	bne.n	80197ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80197ea:	2300      	movs	r3, #0
 80197ec:	e001      	b.n	80197f2 <ip4_route+0xca>
  }

  return netif_default;
 80197ee:	4b05      	ldr	r3, [pc, #20]	; (8019804 <ip4_route+0xdc>)
 80197f0:	681b      	ldr	r3, [r3, #0]
}
 80197f2:	4618      	mov	r0, r3
 80197f4:	3714      	adds	r7, #20
 80197f6:	46bd      	mov	sp, r7
 80197f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fc:	4770      	bx	lr
 80197fe:	bf00      	nop
 8019800:	20013ccc 	.word	0x20013ccc
 8019804:	20013cd0 	.word	0x20013cd0

08019808 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019816:	f003 0301 	and.w	r3, r3, #1
 801981a:	b2db      	uxtb	r3, r3
 801981c:	2b00      	cmp	r3, #0
 801981e:	d016      	beq.n	801984e <ip4_input_accept+0x46>
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	3304      	adds	r3, #4
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d011      	beq.n	801984e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801982a:	4b0b      	ldr	r3, [pc, #44]	; (8019858 <ip4_input_accept+0x50>)
 801982c:	695a      	ldr	r2, [r3, #20]
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	3304      	adds	r3, #4
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	429a      	cmp	r2, r3
 8019836:	d008      	beq.n	801984a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019838:	4b07      	ldr	r3, [pc, #28]	; (8019858 <ip4_input_accept+0x50>)
 801983a:	695b      	ldr	r3, [r3, #20]
 801983c:	6879      	ldr	r1, [r7, #4]
 801983e:	4618      	mov	r0, r3
 8019840:	f000 fa98 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8019844:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019846:	2b00      	cmp	r3, #0
 8019848:	d001      	beq.n	801984e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801984a:	2301      	movs	r3, #1
 801984c:	e000      	b.n	8019850 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801984e:	2300      	movs	r3, #0
}
 8019850:	4618      	mov	r0, r3
 8019852:	3708      	adds	r7, #8
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}
 8019858:	2000a264 	.word	0x2000a264

0801985c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801985c:	b580      	push	{r7, lr}
 801985e:	b088      	sub	sp, #32
 8019860:	af00      	add	r7, sp, #0
 8019862:	6078      	str	r0, [r7, #4]
 8019864:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8019866:	2301      	movs	r3, #1
 8019868:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8019870:	693b      	ldr	r3, [r7, #16]
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	091b      	lsrs	r3, r3, #4
 8019876:	b2db      	uxtb	r3, r3
 8019878:	2b04      	cmp	r3, #4
 801987a:	d004      	beq.n	8019886 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7f5 fc0b 	bl	800f098 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019882:	2300      	movs	r3, #0
 8019884:	e130      	b.n	8019ae8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019886:	693b      	ldr	r3, [r7, #16]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	f003 030f 	and.w	r3, r3, #15
 801988e:	b2db      	uxtb	r3, r3
 8019890:	009b      	lsls	r3, r3, #2
 8019892:	b2db      	uxtb	r3, r3
 8019894:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	885b      	ldrh	r3, [r3, #2]
 801989a:	b29b      	uxth	r3, r3
 801989c:	4618      	mov	r0, r3
 801989e:	f7f3 fed9 	bl	800d654 <lwip_htons>
 80198a2:	4603      	mov	r3, r0
 80198a4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	891b      	ldrh	r3, [r3, #8]
 80198aa:	89ba      	ldrh	r2, [r7, #12]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d204      	bcs.n	80198ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80198b0:	89bb      	ldrh	r3, [r7, #12]
 80198b2:	4619      	mov	r1, r3
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f7f5 fa69 	bl	800ed8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	895b      	ldrh	r3, [r3, #10]
 80198be:	89fa      	ldrh	r2, [r7, #14]
 80198c0:	429a      	cmp	r2, r3
 80198c2:	d807      	bhi.n	80198d4 <ip4_input+0x78>
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	891b      	ldrh	r3, [r3, #8]
 80198c8:	89ba      	ldrh	r2, [r7, #12]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d802      	bhi.n	80198d4 <ip4_input+0x78>
 80198ce:	89fb      	ldrh	r3, [r7, #14]
 80198d0:	2b13      	cmp	r3, #19
 80198d2:	d804      	bhi.n	80198de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80198d4:	6878      	ldr	r0, [r7, #4]
 80198d6:	f7f5 fbdf 	bl	800f098 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80198da:	2300      	movs	r3, #0
 80198dc:	e104      	b.n	8019ae8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80198de:	89fb      	ldrh	r3, [r7, #14]
 80198e0:	4619      	mov	r1, r3
 80198e2:	6938      	ldr	r0, [r7, #16]
 80198e4:	f7f3 fffe 	bl	800d8e4 <inet_chksum>
 80198e8:	4603      	mov	r3, r0
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d004      	beq.n	80198f8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80198ee:	6878      	ldr	r0, [r7, #4]
 80198f0:	f7f5 fbd2 	bl	800f098 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80198f4:	2300      	movs	r3, #0
 80198f6:	e0f7      	b.n	8019ae8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	691b      	ldr	r3, [r3, #16]
 80198fc:	4a7c      	ldr	r2, [pc, #496]	; (8019af0 <ip4_input+0x294>)
 80198fe:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	4a7a      	ldr	r2, [pc, #488]	; (8019af0 <ip4_input+0x294>)
 8019906:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019908:	4b79      	ldr	r3, [pc, #484]	; (8019af0 <ip4_input+0x294>)
 801990a:	695b      	ldr	r3, [r3, #20]
 801990c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019910:	2be0      	cmp	r3, #224	; 0xe0
 8019912:	d112      	bne.n	801993a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801991a:	f003 0301 	and.w	r3, r3, #1
 801991e:	b2db      	uxtb	r3, r3
 8019920:	2b00      	cmp	r3, #0
 8019922:	d007      	beq.n	8019934 <ip4_input+0xd8>
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	3304      	adds	r3, #4
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d002      	beq.n	8019934 <ip4_input+0xd8>
      netif = inp;
 801992e:	683b      	ldr	r3, [r7, #0]
 8019930:	61fb      	str	r3, [r7, #28]
 8019932:	e02a      	b.n	801998a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8019934:	2300      	movs	r3, #0
 8019936:	61fb      	str	r3, [r7, #28]
 8019938:	e027      	b.n	801998a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801993a:	6838      	ldr	r0, [r7, #0]
 801993c:	f7ff ff64 	bl	8019808 <ip4_input_accept>
 8019940:	4603      	mov	r3, r0
 8019942:	2b00      	cmp	r3, #0
 8019944:	d002      	beq.n	801994c <ip4_input+0xf0>
      netif = inp;
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	61fb      	str	r3, [r7, #28]
 801994a:	e01e      	b.n	801998a <ip4_input+0x12e>
    } else {
      netif = NULL;
 801994c:	2300      	movs	r3, #0
 801994e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019950:	4b67      	ldr	r3, [pc, #412]	; (8019af0 <ip4_input+0x294>)
 8019952:	695b      	ldr	r3, [r3, #20]
 8019954:	b2db      	uxtb	r3, r3
 8019956:	2b7f      	cmp	r3, #127	; 0x7f
 8019958:	d017      	beq.n	801998a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801995a:	4b66      	ldr	r3, [pc, #408]	; (8019af4 <ip4_input+0x298>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	61fb      	str	r3, [r7, #28]
 8019960:	e00e      	b.n	8019980 <ip4_input+0x124>
          if (netif == inp) {
 8019962:	69fa      	ldr	r2, [r7, #28]
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	429a      	cmp	r2, r3
 8019968:	d006      	beq.n	8019978 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801996a:	69f8      	ldr	r0, [r7, #28]
 801996c:	f7ff ff4c 	bl	8019808 <ip4_input_accept>
 8019970:	4603      	mov	r3, r0
 8019972:	2b00      	cmp	r3, #0
 8019974:	d108      	bne.n	8019988 <ip4_input+0x12c>
 8019976:	e000      	b.n	801997a <ip4_input+0x11e>
            continue;
 8019978:	bf00      	nop
        NETIF_FOREACH(netif) {
 801997a:	69fb      	ldr	r3, [r7, #28]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	61fb      	str	r3, [r7, #28]
 8019980:	69fb      	ldr	r3, [r7, #28]
 8019982:	2b00      	cmp	r3, #0
 8019984:	d1ed      	bne.n	8019962 <ip4_input+0x106>
 8019986:	e000      	b.n	801998a <ip4_input+0x12e>
            break;
 8019988:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801998a:	69fb      	ldr	r3, [r7, #28]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d111      	bne.n	80199b4 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8019990:	693b      	ldr	r3, [r7, #16]
 8019992:	7a5b      	ldrb	r3, [r3, #9]
 8019994:	2b11      	cmp	r3, #17
 8019996:	d10d      	bne.n	80199b4 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019998:	89fb      	ldrh	r3, [r7, #14]
 801999a:	693a      	ldr	r2, [r7, #16]
 801999c:	4413      	add	r3, r2
 801999e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80199a0:	69bb      	ldr	r3, [r7, #24]
 80199a2:	885b      	ldrh	r3, [r3, #2]
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80199aa:	d103      	bne.n	80199b4 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80199ac:	683b      	ldr	r3, [r7, #0]
 80199ae:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 80199b0:	2300      	movs	r3, #0
 80199b2:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80199b4:	697b      	ldr	r3, [r7, #20]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d017      	beq.n	80199ea <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80199ba:	4b4d      	ldr	r3, [pc, #308]	; (8019af0 <ip4_input+0x294>)
 80199bc:	691b      	ldr	r3, [r3, #16]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d013      	beq.n	80199ea <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199c2:	4b4b      	ldr	r3, [pc, #300]	; (8019af0 <ip4_input+0x294>)
 80199c4:	691b      	ldr	r3, [r3, #16]
 80199c6:	6839      	ldr	r1, [r7, #0]
 80199c8:	4618      	mov	r0, r3
 80199ca:	f000 f9d3 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 80199ce:	4603      	mov	r3, r0
 80199d0:	2b00      	cmp	r3, #0
 80199d2:	d105      	bne.n	80199e0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80199d4:	4b46      	ldr	r3, [pc, #280]	; (8019af0 <ip4_input+0x294>)
 80199d6:	691b      	ldr	r3, [r3, #16]
 80199d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80199dc:	2be0      	cmp	r3, #224	; 0xe0
 80199de:	d104      	bne.n	80199ea <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80199e0:	6878      	ldr	r0, [r7, #4]
 80199e2:	f7f5 fb59 	bl	800f098 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80199e6:	2300      	movs	r3, #0
 80199e8:	e07e      	b.n	8019ae8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80199ea:	69fb      	ldr	r3, [r7, #28]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d104      	bne.n	80199fa <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80199f0:	6878      	ldr	r0, [r7, #4]
 80199f2:	f7f5 fb51 	bl	800f098 <pbuf_free>
    return ERR_OK;
 80199f6:	2300      	movs	r3, #0
 80199f8:	e076      	b.n	8019ae8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80199fa:	693b      	ldr	r3, [r7, #16]
 80199fc:	88db      	ldrh	r3, [r3, #6]
 80199fe:	b29b      	uxth	r3, r3
 8019a00:	461a      	mov	r2, r3
 8019a02:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019a06:	4013      	ands	r3, r2
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d00b      	beq.n	8019a24 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019a0c:	6878      	ldr	r0, [r7, #4]
 8019a0e:	f000 fe21 	bl	801a654 <ip4_reass>
 8019a12:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d101      	bne.n	8019a1e <ip4_input+0x1c2>
      return ERR_OK;
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	e064      	b.n	8019ae8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	685b      	ldr	r3, [r3, #4]
 8019a22:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019a24:	4a32      	ldr	r2, [pc, #200]	; (8019af0 <ip4_input+0x294>)
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019a2a:	4a31      	ldr	r2, [pc, #196]	; (8019af0 <ip4_input+0x294>)
 8019a2c:	683b      	ldr	r3, [r7, #0]
 8019a2e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019a30:	4a2f      	ldr	r2, [pc, #188]	; (8019af0 <ip4_input+0x294>)
 8019a32:	693b      	ldr	r3, [r7, #16]
 8019a34:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019a36:	693b      	ldr	r3, [r7, #16]
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	f003 030f 	and.w	r3, r3, #15
 8019a3e:	b2db      	uxtb	r3, r3
 8019a40:	009b      	lsls	r3, r3, #2
 8019a42:	b2db      	uxtb	r3, r3
 8019a44:	b29a      	uxth	r2, r3
 8019a46:	4b2a      	ldr	r3, [pc, #168]	; (8019af0 <ip4_input+0x294>)
 8019a48:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019a4a:	89fb      	ldrh	r3, [r7, #14]
 8019a4c:	4619      	mov	r1, r3
 8019a4e:	6878      	ldr	r0, [r7, #4]
 8019a50:	f7f5 fa9c 	bl	800ef8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019a54:	693b      	ldr	r3, [r7, #16]
 8019a56:	7a5b      	ldrb	r3, [r3, #9]
 8019a58:	2b11      	cmp	r3, #17
 8019a5a:	d006      	beq.n	8019a6a <ip4_input+0x20e>
 8019a5c:	2b11      	cmp	r3, #17
 8019a5e:	dc13      	bgt.n	8019a88 <ip4_input+0x22c>
 8019a60:	2b01      	cmp	r3, #1
 8019a62:	d00c      	beq.n	8019a7e <ip4_input+0x222>
 8019a64:	2b06      	cmp	r3, #6
 8019a66:	d005      	beq.n	8019a74 <ip4_input+0x218>
 8019a68:	e00e      	b.n	8019a88 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019a6a:	6839      	ldr	r1, [r7, #0]
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	f7fc f96d 	bl	8015d4c <udp_input>
        break;
 8019a72:	e026      	b.n	8019ac2 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019a74:	6839      	ldr	r1, [r7, #0]
 8019a76:	6878      	ldr	r0, [r7, #4]
 8019a78:	f7f7 fc84 	bl	8011384 <tcp_input>
        break;
 8019a7c:	e021      	b.n	8019ac2 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019a7e:	6839      	ldr	r1, [r7, #0]
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	f7ff fc8f 	bl	80193a4 <icmp_input>
        break;
 8019a86:	e01c      	b.n	8019ac2 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019a88:	4b19      	ldr	r3, [pc, #100]	; (8019af0 <ip4_input+0x294>)
 8019a8a:	695b      	ldr	r3, [r3, #20]
 8019a8c:	69f9      	ldr	r1, [r7, #28]
 8019a8e:	4618      	mov	r0, r3
 8019a90:	f000 f970 	bl	8019d74 <ip4_addr_isbroadcast_u32>
 8019a94:	4603      	mov	r3, r0
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	d10f      	bne.n	8019aba <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019a9a:	4b15      	ldr	r3, [pc, #84]	; (8019af0 <ip4_input+0x294>)
 8019a9c:	695b      	ldr	r3, [r3, #20]
 8019a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019aa2:	2be0      	cmp	r3, #224	; 0xe0
 8019aa4:	d009      	beq.n	8019aba <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019aaa:	4619      	mov	r1, r3
 8019aac:	6878      	ldr	r0, [r7, #4]
 8019aae:	f7f5 fae0 	bl	800f072 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019ab2:	2102      	movs	r1, #2
 8019ab4:	6878      	ldr	r0, [r7, #4]
 8019ab6:	f7ff fda3 	bl	8019600 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019aba:	6878      	ldr	r0, [r7, #4]
 8019abc:	f7f5 faec 	bl	800f098 <pbuf_free>
        break;
 8019ac0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019ac2:	4b0b      	ldr	r3, [pc, #44]	; (8019af0 <ip4_input+0x294>)
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019ac8:	4b09      	ldr	r3, [pc, #36]	; (8019af0 <ip4_input+0x294>)
 8019aca:	2200      	movs	r2, #0
 8019acc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019ace:	4b08      	ldr	r3, [pc, #32]	; (8019af0 <ip4_input+0x294>)
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019ad4:	4b06      	ldr	r3, [pc, #24]	; (8019af0 <ip4_input+0x294>)
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019ada:	4b05      	ldr	r3, [pc, #20]	; (8019af0 <ip4_input+0x294>)
 8019adc:	2200      	movs	r2, #0
 8019ade:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019ae0:	4b03      	ldr	r3, [pc, #12]	; (8019af0 <ip4_input+0x294>)
 8019ae2:	2200      	movs	r2, #0
 8019ae4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019ae6:	2300      	movs	r3, #0
}
 8019ae8:	4618      	mov	r0, r3
 8019aea:	3720      	adds	r7, #32
 8019aec:	46bd      	mov	sp, r7
 8019aee:	bd80      	pop	{r7, pc}
 8019af0:	2000a264 	.word	0x2000a264
 8019af4:	20013ccc 	.word	0x20013ccc

08019af8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019af8:	b580      	push	{r7, lr}
 8019afa:	b08a      	sub	sp, #40	; 0x28
 8019afc:	af04      	add	r7, sp, #16
 8019afe:	60f8      	str	r0, [r7, #12]
 8019b00:	60b9      	str	r1, [r7, #8]
 8019b02:	607a      	str	r2, [r7, #4]
 8019b04:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019b06:	68bb      	ldr	r3, [r7, #8]
 8019b08:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d009      	beq.n	8019b24 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d003      	beq.n	8019b1e <ip4_output_if+0x26>
 8019b16:	68bb      	ldr	r3, [r7, #8]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d102      	bne.n	8019b24 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b20:	3304      	adds	r3, #4
 8019b22:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019b24:	78fa      	ldrb	r2, [r7, #3]
 8019b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b28:	9302      	str	r3, [sp, #8]
 8019b2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b2e:	9301      	str	r3, [sp, #4]
 8019b30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019b34:	9300      	str	r3, [sp, #0]
 8019b36:	4613      	mov	r3, r2
 8019b38:	687a      	ldr	r2, [r7, #4]
 8019b3a:	6979      	ldr	r1, [r7, #20]
 8019b3c:	68f8      	ldr	r0, [r7, #12]
 8019b3e:	f000 f805 	bl	8019b4c <ip4_output_if_src>
 8019b42:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	3718      	adds	r7, #24
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}

08019b4c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019b4c:	b580      	push	{r7, lr}
 8019b4e:	b088      	sub	sp, #32
 8019b50:	af00      	add	r7, sp, #0
 8019b52:	60f8      	str	r0, [r7, #12]
 8019b54:	60b9      	str	r1, [r7, #8]
 8019b56:	607a      	str	r2, [r7, #4]
 8019b58:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	7b9b      	ldrb	r3, [r3, #14]
 8019b62:	2b01      	cmp	r3, #1
 8019b64:	d006      	beq.n	8019b74 <ip4_output_if_src+0x28>
 8019b66:	4b7d      	ldr	r3, [pc, #500]	; (8019d5c <ip4_output_if_src+0x210>)
 8019b68:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019b6c:	497c      	ldr	r1, [pc, #496]	; (8019d60 <ip4_output_if_src+0x214>)
 8019b6e:	487d      	ldr	r0, [pc, #500]	; (8019d64 <ip4_output_if_src+0x218>)
 8019b70:	f002 f95a 	bl	801be28 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	f000 80c4 	beq.w	8019d04 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8019b7c:	2314      	movs	r3, #20
 8019b7e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019b80:	2114      	movs	r1, #20
 8019b82:	68f8      	ldr	r0, [r7, #12]
 8019b84:	f7f5 f9f2 	bl	800ef6c <pbuf_add_header>
 8019b88:	4603      	mov	r3, r0
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d002      	beq.n	8019b94 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019b8e:	f06f 0301 	mvn.w	r3, #1
 8019b92:	e0df      	b.n	8019d54 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	685b      	ldr	r3, [r3, #4]
 8019b98:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019b9a:	68fb      	ldr	r3, [r7, #12]
 8019b9c:	895b      	ldrh	r3, [r3, #10]
 8019b9e:	2b13      	cmp	r3, #19
 8019ba0:	d806      	bhi.n	8019bb0 <ip4_output_if_src+0x64>
 8019ba2:	4b6e      	ldr	r3, [pc, #440]	; (8019d5c <ip4_output_if_src+0x210>)
 8019ba4:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019ba8:	496f      	ldr	r1, [pc, #444]	; (8019d68 <ip4_output_if_src+0x21c>)
 8019baa:	486e      	ldr	r0, [pc, #440]	; (8019d64 <ip4_output_if_src+0x218>)
 8019bac:	f002 f93c 	bl	801be28 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019bb0:	69bb      	ldr	r3, [r7, #24]
 8019bb2:	78fa      	ldrb	r2, [r7, #3]
 8019bb4:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019bb6:	69bb      	ldr	r3, [r7, #24]
 8019bb8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019bbc:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8019bbe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019bc2:	78fb      	ldrb	r3, [r7, #3]
 8019bc4:	021b      	lsls	r3, r3, #8
 8019bc6:	4313      	orrs	r3, r2
 8019bc8:	021b      	lsls	r3, r3, #8
 8019bca:	b21a      	sxth	r2, r3
 8019bcc:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8019bd0:	78fb      	ldrb	r3, [r7, #3]
 8019bd2:	021b      	lsls	r3, r3, #8
 8019bd4:	430b      	orrs	r3, r1
 8019bd6:	121b      	asrs	r3, r3, #8
 8019bd8:	b21b      	sxth	r3, r3
 8019bda:	b2db      	uxtb	r3, r3
 8019bdc:	b21b      	sxth	r3, r3
 8019bde:	4313      	orrs	r3, r2
 8019be0:	b21b      	sxth	r3, r3
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	461a      	mov	r2, r3
 8019be6:	69fb      	ldr	r3, [r7, #28]
 8019be8:	4413      	add	r3, r2
 8019bea:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	681a      	ldr	r2, [r3, #0]
 8019bf0:	69bb      	ldr	r3, [r7, #24]
 8019bf2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8019bf4:	69bb      	ldr	r3, [r7, #24]
 8019bf6:	691b      	ldr	r3, [r3, #16]
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	69fa      	ldr	r2, [r7, #28]
 8019bfc:	4413      	add	r3, r2
 8019bfe:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8019c00:	69bb      	ldr	r3, [r7, #24]
 8019c02:	691b      	ldr	r3, [r3, #16]
 8019c04:	0c1b      	lsrs	r3, r3, #16
 8019c06:	69fa      	ldr	r2, [r7, #28]
 8019c08:	4413      	add	r3, r2
 8019c0a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019c0c:	8afb      	ldrh	r3, [r7, #22]
 8019c0e:	089b      	lsrs	r3, r3, #2
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	b2db      	uxtb	r3, r3
 8019c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c18:	b2da      	uxtb	r2, r3
 8019c1a:	69bb      	ldr	r3, [r7, #24]
 8019c1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019c1e:	69bb      	ldr	r3, [r7, #24]
 8019c20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019c24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8019c26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019c2a:	69bb      	ldr	r3, [r7, #24]
 8019c2c:	781b      	ldrb	r3, [r3, #0]
 8019c2e:	021b      	lsls	r3, r3, #8
 8019c30:	4313      	orrs	r3, r2
 8019c32:	021b      	lsls	r3, r3, #8
 8019c34:	b21a      	sxth	r2, r3
 8019c36:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	781b      	ldrb	r3, [r3, #0]
 8019c3e:	021b      	lsls	r3, r3, #8
 8019c40:	430b      	orrs	r3, r1
 8019c42:	121b      	asrs	r3, r3, #8
 8019c44:	b21b      	sxth	r3, r3
 8019c46:	b2db      	uxtb	r3, r3
 8019c48:	b21b      	sxth	r3, r3
 8019c4a:	4313      	orrs	r3, r2
 8019c4c:	b21b      	sxth	r3, r3
 8019c4e:	b29b      	uxth	r3, r3
 8019c50:	461a      	mov	r2, r3
 8019c52:	69fb      	ldr	r3, [r7, #28]
 8019c54:	4413      	add	r3, r2
 8019c56:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	891b      	ldrh	r3, [r3, #8]
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	f7f3 fcf9 	bl	800d654 <lwip_htons>
 8019c62:	4603      	mov	r3, r0
 8019c64:	461a      	mov	r2, r3
 8019c66:	69bb      	ldr	r3, [r7, #24]
 8019c68:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8019c6a:	69bb      	ldr	r3, [r7, #24]
 8019c6c:	885b      	ldrh	r3, [r3, #2]
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	461a      	mov	r2, r3
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	4413      	add	r3, r2
 8019c76:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019c78:	69bb      	ldr	r3, [r7, #24]
 8019c7a:	2200      	movs	r2, #0
 8019c7c:	719a      	strb	r2, [r3, #6]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019c82:	4b3a      	ldr	r3, [pc, #232]	; (8019d6c <ip4_output_if_src+0x220>)
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	4618      	mov	r0, r3
 8019c88:	f7f3 fce4 	bl	800d654 <lwip_htons>
 8019c8c:	4603      	mov	r3, r0
 8019c8e:	461a      	mov	r2, r3
 8019c90:	69bb      	ldr	r3, [r7, #24]
 8019c92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8019c94:	69bb      	ldr	r3, [r7, #24]
 8019c96:	889b      	ldrh	r3, [r3, #4]
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	4413      	add	r3, r2
 8019ca0:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019ca2:	4b32      	ldr	r3, [pc, #200]	; (8019d6c <ip4_output_if_src+0x220>)
 8019ca4:	881b      	ldrh	r3, [r3, #0]
 8019ca6:	3301      	adds	r3, #1
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	4b30      	ldr	r3, [pc, #192]	; (8019d6c <ip4_output_if_src+0x220>)
 8019cac:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019cae:	68bb      	ldr	r3, [r7, #8]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d104      	bne.n	8019cbe <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019cb4:	4b2e      	ldr	r3, [pc, #184]	; (8019d70 <ip4_output_if_src+0x224>)
 8019cb6:	681a      	ldr	r2, [r3, #0]
 8019cb8:	69bb      	ldr	r3, [r7, #24]
 8019cba:	60da      	str	r2, [r3, #12]
 8019cbc:	e003      	b.n	8019cc6 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019cbe:	68bb      	ldr	r3, [r7, #8]
 8019cc0:	681a      	ldr	r2, [r3, #0]
 8019cc2:	69bb      	ldr	r3, [r7, #24]
 8019cc4:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8019cc6:	69bb      	ldr	r3, [r7, #24]
 8019cc8:	68db      	ldr	r3, [r3, #12]
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	69fa      	ldr	r2, [r7, #28]
 8019cce:	4413      	add	r3, r2
 8019cd0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8019cd2:	69bb      	ldr	r3, [r7, #24]
 8019cd4:	68db      	ldr	r3, [r3, #12]
 8019cd6:	0c1b      	lsrs	r3, r3, #16
 8019cd8:	69fa      	ldr	r2, [r7, #28]
 8019cda:	4413      	add	r3, r2
 8019cdc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8019cde:	69fb      	ldr	r3, [r7, #28]
 8019ce0:	0c1a      	lsrs	r2, r3, #16
 8019ce2:	69fb      	ldr	r3, [r7, #28]
 8019ce4:	b29b      	uxth	r3, r3
 8019ce6:	4413      	add	r3, r2
 8019ce8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8019cea:	69fb      	ldr	r3, [r7, #28]
 8019cec:	0c1b      	lsrs	r3, r3, #16
 8019cee:	69fa      	ldr	r2, [r7, #28]
 8019cf0:	4413      	add	r3, r2
 8019cf2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8019cf4:	69fb      	ldr	r3, [r7, #28]
 8019cf6:	43db      	mvns	r3, r3
 8019cf8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8019cfa:	69fb      	ldr	r3, [r7, #28]
 8019cfc:	b29a      	uxth	r2, r3
 8019cfe:	69bb      	ldr	r3, [r7, #24]
 8019d00:	815a      	strh	r2, [r3, #10]
 8019d02:	e00f      	b.n	8019d24 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	895b      	ldrh	r3, [r3, #10]
 8019d08:	2b13      	cmp	r3, #19
 8019d0a:	d802      	bhi.n	8019d12 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019d0c:	f06f 0301 	mvn.w	r3, #1
 8019d10:	e020      	b.n	8019d54 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019d12:	68fb      	ldr	r3, [r7, #12]
 8019d14:	685b      	ldr	r3, [r3, #4]
 8019d16:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	691b      	ldr	r3, [r3, #16]
 8019d1c:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8019d1e:	f107 0310 	add.w	r3, r7, #16
 8019d22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d00c      	beq.n	8019d46 <ip4_output_if_src+0x1fa>
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	891a      	ldrh	r2, [r3, #8]
 8019d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019d34:	429a      	cmp	r2, r3
 8019d36:	d906      	bls.n	8019d46 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8019d38:	687a      	ldr	r2, [r7, #4]
 8019d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019d3c:	68f8      	ldr	r0, [r7, #12]
 8019d3e:	f000 fe85 	bl	801aa4c <ip4_frag>
 8019d42:	4603      	mov	r3, r0
 8019d44:	e006      	b.n	8019d54 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d48:	695b      	ldr	r3, [r3, #20]
 8019d4a:	687a      	ldr	r2, [r7, #4]
 8019d4c:	68f9      	ldr	r1, [r7, #12]
 8019d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019d50:	4798      	blx	r3
 8019d52:	4603      	mov	r3, r0
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3720      	adds	r7, #32
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	08021d88 	.word	0x08021d88
 8019d60:	08021dbc 	.word	0x08021dbc
 8019d64:	08021dc8 	.word	0x08021dc8
 8019d68:	08021df0 	.word	0x08021df0
 8019d6c:	20013e62 	.word	0x20013e62
 8019d70:	0806df40 	.word	0x0806df40

08019d74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019d74:	b480      	push	{r7}
 8019d76:	b085      	sub	sp, #20
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d88:	d002      	beq.n	8019d90 <ip4_addr_isbroadcast_u32+0x1c>
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d101      	bne.n	8019d94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019d90:	2301      	movs	r3, #1
 8019d92:	e02a      	b.n	8019dea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d9a:	f003 0302 	and.w	r3, r3, #2
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d101      	bne.n	8019da6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019da2:	2300      	movs	r3, #0
 8019da4:	e021      	b.n	8019dea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	3304      	adds	r3, #4
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	687a      	ldr	r2, [r7, #4]
 8019dae:	429a      	cmp	r2, r3
 8019db0:	d101      	bne.n	8019db6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019db2:	2300      	movs	r3, #0
 8019db4:	e019      	b.n	8019dea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019db6:	68fa      	ldr	r2, [r7, #12]
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	3304      	adds	r3, #4
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	405a      	eors	r2, r3
 8019dc0:	683b      	ldr	r3, [r7, #0]
 8019dc2:	3308      	adds	r3, #8
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	4013      	ands	r3, r2
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d10d      	bne.n	8019de8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	3308      	adds	r3, #8
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	43da      	mvns	r2, r3
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019dd8:	683b      	ldr	r3, [r7, #0]
 8019dda:	3308      	adds	r3, #8
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019de0:	429a      	cmp	r2, r3
 8019de2:	d101      	bne.n	8019de8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019de4:	2301      	movs	r3, #1
 8019de6:	e000      	b.n	8019dea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019de8:	2300      	movs	r3, #0
  }
}
 8019dea:	4618      	mov	r0, r3
 8019dec:	3714      	adds	r7, #20
 8019dee:	46bd      	mov	sp, r7
 8019df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df4:	4770      	bx	lr
	...

08019df8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019df8:	b580      	push	{r7, lr}
 8019dfa:	b08a      	sub	sp, #40	; 0x28
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019e02:	f107 030c 	add.w	r3, r7, #12
 8019e06:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	781b      	ldrb	r3, [r3, #0]
 8019e0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019e10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e14:	3301      	adds	r3, #1
 8019e16:	4a89      	ldr	r2, [pc, #548]	; (801a03c <ip4addr_aton+0x244>)
 8019e18:	4413      	add	r3, r2
 8019e1a:	781b      	ldrb	r3, [r3, #0]
 8019e1c:	f003 0304 	and.w	r3, r3, #4
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d101      	bne.n	8019e28 <ip4addr_aton+0x30>
      return 0;
 8019e24:	2300      	movs	r3, #0
 8019e26:	e105      	b.n	801a034 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019e28:	2300      	movs	r3, #0
 8019e2a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019e2c:	230a      	movs	r3, #10
 8019e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019e32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e36:	2b30      	cmp	r3, #48	; 0x30
 8019e38:	d11c      	bne.n	8019e74 <ip4addr_aton+0x7c>
      c = *++cp;
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	3301      	adds	r3, #1
 8019e3e:	607b      	str	r3, [r7, #4]
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	781b      	ldrb	r3, [r3, #0]
 8019e44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019e48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e4c:	2b78      	cmp	r3, #120	; 0x78
 8019e4e:	d003      	beq.n	8019e58 <ip4addr_aton+0x60>
 8019e50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e54:	2b58      	cmp	r3, #88	; 0x58
 8019e56:	d10a      	bne.n	8019e6e <ip4addr_aton+0x76>
        base = 16;
 8019e58:	2310      	movs	r3, #16
 8019e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	3301      	adds	r3, #1
 8019e62:	607b      	str	r3, [r7, #4]
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	781b      	ldrb	r3, [r3, #0]
 8019e68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019e6c:	e002      	b.n	8019e74 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8019e6e:	2308      	movs	r3, #8
 8019e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019e74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e78:	3301      	adds	r3, #1
 8019e7a:	4a70      	ldr	r2, [pc, #448]	; (801a03c <ip4addr_aton+0x244>)
 8019e7c:	4413      	add	r3, r2
 8019e7e:	781b      	ldrb	r3, [r3, #0]
 8019e80:	f003 0304 	and.w	r3, r3, #4
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d011      	beq.n	8019eac <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019e88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e8e:	fb03 f202 	mul.w	r2, r3, r2
 8019e92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019e96:	4413      	add	r3, r2
 8019e98:	3b30      	subs	r3, #48	; 0x30
 8019e9a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	3301      	adds	r3, #1
 8019ea0:	607b      	str	r3, [r7, #4]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	781b      	ldrb	r3, [r3, #0]
 8019ea6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019eaa:	e7e3      	b.n	8019e74 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8019eac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019eb0:	2b10      	cmp	r3, #16
 8019eb2:	d127      	bne.n	8019f04 <ip4addr_aton+0x10c>
 8019eb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019eb8:	3301      	adds	r3, #1
 8019eba:	4a60      	ldr	r2, [pc, #384]	; (801a03c <ip4addr_aton+0x244>)
 8019ebc:	4413      	add	r3, r2
 8019ebe:	781b      	ldrb	r3, [r3, #0]
 8019ec0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d01d      	beq.n	8019f04 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eca:	011b      	lsls	r3, r3, #4
 8019ecc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019ed0:	f102 010a 	add.w	r1, r2, #10
 8019ed4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8019ed8:	3201      	adds	r2, #1
 8019eda:	4858      	ldr	r0, [pc, #352]	; (801a03c <ip4addr_aton+0x244>)
 8019edc:	4402      	add	r2, r0
 8019ede:	7812      	ldrb	r2, [r2, #0]
 8019ee0:	f002 0203 	and.w	r2, r2, #3
 8019ee4:	2a02      	cmp	r2, #2
 8019ee6:	d101      	bne.n	8019eec <ip4addr_aton+0xf4>
 8019ee8:	2261      	movs	r2, #97	; 0x61
 8019eea:	e000      	b.n	8019eee <ip4addr_aton+0xf6>
 8019eec:	2241      	movs	r2, #65	; 0x41
 8019eee:	1a8a      	subs	r2, r1, r2
 8019ef0:	4313      	orrs	r3, r2
 8019ef2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	607b      	str	r3, [r7, #4]
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	781b      	ldrb	r3, [r3, #0]
 8019efe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8019f02:	e7b7      	b.n	8019e74 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8019f04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f08:	2b2e      	cmp	r3, #46	; 0x2e
 8019f0a:	d114      	bne.n	8019f36 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8019f0c:	f107 030c 	add.w	r3, r7, #12
 8019f10:	330c      	adds	r3, #12
 8019f12:	69fa      	ldr	r2, [r7, #28]
 8019f14:	429a      	cmp	r2, r3
 8019f16:	d301      	bcc.n	8019f1c <ip4addr_aton+0x124>
        return 0;
 8019f18:	2300      	movs	r3, #0
 8019f1a:	e08b      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	1d1a      	adds	r2, r3, #4
 8019f20:	61fa      	str	r2, [r7, #28]
 8019f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f24:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	3301      	adds	r3, #1
 8019f2a:	607b      	str	r3, [r7, #4]
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	781b      	ldrb	r3, [r3, #0]
 8019f30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8019f34:	e76c      	b.n	8019e10 <ip4addr_aton+0x18>
    } else {
      break;
 8019f36:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8019f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d00b      	beq.n	8019f58 <ip4addr_aton+0x160>
 8019f40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f44:	3301      	adds	r3, #1
 8019f46:	4a3d      	ldr	r2, [pc, #244]	; (801a03c <ip4addr_aton+0x244>)
 8019f48:	4413      	add	r3, r2
 8019f4a:	781b      	ldrb	r3, [r3, #0]
 8019f4c:	f003 0308 	and.w	r3, r3, #8
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d101      	bne.n	8019f58 <ip4addr_aton+0x160>
    return 0;
 8019f54:	2300      	movs	r3, #0
 8019f56:	e06d      	b.n	801a034 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8019f58:	f107 030c 	add.w	r3, r7, #12
 8019f5c:	69fa      	ldr	r2, [r7, #28]
 8019f5e:	1ad3      	subs	r3, r2, r3
 8019f60:	109b      	asrs	r3, r3, #2
 8019f62:	3301      	adds	r3, #1
 8019f64:	2b04      	cmp	r3, #4
 8019f66:	d853      	bhi.n	801a010 <ip4addr_aton+0x218>
 8019f68:	a201      	add	r2, pc, #4	; (adr r2, 8019f70 <ip4addr_aton+0x178>)
 8019f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019f6e:	bf00      	nop
 8019f70:	08019f85 	.word	0x08019f85
 8019f74:	0801a01f 	.word	0x0801a01f
 8019f78:	08019f89 	.word	0x08019f89
 8019f7c:	08019fab 	.word	0x08019fab
 8019f80:	08019fd9 	.word	0x08019fd9

    case 0:
      return 0;       /* initial nondigit */
 8019f84:	2300      	movs	r3, #0
 8019f86:	e055      	b.n	801a034 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8019f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019f8e:	d301      	bcc.n	8019f94 <ip4addr_aton+0x19c>
        return 0;
 8019f90:	2300      	movs	r3, #0
 8019f92:	e04f      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	2bff      	cmp	r3, #255	; 0xff
 8019f98:	d901      	bls.n	8019f9e <ip4addr_aton+0x1a6>
        return 0;
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	e04a      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	061b      	lsls	r3, r3, #24
 8019fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fa4:	4313      	orrs	r3, r2
 8019fa6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019fa8:	e03a      	b.n	801a020 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8019faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019fb0:	d301      	bcc.n	8019fb6 <ip4addr_aton+0x1be>
        return 0;
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	e03e      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	2bff      	cmp	r3, #255	; 0xff
 8019fba:	d802      	bhi.n	8019fc2 <ip4addr_aton+0x1ca>
 8019fbc:	693b      	ldr	r3, [r7, #16]
 8019fbe:	2bff      	cmp	r3, #255	; 0xff
 8019fc0:	d901      	bls.n	8019fc6 <ip4addr_aton+0x1ce>
        return 0;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	e036      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	061a      	lsls	r2, r3, #24
 8019fca:	693b      	ldr	r3, [r7, #16]
 8019fcc:	041b      	lsls	r3, r3, #16
 8019fce:	4313      	orrs	r3, r2
 8019fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fd2:	4313      	orrs	r3, r2
 8019fd4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8019fd6:	e023      	b.n	801a020 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8019fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fda:	2bff      	cmp	r3, #255	; 0xff
 8019fdc:	d901      	bls.n	8019fe2 <ip4addr_aton+0x1ea>
        return 0;
 8019fde:	2300      	movs	r3, #0
 8019fe0:	e028      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8019fe2:	68fb      	ldr	r3, [r7, #12]
 8019fe4:	2bff      	cmp	r3, #255	; 0xff
 8019fe6:	d805      	bhi.n	8019ff4 <ip4addr_aton+0x1fc>
 8019fe8:	693b      	ldr	r3, [r7, #16]
 8019fea:	2bff      	cmp	r3, #255	; 0xff
 8019fec:	d802      	bhi.n	8019ff4 <ip4addr_aton+0x1fc>
 8019fee:	697b      	ldr	r3, [r7, #20]
 8019ff0:	2bff      	cmp	r3, #255	; 0xff
 8019ff2:	d901      	bls.n	8019ff8 <ip4addr_aton+0x200>
        return 0;
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	e01d      	b.n	801a034 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	061a      	lsls	r2, r3, #24
 8019ffc:	693b      	ldr	r3, [r7, #16]
 8019ffe:	041b      	lsls	r3, r3, #16
 801a000:	431a      	orrs	r2, r3
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	021b      	lsls	r3, r3, #8
 801a006:	4313      	orrs	r3, r2
 801a008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a00a:	4313      	orrs	r3, r2
 801a00c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a00e:	e007      	b.n	801a020 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a010:	4b0b      	ldr	r3, [pc, #44]	; (801a040 <ip4addr_aton+0x248>)
 801a012:	22f9      	movs	r2, #249	; 0xf9
 801a014:	490b      	ldr	r1, [pc, #44]	; (801a044 <ip4addr_aton+0x24c>)
 801a016:	480c      	ldr	r0, [pc, #48]	; (801a048 <ip4addr_aton+0x250>)
 801a018:	f001 ff06 	bl	801be28 <iprintf>
      break;
 801a01c:	e000      	b.n	801a020 <ip4addr_aton+0x228>
      break;
 801a01e:	bf00      	nop
  }
  if (addr) {
 801a020:	683b      	ldr	r3, [r7, #0]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d005      	beq.n	801a032 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a028:	f7f3 fb29 	bl	800d67e <lwip_htonl>
 801a02c:	4602      	mov	r2, r0
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a032:	2301      	movs	r3, #1
}
 801a034:	4618      	mov	r0, r3
 801a036:	3728      	adds	r7, #40	; 0x28
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}
 801a03c:	0806dfcb 	.word	0x0806dfcb
 801a040:	08021e20 	.word	0x08021e20
 801a044:	08021e5c 	.word	0x08021e5c
 801a048:	08021e68 	.word	0x08021e68

0801a04c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a052:	2300      	movs	r3, #0
 801a054:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a056:	4b12      	ldr	r3, [pc, #72]	; (801a0a0 <ip_reass_tmr+0x54>)
 801a058:	681b      	ldr	r3, [r3, #0]
 801a05a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a05c:	e018      	b.n	801a090 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	7fdb      	ldrb	r3, [r3, #31]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d00b      	beq.n	801a07e <ip_reass_tmr+0x32>
      r->timer--;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	7fdb      	ldrb	r3, [r3, #31]
 801a06a:	3b01      	subs	r3, #1
 801a06c:	b2da      	uxtb	r2, r3
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	60fb      	str	r3, [r7, #12]
 801a07c:	e008      	b.n	801a090 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a088:	68b9      	ldr	r1, [r7, #8]
 801a08a:	6878      	ldr	r0, [r7, #4]
 801a08c:	f000 f80a 	bl	801a0a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d1e3      	bne.n	801a05e <ip_reass_tmr+0x12>
    }
  }
}
 801a096:	bf00      	nop
 801a098:	bf00      	nop
 801a09a:	3710      	adds	r7, #16
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}
 801a0a0:	20013e64 	.word	0x20013e64

0801a0a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a0a4:	b580      	push	{r7, lr}
 801a0a6:	b088      	sub	sp, #32
 801a0a8:	af00      	add	r7, sp, #0
 801a0aa:	6078      	str	r0, [r7, #4]
 801a0ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a0b2:	683a      	ldr	r2, [r7, #0]
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	429a      	cmp	r2, r3
 801a0b8:	d105      	bne.n	801a0c6 <ip_reass_free_complete_datagram+0x22>
 801a0ba:	4b45      	ldr	r3, [pc, #276]	; (801a1d0 <ip_reass_free_complete_datagram+0x12c>)
 801a0bc:	22ab      	movs	r2, #171	; 0xab
 801a0be:	4945      	ldr	r1, [pc, #276]	; (801a1d4 <ip_reass_free_complete_datagram+0x130>)
 801a0c0:	4845      	ldr	r0, [pc, #276]	; (801a1d8 <ip_reass_free_complete_datagram+0x134>)
 801a0c2:	f001 feb1 	bl	801be28 <iprintf>
  if (prev != NULL) {
 801a0c6:	683b      	ldr	r3, [r7, #0]
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d00a      	beq.n	801a0e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	687a      	ldr	r2, [r7, #4]
 801a0d2:	429a      	cmp	r2, r3
 801a0d4:	d005      	beq.n	801a0e2 <ip_reass_free_complete_datagram+0x3e>
 801a0d6:	4b3e      	ldr	r3, [pc, #248]	; (801a1d0 <ip_reass_free_complete_datagram+0x12c>)
 801a0d8:	22ad      	movs	r2, #173	; 0xad
 801a0da:	4940      	ldr	r1, [pc, #256]	; (801a1dc <ip_reass_free_complete_datagram+0x138>)
 801a0dc:	483e      	ldr	r0, [pc, #248]	; (801a1d8 <ip_reass_free_complete_datagram+0x134>)
 801a0de:	f001 fea3 	bl	801be28 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	685b      	ldr	r3, [r3, #4]
 801a0e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a0ea:	697b      	ldr	r3, [r7, #20]
 801a0ec:	889b      	ldrh	r3, [r3, #4]
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d12a      	bne.n	801a14a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	685b      	ldr	r3, [r3, #4]
 801a0f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a0fa:	697b      	ldr	r3, [r7, #20]
 801a0fc:	681a      	ldr	r2, [r3, #0]
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a102:	69bb      	ldr	r3, [r7, #24]
 801a104:	6858      	ldr	r0, [r3, #4]
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	3308      	adds	r3, #8
 801a10a:	2214      	movs	r2, #20
 801a10c:	4619      	mov	r1, r3
 801a10e:	f002 f8b2 	bl	801c276 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a112:	2101      	movs	r1, #1
 801a114:	69b8      	ldr	r0, [r7, #24]
 801a116:	f7ff fa83 	bl	8019620 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a11a:	69b8      	ldr	r0, [r7, #24]
 801a11c:	f7f5 f84a 	bl	800f1b4 <pbuf_clen>
 801a120:	4603      	mov	r3, r0
 801a122:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a124:	8bfa      	ldrh	r2, [r7, #30]
 801a126:	8a7b      	ldrh	r3, [r7, #18]
 801a128:	4413      	add	r3, r2
 801a12a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a12e:	db05      	blt.n	801a13c <ip_reass_free_complete_datagram+0x98>
 801a130:	4b27      	ldr	r3, [pc, #156]	; (801a1d0 <ip_reass_free_complete_datagram+0x12c>)
 801a132:	22bc      	movs	r2, #188	; 0xbc
 801a134:	492a      	ldr	r1, [pc, #168]	; (801a1e0 <ip_reass_free_complete_datagram+0x13c>)
 801a136:	4828      	ldr	r0, [pc, #160]	; (801a1d8 <ip_reass_free_complete_datagram+0x134>)
 801a138:	f001 fe76 	bl	801be28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a13c:	8bfa      	ldrh	r2, [r7, #30]
 801a13e:	8a7b      	ldrh	r3, [r7, #18]
 801a140:	4413      	add	r3, r2
 801a142:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a144:	69b8      	ldr	r0, [r7, #24]
 801a146:	f7f4 ffa7 	bl	800f098 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a150:	e01f      	b.n	801a192 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a152:	69bb      	ldr	r3, [r7, #24]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a158:	69bb      	ldr	r3, [r7, #24]
 801a15a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a15c:	697b      	ldr	r3, [r7, #20]
 801a15e:	681b      	ldr	r3, [r3, #0]
 801a160:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a162:	68f8      	ldr	r0, [r7, #12]
 801a164:	f7f5 f826 	bl	800f1b4 <pbuf_clen>
 801a168:	4603      	mov	r3, r0
 801a16a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a16c:	8bfa      	ldrh	r2, [r7, #30]
 801a16e:	8a7b      	ldrh	r3, [r7, #18]
 801a170:	4413      	add	r3, r2
 801a172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a176:	db05      	blt.n	801a184 <ip_reass_free_complete_datagram+0xe0>
 801a178:	4b15      	ldr	r3, [pc, #84]	; (801a1d0 <ip_reass_free_complete_datagram+0x12c>)
 801a17a:	22cc      	movs	r2, #204	; 0xcc
 801a17c:	4918      	ldr	r1, [pc, #96]	; (801a1e0 <ip_reass_free_complete_datagram+0x13c>)
 801a17e:	4816      	ldr	r0, [pc, #88]	; (801a1d8 <ip_reass_free_complete_datagram+0x134>)
 801a180:	f001 fe52 	bl	801be28 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a184:	8bfa      	ldrh	r2, [r7, #30]
 801a186:	8a7b      	ldrh	r3, [r7, #18]
 801a188:	4413      	add	r3, r2
 801a18a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a18c:	68f8      	ldr	r0, [r7, #12]
 801a18e:	f7f4 ff83 	bl	800f098 <pbuf_free>
  while (p != NULL) {
 801a192:	69bb      	ldr	r3, [r7, #24]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d1dc      	bne.n	801a152 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a198:	6839      	ldr	r1, [r7, #0]
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f000 f8c2 	bl	801a324 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a1a0:	4b10      	ldr	r3, [pc, #64]	; (801a1e4 <ip_reass_free_complete_datagram+0x140>)
 801a1a2:	881b      	ldrh	r3, [r3, #0]
 801a1a4:	8bfa      	ldrh	r2, [r7, #30]
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d905      	bls.n	801a1b6 <ip_reass_free_complete_datagram+0x112>
 801a1aa:	4b09      	ldr	r3, [pc, #36]	; (801a1d0 <ip_reass_free_complete_datagram+0x12c>)
 801a1ac:	22d2      	movs	r2, #210	; 0xd2
 801a1ae:	490e      	ldr	r1, [pc, #56]	; (801a1e8 <ip_reass_free_complete_datagram+0x144>)
 801a1b0:	4809      	ldr	r0, [pc, #36]	; (801a1d8 <ip_reass_free_complete_datagram+0x134>)
 801a1b2:	f001 fe39 	bl	801be28 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a1b6:	4b0b      	ldr	r3, [pc, #44]	; (801a1e4 <ip_reass_free_complete_datagram+0x140>)
 801a1b8:	881a      	ldrh	r2, [r3, #0]
 801a1ba:	8bfb      	ldrh	r3, [r7, #30]
 801a1bc:	1ad3      	subs	r3, r2, r3
 801a1be:	b29a      	uxth	r2, r3
 801a1c0:	4b08      	ldr	r3, [pc, #32]	; (801a1e4 <ip_reass_free_complete_datagram+0x140>)
 801a1c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a1c4:	8bfb      	ldrh	r3, [r7, #30]
}
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	3720      	adds	r7, #32
 801a1ca:	46bd      	mov	sp, r7
 801a1cc:	bd80      	pop	{r7, pc}
 801a1ce:	bf00      	nop
 801a1d0:	08021e90 	.word	0x08021e90
 801a1d4:	08021ecc 	.word	0x08021ecc
 801a1d8:	08021ed8 	.word	0x08021ed8
 801a1dc:	08021f00 	.word	0x08021f00
 801a1e0:	08021f14 	.word	0x08021f14
 801a1e4:	20013e68 	.word	0x20013e68
 801a1e8:	08021f34 	.word	0x08021f34

0801a1ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b08a      	sub	sp, #40	; 0x28
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a1fe:	2300      	movs	r3, #0
 801a200:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a202:	2300      	movs	r3, #0
 801a204:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a206:	2300      	movs	r3, #0
 801a208:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a20a:	4b28      	ldr	r3, [pc, #160]	; (801a2ac <ip_reass_remove_oldest_datagram+0xc0>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a210:	e030      	b.n	801a274 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a214:	695a      	ldr	r2, [r3, #20]
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	68db      	ldr	r3, [r3, #12]
 801a21a:	429a      	cmp	r2, r3
 801a21c:	d10c      	bne.n	801a238 <ip_reass_remove_oldest_datagram+0x4c>
 801a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a220:	699a      	ldr	r2, [r3, #24]
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	691b      	ldr	r3, [r3, #16]
 801a226:	429a      	cmp	r2, r3
 801a228:	d106      	bne.n	801a238 <ip_reass_remove_oldest_datagram+0x4c>
 801a22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a22c:	899a      	ldrh	r2, [r3, #12]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	889b      	ldrh	r3, [r3, #4]
 801a232:	b29b      	uxth	r3, r3
 801a234:	429a      	cmp	r2, r3
 801a236:	d014      	beq.n	801a262 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a238:	693b      	ldr	r3, [r7, #16]
 801a23a:	3301      	adds	r3, #1
 801a23c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a23e:	6a3b      	ldr	r3, [r7, #32]
 801a240:	2b00      	cmp	r3, #0
 801a242:	d104      	bne.n	801a24e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a246:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a248:	69fb      	ldr	r3, [r7, #28]
 801a24a:	61bb      	str	r3, [r7, #24]
 801a24c:	e009      	b.n	801a262 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a250:	7fda      	ldrb	r2, [r3, #31]
 801a252:	6a3b      	ldr	r3, [r7, #32]
 801a254:	7fdb      	ldrb	r3, [r3, #31]
 801a256:	429a      	cmp	r2, r3
 801a258:	d803      	bhi.n	801a262 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a25c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a25e:	69fb      	ldr	r3, [r7, #28]
 801a260:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d001      	beq.n	801a26e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a26c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a276:	2b00      	cmp	r3, #0
 801a278:	d1cb      	bne.n	801a212 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a27a:	6a3b      	ldr	r3, [r7, #32]
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d008      	beq.n	801a292 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a280:	69b9      	ldr	r1, [r7, #24]
 801a282:	6a38      	ldr	r0, [r7, #32]
 801a284:	f7ff ff0e 	bl	801a0a4 <ip_reass_free_complete_datagram>
 801a288:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a28a:	697a      	ldr	r2, [r7, #20]
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	4413      	add	r3, r2
 801a290:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a292:	697a      	ldr	r2, [r7, #20]
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	429a      	cmp	r2, r3
 801a298:	da02      	bge.n	801a2a0 <ip_reass_remove_oldest_datagram+0xb4>
 801a29a:	693b      	ldr	r3, [r7, #16]
 801a29c:	2b01      	cmp	r3, #1
 801a29e:	dcac      	bgt.n	801a1fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a2a0:	697b      	ldr	r3, [r7, #20]
}
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	3728      	adds	r7, #40	; 0x28
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}
 801a2aa:	bf00      	nop
 801a2ac:	20013e64 	.word	0x20013e64

0801a2b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a2b0:	b580      	push	{r7, lr}
 801a2b2:	b084      	sub	sp, #16
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a2ba:	2004      	movs	r0, #4
 801a2bc:	f7f3 fff8 	bl	800e2b0 <memp_malloc>
 801a2c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d110      	bne.n	801a2ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a2c8:	6839      	ldr	r1, [r7, #0]
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f7ff ff8e 	bl	801a1ec <ip_reass_remove_oldest_datagram>
 801a2d0:	4602      	mov	r2, r0
 801a2d2:	683b      	ldr	r3, [r7, #0]
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	dc03      	bgt.n	801a2e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a2d8:	2004      	movs	r0, #4
 801a2da:	f7f3 ffe9 	bl	800e2b0 <memp_malloc>
 801a2de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d101      	bne.n	801a2ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a2e6:	2300      	movs	r3, #0
 801a2e8:	e016      	b.n	801a318 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a2ea:	2220      	movs	r2, #32
 801a2ec:	2100      	movs	r1, #0
 801a2ee:	68f8      	ldr	r0, [r7, #12]
 801a2f0:	f001 ff04 	bl	801c0fc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	220f      	movs	r2, #15
 801a2f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a2fa:	4b09      	ldr	r3, [pc, #36]	; (801a320 <ip_reass_enqueue_new_datagram+0x70>)
 801a2fc:	681a      	ldr	r2, [r3, #0]
 801a2fe:	68fb      	ldr	r3, [r7, #12]
 801a300:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a302:	4a07      	ldr	r2, [pc, #28]	; (801a320 <ip_reass_enqueue_new_datagram+0x70>)
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	3308      	adds	r3, #8
 801a30c:	2214      	movs	r2, #20
 801a30e:	6879      	ldr	r1, [r7, #4]
 801a310:	4618      	mov	r0, r3
 801a312:	f001 ffb0 	bl	801c276 <memcpy>
  return ipr;
 801a316:	68fb      	ldr	r3, [r7, #12]
}
 801a318:	4618      	mov	r0, r3
 801a31a:	3710      	adds	r7, #16
 801a31c:	46bd      	mov	sp, r7
 801a31e:	bd80      	pop	{r7, pc}
 801a320:	20013e64 	.word	0x20013e64

0801a324 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b082      	sub	sp, #8
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
 801a32c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a32e:	4b10      	ldr	r3, [pc, #64]	; (801a370 <ip_reass_dequeue_datagram+0x4c>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	429a      	cmp	r2, r3
 801a336:	d104      	bne.n	801a342 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	681b      	ldr	r3, [r3, #0]
 801a33c:	4a0c      	ldr	r2, [pc, #48]	; (801a370 <ip_reass_dequeue_datagram+0x4c>)
 801a33e:	6013      	str	r3, [r2, #0]
 801a340:	e00d      	b.n	801a35e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a342:	683b      	ldr	r3, [r7, #0]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d106      	bne.n	801a356 <ip_reass_dequeue_datagram+0x32>
 801a348:	4b0a      	ldr	r3, [pc, #40]	; (801a374 <ip_reass_dequeue_datagram+0x50>)
 801a34a:	f240 1245 	movw	r2, #325	; 0x145
 801a34e:	490a      	ldr	r1, [pc, #40]	; (801a378 <ip_reass_dequeue_datagram+0x54>)
 801a350:	480a      	ldr	r0, [pc, #40]	; (801a37c <ip_reass_dequeue_datagram+0x58>)
 801a352:	f001 fd69 	bl	801be28 <iprintf>
    prev->next = ipr->next;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	681a      	ldr	r2, [r3, #0]
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a35e:	6879      	ldr	r1, [r7, #4]
 801a360:	2004      	movs	r0, #4
 801a362:	f7f3 fff7 	bl	800e354 <memp_free>
}
 801a366:	bf00      	nop
 801a368:	3708      	adds	r7, #8
 801a36a:	46bd      	mov	sp, r7
 801a36c:	bd80      	pop	{r7, pc}
 801a36e:	bf00      	nop
 801a370:	20013e64 	.word	0x20013e64
 801a374:	08021e90 	.word	0x08021e90
 801a378:	08021f58 	.word	0x08021f58
 801a37c:	08021ed8 	.word	0x08021ed8

0801a380 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b08c      	sub	sp, #48	; 0x30
 801a384:	af00      	add	r7, sp, #0
 801a386:	60f8      	str	r0, [r7, #12]
 801a388:	60b9      	str	r1, [r7, #8]
 801a38a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a38c:	2300      	movs	r3, #0
 801a38e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a390:	2301      	movs	r3, #1
 801a392:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a394:	68bb      	ldr	r3, [r7, #8]
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a39a:	69fb      	ldr	r3, [r7, #28]
 801a39c:	885b      	ldrh	r3, [r3, #2]
 801a39e:	b29b      	uxth	r3, r3
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	f7f3 f957 	bl	800d654 <lwip_htons>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a3aa:	69fb      	ldr	r3, [r7, #28]
 801a3ac:	781b      	ldrb	r3, [r3, #0]
 801a3ae:	f003 030f 	and.w	r3, r3, #15
 801a3b2:	b2db      	uxtb	r3, r3
 801a3b4:	009b      	lsls	r3, r3, #2
 801a3b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a3b8:	7e7b      	ldrb	r3, [r7, #25]
 801a3ba:	b29b      	uxth	r3, r3
 801a3bc:	8b7a      	ldrh	r2, [r7, #26]
 801a3be:	429a      	cmp	r2, r3
 801a3c0:	d202      	bcs.n	801a3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3c2:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c6:	e135      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a3c8:	7e7b      	ldrb	r3, [r7, #25]
 801a3ca:	b29b      	uxth	r3, r3
 801a3cc:	8b7a      	ldrh	r2, [r7, #26]
 801a3ce:	1ad3      	subs	r3, r2, r3
 801a3d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a3d2:	69fb      	ldr	r3, [r7, #28]
 801a3d4:	88db      	ldrh	r3, [r3, #6]
 801a3d6:	b29b      	uxth	r3, r3
 801a3d8:	4618      	mov	r0, r3
 801a3da:	f7f3 f93b 	bl	800d654 <lwip_htons>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3e4:	b29b      	uxth	r3, r3
 801a3e6:	00db      	lsls	r3, r3, #3
 801a3e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	685b      	ldr	r3, [r3, #4]
 801a3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	701a      	strb	r2, [r3, #0]
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	705a      	strb	r2, [r3, #1]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	709a      	strb	r2, [r3, #2]
 801a3fe:	2200      	movs	r2, #0
 801a400:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a404:	8afa      	ldrh	r2, [r7, #22]
 801a406:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a408:	8afa      	ldrh	r2, [r7, #22]
 801a40a:	8b7b      	ldrh	r3, [r7, #26]
 801a40c:	4413      	add	r3, r2
 801a40e:	b29a      	uxth	r2, r3
 801a410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a412:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a416:	88db      	ldrh	r3, [r3, #6]
 801a418:	b29b      	uxth	r3, r3
 801a41a:	8afa      	ldrh	r2, [r7, #22]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d902      	bls.n	801a426 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a420:	f04f 33ff 	mov.w	r3, #4294967295
 801a424:	e106      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	627b      	str	r3, [r7, #36]	; 0x24
 801a42c:	e068      	b.n	801a500 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a436:	889b      	ldrh	r3, [r3, #4]
 801a438:	b29a      	uxth	r2, r3
 801a43a:	693b      	ldr	r3, [r7, #16]
 801a43c:	889b      	ldrh	r3, [r3, #4]
 801a43e:	b29b      	uxth	r3, r3
 801a440:	429a      	cmp	r2, r3
 801a442:	d235      	bcs.n	801a4b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a448:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d020      	beq.n	801a492 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a452:	889b      	ldrh	r3, [r3, #4]
 801a454:	b29a      	uxth	r2, r3
 801a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a458:	88db      	ldrh	r3, [r3, #6]
 801a45a:	b29b      	uxth	r3, r3
 801a45c:	429a      	cmp	r2, r3
 801a45e:	d307      	bcc.n	801a470 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a462:	88db      	ldrh	r3, [r3, #6]
 801a464:	b29a      	uxth	r2, r3
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	889b      	ldrh	r3, [r3, #4]
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	429a      	cmp	r2, r3
 801a46e:	d902      	bls.n	801a476 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a470:	f04f 33ff 	mov.w	r3, #4294967295
 801a474:	e0de      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a478:	68ba      	ldr	r2, [r7, #8]
 801a47a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a47e:	88db      	ldrh	r3, [r3, #6]
 801a480:	b29a      	uxth	r2, r3
 801a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a484:	889b      	ldrh	r3, [r3, #4]
 801a486:	b29b      	uxth	r3, r3
 801a488:	429a      	cmp	r2, r3
 801a48a:	d03d      	beq.n	801a508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a48c:	2300      	movs	r3, #0
 801a48e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a490:	e03a      	b.n	801a508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a494:	88db      	ldrh	r3, [r3, #6]
 801a496:	b29a      	uxth	r2, r3
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	889b      	ldrh	r3, [r3, #4]
 801a49c:	b29b      	uxth	r3, r3
 801a49e:	429a      	cmp	r2, r3
 801a4a0:	d902      	bls.n	801a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a4a6:	e0c5      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	68ba      	ldr	r2, [r7, #8]
 801a4ac:	605a      	str	r2, [r3, #4]
      break;
 801a4ae:	e02b      	b.n	801a508 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b2:	889b      	ldrh	r3, [r3, #4]
 801a4b4:	b29a      	uxth	r2, r3
 801a4b6:	693b      	ldr	r3, [r7, #16]
 801a4b8:	889b      	ldrh	r3, [r3, #4]
 801a4ba:	b29b      	uxth	r3, r3
 801a4bc:	429a      	cmp	r2, r3
 801a4be:	d102      	bne.n	801a4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a4c4:	e0b6      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c8:	889b      	ldrh	r3, [r3, #4]
 801a4ca:	b29a      	uxth	r2, r3
 801a4cc:	693b      	ldr	r3, [r7, #16]
 801a4ce:	88db      	ldrh	r3, [r3, #6]
 801a4d0:	b29b      	uxth	r3, r3
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d202      	bcs.n	801a4dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4d6:	f04f 33ff 	mov.w	r3, #4294967295
 801a4da:	e0ab      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d009      	beq.n	801a4f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4e4:	88db      	ldrh	r3, [r3, #6]
 801a4e6:	b29a      	uxth	r2, r3
 801a4e8:	693b      	ldr	r3, [r7, #16]
 801a4ea:	889b      	ldrh	r3, [r3, #4]
 801a4ec:	b29b      	uxth	r3, r3
 801a4ee:	429a      	cmp	r2, r3
 801a4f0:	d001      	beq.n	801a4f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a4f6:	693b      	ldr	r3, [r7, #16]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a4fc:	693b      	ldr	r3, [r7, #16]
 801a4fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a502:	2b00      	cmp	r3, #0
 801a504:	d193      	bne.n	801a42e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a506:	e000      	b.n	801a50a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a508:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	d12d      	bne.n	801a56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a512:	2b00      	cmp	r3, #0
 801a514:	d01c      	beq.n	801a550 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a518:	88db      	ldrh	r3, [r3, #6]
 801a51a:	b29a      	uxth	r2, r3
 801a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a51e:	889b      	ldrh	r3, [r3, #4]
 801a520:	b29b      	uxth	r3, r3
 801a522:	429a      	cmp	r2, r3
 801a524:	d906      	bls.n	801a534 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a526:	4b45      	ldr	r3, [pc, #276]	; (801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a528:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a52c:	4944      	ldr	r1, [pc, #272]	; (801a640 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a52e:	4845      	ldr	r0, [pc, #276]	; (801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a530:	f001 fc7a 	bl	801be28 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a536:	68ba      	ldr	r2, [r7, #8]
 801a538:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a53c:	88db      	ldrh	r3, [r3, #6]
 801a53e:	b29a      	uxth	r2, r3
 801a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a542:	889b      	ldrh	r3, [r3, #4]
 801a544:	b29b      	uxth	r3, r3
 801a546:	429a      	cmp	r2, r3
 801a548:	d010      	beq.n	801a56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a54a:	2300      	movs	r3, #0
 801a54c:	623b      	str	r3, [r7, #32]
 801a54e:	e00d      	b.n	801a56c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	685b      	ldr	r3, [r3, #4]
 801a554:	2b00      	cmp	r3, #0
 801a556:	d006      	beq.n	801a566 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a558:	4b38      	ldr	r3, [pc, #224]	; (801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a55a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a55e:	493a      	ldr	r1, [pc, #232]	; (801a648 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a560:	4838      	ldr	r0, [pc, #224]	; (801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a562:	f001 fc61 	bl	801be28 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	68ba      	ldr	r2, [r7, #8]
 801a56a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d105      	bne.n	801a57e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	7f9b      	ldrb	r3, [r3, #30]
 801a576:	f003 0301 	and.w	r3, r3, #1
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d059      	beq.n	801a632 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a57e:	6a3b      	ldr	r3, [r7, #32]
 801a580:	2b00      	cmp	r3, #0
 801a582:	d04f      	beq.n	801a624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	685b      	ldr	r3, [r3, #4]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d006      	beq.n	801a59a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	685b      	ldr	r3, [r3, #4]
 801a590:	685b      	ldr	r3, [r3, #4]
 801a592:	889b      	ldrh	r3, [r3, #4]
 801a594:	b29b      	uxth	r3, r3
 801a596:	2b00      	cmp	r3, #0
 801a598:	d002      	beq.n	801a5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a59a:	2300      	movs	r3, #0
 801a59c:	623b      	str	r3, [r7, #32]
 801a59e:	e041      	b.n	801a624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a5aa:	e012      	b.n	801a5d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ae:	685b      	ldr	r3, [r3, #4]
 801a5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a5b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5b4:	88db      	ldrh	r3, [r3, #6]
 801a5b6:	b29a      	uxth	r2, r3
 801a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ba:	889b      	ldrh	r3, [r3, #4]
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	429a      	cmp	r2, r3
 801a5c0:	d002      	beq.n	801a5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	623b      	str	r3, [r7, #32]
            break;
 801a5c6:	e007      	b.n	801a5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d1e9      	bne.n	801a5ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a5d8:	6a3b      	ldr	r3, [r7, #32]
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d022      	beq.n	801a624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	685b      	ldr	r3, [r3, #4]
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d106      	bne.n	801a5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a5e6:	4b15      	ldr	r3, [pc, #84]	; (801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a5e8:	f240 12df 	movw	r2, #479	; 0x1df
 801a5ec:	4917      	ldr	r1, [pc, #92]	; (801a64c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a5ee:	4815      	ldr	r0, [pc, #84]	; (801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a5f0:	f001 fc1a 	bl	801be28 <iprintf>
          LWIP_ASSERT("sanity check",
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	685b      	ldr	r3, [r3, #4]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5fc:	429a      	cmp	r2, r3
 801a5fe:	d106      	bne.n	801a60e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a600:	4b0e      	ldr	r3, [pc, #56]	; (801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a602:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a606:	4911      	ldr	r1, [pc, #68]	; (801a64c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a608:	480e      	ldr	r0, [pc, #56]	; (801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a60a:	f001 fc0d 	bl	801be28 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d006      	beq.n	801a624 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a616:	4b09      	ldr	r3, [pc, #36]	; (801a63c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a618:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a61c:	490c      	ldr	r1, [pc, #48]	; (801a650 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a61e:	4809      	ldr	r0, [pc, #36]	; (801a644 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a620:	f001 fc02 	bl	801be28 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a624:	6a3b      	ldr	r3, [r7, #32]
 801a626:	2b00      	cmp	r3, #0
 801a628:	bf14      	ite	ne
 801a62a:	2301      	movne	r3, #1
 801a62c:	2300      	moveq	r3, #0
 801a62e:	b2db      	uxtb	r3, r3
 801a630:	e000      	b.n	801a634 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a632:	2300      	movs	r3, #0
}
 801a634:	4618      	mov	r0, r3
 801a636:	3730      	adds	r7, #48	; 0x30
 801a638:	46bd      	mov	sp, r7
 801a63a:	bd80      	pop	{r7, pc}
 801a63c:	08021e90 	.word	0x08021e90
 801a640:	08021f74 	.word	0x08021f74
 801a644:	08021ed8 	.word	0x08021ed8
 801a648:	08021f94 	.word	0x08021f94
 801a64c:	08021fcc 	.word	0x08021fcc
 801a650:	08021fdc 	.word	0x08021fdc

0801a654 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a654:	b580      	push	{r7, lr}
 801a656:	b08e      	sub	sp, #56	; 0x38
 801a658:	af00      	add	r7, sp, #0
 801a65a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	685b      	ldr	r3, [r3, #4]
 801a660:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a664:	781b      	ldrb	r3, [r3, #0]
 801a666:	f003 030f 	and.w	r3, r3, #15
 801a66a:	b2db      	uxtb	r3, r3
 801a66c:	009b      	lsls	r3, r3, #2
 801a66e:	b2db      	uxtb	r3, r3
 801a670:	2b14      	cmp	r3, #20
 801a672:	f040 8179 	bne.w	801a968 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a678:	88db      	ldrh	r3, [r3, #6]
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7f2 ffe9 	bl	800d654 <lwip_htons>
 801a682:	4603      	mov	r3, r0
 801a684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a688:	b29b      	uxth	r3, r3
 801a68a:	00db      	lsls	r3, r3, #3
 801a68c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a690:	885b      	ldrh	r3, [r3, #2]
 801a692:	b29b      	uxth	r3, r3
 801a694:	4618      	mov	r0, r3
 801a696:	f7f2 ffdd 	bl	800d654 <lwip_htons>
 801a69a:	4603      	mov	r3, r0
 801a69c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6a0:	781b      	ldrb	r3, [r3, #0]
 801a6a2:	f003 030f 	and.w	r3, r3, #15
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	009b      	lsls	r3, r3, #2
 801a6aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a6ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6b2:	b29b      	uxth	r3, r3
 801a6b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6b6:	429a      	cmp	r2, r3
 801a6b8:	f0c0 8158 	bcc.w	801a96c <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a6bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6c0:	b29b      	uxth	r3, r3
 801a6c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a6c4:	1ad3      	subs	r3, r2, r3
 801a6c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a6c8:	6878      	ldr	r0, [r7, #4]
 801a6ca:	f7f4 fd73 	bl	800f1b4 <pbuf_clen>
 801a6ce:	4603      	mov	r3, r0
 801a6d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a6d2:	4b90      	ldr	r3, [pc, #576]	; (801a914 <ip4_reass+0x2c0>)
 801a6d4:	881b      	ldrh	r3, [r3, #0]
 801a6d6:	461a      	mov	r2, r3
 801a6d8:	8c3b      	ldrh	r3, [r7, #32]
 801a6da:	4413      	add	r3, r2
 801a6dc:	2b0a      	cmp	r3, #10
 801a6de:	dd10      	ble.n	801a702 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a6e0:	8c3b      	ldrh	r3, [r7, #32]
 801a6e2:	4619      	mov	r1, r3
 801a6e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a6e6:	f7ff fd81 	bl	801a1ec <ip_reass_remove_oldest_datagram>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	f000 813f 	beq.w	801a970 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a6f2:	4b88      	ldr	r3, [pc, #544]	; (801a914 <ip4_reass+0x2c0>)
 801a6f4:	881b      	ldrh	r3, [r3, #0]
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	8c3b      	ldrh	r3, [r7, #32]
 801a6fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a6fc:	2b0a      	cmp	r3, #10
 801a6fe:	f300 8137 	bgt.w	801a970 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a702:	4b85      	ldr	r3, [pc, #532]	; (801a918 <ip4_reass+0x2c4>)
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	633b      	str	r3, [r7, #48]	; 0x30
 801a708:	e015      	b.n	801a736 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a70c:	695a      	ldr	r2, [r3, #20]
 801a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a710:	68db      	ldr	r3, [r3, #12]
 801a712:	429a      	cmp	r2, r3
 801a714:	d10c      	bne.n	801a730 <ip4_reass+0xdc>
 801a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a718:	699a      	ldr	r2, [r3, #24]
 801a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a71c:	691b      	ldr	r3, [r3, #16]
 801a71e:	429a      	cmp	r2, r3
 801a720:	d106      	bne.n	801a730 <ip4_reass+0xdc>
 801a722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a724:	899a      	ldrh	r2, [r3, #12]
 801a726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a728:	889b      	ldrh	r3, [r3, #4]
 801a72a:	b29b      	uxth	r3, r3
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d006      	beq.n	801a73e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	633b      	str	r3, [r7, #48]	; 0x30
 801a736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d1e6      	bne.n	801a70a <ip4_reass+0xb6>
 801a73c:	e000      	b.n	801a740 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a73e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a742:	2b00      	cmp	r3, #0
 801a744:	d109      	bne.n	801a75a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a746:	8c3b      	ldrh	r3, [r7, #32]
 801a748:	4619      	mov	r1, r3
 801a74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a74c:	f7ff fdb0 	bl	801a2b0 <ip_reass_enqueue_new_datagram>
 801a750:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a754:	2b00      	cmp	r3, #0
 801a756:	d11c      	bne.n	801a792 <ip4_reass+0x13e>
      goto nullreturn;
 801a758:	e10d      	b.n	801a976 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a75c:	88db      	ldrh	r3, [r3, #6]
 801a75e:	b29b      	uxth	r3, r3
 801a760:	4618      	mov	r0, r3
 801a762:	f7f2 ff77 	bl	800d654 <lwip_htons>
 801a766:	4603      	mov	r3, r0
 801a768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d110      	bne.n	801a792 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a772:	89db      	ldrh	r3, [r3, #14]
 801a774:	4618      	mov	r0, r3
 801a776:	f7f2 ff6d 	bl	800d654 <lwip_htons>
 801a77a:	4603      	mov	r3, r0
 801a77c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a780:	2b00      	cmp	r3, #0
 801a782:	d006      	beq.n	801a792 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a786:	3308      	adds	r3, #8
 801a788:	2214      	movs	r2, #20
 801a78a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a78c:	4618      	mov	r0, r3
 801a78e:	f001 fd72 	bl	801c276 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a794:	88db      	ldrh	r3, [r3, #6]
 801a796:	b29b      	uxth	r3, r3
 801a798:	f003 0320 	and.w	r3, r3, #32
 801a79c:	2b00      	cmp	r3, #0
 801a79e:	bf0c      	ite	eq
 801a7a0:	2301      	moveq	r3, #1
 801a7a2:	2300      	movne	r3, #0
 801a7a4:	b2db      	uxtb	r3, r3
 801a7a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a7a8:	69fb      	ldr	r3, [r7, #28]
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d00e      	beq.n	801a7cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a7ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a7b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a7b2:	4413      	add	r3, r2
 801a7b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a7b6:	8b7a      	ldrh	r2, [r7, #26]
 801a7b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a7ba:	429a      	cmp	r2, r3
 801a7bc:	f0c0 80a8 	bcc.w	801a910 <ip4_reass+0x2bc>
 801a7c0:	8b7b      	ldrh	r3, [r7, #26]
 801a7c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a7c6:	4293      	cmp	r3, r2
 801a7c8:	f200 80a2 	bhi.w	801a910 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a7cc:	69fa      	ldr	r2, [r7, #28]
 801a7ce:	6879      	ldr	r1, [r7, #4]
 801a7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a7d2:	f7ff fdd5 	bl	801a380 <ip_reass_chain_frag_into_datagram_and_validate>
 801a7d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a7d8:	697b      	ldr	r3, [r7, #20]
 801a7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7de:	f000 80a3 	beq.w	801a928 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a7e2:	4b4c      	ldr	r3, [pc, #304]	; (801a914 <ip4_reass+0x2c0>)
 801a7e4:	881a      	ldrh	r2, [r3, #0]
 801a7e6:	8c3b      	ldrh	r3, [r7, #32]
 801a7e8:	4413      	add	r3, r2
 801a7ea:	b29a      	uxth	r2, r3
 801a7ec:	4b49      	ldr	r3, [pc, #292]	; (801a914 <ip4_reass+0x2c0>)
 801a7ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a7f0:	69fb      	ldr	r3, [r7, #28]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	d00d      	beq.n	801a812 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a7f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a7fa:	4413      	add	r3, r2
 801a7fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a800:	8a7a      	ldrh	r2, [r7, #18]
 801a802:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a806:	7f9b      	ldrb	r3, [r3, #30]
 801a808:	f043 0301 	orr.w	r3, r3, #1
 801a80c:	b2da      	uxtb	r2, r3
 801a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a810:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a812:	697b      	ldr	r3, [r7, #20]
 801a814:	2b01      	cmp	r3, #1
 801a816:	d179      	bne.n	801a90c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a81a:	8b9b      	ldrh	r3, [r3, #28]
 801a81c:	3314      	adds	r3, #20
 801a81e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a822:	685b      	ldr	r3, [r3, #4]
 801a824:	685b      	ldr	r3, [r3, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a82c:	685b      	ldr	r3, [r3, #4]
 801a82e:	685b      	ldr	r3, [r3, #4]
 801a830:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a834:	3308      	adds	r3, #8
 801a836:	2214      	movs	r2, #20
 801a838:	4619      	mov	r1, r3
 801a83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a83c:	f001 fd1b 	bl	801c276 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a840:	8a3b      	ldrh	r3, [r7, #16]
 801a842:	4618      	mov	r0, r3
 801a844:	f7f2 ff06 	bl	800d654 <lwip_htons>
 801a848:	4603      	mov	r3, r0
 801a84a:	461a      	mov	r2, r3
 801a84c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a84e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a852:	2200      	movs	r2, #0
 801a854:	719a      	strb	r2, [r3, #6]
 801a856:	2200      	movs	r2, #0
 801a858:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85c:	2200      	movs	r2, #0
 801a85e:	729a      	strb	r2, [r3, #10]
 801a860:	2200      	movs	r2, #0
 801a862:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801a864:	2114      	movs	r1, #20
 801a866:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a868:	f7f3 f83c 	bl	800d8e4 <inet_chksum>
 801a86c:	4603      	mov	r3, r0
 801a86e:	461a      	mov	r2, r3
 801a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a872:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a876:	685b      	ldr	r3, [r3, #4]
 801a878:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a87a:	e00d      	b.n	801a898 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 801a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a87e:	685b      	ldr	r3, [r3, #4]
 801a880:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a882:	2114      	movs	r1, #20
 801a884:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a886:	f7f4 fb81 	bl	800ef8c <pbuf_remove_header>
      pbuf_cat(p, r);
 801a88a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a88c:	6878      	ldr	r0, [r7, #4]
 801a88e:	f7f4 fcd1 	bl	800f234 <pbuf_cat>
      r = iprh->next_pbuf;
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 801a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d1ee      	bne.n	801a87c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a89e:	4b1e      	ldr	r3, [pc, #120]	; (801a918 <ip4_reass+0x2c4>)
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a8a4:	429a      	cmp	r2, r3
 801a8a6:	d102      	bne.n	801a8ae <ip4_reass+0x25a>
      ipr_prev = NULL;
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	637b      	str	r3, [r7, #52]	; 0x34
 801a8ac:	e010      	b.n	801a8d0 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a8ae:	4b1a      	ldr	r3, [pc, #104]	; (801a918 <ip4_reass+0x2c4>)
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	637b      	str	r3, [r7, #52]	; 0x34
 801a8b4:	e007      	b.n	801a8c6 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 801a8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a8bc:	429a      	cmp	r2, r3
 801a8be:	d006      	beq.n	801a8ce <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a8c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	637b      	str	r3, [r7, #52]	; 0x34
 801a8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d1f4      	bne.n	801a8b6 <ip4_reass+0x262>
 801a8cc:	e000      	b.n	801a8d0 <ip4_reass+0x27c>
          break;
 801a8ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a8d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a8d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a8d4:	f7ff fd26 	bl	801a324 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a8d8:	6878      	ldr	r0, [r7, #4]
 801a8da:	f7f4 fc6b 	bl	800f1b4 <pbuf_clen>
 801a8de:	4603      	mov	r3, r0
 801a8e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a8e2:	4b0c      	ldr	r3, [pc, #48]	; (801a914 <ip4_reass+0x2c0>)
 801a8e4:	881b      	ldrh	r3, [r3, #0]
 801a8e6:	8c3a      	ldrh	r2, [r7, #32]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d906      	bls.n	801a8fa <ip4_reass+0x2a6>
 801a8ec:	4b0b      	ldr	r3, [pc, #44]	; (801a91c <ip4_reass+0x2c8>)
 801a8ee:	f240 229b 	movw	r2, #667	; 0x29b
 801a8f2:	490b      	ldr	r1, [pc, #44]	; (801a920 <ip4_reass+0x2cc>)
 801a8f4:	480b      	ldr	r0, [pc, #44]	; (801a924 <ip4_reass+0x2d0>)
 801a8f6:	f001 fa97 	bl	801be28 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a8fa:	4b06      	ldr	r3, [pc, #24]	; (801a914 <ip4_reass+0x2c0>)
 801a8fc:	881a      	ldrh	r2, [r3, #0]
 801a8fe:	8c3b      	ldrh	r3, [r7, #32]
 801a900:	1ad3      	subs	r3, r2, r3
 801a902:	b29a      	uxth	r2, r3
 801a904:	4b03      	ldr	r3, [pc, #12]	; (801a914 <ip4_reass+0x2c0>)
 801a906:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	e038      	b.n	801a97e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a90c:	2300      	movs	r3, #0
 801a90e:	e036      	b.n	801a97e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801a910:	bf00      	nop
 801a912:	e00a      	b.n	801a92a <ip4_reass+0x2d6>
 801a914:	20013e68 	.word	0x20013e68
 801a918:	20013e64 	.word	0x20013e64
 801a91c:	08021e90 	.word	0x08021e90
 801a920:	08022000 	.word	0x08022000
 801a924:	08021ed8 	.word	0x08021ed8
    goto nullreturn_ipr;
 801a928:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d106      	bne.n	801a93e <ip4_reass+0x2ea>
 801a930:	4b15      	ldr	r3, [pc, #84]	; (801a988 <ip4_reass+0x334>)
 801a932:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a936:	4915      	ldr	r1, [pc, #84]	; (801a98c <ip4_reass+0x338>)
 801a938:	4815      	ldr	r0, [pc, #84]	; (801a990 <ip4_reass+0x33c>)
 801a93a:	f001 fa75 	bl	801be28 <iprintf>
  if (ipr->p == NULL) {
 801a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a940:	685b      	ldr	r3, [r3, #4]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d116      	bne.n	801a974 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a946:	4b13      	ldr	r3, [pc, #76]	; (801a994 <ip4_reass+0x340>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a94c:	429a      	cmp	r2, r3
 801a94e:	d006      	beq.n	801a95e <ip4_reass+0x30a>
 801a950:	4b0d      	ldr	r3, [pc, #52]	; (801a988 <ip4_reass+0x334>)
 801a952:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a956:	4910      	ldr	r1, [pc, #64]	; (801a998 <ip4_reass+0x344>)
 801a958:	480d      	ldr	r0, [pc, #52]	; (801a990 <ip4_reass+0x33c>)
 801a95a:	f001 fa65 	bl	801be28 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a95e:	2100      	movs	r1, #0
 801a960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a962:	f7ff fcdf 	bl	801a324 <ip_reass_dequeue_datagram>
 801a966:	e006      	b.n	801a976 <ip4_reass+0x322>
    goto nullreturn;
 801a968:	bf00      	nop
 801a96a:	e004      	b.n	801a976 <ip4_reass+0x322>
    goto nullreturn;
 801a96c:	bf00      	nop
 801a96e:	e002      	b.n	801a976 <ip4_reass+0x322>
      goto nullreturn;
 801a970:	bf00      	nop
 801a972:	e000      	b.n	801a976 <ip4_reass+0x322>
  }

nullreturn:
 801a974:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a976:	6878      	ldr	r0, [r7, #4]
 801a978:	f7f4 fb8e 	bl	800f098 <pbuf_free>
  return NULL;
 801a97c:	2300      	movs	r3, #0
}
 801a97e:	4618      	mov	r0, r3
 801a980:	3738      	adds	r7, #56	; 0x38
 801a982:	46bd      	mov	sp, r7
 801a984:	bd80      	pop	{r7, pc}
 801a986:	bf00      	nop
 801a988:	08021e90 	.word	0x08021e90
 801a98c:	0802201c 	.word	0x0802201c
 801a990:	08021ed8 	.word	0x08021ed8
 801a994:	20013e64 	.word	0x20013e64
 801a998:	08022028 	.word	0x08022028

0801a99c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a9a0:	2005      	movs	r0, #5
 801a9a2:	f7f3 fc85 	bl	800e2b0 <memp_malloc>
 801a9a6:	4603      	mov	r3, r0
}
 801a9a8:	4618      	mov	r0, r3
 801a9aa:	bd80      	pop	{r7, pc}

0801a9ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d106      	bne.n	801a9c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a9ba:	4b07      	ldr	r3, [pc, #28]	; (801a9d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a9bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a9c0:	4906      	ldr	r1, [pc, #24]	; (801a9dc <ip_frag_free_pbuf_custom_ref+0x30>)
 801a9c2:	4807      	ldr	r0, [pc, #28]	; (801a9e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 801a9c4:	f001 fa30 	bl	801be28 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a9c8:	6879      	ldr	r1, [r7, #4]
 801a9ca:	2005      	movs	r0, #5
 801a9cc:	f7f3 fcc2 	bl	800e354 <memp_free>
}
 801a9d0:	bf00      	nop
 801a9d2:	3708      	adds	r7, #8
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}
 801a9d8:	08021e90 	.word	0x08021e90
 801a9dc:	08022048 	.word	0x08022048
 801a9e0:	08021ed8 	.word	0x08021ed8

0801a9e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d106      	bne.n	801aa04 <ipfrag_free_pbuf_custom+0x20>
 801a9f6:	4b11      	ldr	r3, [pc, #68]	; (801aa3c <ipfrag_free_pbuf_custom+0x58>)
 801a9f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a9fc:	4910      	ldr	r1, [pc, #64]	; (801aa40 <ipfrag_free_pbuf_custom+0x5c>)
 801a9fe:	4811      	ldr	r0, [pc, #68]	; (801aa44 <ipfrag_free_pbuf_custom+0x60>)
 801aa00:	f001 fa12 	bl	801be28 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801aa04:	68fa      	ldr	r2, [r7, #12]
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	429a      	cmp	r2, r3
 801aa0a:	d006      	beq.n	801aa1a <ipfrag_free_pbuf_custom+0x36>
 801aa0c:	4b0b      	ldr	r3, [pc, #44]	; (801aa3c <ipfrag_free_pbuf_custom+0x58>)
 801aa0e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801aa12:	490d      	ldr	r1, [pc, #52]	; (801aa48 <ipfrag_free_pbuf_custom+0x64>)
 801aa14:	480b      	ldr	r0, [pc, #44]	; (801aa44 <ipfrag_free_pbuf_custom+0x60>)
 801aa16:	f001 fa07 	bl	801be28 <iprintf>
  if (pcr->original != NULL) {
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	695b      	ldr	r3, [r3, #20]
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d004      	beq.n	801aa2c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801aa22:	68fb      	ldr	r3, [r7, #12]
 801aa24:	695b      	ldr	r3, [r3, #20]
 801aa26:	4618      	mov	r0, r3
 801aa28:	f7f4 fb36 	bl	800f098 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801aa2c:	68f8      	ldr	r0, [r7, #12]
 801aa2e:	f7ff ffbd 	bl	801a9ac <ip_frag_free_pbuf_custom_ref>
}
 801aa32:	bf00      	nop
 801aa34:	3710      	adds	r7, #16
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	08021e90 	.word	0x08021e90
 801aa40:	08022054 	.word	0x08022054
 801aa44:	08021ed8 	.word	0x08021ed8
 801aa48:	08022060 	.word	0x08022060

0801aa4c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b094      	sub	sp, #80	; 0x50
 801aa50:	af02      	add	r7, sp, #8
 801aa52:	60f8      	str	r0, [r7, #12]
 801aa54:	60b9      	str	r1, [r7, #8]
 801aa56:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801aa58:	2300      	movs	r3, #0
 801aa5a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801aa5e:	68bb      	ldr	r3, [r7, #8]
 801aa60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801aa62:	3b14      	subs	r3, #20
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	da00      	bge.n	801aa6a <ip4_frag+0x1e>
 801aa68:	3307      	adds	r3, #7
 801aa6a:	10db      	asrs	r3, r3, #3
 801aa6c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801aa6e:	2314      	movs	r3, #20
 801aa70:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	685b      	ldr	r3, [r3, #4]
 801aa76:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa7a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	f003 030f 	and.w	r3, r3, #15
 801aa84:	b2db      	uxtb	r3, r3
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	b2db      	uxtb	r3, r3
 801aa8a:	2b14      	cmp	r3, #20
 801aa8c:	d002      	beq.n	801aa94 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801aa8e:	f06f 0305 	mvn.w	r3, #5
 801aa92:	e118      	b.n	801acc6 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	895b      	ldrh	r3, [r3, #10]
 801aa98:	2b13      	cmp	r3, #19
 801aa9a:	d809      	bhi.n	801aab0 <ip4_frag+0x64>
 801aa9c:	4b8c      	ldr	r3, [pc, #560]	; (801acd0 <ip4_frag+0x284>)
 801aa9e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801aaa2:	498c      	ldr	r1, [pc, #560]	; (801acd4 <ip4_frag+0x288>)
 801aaa4:	488c      	ldr	r0, [pc, #560]	; (801acd8 <ip4_frag+0x28c>)
 801aaa6:	f001 f9bf 	bl	801be28 <iprintf>
 801aaaa:	f06f 0305 	mvn.w	r3, #5
 801aaae:	e10a      	b.n	801acc6 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aab2:	88db      	ldrh	r3, [r3, #6]
 801aab4:	b29b      	uxth	r3, r3
 801aab6:	4618      	mov	r0, r3
 801aab8:	f7f2 fdcc 	bl	800d654 <lwip_htons>
 801aabc:	4603      	mov	r3, r0
 801aabe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801aac0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aac2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aac6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801aaca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801aacc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aad0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	891b      	ldrh	r3, [r3, #8]
 801aad6:	3b14      	subs	r3, #20
 801aad8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801aadc:	e0e9      	b.n	801acb2 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801aade:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801aae0:	00db      	lsls	r3, r3, #3
 801aae2:	b29b      	uxth	r3, r3
 801aae4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801aae8:	4293      	cmp	r3, r2
 801aaea:	bf28      	it	cs
 801aaec:	4613      	movcs	r3, r2
 801aaee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801aaf0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aaf4:	2114      	movs	r1, #20
 801aaf6:	200e      	movs	r0, #14
 801aaf8:	f7f3 ffe6 	bl	800eac8 <pbuf_alloc>
 801aafc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801aafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	f000 80dd 	beq.w	801acc0 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ab06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab08:	895b      	ldrh	r3, [r3, #10]
 801ab0a:	2b13      	cmp	r3, #19
 801ab0c:	d806      	bhi.n	801ab1c <ip4_frag+0xd0>
 801ab0e:	4b70      	ldr	r3, [pc, #448]	; (801acd0 <ip4_frag+0x284>)
 801ab10:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ab14:	4971      	ldr	r1, [pc, #452]	; (801acdc <ip4_frag+0x290>)
 801ab16:	4870      	ldr	r0, [pc, #448]	; (801acd8 <ip4_frag+0x28c>)
 801ab18:	f001 f986 	bl	801be28 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab1e:	685b      	ldr	r3, [r3, #4]
 801ab20:	2214      	movs	r2, #20
 801ab22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ab24:	4618      	mov	r0, r3
 801ab26:	f001 fba6 	bl	801c276 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab2c:	685b      	ldr	r3, [r3, #4]
 801ab2e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ab30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ab32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ab36:	e064      	b.n	801ac02 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	895a      	ldrh	r2, [r3, #10]
 801ab3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab3e:	1ad3      	subs	r3, r2, r3
 801ab40:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ab42:	68fb      	ldr	r3, [r7, #12]
 801ab44:	895b      	ldrh	r3, [r3, #10]
 801ab46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ab48:	429a      	cmp	r2, r3
 801ab4a:	d906      	bls.n	801ab5a <ip4_frag+0x10e>
 801ab4c:	4b60      	ldr	r3, [pc, #384]	; (801acd0 <ip4_frag+0x284>)
 801ab4e:	f240 322d 	movw	r2, #813	; 0x32d
 801ab52:	4963      	ldr	r1, [pc, #396]	; (801ace0 <ip4_frag+0x294>)
 801ab54:	4860      	ldr	r0, [pc, #384]	; (801acd8 <ip4_frag+0x28c>)
 801ab56:	f001 f967 	bl	801be28 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ab5a:	8bfa      	ldrh	r2, [r7, #30]
 801ab5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ab60:	4293      	cmp	r3, r2
 801ab62:	bf28      	it	cs
 801ab64:	4613      	movcs	r3, r2
 801ab66:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ab6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d105      	bne.n	801ab7e <ip4_frag+0x132>
        poff = 0;
 801ab72:	2300      	movs	r3, #0
 801ab74:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ab76:	68fb      	ldr	r3, [r7, #12]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	60fb      	str	r3, [r7, #12]
        continue;
 801ab7c:	e041      	b.n	801ac02 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ab7e:	f7ff ff0d 	bl	801a99c <ip_frag_alloc_pbuf_custom_ref>
 801ab82:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ab84:	69bb      	ldr	r3, [r7, #24]
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d103      	bne.n	801ab92 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ab8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ab8c:	f7f4 fa84 	bl	800f098 <pbuf_free>
        goto memerr;
 801ab90:	e097      	b.n	801acc2 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ab92:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ab98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ab9a:	4413      	add	r3, r2
 801ab9c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801aba0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801aba4:	9201      	str	r2, [sp, #4]
 801aba6:	9300      	str	r3, [sp, #0]
 801aba8:	4603      	mov	r3, r0
 801abaa:	2241      	movs	r2, #65	; 0x41
 801abac:	2000      	movs	r0, #0
 801abae:	f7f4 f8b9 	bl	800ed24 <pbuf_alloced_custom>
 801abb2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801abb4:	697b      	ldr	r3, [r7, #20]
 801abb6:	2b00      	cmp	r3, #0
 801abb8:	d106      	bne.n	801abc8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801abba:	69b8      	ldr	r0, [r7, #24]
 801abbc:	f7ff fef6 	bl	801a9ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801abc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abc2:	f7f4 fa69 	bl	800f098 <pbuf_free>
        goto memerr;
 801abc6:	e07c      	b.n	801acc2 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 801abc8:	68f8      	ldr	r0, [r7, #12]
 801abca:	f7f4 fb0b 	bl	800f1e4 <pbuf_ref>
      pcr->original = p;
 801abce:	69bb      	ldr	r3, [r7, #24]
 801abd0:	68fa      	ldr	r2, [r7, #12]
 801abd2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801abd4:	69bb      	ldr	r3, [r7, #24]
 801abd6:	4a43      	ldr	r2, [pc, #268]	; (801ace4 <ip4_frag+0x298>)
 801abd8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801abda:	6979      	ldr	r1, [r7, #20]
 801abdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801abde:	f7f4 fb29 	bl	800f234 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801abe2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801abe6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801abea:	1ad3      	subs	r3, r2, r3
 801abec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801abf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d004      	beq.n	801ac02 <ip4_frag+0x1b6>
        poff = 0;
 801abf8:	2300      	movs	r3, #0
 801abfa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801abfc:	68fb      	ldr	r3, [r7, #12]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ac02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ac06:	2b00      	cmp	r3, #0
 801ac08:	d196      	bne.n	801ab38 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ac0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ac0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ac10:	4413      	add	r3, r2
 801ac12:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ac14:	68bb      	ldr	r3, [r7, #8]
 801ac16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ac18:	f1a3 0213 	sub.w	r2, r3, #19
 801ac1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ac20:	429a      	cmp	r2, r3
 801ac22:	bfcc      	ite	gt
 801ac24:	2301      	movgt	r3, #1
 801ac26:	2300      	movle	r3, #0
 801ac28:	b2db      	uxtb	r3, r3
 801ac2a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ac2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ac30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ac36:	6a3b      	ldr	r3, [r7, #32]
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	d002      	beq.n	801ac42 <ip4_frag+0x1f6>
 801ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d003      	beq.n	801ac4a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ac42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ac48:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ac4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	f7f2 fd01 	bl	800d654 <lwip_htons>
 801ac52:	4603      	mov	r3, r0
 801ac54:	461a      	mov	r2, r3
 801ac56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac58:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ac5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ac5c:	3314      	adds	r3, #20
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	4618      	mov	r0, r3
 801ac62:	f7f2 fcf7 	bl	800d654 <lwip_htons>
 801ac66:	4603      	mov	r3, r0
 801ac68:	461a      	mov	r2, r3
 801ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac6c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac70:	2200      	movs	r2, #0
 801ac72:	729a      	strb	r2, [r3, #10]
 801ac74:	2200      	movs	r2, #0
 801ac76:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801ac78:	2114      	movs	r1, #20
 801ac7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac7c:	f7f2 fe32 	bl	800d8e4 <inet_chksum>
 801ac80:	4603      	mov	r3, r0
 801ac82:	461a      	mov	r2, r3
 801ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac86:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	695b      	ldr	r3, [r3, #20]
 801ac8c:	687a      	ldr	r2, [r7, #4]
 801ac8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ac90:	68b8      	ldr	r0, [r7, #8]
 801ac92:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ac94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ac96:	f7f4 f9ff 	bl	800f098 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ac9a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801aca6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801acaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801acac:	4413      	add	r3, r2
 801acae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801acb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	f47f af11 	bne.w	801aade <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801acbc:	2300      	movs	r3, #0
 801acbe:	e002      	b.n	801acc6 <ip4_frag+0x27a>
      goto memerr;
 801acc0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801acc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	3748      	adds	r7, #72	; 0x48
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}
 801acce:	bf00      	nop
 801acd0:	08021e90 	.word	0x08021e90
 801acd4:	0802206c 	.word	0x0802206c
 801acd8:	08021ed8 	.word	0x08021ed8
 801acdc:	08022088 	.word	0x08022088
 801ace0:	080220a8 	.word	0x080220a8
 801ace4:	0801a9e5 	.word	0x0801a9e5

0801ace8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b086      	sub	sp, #24
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
 801acf0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801acf2:	230e      	movs	r3, #14
 801acf4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	895b      	ldrh	r3, [r3, #10]
 801acfa:	2b0e      	cmp	r3, #14
 801acfc:	d96e      	bls.n	801addc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	7bdb      	ldrb	r3, [r3, #15]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d106      	bne.n	801ad14 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ad06:	683b      	ldr	r3, [r7, #0]
 801ad08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ad0c:	3301      	adds	r3, #1
 801ad0e:	b2da      	uxtb	r2, r3
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	685b      	ldr	r3, [r3, #4]
 801ad18:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ad1a:	693b      	ldr	r3, [r7, #16]
 801ad1c:	7b1a      	ldrb	r2, [r3, #12]
 801ad1e:	7b5b      	ldrb	r3, [r3, #13]
 801ad20:	021b      	lsls	r3, r3, #8
 801ad22:	4313      	orrs	r3, r2
 801ad24:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ad26:	693b      	ldr	r3, [r7, #16]
 801ad28:	781b      	ldrb	r3, [r3, #0]
 801ad2a:	f003 0301 	and.w	r3, r3, #1
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d023      	beq.n	801ad7a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ad32:	693b      	ldr	r3, [r7, #16]
 801ad34:	781b      	ldrb	r3, [r3, #0]
 801ad36:	2b01      	cmp	r3, #1
 801ad38:	d10f      	bne.n	801ad5a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad3a:	693b      	ldr	r3, [r7, #16]
 801ad3c:	785b      	ldrb	r3, [r3, #1]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d11b      	bne.n	801ad7a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ad42:	693b      	ldr	r3, [r7, #16]
 801ad44:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ad46:	2b5e      	cmp	r3, #94	; 0x5e
 801ad48:	d117      	bne.n	801ad7a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	7b5b      	ldrb	r3, [r3, #13]
 801ad4e:	f043 0310 	orr.w	r3, r3, #16
 801ad52:	b2da      	uxtb	r2, r3
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	735a      	strb	r2, [r3, #13]
 801ad58:	e00f      	b.n	801ad7a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	2206      	movs	r2, #6
 801ad5e:	4928      	ldr	r1, [pc, #160]	; (801ae00 <ethernet_input+0x118>)
 801ad60:	4618      	mov	r0, r3
 801ad62:	f001 f9bb 	bl	801c0dc <memcmp>
 801ad66:	4603      	mov	r3, r0
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d106      	bne.n	801ad7a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	7b5b      	ldrb	r3, [r3, #13]
 801ad70:	f043 0308 	orr.w	r3, r3, #8
 801ad74:	b2da      	uxtb	r2, r3
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ad7a:	89fb      	ldrh	r3, [r7, #14]
 801ad7c:	2b08      	cmp	r3, #8
 801ad7e:	d003      	beq.n	801ad88 <ethernet_input+0xa0>
 801ad80:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801ad84:	d014      	beq.n	801adb0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801ad86:	e032      	b.n	801adee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801ad88:	683b      	ldr	r3, [r7, #0]
 801ad8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ad8e:	f003 0308 	and.w	r3, r3, #8
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d024      	beq.n	801ade0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801ad96:	8afb      	ldrh	r3, [r7, #22]
 801ad98:	4619      	mov	r1, r3
 801ad9a:	6878      	ldr	r0, [r7, #4]
 801ad9c:	f7f4 f8f6 	bl	800ef8c <pbuf_remove_header>
 801ada0:	4603      	mov	r3, r0
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d11e      	bne.n	801ade4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801ada6:	6839      	ldr	r1, [r7, #0]
 801ada8:	6878      	ldr	r0, [r7, #4]
 801adaa:	f7fe fd57 	bl	801985c <ip4_input>
      break;
 801adae:	e013      	b.n	801add8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801adb0:	683b      	ldr	r3, [r7, #0]
 801adb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801adb6:	f003 0308 	and.w	r3, r3, #8
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d014      	beq.n	801ade8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801adbe:	8afb      	ldrh	r3, [r7, #22]
 801adc0:	4619      	mov	r1, r3
 801adc2:	6878      	ldr	r0, [r7, #4]
 801adc4:	f7f4 f8e2 	bl	800ef8c <pbuf_remove_header>
 801adc8:	4603      	mov	r3, r0
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d10e      	bne.n	801adec <ethernet_input+0x104>
        etharp_input(p, netif);
 801adce:	6839      	ldr	r1, [r7, #0]
 801add0:	6878      	ldr	r0, [r7, #4]
 801add2:	f7fd febf 	bl	8018b54 <etharp_input>
      break;
 801add6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801add8:	2300      	movs	r3, #0
 801adda:	e00c      	b.n	801adf6 <ethernet_input+0x10e>
    goto free_and_return;
 801addc:	bf00      	nop
 801adde:	e006      	b.n	801adee <ethernet_input+0x106>
        goto free_and_return;
 801ade0:	bf00      	nop
 801ade2:	e004      	b.n	801adee <ethernet_input+0x106>
        goto free_and_return;
 801ade4:	bf00      	nop
 801ade6:	e002      	b.n	801adee <ethernet_input+0x106>
        goto free_and_return;
 801ade8:	bf00      	nop
 801adea:	e000      	b.n	801adee <ethernet_input+0x106>
        goto free_and_return;
 801adec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801adee:	6878      	ldr	r0, [r7, #4]
 801adf0:	f7f4 f952 	bl	800f098 <pbuf_free>
  return ERR_OK;
 801adf4:	2300      	movs	r3, #0
}
 801adf6:	4618      	mov	r0, r3
 801adf8:	3718      	adds	r7, #24
 801adfa:	46bd      	mov	sp, r7
 801adfc:	bd80      	pop	{r7, pc}
 801adfe:	bf00      	nop
 801ae00:	0806df48 	.word	0x0806df48

0801ae04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ae04:	b580      	push	{r7, lr}
 801ae06:	b086      	sub	sp, #24
 801ae08:	af00      	add	r7, sp, #0
 801ae0a:	60f8      	str	r0, [r7, #12]
 801ae0c:	60b9      	str	r1, [r7, #8]
 801ae0e:	607a      	str	r2, [r7, #4]
 801ae10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ae12:	8c3b      	ldrh	r3, [r7, #32]
 801ae14:	4618      	mov	r0, r3
 801ae16:	f7f2 fc1d 	bl	800d654 <lwip_htons>
 801ae1a:	4603      	mov	r3, r0
 801ae1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ae1e:	210e      	movs	r1, #14
 801ae20:	68b8      	ldr	r0, [r7, #8]
 801ae22:	f7f4 f8a3 	bl	800ef6c <pbuf_add_header>
 801ae26:	4603      	mov	r3, r0
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d125      	bne.n	801ae78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ae2c:	68bb      	ldr	r3, [r7, #8]
 801ae2e:	685b      	ldr	r3, [r3, #4]
 801ae30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801ae32:	693b      	ldr	r3, [r7, #16]
 801ae34:	8afa      	ldrh	r2, [r7, #22]
 801ae36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ae38:	693b      	ldr	r3, [r7, #16]
 801ae3a:	2206      	movs	r2, #6
 801ae3c:	6839      	ldr	r1, [r7, #0]
 801ae3e:	4618      	mov	r0, r3
 801ae40:	f001 fa19 	bl	801c276 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ae44:	693b      	ldr	r3, [r7, #16]
 801ae46:	3306      	adds	r3, #6
 801ae48:	2206      	movs	r2, #6
 801ae4a:	6879      	ldr	r1, [r7, #4]
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f001 fa12 	bl	801c276 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae58:	2b06      	cmp	r3, #6
 801ae5a:	d006      	beq.n	801ae6a <ethernet_output+0x66>
 801ae5c:	4b0a      	ldr	r3, [pc, #40]	; (801ae88 <ethernet_output+0x84>)
 801ae5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ae62:	490a      	ldr	r1, [pc, #40]	; (801ae8c <ethernet_output+0x88>)
 801ae64:	480a      	ldr	r0, [pc, #40]	; (801ae90 <ethernet_output+0x8c>)
 801ae66:	f000 ffdf 	bl	801be28 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	699b      	ldr	r3, [r3, #24]
 801ae6e:	68b9      	ldr	r1, [r7, #8]
 801ae70:	68f8      	ldr	r0, [r7, #12]
 801ae72:	4798      	blx	r3
 801ae74:	4603      	mov	r3, r0
 801ae76:	e002      	b.n	801ae7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ae78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ae7a:	f06f 0301 	mvn.w	r3, #1
}
 801ae7e:	4618      	mov	r0, r3
 801ae80:	3718      	adds	r7, #24
 801ae82:	46bd      	mov	sp, r7
 801ae84:	bd80      	pop	{r7, pc}
 801ae86:	bf00      	nop
 801ae88:	080220b8 	.word	0x080220b8
 801ae8c:	080220f0 	.word	0x080220f0
 801ae90:	08022124 	.word	0x08022124

0801ae94 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b084      	sub	sp, #16
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
 801ae9c:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801ae9e:	683b      	ldr	r3, [r7, #0]
 801aea0:	60bb      	str	r3, [r7, #8]
 801aea2:	2304      	movs	r3, #4
 801aea4:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801aea6:	f107 0308 	add.w	r3, r7, #8
 801aeaa:	2100      	movs	r1, #0
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7ee febe 	bl	8009c2e <osMessageCreate>
 801aeb2:	4602      	mov	r2, r0
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d102      	bne.n	801aec6 <sys_mbox_new+0x32>
  return ERR_MEM;
 801aec0:	f04f 33ff 	mov.w	r3, #4294967295
 801aec4:	e000      	b.n	801aec8 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801aec6:	2300      	movs	r3, #0
}
 801aec8:	4618      	mov	r0, r3
 801aeca:	3710      	adds	r7, #16
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}

0801aed0 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b082      	sub	sp, #8
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	6078      	str	r0, [r7, #4]
 801aed8:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801aeda:	bf00      	nop
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	6839      	ldr	r1, [r7, #0]
 801aee2:	f04f 32ff 	mov.w	r2, #4294967295
 801aee6:	4618      	mov	r0, r3
 801aee8:	f7ee feb4 	bl	8009c54 <osMessagePut>
 801aeec:	4603      	mov	r3, r0
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d1f4      	bne.n	801aedc <sys_mbox_post+0xc>
}
 801aef2:	bf00      	nop
 801aef4:	bf00      	nop
 801aef6:	3708      	adds	r7, #8
 801aef8:	46bd      	mov	sp, r7
 801aefa:	bd80      	pop	{r7, pc}

0801aefc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b084      	sub	sp, #16
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]
 801af04:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	6839      	ldr	r1, [r7, #0]
 801af0c:	2200      	movs	r2, #0
 801af0e:	4618      	mov	r0, r3
 801af10:	f7ee fea0 	bl	8009c54 <osMessagePut>
 801af14:	4603      	mov	r3, r0
 801af16:	2b00      	cmp	r3, #0
 801af18:	d102      	bne.n	801af20 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801af1a:	2300      	movs	r3, #0
 801af1c:	73fb      	strb	r3, [r7, #15]
 801af1e:	e001      	b.n	801af24 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801af20:	23ff      	movs	r3, #255	; 0xff
 801af22:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801af24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801af28:	4618      	mov	r0, r3
 801af2a:	3710      	adds	r7, #16
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}

0801af30 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b08c      	sub	sp, #48	; 0x30
 801af34:	af00      	add	r7, sp, #0
 801af36:	61f8      	str	r0, [r7, #28]
 801af38:	61b9      	str	r1, [r7, #24]
 801af3a:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801af3c:	f7ee fd7b 	bl	8009a36 <osKernelSysTick>
 801af40:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 801af42:	697b      	ldr	r3, [r7, #20]
 801af44:	2b00      	cmp	r3, #0
 801af46:	d017      	beq.n	801af78 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801af48:	69fb      	ldr	r3, [r7, #28]
 801af4a:	6819      	ldr	r1, [r3, #0]
 801af4c:	f107 0320 	add.w	r3, r7, #32
 801af50:	697a      	ldr	r2, [r7, #20]
 801af52:	4618      	mov	r0, r3
 801af54:	f7ee fec0 	bl	8009cd8 <osMessageGet>
    
    if(event.status == osEventMessage)
 801af58:	6a3b      	ldr	r3, [r7, #32]
 801af5a:	2b10      	cmp	r3, #16
 801af5c:	d109      	bne.n	801af72 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af60:	461a      	mov	r2, r3
 801af62:	69bb      	ldr	r3, [r7, #24]
 801af64:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801af66:	f7ee fd66 	bl	8009a36 <osKernelSysTick>
 801af6a:	4602      	mov	r2, r0
 801af6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af6e:	1ad3      	subs	r3, r2, r3
 801af70:	e019      	b.n	801afa6 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801af72:	f04f 33ff 	mov.w	r3, #4294967295
 801af76:	e016      	b.n	801afa6 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801af78:	69fb      	ldr	r3, [r7, #28]
 801af7a:	6819      	ldr	r1, [r3, #0]
 801af7c:	463b      	mov	r3, r7
 801af7e:	f04f 32ff 	mov.w	r2, #4294967295
 801af82:	4618      	mov	r0, r3
 801af84:	f7ee fea8 	bl	8009cd8 <osMessageGet>
 801af88:	f107 0320 	add.w	r3, r7, #32
 801af8c:	463a      	mov	r2, r7
 801af8e:	ca07      	ldmia	r2, {r0, r1, r2}
 801af90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af96:	461a      	mov	r2, r3
 801af98:	69bb      	ldr	r3, [r7, #24]
 801af9a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801af9c:	f7ee fd4b 	bl	8009a36 <osKernelSysTick>
 801afa0:	4602      	mov	r2, r0
 801afa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801afa4:	1ad3      	subs	r3, r2, r3
  }
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	3730      	adds	r7, #48	; 0x30
 801afaa:	46bd      	mov	sp, r7
 801afac:	bd80      	pop	{r7, pc}

0801afae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801afae:	b480      	push	{r7}
 801afb0:	b083      	sub	sp, #12
 801afb2:	af00      	add	r7, sp, #0
 801afb4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d101      	bne.n	801afc2 <sys_mbox_valid+0x14>
    return 0;
 801afbe:	2300      	movs	r3, #0
 801afc0:	e000      	b.n	801afc4 <sys_mbox_valid+0x16>
  else
    return 1;
 801afc2:	2301      	movs	r3, #1
}                                             
 801afc4:	4618      	mov	r0, r3
 801afc6:	370c      	adds	r7, #12
 801afc8:	46bd      	mov	sp, r7
 801afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afce:	4770      	bx	lr

0801afd0 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801afd0:	b580      	push	{r7, lr}
 801afd2:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801afd4:	4803      	ldr	r0, [pc, #12]	; (801afe4 <sys_init+0x14>)
 801afd6:	f7ee fd86 	bl	8009ae6 <osMutexCreate>
 801afda:	4603      	mov	r3, r0
 801afdc:	4a02      	ldr	r2, [pc, #8]	; (801afe8 <sys_init+0x18>)
 801afde:	6013      	str	r3, [r2, #0]
}
 801afe0:	bf00      	nop
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	0806df58 	.word	0x0806df58
 801afe8:	20013e6c 	.word	0x20013e6c

0801afec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801afec:	b580      	push	{r7, lr}
 801afee:	b084      	sub	sp, #16
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801aff4:	2300      	movs	r3, #0
 801aff6:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801aff8:	f107 030c 	add.w	r3, r7, #12
 801affc:	4618      	mov	r0, r3
 801affe:	f7ee fd72 	bl	8009ae6 <osMutexCreate>
 801b002:	4602      	mov	r2, r0
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d102      	bne.n	801b016 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801b010:	f04f 33ff 	mov.w	r3, #4294967295
 801b014:	e000      	b.n	801b018 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b016:	2300      	movs	r3, #0
}
 801b018:	4618      	mov	r0, r3
 801b01a:	3710      	adds	r7, #16
 801b01c:	46bd      	mov	sp, r7
 801b01e:	bd80      	pop	{r7, pc}

0801b020 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b082      	sub	sp, #8
 801b024:	af00      	add	r7, sp, #0
 801b026:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	f04f 31ff 	mov.w	r1, #4294967295
 801b030:	4618      	mov	r0, r3
 801b032:	f7ee fd65 	bl	8009b00 <osMutexWait>
}
 801b036:	bf00      	nop
 801b038:	3708      	adds	r7, #8
 801b03a:	46bd      	mov	sp, r7
 801b03c:	bd80      	pop	{r7, pc}

0801b03e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b03e:	b580      	push	{r7, lr}
 801b040:	b082      	sub	sp, #8
 801b042:	af00      	add	r7, sp, #0
 801b044:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4618      	mov	r0, r3
 801b04c:	f7ee fda6 	bl	8009b9c <osMutexRelease>
}
 801b050:	bf00      	nop
 801b052:	3708      	adds	r7, #8
 801b054:	46bd      	mov	sp, r7
 801b056:	bd80      	pop	{r7, pc}

0801b058 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b058:	b580      	push	{r7, lr}
 801b05a:	b08a      	sub	sp, #40	; 0x28
 801b05c:	af00      	add	r7, sp, #0
 801b05e:	60f8      	str	r0, [r7, #12]
 801b060:	60b9      	str	r1, [r7, #8]
 801b062:	607a      	str	r2, [r7, #4]
 801b064:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b066:	68fb      	ldr	r3, [r7, #12]
 801b068:	617b      	str	r3, [r7, #20]
 801b06a:	68bb      	ldr	r3, [r7, #8]
 801b06c:	61bb      	str	r3, [r7, #24]
 801b06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b070:	b21b      	sxth	r3, r3
 801b072:	83bb      	strh	r3, [r7, #28]
 801b074:	2300      	movs	r3, #0
 801b076:	623b      	str	r3, [r7, #32]
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b07c:	f107 0314 	add.w	r3, r7, #20
 801b080:	6879      	ldr	r1, [r7, #4]
 801b082:	4618      	mov	r0, r3
 801b084:	f7ee fce7 	bl	8009a56 <osThreadCreate>
 801b088:	4603      	mov	r3, r0
}
 801b08a:	4618      	mov	r0, r3
 801b08c:	3728      	adds	r7, #40	; 0x28
 801b08e:	46bd      	mov	sp, r7
 801b090:	bd80      	pop	{r7, pc}
	...

0801b094 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b098:	4b04      	ldr	r3, [pc, #16]	; (801b0ac <sys_arch_protect+0x18>)
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f04f 31ff 	mov.w	r1, #4294967295
 801b0a0:	4618      	mov	r0, r3
 801b0a2:	f7ee fd2d 	bl	8009b00 <osMutexWait>
  return (sys_prot_t)1;
 801b0a6:	2301      	movs	r3, #1
}
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	bd80      	pop	{r7, pc}
 801b0ac:	20013e6c 	.word	0x20013e6c

0801b0b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b0b0:	b580      	push	{r7, lr}
 801b0b2:	b082      	sub	sp, #8
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b0b8:	4b04      	ldr	r3, [pc, #16]	; (801b0cc <sys_arch_unprotect+0x1c>)
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	4618      	mov	r0, r3
 801b0be:	f7ee fd6d 	bl	8009b9c <osMutexRelease>
}
 801b0c2:	bf00      	nop
 801b0c4:	3708      	adds	r7, #8
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}
 801b0ca:	bf00      	nop
 801b0cc:	20013e6c 	.word	0x20013e6c

0801b0d0 <_calloc_r>:
 801b0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b0d2:	fba1 2402 	umull	r2, r4, r1, r2
 801b0d6:	b94c      	cbnz	r4, 801b0ec <_calloc_r+0x1c>
 801b0d8:	4611      	mov	r1, r2
 801b0da:	9201      	str	r2, [sp, #4]
 801b0dc:	f000 f836 	bl	801b14c <_malloc_r>
 801b0e0:	9a01      	ldr	r2, [sp, #4]
 801b0e2:	4605      	mov	r5, r0
 801b0e4:	b930      	cbnz	r0, 801b0f4 <_calloc_r+0x24>
 801b0e6:	4628      	mov	r0, r5
 801b0e8:	b003      	add	sp, #12
 801b0ea:	bd30      	pop	{r4, r5, pc}
 801b0ec:	220c      	movs	r2, #12
 801b0ee:	6002      	str	r2, [r0, #0]
 801b0f0:	2500      	movs	r5, #0
 801b0f2:	e7f8      	b.n	801b0e6 <_calloc_r+0x16>
 801b0f4:	4621      	mov	r1, r4
 801b0f6:	f001 f801 	bl	801c0fc <memset>
 801b0fa:	e7f4      	b.n	801b0e6 <_calloc_r+0x16>

0801b0fc <malloc>:
 801b0fc:	4b02      	ldr	r3, [pc, #8]	; (801b108 <malloc+0xc>)
 801b0fe:	4601      	mov	r1, r0
 801b100:	6818      	ldr	r0, [r3, #0]
 801b102:	f000 b823 	b.w	801b14c <_malloc_r>
 801b106:	bf00      	nop
 801b108:	20000120 	.word	0x20000120

0801b10c <sbrk_aligned>:
 801b10c:	b570      	push	{r4, r5, r6, lr}
 801b10e:	4e0e      	ldr	r6, [pc, #56]	; (801b148 <sbrk_aligned+0x3c>)
 801b110:	460c      	mov	r4, r1
 801b112:	6831      	ldr	r1, [r6, #0]
 801b114:	4605      	mov	r5, r0
 801b116:	b911      	cbnz	r1, 801b11e <sbrk_aligned+0x12>
 801b118:	f001 f856 	bl	801c1c8 <_sbrk_r>
 801b11c:	6030      	str	r0, [r6, #0]
 801b11e:	4621      	mov	r1, r4
 801b120:	4628      	mov	r0, r5
 801b122:	f001 f851 	bl	801c1c8 <_sbrk_r>
 801b126:	1c43      	adds	r3, r0, #1
 801b128:	d00a      	beq.n	801b140 <sbrk_aligned+0x34>
 801b12a:	1cc4      	adds	r4, r0, #3
 801b12c:	f024 0403 	bic.w	r4, r4, #3
 801b130:	42a0      	cmp	r0, r4
 801b132:	d007      	beq.n	801b144 <sbrk_aligned+0x38>
 801b134:	1a21      	subs	r1, r4, r0
 801b136:	4628      	mov	r0, r5
 801b138:	f001 f846 	bl	801c1c8 <_sbrk_r>
 801b13c:	3001      	adds	r0, #1
 801b13e:	d101      	bne.n	801b144 <sbrk_aligned+0x38>
 801b140:	f04f 34ff 	mov.w	r4, #4294967295
 801b144:	4620      	mov	r0, r4
 801b146:	bd70      	pop	{r4, r5, r6, pc}
 801b148:	20013e74 	.word	0x20013e74

0801b14c <_malloc_r>:
 801b14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b150:	1ccd      	adds	r5, r1, #3
 801b152:	f025 0503 	bic.w	r5, r5, #3
 801b156:	3508      	adds	r5, #8
 801b158:	2d0c      	cmp	r5, #12
 801b15a:	bf38      	it	cc
 801b15c:	250c      	movcc	r5, #12
 801b15e:	2d00      	cmp	r5, #0
 801b160:	4607      	mov	r7, r0
 801b162:	db01      	blt.n	801b168 <_malloc_r+0x1c>
 801b164:	42a9      	cmp	r1, r5
 801b166:	d905      	bls.n	801b174 <_malloc_r+0x28>
 801b168:	230c      	movs	r3, #12
 801b16a:	603b      	str	r3, [r7, #0]
 801b16c:	2600      	movs	r6, #0
 801b16e:	4630      	mov	r0, r6
 801b170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b248 <_malloc_r+0xfc>
 801b178:	f000 f868 	bl	801b24c <__malloc_lock>
 801b17c:	f8d8 3000 	ldr.w	r3, [r8]
 801b180:	461c      	mov	r4, r3
 801b182:	bb5c      	cbnz	r4, 801b1dc <_malloc_r+0x90>
 801b184:	4629      	mov	r1, r5
 801b186:	4638      	mov	r0, r7
 801b188:	f7ff ffc0 	bl	801b10c <sbrk_aligned>
 801b18c:	1c43      	adds	r3, r0, #1
 801b18e:	4604      	mov	r4, r0
 801b190:	d155      	bne.n	801b23e <_malloc_r+0xf2>
 801b192:	f8d8 4000 	ldr.w	r4, [r8]
 801b196:	4626      	mov	r6, r4
 801b198:	2e00      	cmp	r6, #0
 801b19a:	d145      	bne.n	801b228 <_malloc_r+0xdc>
 801b19c:	2c00      	cmp	r4, #0
 801b19e:	d048      	beq.n	801b232 <_malloc_r+0xe6>
 801b1a0:	6823      	ldr	r3, [r4, #0]
 801b1a2:	4631      	mov	r1, r6
 801b1a4:	4638      	mov	r0, r7
 801b1a6:	eb04 0903 	add.w	r9, r4, r3
 801b1aa:	f001 f80d 	bl	801c1c8 <_sbrk_r>
 801b1ae:	4581      	cmp	r9, r0
 801b1b0:	d13f      	bne.n	801b232 <_malloc_r+0xe6>
 801b1b2:	6821      	ldr	r1, [r4, #0]
 801b1b4:	1a6d      	subs	r5, r5, r1
 801b1b6:	4629      	mov	r1, r5
 801b1b8:	4638      	mov	r0, r7
 801b1ba:	f7ff ffa7 	bl	801b10c <sbrk_aligned>
 801b1be:	3001      	adds	r0, #1
 801b1c0:	d037      	beq.n	801b232 <_malloc_r+0xe6>
 801b1c2:	6823      	ldr	r3, [r4, #0]
 801b1c4:	442b      	add	r3, r5
 801b1c6:	6023      	str	r3, [r4, #0]
 801b1c8:	f8d8 3000 	ldr.w	r3, [r8]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d038      	beq.n	801b242 <_malloc_r+0xf6>
 801b1d0:	685a      	ldr	r2, [r3, #4]
 801b1d2:	42a2      	cmp	r2, r4
 801b1d4:	d12b      	bne.n	801b22e <_malloc_r+0xe2>
 801b1d6:	2200      	movs	r2, #0
 801b1d8:	605a      	str	r2, [r3, #4]
 801b1da:	e00f      	b.n	801b1fc <_malloc_r+0xb0>
 801b1dc:	6822      	ldr	r2, [r4, #0]
 801b1de:	1b52      	subs	r2, r2, r5
 801b1e0:	d41f      	bmi.n	801b222 <_malloc_r+0xd6>
 801b1e2:	2a0b      	cmp	r2, #11
 801b1e4:	d917      	bls.n	801b216 <_malloc_r+0xca>
 801b1e6:	1961      	adds	r1, r4, r5
 801b1e8:	42a3      	cmp	r3, r4
 801b1ea:	6025      	str	r5, [r4, #0]
 801b1ec:	bf18      	it	ne
 801b1ee:	6059      	strne	r1, [r3, #4]
 801b1f0:	6863      	ldr	r3, [r4, #4]
 801b1f2:	bf08      	it	eq
 801b1f4:	f8c8 1000 	streq.w	r1, [r8]
 801b1f8:	5162      	str	r2, [r4, r5]
 801b1fa:	604b      	str	r3, [r1, #4]
 801b1fc:	4638      	mov	r0, r7
 801b1fe:	f104 060b 	add.w	r6, r4, #11
 801b202:	f000 f829 	bl	801b258 <__malloc_unlock>
 801b206:	f026 0607 	bic.w	r6, r6, #7
 801b20a:	1d23      	adds	r3, r4, #4
 801b20c:	1af2      	subs	r2, r6, r3
 801b20e:	d0ae      	beq.n	801b16e <_malloc_r+0x22>
 801b210:	1b9b      	subs	r3, r3, r6
 801b212:	50a3      	str	r3, [r4, r2]
 801b214:	e7ab      	b.n	801b16e <_malloc_r+0x22>
 801b216:	42a3      	cmp	r3, r4
 801b218:	6862      	ldr	r2, [r4, #4]
 801b21a:	d1dd      	bne.n	801b1d8 <_malloc_r+0x8c>
 801b21c:	f8c8 2000 	str.w	r2, [r8]
 801b220:	e7ec      	b.n	801b1fc <_malloc_r+0xb0>
 801b222:	4623      	mov	r3, r4
 801b224:	6864      	ldr	r4, [r4, #4]
 801b226:	e7ac      	b.n	801b182 <_malloc_r+0x36>
 801b228:	4634      	mov	r4, r6
 801b22a:	6876      	ldr	r6, [r6, #4]
 801b22c:	e7b4      	b.n	801b198 <_malloc_r+0x4c>
 801b22e:	4613      	mov	r3, r2
 801b230:	e7cc      	b.n	801b1cc <_malloc_r+0x80>
 801b232:	230c      	movs	r3, #12
 801b234:	603b      	str	r3, [r7, #0]
 801b236:	4638      	mov	r0, r7
 801b238:	f000 f80e 	bl	801b258 <__malloc_unlock>
 801b23c:	e797      	b.n	801b16e <_malloc_r+0x22>
 801b23e:	6025      	str	r5, [r4, #0]
 801b240:	e7dc      	b.n	801b1fc <_malloc_r+0xb0>
 801b242:	605b      	str	r3, [r3, #4]
 801b244:	deff      	udf	#255	; 0xff
 801b246:	bf00      	nop
 801b248:	20013e70 	.word	0x20013e70

0801b24c <__malloc_lock>:
 801b24c:	4801      	ldr	r0, [pc, #4]	; (801b254 <__malloc_lock+0x8>)
 801b24e:	f001 b808 	b.w	801c262 <__retarget_lock_acquire_recursive>
 801b252:	bf00      	nop
 801b254:	20013fb8 	.word	0x20013fb8

0801b258 <__malloc_unlock>:
 801b258:	4801      	ldr	r0, [pc, #4]	; (801b260 <__malloc_unlock+0x8>)
 801b25a:	f001 b803 	b.w	801c264 <__retarget_lock_release_recursive>
 801b25e:	bf00      	nop
 801b260:	20013fb8 	.word	0x20013fb8

0801b264 <rand>:
 801b264:	4b16      	ldr	r3, [pc, #88]	; (801b2c0 <rand+0x5c>)
 801b266:	b510      	push	{r4, lr}
 801b268:	681c      	ldr	r4, [r3, #0]
 801b26a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801b26c:	b9b3      	cbnz	r3, 801b29c <rand+0x38>
 801b26e:	2018      	movs	r0, #24
 801b270:	f7ff ff44 	bl	801b0fc <malloc>
 801b274:	4602      	mov	r2, r0
 801b276:	6320      	str	r0, [r4, #48]	; 0x30
 801b278:	b920      	cbnz	r0, 801b284 <rand+0x20>
 801b27a:	4b12      	ldr	r3, [pc, #72]	; (801b2c4 <rand+0x60>)
 801b27c:	4812      	ldr	r0, [pc, #72]	; (801b2c8 <rand+0x64>)
 801b27e:	2152      	movs	r1, #82	; 0x52
 801b280:	f001 f808 	bl	801c294 <__assert_func>
 801b284:	4911      	ldr	r1, [pc, #68]	; (801b2cc <rand+0x68>)
 801b286:	4b12      	ldr	r3, [pc, #72]	; (801b2d0 <rand+0x6c>)
 801b288:	e9c0 1300 	strd	r1, r3, [r0]
 801b28c:	4b11      	ldr	r3, [pc, #68]	; (801b2d4 <rand+0x70>)
 801b28e:	6083      	str	r3, [r0, #8]
 801b290:	230b      	movs	r3, #11
 801b292:	8183      	strh	r3, [r0, #12]
 801b294:	2100      	movs	r1, #0
 801b296:	2001      	movs	r0, #1
 801b298:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b29c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b29e:	480e      	ldr	r0, [pc, #56]	; (801b2d8 <rand+0x74>)
 801b2a0:	690b      	ldr	r3, [r1, #16]
 801b2a2:	694c      	ldr	r4, [r1, #20]
 801b2a4:	4a0d      	ldr	r2, [pc, #52]	; (801b2dc <rand+0x78>)
 801b2a6:	4358      	muls	r0, r3
 801b2a8:	fb02 0004 	mla	r0, r2, r4, r0
 801b2ac:	fba3 3202 	umull	r3, r2, r3, r2
 801b2b0:	3301      	adds	r3, #1
 801b2b2:	eb40 0002 	adc.w	r0, r0, r2
 801b2b6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b2ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b2be:	bd10      	pop	{r4, pc}
 801b2c0:	20000120 	.word	0x20000120
 801b2c4:	0806df5c 	.word	0x0806df5c
 801b2c8:	0806df73 	.word	0x0806df73
 801b2cc:	abcd330e 	.word	0xabcd330e
 801b2d0:	e66d1234 	.word	0xe66d1234
 801b2d4:	0005deec 	.word	0x0005deec
 801b2d8:	5851f42d 	.word	0x5851f42d
 801b2dc:	4c957f2d 	.word	0x4c957f2d

0801b2e0 <_strtoul_l.constprop.0>:
 801b2e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2e4:	4f36      	ldr	r7, [pc, #216]	; (801b3c0 <_strtoul_l.constprop.0+0xe0>)
 801b2e6:	4686      	mov	lr, r0
 801b2e8:	460d      	mov	r5, r1
 801b2ea:	4628      	mov	r0, r5
 801b2ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b2f0:	5d3e      	ldrb	r6, [r7, r4]
 801b2f2:	f016 0608 	ands.w	r6, r6, #8
 801b2f6:	d1f8      	bne.n	801b2ea <_strtoul_l.constprop.0+0xa>
 801b2f8:	2c2d      	cmp	r4, #45	; 0x2d
 801b2fa:	d130      	bne.n	801b35e <_strtoul_l.constprop.0+0x7e>
 801b2fc:	782c      	ldrb	r4, [r5, #0]
 801b2fe:	2601      	movs	r6, #1
 801b300:	1c85      	adds	r5, r0, #2
 801b302:	2b00      	cmp	r3, #0
 801b304:	d057      	beq.n	801b3b6 <_strtoul_l.constprop.0+0xd6>
 801b306:	2b10      	cmp	r3, #16
 801b308:	d109      	bne.n	801b31e <_strtoul_l.constprop.0+0x3e>
 801b30a:	2c30      	cmp	r4, #48	; 0x30
 801b30c:	d107      	bne.n	801b31e <_strtoul_l.constprop.0+0x3e>
 801b30e:	7828      	ldrb	r0, [r5, #0]
 801b310:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b314:	2858      	cmp	r0, #88	; 0x58
 801b316:	d149      	bne.n	801b3ac <_strtoul_l.constprop.0+0xcc>
 801b318:	786c      	ldrb	r4, [r5, #1]
 801b31a:	2310      	movs	r3, #16
 801b31c:	3502      	adds	r5, #2
 801b31e:	f04f 38ff 	mov.w	r8, #4294967295
 801b322:	2700      	movs	r7, #0
 801b324:	fbb8 f8f3 	udiv	r8, r8, r3
 801b328:	fb03 f908 	mul.w	r9, r3, r8
 801b32c:	ea6f 0909 	mvn.w	r9, r9
 801b330:	4638      	mov	r0, r7
 801b332:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b336:	f1bc 0f09 	cmp.w	ip, #9
 801b33a:	d815      	bhi.n	801b368 <_strtoul_l.constprop.0+0x88>
 801b33c:	4664      	mov	r4, ip
 801b33e:	42a3      	cmp	r3, r4
 801b340:	dd23      	ble.n	801b38a <_strtoul_l.constprop.0+0xaa>
 801b342:	f1b7 3fff 	cmp.w	r7, #4294967295
 801b346:	d007      	beq.n	801b358 <_strtoul_l.constprop.0+0x78>
 801b348:	4580      	cmp	r8, r0
 801b34a:	d31b      	bcc.n	801b384 <_strtoul_l.constprop.0+0xa4>
 801b34c:	d101      	bne.n	801b352 <_strtoul_l.constprop.0+0x72>
 801b34e:	45a1      	cmp	r9, r4
 801b350:	db18      	blt.n	801b384 <_strtoul_l.constprop.0+0xa4>
 801b352:	fb00 4003 	mla	r0, r0, r3, r4
 801b356:	2701      	movs	r7, #1
 801b358:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b35c:	e7e9      	b.n	801b332 <_strtoul_l.constprop.0+0x52>
 801b35e:	2c2b      	cmp	r4, #43	; 0x2b
 801b360:	bf04      	itt	eq
 801b362:	782c      	ldrbeq	r4, [r5, #0]
 801b364:	1c85      	addeq	r5, r0, #2
 801b366:	e7cc      	b.n	801b302 <_strtoul_l.constprop.0+0x22>
 801b368:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b36c:	f1bc 0f19 	cmp.w	ip, #25
 801b370:	d801      	bhi.n	801b376 <_strtoul_l.constprop.0+0x96>
 801b372:	3c37      	subs	r4, #55	; 0x37
 801b374:	e7e3      	b.n	801b33e <_strtoul_l.constprop.0+0x5e>
 801b376:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b37a:	f1bc 0f19 	cmp.w	ip, #25
 801b37e:	d804      	bhi.n	801b38a <_strtoul_l.constprop.0+0xaa>
 801b380:	3c57      	subs	r4, #87	; 0x57
 801b382:	e7dc      	b.n	801b33e <_strtoul_l.constprop.0+0x5e>
 801b384:	f04f 37ff 	mov.w	r7, #4294967295
 801b388:	e7e6      	b.n	801b358 <_strtoul_l.constprop.0+0x78>
 801b38a:	1c7b      	adds	r3, r7, #1
 801b38c:	d106      	bne.n	801b39c <_strtoul_l.constprop.0+0xbc>
 801b38e:	2322      	movs	r3, #34	; 0x22
 801b390:	f8ce 3000 	str.w	r3, [lr]
 801b394:	4638      	mov	r0, r7
 801b396:	b932      	cbnz	r2, 801b3a6 <_strtoul_l.constprop.0+0xc6>
 801b398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b39c:	b106      	cbz	r6, 801b3a0 <_strtoul_l.constprop.0+0xc0>
 801b39e:	4240      	negs	r0, r0
 801b3a0:	2a00      	cmp	r2, #0
 801b3a2:	d0f9      	beq.n	801b398 <_strtoul_l.constprop.0+0xb8>
 801b3a4:	b107      	cbz	r7, 801b3a8 <_strtoul_l.constprop.0+0xc8>
 801b3a6:	1e69      	subs	r1, r5, #1
 801b3a8:	6011      	str	r1, [r2, #0]
 801b3aa:	e7f5      	b.n	801b398 <_strtoul_l.constprop.0+0xb8>
 801b3ac:	2430      	movs	r4, #48	; 0x30
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d1b5      	bne.n	801b31e <_strtoul_l.constprop.0+0x3e>
 801b3b2:	2308      	movs	r3, #8
 801b3b4:	e7b3      	b.n	801b31e <_strtoul_l.constprop.0+0x3e>
 801b3b6:	2c30      	cmp	r4, #48	; 0x30
 801b3b8:	d0a9      	beq.n	801b30e <_strtoul_l.constprop.0+0x2e>
 801b3ba:	230a      	movs	r3, #10
 801b3bc:	e7af      	b.n	801b31e <_strtoul_l.constprop.0+0x3e>
 801b3be:	bf00      	nop
 801b3c0:	0806dfcc 	.word	0x0806dfcc

0801b3c4 <strtoul>:
 801b3c4:	4613      	mov	r3, r2
 801b3c6:	460a      	mov	r2, r1
 801b3c8:	4601      	mov	r1, r0
 801b3ca:	4802      	ldr	r0, [pc, #8]	; (801b3d4 <strtoul+0x10>)
 801b3cc:	6800      	ldr	r0, [r0, #0]
 801b3ce:	f7ff bf87 	b.w	801b2e0 <_strtoul_l.constprop.0>
 801b3d2:	bf00      	nop
 801b3d4:	20000120 	.word	0x20000120

0801b3d8 <__cvt>:
 801b3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b3dc:	ec55 4b10 	vmov	r4, r5, d0
 801b3e0:	2d00      	cmp	r5, #0
 801b3e2:	460e      	mov	r6, r1
 801b3e4:	4619      	mov	r1, r3
 801b3e6:	462b      	mov	r3, r5
 801b3e8:	bfbb      	ittet	lt
 801b3ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801b3ee:	461d      	movlt	r5, r3
 801b3f0:	2300      	movge	r3, #0
 801b3f2:	232d      	movlt	r3, #45	; 0x2d
 801b3f4:	700b      	strb	r3, [r1, #0]
 801b3f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b3f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801b3fc:	4691      	mov	r9, r2
 801b3fe:	f023 0820 	bic.w	r8, r3, #32
 801b402:	bfbc      	itt	lt
 801b404:	4622      	movlt	r2, r4
 801b406:	4614      	movlt	r4, r2
 801b408:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b40c:	d005      	beq.n	801b41a <__cvt+0x42>
 801b40e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801b412:	d100      	bne.n	801b416 <__cvt+0x3e>
 801b414:	3601      	adds	r6, #1
 801b416:	2102      	movs	r1, #2
 801b418:	e000      	b.n	801b41c <__cvt+0x44>
 801b41a:	2103      	movs	r1, #3
 801b41c:	ab03      	add	r3, sp, #12
 801b41e:	9301      	str	r3, [sp, #4]
 801b420:	ab02      	add	r3, sp, #8
 801b422:	9300      	str	r3, [sp, #0]
 801b424:	ec45 4b10 	vmov	d0, r4, r5
 801b428:	4653      	mov	r3, sl
 801b42a:	4632      	mov	r2, r6
 801b42c:	f000 ffd8 	bl	801c3e0 <_dtoa_r>
 801b430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801b434:	4607      	mov	r7, r0
 801b436:	d102      	bne.n	801b43e <__cvt+0x66>
 801b438:	f019 0f01 	tst.w	r9, #1
 801b43c:	d022      	beq.n	801b484 <__cvt+0xac>
 801b43e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801b442:	eb07 0906 	add.w	r9, r7, r6
 801b446:	d110      	bne.n	801b46a <__cvt+0x92>
 801b448:	783b      	ldrb	r3, [r7, #0]
 801b44a:	2b30      	cmp	r3, #48	; 0x30
 801b44c:	d10a      	bne.n	801b464 <__cvt+0x8c>
 801b44e:	2200      	movs	r2, #0
 801b450:	2300      	movs	r3, #0
 801b452:	4620      	mov	r0, r4
 801b454:	4629      	mov	r1, r5
 801b456:	f7e5 fb4f 	bl	8000af8 <__aeabi_dcmpeq>
 801b45a:	b918      	cbnz	r0, 801b464 <__cvt+0x8c>
 801b45c:	f1c6 0601 	rsb	r6, r6, #1
 801b460:	f8ca 6000 	str.w	r6, [sl]
 801b464:	f8da 3000 	ldr.w	r3, [sl]
 801b468:	4499      	add	r9, r3
 801b46a:	2200      	movs	r2, #0
 801b46c:	2300      	movs	r3, #0
 801b46e:	4620      	mov	r0, r4
 801b470:	4629      	mov	r1, r5
 801b472:	f7e5 fb41 	bl	8000af8 <__aeabi_dcmpeq>
 801b476:	b108      	cbz	r0, 801b47c <__cvt+0xa4>
 801b478:	f8cd 900c 	str.w	r9, [sp, #12]
 801b47c:	2230      	movs	r2, #48	; 0x30
 801b47e:	9b03      	ldr	r3, [sp, #12]
 801b480:	454b      	cmp	r3, r9
 801b482:	d307      	bcc.n	801b494 <__cvt+0xbc>
 801b484:	9b03      	ldr	r3, [sp, #12]
 801b486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b488:	1bdb      	subs	r3, r3, r7
 801b48a:	4638      	mov	r0, r7
 801b48c:	6013      	str	r3, [r2, #0]
 801b48e:	b004      	add	sp, #16
 801b490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b494:	1c59      	adds	r1, r3, #1
 801b496:	9103      	str	r1, [sp, #12]
 801b498:	701a      	strb	r2, [r3, #0]
 801b49a:	e7f0      	b.n	801b47e <__cvt+0xa6>

0801b49c <__exponent>:
 801b49c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b49e:	4603      	mov	r3, r0
 801b4a0:	2900      	cmp	r1, #0
 801b4a2:	bfb8      	it	lt
 801b4a4:	4249      	neglt	r1, r1
 801b4a6:	f803 2b02 	strb.w	r2, [r3], #2
 801b4aa:	bfb4      	ite	lt
 801b4ac:	222d      	movlt	r2, #45	; 0x2d
 801b4ae:	222b      	movge	r2, #43	; 0x2b
 801b4b0:	2909      	cmp	r1, #9
 801b4b2:	7042      	strb	r2, [r0, #1]
 801b4b4:	dd2a      	ble.n	801b50c <__exponent+0x70>
 801b4b6:	f10d 0207 	add.w	r2, sp, #7
 801b4ba:	4617      	mov	r7, r2
 801b4bc:	260a      	movs	r6, #10
 801b4be:	4694      	mov	ip, r2
 801b4c0:	fb91 f5f6 	sdiv	r5, r1, r6
 801b4c4:	fb06 1415 	mls	r4, r6, r5, r1
 801b4c8:	3430      	adds	r4, #48	; 0x30
 801b4ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801b4ce:	460c      	mov	r4, r1
 801b4d0:	2c63      	cmp	r4, #99	; 0x63
 801b4d2:	f102 32ff 	add.w	r2, r2, #4294967295
 801b4d6:	4629      	mov	r1, r5
 801b4d8:	dcf1      	bgt.n	801b4be <__exponent+0x22>
 801b4da:	3130      	adds	r1, #48	; 0x30
 801b4dc:	f1ac 0402 	sub.w	r4, ip, #2
 801b4e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 801b4e4:	1c41      	adds	r1, r0, #1
 801b4e6:	4622      	mov	r2, r4
 801b4e8:	42ba      	cmp	r2, r7
 801b4ea:	d30a      	bcc.n	801b502 <__exponent+0x66>
 801b4ec:	f10d 0209 	add.w	r2, sp, #9
 801b4f0:	eba2 020c 	sub.w	r2, r2, ip
 801b4f4:	42bc      	cmp	r4, r7
 801b4f6:	bf88      	it	hi
 801b4f8:	2200      	movhi	r2, #0
 801b4fa:	4413      	add	r3, r2
 801b4fc:	1a18      	subs	r0, r3, r0
 801b4fe:	b003      	add	sp, #12
 801b500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b502:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b506:	f801 5f01 	strb.w	r5, [r1, #1]!
 801b50a:	e7ed      	b.n	801b4e8 <__exponent+0x4c>
 801b50c:	2330      	movs	r3, #48	; 0x30
 801b50e:	3130      	adds	r1, #48	; 0x30
 801b510:	7083      	strb	r3, [r0, #2]
 801b512:	70c1      	strb	r1, [r0, #3]
 801b514:	1d03      	adds	r3, r0, #4
 801b516:	e7f1      	b.n	801b4fc <__exponent+0x60>

0801b518 <_printf_float>:
 801b518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b51c:	ed2d 8b02 	vpush	{d8}
 801b520:	b08d      	sub	sp, #52	; 0x34
 801b522:	460c      	mov	r4, r1
 801b524:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801b528:	4616      	mov	r6, r2
 801b52a:	461f      	mov	r7, r3
 801b52c:	4605      	mov	r5, r0
 801b52e:	f000 fe13 	bl	801c158 <_localeconv_r>
 801b532:	f8d0 a000 	ldr.w	sl, [r0]
 801b536:	4650      	mov	r0, sl
 801b538:	f7e4 feb2 	bl	80002a0 <strlen>
 801b53c:	2300      	movs	r3, #0
 801b53e:	930a      	str	r3, [sp, #40]	; 0x28
 801b540:	6823      	ldr	r3, [r4, #0]
 801b542:	9305      	str	r3, [sp, #20]
 801b544:	f8d8 3000 	ldr.w	r3, [r8]
 801b548:	f894 b018 	ldrb.w	fp, [r4, #24]
 801b54c:	3307      	adds	r3, #7
 801b54e:	f023 0307 	bic.w	r3, r3, #7
 801b552:	f103 0208 	add.w	r2, r3, #8
 801b556:	f8c8 2000 	str.w	r2, [r8]
 801b55a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b55e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b562:	9307      	str	r3, [sp, #28]
 801b564:	f8cd 8018 	str.w	r8, [sp, #24]
 801b568:	ee08 0a10 	vmov	s16, r0
 801b56c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801b570:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b574:	4b9e      	ldr	r3, [pc, #632]	; (801b7f0 <_printf_float+0x2d8>)
 801b576:	f04f 32ff 	mov.w	r2, #4294967295
 801b57a:	f7e5 faef 	bl	8000b5c <__aeabi_dcmpun>
 801b57e:	bb88      	cbnz	r0, 801b5e4 <_printf_float+0xcc>
 801b580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b584:	4b9a      	ldr	r3, [pc, #616]	; (801b7f0 <_printf_float+0x2d8>)
 801b586:	f04f 32ff 	mov.w	r2, #4294967295
 801b58a:	f7e5 fac9 	bl	8000b20 <__aeabi_dcmple>
 801b58e:	bb48      	cbnz	r0, 801b5e4 <_printf_float+0xcc>
 801b590:	2200      	movs	r2, #0
 801b592:	2300      	movs	r3, #0
 801b594:	4640      	mov	r0, r8
 801b596:	4649      	mov	r1, r9
 801b598:	f7e5 fab8 	bl	8000b0c <__aeabi_dcmplt>
 801b59c:	b110      	cbz	r0, 801b5a4 <_printf_float+0x8c>
 801b59e:	232d      	movs	r3, #45	; 0x2d
 801b5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5a4:	4a93      	ldr	r2, [pc, #588]	; (801b7f4 <_printf_float+0x2dc>)
 801b5a6:	4b94      	ldr	r3, [pc, #592]	; (801b7f8 <_printf_float+0x2e0>)
 801b5a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b5ac:	bf94      	ite	ls
 801b5ae:	4690      	movls	r8, r2
 801b5b0:	4698      	movhi	r8, r3
 801b5b2:	2303      	movs	r3, #3
 801b5b4:	6123      	str	r3, [r4, #16]
 801b5b6:	9b05      	ldr	r3, [sp, #20]
 801b5b8:	f023 0304 	bic.w	r3, r3, #4
 801b5bc:	6023      	str	r3, [r4, #0]
 801b5be:	f04f 0900 	mov.w	r9, #0
 801b5c2:	9700      	str	r7, [sp, #0]
 801b5c4:	4633      	mov	r3, r6
 801b5c6:	aa0b      	add	r2, sp, #44	; 0x2c
 801b5c8:	4621      	mov	r1, r4
 801b5ca:	4628      	mov	r0, r5
 801b5cc:	f000 f9da 	bl	801b984 <_printf_common>
 801b5d0:	3001      	adds	r0, #1
 801b5d2:	f040 8090 	bne.w	801b6f6 <_printf_float+0x1de>
 801b5d6:	f04f 30ff 	mov.w	r0, #4294967295
 801b5da:	b00d      	add	sp, #52	; 0x34
 801b5dc:	ecbd 8b02 	vpop	{d8}
 801b5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5e4:	4642      	mov	r2, r8
 801b5e6:	464b      	mov	r3, r9
 801b5e8:	4640      	mov	r0, r8
 801b5ea:	4649      	mov	r1, r9
 801b5ec:	f7e5 fab6 	bl	8000b5c <__aeabi_dcmpun>
 801b5f0:	b140      	cbz	r0, 801b604 <_printf_float+0xec>
 801b5f2:	464b      	mov	r3, r9
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	bfbc      	itt	lt
 801b5f8:	232d      	movlt	r3, #45	; 0x2d
 801b5fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b5fe:	4a7f      	ldr	r2, [pc, #508]	; (801b7fc <_printf_float+0x2e4>)
 801b600:	4b7f      	ldr	r3, [pc, #508]	; (801b800 <_printf_float+0x2e8>)
 801b602:	e7d1      	b.n	801b5a8 <_printf_float+0x90>
 801b604:	6863      	ldr	r3, [r4, #4]
 801b606:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b60a:	9206      	str	r2, [sp, #24]
 801b60c:	1c5a      	adds	r2, r3, #1
 801b60e:	d13f      	bne.n	801b690 <_printf_float+0x178>
 801b610:	2306      	movs	r3, #6
 801b612:	6063      	str	r3, [r4, #4]
 801b614:	9b05      	ldr	r3, [sp, #20]
 801b616:	6861      	ldr	r1, [r4, #4]
 801b618:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b61c:	2300      	movs	r3, #0
 801b61e:	9303      	str	r3, [sp, #12]
 801b620:	ab0a      	add	r3, sp, #40	; 0x28
 801b622:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b626:	ab09      	add	r3, sp, #36	; 0x24
 801b628:	ec49 8b10 	vmov	d0, r8, r9
 801b62c:	9300      	str	r3, [sp, #0]
 801b62e:	6022      	str	r2, [r4, #0]
 801b630:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b634:	4628      	mov	r0, r5
 801b636:	f7ff fecf 	bl	801b3d8 <__cvt>
 801b63a:	9b06      	ldr	r3, [sp, #24]
 801b63c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b63e:	2b47      	cmp	r3, #71	; 0x47
 801b640:	4680      	mov	r8, r0
 801b642:	d108      	bne.n	801b656 <_printf_float+0x13e>
 801b644:	1cc8      	adds	r0, r1, #3
 801b646:	db02      	blt.n	801b64e <_printf_float+0x136>
 801b648:	6863      	ldr	r3, [r4, #4]
 801b64a:	4299      	cmp	r1, r3
 801b64c:	dd41      	ble.n	801b6d2 <_printf_float+0x1ba>
 801b64e:	f1ab 0302 	sub.w	r3, fp, #2
 801b652:	fa5f fb83 	uxtb.w	fp, r3
 801b656:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b65a:	d820      	bhi.n	801b69e <_printf_float+0x186>
 801b65c:	3901      	subs	r1, #1
 801b65e:	465a      	mov	r2, fp
 801b660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b664:	9109      	str	r1, [sp, #36]	; 0x24
 801b666:	f7ff ff19 	bl	801b49c <__exponent>
 801b66a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b66c:	1813      	adds	r3, r2, r0
 801b66e:	2a01      	cmp	r2, #1
 801b670:	4681      	mov	r9, r0
 801b672:	6123      	str	r3, [r4, #16]
 801b674:	dc02      	bgt.n	801b67c <_printf_float+0x164>
 801b676:	6822      	ldr	r2, [r4, #0]
 801b678:	07d2      	lsls	r2, r2, #31
 801b67a:	d501      	bpl.n	801b680 <_printf_float+0x168>
 801b67c:	3301      	adds	r3, #1
 801b67e:	6123      	str	r3, [r4, #16]
 801b680:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b684:	2b00      	cmp	r3, #0
 801b686:	d09c      	beq.n	801b5c2 <_printf_float+0xaa>
 801b688:	232d      	movs	r3, #45	; 0x2d
 801b68a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b68e:	e798      	b.n	801b5c2 <_printf_float+0xaa>
 801b690:	9a06      	ldr	r2, [sp, #24]
 801b692:	2a47      	cmp	r2, #71	; 0x47
 801b694:	d1be      	bne.n	801b614 <_printf_float+0xfc>
 801b696:	2b00      	cmp	r3, #0
 801b698:	d1bc      	bne.n	801b614 <_printf_float+0xfc>
 801b69a:	2301      	movs	r3, #1
 801b69c:	e7b9      	b.n	801b612 <_printf_float+0xfa>
 801b69e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b6a2:	d118      	bne.n	801b6d6 <_printf_float+0x1be>
 801b6a4:	2900      	cmp	r1, #0
 801b6a6:	6863      	ldr	r3, [r4, #4]
 801b6a8:	dd0b      	ble.n	801b6c2 <_printf_float+0x1aa>
 801b6aa:	6121      	str	r1, [r4, #16]
 801b6ac:	b913      	cbnz	r3, 801b6b4 <_printf_float+0x19c>
 801b6ae:	6822      	ldr	r2, [r4, #0]
 801b6b0:	07d0      	lsls	r0, r2, #31
 801b6b2:	d502      	bpl.n	801b6ba <_printf_float+0x1a2>
 801b6b4:	3301      	adds	r3, #1
 801b6b6:	440b      	add	r3, r1
 801b6b8:	6123      	str	r3, [r4, #16]
 801b6ba:	65a1      	str	r1, [r4, #88]	; 0x58
 801b6bc:	f04f 0900 	mov.w	r9, #0
 801b6c0:	e7de      	b.n	801b680 <_printf_float+0x168>
 801b6c2:	b913      	cbnz	r3, 801b6ca <_printf_float+0x1b2>
 801b6c4:	6822      	ldr	r2, [r4, #0]
 801b6c6:	07d2      	lsls	r2, r2, #31
 801b6c8:	d501      	bpl.n	801b6ce <_printf_float+0x1b6>
 801b6ca:	3302      	adds	r3, #2
 801b6cc:	e7f4      	b.n	801b6b8 <_printf_float+0x1a0>
 801b6ce:	2301      	movs	r3, #1
 801b6d0:	e7f2      	b.n	801b6b8 <_printf_float+0x1a0>
 801b6d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6d8:	4299      	cmp	r1, r3
 801b6da:	db05      	blt.n	801b6e8 <_printf_float+0x1d0>
 801b6dc:	6823      	ldr	r3, [r4, #0]
 801b6de:	6121      	str	r1, [r4, #16]
 801b6e0:	07d8      	lsls	r0, r3, #31
 801b6e2:	d5ea      	bpl.n	801b6ba <_printf_float+0x1a2>
 801b6e4:	1c4b      	adds	r3, r1, #1
 801b6e6:	e7e7      	b.n	801b6b8 <_printf_float+0x1a0>
 801b6e8:	2900      	cmp	r1, #0
 801b6ea:	bfd4      	ite	le
 801b6ec:	f1c1 0202 	rsble	r2, r1, #2
 801b6f0:	2201      	movgt	r2, #1
 801b6f2:	4413      	add	r3, r2
 801b6f4:	e7e0      	b.n	801b6b8 <_printf_float+0x1a0>
 801b6f6:	6823      	ldr	r3, [r4, #0]
 801b6f8:	055a      	lsls	r2, r3, #21
 801b6fa:	d407      	bmi.n	801b70c <_printf_float+0x1f4>
 801b6fc:	6923      	ldr	r3, [r4, #16]
 801b6fe:	4642      	mov	r2, r8
 801b700:	4631      	mov	r1, r6
 801b702:	4628      	mov	r0, r5
 801b704:	47b8      	blx	r7
 801b706:	3001      	adds	r0, #1
 801b708:	d12c      	bne.n	801b764 <_printf_float+0x24c>
 801b70a:	e764      	b.n	801b5d6 <_printf_float+0xbe>
 801b70c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b710:	f240 80e0 	bls.w	801b8d4 <_printf_float+0x3bc>
 801b714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b718:	2200      	movs	r2, #0
 801b71a:	2300      	movs	r3, #0
 801b71c:	f7e5 f9ec 	bl	8000af8 <__aeabi_dcmpeq>
 801b720:	2800      	cmp	r0, #0
 801b722:	d034      	beq.n	801b78e <_printf_float+0x276>
 801b724:	4a37      	ldr	r2, [pc, #220]	; (801b804 <_printf_float+0x2ec>)
 801b726:	2301      	movs	r3, #1
 801b728:	4631      	mov	r1, r6
 801b72a:	4628      	mov	r0, r5
 801b72c:	47b8      	blx	r7
 801b72e:	3001      	adds	r0, #1
 801b730:	f43f af51 	beq.w	801b5d6 <_printf_float+0xbe>
 801b734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b738:	429a      	cmp	r2, r3
 801b73a:	db02      	blt.n	801b742 <_printf_float+0x22a>
 801b73c:	6823      	ldr	r3, [r4, #0]
 801b73e:	07d8      	lsls	r0, r3, #31
 801b740:	d510      	bpl.n	801b764 <_printf_float+0x24c>
 801b742:	ee18 3a10 	vmov	r3, s16
 801b746:	4652      	mov	r2, sl
 801b748:	4631      	mov	r1, r6
 801b74a:	4628      	mov	r0, r5
 801b74c:	47b8      	blx	r7
 801b74e:	3001      	adds	r0, #1
 801b750:	f43f af41 	beq.w	801b5d6 <_printf_float+0xbe>
 801b754:	f04f 0800 	mov.w	r8, #0
 801b758:	f104 091a 	add.w	r9, r4, #26
 801b75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b75e:	3b01      	subs	r3, #1
 801b760:	4543      	cmp	r3, r8
 801b762:	dc09      	bgt.n	801b778 <_printf_float+0x260>
 801b764:	6823      	ldr	r3, [r4, #0]
 801b766:	079b      	lsls	r3, r3, #30
 801b768:	f100 8107 	bmi.w	801b97a <_printf_float+0x462>
 801b76c:	68e0      	ldr	r0, [r4, #12]
 801b76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b770:	4298      	cmp	r0, r3
 801b772:	bfb8      	it	lt
 801b774:	4618      	movlt	r0, r3
 801b776:	e730      	b.n	801b5da <_printf_float+0xc2>
 801b778:	2301      	movs	r3, #1
 801b77a:	464a      	mov	r2, r9
 801b77c:	4631      	mov	r1, r6
 801b77e:	4628      	mov	r0, r5
 801b780:	47b8      	blx	r7
 801b782:	3001      	adds	r0, #1
 801b784:	f43f af27 	beq.w	801b5d6 <_printf_float+0xbe>
 801b788:	f108 0801 	add.w	r8, r8, #1
 801b78c:	e7e6      	b.n	801b75c <_printf_float+0x244>
 801b78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b790:	2b00      	cmp	r3, #0
 801b792:	dc39      	bgt.n	801b808 <_printf_float+0x2f0>
 801b794:	4a1b      	ldr	r2, [pc, #108]	; (801b804 <_printf_float+0x2ec>)
 801b796:	2301      	movs	r3, #1
 801b798:	4631      	mov	r1, r6
 801b79a:	4628      	mov	r0, r5
 801b79c:	47b8      	blx	r7
 801b79e:	3001      	adds	r0, #1
 801b7a0:	f43f af19 	beq.w	801b5d6 <_printf_float+0xbe>
 801b7a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b7a8:	4313      	orrs	r3, r2
 801b7aa:	d102      	bne.n	801b7b2 <_printf_float+0x29a>
 801b7ac:	6823      	ldr	r3, [r4, #0]
 801b7ae:	07d9      	lsls	r1, r3, #31
 801b7b0:	d5d8      	bpl.n	801b764 <_printf_float+0x24c>
 801b7b2:	ee18 3a10 	vmov	r3, s16
 801b7b6:	4652      	mov	r2, sl
 801b7b8:	4631      	mov	r1, r6
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	47b8      	blx	r7
 801b7be:	3001      	adds	r0, #1
 801b7c0:	f43f af09 	beq.w	801b5d6 <_printf_float+0xbe>
 801b7c4:	f04f 0900 	mov.w	r9, #0
 801b7c8:	f104 0a1a 	add.w	sl, r4, #26
 801b7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7ce:	425b      	negs	r3, r3
 801b7d0:	454b      	cmp	r3, r9
 801b7d2:	dc01      	bgt.n	801b7d8 <_printf_float+0x2c0>
 801b7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b7d6:	e792      	b.n	801b6fe <_printf_float+0x1e6>
 801b7d8:	2301      	movs	r3, #1
 801b7da:	4652      	mov	r2, sl
 801b7dc:	4631      	mov	r1, r6
 801b7de:	4628      	mov	r0, r5
 801b7e0:	47b8      	blx	r7
 801b7e2:	3001      	adds	r0, #1
 801b7e4:	f43f aef7 	beq.w	801b5d6 <_printf_float+0xbe>
 801b7e8:	f109 0901 	add.w	r9, r9, #1
 801b7ec:	e7ee      	b.n	801b7cc <_printf_float+0x2b4>
 801b7ee:	bf00      	nop
 801b7f0:	7fefffff 	.word	0x7fefffff
 801b7f4:	0806e0cc 	.word	0x0806e0cc
 801b7f8:	0806e0d0 	.word	0x0806e0d0
 801b7fc:	0806e0d4 	.word	0x0806e0d4
 801b800:	0806e0d8 	.word	0x0806e0d8
 801b804:	0806e0dc 	.word	0x0806e0dc
 801b808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b80a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b80c:	429a      	cmp	r2, r3
 801b80e:	bfa8      	it	ge
 801b810:	461a      	movge	r2, r3
 801b812:	2a00      	cmp	r2, #0
 801b814:	4691      	mov	r9, r2
 801b816:	dc37      	bgt.n	801b888 <_printf_float+0x370>
 801b818:	f04f 0b00 	mov.w	fp, #0
 801b81c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b820:	f104 021a 	add.w	r2, r4, #26
 801b824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b826:	9305      	str	r3, [sp, #20]
 801b828:	eba3 0309 	sub.w	r3, r3, r9
 801b82c:	455b      	cmp	r3, fp
 801b82e:	dc33      	bgt.n	801b898 <_printf_float+0x380>
 801b830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b834:	429a      	cmp	r2, r3
 801b836:	db3b      	blt.n	801b8b0 <_printf_float+0x398>
 801b838:	6823      	ldr	r3, [r4, #0]
 801b83a:	07da      	lsls	r2, r3, #31
 801b83c:	d438      	bmi.n	801b8b0 <_printf_float+0x398>
 801b83e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801b842:	eba2 0903 	sub.w	r9, r2, r3
 801b846:	9b05      	ldr	r3, [sp, #20]
 801b848:	1ad2      	subs	r2, r2, r3
 801b84a:	4591      	cmp	r9, r2
 801b84c:	bfa8      	it	ge
 801b84e:	4691      	movge	r9, r2
 801b850:	f1b9 0f00 	cmp.w	r9, #0
 801b854:	dc35      	bgt.n	801b8c2 <_printf_float+0x3aa>
 801b856:	f04f 0800 	mov.w	r8, #0
 801b85a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b85e:	f104 0a1a 	add.w	sl, r4, #26
 801b862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b866:	1a9b      	subs	r3, r3, r2
 801b868:	eba3 0309 	sub.w	r3, r3, r9
 801b86c:	4543      	cmp	r3, r8
 801b86e:	f77f af79 	ble.w	801b764 <_printf_float+0x24c>
 801b872:	2301      	movs	r3, #1
 801b874:	4652      	mov	r2, sl
 801b876:	4631      	mov	r1, r6
 801b878:	4628      	mov	r0, r5
 801b87a:	47b8      	blx	r7
 801b87c:	3001      	adds	r0, #1
 801b87e:	f43f aeaa 	beq.w	801b5d6 <_printf_float+0xbe>
 801b882:	f108 0801 	add.w	r8, r8, #1
 801b886:	e7ec      	b.n	801b862 <_printf_float+0x34a>
 801b888:	4613      	mov	r3, r2
 801b88a:	4631      	mov	r1, r6
 801b88c:	4642      	mov	r2, r8
 801b88e:	4628      	mov	r0, r5
 801b890:	47b8      	blx	r7
 801b892:	3001      	adds	r0, #1
 801b894:	d1c0      	bne.n	801b818 <_printf_float+0x300>
 801b896:	e69e      	b.n	801b5d6 <_printf_float+0xbe>
 801b898:	2301      	movs	r3, #1
 801b89a:	4631      	mov	r1, r6
 801b89c:	4628      	mov	r0, r5
 801b89e:	9205      	str	r2, [sp, #20]
 801b8a0:	47b8      	blx	r7
 801b8a2:	3001      	adds	r0, #1
 801b8a4:	f43f ae97 	beq.w	801b5d6 <_printf_float+0xbe>
 801b8a8:	9a05      	ldr	r2, [sp, #20]
 801b8aa:	f10b 0b01 	add.w	fp, fp, #1
 801b8ae:	e7b9      	b.n	801b824 <_printf_float+0x30c>
 801b8b0:	ee18 3a10 	vmov	r3, s16
 801b8b4:	4652      	mov	r2, sl
 801b8b6:	4631      	mov	r1, r6
 801b8b8:	4628      	mov	r0, r5
 801b8ba:	47b8      	blx	r7
 801b8bc:	3001      	adds	r0, #1
 801b8be:	d1be      	bne.n	801b83e <_printf_float+0x326>
 801b8c0:	e689      	b.n	801b5d6 <_printf_float+0xbe>
 801b8c2:	9a05      	ldr	r2, [sp, #20]
 801b8c4:	464b      	mov	r3, r9
 801b8c6:	4442      	add	r2, r8
 801b8c8:	4631      	mov	r1, r6
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	47b8      	blx	r7
 801b8ce:	3001      	adds	r0, #1
 801b8d0:	d1c1      	bne.n	801b856 <_printf_float+0x33e>
 801b8d2:	e680      	b.n	801b5d6 <_printf_float+0xbe>
 801b8d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b8d6:	2a01      	cmp	r2, #1
 801b8d8:	dc01      	bgt.n	801b8de <_printf_float+0x3c6>
 801b8da:	07db      	lsls	r3, r3, #31
 801b8dc:	d53a      	bpl.n	801b954 <_printf_float+0x43c>
 801b8de:	2301      	movs	r3, #1
 801b8e0:	4642      	mov	r2, r8
 801b8e2:	4631      	mov	r1, r6
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	47b8      	blx	r7
 801b8e8:	3001      	adds	r0, #1
 801b8ea:	f43f ae74 	beq.w	801b5d6 <_printf_float+0xbe>
 801b8ee:	ee18 3a10 	vmov	r3, s16
 801b8f2:	4652      	mov	r2, sl
 801b8f4:	4631      	mov	r1, r6
 801b8f6:	4628      	mov	r0, r5
 801b8f8:	47b8      	blx	r7
 801b8fa:	3001      	adds	r0, #1
 801b8fc:	f43f ae6b 	beq.w	801b5d6 <_printf_float+0xbe>
 801b900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b904:	2200      	movs	r2, #0
 801b906:	2300      	movs	r3, #0
 801b908:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801b90c:	f7e5 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 801b910:	b9d8      	cbnz	r0, 801b94a <_printf_float+0x432>
 801b912:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b916:	f108 0201 	add.w	r2, r8, #1
 801b91a:	4631      	mov	r1, r6
 801b91c:	4628      	mov	r0, r5
 801b91e:	47b8      	blx	r7
 801b920:	3001      	adds	r0, #1
 801b922:	d10e      	bne.n	801b942 <_printf_float+0x42a>
 801b924:	e657      	b.n	801b5d6 <_printf_float+0xbe>
 801b926:	2301      	movs	r3, #1
 801b928:	4652      	mov	r2, sl
 801b92a:	4631      	mov	r1, r6
 801b92c:	4628      	mov	r0, r5
 801b92e:	47b8      	blx	r7
 801b930:	3001      	adds	r0, #1
 801b932:	f43f ae50 	beq.w	801b5d6 <_printf_float+0xbe>
 801b936:	f108 0801 	add.w	r8, r8, #1
 801b93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b93c:	3b01      	subs	r3, #1
 801b93e:	4543      	cmp	r3, r8
 801b940:	dcf1      	bgt.n	801b926 <_printf_float+0x40e>
 801b942:	464b      	mov	r3, r9
 801b944:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b948:	e6da      	b.n	801b700 <_printf_float+0x1e8>
 801b94a:	f04f 0800 	mov.w	r8, #0
 801b94e:	f104 0a1a 	add.w	sl, r4, #26
 801b952:	e7f2      	b.n	801b93a <_printf_float+0x422>
 801b954:	2301      	movs	r3, #1
 801b956:	4642      	mov	r2, r8
 801b958:	e7df      	b.n	801b91a <_printf_float+0x402>
 801b95a:	2301      	movs	r3, #1
 801b95c:	464a      	mov	r2, r9
 801b95e:	4631      	mov	r1, r6
 801b960:	4628      	mov	r0, r5
 801b962:	47b8      	blx	r7
 801b964:	3001      	adds	r0, #1
 801b966:	f43f ae36 	beq.w	801b5d6 <_printf_float+0xbe>
 801b96a:	f108 0801 	add.w	r8, r8, #1
 801b96e:	68e3      	ldr	r3, [r4, #12]
 801b970:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b972:	1a5b      	subs	r3, r3, r1
 801b974:	4543      	cmp	r3, r8
 801b976:	dcf0      	bgt.n	801b95a <_printf_float+0x442>
 801b978:	e6f8      	b.n	801b76c <_printf_float+0x254>
 801b97a:	f04f 0800 	mov.w	r8, #0
 801b97e:	f104 0919 	add.w	r9, r4, #25
 801b982:	e7f4      	b.n	801b96e <_printf_float+0x456>

0801b984 <_printf_common>:
 801b984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b988:	4616      	mov	r6, r2
 801b98a:	4699      	mov	r9, r3
 801b98c:	688a      	ldr	r2, [r1, #8]
 801b98e:	690b      	ldr	r3, [r1, #16]
 801b990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b994:	4293      	cmp	r3, r2
 801b996:	bfb8      	it	lt
 801b998:	4613      	movlt	r3, r2
 801b99a:	6033      	str	r3, [r6, #0]
 801b99c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b9a0:	4607      	mov	r7, r0
 801b9a2:	460c      	mov	r4, r1
 801b9a4:	b10a      	cbz	r2, 801b9aa <_printf_common+0x26>
 801b9a6:	3301      	adds	r3, #1
 801b9a8:	6033      	str	r3, [r6, #0]
 801b9aa:	6823      	ldr	r3, [r4, #0]
 801b9ac:	0699      	lsls	r1, r3, #26
 801b9ae:	bf42      	ittt	mi
 801b9b0:	6833      	ldrmi	r3, [r6, #0]
 801b9b2:	3302      	addmi	r3, #2
 801b9b4:	6033      	strmi	r3, [r6, #0]
 801b9b6:	6825      	ldr	r5, [r4, #0]
 801b9b8:	f015 0506 	ands.w	r5, r5, #6
 801b9bc:	d106      	bne.n	801b9cc <_printf_common+0x48>
 801b9be:	f104 0a19 	add.w	sl, r4, #25
 801b9c2:	68e3      	ldr	r3, [r4, #12]
 801b9c4:	6832      	ldr	r2, [r6, #0]
 801b9c6:	1a9b      	subs	r3, r3, r2
 801b9c8:	42ab      	cmp	r3, r5
 801b9ca:	dc26      	bgt.n	801ba1a <_printf_common+0x96>
 801b9cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b9d0:	1e13      	subs	r3, r2, #0
 801b9d2:	6822      	ldr	r2, [r4, #0]
 801b9d4:	bf18      	it	ne
 801b9d6:	2301      	movne	r3, #1
 801b9d8:	0692      	lsls	r2, r2, #26
 801b9da:	d42b      	bmi.n	801ba34 <_printf_common+0xb0>
 801b9dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b9e0:	4649      	mov	r1, r9
 801b9e2:	4638      	mov	r0, r7
 801b9e4:	47c0      	blx	r8
 801b9e6:	3001      	adds	r0, #1
 801b9e8:	d01e      	beq.n	801ba28 <_printf_common+0xa4>
 801b9ea:	6823      	ldr	r3, [r4, #0]
 801b9ec:	6922      	ldr	r2, [r4, #16]
 801b9ee:	f003 0306 	and.w	r3, r3, #6
 801b9f2:	2b04      	cmp	r3, #4
 801b9f4:	bf02      	ittt	eq
 801b9f6:	68e5      	ldreq	r5, [r4, #12]
 801b9f8:	6833      	ldreq	r3, [r6, #0]
 801b9fa:	1aed      	subeq	r5, r5, r3
 801b9fc:	68a3      	ldr	r3, [r4, #8]
 801b9fe:	bf0c      	ite	eq
 801ba00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba04:	2500      	movne	r5, #0
 801ba06:	4293      	cmp	r3, r2
 801ba08:	bfc4      	itt	gt
 801ba0a:	1a9b      	subgt	r3, r3, r2
 801ba0c:	18ed      	addgt	r5, r5, r3
 801ba0e:	2600      	movs	r6, #0
 801ba10:	341a      	adds	r4, #26
 801ba12:	42b5      	cmp	r5, r6
 801ba14:	d11a      	bne.n	801ba4c <_printf_common+0xc8>
 801ba16:	2000      	movs	r0, #0
 801ba18:	e008      	b.n	801ba2c <_printf_common+0xa8>
 801ba1a:	2301      	movs	r3, #1
 801ba1c:	4652      	mov	r2, sl
 801ba1e:	4649      	mov	r1, r9
 801ba20:	4638      	mov	r0, r7
 801ba22:	47c0      	blx	r8
 801ba24:	3001      	adds	r0, #1
 801ba26:	d103      	bne.n	801ba30 <_printf_common+0xac>
 801ba28:	f04f 30ff 	mov.w	r0, #4294967295
 801ba2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba30:	3501      	adds	r5, #1
 801ba32:	e7c6      	b.n	801b9c2 <_printf_common+0x3e>
 801ba34:	18e1      	adds	r1, r4, r3
 801ba36:	1c5a      	adds	r2, r3, #1
 801ba38:	2030      	movs	r0, #48	; 0x30
 801ba3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba3e:	4422      	add	r2, r4
 801ba40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba48:	3302      	adds	r3, #2
 801ba4a:	e7c7      	b.n	801b9dc <_printf_common+0x58>
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	4622      	mov	r2, r4
 801ba50:	4649      	mov	r1, r9
 801ba52:	4638      	mov	r0, r7
 801ba54:	47c0      	blx	r8
 801ba56:	3001      	adds	r0, #1
 801ba58:	d0e6      	beq.n	801ba28 <_printf_common+0xa4>
 801ba5a:	3601      	adds	r6, #1
 801ba5c:	e7d9      	b.n	801ba12 <_printf_common+0x8e>
	...

0801ba60 <_printf_i>:
 801ba60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba64:	7e0f      	ldrb	r7, [r1, #24]
 801ba66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba68:	2f78      	cmp	r7, #120	; 0x78
 801ba6a:	4691      	mov	r9, r2
 801ba6c:	4680      	mov	r8, r0
 801ba6e:	460c      	mov	r4, r1
 801ba70:	469a      	mov	sl, r3
 801ba72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ba76:	d807      	bhi.n	801ba88 <_printf_i+0x28>
 801ba78:	2f62      	cmp	r7, #98	; 0x62
 801ba7a:	d80a      	bhi.n	801ba92 <_printf_i+0x32>
 801ba7c:	2f00      	cmp	r7, #0
 801ba7e:	f000 80d4 	beq.w	801bc2a <_printf_i+0x1ca>
 801ba82:	2f58      	cmp	r7, #88	; 0x58
 801ba84:	f000 80c0 	beq.w	801bc08 <_printf_i+0x1a8>
 801ba88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba90:	e03a      	b.n	801bb08 <_printf_i+0xa8>
 801ba92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba96:	2b15      	cmp	r3, #21
 801ba98:	d8f6      	bhi.n	801ba88 <_printf_i+0x28>
 801ba9a:	a101      	add	r1, pc, #4	; (adr r1, 801baa0 <_printf_i+0x40>)
 801ba9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801baa0:	0801baf9 	.word	0x0801baf9
 801baa4:	0801bb0d 	.word	0x0801bb0d
 801baa8:	0801ba89 	.word	0x0801ba89
 801baac:	0801ba89 	.word	0x0801ba89
 801bab0:	0801ba89 	.word	0x0801ba89
 801bab4:	0801ba89 	.word	0x0801ba89
 801bab8:	0801bb0d 	.word	0x0801bb0d
 801babc:	0801ba89 	.word	0x0801ba89
 801bac0:	0801ba89 	.word	0x0801ba89
 801bac4:	0801ba89 	.word	0x0801ba89
 801bac8:	0801ba89 	.word	0x0801ba89
 801bacc:	0801bc11 	.word	0x0801bc11
 801bad0:	0801bb39 	.word	0x0801bb39
 801bad4:	0801bbcb 	.word	0x0801bbcb
 801bad8:	0801ba89 	.word	0x0801ba89
 801badc:	0801ba89 	.word	0x0801ba89
 801bae0:	0801bc33 	.word	0x0801bc33
 801bae4:	0801ba89 	.word	0x0801ba89
 801bae8:	0801bb39 	.word	0x0801bb39
 801baec:	0801ba89 	.word	0x0801ba89
 801baf0:	0801ba89 	.word	0x0801ba89
 801baf4:	0801bbd3 	.word	0x0801bbd3
 801baf8:	682b      	ldr	r3, [r5, #0]
 801bafa:	1d1a      	adds	r2, r3, #4
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	602a      	str	r2, [r5, #0]
 801bb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb08:	2301      	movs	r3, #1
 801bb0a:	e09f      	b.n	801bc4c <_printf_i+0x1ec>
 801bb0c:	6820      	ldr	r0, [r4, #0]
 801bb0e:	682b      	ldr	r3, [r5, #0]
 801bb10:	0607      	lsls	r7, r0, #24
 801bb12:	f103 0104 	add.w	r1, r3, #4
 801bb16:	6029      	str	r1, [r5, #0]
 801bb18:	d501      	bpl.n	801bb1e <_printf_i+0xbe>
 801bb1a:	681e      	ldr	r6, [r3, #0]
 801bb1c:	e003      	b.n	801bb26 <_printf_i+0xc6>
 801bb1e:	0646      	lsls	r6, r0, #25
 801bb20:	d5fb      	bpl.n	801bb1a <_printf_i+0xba>
 801bb22:	f9b3 6000 	ldrsh.w	r6, [r3]
 801bb26:	2e00      	cmp	r6, #0
 801bb28:	da03      	bge.n	801bb32 <_printf_i+0xd2>
 801bb2a:	232d      	movs	r3, #45	; 0x2d
 801bb2c:	4276      	negs	r6, r6
 801bb2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb32:	485a      	ldr	r0, [pc, #360]	; (801bc9c <_printf_i+0x23c>)
 801bb34:	230a      	movs	r3, #10
 801bb36:	e012      	b.n	801bb5e <_printf_i+0xfe>
 801bb38:	682b      	ldr	r3, [r5, #0]
 801bb3a:	6820      	ldr	r0, [r4, #0]
 801bb3c:	1d19      	adds	r1, r3, #4
 801bb3e:	6029      	str	r1, [r5, #0]
 801bb40:	0605      	lsls	r5, r0, #24
 801bb42:	d501      	bpl.n	801bb48 <_printf_i+0xe8>
 801bb44:	681e      	ldr	r6, [r3, #0]
 801bb46:	e002      	b.n	801bb4e <_printf_i+0xee>
 801bb48:	0641      	lsls	r1, r0, #25
 801bb4a:	d5fb      	bpl.n	801bb44 <_printf_i+0xe4>
 801bb4c:	881e      	ldrh	r6, [r3, #0]
 801bb4e:	4853      	ldr	r0, [pc, #332]	; (801bc9c <_printf_i+0x23c>)
 801bb50:	2f6f      	cmp	r7, #111	; 0x6f
 801bb52:	bf0c      	ite	eq
 801bb54:	2308      	moveq	r3, #8
 801bb56:	230a      	movne	r3, #10
 801bb58:	2100      	movs	r1, #0
 801bb5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb5e:	6865      	ldr	r5, [r4, #4]
 801bb60:	60a5      	str	r5, [r4, #8]
 801bb62:	2d00      	cmp	r5, #0
 801bb64:	bfa2      	ittt	ge
 801bb66:	6821      	ldrge	r1, [r4, #0]
 801bb68:	f021 0104 	bicge.w	r1, r1, #4
 801bb6c:	6021      	strge	r1, [r4, #0]
 801bb6e:	b90e      	cbnz	r6, 801bb74 <_printf_i+0x114>
 801bb70:	2d00      	cmp	r5, #0
 801bb72:	d04b      	beq.n	801bc0c <_printf_i+0x1ac>
 801bb74:	4615      	mov	r5, r2
 801bb76:	fbb6 f1f3 	udiv	r1, r6, r3
 801bb7a:	fb03 6711 	mls	r7, r3, r1, r6
 801bb7e:	5dc7      	ldrb	r7, [r0, r7]
 801bb80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bb84:	4637      	mov	r7, r6
 801bb86:	42bb      	cmp	r3, r7
 801bb88:	460e      	mov	r6, r1
 801bb8a:	d9f4      	bls.n	801bb76 <_printf_i+0x116>
 801bb8c:	2b08      	cmp	r3, #8
 801bb8e:	d10b      	bne.n	801bba8 <_printf_i+0x148>
 801bb90:	6823      	ldr	r3, [r4, #0]
 801bb92:	07de      	lsls	r6, r3, #31
 801bb94:	d508      	bpl.n	801bba8 <_printf_i+0x148>
 801bb96:	6923      	ldr	r3, [r4, #16]
 801bb98:	6861      	ldr	r1, [r4, #4]
 801bb9a:	4299      	cmp	r1, r3
 801bb9c:	bfde      	ittt	le
 801bb9e:	2330      	movle	r3, #48	; 0x30
 801bba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bba4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801bba8:	1b52      	subs	r2, r2, r5
 801bbaa:	6122      	str	r2, [r4, #16]
 801bbac:	f8cd a000 	str.w	sl, [sp]
 801bbb0:	464b      	mov	r3, r9
 801bbb2:	aa03      	add	r2, sp, #12
 801bbb4:	4621      	mov	r1, r4
 801bbb6:	4640      	mov	r0, r8
 801bbb8:	f7ff fee4 	bl	801b984 <_printf_common>
 801bbbc:	3001      	adds	r0, #1
 801bbbe:	d14a      	bne.n	801bc56 <_printf_i+0x1f6>
 801bbc0:	f04f 30ff 	mov.w	r0, #4294967295
 801bbc4:	b004      	add	sp, #16
 801bbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbca:	6823      	ldr	r3, [r4, #0]
 801bbcc:	f043 0320 	orr.w	r3, r3, #32
 801bbd0:	6023      	str	r3, [r4, #0]
 801bbd2:	4833      	ldr	r0, [pc, #204]	; (801bca0 <_printf_i+0x240>)
 801bbd4:	2778      	movs	r7, #120	; 0x78
 801bbd6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bbda:	6823      	ldr	r3, [r4, #0]
 801bbdc:	6829      	ldr	r1, [r5, #0]
 801bbde:	061f      	lsls	r7, r3, #24
 801bbe0:	f851 6b04 	ldr.w	r6, [r1], #4
 801bbe4:	d402      	bmi.n	801bbec <_printf_i+0x18c>
 801bbe6:	065f      	lsls	r7, r3, #25
 801bbe8:	bf48      	it	mi
 801bbea:	b2b6      	uxthmi	r6, r6
 801bbec:	07df      	lsls	r7, r3, #31
 801bbee:	bf48      	it	mi
 801bbf0:	f043 0320 	orrmi.w	r3, r3, #32
 801bbf4:	6029      	str	r1, [r5, #0]
 801bbf6:	bf48      	it	mi
 801bbf8:	6023      	strmi	r3, [r4, #0]
 801bbfa:	b91e      	cbnz	r6, 801bc04 <_printf_i+0x1a4>
 801bbfc:	6823      	ldr	r3, [r4, #0]
 801bbfe:	f023 0320 	bic.w	r3, r3, #32
 801bc02:	6023      	str	r3, [r4, #0]
 801bc04:	2310      	movs	r3, #16
 801bc06:	e7a7      	b.n	801bb58 <_printf_i+0xf8>
 801bc08:	4824      	ldr	r0, [pc, #144]	; (801bc9c <_printf_i+0x23c>)
 801bc0a:	e7e4      	b.n	801bbd6 <_printf_i+0x176>
 801bc0c:	4615      	mov	r5, r2
 801bc0e:	e7bd      	b.n	801bb8c <_printf_i+0x12c>
 801bc10:	682b      	ldr	r3, [r5, #0]
 801bc12:	6826      	ldr	r6, [r4, #0]
 801bc14:	6961      	ldr	r1, [r4, #20]
 801bc16:	1d18      	adds	r0, r3, #4
 801bc18:	6028      	str	r0, [r5, #0]
 801bc1a:	0635      	lsls	r5, r6, #24
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	d501      	bpl.n	801bc24 <_printf_i+0x1c4>
 801bc20:	6019      	str	r1, [r3, #0]
 801bc22:	e002      	b.n	801bc2a <_printf_i+0x1ca>
 801bc24:	0670      	lsls	r0, r6, #25
 801bc26:	d5fb      	bpl.n	801bc20 <_printf_i+0x1c0>
 801bc28:	8019      	strh	r1, [r3, #0]
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	6123      	str	r3, [r4, #16]
 801bc2e:	4615      	mov	r5, r2
 801bc30:	e7bc      	b.n	801bbac <_printf_i+0x14c>
 801bc32:	682b      	ldr	r3, [r5, #0]
 801bc34:	1d1a      	adds	r2, r3, #4
 801bc36:	602a      	str	r2, [r5, #0]
 801bc38:	681d      	ldr	r5, [r3, #0]
 801bc3a:	6862      	ldr	r2, [r4, #4]
 801bc3c:	2100      	movs	r1, #0
 801bc3e:	4628      	mov	r0, r5
 801bc40:	f7e4 fade 	bl	8000200 <memchr>
 801bc44:	b108      	cbz	r0, 801bc4a <_printf_i+0x1ea>
 801bc46:	1b40      	subs	r0, r0, r5
 801bc48:	6060      	str	r0, [r4, #4]
 801bc4a:	6863      	ldr	r3, [r4, #4]
 801bc4c:	6123      	str	r3, [r4, #16]
 801bc4e:	2300      	movs	r3, #0
 801bc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc54:	e7aa      	b.n	801bbac <_printf_i+0x14c>
 801bc56:	6923      	ldr	r3, [r4, #16]
 801bc58:	462a      	mov	r2, r5
 801bc5a:	4649      	mov	r1, r9
 801bc5c:	4640      	mov	r0, r8
 801bc5e:	47d0      	blx	sl
 801bc60:	3001      	adds	r0, #1
 801bc62:	d0ad      	beq.n	801bbc0 <_printf_i+0x160>
 801bc64:	6823      	ldr	r3, [r4, #0]
 801bc66:	079b      	lsls	r3, r3, #30
 801bc68:	d413      	bmi.n	801bc92 <_printf_i+0x232>
 801bc6a:	68e0      	ldr	r0, [r4, #12]
 801bc6c:	9b03      	ldr	r3, [sp, #12]
 801bc6e:	4298      	cmp	r0, r3
 801bc70:	bfb8      	it	lt
 801bc72:	4618      	movlt	r0, r3
 801bc74:	e7a6      	b.n	801bbc4 <_printf_i+0x164>
 801bc76:	2301      	movs	r3, #1
 801bc78:	4632      	mov	r2, r6
 801bc7a:	4649      	mov	r1, r9
 801bc7c:	4640      	mov	r0, r8
 801bc7e:	47d0      	blx	sl
 801bc80:	3001      	adds	r0, #1
 801bc82:	d09d      	beq.n	801bbc0 <_printf_i+0x160>
 801bc84:	3501      	adds	r5, #1
 801bc86:	68e3      	ldr	r3, [r4, #12]
 801bc88:	9903      	ldr	r1, [sp, #12]
 801bc8a:	1a5b      	subs	r3, r3, r1
 801bc8c:	42ab      	cmp	r3, r5
 801bc8e:	dcf2      	bgt.n	801bc76 <_printf_i+0x216>
 801bc90:	e7eb      	b.n	801bc6a <_printf_i+0x20a>
 801bc92:	2500      	movs	r5, #0
 801bc94:	f104 0619 	add.w	r6, r4, #25
 801bc98:	e7f5      	b.n	801bc86 <_printf_i+0x226>
 801bc9a:	bf00      	nop
 801bc9c:	0806e0de 	.word	0x0806e0de
 801bca0:	0806e0ef 	.word	0x0806e0ef

0801bca4 <std>:
 801bca4:	2300      	movs	r3, #0
 801bca6:	b510      	push	{r4, lr}
 801bca8:	4604      	mov	r4, r0
 801bcaa:	e9c0 3300 	strd	r3, r3, [r0]
 801bcae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bcb2:	6083      	str	r3, [r0, #8]
 801bcb4:	8181      	strh	r1, [r0, #12]
 801bcb6:	6643      	str	r3, [r0, #100]	; 0x64
 801bcb8:	81c2      	strh	r2, [r0, #14]
 801bcba:	6183      	str	r3, [r0, #24]
 801bcbc:	4619      	mov	r1, r3
 801bcbe:	2208      	movs	r2, #8
 801bcc0:	305c      	adds	r0, #92	; 0x5c
 801bcc2:	f000 fa1b 	bl	801c0fc <memset>
 801bcc6:	4b0d      	ldr	r3, [pc, #52]	; (801bcfc <std+0x58>)
 801bcc8:	6263      	str	r3, [r4, #36]	; 0x24
 801bcca:	4b0d      	ldr	r3, [pc, #52]	; (801bd00 <std+0x5c>)
 801bccc:	62a3      	str	r3, [r4, #40]	; 0x28
 801bcce:	4b0d      	ldr	r3, [pc, #52]	; (801bd04 <std+0x60>)
 801bcd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bcd2:	4b0d      	ldr	r3, [pc, #52]	; (801bd08 <std+0x64>)
 801bcd4:	6323      	str	r3, [r4, #48]	; 0x30
 801bcd6:	4b0d      	ldr	r3, [pc, #52]	; (801bd0c <std+0x68>)
 801bcd8:	6224      	str	r4, [r4, #32]
 801bcda:	429c      	cmp	r4, r3
 801bcdc:	d006      	beq.n	801bcec <std+0x48>
 801bcde:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bce2:	4294      	cmp	r4, r2
 801bce4:	d002      	beq.n	801bcec <std+0x48>
 801bce6:	33d0      	adds	r3, #208	; 0xd0
 801bce8:	429c      	cmp	r4, r3
 801bcea:	d105      	bne.n	801bcf8 <std+0x54>
 801bcec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bcf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcf4:	f000 bab4 	b.w	801c260 <__retarget_lock_init_recursive>
 801bcf8:	bd10      	pop	{r4, pc}
 801bcfa:	bf00      	nop
 801bcfc:	0801bf15 	.word	0x0801bf15
 801bd00:	0801bf37 	.word	0x0801bf37
 801bd04:	0801bf6f 	.word	0x0801bf6f
 801bd08:	0801bf93 	.word	0x0801bf93
 801bd0c:	20013e78 	.word	0x20013e78

0801bd10 <stdio_exit_handler>:
 801bd10:	4a02      	ldr	r2, [pc, #8]	; (801bd1c <stdio_exit_handler+0xc>)
 801bd12:	4903      	ldr	r1, [pc, #12]	; (801bd20 <stdio_exit_handler+0x10>)
 801bd14:	4803      	ldr	r0, [pc, #12]	; (801bd24 <stdio_exit_handler+0x14>)
 801bd16:	f000 b869 	b.w	801bdec <_fwalk_sglue>
 801bd1a:	bf00      	nop
 801bd1c:	200000c8 	.word	0x200000c8
 801bd20:	0801dae9 	.word	0x0801dae9
 801bd24:	200000d4 	.word	0x200000d4

0801bd28 <cleanup_stdio>:
 801bd28:	6841      	ldr	r1, [r0, #4]
 801bd2a:	4b0c      	ldr	r3, [pc, #48]	; (801bd5c <cleanup_stdio+0x34>)
 801bd2c:	4299      	cmp	r1, r3
 801bd2e:	b510      	push	{r4, lr}
 801bd30:	4604      	mov	r4, r0
 801bd32:	d001      	beq.n	801bd38 <cleanup_stdio+0x10>
 801bd34:	f001 fed8 	bl	801dae8 <_fflush_r>
 801bd38:	68a1      	ldr	r1, [r4, #8]
 801bd3a:	4b09      	ldr	r3, [pc, #36]	; (801bd60 <cleanup_stdio+0x38>)
 801bd3c:	4299      	cmp	r1, r3
 801bd3e:	d002      	beq.n	801bd46 <cleanup_stdio+0x1e>
 801bd40:	4620      	mov	r0, r4
 801bd42:	f001 fed1 	bl	801dae8 <_fflush_r>
 801bd46:	68e1      	ldr	r1, [r4, #12]
 801bd48:	4b06      	ldr	r3, [pc, #24]	; (801bd64 <cleanup_stdio+0x3c>)
 801bd4a:	4299      	cmp	r1, r3
 801bd4c:	d004      	beq.n	801bd58 <cleanup_stdio+0x30>
 801bd4e:	4620      	mov	r0, r4
 801bd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd54:	f001 bec8 	b.w	801dae8 <_fflush_r>
 801bd58:	bd10      	pop	{r4, pc}
 801bd5a:	bf00      	nop
 801bd5c:	20013e78 	.word	0x20013e78
 801bd60:	20013ee0 	.word	0x20013ee0
 801bd64:	20013f48 	.word	0x20013f48

0801bd68 <global_stdio_init.part.0>:
 801bd68:	b510      	push	{r4, lr}
 801bd6a:	4b0b      	ldr	r3, [pc, #44]	; (801bd98 <global_stdio_init.part.0+0x30>)
 801bd6c:	4c0b      	ldr	r4, [pc, #44]	; (801bd9c <global_stdio_init.part.0+0x34>)
 801bd6e:	4a0c      	ldr	r2, [pc, #48]	; (801bda0 <global_stdio_init.part.0+0x38>)
 801bd70:	601a      	str	r2, [r3, #0]
 801bd72:	4620      	mov	r0, r4
 801bd74:	2200      	movs	r2, #0
 801bd76:	2104      	movs	r1, #4
 801bd78:	f7ff ff94 	bl	801bca4 <std>
 801bd7c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bd80:	2201      	movs	r2, #1
 801bd82:	2109      	movs	r1, #9
 801bd84:	f7ff ff8e 	bl	801bca4 <std>
 801bd88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bd8c:	2202      	movs	r2, #2
 801bd8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd92:	2112      	movs	r1, #18
 801bd94:	f7ff bf86 	b.w	801bca4 <std>
 801bd98:	20013fb0 	.word	0x20013fb0
 801bd9c:	20013e78 	.word	0x20013e78
 801bda0:	0801bd11 	.word	0x0801bd11

0801bda4 <__sfp_lock_acquire>:
 801bda4:	4801      	ldr	r0, [pc, #4]	; (801bdac <__sfp_lock_acquire+0x8>)
 801bda6:	f000 ba5c 	b.w	801c262 <__retarget_lock_acquire_recursive>
 801bdaa:	bf00      	nop
 801bdac:	20013fb9 	.word	0x20013fb9

0801bdb0 <__sfp_lock_release>:
 801bdb0:	4801      	ldr	r0, [pc, #4]	; (801bdb8 <__sfp_lock_release+0x8>)
 801bdb2:	f000 ba57 	b.w	801c264 <__retarget_lock_release_recursive>
 801bdb6:	bf00      	nop
 801bdb8:	20013fb9 	.word	0x20013fb9

0801bdbc <__sinit>:
 801bdbc:	b510      	push	{r4, lr}
 801bdbe:	4604      	mov	r4, r0
 801bdc0:	f7ff fff0 	bl	801bda4 <__sfp_lock_acquire>
 801bdc4:	6a23      	ldr	r3, [r4, #32]
 801bdc6:	b11b      	cbz	r3, 801bdd0 <__sinit+0x14>
 801bdc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdcc:	f7ff bff0 	b.w	801bdb0 <__sfp_lock_release>
 801bdd0:	4b04      	ldr	r3, [pc, #16]	; (801bde4 <__sinit+0x28>)
 801bdd2:	6223      	str	r3, [r4, #32]
 801bdd4:	4b04      	ldr	r3, [pc, #16]	; (801bde8 <__sinit+0x2c>)
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d1f5      	bne.n	801bdc8 <__sinit+0xc>
 801bddc:	f7ff ffc4 	bl	801bd68 <global_stdio_init.part.0>
 801bde0:	e7f2      	b.n	801bdc8 <__sinit+0xc>
 801bde2:	bf00      	nop
 801bde4:	0801bd29 	.word	0x0801bd29
 801bde8:	20013fb0 	.word	0x20013fb0

0801bdec <_fwalk_sglue>:
 801bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdf0:	4607      	mov	r7, r0
 801bdf2:	4688      	mov	r8, r1
 801bdf4:	4614      	mov	r4, r2
 801bdf6:	2600      	movs	r6, #0
 801bdf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801bdfc:	f1b9 0901 	subs.w	r9, r9, #1
 801be00:	d505      	bpl.n	801be0e <_fwalk_sglue+0x22>
 801be02:	6824      	ldr	r4, [r4, #0]
 801be04:	2c00      	cmp	r4, #0
 801be06:	d1f7      	bne.n	801bdf8 <_fwalk_sglue+0xc>
 801be08:	4630      	mov	r0, r6
 801be0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be0e:	89ab      	ldrh	r3, [r5, #12]
 801be10:	2b01      	cmp	r3, #1
 801be12:	d907      	bls.n	801be24 <_fwalk_sglue+0x38>
 801be14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801be18:	3301      	adds	r3, #1
 801be1a:	d003      	beq.n	801be24 <_fwalk_sglue+0x38>
 801be1c:	4629      	mov	r1, r5
 801be1e:	4638      	mov	r0, r7
 801be20:	47c0      	blx	r8
 801be22:	4306      	orrs	r6, r0
 801be24:	3568      	adds	r5, #104	; 0x68
 801be26:	e7e9      	b.n	801bdfc <_fwalk_sglue+0x10>

0801be28 <iprintf>:
 801be28:	b40f      	push	{r0, r1, r2, r3}
 801be2a:	b507      	push	{r0, r1, r2, lr}
 801be2c:	4906      	ldr	r1, [pc, #24]	; (801be48 <iprintf+0x20>)
 801be2e:	ab04      	add	r3, sp, #16
 801be30:	6808      	ldr	r0, [r1, #0]
 801be32:	f853 2b04 	ldr.w	r2, [r3], #4
 801be36:	6881      	ldr	r1, [r0, #8]
 801be38:	9301      	str	r3, [sp, #4]
 801be3a:	f001 fcb5 	bl	801d7a8 <_vfiprintf_r>
 801be3e:	b003      	add	sp, #12
 801be40:	f85d eb04 	ldr.w	lr, [sp], #4
 801be44:	b004      	add	sp, #16
 801be46:	4770      	bx	lr
 801be48:	20000120 	.word	0x20000120

0801be4c <putchar>:
 801be4c:	4b02      	ldr	r3, [pc, #8]	; (801be58 <putchar+0xc>)
 801be4e:	4601      	mov	r1, r0
 801be50:	6818      	ldr	r0, [r3, #0]
 801be52:	6882      	ldr	r2, [r0, #8]
 801be54:	f001 bee4 	b.w	801dc20 <_putc_r>
 801be58:	20000120 	.word	0x20000120

0801be5c <_puts_r>:
 801be5c:	6a03      	ldr	r3, [r0, #32]
 801be5e:	b570      	push	{r4, r5, r6, lr}
 801be60:	6884      	ldr	r4, [r0, #8]
 801be62:	4605      	mov	r5, r0
 801be64:	460e      	mov	r6, r1
 801be66:	b90b      	cbnz	r3, 801be6c <_puts_r+0x10>
 801be68:	f7ff ffa8 	bl	801bdbc <__sinit>
 801be6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be6e:	07db      	lsls	r3, r3, #31
 801be70:	d405      	bmi.n	801be7e <_puts_r+0x22>
 801be72:	89a3      	ldrh	r3, [r4, #12]
 801be74:	0598      	lsls	r0, r3, #22
 801be76:	d402      	bmi.n	801be7e <_puts_r+0x22>
 801be78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be7a:	f000 f9f2 	bl	801c262 <__retarget_lock_acquire_recursive>
 801be7e:	89a3      	ldrh	r3, [r4, #12]
 801be80:	0719      	lsls	r1, r3, #28
 801be82:	d513      	bpl.n	801beac <_puts_r+0x50>
 801be84:	6923      	ldr	r3, [r4, #16]
 801be86:	b18b      	cbz	r3, 801beac <_puts_r+0x50>
 801be88:	3e01      	subs	r6, #1
 801be8a:	68a3      	ldr	r3, [r4, #8]
 801be8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801be90:	3b01      	subs	r3, #1
 801be92:	60a3      	str	r3, [r4, #8]
 801be94:	b9e9      	cbnz	r1, 801bed2 <_puts_r+0x76>
 801be96:	2b00      	cmp	r3, #0
 801be98:	da2e      	bge.n	801bef8 <_puts_r+0x9c>
 801be9a:	4622      	mov	r2, r4
 801be9c:	210a      	movs	r1, #10
 801be9e:	4628      	mov	r0, r5
 801bea0:	f000 f886 	bl	801bfb0 <__swbuf_r>
 801bea4:	3001      	adds	r0, #1
 801bea6:	d007      	beq.n	801beb8 <_puts_r+0x5c>
 801bea8:	250a      	movs	r5, #10
 801beaa:	e007      	b.n	801bebc <_puts_r+0x60>
 801beac:	4621      	mov	r1, r4
 801beae:	4628      	mov	r0, r5
 801beb0:	f000 f8bc 	bl	801c02c <__swsetup_r>
 801beb4:	2800      	cmp	r0, #0
 801beb6:	d0e7      	beq.n	801be88 <_puts_r+0x2c>
 801beb8:	f04f 35ff 	mov.w	r5, #4294967295
 801bebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bebe:	07da      	lsls	r2, r3, #31
 801bec0:	d405      	bmi.n	801bece <_puts_r+0x72>
 801bec2:	89a3      	ldrh	r3, [r4, #12]
 801bec4:	059b      	lsls	r3, r3, #22
 801bec6:	d402      	bmi.n	801bece <_puts_r+0x72>
 801bec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801beca:	f000 f9cb 	bl	801c264 <__retarget_lock_release_recursive>
 801bece:	4628      	mov	r0, r5
 801bed0:	bd70      	pop	{r4, r5, r6, pc}
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	da04      	bge.n	801bee0 <_puts_r+0x84>
 801bed6:	69a2      	ldr	r2, [r4, #24]
 801bed8:	429a      	cmp	r2, r3
 801beda:	dc06      	bgt.n	801beea <_puts_r+0x8e>
 801bedc:	290a      	cmp	r1, #10
 801bede:	d004      	beq.n	801beea <_puts_r+0x8e>
 801bee0:	6823      	ldr	r3, [r4, #0]
 801bee2:	1c5a      	adds	r2, r3, #1
 801bee4:	6022      	str	r2, [r4, #0]
 801bee6:	7019      	strb	r1, [r3, #0]
 801bee8:	e7cf      	b.n	801be8a <_puts_r+0x2e>
 801beea:	4622      	mov	r2, r4
 801beec:	4628      	mov	r0, r5
 801beee:	f000 f85f 	bl	801bfb0 <__swbuf_r>
 801bef2:	3001      	adds	r0, #1
 801bef4:	d1c9      	bne.n	801be8a <_puts_r+0x2e>
 801bef6:	e7df      	b.n	801beb8 <_puts_r+0x5c>
 801bef8:	6823      	ldr	r3, [r4, #0]
 801befa:	250a      	movs	r5, #10
 801befc:	1c5a      	adds	r2, r3, #1
 801befe:	6022      	str	r2, [r4, #0]
 801bf00:	701d      	strb	r5, [r3, #0]
 801bf02:	e7db      	b.n	801bebc <_puts_r+0x60>

0801bf04 <puts>:
 801bf04:	4b02      	ldr	r3, [pc, #8]	; (801bf10 <puts+0xc>)
 801bf06:	4601      	mov	r1, r0
 801bf08:	6818      	ldr	r0, [r3, #0]
 801bf0a:	f7ff bfa7 	b.w	801be5c <_puts_r>
 801bf0e:	bf00      	nop
 801bf10:	20000120 	.word	0x20000120

0801bf14 <__sread>:
 801bf14:	b510      	push	{r4, lr}
 801bf16:	460c      	mov	r4, r1
 801bf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf1c:	f000 f942 	bl	801c1a4 <_read_r>
 801bf20:	2800      	cmp	r0, #0
 801bf22:	bfab      	itete	ge
 801bf24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bf26:	89a3      	ldrhlt	r3, [r4, #12]
 801bf28:	181b      	addge	r3, r3, r0
 801bf2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bf2e:	bfac      	ite	ge
 801bf30:	6563      	strge	r3, [r4, #84]	; 0x54
 801bf32:	81a3      	strhlt	r3, [r4, #12]
 801bf34:	bd10      	pop	{r4, pc}

0801bf36 <__swrite>:
 801bf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf3a:	461f      	mov	r7, r3
 801bf3c:	898b      	ldrh	r3, [r1, #12]
 801bf3e:	05db      	lsls	r3, r3, #23
 801bf40:	4605      	mov	r5, r0
 801bf42:	460c      	mov	r4, r1
 801bf44:	4616      	mov	r6, r2
 801bf46:	d505      	bpl.n	801bf54 <__swrite+0x1e>
 801bf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf4c:	2302      	movs	r3, #2
 801bf4e:	2200      	movs	r2, #0
 801bf50:	f000 f916 	bl	801c180 <_lseek_r>
 801bf54:	89a3      	ldrh	r3, [r4, #12]
 801bf56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bf5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bf5e:	81a3      	strh	r3, [r4, #12]
 801bf60:	4632      	mov	r2, r6
 801bf62:	463b      	mov	r3, r7
 801bf64:	4628      	mov	r0, r5
 801bf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf6a:	f000 b93d 	b.w	801c1e8 <_write_r>

0801bf6e <__sseek>:
 801bf6e:	b510      	push	{r4, lr}
 801bf70:	460c      	mov	r4, r1
 801bf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf76:	f000 f903 	bl	801c180 <_lseek_r>
 801bf7a:	1c43      	adds	r3, r0, #1
 801bf7c:	89a3      	ldrh	r3, [r4, #12]
 801bf7e:	bf15      	itete	ne
 801bf80:	6560      	strne	r0, [r4, #84]	; 0x54
 801bf82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bf86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bf8a:	81a3      	strheq	r3, [r4, #12]
 801bf8c:	bf18      	it	ne
 801bf8e:	81a3      	strhne	r3, [r4, #12]
 801bf90:	bd10      	pop	{r4, pc}

0801bf92 <__sclose>:
 801bf92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bf96:	f000 b8e3 	b.w	801c160 <_close_r>
	...

0801bf9c <viprintf>:
 801bf9c:	460b      	mov	r3, r1
 801bf9e:	4903      	ldr	r1, [pc, #12]	; (801bfac <viprintf+0x10>)
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	6808      	ldr	r0, [r1, #0]
 801bfa4:	6881      	ldr	r1, [r0, #8]
 801bfa6:	f001 bbff 	b.w	801d7a8 <_vfiprintf_r>
 801bfaa:	bf00      	nop
 801bfac:	20000120 	.word	0x20000120

0801bfb0 <__swbuf_r>:
 801bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfb2:	460e      	mov	r6, r1
 801bfb4:	4614      	mov	r4, r2
 801bfb6:	4605      	mov	r5, r0
 801bfb8:	b118      	cbz	r0, 801bfc2 <__swbuf_r+0x12>
 801bfba:	6a03      	ldr	r3, [r0, #32]
 801bfbc:	b90b      	cbnz	r3, 801bfc2 <__swbuf_r+0x12>
 801bfbe:	f7ff fefd 	bl	801bdbc <__sinit>
 801bfc2:	69a3      	ldr	r3, [r4, #24]
 801bfc4:	60a3      	str	r3, [r4, #8]
 801bfc6:	89a3      	ldrh	r3, [r4, #12]
 801bfc8:	071a      	lsls	r2, r3, #28
 801bfca:	d525      	bpl.n	801c018 <__swbuf_r+0x68>
 801bfcc:	6923      	ldr	r3, [r4, #16]
 801bfce:	b31b      	cbz	r3, 801c018 <__swbuf_r+0x68>
 801bfd0:	6823      	ldr	r3, [r4, #0]
 801bfd2:	6922      	ldr	r2, [r4, #16]
 801bfd4:	1a98      	subs	r0, r3, r2
 801bfd6:	6963      	ldr	r3, [r4, #20]
 801bfd8:	b2f6      	uxtb	r6, r6
 801bfda:	4283      	cmp	r3, r0
 801bfdc:	4637      	mov	r7, r6
 801bfde:	dc04      	bgt.n	801bfea <__swbuf_r+0x3a>
 801bfe0:	4621      	mov	r1, r4
 801bfe2:	4628      	mov	r0, r5
 801bfe4:	f001 fd80 	bl	801dae8 <_fflush_r>
 801bfe8:	b9e0      	cbnz	r0, 801c024 <__swbuf_r+0x74>
 801bfea:	68a3      	ldr	r3, [r4, #8]
 801bfec:	3b01      	subs	r3, #1
 801bfee:	60a3      	str	r3, [r4, #8]
 801bff0:	6823      	ldr	r3, [r4, #0]
 801bff2:	1c5a      	adds	r2, r3, #1
 801bff4:	6022      	str	r2, [r4, #0]
 801bff6:	701e      	strb	r6, [r3, #0]
 801bff8:	6962      	ldr	r2, [r4, #20]
 801bffa:	1c43      	adds	r3, r0, #1
 801bffc:	429a      	cmp	r2, r3
 801bffe:	d004      	beq.n	801c00a <__swbuf_r+0x5a>
 801c000:	89a3      	ldrh	r3, [r4, #12]
 801c002:	07db      	lsls	r3, r3, #31
 801c004:	d506      	bpl.n	801c014 <__swbuf_r+0x64>
 801c006:	2e0a      	cmp	r6, #10
 801c008:	d104      	bne.n	801c014 <__swbuf_r+0x64>
 801c00a:	4621      	mov	r1, r4
 801c00c:	4628      	mov	r0, r5
 801c00e:	f001 fd6b 	bl	801dae8 <_fflush_r>
 801c012:	b938      	cbnz	r0, 801c024 <__swbuf_r+0x74>
 801c014:	4638      	mov	r0, r7
 801c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c018:	4621      	mov	r1, r4
 801c01a:	4628      	mov	r0, r5
 801c01c:	f000 f806 	bl	801c02c <__swsetup_r>
 801c020:	2800      	cmp	r0, #0
 801c022:	d0d5      	beq.n	801bfd0 <__swbuf_r+0x20>
 801c024:	f04f 37ff 	mov.w	r7, #4294967295
 801c028:	e7f4      	b.n	801c014 <__swbuf_r+0x64>
	...

0801c02c <__swsetup_r>:
 801c02c:	b538      	push	{r3, r4, r5, lr}
 801c02e:	4b2a      	ldr	r3, [pc, #168]	; (801c0d8 <__swsetup_r+0xac>)
 801c030:	4605      	mov	r5, r0
 801c032:	6818      	ldr	r0, [r3, #0]
 801c034:	460c      	mov	r4, r1
 801c036:	b118      	cbz	r0, 801c040 <__swsetup_r+0x14>
 801c038:	6a03      	ldr	r3, [r0, #32]
 801c03a:	b90b      	cbnz	r3, 801c040 <__swsetup_r+0x14>
 801c03c:	f7ff febe 	bl	801bdbc <__sinit>
 801c040:	89a3      	ldrh	r3, [r4, #12]
 801c042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c046:	0718      	lsls	r0, r3, #28
 801c048:	d422      	bmi.n	801c090 <__swsetup_r+0x64>
 801c04a:	06d9      	lsls	r1, r3, #27
 801c04c:	d407      	bmi.n	801c05e <__swsetup_r+0x32>
 801c04e:	2309      	movs	r3, #9
 801c050:	602b      	str	r3, [r5, #0]
 801c052:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c056:	81a3      	strh	r3, [r4, #12]
 801c058:	f04f 30ff 	mov.w	r0, #4294967295
 801c05c:	e034      	b.n	801c0c8 <__swsetup_r+0x9c>
 801c05e:	0758      	lsls	r0, r3, #29
 801c060:	d512      	bpl.n	801c088 <__swsetup_r+0x5c>
 801c062:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c064:	b141      	cbz	r1, 801c078 <__swsetup_r+0x4c>
 801c066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c06a:	4299      	cmp	r1, r3
 801c06c:	d002      	beq.n	801c074 <__swsetup_r+0x48>
 801c06e:	4628      	mov	r0, r5
 801c070:	f000 ffa8 	bl	801cfc4 <_free_r>
 801c074:	2300      	movs	r3, #0
 801c076:	6363      	str	r3, [r4, #52]	; 0x34
 801c078:	89a3      	ldrh	r3, [r4, #12]
 801c07a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c07e:	81a3      	strh	r3, [r4, #12]
 801c080:	2300      	movs	r3, #0
 801c082:	6063      	str	r3, [r4, #4]
 801c084:	6923      	ldr	r3, [r4, #16]
 801c086:	6023      	str	r3, [r4, #0]
 801c088:	89a3      	ldrh	r3, [r4, #12]
 801c08a:	f043 0308 	orr.w	r3, r3, #8
 801c08e:	81a3      	strh	r3, [r4, #12]
 801c090:	6923      	ldr	r3, [r4, #16]
 801c092:	b94b      	cbnz	r3, 801c0a8 <__swsetup_r+0x7c>
 801c094:	89a3      	ldrh	r3, [r4, #12]
 801c096:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c09a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c09e:	d003      	beq.n	801c0a8 <__swsetup_r+0x7c>
 801c0a0:	4621      	mov	r1, r4
 801c0a2:	4628      	mov	r0, r5
 801c0a4:	f001 fd80 	bl	801dba8 <__smakebuf_r>
 801c0a8:	89a0      	ldrh	r0, [r4, #12]
 801c0aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0ae:	f010 0301 	ands.w	r3, r0, #1
 801c0b2:	d00a      	beq.n	801c0ca <__swsetup_r+0x9e>
 801c0b4:	2300      	movs	r3, #0
 801c0b6:	60a3      	str	r3, [r4, #8]
 801c0b8:	6963      	ldr	r3, [r4, #20]
 801c0ba:	425b      	negs	r3, r3
 801c0bc:	61a3      	str	r3, [r4, #24]
 801c0be:	6923      	ldr	r3, [r4, #16]
 801c0c0:	b943      	cbnz	r3, 801c0d4 <__swsetup_r+0xa8>
 801c0c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c0c6:	d1c4      	bne.n	801c052 <__swsetup_r+0x26>
 801c0c8:	bd38      	pop	{r3, r4, r5, pc}
 801c0ca:	0781      	lsls	r1, r0, #30
 801c0cc:	bf58      	it	pl
 801c0ce:	6963      	ldrpl	r3, [r4, #20]
 801c0d0:	60a3      	str	r3, [r4, #8]
 801c0d2:	e7f4      	b.n	801c0be <__swsetup_r+0x92>
 801c0d4:	2000      	movs	r0, #0
 801c0d6:	e7f7      	b.n	801c0c8 <__swsetup_r+0x9c>
 801c0d8:	20000120 	.word	0x20000120

0801c0dc <memcmp>:
 801c0dc:	b510      	push	{r4, lr}
 801c0de:	3901      	subs	r1, #1
 801c0e0:	4402      	add	r2, r0
 801c0e2:	4290      	cmp	r0, r2
 801c0e4:	d101      	bne.n	801c0ea <memcmp+0xe>
 801c0e6:	2000      	movs	r0, #0
 801c0e8:	e005      	b.n	801c0f6 <memcmp+0x1a>
 801c0ea:	7803      	ldrb	r3, [r0, #0]
 801c0ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c0f0:	42a3      	cmp	r3, r4
 801c0f2:	d001      	beq.n	801c0f8 <memcmp+0x1c>
 801c0f4:	1b18      	subs	r0, r3, r4
 801c0f6:	bd10      	pop	{r4, pc}
 801c0f8:	3001      	adds	r0, #1
 801c0fa:	e7f2      	b.n	801c0e2 <memcmp+0x6>

0801c0fc <memset>:
 801c0fc:	4402      	add	r2, r0
 801c0fe:	4603      	mov	r3, r0
 801c100:	4293      	cmp	r3, r2
 801c102:	d100      	bne.n	801c106 <memset+0xa>
 801c104:	4770      	bx	lr
 801c106:	f803 1b01 	strb.w	r1, [r3], #1
 801c10a:	e7f9      	b.n	801c100 <memset+0x4>

0801c10c <strncmp>:
 801c10c:	b510      	push	{r4, lr}
 801c10e:	b16a      	cbz	r2, 801c12c <strncmp+0x20>
 801c110:	3901      	subs	r1, #1
 801c112:	1884      	adds	r4, r0, r2
 801c114:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c11c:	429a      	cmp	r2, r3
 801c11e:	d103      	bne.n	801c128 <strncmp+0x1c>
 801c120:	42a0      	cmp	r0, r4
 801c122:	d001      	beq.n	801c128 <strncmp+0x1c>
 801c124:	2a00      	cmp	r2, #0
 801c126:	d1f5      	bne.n	801c114 <strncmp+0x8>
 801c128:	1ad0      	subs	r0, r2, r3
 801c12a:	bd10      	pop	{r4, pc}
 801c12c:	4610      	mov	r0, r2
 801c12e:	e7fc      	b.n	801c12a <strncmp+0x1e>

0801c130 <strncpy>:
 801c130:	b510      	push	{r4, lr}
 801c132:	3901      	subs	r1, #1
 801c134:	4603      	mov	r3, r0
 801c136:	b132      	cbz	r2, 801c146 <strncpy+0x16>
 801c138:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c13c:	f803 4b01 	strb.w	r4, [r3], #1
 801c140:	3a01      	subs	r2, #1
 801c142:	2c00      	cmp	r4, #0
 801c144:	d1f7      	bne.n	801c136 <strncpy+0x6>
 801c146:	441a      	add	r2, r3
 801c148:	2100      	movs	r1, #0
 801c14a:	4293      	cmp	r3, r2
 801c14c:	d100      	bne.n	801c150 <strncpy+0x20>
 801c14e:	bd10      	pop	{r4, pc}
 801c150:	f803 1b01 	strb.w	r1, [r3], #1
 801c154:	e7f9      	b.n	801c14a <strncpy+0x1a>
	...

0801c158 <_localeconv_r>:
 801c158:	4800      	ldr	r0, [pc, #0]	; (801c15c <_localeconv_r+0x4>)
 801c15a:	4770      	bx	lr
 801c15c:	20000214 	.word	0x20000214

0801c160 <_close_r>:
 801c160:	b538      	push	{r3, r4, r5, lr}
 801c162:	4d06      	ldr	r5, [pc, #24]	; (801c17c <_close_r+0x1c>)
 801c164:	2300      	movs	r3, #0
 801c166:	4604      	mov	r4, r0
 801c168:	4608      	mov	r0, r1
 801c16a:	602b      	str	r3, [r5, #0]
 801c16c:	f7e7 ff21 	bl	8003fb2 <_close>
 801c170:	1c43      	adds	r3, r0, #1
 801c172:	d102      	bne.n	801c17a <_close_r+0x1a>
 801c174:	682b      	ldr	r3, [r5, #0]
 801c176:	b103      	cbz	r3, 801c17a <_close_r+0x1a>
 801c178:	6023      	str	r3, [r4, #0]
 801c17a:	bd38      	pop	{r3, r4, r5, pc}
 801c17c:	20013fb4 	.word	0x20013fb4

0801c180 <_lseek_r>:
 801c180:	b538      	push	{r3, r4, r5, lr}
 801c182:	4d07      	ldr	r5, [pc, #28]	; (801c1a0 <_lseek_r+0x20>)
 801c184:	4604      	mov	r4, r0
 801c186:	4608      	mov	r0, r1
 801c188:	4611      	mov	r1, r2
 801c18a:	2200      	movs	r2, #0
 801c18c:	602a      	str	r2, [r5, #0]
 801c18e:	461a      	mov	r2, r3
 801c190:	f7e7 ff36 	bl	8004000 <_lseek>
 801c194:	1c43      	adds	r3, r0, #1
 801c196:	d102      	bne.n	801c19e <_lseek_r+0x1e>
 801c198:	682b      	ldr	r3, [r5, #0]
 801c19a:	b103      	cbz	r3, 801c19e <_lseek_r+0x1e>
 801c19c:	6023      	str	r3, [r4, #0]
 801c19e:	bd38      	pop	{r3, r4, r5, pc}
 801c1a0:	20013fb4 	.word	0x20013fb4

0801c1a4 <_read_r>:
 801c1a4:	b538      	push	{r3, r4, r5, lr}
 801c1a6:	4d07      	ldr	r5, [pc, #28]	; (801c1c4 <_read_r+0x20>)
 801c1a8:	4604      	mov	r4, r0
 801c1aa:	4608      	mov	r0, r1
 801c1ac:	4611      	mov	r1, r2
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	602a      	str	r2, [r5, #0]
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	f7e7 fec4 	bl	8003f40 <_read>
 801c1b8:	1c43      	adds	r3, r0, #1
 801c1ba:	d102      	bne.n	801c1c2 <_read_r+0x1e>
 801c1bc:	682b      	ldr	r3, [r5, #0]
 801c1be:	b103      	cbz	r3, 801c1c2 <_read_r+0x1e>
 801c1c0:	6023      	str	r3, [r4, #0]
 801c1c2:	bd38      	pop	{r3, r4, r5, pc}
 801c1c4:	20013fb4 	.word	0x20013fb4

0801c1c8 <_sbrk_r>:
 801c1c8:	b538      	push	{r3, r4, r5, lr}
 801c1ca:	4d06      	ldr	r5, [pc, #24]	; (801c1e4 <_sbrk_r+0x1c>)
 801c1cc:	2300      	movs	r3, #0
 801c1ce:	4604      	mov	r4, r0
 801c1d0:	4608      	mov	r0, r1
 801c1d2:	602b      	str	r3, [r5, #0]
 801c1d4:	f7e7 ff22 	bl	800401c <_sbrk>
 801c1d8:	1c43      	adds	r3, r0, #1
 801c1da:	d102      	bne.n	801c1e2 <_sbrk_r+0x1a>
 801c1dc:	682b      	ldr	r3, [r5, #0]
 801c1de:	b103      	cbz	r3, 801c1e2 <_sbrk_r+0x1a>
 801c1e0:	6023      	str	r3, [r4, #0]
 801c1e2:	bd38      	pop	{r3, r4, r5, pc}
 801c1e4:	20013fb4 	.word	0x20013fb4

0801c1e8 <_write_r>:
 801c1e8:	b538      	push	{r3, r4, r5, lr}
 801c1ea:	4d07      	ldr	r5, [pc, #28]	; (801c208 <_write_r+0x20>)
 801c1ec:	4604      	mov	r4, r0
 801c1ee:	4608      	mov	r0, r1
 801c1f0:	4611      	mov	r1, r2
 801c1f2:	2200      	movs	r2, #0
 801c1f4:	602a      	str	r2, [r5, #0]
 801c1f6:	461a      	mov	r2, r3
 801c1f8:	f7e7 febf 	bl	8003f7a <_write>
 801c1fc:	1c43      	adds	r3, r0, #1
 801c1fe:	d102      	bne.n	801c206 <_write_r+0x1e>
 801c200:	682b      	ldr	r3, [r5, #0]
 801c202:	b103      	cbz	r3, 801c206 <_write_r+0x1e>
 801c204:	6023      	str	r3, [r4, #0]
 801c206:	bd38      	pop	{r3, r4, r5, pc}
 801c208:	20013fb4 	.word	0x20013fb4

0801c20c <__errno>:
 801c20c:	4b01      	ldr	r3, [pc, #4]	; (801c214 <__errno+0x8>)
 801c20e:	6818      	ldr	r0, [r3, #0]
 801c210:	4770      	bx	lr
 801c212:	bf00      	nop
 801c214:	20000120 	.word	0x20000120

0801c218 <__libc_init_array>:
 801c218:	b570      	push	{r4, r5, r6, lr}
 801c21a:	4d0d      	ldr	r5, [pc, #52]	; (801c250 <__libc_init_array+0x38>)
 801c21c:	4c0d      	ldr	r4, [pc, #52]	; (801c254 <__libc_init_array+0x3c>)
 801c21e:	1b64      	subs	r4, r4, r5
 801c220:	10a4      	asrs	r4, r4, #2
 801c222:	2600      	movs	r6, #0
 801c224:	42a6      	cmp	r6, r4
 801c226:	d109      	bne.n	801c23c <__libc_init_array+0x24>
 801c228:	4d0b      	ldr	r5, [pc, #44]	; (801c258 <__libc_init_array+0x40>)
 801c22a:	4c0c      	ldr	r4, [pc, #48]	; (801c25c <__libc_init_array+0x44>)
 801c22c:	f001 fdb8 	bl	801dda0 <_init>
 801c230:	1b64      	subs	r4, r4, r5
 801c232:	10a4      	asrs	r4, r4, #2
 801c234:	2600      	movs	r6, #0
 801c236:	42a6      	cmp	r6, r4
 801c238:	d105      	bne.n	801c246 <__libc_init_array+0x2e>
 801c23a:	bd70      	pop	{r4, r5, r6, pc}
 801c23c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c240:	4798      	blx	r3
 801c242:	3601      	adds	r6, #1
 801c244:	e7ee      	b.n	801c224 <__libc_init_array+0xc>
 801c246:	f855 3b04 	ldr.w	r3, [r5], #4
 801c24a:	4798      	blx	r3
 801c24c:	3601      	adds	r6, #1
 801c24e:	e7f2      	b.n	801c236 <__libc_init_array+0x1e>
 801c250:	0806e330 	.word	0x0806e330
 801c254:	0806e330 	.word	0x0806e330
 801c258:	0806e330 	.word	0x0806e330
 801c25c:	0806e334 	.word	0x0806e334

0801c260 <__retarget_lock_init_recursive>:
 801c260:	4770      	bx	lr

0801c262 <__retarget_lock_acquire_recursive>:
 801c262:	4770      	bx	lr

0801c264 <__retarget_lock_release_recursive>:
 801c264:	4770      	bx	lr

0801c266 <strcpy>:
 801c266:	4603      	mov	r3, r0
 801c268:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c26c:	f803 2b01 	strb.w	r2, [r3], #1
 801c270:	2a00      	cmp	r2, #0
 801c272:	d1f9      	bne.n	801c268 <strcpy+0x2>
 801c274:	4770      	bx	lr

0801c276 <memcpy>:
 801c276:	440a      	add	r2, r1
 801c278:	4291      	cmp	r1, r2
 801c27a:	f100 33ff 	add.w	r3, r0, #4294967295
 801c27e:	d100      	bne.n	801c282 <memcpy+0xc>
 801c280:	4770      	bx	lr
 801c282:	b510      	push	{r4, lr}
 801c284:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c288:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c28c:	4291      	cmp	r1, r2
 801c28e:	d1f9      	bne.n	801c284 <memcpy+0xe>
 801c290:	bd10      	pop	{r4, pc}
	...

0801c294 <__assert_func>:
 801c294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c296:	4614      	mov	r4, r2
 801c298:	461a      	mov	r2, r3
 801c29a:	4b09      	ldr	r3, [pc, #36]	; (801c2c0 <__assert_func+0x2c>)
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	4605      	mov	r5, r0
 801c2a0:	68d8      	ldr	r0, [r3, #12]
 801c2a2:	b14c      	cbz	r4, 801c2b8 <__assert_func+0x24>
 801c2a4:	4b07      	ldr	r3, [pc, #28]	; (801c2c4 <__assert_func+0x30>)
 801c2a6:	9100      	str	r1, [sp, #0]
 801c2a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c2ac:	4906      	ldr	r1, [pc, #24]	; (801c2c8 <__assert_func+0x34>)
 801c2ae:	462b      	mov	r3, r5
 801c2b0:	f001 fc42 	bl	801db38 <fiprintf>
 801c2b4:	f001 fd0a 	bl	801dccc <abort>
 801c2b8:	4b04      	ldr	r3, [pc, #16]	; (801c2cc <__assert_func+0x38>)
 801c2ba:	461c      	mov	r4, r3
 801c2bc:	e7f3      	b.n	801c2a6 <__assert_func+0x12>
 801c2be:	bf00      	nop
 801c2c0:	20000120 	.word	0x20000120
 801c2c4:	0806e100 	.word	0x0806e100
 801c2c8:	0806e10d 	.word	0x0806e10d
 801c2cc:	0806e13b 	.word	0x0806e13b

0801c2d0 <quorem>:
 801c2d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2d4:	6903      	ldr	r3, [r0, #16]
 801c2d6:	690c      	ldr	r4, [r1, #16]
 801c2d8:	42a3      	cmp	r3, r4
 801c2da:	4607      	mov	r7, r0
 801c2dc:	db7e      	blt.n	801c3dc <quorem+0x10c>
 801c2de:	3c01      	subs	r4, #1
 801c2e0:	f101 0814 	add.w	r8, r1, #20
 801c2e4:	f100 0514 	add.w	r5, r0, #20
 801c2e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c2ec:	9301      	str	r3, [sp, #4]
 801c2ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c2f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c2f6:	3301      	adds	r3, #1
 801c2f8:	429a      	cmp	r2, r3
 801c2fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c2fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c302:	fbb2 f6f3 	udiv	r6, r2, r3
 801c306:	d331      	bcc.n	801c36c <quorem+0x9c>
 801c308:	f04f 0e00 	mov.w	lr, #0
 801c30c:	4640      	mov	r0, r8
 801c30e:	46ac      	mov	ip, r5
 801c310:	46f2      	mov	sl, lr
 801c312:	f850 2b04 	ldr.w	r2, [r0], #4
 801c316:	b293      	uxth	r3, r2
 801c318:	fb06 e303 	mla	r3, r6, r3, lr
 801c31c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c320:	0c1a      	lsrs	r2, r3, #16
 801c322:	b29b      	uxth	r3, r3
 801c324:	ebaa 0303 	sub.w	r3, sl, r3
 801c328:	f8dc a000 	ldr.w	sl, [ip]
 801c32c:	fa13 f38a 	uxtah	r3, r3, sl
 801c330:	fb06 220e 	mla	r2, r6, lr, r2
 801c334:	9300      	str	r3, [sp, #0]
 801c336:	9b00      	ldr	r3, [sp, #0]
 801c338:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c33c:	b292      	uxth	r2, r2
 801c33e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c342:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c346:	f8bd 3000 	ldrh.w	r3, [sp]
 801c34a:	4581      	cmp	r9, r0
 801c34c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c350:	f84c 3b04 	str.w	r3, [ip], #4
 801c354:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c358:	d2db      	bcs.n	801c312 <quorem+0x42>
 801c35a:	f855 300b 	ldr.w	r3, [r5, fp]
 801c35e:	b92b      	cbnz	r3, 801c36c <quorem+0x9c>
 801c360:	9b01      	ldr	r3, [sp, #4]
 801c362:	3b04      	subs	r3, #4
 801c364:	429d      	cmp	r5, r3
 801c366:	461a      	mov	r2, r3
 801c368:	d32c      	bcc.n	801c3c4 <quorem+0xf4>
 801c36a:	613c      	str	r4, [r7, #16]
 801c36c:	4638      	mov	r0, r7
 801c36e:	f001 f8f1 	bl	801d554 <__mcmp>
 801c372:	2800      	cmp	r0, #0
 801c374:	db22      	blt.n	801c3bc <quorem+0xec>
 801c376:	3601      	adds	r6, #1
 801c378:	4629      	mov	r1, r5
 801c37a:	2000      	movs	r0, #0
 801c37c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c380:	f8d1 c000 	ldr.w	ip, [r1]
 801c384:	b293      	uxth	r3, r2
 801c386:	1ac3      	subs	r3, r0, r3
 801c388:	0c12      	lsrs	r2, r2, #16
 801c38a:	fa13 f38c 	uxtah	r3, r3, ip
 801c38e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801c392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c396:	b29b      	uxth	r3, r3
 801c398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c39c:	45c1      	cmp	r9, r8
 801c39e:	f841 3b04 	str.w	r3, [r1], #4
 801c3a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801c3a6:	d2e9      	bcs.n	801c37c <quorem+0xac>
 801c3a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c3ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c3b0:	b922      	cbnz	r2, 801c3bc <quorem+0xec>
 801c3b2:	3b04      	subs	r3, #4
 801c3b4:	429d      	cmp	r5, r3
 801c3b6:	461a      	mov	r2, r3
 801c3b8:	d30a      	bcc.n	801c3d0 <quorem+0x100>
 801c3ba:	613c      	str	r4, [r7, #16]
 801c3bc:	4630      	mov	r0, r6
 801c3be:	b003      	add	sp, #12
 801c3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3c4:	6812      	ldr	r2, [r2, #0]
 801c3c6:	3b04      	subs	r3, #4
 801c3c8:	2a00      	cmp	r2, #0
 801c3ca:	d1ce      	bne.n	801c36a <quorem+0x9a>
 801c3cc:	3c01      	subs	r4, #1
 801c3ce:	e7c9      	b.n	801c364 <quorem+0x94>
 801c3d0:	6812      	ldr	r2, [r2, #0]
 801c3d2:	3b04      	subs	r3, #4
 801c3d4:	2a00      	cmp	r2, #0
 801c3d6:	d1f0      	bne.n	801c3ba <quorem+0xea>
 801c3d8:	3c01      	subs	r4, #1
 801c3da:	e7eb      	b.n	801c3b4 <quorem+0xe4>
 801c3dc:	2000      	movs	r0, #0
 801c3de:	e7ee      	b.n	801c3be <quorem+0xee>

0801c3e0 <_dtoa_r>:
 801c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e4:	ed2d 8b04 	vpush	{d8-d9}
 801c3e8:	69c5      	ldr	r5, [r0, #28]
 801c3ea:	b093      	sub	sp, #76	; 0x4c
 801c3ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c3f0:	ec57 6b10 	vmov	r6, r7, d0
 801c3f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c3f8:	9107      	str	r1, [sp, #28]
 801c3fa:	4604      	mov	r4, r0
 801c3fc:	920a      	str	r2, [sp, #40]	; 0x28
 801c3fe:	930d      	str	r3, [sp, #52]	; 0x34
 801c400:	b975      	cbnz	r5, 801c420 <_dtoa_r+0x40>
 801c402:	2010      	movs	r0, #16
 801c404:	f7fe fe7a 	bl	801b0fc <malloc>
 801c408:	4602      	mov	r2, r0
 801c40a:	61e0      	str	r0, [r4, #28]
 801c40c:	b920      	cbnz	r0, 801c418 <_dtoa_r+0x38>
 801c40e:	4bae      	ldr	r3, [pc, #696]	; (801c6c8 <_dtoa_r+0x2e8>)
 801c410:	21ef      	movs	r1, #239	; 0xef
 801c412:	48ae      	ldr	r0, [pc, #696]	; (801c6cc <_dtoa_r+0x2ec>)
 801c414:	f7ff ff3e 	bl	801c294 <__assert_func>
 801c418:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c41c:	6005      	str	r5, [r0, #0]
 801c41e:	60c5      	str	r5, [r0, #12]
 801c420:	69e3      	ldr	r3, [r4, #28]
 801c422:	6819      	ldr	r1, [r3, #0]
 801c424:	b151      	cbz	r1, 801c43c <_dtoa_r+0x5c>
 801c426:	685a      	ldr	r2, [r3, #4]
 801c428:	604a      	str	r2, [r1, #4]
 801c42a:	2301      	movs	r3, #1
 801c42c:	4093      	lsls	r3, r2
 801c42e:	608b      	str	r3, [r1, #8]
 801c430:	4620      	mov	r0, r4
 801c432:	f000 fe53 	bl	801d0dc <_Bfree>
 801c436:	69e3      	ldr	r3, [r4, #28]
 801c438:	2200      	movs	r2, #0
 801c43a:	601a      	str	r2, [r3, #0]
 801c43c:	1e3b      	subs	r3, r7, #0
 801c43e:	bfbb      	ittet	lt
 801c440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c444:	9303      	strlt	r3, [sp, #12]
 801c446:	2300      	movge	r3, #0
 801c448:	2201      	movlt	r2, #1
 801c44a:	bfac      	ite	ge
 801c44c:	f8c8 3000 	strge.w	r3, [r8]
 801c450:	f8c8 2000 	strlt.w	r2, [r8]
 801c454:	4b9e      	ldr	r3, [pc, #632]	; (801c6d0 <_dtoa_r+0x2f0>)
 801c456:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801c45a:	ea33 0308 	bics.w	r3, r3, r8
 801c45e:	d11b      	bne.n	801c498 <_dtoa_r+0xb8>
 801c460:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c462:	f242 730f 	movw	r3, #9999	; 0x270f
 801c466:	6013      	str	r3, [r2, #0]
 801c468:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801c46c:	4333      	orrs	r3, r6
 801c46e:	f000 8593 	beq.w	801cf98 <_dtoa_r+0xbb8>
 801c472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c474:	b963      	cbnz	r3, 801c490 <_dtoa_r+0xb0>
 801c476:	4b97      	ldr	r3, [pc, #604]	; (801c6d4 <_dtoa_r+0x2f4>)
 801c478:	e027      	b.n	801c4ca <_dtoa_r+0xea>
 801c47a:	4b97      	ldr	r3, [pc, #604]	; (801c6d8 <_dtoa_r+0x2f8>)
 801c47c:	9300      	str	r3, [sp, #0]
 801c47e:	3308      	adds	r3, #8
 801c480:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c482:	6013      	str	r3, [r2, #0]
 801c484:	9800      	ldr	r0, [sp, #0]
 801c486:	b013      	add	sp, #76	; 0x4c
 801c488:	ecbd 8b04 	vpop	{d8-d9}
 801c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c490:	4b90      	ldr	r3, [pc, #576]	; (801c6d4 <_dtoa_r+0x2f4>)
 801c492:	9300      	str	r3, [sp, #0]
 801c494:	3303      	adds	r3, #3
 801c496:	e7f3      	b.n	801c480 <_dtoa_r+0xa0>
 801c498:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c49c:	2200      	movs	r2, #0
 801c49e:	ec51 0b17 	vmov	r0, r1, d7
 801c4a2:	eeb0 8a47 	vmov.f32	s16, s14
 801c4a6:	eef0 8a67 	vmov.f32	s17, s15
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	f7e4 fb24 	bl	8000af8 <__aeabi_dcmpeq>
 801c4b0:	4681      	mov	r9, r0
 801c4b2:	b160      	cbz	r0, 801c4ce <_dtoa_r+0xee>
 801c4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c4b6:	2301      	movs	r3, #1
 801c4b8:	6013      	str	r3, [r2, #0]
 801c4ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	f000 8568 	beq.w	801cf92 <_dtoa_r+0xbb2>
 801c4c2:	4b86      	ldr	r3, [pc, #536]	; (801c6dc <_dtoa_r+0x2fc>)
 801c4c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c4c6:	6013      	str	r3, [r2, #0]
 801c4c8:	3b01      	subs	r3, #1
 801c4ca:	9300      	str	r3, [sp, #0]
 801c4cc:	e7da      	b.n	801c484 <_dtoa_r+0xa4>
 801c4ce:	aa10      	add	r2, sp, #64	; 0x40
 801c4d0:	a911      	add	r1, sp, #68	; 0x44
 801c4d2:	4620      	mov	r0, r4
 801c4d4:	eeb0 0a48 	vmov.f32	s0, s16
 801c4d8:	eef0 0a68 	vmov.f32	s1, s17
 801c4dc:	f001 f8e0 	bl	801d6a0 <__d2b>
 801c4e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c4e4:	4682      	mov	sl, r0
 801c4e6:	2d00      	cmp	r5, #0
 801c4e8:	d07f      	beq.n	801c5ea <_dtoa_r+0x20a>
 801c4ea:	ee18 3a90 	vmov	r3, s17
 801c4ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c4f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801c4f6:	ec51 0b18 	vmov	r0, r1, d8
 801c4fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c4fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c502:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801c506:	4619      	mov	r1, r3
 801c508:	2200      	movs	r2, #0
 801c50a:	4b75      	ldr	r3, [pc, #468]	; (801c6e0 <_dtoa_r+0x300>)
 801c50c:	f7e3 fed4 	bl	80002b8 <__aeabi_dsub>
 801c510:	a367      	add	r3, pc, #412	; (adr r3, 801c6b0 <_dtoa_r+0x2d0>)
 801c512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c516:	f7e4 f887 	bl	8000628 <__aeabi_dmul>
 801c51a:	a367      	add	r3, pc, #412	; (adr r3, 801c6b8 <_dtoa_r+0x2d8>)
 801c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c520:	f7e3 fecc 	bl	80002bc <__adddf3>
 801c524:	4606      	mov	r6, r0
 801c526:	4628      	mov	r0, r5
 801c528:	460f      	mov	r7, r1
 801c52a:	f7e4 f813 	bl	8000554 <__aeabi_i2d>
 801c52e:	a364      	add	r3, pc, #400	; (adr r3, 801c6c0 <_dtoa_r+0x2e0>)
 801c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c534:	f7e4 f878 	bl	8000628 <__aeabi_dmul>
 801c538:	4602      	mov	r2, r0
 801c53a:	460b      	mov	r3, r1
 801c53c:	4630      	mov	r0, r6
 801c53e:	4639      	mov	r1, r7
 801c540:	f7e3 febc 	bl	80002bc <__adddf3>
 801c544:	4606      	mov	r6, r0
 801c546:	460f      	mov	r7, r1
 801c548:	f7e4 fb1e 	bl	8000b88 <__aeabi_d2iz>
 801c54c:	2200      	movs	r2, #0
 801c54e:	4683      	mov	fp, r0
 801c550:	2300      	movs	r3, #0
 801c552:	4630      	mov	r0, r6
 801c554:	4639      	mov	r1, r7
 801c556:	f7e4 fad9 	bl	8000b0c <__aeabi_dcmplt>
 801c55a:	b148      	cbz	r0, 801c570 <_dtoa_r+0x190>
 801c55c:	4658      	mov	r0, fp
 801c55e:	f7e3 fff9 	bl	8000554 <__aeabi_i2d>
 801c562:	4632      	mov	r2, r6
 801c564:	463b      	mov	r3, r7
 801c566:	f7e4 fac7 	bl	8000af8 <__aeabi_dcmpeq>
 801c56a:	b908      	cbnz	r0, 801c570 <_dtoa_r+0x190>
 801c56c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c570:	f1bb 0f16 	cmp.w	fp, #22
 801c574:	d857      	bhi.n	801c626 <_dtoa_r+0x246>
 801c576:	4b5b      	ldr	r3, [pc, #364]	; (801c6e4 <_dtoa_r+0x304>)
 801c578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c580:	ec51 0b18 	vmov	r0, r1, d8
 801c584:	f7e4 fac2 	bl	8000b0c <__aeabi_dcmplt>
 801c588:	2800      	cmp	r0, #0
 801c58a:	d04e      	beq.n	801c62a <_dtoa_r+0x24a>
 801c58c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c590:	2300      	movs	r3, #0
 801c592:	930c      	str	r3, [sp, #48]	; 0x30
 801c594:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c596:	1b5b      	subs	r3, r3, r5
 801c598:	1e5a      	subs	r2, r3, #1
 801c59a:	bf45      	ittet	mi
 801c59c:	f1c3 0301 	rsbmi	r3, r3, #1
 801c5a0:	9305      	strmi	r3, [sp, #20]
 801c5a2:	2300      	movpl	r3, #0
 801c5a4:	2300      	movmi	r3, #0
 801c5a6:	9206      	str	r2, [sp, #24]
 801c5a8:	bf54      	ite	pl
 801c5aa:	9305      	strpl	r3, [sp, #20]
 801c5ac:	9306      	strmi	r3, [sp, #24]
 801c5ae:	f1bb 0f00 	cmp.w	fp, #0
 801c5b2:	db3c      	blt.n	801c62e <_dtoa_r+0x24e>
 801c5b4:	9b06      	ldr	r3, [sp, #24]
 801c5b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801c5ba:	445b      	add	r3, fp
 801c5bc:	9306      	str	r3, [sp, #24]
 801c5be:	2300      	movs	r3, #0
 801c5c0:	9308      	str	r3, [sp, #32]
 801c5c2:	9b07      	ldr	r3, [sp, #28]
 801c5c4:	2b09      	cmp	r3, #9
 801c5c6:	d868      	bhi.n	801c69a <_dtoa_r+0x2ba>
 801c5c8:	2b05      	cmp	r3, #5
 801c5ca:	bfc4      	itt	gt
 801c5cc:	3b04      	subgt	r3, #4
 801c5ce:	9307      	strgt	r3, [sp, #28]
 801c5d0:	9b07      	ldr	r3, [sp, #28]
 801c5d2:	f1a3 0302 	sub.w	r3, r3, #2
 801c5d6:	bfcc      	ite	gt
 801c5d8:	2500      	movgt	r5, #0
 801c5da:	2501      	movle	r5, #1
 801c5dc:	2b03      	cmp	r3, #3
 801c5de:	f200 8085 	bhi.w	801c6ec <_dtoa_r+0x30c>
 801c5e2:	e8df f003 	tbb	[pc, r3]
 801c5e6:	3b2e      	.short	0x3b2e
 801c5e8:	5839      	.short	0x5839
 801c5ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801c5ee:	441d      	add	r5, r3
 801c5f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801c5f4:	2b20      	cmp	r3, #32
 801c5f6:	bfc1      	itttt	gt
 801c5f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c5fc:	fa08 f803 	lslgt.w	r8, r8, r3
 801c600:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801c604:	fa26 f303 	lsrgt.w	r3, r6, r3
 801c608:	bfd6      	itet	le
 801c60a:	f1c3 0320 	rsble	r3, r3, #32
 801c60e:	ea48 0003 	orrgt.w	r0, r8, r3
 801c612:	fa06 f003 	lslle.w	r0, r6, r3
 801c616:	f7e3 ff8d 	bl	8000534 <__aeabi_ui2d>
 801c61a:	2201      	movs	r2, #1
 801c61c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801c620:	3d01      	subs	r5, #1
 801c622:	920e      	str	r2, [sp, #56]	; 0x38
 801c624:	e76f      	b.n	801c506 <_dtoa_r+0x126>
 801c626:	2301      	movs	r3, #1
 801c628:	e7b3      	b.n	801c592 <_dtoa_r+0x1b2>
 801c62a:	900c      	str	r0, [sp, #48]	; 0x30
 801c62c:	e7b2      	b.n	801c594 <_dtoa_r+0x1b4>
 801c62e:	9b05      	ldr	r3, [sp, #20]
 801c630:	eba3 030b 	sub.w	r3, r3, fp
 801c634:	9305      	str	r3, [sp, #20]
 801c636:	f1cb 0300 	rsb	r3, fp, #0
 801c63a:	9308      	str	r3, [sp, #32]
 801c63c:	2300      	movs	r3, #0
 801c63e:	930b      	str	r3, [sp, #44]	; 0x2c
 801c640:	e7bf      	b.n	801c5c2 <_dtoa_r+0x1e2>
 801c642:	2300      	movs	r3, #0
 801c644:	9309      	str	r3, [sp, #36]	; 0x24
 801c646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c648:	2b00      	cmp	r3, #0
 801c64a:	dc52      	bgt.n	801c6f2 <_dtoa_r+0x312>
 801c64c:	2301      	movs	r3, #1
 801c64e:	9301      	str	r3, [sp, #4]
 801c650:	9304      	str	r3, [sp, #16]
 801c652:	461a      	mov	r2, r3
 801c654:	920a      	str	r2, [sp, #40]	; 0x28
 801c656:	e00b      	b.n	801c670 <_dtoa_r+0x290>
 801c658:	2301      	movs	r3, #1
 801c65a:	e7f3      	b.n	801c644 <_dtoa_r+0x264>
 801c65c:	2300      	movs	r3, #0
 801c65e:	9309      	str	r3, [sp, #36]	; 0x24
 801c660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c662:	445b      	add	r3, fp
 801c664:	9301      	str	r3, [sp, #4]
 801c666:	3301      	adds	r3, #1
 801c668:	2b01      	cmp	r3, #1
 801c66a:	9304      	str	r3, [sp, #16]
 801c66c:	bfb8      	it	lt
 801c66e:	2301      	movlt	r3, #1
 801c670:	69e0      	ldr	r0, [r4, #28]
 801c672:	2100      	movs	r1, #0
 801c674:	2204      	movs	r2, #4
 801c676:	f102 0614 	add.w	r6, r2, #20
 801c67a:	429e      	cmp	r6, r3
 801c67c:	d93d      	bls.n	801c6fa <_dtoa_r+0x31a>
 801c67e:	6041      	str	r1, [r0, #4]
 801c680:	4620      	mov	r0, r4
 801c682:	f000 fceb 	bl	801d05c <_Balloc>
 801c686:	9000      	str	r0, [sp, #0]
 801c688:	2800      	cmp	r0, #0
 801c68a:	d139      	bne.n	801c700 <_dtoa_r+0x320>
 801c68c:	4b16      	ldr	r3, [pc, #88]	; (801c6e8 <_dtoa_r+0x308>)
 801c68e:	4602      	mov	r2, r0
 801c690:	f240 11af 	movw	r1, #431	; 0x1af
 801c694:	e6bd      	b.n	801c412 <_dtoa_r+0x32>
 801c696:	2301      	movs	r3, #1
 801c698:	e7e1      	b.n	801c65e <_dtoa_r+0x27e>
 801c69a:	2501      	movs	r5, #1
 801c69c:	2300      	movs	r3, #0
 801c69e:	9307      	str	r3, [sp, #28]
 801c6a0:	9509      	str	r5, [sp, #36]	; 0x24
 801c6a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c6a6:	9301      	str	r3, [sp, #4]
 801c6a8:	9304      	str	r3, [sp, #16]
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	2312      	movs	r3, #18
 801c6ae:	e7d1      	b.n	801c654 <_dtoa_r+0x274>
 801c6b0:	636f4361 	.word	0x636f4361
 801c6b4:	3fd287a7 	.word	0x3fd287a7
 801c6b8:	8b60c8b3 	.word	0x8b60c8b3
 801c6bc:	3fc68a28 	.word	0x3fc68a28
 801c6c0:	509f79fb 	.word	0x509f79fb
 801c6c4:	3fd34413 	.word	0x3fd34413
 801c6c8:	0806df5c 	.word	0x0806df5c
 801c6cc:	0806e149 	.word	0x0806e149
 801c6d0:	7ff00000 	.word	0x7ff00000
 801c6d4:	0806e145 	.word	0x0806e145
 801c6d8:	0806e13c 	.word	0x0806e13c
 801c6dc:	0806e0dd 	.word	0x0806e0dd
 801c6e0:	3ff80000 	.word	0x3ff80000
 801c6e4:	0806e238 	.word	0x0806e238
 801c6e8:	0806e1a1 	.word	0x0806e1a1
 801c6ec:	2301      	movs	r3, #1
 801c6ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c6f0:	e7d7      	b.n	801c6a2 <_dtoa_r+0x2c2>
 801c6f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6f4:	9301      	str	r3, [sp, #4]
 801c6f6:	9304      	str	r3, [sp, #16]
 801c6f8:	e7ba      	b.n	801c670 <_dtoa_r+0x290>
 801c6fa:	3101      	adds	r1, #1
 801c6fc:	0052      	lsls	r2, r2, #1
 801c6fe:	e7ba      	b.n	801c676 <_dtoa_r+0x296>
 801c700:	69e3      	ldr	r3, [r4, #28]
 801c702:	9a00      	ldr	r2, [sp, #0]
 801c704:	601a      	str	r2, [r3, #0]
 801c706:	9b04      	ldr	r3, [sp, #16]
 801c708:	2b0e      	cmp	r3, #14
 801c70a:	f200 80a8 	bhi.w	801c85e <_dtoa_r+0x47e>
 801c70e:	2d00      	cmp	r5, #0
 801c710:	f000 80a5 	beq.w	801c85e <_dtoa_r+0x47e>
 801c714:	f1bb 0f00 	cmp.w	fp, #0
 801c718:	dd38      	ble.n	801c78c <_dtoa_r+0x3ac>
 801c71a:	4bc0      	ldr	r3, [pc, #768]	; (801ca1c <_dtoa_r+0x63c>)
 801c71c:	f00b 020f 	and.w	r2, fp, #15
 801c720:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c724:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c728:	e9d3 6700 	ldrd	r6, r7, [r3]
 801c72c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801c730:	d019      	beq.n	801c766 <_dtoa_r+0x386>
 801c732:	4bbb      	ldr	r3, [pc, #748]	; (801ca20 <_dtoa_r+0x640>)
 801c734:	ec51 0b18 	vmov	r0, r1, d8
 801c738:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801c73c:	f7e4 f89e 	bl	800087c <__aeabi_ddiv>
 801c740:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c744:	f008 080f 	and.w	r8, r8, #15
 801c748:	2503      	movs	r5, #3
 801c74a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801ca20 <_dtoa_r+0x640>
 801c74e:	f1b8 0f00 	cmp.w	r8, #0
 801c752:	d10a      	bne.n	801c76a <_dtoa_r+0x38a>
 801c754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c758:	4632      	mov	r2, r6
 801c75a:	463b      	mov	r3, r7
 801c75c:	f7e4 f88e 	bl	800087c <__aeabi_ddiv>
 801c760:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c764:	e02b      	b.n	801c7be <_dtoa_r+0x3de>
 801c766:	2502      	movs	r5, #2
 801c768:	e7ef      	b.n	801c74a <_dtoa_r+0x36a>
 801c76a:	f018 0f01 	tst.w	r8, #1
 801c76e:	d008      	beq.n	801c782 <_dtoa_r+0x3a2>
 801c770:	4630      	mov	r0, r6
 801c772:	4639      	mov	r1, r7
 801c774:	e9d9 2300 	ldrd	r2, r3, [r9]
 801c778:	f7e3 ff56 	bl	8000628 <__aeabi_dmul>
 801c77c:	3501      	adds	r5, #1
 801c77e:	4606      	mov	r6, r0
 801c780:	460f      	mov	r7, r1
 801c782:	ea4f 0868 	mov.w	r8, r8, asr #1
 801c786:	f109 0908 	add.w	r9, r9, #8
 801c78a:	e7e0      	b.n	801c74e <_dtoa_r+0x36e>
 801c78c:	f000 809f 	beq.w	801c8ce <_dtoa_r+0x4ee>
 801c790:	f1cb 0600 	rsb	r6, fp, #0
 801c794:	4ba1      	ldr	r3, [pc, #644]	; (801ca1c <_dtoa_r+0x63c>)
 801c796:	4fa2      	ldr	r7, [pc, #648]	; (801ca20 <_dtoa_r+0x640>)
 801c798:	f006 020f 	and.w	r2, r6, #15
 801c79c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7a4:	ec51 0b18 	vmov	r0, r1, d8
 801c7a8:	f7e3 ff3e 	bl	8000628 <__aeabi_dmul>
 801c7ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7b0:	1136      	asrs	r6, r6, #4
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	2502      	movs	r5, #2
 801c7b6:	2e00      	cmp	r6, #0
 801c7b8:	d17e      	bne.n	801c8b8 <_dtoa_r+0x4d8>
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d1d0      	bne.n	801c760 <_dtoa_r+0x380>
 801c7be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c7c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	f000 8084 	beq.w	801c8d2 <_dtoa_r+0x4f2>
 801c7ca:	4b96      	ldr	r3, [pc, #600]	; (801ca24 <_dtoa_r+0x644>)
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	4640      	mov	r0, r8
 801c7d0:	4649      	mov	r1, r9
 801c7d2:	f7e4 f99b 	bl	8000b0c <__aeabi_dcmplt>
 801c7d6:	2800      	cmp	r0, #0
 801c7d8:	d07b      	beq.n	801c8d2 <_dtoa_r+0x4f2>
 801c7da:	9b04      	ldr	r3, [sp, #16]
 801c7dc:	2b00      	cmp	r3, #0
 801c7de:	d078      	beq.n	801c8d2 <_dtoa_r+0x4f2>
 801c7e0:	9b01      	ldr	r3, [sp, #4]
 801c7e2:	2b00      	cmp	r3, #0
 801c7e4:	dd39      	ble.n	801c85a <_dtoa_r+0x47a>
 801c7e6:	4b90      	ldr	r3, [pc, #576]	; (801ca28 <_dtoa_r+0x648>)
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	4640      	mov	r0, r8
 801c7ec:	4649      	mov	r1, r9
 801c7ee:	f7e3 ff1b 	bl	8000628 <__aeabi_dmul>
 801c7f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7f6:	9e01      	ldr	r6, [sp, #4]
 801c7f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c7fc:	3501      	adds	r5, #1
 801c7fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801c802:	4628      	mov	r0, r5
 801c804:	f7e3 fea6 	bl	8000554 <__aeabi_i2d>
 801c808:	4642      	mov	r2, r8
 801c80a:	464b      	mov	r3, r9
 801c80c:	f7e3 ff0c 	bl	8000628 <__aeabi_dmul>
 801c810:	4b86      	ldr	r3, [pc, #536]	; (801ca2c <_dtoa_r+0x64c>)
 801c812:	2200      	movs	r2, #0
 801c814:	f7e3 fd52 	bl	80002bc <__adddf3>
 801c818:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801c81c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c820:	9303      	str	r3, [sp, #12]
 801c822:	2e00      	cmp	r6, #0
 801c824:	d158      	bne.n	801c8d8 <_dtoa_r+0x4f8>
 801c826:	4b82      	ldr	r3, [pc, #520]	; (801ca30 <_dtoa_r+0x650>)
 801c828:	2200      	movs	r2, #0
 801c82a:	4640      	mov	r0, r8
 801c82c:	4649      	mov	r1, r9
 801c82e:	f7e3 fd43 	bl	80002b8 <__aeabi_dsub>
 801c832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c836:	4680      	mov	r8, r0
 801c838:	4689      	mov	r9, r1
 801c83a:	f7e4 f985 	bl	8000b48 <__aeabi_dcmpgt>
 801c83e:	2800      	cmp	r0, #0
 801c840:	f040 8296 	bne.w	801cd70 <_dtoa_r+0x990>
 801c844:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801c848:	4640      	mov	r0, r8
 801c84a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801c84e:	4649      	mov	r1, r9
 801c850:	f7e4 f95c 	bl	8000b0c <__aeabi_dcmplt>
 801c854:	2800      	cmp	r0, #0
 801c856:	f040 8289 	bne.w	801cd6c <_dtoa_r+0x98c>
 801c85a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801c85e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c860:	2b00      	cmp	r3, #0
 801c862:	f2c0 814e 	blt.w	801cb02 <_dtoa_r+0x722>
 801c866:	f1bb 0f0e 	cmp.w	fp, #14
 801c86a:	f300 814a 	bgt.w	801cb02 <_dtoa_r+0x722>
 801c86e:	4b6b      	ldr	r3, [pc, #428]	; (801ca1c <_dtoa_r+0x63c>)
 801c870:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c874:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c878:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	f280 80dc 	bge.w	801ca38 <_dtoa_r+0x658>
 801c880:	9b04      	ldr	r3, [sp, #16]
 801c882:	2b00      	cmp	r3, #0
 801c884:	f300 80d8 	bgt.w	801ca38 <_dtoa_r+0x658>
 801c888:	f040 826f 	bne.w	801cd6a <_dtoa_r+0x98a>
 801c88c:	4b68      	ldr	r3, [pc, #416]	; (801ca30 <_dtoa_r+0x650>)
 801c88e:	2200      	movs	r2, #0
 801c890:	4640      	mov	r0, r8
 801c892:	4649      	mov	r1, r9
 801c894:	f7e3 fec8 	bl	8000628 <__aeabi_dmul>
 801c898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c89c:	f7e4 f94a 	bl	8000b34 <__aeabi_dcmpge>
 801c8a0:	9e04      	ldr	r6, [sp, #16]
 801c8a2:	4637      	mov	r7, r6
 801c8a4:	2800      	cmp	r0, #0
 801c8a6:	f040 8245 	bne.w	801cd34 <_dtoa_r+0x954>
 801c8aa:	9d00      	ldr	r5, [sp, #0]
 801c8ac:	2331      	movs	r3, #49	; 0x31
 801c8ae:	f805 3b01 	strb.w	r3, [r5], #1
 801c8b2:	f10b 0b01 	add.w	fp, fp, #1
 801c8b6:	e241      	b.n	801cd3c <_dtoa_r+0x95c>
 801c8b8:	07f2      	lsls	r2, r6, #31
 801c8ba:	d505      	bpl.n	801c8c8 <_dtoa_r+0x4e8>
 801c8bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c8c0:	f7e3 feb2 	bl	8000628 <__aeabi_dmul>
 801c8c4:	3501      	adds	r5, #1
 801c8c6:	2301      	movs	r3, #1
 801c8c8:	1076      	asrs	r6, r6, #1
 801c8ca:	3708      	adds	r7, #8
 801c8cc:	e773      	b.n	801c7b6 <_dtoa_r+0x3d6>
 801c8ce:	2502      	movs	r5, #2
 801c8d0:	e775      	b.n	801c7be <_dtoa_r+0x3de>
 801c8d2:	9e04      	ldr	r6, [sp, #16]
 801c8d4:	465f      	mov	r7, fp
 801c8d6:	e792      	b.n	801c7fe <_dtoa_r+0x41e>
 801c8d8:	9900      	ldr	r1, [sp, #0]
 801c8da:	4b50      	ldr	r3, [pc, #320]	; (801ca1c <_dtoa_r+0x63c>)
 801c8dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c8e0:	4431      	add	r1, r6
 801c8e2:	9102      	str	r1, [sp, #8]
 801c8e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c8e6:	eeb0 9a47 	vmov.f32	s18, s14
 801c8ea:	eef0 9a67 	vmov.f32	s19, s15
 801c8ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c8f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c8f6:	2900      	cmp	r1, #0
 801c8f8:	d044      	beq.n	801c984 <_dtoa_r+0x5a4>
 801c8fa:	494e      	ldr	r1, [pc, #312]	; (801ca34 <_dtoa_r+0x654>)
 801c8fc:	2000      	movs	r0, #0
 801c8fe:	f7e3 ffbd 	bl	800087c <__aeabi_ddiv>
 801c902:	ec53 2b19 	vmov	r2, r3, d9
 801c906:	f7e3 fcd7 	bl	80002b8 <__aeabi_dsub>
 801c90a:	9d00      	ldr	r5, [sp, #0]
 801c90c:	ec41 0b19 	vmov	d9, r0, r1
 801c910:	4649      	mov	r1, r9
 801c912:	4640      	mov	r0, r8
 801c914:	f7e4 f938 	bl	8000b88 <__aeabi_d2iz>
 801c918:	4606      	mov	r6, r0
 801c91a:	f7e3 fe1b 	bl	8000554 <__aeabi_i2d>
 801c91e:	4602      	mov	r2, r0
 801c920:	460b      	mov	r3, r1
 801c922:	4640      	mov	r0, r8
 801c924:	4649      	mov	r1, r9
 801c926:	f7e3 fcc7 	bl	80002b8 <__aeabi_dsub>
 801c92a:	3630      	adds	r6, #48	; 0x30
 801c92c:	f805 6b01 	strb.w	r6, [r5], #1
 801c930:	ec53 2b19 	vmov	r2, r3, d9
 801c934:	4680      	mov	r8, r0
 801c936:	4689      	mov	r9, r1
 801c938:	f7e4 f8e8 	bl	8000b0c <__aeabi_dcmplt>
 801c93c:	2800      	cmp	r0, #0
 801c93e:	d164      	bne.n	801ca0a <_dtoa_r+0x62a>
 801c940:	4642      	mov	r2, r8
 801c942:	464b      	mov	r3, r9
 801c944:	4937      	ldr	r1, [pc, #220]	; (801ca24 <_dtoa_r+0x644>)
 801c946:	2000      	movs	r0, #0
 801c948:	f7e3 fcb6 	bl	80002b8 <__aeabi_dsub>
 801c94c:	ec53 2b19 	vmov	r2, r3, d9
 801c950:	f7e4 f8dc 	bl	8000b0c <__aeabi_dcmplt>
 801c954:	2800      	cmp	r0, #0
 801c956:	f040 80b6 	bne.w	801cac6 <_dtoa_r+0x6e6>
 801c95a:	9b02      	ldr	r3, [sp, #8]
 801c95c:	429d      	cmp	r5, r3
 801c95e:	f43f af7c 	beq.w	801c85a <_dtoa_r+0x47a>
 801c962:	4b31      	ldr	r3, [pc, #196]	; (801ca28 <_dtoa_r+0x648>)
 801c964:	ec51 0b19 	vmov	r0, r1, d9
 801c968:	2200      	movs	r2, #0
 801c96a:	f7e3 fe5d 	bl	8000628 <__aeabi_dmul>
 801c96e:	4b2e      	ldr	r3, [pc, #184]	; (801ca28 <_dtoa_r+0x648>)
 801c970:	ec41 0b19 	vmov	d9, r0, r1
 801c974:	2200      	movs	r2, #0
 801c976:	4640      	mov	r0, r8
 801c978:	4649      	mov	r1, r9
 801c97a:	f7e3 fe55 	bl	8000628 <__aeabi_dmul>
 801c97e:	4680      	mov	r8, r0
 801c980:	4689      	mov	r9, r1
 801c982:	e7c5      	b.n	801c910 <_dtoa_r+0x530>
 801c984:	ec51 0b17 	vmov	r0, r1, d7
 801c988:	f7e3 fe4e 	bl	8000628 <__aeabi_dmul>
 801c98c:	9b02      	ldr	r3, [sp, #8]
 801c98e:	9d00      	ldr	r5, [sp, #0]
 801c990:	930f      	str	r3, [sp, #60]	; 0x3c
 801c992:	ec41 0b19 	vmov	d9, r0, r1
 801c996:	4649      	mov	r1, r9
 801c998:	4640      	mov	r0, r8
 801c99a:	f7e4 f8f5 	bl	8000b88 <__aeabi_d2iz>
 801c99e:	4606      	mov	r6, r0
 801c9a0:	f7e3 fdd8 	bl	8000554 <__aeabi_i2d>
 801c9a4:	3630      	adds	r6, #48	; 0x30
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	460b      	mov	r3, r1
 801c9aa:	4640      	mov	r0, r8
 801c9ac:	4649      	mov	r1, r9
 801c9ae:	f7e3 fc83 	bl	80002b8 <__aeabi_dsub>
 801c9b2:	f805 6b01 	strb.w	r6, [r5], #1
 801c9b6:	9b02      	ldr	r3, [sp, #8]
 801c9b8:	429d      	cmp	r5, r3
 801c9ba:	4680      	mov	r8, r0
 801c9bc:	4689      	mov	r9, r1
 801c9be:	f04f 0200 	mov.w	r2, #0
 801c9c2:	d124      	bne.n	801ca0e <_dtoa_r+0x62e>
 801c9c4:	4b1b      	ldr	r3, [pc, #108]	; (801ca34 <_dtoa_r+0x654>)
 801c9c6:	ec51 0b19 	vmov	r0, r1, d9
 801c9ca:	f7e3 fc77 	bl	80002bc <__adddf3>
 801c9ce:	4602      	mov	r2, r0
 801c9d0:	460b      	mov	r3, r1
 801c9d2:	4640      	mov	r0, r8
 801c9d4:	4649      	mov	r1, r9
 801c9d6:	f7e4 f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 801c9da:	2800      	cmp	r0, #0
 801c9dc:	d173      	bne.n	801cac6 <_dtoa_r+0x6e6>
 801c9de:	ec53 2b19 	vmov	r2, r3, d9
 801c9e2:	4914      	ldr	r1, [pc, #80]	; (801ca34 <_dtoa_r+0x654>)
 801c9e4:	2000      	movs	r0, #0
 801c9e6:	f7e3 fc67 	bl	80002b8 <__aeabi_dsub>
 801c9ea:	4602      	mov	r2, r0
 801c9ec:	460b      	mov	r3, r1
 801c9ee:	4640      	mov	r0, r8
 801c9f0:	4649      	mov	r1, r9
 801c9f2:	f7e4 f88b 	bl	8000b0c <__aeabi_dcmplt>
 801c9f6:	2800      	cmp	r0, #0
 801c9f8:	f43f af2f 	beq.w	801c85a <_dtoa_r+0x47a>
 801c9fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c9fe:	1e6b      	subs	r3, r5, #1
 801ca00:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801ca06:	2b30      	cmp	r3, #48	; 0x30
 801ca08:	d0f8      	beq.n	801c9fc <_dtoa_r+0x61c>
 801ca0a:	46bb      	mov	fp, r7
 801ca0c:	e04a      	b.n	801caa4 <_dtoa_r+0x6c4>
 801ca0e:	4b06      	ldr	r3, [pc, #24]	; (801ca28 <_dtoa_r+0x648>)
 801ca10:	f7e3 fe0a 	bl	8000628 <__aeabi_dmul>
 801ca14:	4680      	mov	r8, r0
 801ca16:	4689      	mov	r9, r1
 801ca18:	e7bd      	b.n	801c996 <_dtoa_r+0x5b6>
 801ca1a:	bf00      	nop
 801ca1c:	0806e238 	.word	0x0806e238
 801ca20:	0806e210 	.word	0x0806e210
 801ca24:	3ff00000 	.word	0x3ff00000
 801ca28:	40240000 	.word	0x40240000
 801ca2c:	401c0000 	.word	0x401c0000
 801ca30:	40140000 	.word	0x40140000
 801ca34:	3fe00000 	.word	0x3fe00000
 801ca38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ca3c:	9d00      	ldr	r5, [sp, #0]
 801ca3e:	4642      	mov	r2, r8
 801ca40:	464b      	mov	r3, r9
 801ca42:	4630      	mov	r0, r6
 801ca44:	4639      	mov	r1, r7
 801ca46:	f7e3 ff19 	bl	800087c <__aeabi_ddiv>
 801ca4a:	f7e4 f89d 	bl	8000b88 <__aeabi_d2iz>
 801ca4e:	9001      	str	r0, [sp, #4]
 801ca50:	f7e3 fd80 	bl	8000554 <__aeabi_i2d>
 801ca54:	4642      	mov	r2, r8
 801ca56:	464b      	mov	r3, r9
 801ca58:	f7e3 fde6 	bl	8000628 <__aeabi_dmul>
 801ca5c:	4602      	mov	r2, r0
 801ca5e:	460b      	mov	r3, r1
 801ca60:	4630      	mov	r0, r6
 801ca62:	4639      	mov	r1, r7
 801ca64:	f7e3 fc28 	bl	80002b8 <__aeabi_dsub>
 801ca68:	9e01      	ldr	r6, [sp, #4]
 801ca6a:	9f04      	ldr	r7, [sp, #16]
 801ca6c:	3630      	adds	r6, #48	; 0x30
 801ca6e:	f805 6b01 	strb.w	r6, [r5], #1
 801ca72:	9e00      	ldr	r6, [sp, #0]
 801ca74:	1bae      	subs	r6, r5, r6
 801ca76:	42b7      	cmp	r7, r6
 801ca78:	4602      	mov	r2, r0
 801ca7a:	460b      	mov	r3, r1
 801ca7c:	d134      	bne.n	801cae8 <_dtoa_r+0x708>
 801ca7e:	f7e3 fc1d 	bl	80002bc <__adddf3>
 801ca82:	4642      	mov	r2, r8
 801ca84:	464b      	mov	r3, r9
 801ca86:	4606      	mov	r6, r0
 801ca88:	460f      	mov	r7, r1
 801ca8a:	f7e4 f85d 	bl	8000b48 <__aeabi_dcmpgt>
 801ca8e:	b9c8      	cbnz	r0, 801cac4 <_dtoa_r+0x6e4>
 801ca90:	4642      	mov	r2, r8
 801ca92:	464b      	mov	r3, r9
 801ca94:	4630      	mov	r0, r6
 801ca96:	4639      	mov	r1, r7
 801ca98:	f7e4 f82e 	bl	8000af8 <__aeabi_dcmpeq>
 801ca9c:	b110      	cbz	r0, 801caa4 <_dtoa_r+0x6c4>
 801ca9e:	9b01      	ldr	r3, [sp, #4]
 801caa0:	07db      	lsls	r3, r3, #31
 801caa2:	d40f      	bmi.n	801cac4 <_dtoa_r+0x6e4>
 801caa4:	4651      	mov	r1, sl
 801caa6:	4620      	mov	r0, r4
 801caa8:	f000 fb18 	bl	801d0dc <_Bfree>
 801caac:	2300      	movs	r3, #0
 801caae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cab0:	702b      	strb	r3, [r5, #0]
 801cab2:	f10b 0301 	add.w	r3, fp, #1
 801cab6:	6013      	str	r3, [r2, #0]
 801cab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801caba:	2b00      	cmp	r3, #0
 801cabc:	f43f ace2 	beq.w	801c484 <_dtoa_r+0xa4>
 801cac0:	601d      	str	r5, [r3, #0]
 801cac2:	e4df      	b.n	801c484 <_dtoa_r+0xa4>
 801cac4:	465f      	mov	r7, fp
 801cac6:	462b      	mov	r3, r5
 801cac8:	461d      	mov	r5, r3
 801caca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cace:	2a39      	cmp	r2, #57	; 0x39
 801cad0:	d106      	bne.n	801cae0 <_dtoa_r+0x700>
 801cad2:	9a00      	ldr	r2, [sp, #0]
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d1f7      	bne.n	801cac8 <_dtoa_r+0x6e8>
 801cad8:	9900      	ldr	r1, [sp, #0]
 801cada:	2230      	movs	r2, #48	; 0x30
 801cadc:	3701      	adds	r7, #1
 801cade:	700a      	strb	r2, [r1, #0]
 801cae0:	781a      	ldrb	r2, [r3, #0]
 801cae2:	3201      	adds	r2, #1
 801cae4:	701a      	strb	r2, [r3, #0]
 801cae6:	e790      	b.n	801ca0a <_dtoa_r+0x62a>
 801cae8:	4ba3      	ldr	r3, [pc, #652]	; (801cd78 <_dtoa_r+0x998>)
 801caea:	2200      	movs	r2, #0
 801caec:	f7e3 fd9c 	bl	8000628 <__aeabi_dmul>
 801caf0:	2200      	movs	r2, #0
 801caf2:	2300      	movs	r3, #0
 801caf4:	4606      	mov	r6, r0
 801caf6:	460f      	mov	r7, r1
 801caf8:	f7e3 fffe 	bl	8000af8 <__aeabi_dcmpeq>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d09e      	beq.n	801ca3e <_dtoa_r+0x65e>
 801cb00:	e7d0      	b.n	801caa4 <_dtoa_r+0x6c4>
 801cb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb04:	2a00      	cmp	r2, #0
 801cb06:	f000 80ca 	beq.w	801cc9e <_dtoa_r+0x8be>
 801cb0a:	9a07      	ldr	r2, [sp, #28]
 801cb0c:	2a01      	cmp	r2, #1
 801cb0e:	f300 80ad 	bgt.w	801cc6c <_dtoa_r+0x88c>
 801cb12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb14:	2a00      	cmp	r2, #0
 801cb16:	f000 80a5 	beq.w	801cc64 <_dtoa_r+0x884>
 801cb1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801cb1e:	9e08      	ldr	r6, [sp, #32]
 801cb20:	9d05      	ldr	r5, [sp, #20]
 801cb22:	9a05      	ldr	r2, [sp, #20]
 801cb24:	441a      	add	r2, r3
 801cb26:	9205      	str	r2, [sp, #20]
 801cb28:	9a06      	ldr	r2, [sp, #24]
 801cb2a:	2101      	movs	r1, #1
 801cb2c:	441a      	add	r2, r3
 801cb2e:	4620      	mov	r0, r4
 801cb30:	9206      	str	r2, [sp, #24]
 801cb32:	f000 fb89 	bl	801d248 <__i2b>
 801cb36:	4607      	mov	r7, r0
 801cb38:	b165      	cbz	r5, 801cb54 <_dtoa_r+0x774>
 801cb3a:	9b06      	ldr	r3, [sp, #24]
 801cb3c:	2b00      	cmp	r3, #0
 801cb3e:	dd09      	ble.n	801cb54 <_dtoa_r+0x774>
 801cb40:	42ab      	cmp	r3, r5
 801cb42:	9a05      	ldr	r2, [sp, #20]
 801cb44:	bfa8      	it	ge
 801cb46:	462b      	movge	r3, r5
 801cb48:	1ad2      	subs	r2, r2, r3
 801cb4a:	9205      	str	r2, [sp, #20]
 801cb4c:	9a06      	ldr	r2, [sp, #24]
 801cb4e:	1aed      	subs	r5, r5, r3
 801cb50:	1ad3      	subs	r3, r2, r3
 801cb52:	9306      	str	r3, [sp, #24]
 801cb54:	9b08      	ldr	r3, [sp, #32]
 801cb56:	b1f3      	cbz	r3, 801cb96 <_dtoa_r+0x7b6>
 801cb58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	f000 80a3 	beq.w	801cca6 <_dtoa_r+0x8c6>
 801cb60:	2e00      	cmp	r6, #0
 801cb62:	dd10      	ble.n	801cb86 <_dtoa_r+0x7a6>
 801cb64:	4639      	mov	r1, r7
 801cb66:	4632      	mov	r2, r6
 801cb68:	4620      	mov	r0, r4
 801cb6a:	f000 fc2d 	bl	801d3c8 <__pow5mult>
 801cb6e:	4652      	mov	r2, sl
 801cb70:	4601      	mov	r1, r0
 801cb72:	4607      	mov	r7, r0
 801cb74:	4620      	mov	r0, r4
 801cb76:	f000 fb7d 	bl	801d274 <__multiply>
 801cb7a:	4651      	mov	r1, sl
 801cb7c:	4680      	mov	r8, r0
 801cb7e:	4620      	mov	r0, r4
 801cb80:	f000 faac 	bl	801d0dc <_Bfree>
 801cb84:	46c2      	mov	sl, r8
 801cb86:	9b08      	ldr	r3, [sp, #32]
 801cb88:	1b9a      	subs	r2, r3, r6
 801cb8a:	d004      	beq.n	801cb96 <_dtoa_r+0x7b6>
 801cb8c:	4651      	mov	r1, sl
 801cb8e:	4620      	mov	r0, r4
 801cb90:	f000 fc1a 	bl	801d3c8 <__pow5mult>
 801cb94:	4682      	mov	sl, r0
 801cb96:	2101      	movs	r1, #1
 801cb98:	4620      	mov	r0, r4
 801cb9a:	f000 fb55 	bl	801d248 <__i2b>
 801cb9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	4606      	mov	r6, r0
 801cba4:	f340 8081 	ble.w	801ccaa <_dtoa_r+0x8ca>
 801cba8:	461a      	mov	r2, r3
 801cbaa:	4601      	mov	r1, r0
 801cbac:	4620      	mov	r0, r4
 801cbae:	f000 fc0b 	bl	801d3c8 <__pow5mult>
 801cbb2:	9b07      	ldr	r3, [sp, #28]
 801cbb4:	2b01      	cmp	r3, #1
 801cbb6:	4606      	mov	r6, r0
 801cbb8:	dd7a      	ble.n	801ccb0 <_dtoa_r+0x8d0>
 801cbba:	f04f 0800 	mov.w	r8, #0
 801cbbe:	6933      	ldr	r3, [r6, #16]
 801cbc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801cbc4:	6918      	ldr	r0, [r3, #16]
 801cbc6:	f000 faf1 	bl	801d1ac <__hi0bits>
 801cbca:	f1c0 0020 	rsb	r0, r0, #32
 801cbce:	9b06      	ldr	r3, [sp, #24]
 801cbd0:	4418      	add	r0, r3
 801cbd2:	f010 001f 	ands.w	r0, r0, #31
 801cbd6:	f000 8094 	beq.w	801cd02 <_dtoa_r+0x922>
 801cbda:	f1c0 0320 	rsb	r3, r0, #32
 801cbde:	2b04      	cmp	r3, #4
 801cbe0:	f340 8085 	ble.w	801ccee <_dtoa_r+0x90e>
 801cbe4:	9b05      	ldr	r3, [sp, #20]
 801cbe6:	f1c0 001c 	rsb	r0, r0, #28
 801cbea:	4403      	add	r3, r0
 801cbec:	9305      	str	r3, [sp, #20]
 801cbee:	9b06      	ldr	r3, [sp, #24]
 801cbf0:	4403      	add	r3, r0
 801cbf2:	4405      	add	r5, r0
 801cbf4:	9306      	str	r3, [sp, #24]
 801cbf6:	9b05      	ldr	r3, [sp, #20]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	dd05      	ble.n	801cc08 <_dtoa_r+0x828>
 801cbfc:	4651      	mov	r1, sl
 801cbfe:	461a      	mov	r2, r3
 801cc00:	4620      	mov	r0, r4
 801cc02:	f000 fc3b 	bl	801d47c <__lshift>
 801cc06:	4682      	mov	sl, r0
 801cc08:	9b06      	ldr	r3, [sp, #24]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	dd05      	ble.n	801cc1a <_dtoa_r+0x83a>
 801cc0e:	4631      	mov	r1, r6
 801cc10:	461a      	mov	r2, r3
 801cc12:	4620      	mov	r0, r4
 801cc14:	f000 fc32 	bl	801d47c <__lshift>
 801cc18:	4606      	mov	r6, r0
 801cc1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d072      	beq.n	801cd06 <_dtoa_r+0x926>
 801cc20:	4631      	mov	r1, r6
 801cc22:	4650      	mov	r0, sl
 801cc24:	f000 fc96 	bl	801d554 <__mcmp>
 801cc28:	2800      	cmp	r0, #0
 801cc2a:	da6c      	bge.n	801cd06 <_dtoa_r+0x926>
 801cc2c:	2300      	movs	r3, #0
 801cc2e:	4651      	mov	r1, sl
 801cc30:	220a      	movs	r2, #10
 801cc32:	4620      	mov	r0, r4
 801cc34:	f000 fa74 	bl	801d120 <__multadd>
 801cc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc3e:	4682      	mov	sl, r0
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	f000 81b0 	beq.w	801cfa6 <_dtoa_r+0xbc6>
 801cc46:	2300      	movs	r3, #0
 801cc48:	4639      	mov	r1, r7
 801cc4a:	220a      	movs	r2, #10
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f000 fa67 	bl	801d120 <__multadd>
 801cc52:	9b01      	ldr	r3, [sp, #4]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	4607      	mov	r7, r0
 801cc58:	f300 8096 	bgt.w	801cd88 <_dtoa_r+0x9a8>
 801cc5c:	9b07      	ldr	r3, [sp, #28]
 801cc5e:	2b02      	cmp	r3, #2
 801cc60:	dc59      	bgt.n	801cd16 <_dtoa_r+0x936>
 801cc62:	e091      	b.n	801cd88 <_dtoa_r+0x9a8>
 801cc64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cc66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801cc6a:	e758      	b.n	801cb1e <_dtoa_r+0x73e>
 801cc6c:	9b04      	ldr	r3, [sp, #16]
 801cc6e:	1e5e      	subs	r6, r3, #1
 801cc70:	9b08      	ldr	r3, [sp, #32]
 801cc72:	42b3      	cmp	r3, r6
 801cc74:	bfbf      	itttt	lt
 801cc76:	9b08      	ldrlt	r3, [sp, #32]
 801cc78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801cc7a:	9608      	strlt	r6, [sp, #32]
 801cc7c:	1af3      	sublt	r3, r6, r3
 801cc7e:	bfb4      	ite	lt
 801cc80:	18d2      	addlt	r2, r2, r3
 801cc82:	1b9e      	subge	r6, r3, r6
 801cc84:	9b04      	ldr	r3, [sp, #16]
 801cc86:	bfbc      	itt	lt
 801cc88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801cc8a:	2600      	movlt	r6, #0
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	bfb7      	itett	lt
 801cc90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801cc94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801cc98:	1a9d      	sublt	r5, r3, r2
 801cc9a:	2300      	movlt	r3, #0
 801cc9c:	e741      	b.n	801cb22 <_dtoa_r+0x742>
 801cc9e:	9e08      	ldr	r6, [sp, #32]
 801cca0:	9d05      	ldr	r5, [sp, #20]
 801cca2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801cca4:	e748      	b.n	801cb38 <_dtoa_r+0x758>
 801cca6:	9a08      	ldr	r2, [sp, #32]
 801cca8:	e770      	b.n	801cb8c <_dtoa_r+0x7ac>
 801ccaa:	9b07      	ldr	r3, [sp, #28]
 801ccac:	2b01      	cmp	r3, #1
 801ccae:	dc19      	bgt.n	801cce4 <_dtoa_r+0x904>
 801ccb0:	9b02      	ldr	r3, [sp, #8]
 801ccb2:	b9bb      	cbnz	r3, 801cce4 <_dtoa_r+0x904>
 801ccb4:	9b03      	ldr	r3, [sp, #12]
 801ccb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ccba:	b99b      	cbnz	r3, 801cce4 <_dtoa_r+0x904>
 801ccbc:	9b03      	ldr	r3, [sp, #12]
 801ccbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ccc2:	0d1b      	lsrs	r3, r3, #20
 801ccc4:	051b      	lsls	r3, r3, #20
 801ccc6:	b183      	cbz	r3, 801ccea <_dtoa_r+0x90a>
 801ccc8:	9b05      	ldr	r3, [sp, #20]
 801ccca:	3301      	adds	r3, #1
 801cccc:	9305      	str	r3, [sp, #20]
 801ccce:	9b06      	ldr	r3, [sp, #24]
 801ccd0:	3301      	adds	r3, #1
 801ccd2:	9306      	str	r3, [sp, #24]
 801ccd4:	f04f 0801 	mov.w	r8, #1
 801ccd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	f47f af6f 	bne.w	801cbbe <_dtoa_r+0x7de>
 801cce0:	2001      	movs	r0, #1
 801cce2:	e774      	b.n	801cbce <_dtoa_r+0x7ee>
 801cce4:	f04f 0800 	mov.w	r8, #0
 801cce8:	e7f6      	b.n	801ccd8 <_dtoa_r+0x8f8>
 801ccea:	4698      	mov	r8, r3
 801ccec:	e7f4      	b.n	801ccd8 <_dtoa_r+0x8f8>
 801ccee:	d082      	beq.n	801cbf6 <_dtoa_r+0x816>
 801ccf0:	9a05      	ldr	r2, [sp, #20]
 801ccf2:	331c      	adds	r3, #28
 801ccf4:	441a      	add	r2, r3
 801ccf6:	9205      	str	r2, [sp, #20]
 801ccf8:	9a06      	ldr	r2, [sp, #24]
 801ccfa:	441a      	add	r2, r3
 801ccfc:	441d      	add	r5, r3
 801ccfe:	9206      	str	r2, [sp, #24]
 801cd00:	e779      	b.n	801cbf6 <_dtoa_r+0x816>
 801cd02:	4603      	mov	r3, r0
 801cd04:	e7f4      	b.n	801ccf0 <_dtoa_r+0x910>
 801cd06:	9b04      	ldr	r3, [sp, #16]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	dc37      	bgt.n	801cd7c <_dtoa_r+0x99c>
 801cd0c:	9b07      	ldr	r3, [sp, #28]
 801cd0e:	2b02      	cmp	r3, #2
 801cd10:	dd34      	ble.n	801cd7c <_dtoa_r+0x99c>
 801cd12:	9b04      	ldr	r3, [sp, #16]
 801cd14:	9301      	str	r3, [sp, #4]
 801cd16:	9b01      	ldr	r3, [sp, #4]
 801cd18:	b963      	cbnz	r3, 801cd34 <_dtoa_r+0x954>
 801cd1a:	4631      	mov	r1, r6
 801cd1c:	2205      	movs	r2, #5
 801cd1e:	4620      	mov	r0, r4
 801cd20:	f000 f9fe 	bl	801d120 <__multadd>
 801cd24:	4601      	mov	r1, r0
 801cd26:	4606      	mov	r6, r0
 801cd28:	4650      	mov	r0, sl
 801cd2a:	f000 fc13 	bl	801d554 <__mcmp>
 801cd2e:	2800      	cmp	r0, #0
 801cd30:	f73f adbb 	bgt.w	801c8aa <_dtoa_r+0x4ca>
 801cd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cd36:	9d00      	ldr	r5, [sp, #0]
 801cd38:	ea6f 0b03 	mvn.w	fp, r3
 801cd3c:	f04f 0800 	mov.w	r8, #0
 801cd40:	4631      	mov	r1, r6
 801cd42:	4620      	mov	r0, r4
 801cd44:	f000 f9ca 	bl	801d0dc <_Bfree>
 801cd48:	2f00      	cmp	r7, #0
 801cd4a:	f43f aeab 	beq.w	801caa4 <_dtoa_r+0x6c4>
 801cd4e:	f1b8 0f00 	cmp.w	r8, #0
 801cd52:	d005      	beq.n	801cd60 <_dtoa_r+0x980>
 801cd54:	45b8      	cmp	r8, r7
 801cd56:	d003      	beq.n	801cd60 <_dtoa_r+0x980>
 801cd58:	4641      	mov	r1, r8
 801cd5a:	4620      	mov	r0, r4
 801cd5c:	f000 f9be 	bl	801d0dc <_Bfree>
 801cd60:	4639      	mov	r1, r7
 801cd62:	4620      	mov	r0, r4
 801cd64:	f000 f9ba 	bl	801d0dc <_Bfree>
 801cd68:	e69c      	b.n	801caa4 <_dtoa_r+0x6c4>
 801cd6a:	2600      	movs	r6, #0
 801cd6c:	4637      	mov	r7, r6
 801cd6e:	e7e1      	b.n	801cd34 <_dtoa_r+0x954>
 801cd70:	46bb      	mov	fp, r7
 801cd72:	4637      	mov	r7, r6
 801cd74:	e599      	b.n	801c8aa <_dtoa_r+0x4ca>
 801cd76:	bf00      	nop
 801cd78:	40240000 	.word	0x40240000
 801cd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd7e:	2b00      	cmp	r3, #0
 801cd80:	f000 80c8 	beq.w	801cf14 <_dtoa_r+0xb34>
 801cd84:	9b04      	ldr	r3, [sp, #16]
 801cd86:	9301      	str	r3, [sp, #4]
 801cd88:	2d00      	cmp	r5, #0
 801cd8a:	dd05      	ble.n	801cd98 <_dtoa_r+0x9b8>
 801cd8c:	4639      	mov	r1, r7
 801cd8e:	462a      	mov	r2, r5
 801cd90:	4620      	mov	r0, r4
 801cd92:	f000 fb73 	bl	801d47c <__lshift>
 801cd96:	4607      	mov	r7, r0
 801cd98:	f1b8 0f00 	cmp.w	r8, #0
 801cd9c:	d05b      	beq.n	801ce56 <_dtoa_r+0xa76>
 801cd9e:	6879      	ldr	r1, [r7, #4]
 801cda0:	4620      	mov	r0, r4
 801cda2:	f000 f95b 	bl	801d05c <_Balloc>
 801cda6:	4605      	mov	r5, r0
 801cda8:	b928      	cbnz	r0, 801cdb6 <_dtoa_r+0x9d6>
 801cdaa:	4b83      	ldr	r3, [pc, #524]	; (801cfb8 <_dtoa_r+0xbd8>)
 801cdac:	4602      	mov	r2, r0
 801cdae:	f240 21ef 	movw	r1, #751	; 0x2ef
 801cdb2:	f7ff bb2e 	b.w	801c412 <_dtoa_r+0x32>
 801cdb6:	693a      	ldr	r2, [r7, #16]
 801cdb8:	3202      	adds	r2, #2
 801cdba:	0092      	lsls	r2, r2, #2
 801cdbc:	f107 010c 	add.w	r1, r7, #12
 801cdc0:	300c      	adds	r0, #12
 801cdc2:	f7ff fa58 	bl	801c276 <memcpy>
 801cdc6:	2201      	movs	r2, #1
 801cdc8:	4629      	mov	r1, r5
 801cdca:	4620      	mov	r0, r4
 801cdcc:	f000 fb56 	bl	801d47c <__lshift>
 801cdd0:	9b00      	ldr	r3, [sp, #0]
 801cdd2:	3301      	adds	r3, #1
 801cdd4:	9304      	str	r3, [sp, #16]
 801cdd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cdda:	4413      	add	r3, r2
 801cddc:	9308      	str	r3, [sp, #32]
 801cdde:	9b02      	ldr	r3, [sp, #8]
 801cde0:	f003 0301 	and.w	r3, r3, #1
 801cde4:	46b8      	mov	r8, r7
 801cde6:	9306      	str	r3, [sp, #24]
 801cde8:	4607      	mov	r7, r0
 801cdea:	9b04      	ldr	r3, [sp, #16]
 801cdec:	4631      	mov	r1, r6
 801cdee:	3b01      	subs	r3, #1
 801cdf0:	4650      	mov	r0, sl
 801cdf2:	9301      	str	r3, [sp, #4]
 801cdf4:	f7ff fa6c 	bl	801c2d0 <quorem>
 801cdf8:	4641      	mov	r1, r8
 801cdfa:	9002      	str	r0, [sp, #8]
 801cdfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801ce00:	4650      	mov	r0, sl
 801ce02:	f000 fba7 	bl	801d554 <__mcmp>
 801ce06:	463a      	mov	r2, r7
 801ce08:	9005      	str	r0, [sp, #20]
 801ce0a:	4631      	mov	r1, r6
 801ce0c:	4620      	mov	r0, r4
 801ce0e:	f000 fbbd 	bl	801d58c <__mdiff>
 801ce12:	68c2      	ldr	r2, [r0, #12]
 801ce14:	4605      	mov	r5, r0
 801ce16:	bb02      	cbnz	r2, 801ce5a <_dtoa_r+0xa7a>
 801ce18:	4601      	mov	r1, r0
 801ce1a:	4650      	mov	r0, sl
 801ce1c:	f000 fb9a 	bl	801d554 <__mcmp>
 801ce20:	4602      	mov	r2, r0
 801ce22:	4629      	mov	r1, r5
 801ce24:	4620      	mov	r0, r4
 801ce26:	9209      	str	r2, [sp, #36]	; 0x24
 801ce28:	f000 f958 	bl	801d0dc <_Bfree>
 801ce2c:	9b07      	ldr	r3, [sp, #28]
 801ce2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ce30:	9d04      	ldr	r5, [sp, #16]
 801ce32:	ea43 0102 	orr.w	r1, r3, r2
 801ce36:	9b06      	ldr	r3, [sp, #24]
 801ce38:	4319      	orrs	r1, r3
 801ce3a:	d110      	bne.n	801ce5e <_dtoa_r+0xa7e>
 801ce3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ce40:	d029      	beq.n	801ce96 <_dtoa_r+0xab6>
 801ce42:	9b05      	ldr	r3, [sp, #20]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	dd02      	ble.n	801ce4e <_dtoa_r+0xa6e>
 801ce48:	9b02      	ldr	r3, [sp, #8]
 801ce4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801ce4e:	9b01      	ldr	r3, [sp, #4]
 801ce50:	f883 9000 	strb.w	r9, [r3]
 801ce54:	e774      	b.n	801cd40 <_dtoa_r+0x960>
 801ce56:	4638      	mov	r0, r7
 801ce58:	e7ba      	b.n	801cdd0 <_dtoa_r+0x9f0>
 801ce5a:	2201      	movs	r2, #1
 801ce5c:	e7e1      	b.n	801ce22 <_dtoa_r+0xa42>
 801ce5e:	9b05      	ldr	r3, [sp, #20]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	db04      	blt.n	801ce6e <_dtoa_r+0xa8e>
 801ce64:	9907      	ldr	r1, [sp, #28]
 801ce66:	430b      	orrs	r3, r1
 801ce68:	9906      	ldr	r1, [sp, #24]
 801ce6a:	430b      	orrs	r3, r1
 801ce6c:	d120      	bne.n	801ceb0 <_dtoa_r+0xad0>
 801ce6e:	2a00      	cmp	r2, #0
 801ce70:	dded      	ble.n	801ce4e <_dtoa_r+0xa6e>
 801ce72:	4651      	mov	r1, sl
 801ce74:	2201      	movs	r2, #1
 801ce76:	4620      	mov	r0, r4
 801ce78:	f000 fb00 	bl	801d47c <__lshift>
 801ce7c:	4631      	mov	r1, r6
 801ce7e:	4682      	mov	sl, r0
 801ce80:	f000 fb68 	bl	801d554 <__mcmp>
 801ce84:	2800      	cmp	r0, #0
 801ce86:	dc03      	bgt.n	801ce90 <_dtoa_r+0xab0>
 801ce88:	d1e1      	bne.n	801ce4e <_dtoa_r+0xa6e>
 801ce8a:	f019 0f01 	tst.w	r9, #1
 801ce8e:	d0de      	beq.n	801ce4e <_dtoa_r+0xa6e>
 801ce90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ce94:	d1d8      	bne.n	801ce48 <_dtoa_r+0xa68>
 801ce96:	9a01      	ldr	r2, [sp, #4]
 801ce98:	2339      	movs	r3, #57	; 0x39
 801ce9a:	7013      	strb	r3, [r2, #0]
 801ce9c:	462b      	mov	r3, r5
 801ce9e:	461d      	mov	r5, r3
 801cea0:	3b01      	subs	r3, #1
 801cea2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cea6:	2a39      	cmp	r2, #57	; 0x39
 801cea8:	d06c      	beq.n	801cf84 <_dtoa_r+0xba4>
 801ceaa:	3201      	adds	r2, #1
 801ceac:	701a      	strb	r2, [r3, #0]
 801ceae:	e747      	b.n	801cd40 <_dtoa_r+0x960>
 801ceb0:	2a00      	cmp	r2, #0
 801ceb2:	dd07      	ble.n	801cec4 <_dtoa_r+0xae4>
 801ceb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801ceb8:	d0ed      	beq.n	801ce96 <_dtoa_r+0xab6>
 801ceba:	9a01      	ldr	r2, [sp, #4]
 801cebc:	f109 0301 	add.w	r3, r9, #1
 801cec0:	7013      	strb	r3, [r2, #0]
 801cec2:	e73d      	b.n	801cd40 <_dtoa_r+0x960>
 801cec4:	9b04      	ldr	r3, [sp, #16]
 801cec6:	9a08      	ldr	r2, [sp, #32]
 801cec8:	f803 9c01 	strb.w	r9, [r3, #-1]
 801cecc:	4293      	cmp	r3, r2
 801cece:	d043      	beq.n	801cf58 <_dtoa_r+0xb78>
 801ced0:	4651      	mov	r1, sl
 801ced2:	2300      	movs	r3, #0
 801ced4:	220a      	movs	r2, #10
 801ced6:	4620      	mov	r0, r4
 801ced8:	f000 f922 	bl	801d120 <__multadd>
 801cedc:	45b8      	cmp	r8, r7
 801cede:	4682      	mov	sl, r0
 801cee0:	f04f 0300 	mov.w	r3, #0
 801cee4:	f04f 020a 	mov.w	r2, #10
 801cee8:	4641      	mov	r1, r8
 801ceea:	4620      	mov	r0, r4
 801ceec:	d107      	bne.n	801cefe <_dtoa_r+0xb1e>
 801ceee:	f000 f917 	bl	801d120 <__multadd>
 801cef2:	4680      	mov	r8, r0
 801cef4:	4607      	mov	r7, r0
 801cef6:	9b04      	ldr	r3, [sp, #16]
 801cef8:	3301      	adds	r3, #1
 801cefa:	9304      	str	r3, [sp, #16]
 801cefc:	e775      	b.n	801cdea <_dtoa_r+0xa0a>
 801cefe:	f000 f90f 	bl	801d120 <__multadd>
 801cf02:	4639      	mov	r1, r7
 801cf04:	4680      	mov	r8, r0
 801cf06:	2300      	movs	r3, #0
 801cf08:	220a      	movs	r2, #10
 801cf0a:	4620      	mov	r0, r4
 801cf0c:	f000 f908 	bl	801d120 <__multadd>
 801cf10:	4607      	mov	r7, r0
 801cf12:	e7f0      	b.n	801cef6 <_dtoa_r+0xb16>
 801cf14:	9b04      	ldr	r3, [sp, #16]
 801cf16:	9301      	str	r3, [sp, #4]
 801cf18:	9d00      	ldr	r5, [sp, #0]
 801cf1a:	4631      	mov	r1, r6
 801cf1c:	4650      	mov	r0, sl
 801cf1e:	f7ff f9d7 	bl	801c2d0 <quorem>
 801cf22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801cf26:	9b00      	ldr	r3, [sp, #0]
 801cf28:	f805 9b01 	strb.w	r9, [r5], #1
 801cf2c:	1aea      	subs	r2, r5, r3
 801cf2e:	9b01      	ldr	r3, [sp, #4]
 801cf30:	4293      	cmp	r3, r2
 801cf32:	dd07      	ble.n	801cf44 <_dtoa_r+0xb64>
 801cf34:	4651      	mov	r1, sl
 801cf36:	2300      	movs	r3, #0
 801cf38:	220a      	movs	r2, #10
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f000 f8f0 	bl	801d120 <__multadd>
 801cf40:	4682      	mov	sl, r0
 801cf42:	e7ea      	b.n	801cf1a <_dtoa_r+0xb3a>
 801cf44:	9b01      	ldr	r3, [sp, #4]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	bfc8      	it	gt
 801cf4a:	461d      	movgt	r5, r3
 801cf4c:	9b00      	ldr	r3, [sp, #0]
 801cf4e:	bfd8      	it	le
 801cf50:	2501      	movle	r5, #1
 801cf52:	441d      	add	r5, r3
 801cf54:	f04f 0800 	mov.w	r8, #0
 801cf58:	4651      	mov	r1, sl
 801cf5a:	2201      	movs	r2, #1
 801cf5c:	4620      	mov	r0, r4
 801cf5e:	f000 fa8d 	bl	801d47c <__lshift>
 801cf62:	4631      	mov	r1, r6
 801cf64:	4682      	mov	sl, r0
 801cf66:	f000 faf5 	bl	801d554 <__mcmp>
 801cf6a:	2800      	cmp	r0, #0
 801cf6c:	dc96      	bgt.n	801ce9c <_dtoa_r+0xabc>
 801cf6e:	d102      	bne.n	801cf76 <_dtoa_r+0xb96>
 801cf70:	f019 0f01 	tst.w	r9, #1
 801cf74:	d192      	bne.n	801ce9c <_dtoa_r+0xabc>
 801cf76:	462b      	mov	r3, r5
 801cf78:	461d      	mov	r5, r3
 801cf7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf7e:	2a30      	cmp	r2, #48	; 0x30
 801cf80:	d0fa      	beq.n	801cf78 <_dtoa_r+0xb98>
 801cf82:	e6dd      	b.n	801cd40 <_dtoa_r+0x960>
 801cf84:	9a00      	ldr	r2, [sp, #0]
 801cf86:	429a      	cmp	r2, r3
 801cf88:	d189      	bne.n	801ce9e <_dtoa_r+0xabe>
 801cf8a:	f10b 0b01 	add.w	fp, fp, #1
 801cf8e:	2331      	movs	r3, #49	; 0x31
 801cf90:	e796      	b.n	801cec0 <_dtoa_r+0xae0>
 801cf92:	4b0a      	ldr	r3, [pc, #40]	; (801cfbc <_dtoa_r+0xbdc>)
 801cf94:	f7ff ba99 	b.w	801c4ca <_dtoa_r+0xea>
 801cf98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	f47f aa6d 	bne.w	801c47a <_dtoa_r+0x9a>
 801cfa0:	4b07      	ldr	r3, [pc, #28]	; (801cfc0 <_dtoa_r+0xbe0>)
 801cfa2:	f7ff ba92 	b.w	801c4ca <_dtoa_r+0xea>
 801cfa6:	9b01      	ldr	r3, [sp, #4]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	dcb5      	bgt.n	801cf18 <_dtoa_r+0xb38>
 801cfac:	9b07      	ldr	r3, [sp, #28]
 801cfae:	2b02      	cmp	r3, #2
 801cfb0:	f73f aeb1 	bgt.w	801cd16 <_dtoa_r+0x936>
 801cfb4:	e7b0      	b.n	801cf18 <_dtoa_r+0xb38>
 801cfb6:	bf00      	nop
 801cfb8:	0806e1a1 	.word	0x0806e1a1
 801cfbc:	0806e0dc 	.word	0x0806e0dc
 801cfc0:	0806e13c 	.word	0x0806e13c

0801cfc4 <_free_r>:
 801cfc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cfc6:	2900      	cmp	r1, #0
 801cfc8:	d044      	beq.n	801d054 <_free_r+0x90>
 801cfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cfce:	9001      	str	r0, [sp, #4]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	f1a1 0404 	sub.w	r4, r1, #4
 801cfd6:	bfb8      	it	lt
 801cfd8:	18e4      	addlt	r4, r4, r3
 801cfda:	f7fe f937 	bl	801b24c <__malloc_lock>
 801cfde:	4a1e      	ldr	r2, [pc, #120]	; (801d058 <_free_r+0x94>)
 801cfe0:	9801      	ldr	r0, [sp, #4]
 801cfe2:	6813      	ldr	r3, [r2, #0]
 801cfe4:	b933      	cbnz	r3, 801cff4 <_free_r+0x30>
 801cfe6:	6063      	str	r3, [r4, #4]
 801cfe8:	6014      	str	r4, [r2, #0]
 801cfea:	b003      	add	sp, #12
 801cfec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cff0:	f7fe b932 	b.w	801b258 <__malloc_unlock>
 801cff4:	42a3      	cmp	r3, r4
 801cff6:	d908      	bls.n	801d00a <_free_r+0x46>
 801cff8:	6825      	ldr	r5, [r4, #0]
 801cffa:	1961      	adds	r1, r4, r5
 801cffc:	428b      	cmp	r3, r1
 801cffe:	bf01      	itttt	eq
 801d000:	6819      	ldreq	r1, [r3, #0]
 801d002:	685b      	ldreq	r3, [r3, #4]
 801d004:	1949      	addeq	r1, r1, r5
 801d006:	6021      	streq	r1, [r4, #0]
 801d008:	e7ed      	b.n	801cfe6 <_free_r+0x22>
 801d00a:	461a      	mov	r2, r3
 801d00c:	685b      	ldr	r3, [r3, #4]
 801d00e:	b10b      	cbz	r3, 801d014 <_free_r+0x50>
 801d010:	42a3      	cmp	r3, r4
 801d012:	d9fa      	bls.n	801d00a <_free_r+0x46>
 801d014:	6811      	ldr	r1, [r2, #0]
 801d016:	1855      	adds	r5, r2, r1
 801d018:	42a5      	cmp	r5, r4
 801d01a:	d10b      	bne.n	801d034 <_free_r+0x70>
 801d01c:	6824      	ldr	r4, [r4, #0]
 801d01e:	4421      	add	r1, r4
 801d020:	1854      	adds	r4, r2, r1
 801d022:	42a3      	cmp	r3, r4
 801d024:	6011      	str	r1, [r2, #0]
 801d026:	d1e0      	bne.n	801cfea <_free_r+0x26>
 801d028:	681c      	ldr	r4, [r3, #0]
 801d02a:	685b      	ldr	r3, [r3, #4]
 801d02c:	6053      	str	r3, [r2, #4]
 801d02e:	440c      	add	r4, r1
 801d030:	6014      	str	r4, [r2, #0]
 801d032:	e7da      	b.n	801cfea <_free_r+0x26>
 801d034:	d902      	bls.n	801d03c <_free_r+0x78>
 801d036:	230c      	movs	r3, #12
 801d038:	6003      	str	r3, [r0, #0]
 801d03a:	e7d6      	b.n	801cfea <_free_r+0x26>
 801d03c:	6825      	ldr	r5, [r4, #0]
 801d03e:	1961      	adds	r1, r4, r5
 801d040:	428b      	cmp	r3, r1
 801d042:	bf04      	itt	eq
 801d044:	6819      	ldreq	r1, [r3, #0]
 801d046:	685b      	ldreq	r3, [r3, #4]
 801d048:	6063      	str	r3, [r4, #4]
 801d04a:	bf04      	itt	eq
 801d04c:	1949      	addeq	r1, r1, r5
 801d04e:	6021      	streq	r1, [r4, #0]
 801d050:	6054      	str	r4, [r2, #4]
 801d052:	e7ca      	b.n	801cfea <_free_r+0x26>
 801d054:	b003      	add	sp, #12
 801d056:	bd30      	pop	{r4, r5, pc}
 801d058:	20013e70 	.word	0x20013e70

0801d05c <_Balloc>:
 801d05c:	b570      	push	{r4, r5, r6, lr}
 801d05e:	69c6      	ldr	r6, [r0, #28]
 801d060:	4604      	mov	r4, r0
 801d062:	460d      	mov	r5, r1
 801d064:	b976      	cbnz	r6, 801d084 <_Balloc+0x28>
 801d066:	2010      	movs	r0, #16
 801d068:	f7fe f848 	bl	801b0fc <malloc>
 801d06c:	4602      	mov	r2, r0
 801d06e:	61e0      	str	r0, [r4, #28]
 801d070:	b920      	cbnz	r0, 801d07c <_Balloc+0x20>
 801d072:	4b18      	ldr	r3, [pc, #96]	; (801d0d4 <_Balloc+0x78>)
 801d074:	4818      	ldr	r0, [pc, #96]	; (801d0d8 <_Balloc+0x7c>)
 801d076:	216b      	movs	r1, #107	; 0x6b
 801d078:	f7ff f90c 	bl	801c294 <__assert_func>
 801d07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d080:	6006      	str	r6, [r0, #0]
 801d082:	60c6      	str	r6, [r0, #12]
 801d084:	69e6      	ldr	r6, [r4, #28]
 801d086:	68f3      	ldr	r3, [r6, #12]
 801d088:	b183      	cbz	r3, 801d0ac <_Balloc+0x50>
 801d08a:	69e3      	ldr	r3, [r4, #28]
 801d08c:	68db      	ldr	r3, [r3, #12]
 801d08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d092:	b9b8      	cbnz	r0, 801d0c4 <_Balloc+0x68>
 801d094:	2101      	movs	r1, #1
 801d096:	fa01 f605 	lsl.w	r6, r1, r5
 801d09a:	1d72      	adds	r2, r6, #5
 801d09c:	0092      	lsls	r2, r2, #2
 801d09e:	4620      	mov	r0, r4
 801d0a0:	f7fe f816 	bl	801b0d0 <_calloc_r>
 801d0a4:	b160      	cbz	r0, 801d0c0 <_Balloc+0x64>
 801d0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d0aa:	e00e      	b.n	801d0ca <_Balloc+0x6e>
 801d0ac:	2221      	movs	r2, #33	; 0x21
 801d0ae:	2104      	movs	r1, #4
 801d0b0:	4620      	mov	r0, r4
 801d0b2:	f7fe f80d 	bl	801b0d0 <_calloc_r>
 801d0b6:	69e3      	ldr	r3, [r4, #28]
 801d0b8:	60f0      	str	r0, [r6, #12]
 801d0ba:	68db      	ldr	r3, [r3, #12]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d1e4      	bne.n	801d08a <_Balloc+0x2e>
 801d0c0:	2000      	movs	r0, #0
 801d0c2:	bd70      	pop	{r4, r5, r6, pc}
 801d0c4:	6802      	ldr	r2, [r0, #0]
 801d0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d0d0:	e7f7      	b.n	801d0c2 <_Balloc+0x66>
 801d0d2:	bf00      	nop
 801d0d4:	0806df5c 	.word	0x0806df5c
 801d0d8:	0806e1b2 	.word	0x0806e1b2

0801d0dc <_Bfree>:
 801d0dc:	b570      	push	{r4, r5, r6, lr}
 801d0de:	69c6      	ldr	r6, [r0, #28]
 801d0e0:	4605      	mov	r5, r0
 801d0e2:	460c      	mov	r4, r1
 801d0e4:	b976      	cbnz	r6, 801d104 <_Bfree+0x28>
 801d0e6:	2010      	movs	r0, #16
 801d0e8:	f7fe f808 	bl	801b0fc <malloc>
 801d0ec:	4602      	mov	r2, r0
 801d0ee:	61e8      	str	r0, [r5, #28]
 801d0f0:	b920      	cbnz	r0, 801d0fc <_Bfree+0x20>
 801d0f2:	4b09      	ldr	r3, [pc, #36]	; (801d118 <_Bfree+0x3c>)
 801d0f4:	4809      	ldr	r0, [pc, #36]	; (801d11c <_Bfree+0x40>)
 801d0f6:	218f      	movs	r1, #143	; 0x8f
 801d0f8:	f7ff f8cc 	bl	801c294 <__assert_func>
 801d0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d100:	6006      	str	r6, [r0, #0]
 801d102:	60c6      	str	r6, [r0, #12]
 801d104:	b13c      	cbz	r4, 801d116 <_Bfree+0x3a>
 801d106:	69eb      	ldr	r3, [r5, #28]
 801d108:	6862      	ldr	r2, [r4, #4]
 801d10a:	68db      	ldr	r3, [r3, #12]
 801d10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d110:	6021      	str	r1, [r4, #0]
 801d112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d116:	bd70      	pop	{r4, r5, r6, pc}
 801d118:	0806df5c 	.word	0x0806df5c
 801d11c:	0806e1b2 	.word	0x0806e1b2

0801d120 <__multadd>:
 801d120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d124:	690d      	ldr	r5, [r1, #16]
 801d126:	4607      	mov	r7, r0
 801d128:	460c      	mov	r4, r1
 801d12a:	461e      	mov	r6, r3
 801d12c:	f101 0c14 	add.w	ip, r1, #20
 801d130:	2000      	movs	r0, #0
 801d132:	f8dc 3000 	ldr.w	r3, [ip]
 801d136:	b299      	uxth	r1, r3
 801d138:	fb02 6101 	mla	r1, r2, r1, r6
 801d13c:	0c1e      	lsrs	r6, r3, #16
 801d13e:	0c0b      	lsrs	r3, r1, #16
 801d140:	fb02 3306 	mla	r3, r2, r6, r3
 801d144:	b289      	uxth	r1, r1
 801d146:	3001      	adds	r0, #1
 801d148:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d14c:	4285      	cmp	r5, r0
 801d14e:	f84c 1b04 	str.w	r1, [ip], #4
 801d152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d156:	dcec      	bgt.n	801d132 <__multadd+0x12>
 801d158:	b30e      	cbz	r6, 801d19e <__multadd+0x7e>
 801d15a:	68a3      	ldr	r3, [r4, #8]
 801d15c:	42ab      	cmp	r3, r5
 801d15e:	dc19      	bgt.n	801d194 <__multadd+0x74>
 801d160:	6861      	ldr	r1, [r4, #4]
 801d162:	4638      	mov	r0, r7
 801d164:	3101      	adds	r1, #1
 801d166:	f7ff ff79 	bl	801d05c <_Balloc>
 801d16a:	4680      	mov	r8, r0
 801d16c:	b928      	cbnz	r0, 801d17a <__multadd+0x5a>
 801d16e:	4602      	mov	r2, r0
 801d170:	4b0c      	ldr	r3, [pc, #48]	; (801d1a4 <__multadd+0x84>)
 801d172:	480d      	ldr	r0, [pc, #52]	; (801d1a8 <__multadd+0x88>)
 801d174:	21ba      	movs	r1, #186	; 0xba
 801d176:	f7ff f88d 	bl	801c294 <__assert_func>
 801d17a:	6922      	ldr	r2, [r4, #16]
 801d17c:	3202      	adds	r2, #2
 801d17e:	f104 010c 	add.w	r1, r4, #12
 801d182:	0092      	lsls	r2, r2, #2
 801d184:	300c      	adds	r0, #12
 801d186:	f7ff f876 	bl	801c276 <memcpy>
 801d18a:	4621      	mov	r1, r4
 801d18c:	4638      	mov	r0, r7
 801d18e:	f7ff ffa5 	bl	801d0dc <_Bfree>
 801d192:	4644      	mov	r4, r8
 801d194:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d198:	3501      	adds	r5, #1
 801d19a:	615e      	str	r6, [r3, #20]
 801d19c:	6125      	str	r5, [r4, #16]
 801d19e:	4620      	mov	r0, r4
 801d1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1a4:	0806e1a1 	.word	0x0806e1a1
 801d1a8:	0806e1b2 	.word	0x0806e1b2

0801d1ac <__hi0bits>:
 801d1ac:	0c03      	lsrs	r3, r0, #16
 801d1ae:	041b      	lsls	r3, r3, #16
 801d1b0:	b9d3      	cbnz	r3, 801d1e8 <__hi0bits+0x3c>
 801d1b2:	0400      	lsls	r0, r0, #16
 801d1b4:	2310      	movs	r3, #16
 801d1b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d1ba:	bf04      	itt	eq
 801d1bc:	0200      	lsleq	r0, r0, #8
 801d1be:	3308      	addeq	r3, #8
 801d1c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d1c4:	bf04      	itt	eq
 801d1c6:	0100      	lsleq	r0, r0, #4
 801d1c8:	3304      	addeq	r3, #4
 801d1ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d1ce:	bf04      	itt	eq
 801d1d0:	0080      	lsleq	r0, r0, #2
 801d1d2:	3302      	addeq	r3, #2
 801d1d4:	2800      	cmp	r0, #0
 801d1d6:	db05      	blt.n	801d1e4 <__hi0bits+0x38>
 801d1d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d1dc:	f103 0301 	add.w	r3, r3, #1
 801d1e0:	bf08      	it	eq
 801d1e2:	2320      	moveq	r3, #32
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	4770      	bx	lr
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	e7e4      	b.n	801d1b6 <__hi0bits+0xa>

0801d1ec <__lo0bits>:
 801d1ec:	6803      	ldr	r3, [r0, #0]
 801d1ee:	f013 0207 	ands.w	r2, r3, #7
 801d1f2:	d00c      	beq.n	801d20e <__lo0bits+0x22>
 801d1f4:	07d9      	lsls	r1, r3, #31
 801d1f6:	d422      	bmi.n	801d23e <__lo0bits+0x52>
 801d1f8:	079a      	lsls	r2, r3, #30
 801d1fa:	bf49      	itett	mi
 801d1fc:	085b      	lsrmi	r3, r3, #1
 801d1fe:	089b      	lsrpl	r3, r3, #2
 801d200:	6003      	strmi	r3, [r0, #0]
 801d202:	2201      	movmi	r2, #1
 801d204:	bf5c      	itt	pl
 801d206:	6003      	strpl	r3, [r0, #0]
 801d208:	2202      	movpl	r2, #2
 801d20a:	4610      	mov	r0, r2
 801d20c:	4770      	bx	lr
 801d20e:	b299      	uxth	r1, r3
 801d210:	b909      	cbnz	r1, 801d216 <__lo0bits+0x2a>
 801d212:	0c1b      	lsrs	r3, r3, #16
 801d214:	2210      	movs	r2, #16
 801d216:	b2d9      	uxtb	r1, r3
 801d218:	b909      	cbnz	r1, 801d21e <__lo0bits+0x32>
 801d21a:	3208      	adds	r2, #8
 801d21c:	0a1b      	lsrs	r3, r3, #8
 801d21e:	0719      	lsls	r1, r3, #28
 801d220:	bf04      	itt	eq
 801d222:	091b      	lsreq	r3, r3, #4
 801d224:	3204      	addeq	r2, #4
 801d226:	0799      	lsls	r1, r3, #30
 801d228:	bf04      	itt	eq
 801d22a:	089b      	lsreq	r3, r3, #2
 801d22c:	3202      	addeq	r2, #2
 801d22e:	07d9      	lsls	r1, r3, #31
 801d230:	d403      	bmi.n	801d23a <__lo0bits+0x4e>
 801d232:	085b      	lsrs	r3, r3, #1
 801d234:	f102 0201 	add.w	r2, r2, #1
 801d238:	d003      	beq.n	801d242 <__lo0bits+0x56>
 801d23a:	6003      	str	r3, [r0, #0]
 801d23c:	e7e5      	b.n	801d20a <__lo0bits+0x1e>
 801d23e:	2200      	movs	r2, #0
 801d240:	e7e3      	b.n	801d20a <__lo0bits+0x1e>
 801d242:	2220      	movs	r2, #32
 801d244:	e7e1      	b.n	801d20a <__lo0bits+0x1e>
	...

0801d248 <__i2b>:
 801d248:	b510      	push	{r4, lr}
 801d24a:	460c      	mov	r4, r1
 801d24c:	2101      	movs	r1, #1
 801d24e:	f7ff ff05 	bl	801d05c <_Balloc>
 801d252:	4602      	mov	r2, r0
 801d254:	b928      	cbnz	r0, 801d262 <__i2b+0x1a>
 801d256:	4b05      	ldr	r3, [pc, #20]	; (801d26c <__i2b+0x24>)
 801d258:	4805      	ldr	r0, [pc, #20]	; (801d270 <__i2b+0x28>)
 801d25a:	f240 1145 	movw	r1, #325	; 0x145
 801d25e:	f7ff f819 	bl	801c294 <__assert_func>
 801d262:	2301      	movs	r3, #1
 801d264:	6144      	str	r4, [r0, #20]
 801d266:	6103      	str	r3, [r0, #16]
 801d268:	bd10      	pop	{r4, pc}
 801d26a:	bf00      	nop
 801d26c:	0806e1a1 	.word	0x0806e1a1
 801d270:	0806e1b2 	.word	0x0806e1b2

0801d274 <__multiply>:
 801d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d278:	4691      	mov	r9, r2
 801d27a:	690a      	ldr	r2, [r1, #16]
 801d27c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d280:	429a      	cmp	r2, r3
 801d282:	bfb8      	it	lt
 801d284:	460b      	movlt	r3, r1
 801d286:	460c      	mov	r4, r1
 801d288:	bfbc      	itt	lt
 801d28a:	464c      	movlt	r4, r9
 801d28c:	4699      	movlt	r9, r3
 801d28e:	6927      	ldr	r7, [r4, #16]
 801d290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d294:	68a3      	ldr	r3, [r4, #8]
 801d296:	6861      	ldr	r1, [r4, #4]
 801d298:	eb07 060a 	add.w	r6, r7, sl
 801d29c:	42b3      	cmp	r3, r6
 801d29e:	b085      	sub	sp, #20
 801d2a0:	bfb8      	it	lt
 801d2a2:	3101      	addlt	r1, #1
 801d2a4:	f7ff feda 	bl	801d05c <_Balloc>
 801d2a8:	b930      	cbnz	r0, 801d2b8 <__multiply+0x44>
 801d2aa:	4602      	mov	r2, r0
 801d2ac:	4b44      	ldr	r3, [pc, #272]	; (801d3c0 <__multiply+0x14c>)
 801d2ae:	4845      	ldr	r0, [pc, #276]	; (801d3c4 <__multiply+0x150>)
 801d2b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801d2b4:	f7fe ffee 	bl	801c294 <__assert_func>
 801d2b8:	f100 0514 	add.w	r5, r0, #20
 801d2bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d2c0:	462b      	mov	r3, r5
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	4543      	cmp	r3, r8
 801d2c6:	d321      	bcc.n	801d30c <__multiply+0x98>
 801d2c8:	f104 0314 	add.w	r3, r4, #20
 801d2cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d2d0:	f109 0314 	add.w	r3, r9, #20
 801d2d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d2d8:	9202      	str	r2, [sp, #8]
 801d2da:	1b3a      	subs	r2, r7, r4
 801d2dc:	3a15      	subs	r2, #21
 801d2de:	f022 0203 	bic.w	r2, r2, #3
 801d2e2:	3204      	adds	r2, #4
 801d2e4:	f104 0115 	add.w	r1, r4, #21
 801d2e8:	428f      	cmp	r7, r1
 801d2ea:	bf38      	it	cc
 801d2ec:	2204      	movcc	r2, #4
 801d2ee:	9201      	str	r2, [sp, #4]
 801d2f0:	9a02      	ldr	r2, [sp, #8]
 801d2f2:	9303      	str	r3, [sp, #12]
 801d2f4:	429a      	cmp	r2, r3
 801d2f6:	d80c      	bhi.n	801d312 <__multiply+0x9e>
 801d2f8:	2e00      	cmp	r6, #0
 801d2fa:	dd03      	ble.n	801d304 <__multiply+0x90>
 801d2fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d300:	2b00      	cmp	r3, #0
 801d302:	d05b      	beq.n	801d3bc <__multiply+0x148>
 801d304:	6106      	str	r6, [r0, #16]
 801d306:	b005      	add	sp, #20
 801d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d30c:	f843 2b04 	str.w	r2, [r3], #4
 801d310:	e7d8      	b.n	801d2c4 <__multiply+0x50>
 801d312:	f8b3 a000 	ldrh.w	sl, [r3]
 801d316:	f1ba 0f00 	cmp.w	sl, #0
 801d31a:	d024      	beq.n	801d366 <__multiply+0xf2>
 801d31c:	f104 0e14 	add.w	lr, r4, #20
 801d320:	46a9      	mov	r9, r5
 801d322:	f04f 0c00 	mov.w	ip, #0
 801d326:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d32a:	f8d9 1000 	ldr.w	r1, [r9]
 801d32e:	fa1f fb82 	uxth.w	fp, r2
 801d332:	b289      	uxth	r1, r1
 801d334:	fb0a 110b 	mla	r1, sl, fp, r1
 801d338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d33c:	f8d9 2000 	ldr.w	r2, [r9]
 801d340:	4461      	add	r1, ip
 801d342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d346:	fb0a c20b 	mla	r2, sl, fp, ip
 801d34a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d34e:	b289      	uxth	r1, r1
 801d350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d354:	4577      	cmp	r7, lr
 801d356:	f849 1b04 	str.w	r1, [r9], #4
 801d35a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d35e:	d8e2      	bhi.n	801d326 <__multiply+0xb2>
 801d360:	9a01      	ldr	r2, [sp, #4]
 801d362:	f845 c002 	str.w	ip, [r5, r2]
 801d366:	9a03      	ldr	r2, [sp, #12]
 801d368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d36c:	3304      	adds	r3, #4
 801d36e:	f1b9 0f00 	cmp.w	r9, #0
 801d372:	d021      	beq.n	801d3b8 <__multiply+0x144>
 801d374:	6829      	ldr	r1, [r5, #0]
 801d376:	f104 0c14 	add.w	ip, r4, #20
 801d37a:	46ae      	mov	lr, r5
 801d37c:	f04f 0a00 	mov.w	sl, #0
 801d380:	f8bc b000 	ldrh.w	fp, [ip]
 801d384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d388:	fb09 220b 	mla	r2, r9, fp, r2
 801d38c:	4452      	add	r2, sl
 801d38e:	b289      	uxth	r1, r1
 801d390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d394:	f84e 1b04 	str.w	r1, [lr], #4
 801d398:	f85c 1b04 	ldr.w	r1, [ip], #4
 801d39c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d3a0:	f8be 1000 	ldrh.w	r1, [lr]
 801d3a4:	fb09 110a 	mla	r1, r9, sl, r1
 801d3a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801d3ac:	4567      	cmp	r7, ip
 801d3ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d3b2:	d8e5      	bhi.n	801d380 <__multiply+0x10c>
 801d3b4:	9a01      	ldr	r2, [sp, #4]
 801d3b6:	50a9      	str	r1, [r5, r2]
 801d3b8:	3504      	adds	r5, #4
 801d3ba:	e799      	b.n	801d2f0 <__multiply+0x7c>
 801d3bc:	3e01      	subs	r6, #1
 801d3be:	e79b      	b.n	801d2f8 <__multiply+0x84>
 801d3c0:	0806e1a1 	.word	0x0806e1a1
 801d3c4:	0806e1b2 	.word	0x0806e1b2

0801d3c8 <__pow5mult>:
 801d3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d3cc:	4615      	mov	r5, r2
 801d3ce:	f012 0203 	ands.w	r2, r2, #3
 801d3d2:	4606      	mov	r6, r0
 801d3d4:	460f      	mov	r7, r1
 801d3d6:	d007      	beq.n	801d3e8 <__pow5mult+0x20>
 801d3d8:	4c25      	ldr	r4, [pc, #148]	; (801d470 <__pow5mult+0xa8>)
 801d3da:	3a01      	subs	r2, #1
 801d3dc:	2300      	movs	r3, #0
 801d3de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d3e2:	f7ff fe9d 	bl	801d120 <__multadd>
 801d3e6:	4607      	mov	r7, r0
 801d3e8:	10ad      	asrs	r5, r5, #2
 801d3ea:	d03d      	beq.n	801d468 <__pow5mult+0xa0>
 801d3ec:	69f4      	ldr	r4, [r6, #28]
 801d3ee:	b97c      	cbnz	r4, 801d410 <__pow5mult+0x48>
 801d3f0:	2010      	movs	r0, #16
 801d3f2:	f7fd fe83 	bl	801b0fc <malloc>
 801d3f6:	4602      	mov	r2, r0
 801d3f8:	61f0      	str	r0, [r6, #28]
 801d3fa:	b928      	cbnz	r0, 801d408 <__pow5mult+0x40>
 801d3fc:	4b1d      	ldr	r3, [pc, #116]	; (801d474 <__pow5mult+0xac>)
 801d3fe:	481e      	ldr	r0, [pc, #120]	; (801d478 <__pow5mult+0xb0>)
 801d400:	f240 11b3 	movw	r1, #435	; 0x1b3
 801d404:	f7fe ff46 	bl	801c294 <__assert_func>
 801d408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d40c:	6004      	str	r4, [r0, #0]
 801d40e:	60c4      	str	r4, [r0, #12]
 801d410:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801d414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d418:	b94c      	cbnz	r4, 801d42e <__pow5mult+0x66>
 801d41a:	f240 2171 	movw	r1, #625	; 0x271
 801d41e:	4630      	mov	r0, r6
 801d420:	f7ff ff12 	bl	801d248 <__i2b>
 801d424:	2300      	movs	r3, #0
 801d426:	f8c8 0008 	str.w	r0, [r8, #8]
 801d42a:	4604      	mov	r4, r0
 801d42c:	6003      	str	r3, [r0, #0]
 801d42e:	f04f 0900 	mov.w	r9, #0
 801d432:	07eb      	lsls	r3, r5, #31
 801d434:	d50a      	bpl.n	801d44c <__pow5mult+0x84>
 801d436:	4639      	mov	r1, r7
 801d438:	4622      	mov	r2, r4
 801d43a:	4630      	mov	r0, r6
 801d43c:	f7ff ff1a 	bl	801d274 <__multiply>
 801d440:	4639      	mov	r1, r7
 801d442:	4680      	mov	r8, r0
 801d444:	4630      	mov	r0, r6
 801d446:	f7ff fe49 	bl	801d0dc <_Bfree>
 801d44a:	4647      	mov	r7, r8
 801d44c:	106d      	asrs	r5, r5, #1
 801d44e:	d00b      	beq.n	801d468 <__pow5mult+0xa0>
 801d450:	6820      	ldr	r0, [r4, #0]
 801d452:	b938      	cbnz	r0, 801d464 <__pow5mult+0x9c>
 801d454:	4622      	mov	r2, r4
 801d456:	4621      	mov	r1, r4
 801d458:	4630      	mov	r0, r6
 801d45a:	f7ff ff0b 	bl	801d274 <__multiply>
 801d45e:	6020      	str	r0, [r4, #0]
 801d460:	f8c0 9000 	str.w	r9, [r0]
 801d464:	4604      	mov	r4, r0
 801d466:	e7e4      	b.n	801d432 <__pow5mult+0x6a>
 801d468:	4638      	mov	r0, r7
 801d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d46e:	bf00      	nop
 801d470:	0806e300 	.word	0x0806e300
 801d474:	0806df5c 	.word	0x0806df5c
 801d478:	0806e1b2 	.word	0x0806e1b2

0801d47c <__lshift>:
 801d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d480:	460c      	mov	r4, r1
 801d482:	6849      	ldr	r1, [r1, #4]
 801d484:	6923      	ldr	r3, [r4, #16]
 801d486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d48a:	68a3      	ldr	r3, [r4, #8]
 801d48c:	4607      	mov	r7, r0
 801d48e:	4691      	mov	r9, r2
 801d490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d494:	f108 0601 	add.w	r6, r8, #1
 801d498:	42b3      	cmp	r3, r6
 801d49a:	db0b      	blt.n	801d4b4 <__lshift+0x38>
 801d49c:	4638      	mov	r0, r7
 801d49e:	f7ff fddd 	bl	801d05c <_Balloc>
 801d4a2:	4605      	mov	r5, r0
 801d4a4:	b948      	cbnz	r0, 801d4ba <__lshift+0x3e>
 801d4a6:	4602      	mov	r2, r0
 801d4a8:	4b28      	ldr	r3, [pc, #160]	; (801d54c <__lshift+0xd0>)
 801d4aa:	4829      	ldr	r0, [pc, #164]	; (801d550 <__lshift+0xd4>)
 801d4ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801d4b0:	f7fe fef0 	bl	801c294 <__assert_func>
 801d4b4:	3101      	adds	r1, #1
 801d4b6:	005b      	lsls	r3, r3, #1
 801d4b8:	e7ee      	b.n	801d498 <__lshift+0x1c>
 801d4ba:	2300      	movs	r3, #0
 801d4bc:	f100 0114 	add.w	r1, r0, #20
 801d4c0:	f100 0210 	add.w	r2, r0, #16
 801d4c4:	4618      	mov	r0, r3
 801d4c6:	4553      	cmp	r3, sl
 801d4c8:	db33      	blt.n	801d532 <__lshift+0xb6>
 801d4ca:	6920      	ldr	r0, [r4, #16]
 801d4cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d4d0:	f104 0314 	add.w	r3, r4, #20
 801d4d4:	f019 091f 	ands.w	r9, r9, #31
 801d4d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d4dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d4e0:	d02b      	beq.n	801d53a <__lshift+0xbe>
 801d4e2:	f1c9 0e20 	rsb	lr, r9, #32
 801d4e6:	468a      	mov	sl, r1
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	6818      	ldr	r0, [r3, #0]
 801d4ec:	fa00 f009 	lsl.w	r0, r0, r9
 801d4f0:	4310      	orrs	r0, r2
 801d4f2:	f84a 0b04 	str.w	r0, [sl], #4
 801d4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4fa:	459c      	cmp	ip, r3
 801d4fc:	fa22 f20e 	lsr.w	r2, r2, lr
 801d500:	d8f3      	bhi.n	801d4ea <__lshift+0x6e>
 801d502:	ebac 0304 	sub.w	r3, ip, r4
 801d506:	3b15      	subs	r3, #21
 801d508:	f023 0303 	bic.w	r3, r3, #3
 801d50c:	3304      	adds	r3, #4
 801d50e:	f104 0015 	add.w	r0, r4, #21
 801d512:	4584      	cmp	ip, r0
 801d514:	bf38      	it	cc
 801d516:	2304      	movcc	r3, #4
 801d518:	50ca      	str	r2, [r1, r3]
 801d51a:	b10a      	cbz	r2, 801d520 <__lshift+0xa4>
 801d51c:	f108 0602 	add.w	r6, r8, #2
 801d520:	3e01      	subs	r6, #1
 801d522:	4638      	mov	r0, r7
 801d524:	612e      	str	r6, [r5, #16]
 801d526:	4621      	mov	r1, r4
 801d528:	f7ff fdd8 	bl	801d0dc <_Bfree>
 801d52c:	4628      	mov	r0, r5
 801d52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d532:	f842 0f04 	str.w	r0, [r2, #4]!
 801d536:	3301      	adds	r3, #1
 801d538:	e7c5      	b.n	801d4c6 <__lshift+0x4a>
 801d53a:	3904      	subs	r1, #4
 801d53c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d540:	f841 2f04 	str.w	r2, [r1, #4]!
 801d544:	459c      	cmp	ip, r3
 801d546:	d8f9      	bhi.n	801d53c <__lshift+0xc0>
 801d548:	e7ea      	b.n	801d520 <__lshift+0xa4>
 801d54a:	bf00      	nop
 801d54c:	0806e1a1 	.word	0x0806e1a1
 801d550:	0806e1b2 	.word	0x0806e1b2

0801d554 <__mcmp>:
 801d554:	b530      	push	{r4, r5, lr}
 801d556:	6902      	ldr	r2, [r0, #16]
 801d558:	690c      	ldr	r4, [r1, #16]
 801d55a:	1b12      	subs	r2, r2, r4
 801d55c:	d10e      	bne.n	801d57c <__mcmp+0x28>
 801d55e:	f100 0314 	add.w	r3, r0, #20
 801d562:	3114      	adds	r1, #20
 801d564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d56c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d574:	42a5      	cmp	r5, r4
 801d576:	d003      	beq.n	801d580 <__mcmp+0x2c>
 801d578:	d305      	bcc.n	801d586 <__mcmp+0x32>
 801d57a:	2201      	movs	r2, #1
 801d57c:	4610      	mov	r0, r2
 801d57e:	bd30      	pop	{r4, r5, pc}
 801d580:	4283      	cmp	r3, r0
 801d582:	d3f3      	bcc.n	801d56c <__mcmp+0x18>
 801d584:	e7fa      	b.n	801d57c <__mcmp+0x28>
 801d586:	f04f 32ff 	mov.w	r2, #4294967295
 801d58a:	e7f7      	b.n	801d57c <__mcmp+0x28>

0801d58c <__mdiff>:
 801d58c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d590:	460c      	mov	r4, r1
 801d592:	4606      	mov	r6, r0
 801d594:	4611      	mov	r1, r2
 801d596:	4620      	mov	r0, r4
 801d598:	4690      	mov	r8, r2
 801d59a:	f7ff ffdb 	bl	801d554 <__mcmp>
 801d59e:	1e05      	subs	r5, r0, #0
 801d5a0:	d110      	bne.n	801d5c4 <__mdiff+0x38>
 801d5a2:	4629      	mov	r1, r5
 801d5a4:	4630      	mov	r0, r6
 801d5a6:	f7ff fd59 	bl	801d05c <_Balloc>
 801d5aa:	b930      	cbnz	r0, 801d5ba <__mdiff+0x2e>
 801d5ac:	4b3a      	ldr	r3, [pc, #232]	; (801d698 <__mdiff+0x10c>)
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	f240 2137 	movw	r1, #567	; 0x237
 801d5b4:	4839      	ldr	r0, [pc, #228]	; (801d69c <__mdiff+0x110>)
 801d5b6:	f7fe fe6d 	bl	801c294 <__assert_func>
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5c4:	bfa4      	itt	ge
 801d5c6:	4643      	movge	r3, r8
 801d5c8:	46a0      	movge	r8, r4
 801d5ca:	4630      	mov	r0, r6
 801d5cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d5d0:	bfa6      	itte	ge
 801d5d2:	461c      	movge	r4, r3
 801d5d4:	2500      	movge	r5, #0
 801d5d6:	2501      	movlt	r5, #1
 801d5d8:	f7ff fd40 	bl	801d05c <_Balloc>
 801d5dc:	b920      	cbnz	r0, 801d5e8 <__mdiff+0x5c>
 801d5de:	4b2e      	ldr	r3, [pc, #184]	; (801d698 <__mdiff+0x10c>)
 801d5e0:	4602      	mov	r2, r0
 801d5e2:	f240 2145 	movw	r1, #581	; 0x245
 801d5e6:	e7e5      	b.n	801d5b4 <__mdiff+0x28>
 801d5e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d5ec:	6926      	ldr	r6, [r4, #16]
 801d5ee:	60c5      	str	r5, [r0, #12]
 801d5f0:	f104 0914 	add.w	r9, r4, #20
 801d5f4:	f108 0514 	add.w	r5, r8, #20
 801d5f8:	f100 0e14 	add.w	lr, r0, #20
 801d5fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d604:	f108 0210 	add.w	r2, r8, #16
 801d608:	46f2      	mov	sl, lr
 801d60a:	2100      	movs	r1, #0
 801d60c:	f859 3b04 	ldr.w	r3, [r9], #4
 801d610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d614:	fa11 f88b 	uxtah	r8, r1, fp
 801d618:	b299      	uxth	r1, r3
 801d61a:	0c1b      	lsrs	r3, r3, #16
 801d61c:	eba8 0801 	sub.w	r8, r8, r1
 801d620:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d624:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d628:	fa1f f888 	uxth.w	r8, r8
 801d62c:	1419      	asrs	r1, r3, #16
 801d62e:	454e      	cmp	r6, r9
 801d630:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d634:	f84a 3b04 	str.w	r3, [sl], #4
 801d638:	d8e8      	bhi.n	801d60c <__mdiff+0x80>
 801d63a:	1b33      	subs	r3, r6, r4
 801d63c:	3b15      	subs	r3, #21
 801d63e:	f023 0303 	bic.w	r3, r3, #3
 801d642:	3304      	adds	r3, #4
 801d644:	3415      	adds	r4, #21
 801d646:	42a6      	cmp	r6, r4
 801d648:	bf38      	it	cc
 801d64a:	2304      	movcc	r3, #4
 801d64c:	441d      	add	r5, r3
 801d64e:	4473      	add	r3, lr
 801d650:	469e      	mov	lr, r3
 801d652:	462e      	mov	r6, r5
 801d654:	4566      	cmp	r6, ip
 801d656:	d30e      	bcc.n	801d676 <__mdiff+0xea>
 801d658:	f10c 0203 	add.w	r2, ip, #3
 801d65c:	1b52      	subs	r2, r2, r5
 801d65e:	f022 0203 	bic.w	r2, r2, #3
 801d662:	3d03      	subs	r5, #3
 801d664:	45ac      	cmp	ip, r5
 801d666:	bf38      	it	cc
 801d668:	2200      	movcc	r2, #0
 801d66a:	4413      	add	r3, r2
 801d66c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801d670:	b17a      	cbz	r2, 801d692 <__mdiff+0x106>
 801d672:	6107      	str	r7, [r0, #16]
 801d674:	e7a4      	b.n	801d5c0 <__mdiff+0x34>
 801d676:	f856 8b04 	ldr.w	r8, [r6], #4
 801d67a:	fa11 f288 	uxtah	r2, r1, r8
 801d67e:	1414      	asrs	r4, r2, #16
 801d680:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d684:	b292      	uxth	r2, r2
 801d686:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d68a:	f84e 2b04 	str.w	r2, [lr], #4
 801d68e:	1421      	asrs	r1, r4, #16
 801d690:	e7e0      	b.n	801d654 <__mdiff+0xc8>
 801d692:	3f01      	subs	r7, #1
 801d694:	e7ea      	b.n	801d66c <__mdiff+0xe0>
 801d696:	bf00      	nop
 801d698:	0806e1a1 	.word	0x0806e1a1
 801d69c:	0806e1b2 	.word	0x0806e1b2

0801d6a0 <__d2b>:
 801d6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d6a4:	460f      	mov	r7, r1
 801d6a6:	2101      	movs	r1, #1
 801d6a8:	ec59 8b10 	vmov	r8, r9, d0
 801d6ac:	4616      	mov	r6, r2
 801d6ae:	f7ff fcd5 	bl	801d05c <_Balloc>
 801d6b2:	4604      	mov	r4, r0
 801d6b4:	b930      	cbnz	r0, 801d6c4 <__d2b+0x24>
 801d6b6:	4602      	mov	r2, r0
 801d6b8:	4b24      	ldr	r3, [pc, #144]	; (801d74c <__d2b+0xac>)
 801d6ba:	4825      	ldr	r0, [pc, #148]	; (801d750 <__d2b+0xb0>)
 801d6bc:	f240 310f 	movw	r1, #783	; 0x30f
 801d6c0:	f7fe fde8 	bl	801c294 <__assert_func>
 801d6c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d6cc:	bb2d      	cbnz	r5, 801d71a <__d2b+0x7a>
 801d6ce:	9301      	str	r3, [sp, #4]
 801d6d0:	f1b8 0300 	subs.w	r3, r8, #0
 801d6d4:	d026      	beq.n	801d724 <__d2b+0x84>
 801d6d6:	4668      	mov	r0, sp
 801d6d8:	9300      	str	r3, [sp, #0]
 801d6da:	f7ff fd87 	bl	801d1ec <__lo0bits>
 801d6de:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d6e2:	b1e8      	cbz	r0, 801d720 <__d2b+0x80>
 801d6e4:	f1c0 0320 	rsb	r3, r0, #32
 801d6e8:	fa02 f303 	lsl.w	r3, r2, r3
 801d6ec:	430b      	orrs	r3, r1
 801d6ee:	40c2      	lsrs	r2, r0
 801d6f0:	6163      	str	r3, [r4, #20]
 801d6f2:	9201      	str	r2, [sp, #4]
 801d6f4:	9b01      	ldr	r3, [sp, #4]
 801d6f6:	61a3      	str	r3, [r4, #24]
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	bf14      	ite	ne
 801d6fc:	2202      	movne	r2, #2
 801d6fe:	2201      	moveq	r2, #1
 801d700:	6122      	str	r2, [r4, #16]
 801d702:	b1bd      	cbz	r5, 801d734 <__d2b+0x94>
 801d704:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d708:	4405      	add	r5, r0
 801d70a:	603d      	str	r5, [r7, #0]
 801d70c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d710:	6030      	str	r0, [r6, #0]
 801d712:	4620      	mov	r0, r4
 801d714:	b003      	add	sp, #12
 801d716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d71a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d71e:	e7d6      	b.n	801d6ce <__d2b+0x2e>
 801d720:	6161      	str	r1, [r4, #20]
 801d722:	e7e7      	b.n	801d6f4 <__d2b+0x54>
 801d724:	a801      	add	r0, sp, #4
 801d726:	f7ff fd61 	bl	801d1ec <__lo0bits>
 801d72a:	9b01      	ldr	r3, [sp, #4]
 801d72c:	6163      	str	r3, [r4, #20]
 801d72e:	3020      	adds	r0, #32
 801d730:	2201      	movs	r2, #1
 801d732:	e7e5      	b.n	801d700 <__d2b+0x60>
 801d734:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d738:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d73c:	6038      	str	r0, [r7, #0]
 801d73e:	6918      	ldr	r0, [r3, #16]
 801d740:	f7ff fd34 	bl	801d1ac <__hi0bits>
 801d744:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d748:	e7e2      	b.n	801d710 <__d2b+0x70>
 801d74a:	bf00      	nop
 801d74c:	0806e1a1 	.word	0x0806e1a1
 801d750:	0806e1b2 	.word	0x0806e1b2

0801d754 <__sfputc_r>:
 801d754:	6893      	ldr	r3, [r2, #8]
 801d756:	3b01      	subs	r3, #1
 801d758:	2b00      	cmp	r3, #0
 801d75a:	b410      	push	{r4}
 801d75c:	6093      	str	r3, [r2, #8]
 801d75e:	da08      	bge.n	801d772 <__sfputc_r+0x1e>
 801d760:	6994      	ldr	r4, [r2, #24]
 801d762:	42a3      	cmp	r3, r4
 801d764:	db01      	blt.n	801d76a <__sfputc_r+0x16>
 801d766:	290a      	cmp	r1, #10
 801d768:	d103      	bne.n	801d772 <__sfputc_r+0x1e>
 801d76a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d76e:	f7fe bc1f 	b.w	801bfb0 <__swbuf_r>
 801d772:	6813      	ldr	r3, [r2, #0]
 801d774:	1c58      	adds	r0, r3, #1
 801d776:	6010      	str	r0, [r2, #0]
 801d778:	7019      	strb	r1, [r3, #0]
 801d77a:	4608      	mov	r0, r1
 801d77c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d780:	4770      	bx	lr

0801d782 <__sfputs_r>:
 801d782:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d784:	4606      	mov	r6, r0
 801d786:	460f      	mov	r7, r1
 801d788:	4614      	mov	r4, r2
 801d78a:	18d5      	adds	r5, r2, r3
 801d78c:	42ac      	cmp	r4, r5
 801d78e:	d101      	bne.n	801d794 <__sfputs_r+0x12>
 801d790:	2000      	movs	r0, #0
 801d792:	e007      	b.n	801d7a4 <__sfputs_r+0x22>
 801d794:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d798:	463a      	mov	r2, r7
 801d79a:	4630      	mov	r0, r6
 801d79c:	f7ff ffda 	bl	801d754 <__sfputc_r>
 801d7a0:	1c43      	adds	r3, r0, #1
 801d7a2:	d1f3      	bne.n	801d78c <__sfputs_r+0xa>
 801d7a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7a8 <_vfiprintf_r>:
 801d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	460d      	mov	r5, r1
 801d7ae:	b09d      	sub	sp, #116	; 0x74
 801d7b0:	4614      	mov	r4, r2
 801d7b2:	4698      	mov	r8, r3
 801d7b4:	4606      	mov	r6, r0
 801d7b6:	b118      	cbz	r0, 801d7c0 <_vfiprintf_r+0x18>
 801d7b8:	6a03      	ldr	r3, [r0, #32]
 801d7ba:	b90b      	cbnz	r3, 801d7c0 <_vfiprintf_r+0x18>
 801d7bc:	f7fe fafe 	bl	801bdbc <__sinit>
 801d7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7c2:	07d9      	lsls	r1, r3, #31
 801d7c4:	d405      	bmi.n	801d7d2 <_vfiprintf_r+0x2a>
 801d7c6:	89ab      	ldrh	r3, [r5, #12]
 801d7c8:	059a      	lsls	r2, r3, #22
 801d7ca:	d402      	bmi.n	801d7d2 <_vfiprintf_r+0x2a>
 801d7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7ce:	f7fe fd48 	bl	801c262 <__retarget_lock_acquire_recursive>
 801d7d2:	89ab      	ldrh	r3, [r5, #12]
 801d7d4:	071b      	lsls	r3, r3, #28
 801d7d6:	d501      	bpl.n	801d7dc <_vfiprintf_r+0x34>
 801d7d8:	692b      	ldr	r3, [r5, #16]
 801d7da:	b99b      	cbnz	r3, 801d804 <_vfiprintf_r+0x5c>
 801d7dc:	4629      	mov	r1, r5
 801d7de:	4630      	mov	r0, r6
 801d7e0:	f7fe fc24 	bl	801c02c <__swsetup_r>
 801d7e4:	b170      	cbz	r0, 801d804 <_vfiprintf_r+0x5c>
 801d7e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7e8:	07dc      	lsls	r4, r3, #31
 801d7ea:	d504      	bpl.n	801d7f6 <_vfiprintf_r+0x4e>
 801d7ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d7f0:	b01d      	add	sp, #116	; 0x74
 801d7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7f6:	89ab      	ldrh	r3, [r5, #12]
 801d7f8:	0598      	lsls	r0, r3, #22
 801d7fa:	d4f7      	bmi.n	801d7ec <_vfiprintf_r+0x44>
 801d7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7fe:	f7fe fd31 	bl	801c264 <__retarget_lock_release_recursive>
 801d802:	e7f3      	b.n	801d7ec <_vfiprintf_r+0x44>
 801d804:	2300      	movs	r3, #0
 801d806:	9309      	str	r3, [sp, #36]	; 0x24
 801d808:	2320      	movs	r3, #32
 801d80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d80e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d812:	2330      	movs	r3, #48	; 0x30
 801d814:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d9c8 <_vfiprintf_r+0x220>
 801d818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d81c:	f04f 0901 	mov.w	r9, #1
 801d820:	4623      	mov	r3, r4
 801d822:	469a      	mov	sl, r3
 801d824:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d828:	b10a      	cbz	r2, 801d82e <_vfiprintf_r+0x86>
 801d82a:	2a25      	cmp	r2, #37	; 0x25
 801d82c:	d1f9      	bne.n	801d822 <_vfiprintf_r+0x7a>
 801d82e:	ebba 0b04 	subs.w	fp, sl, r4
 801d832:	d00b      	beq.n	801d84c <_vfiprintf_r+0xa4>
 801d834:	465b      	mov	r3, fp
 801d836:	4622      	mov	r2, r4
 801d838:	4629      	mov	r1, r5
 801d83a:	4630      	mov	r0, r6
 801d83c:	f7ff ffa1 	bl	801d782 <__sfputs_r>
 801d840:	3001      	adds	r0, #1
 801d842:	f000 80a9 	beq.w	801d998 <_vfiprintf_r+0x1f0>
 801d846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d848:	445a      	add	r2, fp
 801d84a:	9209      	str	r2, [sp, #36]	; 0x24
 801d84c:	f89a 3000 	ldrb.w	r3, [sl]
 801d850:	2b00      	cmp	r3, #0
 801d852:	f000 80a1 	beq.w	801d998 <_vfiprintf_r+0x1f0>
 801d856:	2300      	movs	r3, #0
 801d858:	f04f 32ff 	mov.w	r2, #4294967295
 801d85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d860:	f10a 0a01 	add.w	sl, sl, #1
 801d864:	9304      	str	r3, [sp, #16]
 801d866:	9307      	str	r3, [sp, #28]
 801d868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d86c:	931a      	str	r3, [sp, #104]	; 0x68
 801d86e:	4654      	mov	r4, sl
 801d870:	2205      	movs	r2, #5
 801d872:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d876:	4854      	ldr	r0, [pc, #336]	; (801d9c8 <_vfiprintf_r+0x220>)
 801d878:	f7e2 fcc2 	bl	8000200 <memchr>
 801d87c:	9a04      	ldr	r2, [sp, #16]
 801d87e:	b9d8      	cbnz	r0, 801d8b8 <_vfiprintf_r+0x110>
 801d880:	06d1      	lsls	r1, r2, #27
 801d882:	bf44      	itt	mi
 801d884:	2320      	movmi	r3, #32
 801d886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d88a:	0713      	lsls	r3, r2, #28
 801d88c:	bf44      	itt	mi
 801d88e:	232b      	movmi	r3, #43	; 0x2b
 801d890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d894:	f89a 3000 	ldrb.w	r3, [sl]
 801d898:	2b2a      	cmp	r3, #42	; 0x2a
 801d89a:	d015      	beq.n	801d8c8 <_vfiprintf_r+0x120>
 801d89c:	9a07      	ldr	r2, [sp, #28]
 801d89e:	4654      	mov	r4, sl
 801d8a0:	2000      	movs	r0, #0
 801d8a2:	f04f 0c0a 	mov.w	ip, #10
 801d8a6:	4621      	mov	r1, r4
 801d8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8ac:	3b30      	subs	r3, #48	; 0x30
 801d8ae:	2b09      	cmp	r3, #9
 801d8b0:	d94d      	bls.n	801d94e <_vfiprintf_r+0x1a6>
 801d8b2:	b1b0      	cbz	r0, 801d8e2 <_vfiprintf_r+0x13a>
 801d8b4:	9207      	str	r2, [sp, #28]
 801d8b6:	e014      	b.n	801d8e2 <_vfiprintf_r+0x13a>
 801d8b8:	eba0 0308 	sub.w	r3, r0, r8
 801d8bc:	fa09 f303 	lsl.w	r3, r9, r3
 801d8c0:	4313      	orrs	r3, r2
 801d8c2:	9304      	str	r3, [sp, #16]
 801d8c4:	46a2      	mov	sl, r4
 801d8c6:	e7d2      	b.n	801d86e <_vfiprintf_r+0xc6>
 801d8c8:	9b03      	ldr	r3, [sp, #12]
 801d8ca:	1d19      	adds	r1, r3, #4
 801d8cc:	681b      	ldr	r3, [r3, #0]
 801d8ce:	9103      	str	r1, [sp, #12]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	bfbb      	ittet	lt
 801d8d4:	425b      	neglt	r3, r3
 801d8d6:	f042 0202 	orrlt.w	r2, r2, #2
 801d8da:	9307      	strge	r3, [sp, #28]
 801d8dc:	9307      	strlt	r3, [sp, #28]
 801d8de:	bfb8      	it	lt
 801d8e0:	9204      	strlt	r2, [sp, #16]
 801d8e2:	7823      	ldrb	r3, [r4, #0]
 801d8e4:	2b2e      	cmp	r3, #46	; 0x2e
 801d8e6:	d10c      	bne.n	801d902 <_vfiprintf_r+0x15a>
 801d8e8:	7863      	ldrb	r3, [r4, #1]
 801d8ea:	2b2a      	cmp	r3, #42	; 0x2a
 801d8ec:	d134      	bne.n	801d958 <_vfiprintf_r+0x1b0>
 801d8ee:	9b03      	ldr	r3, [sp, #12]
 801d8f0:	1d1a      	adds	r2, r3, #4
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	9203      	str	r2, [sp, #12]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	bfb8      	it	lt
 801d8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 801d8fe:	3402      	adds	r4, #2
 801d900:	9305      	str	r3, [sp, #20]
 801d902:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d9d8 <_vfiprintf_r+0x230>
 801d906:	7821      	ldrb	r1, [r4, #0]
 801d908:	2203      	movs	r2, #3
 801d90a:	4650      	mov	r0, sl
 801d90c:	f7e2 fc78 	bl	8000200 <memchr>
 801d910:	b138      	cbz	r0, 801d922 <_vfiprintf_r+0x17a>
 801d912:	9b04      	ldr	r3, [sp, #16]
 801d914:	eba0 000a 	sub.w	r0, r0, sl
 801d918:	2240      	movs	r2, #64	; 0x40
 801d91a:	4082      	lsls	r2, r0
 801d91c:	4313      	orrs	r3, r2
 801d91e:	3401      	adds	r4, #1
 801d920:	9304      	str	r3, [sp, #16]
 801d922:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d926:	4829      	ldr	r0, [pc, #164]	; (801d9cc <_vfiprintf_r+0x224>)
 801d928:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d92c:	2206      	movs	r2, #6
 801d92e:	f7e2 fc67 	bl	8000200 <memchr>
 801d932:	2800      	cmp	r0, #0
 801d934:	d03f      	beq.n	801d9b6 <_vfiprintf_r+0x20e>
 801d936:	4b26      	ldr	r3, [pc, #152]	; (801d9d0 <_vfiprintf_r+0x228>)
 801d938:	bb1b      	cbnz	r3, 801d982 <_vfiprintf_r+0x1da>
 801d93a:	9b03      	ldr	r3, [sp, #12]
 801d93c:	3307      	adds	r3, #7
 801d93e:	f023 0307 	bic.w	r3, r3, #7
 801d942:	3308      	adds	r3, #8
 801d944:	9303      	str	r3, [sp, #12]
 801d946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d948:	443b      	add	r3, r7
 801d94a:	9309      	str	r3, [sp, #36]	; 0x24
 801d94c:	e768      	b.n	801d820 <_vfiprintf_r+0x78>
 801d94e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d952:	460c      	mov	r4, r1
 801d954:	2001      	movs	r0, #1
 801d956:	e7a6      	b.n	801d8a6 <_vfiprintf_r+0xfe>
 801d958:	2300      	movs	r3, #0
 801d95a:	3401      	adds	r4, #1
 801d95c:	9305      	str	r3, [sp, #20]
 801d95e:	4619      	mov	r1, r3
 801d960:	f04f 0c0a 	mov.w	ip, #10
 801d964:	4620      	mov	r0, r4
 801d966:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d96a:	3a30      	subs	r2, #48	; 0x30
 801d96c:	2a09      	cmp	r2, #9
 801d96e:	d903      	bls.n	801d978 <_vfiprintf_r+0x1d0>
 801d970:	2b00      	cmp	r3, #0
 801d972:	d0c6      	beq.n	801d902 <_vfiprintf_r+0x15a>
 801d974:	9105      	str	r1, [sp, #20]
 801d976:	e7c4      	b.n	801d902 <_vfiprintf_r+0x15a>
 801d978:	fb0c 2101 	mla	r1, ip, r1, r2
 801d97c:	4604      	mov	r4, r0
 801d97e:	2301      	movs	r3, #1
 801d980:	e7f0      	b.n	801d964 <_vfiprintf_r+0x1bc>
 801d982:	ab03      	add	r3, sp, #12
 801d984:	9300      	str	r3, [sp, #0]
 801d986:	462a      	mov	r2, r5
 801d988:	4b12      	ldr	r3, [pc, #72]	; (801d9d4 <_vfiprintf_r+0x22c>)
 801d98a:	a904      	add	r1, sp, #16
 801d98c:	4630      	mov	r0, r6
 801d98e:	f7fd fdc3 	bl	801b518 <_printf_float>
 801d992:	4607      	mov	r7, r0
 801d994:	1c78      	adds	r0, r7, #1
 801d996:	d1d6      	bne.n	801d946 <_vfiprintf_r+0x19e>
 801d998:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d99a:	07d9      	lsls	r1, r3, #31
 801d99c:	d405      	bmi.n	801d9aa <_vfiprintf_r+0x202>
 801d99e:	89ab      	ldrh	r3, [r5, #12]
 801d9a0:	059a      	lsls	r2, r3, #22
 801d9a2:	d402      	bmi.n	801d9aa <_vfiprintf_r+0x202>
 801d9a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9a6:	f7fe fc5d 	bl	801c264 <__retarget_lock_release_recursive>
 801d9aa:	89ab      	ldrh	r3, [r5, #12]
 801d9ac:	065b      	lsls	r3, r3, #25
 801d9ae:	f53f af1d 	bmi.w	801d7ec <_vfiprintf_r+0x44>
 801d9b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9b4:	e71c      	b.n	801d7f0 <_vfiprintf_r+0x48>
 801d9b6:	ab03      	add	r3, sp, #12
 801d9b8:	9300      	str	r3, [sp, #0]
 801d9ba:	462a      	mov	r2, r5
 801d9bc:	4b05      	ldr	r3, [pc, #20]	; (801d9d4 <_vfiprintf_r+0x22c>)
 801d9be:	a904      	add	r1, sp, #16
 801d9c0:	4630      	mov	r0, r6
 801d9c2:	f7fe f84d 	bl	801ba60 <_printf_i>
 801d9c6:	e7e4      	b.n	801d992 <_vfiprintf_r+0x1ea>
 801d9c8:	0806e30c 	.word	0x0806e30c
 801d9cc:	0806e316 	.word	0x0806e316
 801d9d0:	0801b519 	.word	0x0801b519
 801d9d4:	0801d783 	.word	0x0801d783
 801d9d8:	0806e312 	.word	0x0806e312

0801d9dc <__sflush_r>:
 801d9dc:	898a      	ldrh	r2, [r1, #12]
 801d9de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9e2:	4605      	mov	r5, r0
 801d9e4:	0710      	lsls	r0, r2, #28
 801d9e6:	460c      	mov	r4, r1
 801d9e8:	d458      	bmi.n	801da9c <__sflush_r+0xc0>
 801d9ea:	684b      	ldr	r3, [r1, #4]
 801d9ec:	2b00      	cmp	r3, #0
 801d9ee:	dc05      	bgt.n	801d9fc <__sflush_r+0x20>
 801d9f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	dc02      	bgt.n	801d9fc <__sflush_r+0x20>
 801d9f6:	2000      	movs	r0, #0
 801d9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9fe:	2e00      	cmp	r6, #0
 801da00:	d0f9      	beq.n	801d9f6 <__sflush_r+0x1a>
 801da02:	2300      	movs	r3, #0
 801da04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801da08:	682f      	ldr	r7, [r5, #0]
 801da0a:	6a21      	ldr	r1, [r4, #32]
 801da0c:	602b      	str	r3, [r5, #0]
 801da0e:	d032      	beq.n	801da76 <__sflush_r+0x9a>
 801da10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801da12:	89a3      	ldrh	r3, [r4, #12]
 801da14:	075a      	lsls	r2, r3, #29
 801da16:	d505      	bpl.n	801da24 <__sflush_r+0x48>
 801da18:	6863      	ldr	r3, [r4, #4]
 801da1a:	1ac0      	subs	r0, r0, r3
 801da1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801da1e:	b10b      	cbz	r3, 801da24 <__sflush_r+0x48>
 801da20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801da22:	1ac0      	subs	r0, r0, r3
 801da24:	2300      	movs	r3, #0
 801da26:	4602      	mov	r2, r0
 801da28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801da2a:	6a21      	ldr	r1, [r4, #32]
 801da2c:	4628      	mov	r0, r5
 801da2e:	47b0      	blx	r6
 801da30:	1c43      	adds	r3, r0, #1
 801da32:	89a3      	ldrh	r3, [r4, #12]
 801da34:	d106      	bne.n	801da44 <__sflush_r+0x68>
 801da36:	6829      	ldr	r1, [r5, #0]
 801da38:	291d      	cmp	r1, #29
 801da3a:	d82b      	bhi.n	801da94 <__sflush_r+0xb8>
 801da3c:	4a29      	ldr	r2, [pc, #164]	; (801dae4 <__sflush_r+0x108>)
 801da3e:	410a      	asrs	r2, r1
 801da40:	07d6      	lsls	r6, r2, #31
 801da42:	d427      	bmi.n	801da94 <__sflush_r+0xb8>
 801da44:	2200      	movs	r2, #0
 801da46:	6062      	str	r2, [r4, #4]
 801da48:	04d9      	lsls	r1, r3, #19
 801da4a:	6922      	ldr	r2, [r4, #16]
 801da4c:	6022      	str	r2, [r4, #0]
 801da4e:	d504      	bpl.n	801da5a <__sflush_r+0x7e>
 801da50:	1c42      	adds	r2, r0, #1
 801da52:	d101      	bne.n	801da58 <__sflush_r+0x7c>
 801da54:	682b      	ldr	r3, [r5, #0]
 801da56:	b903      	cbnz	r3, 801da5a <__sflush_r+0x7e>
 801da58:	6560      	str	r0, [r4, #84]	; 0x54
 801da5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da5c:	602f      	str	r7, [r5, #0]
 801da5e:	2900      	cmp	r1, #0
 801da60:	d0c9      	beq.n	801d9f6 <__sflush_r+0x1a>
 801da62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da66:	4299      	cmp	r1, r3
 801da68:	d002      	beq.n	801da70 <__sflush_r+0x94>
 801da6a:	4628      	mov	r0, r5
 801da6c:	f7ff faaa 	bl	801cfc4 <_free_r>
 801da70:	2000      	movs	r0, #0
 801da72:	6360      	str	r0, [r4, #52]	; 0x34
 801da74:	e7c0      	b.n	801d9f8 <__sflush_r+0x1c>
 801da76:	2301      	movs	r3, #1
 801da78:	4628      	mov	r0, r5
 801da7a:	47b0      	blx	r6
 801da7c:	1c41      	adds	r1, r0, #1
 801da7e:	d1c8      	bne.n	801da12 <__sflush_r+0x36>
 801da80:	682b      	ldr	r3, [r5, #0]
 801da82:	2b00      	cmp	r3, #0
 801da84:	d0c5      	beq.n	801da12 <__sflush_r+0x36>
 801da86:	2b1d      	cmp	r3, #29
 801da88:	d001      	beq.n	801da8e <__sflush_r+0xb2>
 801da8a:	2b16      	cmp	r3, #22
 801da8c:	d101      	bne.n	801da92 <__sflush_r+0xb6>
 801da8e:	602f      	str	r7, [r5, #0]
 801da90:	e7b1      	b.n	801d9f6 <__sflush_r+0x1a>
 801da92:	89a3      	ldrh	r3, [r4, #12]
 801da94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da98:	81a3      	strh	r3, [r4, #12]
 801da9a:	e7ad      	b.n	801d9f8 <__sflush_r+0x1c>
 801da9c:	690f      	ldr	r7, [r1, #16]
 801da9e:	2f00      	cmp	r7, #0
 801daa0:	d0a9      	beq.n	801d9f6 <__sflush_r+0x1a>
 801daa2:	0793      	lsls	r3, r2, #30
 801daa4:	680e      	ldr	r6, [r1, #0]
 801daa6:	bf08      	it	eq
 801daa8:	694b      	ldreq	r3, [r1, #20]
 801daaa:	600f      	str	r7, [r1, #0]
 801daac:	bf18      	it	ne
 801daae:	2300      	movne	r3, #0
 801dab0:	eba6 0807 	sub.w	r8, r6, r7
 801dab4:	608b      	str	r3, [r1, #8]
 801dab6:	f1b8 0f00 	cmp.w	r8, #0
 801daba:	dd9c      	ble.n	801d9f6 <__sflush_r+0x1a>
 801dabc:	6a21      	ldr	r1, [r4, #32]
 801dabe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dac0:	4643      	mov	r3, r8
 801dac2:	463a      	mov	r2, r7
 801dac4:	4628      	mov	r0, r5
 801dac6:	47b0      	blx	r6
 801dac8:	2800      	cmp	r0, #0
 801daca:	dc06      	bgt.n	801dada <__sflush_r+0xfe>
 801dacc:	89a3      	ldrh	r3, [r4, #12]
 801dace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dad2:	81a3      	strh	r3, [r4, #12]
 801dad4:	f04f 30ff 	mov.w	r0, #4294967295
 801dad8:	e78e      	b.n	801d9f8 <__sflush_r+0x1c>
 801dada:	4407      	add	r7, r0
 801dadc:	eba8 0800 	sub.w	r8, r8, r0
 801dae0:	e7e9      	b.n	801dab6 <__sflush_r+0xda>
 801dae2:	bf00      	nop
 801dae4:	dfbffffe 	.word	0xdfbffffe

0801dae8 <_fflush_r>:
 801dae8:	b538      	push	{r3, r4, r5, lr}
 801daea:	690b      	ldr	r3, [r1, #16]
 801daec:	4605      	mov	r5, r0
 801daee:	460c      	mov	r4, r1
 801daf0:	b913      	cbnz	r3, 801daf8 <_fflush_r+0x10>
 801daf2:	2500      	movs	r5, #0
 801daf4:	4628      	mov	r0, r5
 801daf6:	bd38      	pop	{r3, r4, r5, pc}
 801daf8:	b118      	cbz	r0, 801db02 <_fflush_r+0x1a>
 801dafa:	6a03      	ldr	r3, [r0, #32]
 801dafc:	b90b      	cbnz	r3, 801db02 <_fflush_r+0x1a>
 801dafe:	f7fe f95d 	bl	801bdbc <__sinit>
 801db02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db06:	2b00      	cmp	r3, #0
 801db08:	d0f3      	beq.n	801daf2 <_fflush_r+0xa>
 801db0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801db0c:	07d0      	lsls	r0, r2, #31
 801db0e:	d404      	bmi.n	801db1a <_fflush_r+0x32>
 801db10:	0599      	lsls	r1, r3, #22
 801db12:	d402      	bmi.n	801db1a <_fflush_r+0x32>
 801db14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db16:	f7fe fba4 	bl	801c262 <__retarget_lock_acquire_recursive>
 801db1a:	4628      	mov	r0, r5
 801db1c:	4621      	mov	r1, r4
 801db1e:	f7ff ff5d 	bl	801d9dc <__sflush_r>
 801db22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801db24:	07da      	lsls	r2, r3, #31
 801db26:	4605      	mov	r5, r0
 801db28:	d4e4      	bmi.n	801daf4 <_fflush_r+0xc>
 801db2a:	89a3      	ldrh	r3, [r4, #12]
 801db2c:	059b      	lsls	r3, r3, #22
 801db2e:	d4e1      	bmi.n	801daf4 <_fflush_r+0xc>
 801db30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801db32:	f7fe fb97 	bl	801c264 <__retarget_lock_release_recursive>
 801db36:	e7dd      	b.n	801daf4 <_fflush_r+0xc>

0801db38 <fiprintf>:
 801db38:	b40e      	push	{r1, r2, r3}
 801db3a:	b503      	push	{r0, r1, lr}
 801db3c:	4601      	mov	r1, r0
 801db3e:	ab03      	add	r3, sp, #12
 801db40:	4805      	ldr	r0, [pc, #20]	; (801db58 <fiprintf+0x20>)
 801db42:	f853 2b04 	ldr.w	r2, [r3], #4
 801db46:	6800      	ldr	r0, [r0, #0]
 801db48:	9301      	str	r3, [sp, #4]
 801db4a:	f7ff fe2d 	bl	801d7a8 <_vfiprintf_r>
 801db4e:	b002      	add	sp, #8
 801db50:	f85d eb04 	ldr.w	lr, [sp], #4
 801db54:	b003      	add	sp, #12
 801db56:	4770      	bx	lr
 801db58:	20000120 	.word	0x20000120

0801db5c <__swhatbuf_r>:
 801db5c:	b570      	push	{r4, r5, r6, lr}
 801db5e:	460c      	mov	r4, r1
 801db60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db64:	2900      	cmp	r1, #0
 801db66:	b096      	sub	sp, #88	; 0x58
 801db68:	4615      	mov	r5, r2
 801db6a:	461e      	mov	r6, r3
 801db6c:	da0d      	bge.n	801db8a <__swhatbuf_r+0x2e>
 801db6e:	89a3      	ldrh	r3, [r4, #12]
 801db70:	f013 0f80 	tst.w	r3, #128	; 0x80
 801db74:	f04f 0100 	mov.w	r1, #0
 801db78:	bf0c      	ite	eq
 801db7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801db7e:	2340      	movne	r3, #64	; 0x40
 801db80:	2000      	movs	r0, #0
 801db82:	6031      	str	r1, [r6, #0]
 801db84:	602b      	str	r3, [r5, #0]
 801db86:	b016      	add	sp, #88	; 0x58
 801db88:	bd70      	pop	{r4, r5, r6, pc}
 801db8a:	466a      	mov	r2, sp
 801db8c:	f000 f87c 	bl	801dc88 <_fstat_r>
 801db90:	2800      	cmp	r0, #0
 801db92:	dbec      	blt.n	801db6e <__swhatbuf_r+0x12>
 801db94:	9901      	ldr	r1, [sp, #4]
 801db96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801db9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801db9e:	4259      	negs	r1, r3
 801dba0:	4159      	adcs	r1, r3
 801dba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dba6:	e7eb      	b.n	801db80 <__swhatbuf_r+0x24>

0801dba8 <__smakebuf_r>:
 801dba8:	898b      	ldrh	r3, [r1, #12]
 801dbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dbac:	079d      	lsls	r5, r3, #30
 801dbae:	4606      	mov	r6, r0
 801dbb0:	460c      	mov	r4, r1
 801dbb2:	d507      	bpl.n	801dbc4 <__smakebuf_r+0x1c>
 801dbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dbb8:	6023      	str	r3, [r4, #0]
 801dbba:	6123      	str	r3, [r4, #16]
 801dbbc:	2301      	movs	r3, #1
 801dbbe:	6163      	str	r3, [r4, #20]
 801dbc0:	b002      	add	sp, #8
 801dbc2:	bd70      	pop	{r4, r5, r6, pc}
 801dbc4:	ab01      	add	r3, sp, #4
 801dbc6:	466a      	mov	r2, sp
 801dbc8:	f7ff ffc8 	bl	801db5c <__swhatbuf_r>
 801dbcc:	9900      	ldr	r1, [sp, #0]
 801dbce:	4605      	mov	r5, r0
 801dbd0:	4630      	mov	r0, r6
 801dbd2:	f7fd fabb 	bl	801b14c <_malloc_r>
 801dbd6:	b948      	cbnz	r0, 801dbec <__smakebuf_r+0x44>
 801dbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbdc:	059a      	lsls	r2, r3, #22
 801dbde:	d4ef      	bmi.n	801dbc0 <__smakebuf_r+0x18>
 801dbe0:	f023 0303 	bic.w	r3, r3, #3
 801dbe4:	f043 0302 	orr.w	r3, r3, #2
 801dbe8:	81a3      	strh	r3, [r4, #12]
 801dbea:	e7e3      	b.n	801dbb4 <__smakebuf_r+0xc>
 801dbec:	89a3      	ldrh	r3, [r4, #12]
 801dbee:	6020      	str	r0, [r4, #0]
 801dbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbf4:	81a3      	strh	r3, [r4, #12]
 801dbf6:	9b00      	ldr	r3, [sp, #0]
 801dbf8:	6163      	str	r3, [r4, #20]
 801dbfa:	9b01      	ldr	r3, [sp, #4]
 801dbfc:	6120      	str	r0, [r4, #16]
 801dbfe:	b15b      	cbz	r3, 801dc18 <__smakebuf_r+0x70>
 801dc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dc04:	4630      	mov	r0, r6
 801dc06:	f000 f851 	bl	801dcac <_isatty_r>
 801dc0a:	b128      	cbz	r0, 801dc18 <__smakebuf_r+0x70>
 801dc0c:	89a3      	ldrh	r3, [r4, #12]
 801dc0e:	f023 0303 	bic.w	r3, r3, #3
 801dc12:	f043 0301 	orr.w	r3, r3, #1
 801dc16:	81a3      	strh	r3, [r4, #12]
 801dc18:	89a3      	ldrh	r3, [r4, #12]
 801dc1a:	431d      	orrs	r5, r3
 801dc1c:	81a5      	strh	r5, [r4, #12]
 801dc1e:	e7cf      	b.n	801dbc0 <__smakebuf_r+0x18>

0801dc20 <_putc_r>:
 801dc20:	b570      	push	{r4, r5, r6, lr}
 801dc22:	460d      	mov	r5, r1
 801dc24:	4614      	mov	r4, r2
 801dc26:	4606      	mov	r6, r0
 801dc28:	b118      	cbz	r0, 801dc32 <_putc_r+0x12>
 801dc2a:	6a03      	ldr	r3, [r0, #32]
 801dc2c:	b90b      	cbnz	r3, 801dc32 <_putc_r+0x12>
 801dc2e:	f7fe f8c5 	bl	801bdbc <__sinit>
 801dc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc34:	07d8      	lsls	r0, r3, #31
 801dc36:	d405      	bmi.n	801dc44 <_putc_r+0x24>
 801dc38:	89a3      	ldrh	r3, [r4, #12]
 801dc3a:	0599      	lsls	r1, r3, #22
 801dc3c:	d402      	bmi.n	801dc44 <_putc_r+0x24>
 801dc3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc40:	f7fe fb0f 	bl	801c262 <__retarget_lock_acquire_recursive>
 801dc44:	68a3      	ldr	r3, [r4, #8]
 801dc46:	3b01      	subs	r3, #1
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	60a3      	str	r3, [r4, #8]
 801dc4c:	da05      	bge.n	801dc5a <_putc_r+0x3a>
 801dc4e:	69a2      	ldr	r2, [r4, #24]
 801dc50:	4293      	cmp	r3, r2
 801dc52:	db12      	blt.n	801dc7a <_putc_r+0x5a>
 801dc54:	b2eb      	uxtb	r3, r5
 801dc56:	2b0a      	cmp	r3, #10
 801dc58:	d00f      	beq.n	801dc7a <_putc_r+0x5a>
 801dc5a:	6823      	ldr	r3, [r4, #0]
 801dc5c:	1c5a      	adds	r2, r3, #1
 801dc5e:	6022      	str	r2, [r4, #0]
 801dc60:	701d      	strb	r5, [r3, #0]
 801dc62:	b2ed      	uxtb	r5, r5
 801dc64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dc66:	07da      	lsls	r2, r3, #31
 801dc68:	d405      	bmi.n	801dc76 <_putc_r+0x56>
 801dc6a:	89a3      	ldrh	r3, [r4, #12]
 801dc6c:	059b      	lsls	r3, r3, #22
 801dc6e:	d402      	bmi.n	801dc76 <_putc_r+0x56>
 801dc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dc72:	f7fe faf7 	bl	801c264 <__retarget_lock_release_recursive>
 801dc76:	4628      	mov	r0, r5
 801dc78:	bd70      	pop	{r4, r5, r6, pc}
 801dc7a:	4629      	mov	r1, r5
 801dc7c:	4622      	mov	r2, r4
 801dc7e:	4630      	mov	r0, r6
 801dc80:	f7fe f996 	bl	801bfb0 <__swbuf_r>
 801dc84:	4605      	mov	r5, r0
 801dc86:	e7ed      	b.n	801dc64 <_putc_r+0x44>

0801dc88 <_fstat_r>:
 801dc88:	b538      	push	{r3, r4, r5, lr}
 801dc8a:	4d07      	ldr	r5, [pc, #28]	; (801dca8 <_fstat_r+0x20>)
 801dc8c:	2300      	movs	r3, #0
 801dc8e:	4604      	mov	r4, r0
 801dc90:	4608      	mov	r0, r1
 801dc92:	4611      	mov	r1, r2
 801dc94:	602b      	str	r3, [r5, #0]
 801dc96:	f7e6 f998 	bl	8003fca <_fstat>
 801dc9a:	1c43      	adds	r3, r0, #1
 801dc9c:	d102      	bne.n	801dca4 <_fstat_r+0x1c>
 801dc9e:	682b      	ldr	r3, [r5, #0]
 801dca0:	b103      	cbz	r3, 801dca4 <_fstat_r+0x1c>
 801dca2:	6023      	str	r3, [r4, #0]
 801dca4:	bd38      	pop	{r3, r4, r5, pc}
 801dca6:	bf00      	nop
 801dca8:	20013fb4 	.word	0x20013fb4

0801dcac <_isatty_r>:
 801dcac:	b538      	push	{r3, r4, r5, lr}
 801dcae:	4d06      	ldr	r5, [pc, #24]	; (801dcc8 <_isatty_r+0x1c>)
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	4604      	mov	r4, r0
 801dcb4:	4608      	mov	r0, r1
 801dcb6:	602b      	str	r3, [r5, #0]
 801dcb8:	f7e6 f997 	bl	8003fea <_isatty>
 801dcbc:	1c43      	adds	r3, r0, #1
 801dcbe:	d102      	bne.n	801dcc6 <_isatty_r+0x1a>
 801dcc0:	682b      	ldr	r3, [r5, #0]
 801dcc2:	b103      	cbz	r3, 801dcc6 <_isatty_r+0x1a>
 801dcc4:	6023      	str	r3, [r4, #0]
 801dcc6:	bd38      	pop	{r3, r4, r5, pc}
 801dcc8:	20013fb4 	.word	0x20013fb4

0801dccc <abort>:
 801dccc:	b508      	push	{r3, lr}
 801dcce:	2006      	movs	r0, #6
 801dcd0:	f000 f84a 	bl	801dd68 <raise>
 801dcd4:	2001      	movs	r0, #1
 801dcd6:	f7e6 f929 	bl	8003f2c <_exit>

0801dcda <__ascii_mbtowc>:
 801dcda:	b082      	sub	sp, #8
 801dcdc:	b901      	cbnz	r1, 801dce0 <__ascii_mbtowc+0x6>
 801dcde:	a901      	add	r1, sp, #4
 801dce0:	b142      	cbz	r2, 801dcf4 <__ascii_mbtowc+0x1a>
 801dce2:	b14b      	cbz	r3, 801dcf8 <__ascii_mbtowc+0x1e>
 801dce4:	7813      	ldrb	r3, [r2, #0]
 801dce6:	600b      	str	r3, [r1, #0]
 801dce8:	7812      	ldrb	r2, [r2, #0]
 801dcea:	1e10      	subs	r0, r2, #0
 801dcec:	bf18      	it	ne
 801dcee:	2001      	movne	r0, #1
 801dcf0:	b002      	add	sp, #8
 801dcf2:	4770      	bx	lr
 801dcf4:	4610      	mov	r0, r2
 801dcf6:	e7fb      	b.n	801dcf0 <__ascii_mbtowc+0x16>
 801dcf8:	f06f 0001 	mvn.w	r0, #1
 801dcfc:	e7f8      	b.n	801dcf0 <__ascii_mbtowc+0x16>

0801dcfe <__ascii_wctomb>:
 801dcfe:	b149      	cbz	r1, 801dd14 <__ascii_wctomb+0x16>
 801dd00:	2aff      	cmp	r2, #255	; 0xff
 801dd02:	bf85      	ittet	hi
 801dd04:	238a      	movhi	r3, #138	; 0x8a
 801dd06:	6003      	strhi	r3, [r0, #0]
 801dd08:	700a      	strbls	r2, [r1, #0]
 801dd0a:	f04f 30ff 	movhi.w	r0, #4294967295
 801dd0e:	bf98      	it	ls
 801dd10:	2001      	movls	r0, #1
 801dd12:	4770      	bx	lr
 801dd14:	4608      	mov	r0, r1
 801dd16:	4770      	bx	lr

0801dd18 <_raise_r>:
 801dd18:	291f      	cmp	r1, #31
 801dd1a:	b538      	push	{r3, r4, r5, lr}
 801dd1c:	4604      	mov	r4, r0
 801dd1e:	460d      	mov	r5, r1
 801dd20:	d904      	bls.n	801dd2c <_raise_r+0x14>
 801dd22:	2316      	movs	r3, #22
 801dd24:	6003      	str	r3, [r0, #0]
 801dd26:	f04f 30ff 	mov.w	r0, #4294967295
 801dd2a:	bd38      	pop	{r3, r4, r5, pc}
 801dd2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801dd2e:	b112      	cbz	r2, 801dd36 <_raise_r+0x1e>
 801dd30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dd34:	b94b      	cbnz	r3, 801dd4a <_raise_r+0x32>
 801dd36:	4620      	mov	r0, r4
 801dd38:	f000 f830 	bl	801dd9c <_getpid_r>
 801dd3c:	462a      	mov	r2, r5
 801dd3e:	4601      	mov	r1, r0
 801dd40:	4620      	mov	r0, r4
 801dd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd46:	f000 b817 	b.w	801dd78 <_kill_r>
 801dd4a:	2b01      	cmp	r3, #1
 801dd4c:	d00a      	beq.n	801dd64 <_raise_r+0x4c>
 801dd4e:	1c59      	adds	r1, r3, #1
 801dd50:	d103      	bne.n	801dd5a <_raise_r+0x42>
 801dd52:	2316      	movs	r3, #22
 801dd54:	6003      	str	r3, [r0, #0]
 801dd56:	2001      	movs	r0, #1
 801dd58:	e7e7      	b.n	801dd2a <_raise_r+0x12>
 801dd5a:	2400      	movs	r4, #0
 801dd5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dd60:	4628      	mov	r0, r5
 801dd62:	4798      	blx	r3
 801dd64:	2000      	movs	r0, #0
 801dd66:	e7e0      	b.n	801dd2a <_raise_r+0x12>

0801dd68 <raise>:
 801dd68:	4b02      	ldr	r3, [pc, #8]	; (801dd74 <raise+0xc>)
 801dd6a:	4601      	mov	r1, r0
 801dd6c:	6818      	ldr	r0, [r3, #0]
 801dd6e:	f7ff bfd3 	b.w	801dd18 <_raise_r>
 801dd72:	bf00      	nop
 801dd74:	20000120 	.word	0x20000120

0801dd78 <_kill_r>:
 801dd78:	b538      	push	{r3, r4, r5, lr}
 801dd7a:	4d07      	ldr	r5, [pc, #28]	; (801dd98 <_kill_r+0x20>)
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	4604      	mov	r4, r0
 801dd80:	4608      	mov	r0, r1
 801dd82:	4611      	mov	r1, r2
 801dd84:	602b      	str	r3, [r5, #0]
 801dd86:	f7e6 f8c1 	bl	8003f0c <_kill>
 801dd8a:	1c43      	adds	r3, r0, #1
 801dd8c:	d102      	bne.n	801dd94 <_kill_r+0x1c>
 801dd8e:	682b      	ldr	r3, [r5, #0]
 801dd90:	b103      	cbz	r3, 801dd94 <_kill_r+0x1c>
 801dd92:	6023      	str	r3, [r4, #0]
 801dd94:	bd38      	pop	{r3, r4, r5, pc}
 801dd96:	bf00      	nop
 801dd98:	20013fb4 	.word	0x20013fb4

0801dd9c <_getpid_r>:
 801dd9c:	f7e6 b8ae 	b.w	8003efc <_getpid>

0801dda0 <_init>:
 801dda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dda2:	bf00      	nop
 801dda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dda6:	bc08      	pop	{r3}
 801dda8:	469e      	mov	lr, r3
 801ddaa:	4770      	bx	lr

0801ddac <_fini>:
 801ddac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ddae:	bf00      	nop
 801ddb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ddb2:	bc08      	pop	{r3}
 801ddb4:	469e      	mov	lr, r3
 801ddb6:	4770      	bx	lr
