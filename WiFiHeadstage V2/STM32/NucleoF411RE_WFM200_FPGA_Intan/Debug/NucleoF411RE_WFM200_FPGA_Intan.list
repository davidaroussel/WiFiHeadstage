
NucleoF411RE_WFM200_FPGA_Intan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ce10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004fc38  0801cfb0  0801cfb0  0002cfb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806cbe8  0806cbe8  00080288  2**0
                  CONTENTS
  4 .ARM          00000008  0806cbe8  0806cbe8  0007cbe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806cbf0  0806cbf0  00080288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806cbf0  0806cbf0  0007cbf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806cbf4  0806cbf4  0007cbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0806cbf8  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013dcc  20000288  0806ce80  00080288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014054  0806ce80  00084054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080288  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000802b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031247  00000000  00000000  000802fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009457  00000000  00000000  000b1542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023c8  00000000  00000000  000ba9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c03  00000000  00000000  000bcd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000120a2  00000000  00000000  000be96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a9c0  00000000  00000000  000d0a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6b30  00000000  00000000  0010b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009fa4  00000000  00000000  001c1f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001cbea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801cf98 	.word	0x0801cf98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0801cf98 	.word	0x0801cf98

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <SPI_SEND_RECV_32>:

#include "Task_Apps_Start.h"
#include "SPI_communication.h"


void SPI_SEND_RECV_32(SPI_HandleTypeDef *hspi, uint16_t *tx_ptr, uint16_t *rx_ptr, uint8_t *last_bit) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
    uint16_t Size = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	827b      	strh	r3, [r7, #18]

    /* Variable used to alternate Rx and Tx during transfer */
    uint32_t txallowed = 1U;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]

    /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
    if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d003      	beq.n	8000efe <SPI_SEND_RECV_32+0x2a>
        hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2205      	movs	r2, #5
 8000efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }

    /* Set the transaction information */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	655a      	str	r2, [r3, #84]	; 0x54
    hspi->pRxBuffPtr = (uint8_t *)rx_ptr;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->RxXferCount = Size;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8a7a      	ldrh	r2, [r7, #18]
 8000f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferSize = Size;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8a7a      	ldrh	r2, [r7, #18]
 8000f14:	879a      	strh	r2, [r3, #60]	; 0x3c
    hspi->pTxBuffPtr = (uint8_t *)tx_ptr;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->TxXferCount = Size;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8a7a      	ldrh	r2, [r7, #18]
 8000f20:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->TxXferSize = Size;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	8a7a      	ldrh	r2, [r7, #18]
 8000f26:	869a      	strh	r2, [r3, #52]	; 0x34

    /* Init field not used in handle to zero */
    hspi->RxISR = NULL;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR = NULL;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Check if the SPI is already enabled */
    if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3e:	2b40      	cmp	r3, #64	; 0x40
 8000f40:	d007      	beq.n	8000f52 <SPI_SEND_RECV_32+0x7e>
        /* Enable SPI peripheral */
        __HAL_SPI_ENABLE(hspi);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f50:	601a      	str	r2, [r3, #0]
    }

    // RESET CS_PIN
    RHD_SPI_CS_Port->BSRR = (uint32_t)RHD_SPI_CS_Pin << 16U;
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <SPI_SEND_RECV_32+0x14c>)
 8000f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f58:	619a      	str	r2, [r3, #24]

    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000f5a:	e043      	b.n	8000fe4 <SPI_SEND_RECV_32+0x110>
        /* Check TXE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d11b      	bne.n	8000fa2 <SPI_SEND_RECV_32+0xce>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d016      	beq.n	8000fa2 <SPI_SEND_RECV_32+0xce>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d113      	bne.n	8000fa2 <SPI_SEND_RECV_32+0xce>
            hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	881a      	ldrh	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60da      	str	r2, [r3, #12]
            hspi->pTxBuffPtr += sizeof(uint16_t);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	1c9a      	adds	r2, r3, #2
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
            hspi->TxXferCount--;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	86da      	strh	r2, [r3, #54]	; 0x36
            /* Next Data is a reception (Rx). Tx not allowed */
            txallowed = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
        }

        /* Check RXNE flag */
        if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U)) {
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d119      	bne.n	8000fe4 <SPI_SEND_RECV_32+0x110>
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d014      	beq.n	8000fe4 <SPI_SEND_RECV_32+0x110>
            *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	1c9a      	adds	r2, r3, #2
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38
            hspi->RxXferCount--;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	87da      	strh	r2, [r3, #62]	; 0x3e
            /* Next Data is a Transmission (Tx). Tx is allowed */
            txallowed = 1U;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1b6      	bne.n	8000f5c <SPI_SEND_RECV_32+0x88>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1b1      	bne.n	8000f5c <SPI_SEND_RECV_32+0x88>
        }
    }

    RHD_SPI_CLK_Port->BSRR = RHD_SPI_CLK_Pin;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <SPI_SEND_RECV_32+0x14c>)
 8000ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ffe:	619a      	str	r2, [r3, #24]
    uint16_t dummy = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	823b      	strh	r3, [r7, #16]
    RHD_SPI_CLK_Port->BSRR = (uint32_t)RHD_SPI_CLK_Pin << 16U;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SPI_SEND_RECV_32+0x14c>)
 8001006:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800100a:	619a      	str	r2, [r3, #24]

    // SET CS_PIN
    RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SPI_SEND_RECV_32+0x14c>)
 800100e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40020400 	.word	0x40020400

08001024 <start_app_task>:




void start_app_task(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
//	INIT_TCP();

//	osTimerDef(periodicTimer, PTCallback);
//	periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);

	spi_to_wifi_queue = xQueueCreate(SPI_EVENTS_NB_MAX, sizeof(spi_to_udp_t));
 8001028:	2200      	movs	r2, #0
 800102a:	210c      	movs	r1, #12
 800102c:	2014      	movs	r0, #20
 800102e:	f009 fb33 	bl	800a698 <xQueueGenericCreate>
 8001032:	4603      	mov	r3, r0
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <start_app_task+0x30>)
 8001036:	6013      	str	r3, [r2, #0]
  	if (spi_to_wifi_queue == NULL){
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <start_app_task+0x30>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d102      	bne.n	8001046 <start_app_task+0x22>
  		printf("booboo Queue \r\n");
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <start_app_task+0x34>)
 8001042:	f01a f88d 	bl	801b160 <puts>
//  	}
//  	WIFI_MENU_INIT();
//  	TASK_UDP_TRANSMIT_INIT((void*) spi_to_wifi_queue);
//  	TASK_TCP_TRANSMIT_INIT((void*) spi_to_wifi_queue);

  	TASK_RHD64_SPI_COMMUNICATION_INIT((void*) spi_to_wifi_queue);
 8001046:	4b03      	ldr	r3, [pc, #12]	; (8001054 <start_app_task+0x30>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fb38 	bl	80016c0 <TASK_RHD64_SPI_COMMUNICATION_INIT>
//  	TASK_FPGA_COMMUNICATION_INIT((void*) spi_to_wifi_queue);

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200002a4 	.word	0x200002a4
 8001058:	0801cfb0 	.word	0x0801cfb0

0800105c <INIT_RHD64>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *p_arg);



void INIT_RHD64(SPI_HandleTypeDef *hspi){
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	uint16_t tx_vector;
	uint16_t rx_vector[1] = {0xFFFF};
 8001064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001068:	823b      	strh	r3, [r7, #16]
	uint8_t last_bit[1];
	uint8_t reg_address;
	uint8_t reg_value;
	//SET CS_PIN
	RHD_SPI_CS_Port->BSRR = RHD_SPI_CS_Pin;
 800106a:	4b03      	ldr	r3, [pc, #12]	; (8001078 <INIT_RHD64+0x1c>)
 800106c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001070:	619a      	str	r2, [r3, #24]

	for (int i = 0; i<1000 ; i++){
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	e010      	b.n	800109a <INIT_RHD64+0x3e>
 8001078:	40020400 	.word	0x40020400
		// Register 63 for DUMMY READ on BOOT
		tx_vector = 0b1111111100000000;
 800107c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001080:	827b      	strh	r3, [r7, #18]
		SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	f107 0210 	add.w	r2, r7, #16
 800108a:	f107 0112 	add.w	r1, r7, #18
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff20 	bl	8000ed4 <SPI_SEND_RECV_32>
	for (int i = 0; i<1000 ; i++){
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3301      	adds	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010a0:	dbec      	blt.n	800107c <INIT_RHD64+0x20>

	}

	// Register 0 - ADC config.
	reg_address = 0b10000000;
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11011110;
 80010a6:	23de      	movs	r3, #222	; 0xde
 80010a8:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	021b      	lsls	r3, r3, #8
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	f107 0210 	add.w	r2, r7, #16
 80010c4:	f107 0112 	add.w	r1, r7, #18
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff03 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 1 - Supply sensor & ADC buffer bias current
	reg_address = 0b10000001;
 80010ce:	2381      	movs	r3, #129	; 0x81
 80010d0:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00100000; //(ADC BUFFER BIAS AT 32)
 80010d2:	2320      	movs	r3, #32
 80010d4:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	021b      	lsls	r3, r3, #8
 80010da:	b21a      	sxth	r2, r3
 80010dc:	7dbb      	ldrb	r3, [r7, #22]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	f107 0210 	add.w	r2, r7, #16
 80010f0:	f107 0112 	add.w	r1, r7, #18
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff feed 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 2 - MUX bias current
	reg_address = 0b10000010;
 80010fa:	2382      	movs	r3, #130	; 0x82
 80010fc:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00101000; //(MUX BIAS AT 40)
 80010fe:	2328      	movs	r3, #40	; 0x28
 8001100:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b21a      	sxth	r2, r3
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21b      	sxth	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	f107 0210 	add.w	r2, r7, #16
 800111c:	f107 0112 	add.w	r1, r7, #18
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff fed7 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 3 - MUX Load, Temp sensor, Aux digital output
	reg_address = 0b10000011;
 8001126:	2383      	movs	r3, #131	; 0x83
 8001128:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000010;
 800112a:	2302      	movs	r3, #2
 800112c:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7dbb      	ldrb	r3, [r7, #22]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	f107 0210 	add.w	r2, r7, #16
 8001148:	f107 0112 	add.w	r1, r7, #18
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fec1 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 4 - ADC output format & DSP offset removal
	reg_address = 0b10000100;
 8001152:	2384      	movs	r3, #132	; 0x84
 8001154:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11010110;
 8001156:	23d6      	movs	r3, #214	; 0xd6
 8001158:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800115a:	7dfb      	ldrb	r3, [r7, #23]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	f107 0210 	add.w	r2, r7, #16
 8001174:	f107 0112 	add.w	r1, r7, #18
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff feab 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 5 - Impedance check control
	reg_address = 0b10000101;
 800117e:	2385      	movs	r3, #133	; 0x85
 8001180:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 8001182:	2300      	movs	r3, #0
 8001184:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7dbb      	ldrb	r3, [r7, #22]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21b      	sxth	r3, r3
 8001194:	b29b      	uxth	r3, r3
 8001196:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	f107 0210 	add.w	r2, r7, #16
 80011a0:	f107 0112 	add.w	r1, r7, #18
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fe95 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 6 - Impedance check DAC [unchanged]
	reg_address = 0b10000110;
 80011aa:	2386      	movs	r3, #134	; 0x86
 80011ac:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7dbb      	ldrb	r3, [r7, #22]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21b      	sxth	r3, r3
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	f107 0210 	add.w	r2, r7, #16
 80011cc:	f107 0112 	add.w	r1, r7, #18
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fe7f 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 7 - Impedance check amplifier select [unchanged]
	reg_address = 0b10000111;
 80011d6:	2387      	movs	r3, #135	; 0x87
 80011d8:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 80011da:	2300      	movs	r3, #0
 80011dc:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7dbb      	ldrb	r3, [r7, #22]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	f107 0210 	add.w	r2, r7, #16
 80011f8:	f107 0112 	add.w	r1, r7, #18
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fe69 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 8-13 - On-chip amplifier bandwidth select
	// 	Reg. 8 -> 30
	reg_address = 0b10001000;
 8001202:	2388      	movs	r3, #136	; 0x88
 8001204:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00011110;
 8001206:	231e      	movs	r3, #30
 8001208:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	b21a      	sxth	r2, r3
 8001210:	7dbb      	ldrb	r3, [r7, #22]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29b      	uxth	r3, r3
 800121a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0112 	add.w	r1, r7, #18
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fe53 	bl	8000ed4 <SPI_SEND_RECV_32>

	// 	Reg. 9 -> 5
	reg_address = 0b10001001;
 800122e:	2389      	movs	r3, #137	; 0x89
 8001230:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000101;
 8001232:	2305      	movs	r3, #5
 8001234:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7dbb      	ldrb	r3, [r7, #22]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	f107 0210 	add.w	r2, r7, #16
 8001250:	f107 0112 	add.w	r1, r7, #18
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe3d 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 10 -> 43
	reg_address = 0b10001010;
 800125a:	238a      	movs	r3, #138	; 0x8a
 800125c:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00101011;
 800125e:	232b      	movs	r3, #43	; 0x2b
 8001260:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21a      	sxth	r2, r3
 8001268:	7dbb      	ldrb	r3, [r7, #22]
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	b29b      	uxth	r3, r3
 8001272:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	f107 0112 	add.w	r1, r7, #18
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fe27 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 11 -> 6
	reg_address = 0b10001011;
 8001286:	238b      	movs	r3, #139	; 0x8b
 8001288:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000110;
 800128a:	2306      	movs	r3, #6
 800128c:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800128e:	7dfb      	ldrb	r3, [r7, #23]
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	b21a      	sxth	r2, r3
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	b21b      	sxth	r3, r3
 8001298:	4313      	orrs	r3, r2
 800129a:	b21b      	sxth	r3, r3
 800129c:	b29b      	uxth	r3, r3
 800129e:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	f107 0112 	add.w	r1, r7, #18
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fe11 	bl	8000ed4 <SPI_SEND_RECV_32>

	// 	Reg. 12 -> 54
	reg_address = 0b10001100;
 80012b2:	238c      	movs	r3, #140	; 0x8c
 80012b4:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00110110;
 80012b6:	2336      	movs	r3, #54	; 0x36
 80012b8:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80012ba:	7dfb      	ldrb	r3, [r7, #23]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	7dbb      	ldrb	r3, [r7, #22]
 80012c2:	b21b      	sxth	r3, r3
 80012c4:	4313      	orrs	r3, r2
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	f107 0210 	add.w	r2, r7, #16
 80012d4:	f107 0112 	add.w	r1, r7, #18
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fdfb 	bl	8000ed4 <SPI_SEND_RECV_32>

	// 	Reg. 13 -> 0
	reg_address = 0b10001101;
 80012de:	238d      	movs	r3, #141	; 0x8d
 80012e0:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	7dbb      	ldrb	r3, [r7, #22]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	f107 0210 	add.w	r2, r7, #16
 8001300:	f107 0112 	add.w	r1, r7, #18
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fde5 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Register 14-21 - Individual amplifier power
	//	Reg. 14
	reg_address = 0b10001110;
 800130a:	238e      	movs	r3, #142	; 0x8e
 800130c:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b111111111;
 800130e:	23ff      	movs	r3, #255	; 0xff
 8001310:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7dbb      	ldrb	r3, [r7, #22]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	f107 0210 	add.w	r2, r7, #16
 800132c:	f107 0112 	add.w	r1, r7, #18
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fdcf 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 15
	reg_address = 0b10001111;
 8001336:	238f      	movs	r3, #143	; 0x8f
 8001338:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 800133a:	23ff      	movs	r3, #255	; 0xff
 800133c:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	7dbb      	ldrb	r3, [r7, #22]
 8001346:	b21b      	sxth	r3, r3
 8001348:	4313      	orrs	r3, r2
 800134a:	b21b      	sxth	r3, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	f107 0210 	add.w	r2, r7, #16
 8001358:	f107 0112 	add.w	r1, r7, #18
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fdb9 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 16
	reg_address = 0b10010000;
 8001362:	2390      	movs	r3, #144	; 0x90
 8001364:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 8001366:	23ff      	movs	r3, #255	; 0xff
 8001368:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	7dbb      	ldrb	r3, [r7, #22]
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21b      	sxth	r3, r3
 8001378:	b29b      	uxth	r3, r3
 800137a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	f107 0112 	add.w	r1, r7, #18
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fda3 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 17
	reg_address = 0b10010001;
 800138e:	2391      	movs	r3, #145	; 0x91
 8001390:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 8001392:	23ff      	movs	r3, #255	; 0xff
 8001394:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7dbb      	ldrb	r3, [r7, #22]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	f107 0210 	add.w	r2, r7, #16
 80013b0:	f107 0112 	add.w	r1, r7, #18
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fd8d 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 18
	reg_address = 0b10010010;
 80013ba:	2392      	movs	r3, #146	; 0x92
 80013bc:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 80013be:	23ff      	movs	r3, #255	; 0xff
 80013c0:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	7dbb      	ldrb	r3, [r7, #22]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	f107 0210 	add.w	r2, r7, #16
 80013dc:	f107 0112 	add.w	r1, r7, #18
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fd77 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 19
	reg_address = 0b10010011;
 80013e6:	2393      	movs	r3, #147	; 0x93
 80013e8:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 80013ea:	23ff      	movs	r3, #255	; 0xff
 80013ec:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	7dbb      	ldrb	r3, [r7, #22]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	4313      	orrs	r3, r2
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	f107 0210 	add.w	r2, r7, #16
 8001408:	f107 0112 	add.w	r1, r7, #18
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fd61 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 20
	reg_address = 0b10010100;
 8001412:	2394      	movs	r3, #148	; 0x94
 8001414:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 8001416:	23ff      	movs	r3, #255	; 0xff
 8001418:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	b21a      	sxth	r2, r3
 8001420:	7dbb      	ldrb	r3, [r7, #22]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	b29b      	uxth	r3, r3
 800142a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	f107 0210 	add.w	r2, r7, #16
 8001434:	f107 0112 	add.w	r1, r7, #18
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fd4b 	bl	8000ed4 <SPI_SEND_RECV_32>

	//	Reg. 21
	reg_address = 0b10010101;
 800143e:	2395      	movs	r3, #149	; 0x95
 8001440:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b11111111;
 8001442:	23ff      	movs	r3, #255	; 0xff
 8001444:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b21a      	sxth	r2, r3
 800144c:	7dbb      	ldrb	r3, [r7, #22]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	f107 0210 	add.w	r2, r7, #16
 8001460:	f107 0112 	add.w	r1, r7, #18
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff fd35 	bl	8000ed4 <SPI_SEND_RECV_32>

	// Calibrate ADC
	HAL_Delay(100);
 800146a:	2064      	movs	r0, #100	; 0x64
 800146c:	f003 f860 	bl	8004530 <HAL_Delay>
	reg_address = 0b01010101;
 8001470:	2355      	movs	r3, #85	; 0x55
 8001472:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 8001474:	2300      	movs	r3, #0
 8001476:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7dbb      	ldrb	r3, [r7, #22]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21b      	sxth	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	f107 0210 	add.w	r2, r7, #16
 8001492:	f107 0112 	add.w	r1, r7, #18
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fd1c 	bl	8000ed4 <SPI_SEND_RECV_32>

	for (int i = 0; i<9 ; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	e018      	b.n	80014d4 <INIT_RHD64+0x478>
		// Register 63 for DUMMY READ on BOOT
		reg_address = 0b11111111;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	75fb      	strb	r3, [r7, #23]
		reg_value = 0b00000000;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75bb      	strb	r3, [r7, #22]
		tx_vector = (reg_address << 8) | reg_value;
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	7dbb      	ldrb	r3, [r7, #22]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	827b      	strh	r3, [r7, #18]
		SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	f107 0112 	add.w	r1, r7, #18
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fd03 	bl	8000ed4 <SPI_SEND_RECV_32>
	for (int i = 0; i<9 ; i++){
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	dde3      	ble.n	80014a2 <INIT_RHD64+0x446>
	}



	//Read Register 40
	reg_address = 0b11101000;
 80014da:	23e8      	movs	r3, #232	; 0xe8
 80014dc:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 80014de:	2300      	movs	r3, #0
 80014e0:	75bb      	strb	r3, [r7, #22]

	tx_vector = (reg_address << 8) | reg_value;
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	4313      	orrs	r3, r2
 80014ee:	b21b      	sxth	r3, r3
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	827b      	strh	r3, [r7, #18]
 	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	f107 0210 	add.w	r2, r7, #16
 80014fc:	f107 0112 	add.w	r1, r7, #18
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fce7 	bl	8000ed4 <SPI_SEND_RECV_32>
//	printf("Char Receiving Data 3 (hex):         0x%04X \r\n", rx_vector[0]);        // Print as 16-bit hex
//	printf("-------------------------------------------  \r\n");


	//Read Register 41
	reg_address = 0b11101001;
 8001506:	23e9      	movs	r3, #233	; 0xe9
 8001508:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 800150a:	2300      	movs	r3, #0
 800150c:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	021b      	lsls	r3, r3, #8
 8001512:	b21a      	sxth	r2, r3
 8001514:	7dbb      	ldrb	r3, [r7, #22]
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	f107 0210 	add.w	r2, r7, #16
 8001528:	f107 0112 	add.w	r1, r7, #18
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fcd1 	bl	8000ed4 <SPI_SEND_RECV_32>
//	printf("-------------------------------------------  \r\n");

	uint16_t formated_value;

	//Read Register 42
	reg_address = 0b11101010;
 8001532:	23ea      	movs	r3, #234	; 0xea
 8001534:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 8001536:	2300      	movs	r3, #0
 8001538:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	021b      	lsls	r3, r3, #8
 800153e:	b21a      	sxth	r2, r3
 8001540:	7dbb      	ldrb	r3, [r7, #22]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21b      	sxth	r3, r3
 8001548:	b29b      	uxth	r3, r3
 800154a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	f107 0210 	add.w	r2, r7, #16
 8001554:	f107 0112 	add.w	r1, r7, #18
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fcbb 	bl	8000ed4 <SPI_SEND_RECV_32>
	formated_value = rx_vector[0] << 1;
 800155e:	8a3b      	ldrh	r3, [r7, #16]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	82bb      	strh	r3, [r7, #20]
	printf("Char Receiving Data - Should be I :       %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001564:	8abb      	ldrh	r3, [r7, #20]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	4619      	mov	r1, r3
 800156a:	8abb      	ldrh	r3, [r7, #20]
 800156c:	461a      	mov	r2, r3
 800156e:	484e      	ldr	r0, [pc, #312]	; (80016a8 <INIT_RHD64+0x64c>)
 8001570:	f019 fd90 	bl	801b094 <iprintf>

//	printf("Char Receiving Data - Should be I :       %c - 0x%04X \r\n", (char)rx_vector[0], rx_vector[0]);        // Print as 16-bit hex
	printf("-------------------------------------------  \r\n");
 8001574:	484d      	ldr	r0, [pc, #308]	; (80016ac <INIT_RHD64+0x650>)
 8001576:	f019 fdf3 	bl	801b160 <puts>

	//Read Register 43
	reg_address = 0b11101011;
 800157a:	23eb      	movs	r3, #235	; 0xeb
 800157c:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 800157e:	2300      	movs	r3, #0
 8001580:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	7dbb      	ldrb	r3, [r7, #22]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);           // Print as unsigned integer
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	f107 0210 	add.w	r2, r7, #16
 800159c:	f107 0112 	add.w	r1, r7, #18
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fc97 	bl	8000ed4 <SPI_SEND_RECV_32>
	formated_value = rx_vector[0] << 1;
 80015a6:	8a3b      	ldrh	r3, [r7, #16]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	82bb      	strh	r3, [r7, #20]
	printf("Char Receiving Data - Should be N :       %c - 0x%04X \r\n", (char)formated_value, formated_value);
 80015ac:	8abb      	ldrh	r3, [r7, #20]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	8abb      	ldrh	r3, [r7, #20]
 80015b4:	461a      	mov	r2, r3
 80015b6:	483e      	ldr	r0, [pc, #248]	; (80016b0 <INIT_RHD64+0x654>)
 80015b8:	f019 fd6c 	bl	801b094 <iprintf>
//	printf("Char Receiving Data - Should be N :       %c - 0x%04X \r\n", (char)rx_vector[0], rx_vector[0]);
	printf("-------------------------------------------  \r\n");
 80015bc:	483b      	ldr	r0, [pc, #236]	; (80016ac <INIT_RHD64+0x650>)
 80015be:	f019 fdcf 	bl	801b160 <puts>

	//Read Register 44
	reg_address = 0b11101100;
 80015c2:	23ec      	movs	r3, #236	; 0xec
 80015c4:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 80015c6:	2300      	movs	r3, #0
 80015c8:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 80015ca:	7dfb      	ldrb	r3, [r7, #23]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7dbb      	ldrb	r3, [r7, #22]
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	b29b      	uxth	r3, r3
 80015da:	827b      	strh	r3, [r7, #18]
	// Should Receive T
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	f107 0210 	add.w	r2, r7, #16
 80015e4:	f107 0112 	add.w	r1, r7, #18
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff fc73 	bl	8000ed4 <SPI_SEND_RECV_32>
	formated_value = rx_vector[0] << 1;
 80015ee:	8a3b      	ldrh	r3, [r7, #16]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	82bb      	strh	r3, [r7, #20]
	printf("Char Receiving Data - Should be T :       %c - 0x%04X \r\n", (char)formated_value, formated_value);
 80015f4:	8abb      	ldrh	r3, [r7, #20]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	8abb      	ldrh	r3, [r7, #20]
 80015fc:	461a      	mov	r2, r3
 80015fe:	482d      	ldr	r0, [pc, #180]	; (80016b4 <INIT_RHD64+0x658>)
 8001600:	f019 fd48 	bl	801b094 <iprintf>
//	printf("Char Receiving Data - Should be T :       %c - 0x%04X \r\n", (char)rx_vector[0], rx_vector[0]);

	printf("-------------------------------------------  \r\n");
 8001604:	4829      	ldr	r0, [pc, #164]	; (80016ac <INIT_RHD64+0x650>)
 8001606:	f019 fdab 	bl	801b160 <puts>

	reg_address = 0b11111111;
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 800160e:	2300      	movs	r3, #0
 8001610:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	7dbb      	ldrb	r3, [r7, #22]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21b      	sxth	r3, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	f107 0210 	add.w	r2, r7, #16
 800162c:	f107 0112 	add.w	r1, r7, #18
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fc4f 	bl	8000ed4 <SPI_SEND_RECV_32>
	formated_value = rx_vector[0] << 1;
 8001636:	8a3b      	ldrh	r3, [r7, #16]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	82bb      	strh	r3, [r7, #20]
	printf("Char Receiving Data - Should be A :       %c - 0x%04X \r\n", (char)formated_value, formated_value);
 800163c:	8abb      	ldrh	r3, [r7, #20]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4619      	mov	r1, r3
 8001642:	8abb      	ldrh	r3, [r7, #20]
 8001644:	461a      	mov	r2, r3
 8001646:	481c      	ldr	r0, [pc, #112]	; (80016b8 <INIT_RHD64+0x65c>)
 8001648:	f019 fd24 	bl	801b094 <iprintf>
//	printf("Char Receiving Data - Should be A :       %c - 0x%04X \r\n", (char)rx_vector[0], rx_vector[0]);
	printf("-------------------------------------------  \r\n");
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <INIT_RHD64+0x650>)
 800164e:	f019 fd87 	bl	801b160 <puts>

	reg_address = 0b11111111;
 8001652:	23ff      	movs	r3, #255	; 0xff
 8001654:	75fb      	strb	r3, [r7, #23]
	reg_value = 0b00000000;
 8001656:	2300      	movs	r3, #0
 8001658:	75bb      	strb	r3, [r7, #22]
	tx_vector = (reg_address << 8) | reg_value;
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b21b      	sxth	r3, r3
 8001668:	b29b      	uxth	r3, r3
 800166a:	827b      	strh	r3, [r7, #18]
	SPI_SEND_RECV_32(hspi, &tx_vector, rx_vector, last_bit);
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	f107 0112 	add.w	r1, r7, #18
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fc2b 	bl	8000ed4 <SPI_SEND_RECV_32>
	formated_value = rx_vector[0] << 1;
 800167e:	8a3b      	ldrh	r3, [r7, #16]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	82bb      	strh	r3, [r7, #20]
	printf("Char Receiving Data - Should be N :       %c - 0x%04X \r\n", (char)formated_value, formated_value);
 8001684:	8abb      	ldrh	r3, [r7, #20]
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4619      	mov	r1, r3
 800168a:	8abb      	ldrh	r3, [r7, #20]
 800168c:	461a      	mov	r2, r3
 800168e:	4808      	ldr	r0, [pc, #32]	; (80016b0 <INIT_RHD64+0x654>)
 8001690:	f019 fd00 	bl	801b094 <iprintf>
//	printf("Char Receiving Data - Should be N :       %c - 0x%04X \r\n", (char)rx_vector[0], rx_vector[0]);
	printf("-------------------------------------------  \r\n");
 8001694:	4805      	ldr	r0, [pc, #20]	; (80016ac <INIT_RHD64+0x650>)
 8001696:	f019 fd63 	bl	801b160 <puts>


	printf("FUCK OFF CA MARCHE !!!! \r\n");
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <INIT_RHD64+0x660>)
 800169c:	f019 fd60 	bl	801b160 <puts>

 }
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	0801cfc0 	.word	0x0801cfc0
 80016ac:	0801cffc 	.word	0x0801cffc
 80016b0:	0801d02c 	.word	0x0801d02c
 80016b4:	0801d068 	.word	0x0801d068
 80016b8:	0801d0a4 	.word	0x0801d0a4
 80016bc:	0801d0e0 	.word	0x0801d0e0

080016c0 <TASK_RHD64_SPI_COMMUNICATION_INIT>:




void TASK_RHD64_SPI_COMMUNICATION_INIT (void *arg) {
 80016c0:	b5b0      	push	{r4, r5, r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	//CREATE xQueue
	printf("Starting RHD Task \r\n");
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x40>)
 80016ca:	f019 fd49 	bl	801b160 <puts>
	osThreadDef(RHD64_SPI_handle, RHD64_SPI_COMMUNICATION_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*10);
 80016ce:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x44>)
 80016d0:	f107 040c 	add.w	r4, r7, #12
 80016d4:	461d      	mov	r5, r3
 80016d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	6023      	str	r3, [r4, #0]

	if (osThreadCreate(osThread(RHD64_SPI_handle), (void *)arg) == NULL){
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f008 fb5c 	bl	8009da2 <osThreadCreate>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x36>
		printf("Booboo created SPI task \r\n");
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <TASK_RHD64_SPI_COMMUNICATION_INIT+0x48>)
 80016f2:	f019 fd35 	bl	801b160 <puts>
	}
}
 80016f6:	bf00      	nop
 80016f8:	3720      	adds	r7, #32
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bdb0      	pop	{r4, r5, r7, pc}
 80016fe:	bf00      	nop
 8001700:	0801d0fc 	.word	0x0801d0fc
 8001704:	0801d140 	.word	0x0801d140
 8001708:	0801d110 	.word	0x0801d110

0800170c <RHD64_SPI_COMMUNICATION_task_entry>:

void RHD64_SPI_COMMUNICATION_task_entry(void const *arg){
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ac      	sub	sp, #176	; 0xb0
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	uint8_t DATA_CH0[2];
	uint8_t DATA_CH32[2];

	uint16_t UDP_vector[32][2];

	uint16_t counter = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	spi_to_udp_t spi_message = {0};
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]

	SPI_HandleTypeDef *hspi;
	hspi = &hspi4;
 8001726:	4b19      	ldr	r3, [pc, #100]	; (800178c <RHD64_SPI_COMMUNICATION_task_entry+0x80>)
 8001728:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	//Activate SPI
	SET_BIT(hspi->Instance->CR1, SPI_CR1_SPE);
 800172c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800173e:	601a      	str	r2, [r3, #0]

	//Activating the 16bit data mode
	SPI4->CR1 |= 0x800;
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <RHD64_SPI_COMMUNICATION_task_entry+0x84>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a12      	ldr	r2, [pc, #72]	; (8001790 <RHD64_SPI_COMMUNICATION_task_entry+0x84>)
 8001746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174a:	6013      	str	r3, [r2, #0]
//			tx_vector[i+1] = i+1;
//		}
//	}


	printf("Init RHD \r\n");
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <RHD64_SPI_COMMUNICATION_task_entry+0x88>)
 800174e:	f019 fd07 	bl	801b160 <puts>
	INIT_RHD64(hspi);
 8001752:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8001756:	f7ff fc81 	bl	800105c <INIT_RHD64>
//		FULL_TASK_SCOPE_Port->BSRR = FULL_TASK_SCOPE_Pin;
//		//SET SPI_TASK_Scope_Pin
//		SPI_TASK_SCOPE_Port->BSRR = SPI_TASK_SCOPE_Pin;
//
//		spi_message.buffer = (void*)transmit_vector;
		if (spi_flag){
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <RHD64_SPI_COMMUNICATION_task_entry+0x8c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d010      	beq.n	8001784 <RHD64_SPI_COMMUNICATION_task_entry+0x78>
			if (arg != 0){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f8      	beq.n	800175a <RHD64_SPI_COMMUNICATION_task_entry+0x4e>

				if(xQueueSend((QueueHandle_t)arg,
 8001768:	f107 0108 	add.w	r1, r7, #8
 800176c:	2300      	movs	r3, #0
 800176e:	220a      	movs	r2, #10
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f009 f819 	bl	800a7a8 <xQueueGenericSend>
 8001776:	4603      	mov	r3, r0
 8001778:	2b01      	cmp	r3, #1
 800177a:	d0ee      	beq.n	800175a <RHD64_SPI_COMMUNICATION_task_entry+0x4e>
							 (void *)&spi_message,
							 (TickType_t)10) != pdPASS)
				{
					printf("problem in queueSend \r\n");
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <RHD64_SPI_COMMUNICATION_task_entry+0x90>)
 800177e:	f019 fcef 	bl	801b160 <puts>
 8001782:	e7ea      	b.n	800175a <RHD64_SPI_COMMUNICATION_task_entry+0x4e>
				//RESET SPI_TASK_Scope_Pin
//				SPI_TASK_SCOPE_Port->BSRR = (uint32_t)SPI_TASK_SCOPE_Pin << 16U;
			}
		}
		else{
			vTaskDelay(1);
 8001784:	2001      	movs	r0, #1
 8001786:	f00a f831 	bl	800b7ec <vTaskDelay>
		if (spi_flag){
 800178a:	e7e6      	b.n	800175a <RHD64_SPI_COMMUNICATION_task_entry+0x4e>
 800178c:	200009d4 	.word	0x200009d4
 8001790:	40013400 	.word	0x40013400
 8001794:	0801d154 	.word	0x0801d154
 8001798:	200002a8 	.word	0x200002a8
 800179c:	0801d160 	.word	0x0801d160

080017a0 <from_hex>:
 *
 * @param ch Character to convert to integer.
 * @returns Returns integer result.
 ******************************************************************************/
char from_hex(char ch)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  return isdigit(ch) ? ch - '0' : tolower(ch) - 'a' + 10;
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	3301      	adds	r3, #1
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <from_hex+0x54>)
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <from_hex+0x24>
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	3b30      	subs	r3, #48	; 0x30
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	e011      	b.n	80017e8 <from_hex+0x48>
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <from_hex+0x54>)
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <from_hex+0x40>
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	3320      	adds	r3, #32
 80017de:	e000      	b.n	80017e2 <from_hex+0x42>
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3b57      	subs	r3, #87	; 0x57
 80017e6:	b2db      	uxtb	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	0806c88b 	.word	0x0806c88b

080017f8 <url_decode>:
 *
 * @param str String to decode.
 * @returns Success or fail.
 ******************************************************************************/
sl_status_t url_decode(char *str)
{
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b095      	sub	sp, #84	; 0x54
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  char *pstr = str, rstr[64];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	64fb      	str	r3, [r7, #76]	; 0x4c
  int i = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48

  if (strlen(str) > 64) {
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7fe fd49 	bl	80002a0 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	2b40      	cmp	r3, #64	; 0x40
 8001812:	d947      	bls.n	80018a4 <url_decode+0xac>
    return SL_STATUS_FAIL;
 8001814:	2301      	movs	r3, #1
 8001816:	e056      	b.n	80018c6 <url_decode+0xce>
  }

  while (*pstr) {
    if (*pstr == '%') {
 8001818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b25      	cmp	r3, #37	; 0x25
 800181e:	d128      	bne.n	8001872 <url_decode+0x7a>
      if (pstr[1] && pstr[2]) {
 8001820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001822:	3301      	adds	r3, #1
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d039      	beq.n	800189e <url_decode+0xa6>
 800182a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182c:	3302      	adds	r3, #2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d034      	beq.n	800189e <url_decode+0xa6>
        rstr[i++] = from_hex(pstr[1]) << 4 | from_hex(pstr[2]);
 8001834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001836:	3301      	adds	r3, #1
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffb0 	bl	80017a0 <from_hex>
 8001840:	4603      	mov	r3, r0
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	b25c      	sxtb	r4, r3
 8001846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001848:	3302      	adds	r3, #2
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ffa7 	bl	80017a0 <from_hex>
 8001852:	4603      	mov	r3, r0
 8001854:	b25b      	sxtb	r3, r3
 8001856:	4323      	orrs	r3, r4
 8001858:	b259      	sxtb	r1, r3
 800185a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001860:	b2ca      	uxtb	r2, r1
 8001862:	3350      	adds	r3, #80	; 0x50
 8001864:	443b      	add	r3, r7
 8001866:	f803 2c48 	strb.w	r2, [r3, #-72]
        pstr += 2;
 800186a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800186c:	3302      	adds	r3, #2
 800186e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001870:	e015      	b.n	800189e <url_decode+0xa6>
      }
    } else if (*pstr == '+') {
 8001872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b2b      	cmp	r3, #43	; 0x2b
 8001878:	d108      	bne.n	800188c <url_decode+0x94>
      rstr[i++]  = ' ';
 800187a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187c:	1c5a      	adds	r2, r3, #1
 800187e:	64ba      	str	r2, [r7, #72]	; 0x48
 8001880:	3350      	adds	r3, #80	; 0x50
 8001882:	443b      	add	r3, r7
 8001884:	2220      	movs	r2, #32
 8001886:	f803 2c48 	strb.w	r2, [r3, #-72]
 800188a:	e008      	b.n	800189e <url_decode+0xa6>
    } else {
      rstr[i++] = *pstr;
 800188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	64ba      	str	r2, [r7, #72]	; 0x48
 8001892:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	3350      	adds	r3, #80	; 0x50
 8001898:	443b      	add	r3, r7
 800189a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
    pstr++;
 800189e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a0:	3301      	adds	r3, #1
 80018a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (*pstr) {
 80018a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1b5      	bne.n	8001818 <url_decode+0x20>
  }
  rstr[i] = '\0';
 80018ac:	f107 0208 	add.w	r2, r7, #8
 80018b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018b2:	4413      	add	r3, r2
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
  strcpy(str, &rstr[0]);
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f019 fdff 	bl	801b4c2 <strcpy>
  return SL_STATUS_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3754      	adds	r7, #84	; 0x54
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd90      	pop	{r4, r7, pc}
	...

080018d0 <wifi_autoconnexion_init>:



void wifi_autoconnexion_init(void)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0

	osThreadDef(autoconnect_task, wifi_station_connect_task_entry, osPriorityBelowNormal, 0, 1024);
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <wifi_autoconnexion_init+0x28>)
 80018d8:	1d3c      	adds	r4, r7, #4
 80018da:	461d      	mov	r5, r3
 80018dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(autoconnect_task), NULL);
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f008 fa5a 	bl	8009da2 <osThreadCreate>

}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bdb0      	pop	{r4, r5, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	0801d18c 	.word	0x0801d18c

080018fc <wifi_station_connect_task_entry>:

/***************************************************************************//**
 * @brief Web server CGI handler to start the station interface.
 ******************************************************************************/
void wifi_station_connect_task_entry(const void *args)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b097      	sub	sp, #92	; 0x5c
 8001900:	af08      	add	r7, sp, #32
 8001902:	6078      	str	r0, [r7, #4]
  sl_status_t status;
  int num_params = 3;
 8001904:	2303      	movs	r3, #3
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
  char *pc_param[] ={"ssid", "pwd", "secu"," "};
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <wifi_station_connect_task_entry+0x170>)
 800190a:	f107 0418 	add.w	r4, r7, #24
 800190e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  char *pc_value[] ={WLAN_SSID_DEFAULT, WLAN_PASSKEY_DEFAULT, "WPA2"," "};
 8001914:	4b56      	ldr	r3, [pc, #344]	; (8001a70 <wifi_station_connect_task_entry+0x174>)
 8001916:	f107 0408 	add.w	r4, r7, #8
 800191a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  int ssid_length = 0, passkey_length = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	637b      	str	r3, [r7, #52]	; 0x34
 8001924:	2300      	movs	r3, #0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30

  if (num_params == 3) {
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	2b03      	cmp	r3, #3
 800192c:	f040 8096 	bne.w	8001a5c <wifi_station_connect_task_entry+0x160>
    if (strcmp(pc_param[0], "ssid") == 0)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	4950      	ldr	r1, [pc, #320]	; (8001a74 <wifi_station_connect_task_entry+0x178>)
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fc53 	bl	80001e0 <strcmp>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d114      	bne.n	800196a <wifi_station_connect_task_entry+0x6e>
    {
      url_decode(pc_value[0]);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff58 	bl	80017f8 <url_decode>
      ssid_length = strlen(pc_value[0]);
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fca8 	bl	80002a0 <strlen>
 8001950:	4603      	mov	r3, r0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
      memset(wlan_ssid, 0, 32);
 8001954:	2220      	movs	r2, #32
 8001956:	2100      	movs	r1, #0
 8001958:	4847      	ldr	r0, [pc, #284]	; (8001a78 <wifi_station_connect_task_entry+0x17c>)
 800195a:	f019 fcfd 	bl	801b358 <memset>
      strncpy(wlan_ssid, pc_value[0], ssid_length);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001962:	4619      	mov	r1, r3
 8001964:	4844      	ldr	r0, [pc, #272]	; (8001a78 <wifi_station_connect_task_entry+0x17c>)
 8001966:	f019 fd11 	bl	801b38c <strncpy>
    }
    if (strcmp(pc_param[1], "pwd") == 0)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	4943      	ldr	r1, [pc, #268]	; (8001a7c <wifi_station_connect_task_entry+0x180>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fc36 	bl	80001e0 <strcmp>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d114      	bne.n	80019a4 <wifi_station_connect_task_entry+0xa8>
    {
      url_decode(pc_value[1]);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff3b 	bl	80017f8 <url_decode>
      passkey_length = strlen(pc_value[1]);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fc8b 	bl	80002a0 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	633b      	str	r3, [r7, #48]	; 0x30
      memset(wlan_passkey, 0, 64);
 800198e:	2240      	movs	r2, #64	; 0x40
 8001990:	2100      	movs	r1, #0
 8001992:	483b      	ldr	r0, [pc, #236]	; (8001a80 <wifi_station_connect_task_entry+0x184>)
 8001994:	f019 fce0 	bl	801b358 <memset>
      strncpy(wlan_passkey, pc_value[1], passkey_length);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800199c:	4619      	mov	r1, r3
 800199e:	4838      	ldr	r0, [pc, #224]	; (8001a80 <wifi_station_connect_task_entry+0x184>)
 80019a0:	f019 fcf4 	bl	801b38c <strncpy>
    }
    if (strcmp(pc_param[2], "secu") == 0)
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <wifi_station_connect_task_entry+0x188>)
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fc19 	bl	80001e0 <strcmp>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d12e      	bne.n	8001a12 <wifi_station_connect_task_entry+0x116>
    {
      url_decode(pc_value[2]);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff1e 	bl	80017f8 <url_decode>
      if ((strcmp(pc_value[2], "WPA2") == 0) || (strcmp(pc_value[2], "WPA") == 0))
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4932      	ldr	r1, [pc, #200]	; (8001a88 <wifi_station_connect_task_entry+0x18c>)
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fc0d 	bl	80001e0 <strcmp>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <wifi_station_connect_task_entry+0xe0>
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	492f      	ldr	r1, [pc, #188]	; (8001a8c <wifi_station_connect_task_entry+0x190>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fc05 	bl	80001e0 <strcmp>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <wifi_station_connect_task_entry+0xe8>
      {
        wlan_security = WFM_SECURITY_MODE_WPA2_WPA1_PSK;
 80019dc:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <wifi_station_connect_task_entry+0x194>)
 80019de:	2202      	movs	r2, #2
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	e016      	b.n	8001a12 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "WEP") == 0)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	492b      	ldr	r1, [pc, #172]	; (8001a94 <wifi_station_connect_task_entry+0x198>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fbf9 	bl	80001e0 <strcmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d103      	bne.n	80019fc <wifi_station_connect_task_entry+0x100>
      {
        wlan_security = WFM_SECURITY_MODE_WEP;
 80019f4:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <wifi_station_connect_task_entry+0x194>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e00a      	b.n	8001a12 <wifi_station_connect_task_entry+0x116>
      }else if (strcmp(pc_value[2], "OPEN") == 0)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4926      	ldr	r1, [pc, #152]	; (8001a98 <wifi_station_connect_task_entry+0x19c>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fbed 	bl	80001e0 <strcmp>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <wifi_station_connect_task_entry+0x116>
      {
        wlan_security = WFM_SECURITY_MODE_OPEN;
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <wifi_station_connect_task_entry+0x194>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
      }
    }
    if (!(wifi.state & SL_WFX_STA_INTERFACE_CONNECTED))
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <wifi_station_connect_task_entry+0x1a0>)
 8001a14:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d120      	bne.n	8001a62 <wifi_station_connect_task_entry+0x166>
    {

      status = sl_wfx_send_join_command((uint8_t*) wlan_ssid, ssid_length,
 8001a20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <wifi_station_connect_task_entry+0x194>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a28:	b292      	uxth	r2, r2
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	9006      	str	r0, [sp, #24]
 8001a2e:	2000      	movs	r0, #0
 8001a30:	9005      	str	r0, [sp, #20]
 8001a32:	9204      	str	r2, [sp, #16]
 8001a34:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <wifi_station_connect_task_entry+0x184>)
 8001a36:	9203      	str	r2, [sp, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	9201      	str	r2, [sp, #4]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2200      	movs	r2, #0
 8001a46:	480c      	ldr	r0, [pc, #48]	; (8001a78 <wifi_station_connect_task_entry+0x17c>)
 8001a48:	f006 f950 	bl	8007cec <sl_wfx_send_join_command>
 8001a4c:	62b8      	str	r0, [r7, #40]	; 0x28
                                        NULL, 0, wlan_security, 0, 0,
                                        (uint8_t*) wlan_passkey, passkey_length,
                                        NULL, 0);\

      if(status != SL_STATUS_OK)
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <wifi_station_connect_task_entry+0x166>
      {
        printf("Connection command error\r\n");
 8001a54:	4812      	ldr	r0, [pc, #72]	; (8001aa0 <wifi_station_connect_task_entry+0x1a4>)
 8001a56:	f019 fb83 	bl	801b160 <puts>
 8001a5a:	e002      	b.n	8001a62 <wifi_station_connect_task_entry+0x166>
        //strcpy(event_log, "Connection command error");
      }
    }
  }else{
    printf("Invalid Connection Request\r\n");
 8001a5c:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <wifi_station_connect_task_entry+0x1a8>)
 8001a5e:	f019 fb7f 	bl	801b160 <puts>
  }

  // Delete the init thread.
  while(1){
	  osThreadTerminate(NULL);
 8001a62:	2000      	movs	r0, #0
 8001a64:	f008 f9c4 	bl	8009df0 <osThreadTerminate>
 8001a68:	e7fb      	b.n	8001a62 <wifi_station_connect_task_entry+0x166>
 8001a6a:	bf00      	nop
 8001a6c:	0801d208 	.word	0x0801d208
 8001a70:	0801d234 	.word	0x0801d234
 8001a74:	0801d1a0 	.word	0x0801d1a0
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	0801d1a8 	.word	0x0801d1a8
 8001a80:	20000024 	.word	0x20000024
 8001a84:	0801d1ac 	.word	0x0801d1ac
 8001a88:	0801d1b4 	.word	0x0801d1b4
 8001a8c:	0801d1bc 	.word	0x0801d1bc
 8001a90:	20000065 	.word	0x20000065
 8001a94:	0801d1c0 	.word	0x0801d1c0
 8001a98:	0801d1c4 	.word	0x0801d1c4
 8001a9c:	200003ac 	.word	0x200003ac
 8001aa0:	0801d1cc 	.word	0x0801d1cc
 8001aa4:	0801d1e8 	.word	0x0801d1e8

08001aa8 <dhcpclient_set_link_state>:
 * Notify DHCP client task about the wifi status
 *
 * @param link_up link status
 ******************************************************************************/
void dhcpclient_set_link_state(int link_up)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if (link_up) {
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <dhcpclient_set_link_state+0x16>
    dhcp_state = DHCP_START;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <dhcpclient_set_link_state+0x28>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
  } else {
    /* Update DHCP state machine */
    dhcp_state = DHCP_LINK_DOWN;
  }
}
 8001abc:	e002      	b.n	8001ac4 <dhcpclient_set_link_state+0x1c>
    dhcp_state = DHCP_LINK_DOWN;
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <dhcpclient_set_link_state+0x28>)
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	701a      	strb	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	200005d0 	.word	0x200005d0

08001ad4 <dhcpclient_start>:
 * DHCP client task.
 *
 * @param arg Network interface
 ******************************************************************************/
void dhcpclient_start(void const * argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *) argument;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp;

  for (;;)
  {

    switch (dhcp_state)
 8001ae0:	4b9a      	ldr	r3, [pc, #616]	; (8001d4c <dhcpclient_start+0x278>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	f000 811f 	beq.w	8001d2a <dhcpclient_start+0x256>
 8001aec:	2b05      	cmp	r3, #5
 8001aee:	f300 8125 	bgt.w	8001d3c <dhcpclient_start+0x268>
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d002      	beq.n	8001afc <dhcpclient_start+0x28>
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d012      	beq.n	8001b20 <dhcpclient_start+0x4c>
      /* Stop DHCP */
      netifapi_dhcp_stop(netif);
      dhcp_state = DHCP_OFF; 
    }
    break;
    default: break;
 8001afa:	e11f      	b.n	8001d3c <dhcpclient_start+0x268>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
        ip_addr_set_zero_ip4(&netif->netmask);
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
        ip_addr_set_zero_ip4(&netif->gw);       
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
        netifapi_dhcp_start(netif);
 8001b0e:	4a90      	ldr	r2, [pc, #576]	; (8001d50 <dhcpclient_start+0x27c>)
 8001b10:	2100      	movs	r1, #0
 8001b12:	69f8      	ldr	r0, [r7, #28]
 8001b14:	f00b fd38 	bl	800d588 <netifapi_netif_common>
        dhcp_state = DHCP_WAIT_ADDRESS;
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <dhcpclient_start+0x278>)
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e110      	b.n	8001d42 <dhcpclient_start+0x26e>
        if (dhcp_supplied_address(netif)) 
 8001b20:	69f8      	ldr	r0, [r7, #28]
 8001b22:	f015 febb 	bl	801789c <dhcp_supplied_address>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d018      	beq.n	8001b5e <dhcpclient_start+0x8a>
          dhcp_state = DHCP_ADDRESS_ASSIGNED;	
 8001b2c:	4b87      	ldr	r3, [pc, #540]	; (8001d4c <dhcpclient_start+0x278>)
 8001b2e:	2203      	movs	r2, #3
 8001b30:	701a      	strb	r2, [r3, #0]
                  sta_netif.ip_addr.addr & 0xff,
 8001b32:	4b88      	ldr	r3, [pc, #544]	; (8001d54 <dhcpclient_start+0x280>)
 8001b34:	685b      	ldr	r3, [r3, #4]
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001b36:	b2d9      	uxtb	r1, r3
                  (sta_netif.ip_addr.addr >> 8) & 0xff,
 8001b38:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <dhcpclient_start+0x280>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001b3e:	b2da      	uxtb	r2, r3
                  (sta_netif.ip_addr.addr >> 16) & 0xff,
 8001b40:	4b84      	ldr	r3, [pc, #528]	; (8001d54 <dhcpclient_start+0x280>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001b46:	b2d8      	uxtb	r0, r3
                  (sta_netif.ip_addr.addr >> 24) & 0xff);
 8001b48:	4b82      	ldr	r3, [pc, #520]	; (8001d54 <dhcpclient_start+0x280>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0e1b      	lsrs	r3, r3, #24
          printf("IP address : %lu.%lu.%lu.%lu\r\n",
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4603      	mov	r3, r0
 8001b52:	4881      	ldr	r0, [pc, #516]	; (8001d58 <dhcpclient_start+0x284>)
 8001b54:	f019 fa9e 	bl	801b094 <iprintf>
          start_app_task();
 8001b58:	f7ff fa64 	bl	8001024 <start_app_task>
      break;
 8001b5c:	e0f0      	b.n	8001d40 <dhcpclient_start+0x26c>
          dhcp = (struct dhcp *)netif_get_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP);
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	61bb      	str	r3, [r7, #24]
          if (dhcp->tries > MAX_DHCP_TRIES)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	799b      	ldrb	r3, [r3, #6]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	f240 80e9 	bls.w	8001d40 <dhcpclient_start+0x26c>
            dhcp_state = DHCP_TIMEOUT;
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <dhcpclient_start+0x278>)
 8001b70:	2204      	movs	r2, #4
 8001b72:	701a      	strb	r2, [r3, #0]
            netifapi_dhcp_stop(netif);
 8001b74:	2200      	movs	r2, #0
 8001b76:	4979      	ldr	r1, [pc, #484]	; (8001d5c <dhcpclient_start+0x288>)
 8001b78:	69f8      	ldr	r0, [r7, #28]
 8001b7a:	f00b fd05 	bl	800d588 <netifapi_netif_common>
            IP_ADDR4(&ipaddr, sta_ip_addr0 , sta_ip_addr1 , sta_ip_addr2 , sta_ip_addr3 );
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <dhcpclient_start+0x28c>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	061a      	lsls	r2, r3, #24
 8001b84:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <dhcpclient_start+0x290>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	4b76      	ldr	r3, [pc, #472]	; (8001d68 <dhcpclient_start+0x294>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	021b      	lsls	r3, r3, #8
 8001b92:	4313      	orrs	r3, r2
 8001b94:	4a75      	ldr	r2, [pc, #468]	; (8001d6c <dhcpclient_start+0x298>)
 8001b96:	7812      	ldrb	r2, [r2, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	061a      	lsls	r2, r3, #24
 8001b9c:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <dhcpclient_start+0x28c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	0619      	lsls	r1, r3, #24
 8001ba2:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <dhcpclient_start+0x290>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	4319      	orrs	r1, r3
 8001baa:	4b6f      	ldr	r3, [pc, #444]	; (8001d68 <dhcpclient_start+0x294>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	496e      	ldr	r1, [pc, #440]	; (8001d6c <dhcpclient_start+0x298>)
 8001bb4:	7809      	ldrb	r1, [r1, #0]
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	021b      	lsls	r3, r3, #8
 8001bba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <dhcpclient_start+0x28c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	0619      	lsls	r1, r3, #24
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <dhcpclient_start+0x290>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	041b      	lsls	r3, r3, #16
 8001bcc:	4319      	orrs	r1, r3
 8001bce:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <dhcpclient_start+0x294>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	4965      	ldr	r1, [pc, #404]	; (8001d6c <dhcpclient_start+0x298>)
 8001bd8:	7809      	ldrb	r1, [r1, #0]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001be2:	431a      	orrs	r2, r3
 8001be4:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <dhcpclient_start+0x28c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	0619      	lsls	r1, r3, #24
 8001bea:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <dhcpclient_start+0x290>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	4319      	orrs	r1, r3
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <dhcpclient_start+0x294>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	495c      	ldr	r1, [pc, #368]	; (8001d6c <dhcpclient_start+0x298>)
 8001bfc:	7809      	ldrb	r1, [r1, #0]
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	0e1b      	lsrs	r3, r3, #24
 8001c02:	4313      	orrs	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
            IP_ADDR4(&netmask, sta_netmask_addr0, sta_netmask_addr1, sta_netmask_addr2, sta_netmask_addr3);
 8001c06:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <dhcpclient_start+0x29c>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	061a      	lsls	r2, r3, #24
 8001c0c:	4b59      	ldr	r3, [pc, #356]	; (8001d74 <dhcpclient_start+0x2a0>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <dhcpclient_start+0x2a4>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <dhcpclient_start+0x2a8>)
 8001c1e:	7812      	ldrb	r2, [r2, #0]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	061a      	lsls	r2, r3, #24
 8001c24:	4b52      	ldr	r3, [pc, #328]	; (8001d70 <dhcpclient_start+0x29c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	0619      	lsls	r1, r3, #24
 8001c2a:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <dhcpclient_start+0x2a0>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	041b      	lsls	r3, r3, #16
 8001c30:	4319      	orrs	r1, r3
 8001c32:	4b51      	ldr	r3, [pc, #324]	; (8001d78 <dhcpclient_start+0x2a4>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	4950      	ldr	r1, [pc, #320]	; (8001d7c <dhcpclient_start+0x2a8>)
 8001c3c:	7809      	ldrb	r1, [r1, #0]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c46:	431a      	orrs	r2, r3
 8001c48:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <dhcpclient_start+0x29c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	0619      	lsls	r1, r3, #24
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <dhcpclient_start+0x2a0>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	041b      	lsls	r3, r3, #16
 8001c54:	4319      	orrs	r1, r3
 8001c56:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <dhcpclient_start+0x2a4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	4947      	ldr	r1, [pc, #284]	; (8001d7c <dhcpclient_start+0x2a8>)
 8001c60:	7809      	ldrb	r1, [r1, #0]
 8001c62:	430b      	orrs	r3, r1
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	4b40      	ldr	r3, [pc, #256]	; (8001d70 <dhcpclient_start+0x29c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	0619      	lsls	r1, r3, #24
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <dhcpclient_start+0x2a0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	4319      	orrs	r1, r3
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <dhcpclient_start+0x2a4>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	430b      	orrs	r3, r1
 8001c82:	493e      	ldr	r1, [pc, #248]	; (8001d7c <dhcpclient_start+0x2a8>)
 8001c84:	7809      	ldrb	r1, [r1, #0]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	0e1b      	lsrs	r3, r3, #24
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
            IP_ADDR4(&gw, sta_gw_addr0, sta_gw_addr1, sta_gw_addr2, sta_gw_addr3);
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <dhcpclient_start+0x2ac>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	061a      	lsls	r2, r3, #24
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <dhcpclient_start+0x2b0>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	041b      	lsls	r3, r3, #16
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <dhcpclient_start+0x2b4>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	4a39      	ldr	r2, [pc, #228]	; (8001d8c <dhcpclient_start+0x2b8>)
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	061a      	lsls	r2, r3, #24
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <dhcpclient_start+0x2ac>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	0619      	lsls	r1, r3, #24
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <dhcpclient_start+0x2b0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	4319      	orrs	r1, r3
 8001cba:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <dhcpclient_start+0x2b4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	430b      	orrs	r3, r1
 8001cc2:	4932      	ldr	r1, [pc, #200]	; (8001d8c <dhcpclient_start+0x2b8>)
 8001cc4:	7809      	ldrb	r1, [r1, #0]
 8001cc6:	430b      	orrs	r3, r1
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <dhcpclient_start+0x2ac>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	0619      	lsls	r1, r3, #24
 8001cd6:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <dhcpclient_start+0x2b0>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	041b      	lsls	r3, r3, #16
 8001cdc:	4319      	orrs	r1, r3
 8001cde:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <dhcpclient_start+0x2b4>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	4929      	ldr	r1, [pc, #164]	; (8001d8c <dhcpclient_start+0x2b8>)
 8001ce8:	7809      	ldrb	r1, [r1, #0]
 8001cea:	430b      	orrs	r3, r1
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	4b22      	ldr	r3, [pc, #136]	; (8001d80 <dhcpclient_start+0x2ac>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	0619      	lsls	r1, r3, #24
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <dhcpclient_start+0x2b0>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	4319      	orrs	r1, r3
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <dhcpclient_start+0x2b4>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	4920      	ldr	r1, [pc, #128]	; (8001d8c <dhcpclient_start+0x2b8>)
 8001d0c:	7809      	ldrb	r1, [r1, #0]
 8001d0e:	430b      	orrs	r3, r1
 8001d10:	0e1b      	lsrs	r3, r3, #24
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	f107 0210 	add.w	r2, r7, #16
 8001d1e:	f107 0114 	add.w	r1, r7, #20
 8001d22:	69f8      	ldr	r0, [r7, #28]
 8001d24:	f00c fe60 	bl	800e9e8 <netif_set_addr>
      break;
 8001d28:	e00a      	b.n	8001d40 <dhcpclient_start+0x26c>
      netifapi_dhcp_stop(netif);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	490b      	ldr	r1, [pc, #44]	; (8001d5c <dhcpclient_start+0x288>)
 8001d2e:	69f8      	ldr	r0, [r7, #28]
 8001d30:	f00b fc2a 	bl	800d588 <netifapi_netif_common>
      dhcp_state = DHCP_OFF; 
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <dhcpclient_start+0x278>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
    break;
 8001d3a:	e002      	b.n	8001d42 <dhcpclient_start+0x26e>
    default: break;
 8001d3c:	bf00      	nop
 8001d3e:	e000      	b.n	8001d42 <dhcpclient_start+0x26e>
      break;
 8001d40:	bf00      	nop
    }
    
    /* wait 1000 ms THIS IS AN INTERRUPT THAT COULD BE DELETED*/
    vTaskDelay(1000);
 8001d42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d46:	f009 fd51 	bl	800b7ec <vTaskDelay>
    switch (dhcp_state)
 8001d4a:	e6c9      	b.n	8001ae0 <dhcpclient_start+0xc>
 8001d4c:	200005d0 	.word	0x200005d0
 8001d50:	0801628d 	.word	0x0801628d
 8001d54:	2000082c 	.word	0x2000082c
 8001d58:	0801d244 	.word	0x0801d244
 8001d5c:	08016d4d 	.word	0x08016d4d
 8001d60:	20000090 	.word	0x20000090
 8001d64:	20000091 	.word	0x20000091
 8001d68:	200008ce 	.word	0x200008ce
 8001d6c:	20000092 	.word	0x20000092
 8001d70:	20000093 	.word	0x20000093
 8001d74:	20000094 	.word	0x20000094
 8001d78:	20000095 	.word	0x20000095
 8001d7c:	200008cf 	.word	0x200008cf
 8001d80:	200008d0 	.word	0x200008d0
 8001d84:	200008d1 	.word	0x200008d1
 8001d88:	200008d2 	.word	0x200008d2
 8001d8c:	200008d3 	.word	0x200008d3

08001d90 <dhcpserver_remove_mac>:
 * Remove mac address from list of clients.
 *
 * @param mac MAC address to remove.
 ******************************************************************************/
void dhcpserver_remove_mac(struct eth_addr *mac)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	e08a      	b.n	8001eb4 <dhcpserver_remove_mac+0x124>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8001d9e:	494b      	ldr	r1, [pc, #300]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	440b      	add	r3, r1
 8001dac:	781a      	ldrb	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d17b      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
 8001db6:	4945      	ldr	r1, [pc, #276]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	785b      	ldrb	r3, [r3, #1]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d16e      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8001dd0:	493e      	ldr	r1, [pc, #248]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	440b      	add	r3, r1
 8001dde:	3302      	adds	r3, #2
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	789b      	ldrb	r3, [r3, #2]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d161      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
 8001dea:	4938      	ldr	r1, [pc, #224]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	440b      	add	r3, r1
 8001df8:	3303      	adds	r3, #3
 8001dfa:	781a      	ldrb	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	78db      	ldrb	r3, [r3, #3]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d154      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 8001e04:	4931      	ldr	r1, [pc, #196]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	3304      	adds	r3, #4
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	791b      	ldrb	r3, [r3, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d147      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
 8001e1e:	492b      	ldr	r1, [pc, #172]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3305      	adds	r3, #5
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	795b      	ldrb	r3, [r3, #5]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d13a      	bne.n	8001eae <dhcpserver_remove_mac+0x11e>
      saved_mac[i].addr[0] = 0;
 8001e38:	4924      	ldr	r1, [pc, #144]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	440b      	add	r3, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = 0;
 8001e4a:	4920      	ldr	r1, [pc, #128]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	440b      	add	r3, r1
 8001e58:	3301      	adds	r3, #1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = 0;
 8001e5e:	491b      	ldr	r1, [pc, #108]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = 0;
 8001e72:	4916      	ldr	r1, [pc, #88]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	440b      	add	r3, r1
 8001e80:	3303      	adds	r3, #3
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = 0;
 8001e86:	4911      	ldr	r1, [pc, #68]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	440b      	add	r3, r1
 8001e94:	3304      	adds	r3, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = 0;
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <dhcpserver_remove_mac+0x13c>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3305      	adds	r3, #5
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	f67f af71 	bls.w	8001d9e <dhcpserver_remove_mac+0xe>
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	200005d8 	.word	0x200005d8

08001ed0 <dhcpserver_save_mac>:

/***************************************************************************//**
 * Save mac address in list of clients.
 ******************************************************************************/
static void dhcpserver_save_mac(struct eth_addr *mac)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  // Remove previous listing of MAC.
  dhcpserver_remove_mac(mac);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff59 	bl	8001d90 <dhcpserver_remove_mac>

  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]
 8001ee2:	e08b      	b.n	8001ffc <dhcpserver_save_mac+0x12c>
    if (saved_mac[i].addr[0] == 0 && saved_mac[i].addr[1] == 0
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	494a      	ldr	r1, [pc, #296]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	440b      	add	r3, r1
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d17e      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
 8001ef8:	7bfa      	ldrb	r2, [r7, #15]
 8001efa:	4945      	ldr	r1, [pc, #276]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	3301      	adds	r3, #1
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d173      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[2] == 0 && saved_mac[i].addr[3] == 0
 8001f0e:	7bfa      	ldrb	r2, [r7, #15]
 8001f10:	493f      	ldr	r1, [pc, #252]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	440b      	add	r3, r1
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d168      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	493a      	ldr	r1, [pc, #232]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	440b      	add	r3, r1
 8001f32:	3303      	adds	r3, #3
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d15d      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
        && saved_mac[i].addr[4] == 0 && saved_mac[i].addr[5] == 0) {
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	4934      	ldr	r1, [pc, #208]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	440b      	add	r3, r1
 8001f48:	3304      	adds	r3, #4
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d152      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	492f      	ldr	r1, [pc, #188]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f54:	4613      	mov	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3305      	adds	r3, #5
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d147      	bne.n	8001ff6 <dhcpserver_save_mac+0x126>
      saved_mac[i].addr[0] = mac->addr[0];
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7818      	ldrb	r0, [r3, #0]
 8001f6c:	4928      	ldr	r1, [pc, #160]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	440b      	add	r3, r1
 8001f78:	4602      	mov	r2, r0
 8001f7a:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[1] = mac->addr[1];
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	7858      	ldrb	r0, [r3, #1]
 8001f82:	4923      	ldr	r1, [pc, #140]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3301      	adds	r3, #1
 8001f90:	4602      	mov	r2, r0
 8001f92:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[2] = mac->addr[2];
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7898      	ldrb	r0, [r3, #2]
 8001f9a:	491d      	ldr	r1, [pc, #116]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	4602      	mov	r2, r0
 8001faa:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[3] = mac->addr[3];
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	78d8      	ldrb	r0, [r3, #3]
 8001fb2:	4917      	ldr	r1, [pc, #92]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3303      	adds	r3, #3
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[4] = mac->addr[4];
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7918      	ldrb	r0, [r3, #4]
 8001fca:	4911      	ldr	r1, [pc, #68]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	4602      	mov	r2, r0
 8001fda:	701a      	strb	r2, [r3, #0]
      saved_mac[i].addr[5] = mac->addr[5];
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7958      	ldrb	r0, [r3, #5]
 8001fe2:	490b      	ldr	r1, [pc, #44]	; (8002010 <dhcpserver_save_mac+0x140>)
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	440b      	add	r3, r1
 8001fee:	3305      	adds	r3, #5
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	701a      	strb	r2, [r3, #0]
      break;
 8001ff4:	e007      	b.n	8002006 <dhcpserver_save_mac+0x136>
  for (uint8_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b07      	cmp	r3, #7
 8002000:	f67f af70 	bls.w	8001ee4 <dhcpserver_save_mac+0x14>
    }
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200005d8 	.word	0x200005d8

08002014 <dhcpserver_get_ip>:
 *
 * @param mac MAC address of client.
 * @returns IP address
 ******************************************************************************/
ip_addr_t dhcpserver_get_ip(struct eth_addr *mac)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  ip_addr_t offer_ip = { 0 };
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e060      	b.n	80020e8 <dhcpserver_get_ip+0xd4>
    if (saved_mac[i].addr[0] == mac->addr[0] && saved_mac[i].addr[1] == mac->addr[1]
 8002026:	4935      	ldr	r1, [pc, #212]	; (80020fc <dhcpserver_get_ip+0xe8>)
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	781a      	ldrb	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d151      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
 800203e:	492f      	ldr	r1, [pc, #188]	; (80020fc <dhcpserver_get_ip+0xe8>)
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	440b      	add	r3, r1
 800204c:	3301      	adds	r3, #1
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	785b      	ldrb	r3, [r3, #1]
 8002054:	429a      	cmp	r2, r3
 8002056:	d144      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[2] == mac->addr[2] && saved_mac[i].addr[3] == mac->addr[3]
 8002058:	4928      	ldr	r1, [pc, #160]	; (80020fc <dhcpserver_get_ip+0xe8>)
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	440b      	add	r3, r1
 8002066:	3302      	adds	r3, #2
 8002068:	781a      	ldrb	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	789b      	ldrb	r3, [r3, #2]
 800206e:	429a      	cmp	r2, r3
 8002070:	d137      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
 8002072:	4922      	ldr	r1, [pc, #136]	; (80020fc <dhcpserver_get_ip+0xe8>)
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	440b      	add	r3, r1
 8002080:	3303      	adds	r3, #3
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	78db      	ldrb	r3, [r3, #3]
 8002088:	429a      	cmp	r2, r3
 800208a:	d12a      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
        && saved_mac[i].addr[4] == mac->addr[4] && saved_mac[i].addr[5] == mac->addr[5]) {
 800208c:	491b      	ldr	r1, [pc, #108]	; (80020fc <dhcpserver_get_ip+0xe8>)
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	440b      	add	r3, r1
 800209a:	3304      	adds	r3, #4
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d11d      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
 80020a6:	4915      	ldr	r1, [pc, #84]	; (80020fc <dhcpserver_get_ip+0xe8>)
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	440b      	add	r3, r1
 80020b4:	3305      	adds	r3, #5
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	795b      	ldrb	r3, [r3, #5]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d110      	bne.n	80020e2 <dhcpserver_get_ip+0xce>
      /* index is used to increment IP address. */
      offer_ip.addr = ((10 + i) << 24) + ap_ip_addr0 + (ap_ip_addr1 << 8) + (ap_ip_addr2 << 16);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	330a      	adds	r3, #10
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	4a0e      	ldr	r2, [pc, #56]	; (8002100 <dhcpserver_get_ip+0xec>)
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <dhcpserver_get_ip+0xf0>)
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	0212      	lsls	r2, r2, #8
 80020d2:	4413      	add	r3, r2
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <dhcpserver_get_ip+0xf4>)
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	0412      	lsls	r2, r2, #16
 80020da:	4413      	add	r3, r2
 80020dc:	60bb      	str	r3, [r7, #8]
      return offer_ip;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	e006      	b.n	80020f0 <dhcpserver_get_ip+0xdc>
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d99b      	bls.n	8002026 <dhcpserver_get_ip+0x12>
    }
  }

  return offer_ip;
 80020ee:	68bb      	ldr	r3, [r7, #8]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200005d8 	.word	0x200005d8
 8002100:	20000096 	.word	0x20000096
 8002104:	20000097 	.word	0x20000097
 8002108:	20000098 	.word	0x20000098

0800210c <dhcpserver_clear_stored_mac>:

/***************************************************************************//**
 * Clear stored mac addresses in client list.
 ******************************************************************************/
void dhcpserver_clear_stored_mac(void)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e03d      	b.n	8002194 <dhcpserver_clear_stored_mac+0x88>
    saved_mac[i].addr[0] = 0;
 8002118:	4923      	ldr	r1, [pc, #140]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	440b      	add	r3, r1
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 800212a:	491f      	ldr	r1, [pc, #124]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	3301      	adds	r3, #1
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 800213e:	491a      	ldr	r1, [pc, #104]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	440b      	add	r3, r1
 800214c:	3302      	adds	r3, #2
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002152:	4915      	ldr	r1, [pc, #84]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	3303      	adds	r3, #3
 8002162:	2200      	movs	r2, #0
 8002164:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002166:	4910      	ldr	r1, [pc, #64]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	440b      	add	r3, r1
 8002174:	3304      	adds	r3, #4
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 800217a:	490b      	ldr	r1, [pc, #44]	; (80021a8 <dhcpserver_clear_stored_mac+0x9c>)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	3305      	adds	r3, #5
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b07      	cmp	r3, #7
 8002198:	d9be      	bls.n	8002118 <dhcpserver_clear_stored_mac+0xc>
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	200005d8 	.word	0x200005d8

080021ac <dhcpserver_find_requested_ip>:
 * @param pbuf_in The pbuf containing the a DHCP packet.
 * @param ipaddr IP address result.
 * @returns 1 if found, 0 if not found.
 ******************************************************************************/
static uint16_t dhcpserver_find_requested_ip(struct pbuf * pbuf_in, uint8_t * ipaddr)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t index = UDP_DHCP_OPTIONS_OFS;
 80021b6:	23f0      	movs	r3, #240	; 0xf0
 80021b8:	617b      	str	r3, [r7, #20]
  uint8_t optionID = DHCP_OPTION_REQUESTED_IP;
 80021ba:	2332      	movs	r3, #50	; 0x32
 80021bc:	743b      	strb	r3, [r7, #16]
  uint16_t found = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	827b      	strh	r3, [r7, #18]
  uint8_t val = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	747b      	strb	r3, [r7, #17]
  uint8_t size;

  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 80021c6:	e036      	b.n	8002236 <dhcpserver_find_requested_ip+0x8a>
    val = pbuf_get_at(pbuf_in, index);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f00d fbf0 	bl	800f9b4 <pbuf_get_at>
 80021d4:	4603      	mov	r3, r0
 80021d6:	747b      	strb	r3, [r7, #17]
    if (val == optionID) {
 80021d8:	7c7a      	ldrb	r2, [r7, #17]
 80021da:	7c3b      	ldrb	r3, [r7, #16]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d11b      	bne.n	8002218 <dhcpserver_find_requested_ip+0x6c>
      index++;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	3301      	adds	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
      size = pbuf_get_at(pbuf_in, index);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f00d fbe1 	bl	800f9b4 <pbuf_get_at>
 80021f2:	4603      	mov	r3, r0
 80021f4:	73fb      	strb	r3, [r7, #15]
      index++;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3301      	adds	r3, #1
 80021fa:	617b      	str	r3, [r7, #20]
      pbuf_copy_partial(pbuf_in, ipaddr, size, index);
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	b29b      	uxth	r3, r3
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f00d faf4 	bl	800f7f4 <pbuf_copy_partial>
      index += size;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4413      	add	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
      found = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	827b      	strh	r3, [r7, #18]
    }
    index++;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
    index += ((pbuf_get_at(pbuf_in, index)) + 1);
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	b29b      	uxth	r3, r3
 8002222:	4619      	mov	r1, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f00d fbc5 	bl	800f9b4 <pbuf_get_at>
 800222a:	4603      	mov	r3, r0
 800222c:	3301      	adds	r3, #1
 800222e:	461a      	mov	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	4413      	add	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
  while ((val != 0xff) && (index < pbuf_in->tot_len)) {
 8002236:	7c7b      	ldrb	r3, [r7, #17]
 8002238:	2bff      	cmp	r3, #255	; 0xff
 800223a:	d005      	beq.n	8002248 <dhcpserver_find_requested_ip+0x9c>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	891b      	ldrh	r3, [r3, #8]
 8002240:	461a      	mov	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4293      	cmp	r3, r2
 8002246:	d3bf      	bcc.n	80021c8 <dhcpserver_find_requested_ip+0x1c>
  }

  return found;
 8002248:	8a7b      	ldrh	r3, [r7, #18]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <dhcpserver_fn>:
/***************************************************************************//**
 * DHCP server main function.
 ******************************************************************************/
static void dhcpserver_fn(void *arg, struct udp_pcb *dhcp_pcb_recv,
		struct pbuf *pbuf_in, const ip_addr_t *client_addr, uint16_t port)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
  struct pbuf * pbuf_out = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t i;
  uint8_t flags = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  struct eth_addr ethaddr;

  uint32_t options_offset = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t client_requested_addr = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
  uint8_t val = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  ip_addr_t client_ip_addr;
  ip_addr_t r;

  if ((NULL == pbuf_in) || ((pbuf_in->tot_len) <= UDP_DHCP_OPTIONS_OFS)) {
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 85b8 	beq.w	8002df2 <dhcpserver_fn+0xb9e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	891b      	ldrh	r3, [r3, #8]
 8002286:	2bf0      	cmp	r3, #240	; 0xf0
 8002288:	f240 85b3 	bls.w	8002df2 <dhcpserver_fn+0xb9e>
    goto end_of_fcn;
  }

  pbuf_out = pbuf_alloc(PBUF_TRANSPORT, DHCP_RESPONSE_DEFAULT_SIZE, PBUF_POOL);
 800228c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8002290:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002294:	2036      	movs	r0, #54	; 0x36
 8002296:	f00c fdbf 	bl	800ee18 <pbuf_alloc>
 800229a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ((NULL == pbuf_out) || ((pbuf_out->tot_len) < UDP_DHCP_OPTIONS_OFS)) {
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 85a9 	beq.w	8002df6 <dhcpserver_fn+0xba2>
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	891b      	ldrh	r3, [r3, #8]
 80022a8:	2bef      	cmp	r3, #239	; 0xef
 80022aa:	f240 85a4 	bls.w	8002df6 <dhcpserver_fn+0xba2>
    goto end_of_fcn;
  }
  pbuf_copy(pbuf_out, pbuf_in);
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80022b2:	f00d f9cd 	bl	800f650 <pbuf_copy>

#if DHCPS_DBG
  printf("mac ");
#endif
  // Read MAC address.
  for (i = 0; i < 6; ++i) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ba:	e014      	b.n	80022e6 <dhcpserver_fn+0x92>
    val = pbuf_get_at(pbuf_in, DHCP_CHADDR_OFS + i);
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	b29b      	uxth	r3, r3
 80022c0:	331c      	adds	r3, #28
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f00d fb74 	bl	800f9b4 <pbuf_get_at>
 80022cc:	4603      	mov	r3, r0
 80022ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    ethaddr.addr[i] = val;
 80022d2:	f107 021c 	add.w	r2, r7, #28
 80022d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d8:	4413      	add	r3, r2
 80022da:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80022de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 6; ++i) {
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	3301      	adds	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d9e7      	bls.n	80022bc <dhcpserver_fn+0x68>
  }
#if DHCPS_DBG
  printf("\r\n");
#endif
  // Register MAC address and get an IP address.
  dhcpserver_save_mac(&ethaddr);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fded 	bl	8001ed0 <dhcpserver_save_mac>
  client_ip_addr = dhcpserver_get_ip(&ethaddr);
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fe8a 	bl	8002014 <dhcpserver_get_ip>
 8002300:	4603      	mov	r3, r0
 8002302:	617b      	str	r3, [r7, #20]
  if (0 == client_ip_addr.addr) {
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8577 	beq.w	8002dfa <dhcpserver_fn+0xba6>
    goto end_of_fcn;
  }
#if DHCPS_DBG
  printf("ip %d.%d.%d.%d\r\n", client_ip_addr.addr & 0xff, (client_ip_addr.addr >> 8) & 0xff, (client_ip_addr.addr >> 16) & 0xff, (client_ip_addr.addr >> 24) & 0xff);
#endif
  etharp_add_static_entry(&client_ip_addr, &ethaddr);   //add ARP table entry
 800230c:	f107 021c 	add.w	r2, r7, #28
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f015 fe32 	bl	8017f80 <etharp_add_static_entry>
  /* request type. */
  val = pbuf_get_at(pbuf_in, UDP_DHCP_OPTIONS_OFS + 2);
 800231c:	21f2      	movs	r1, #242	; 0xf2
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f00d fb48 	bl	800f9b4 <pbuf_get_at>
 8002324:	4603      	mov	r3, r0
 8002326:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  switch (val) {
 800232a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800232e:	2b01      	cmp	r3, #1
 8002330:	d004      	beq.n	800233c <dhcpserver_fn+0xe8>
 8002332:	2b03      	cmp	r3, #3
 8002334:	f000 826a 	beq.w	800280c <dhcpserver_fn+0x5b8>
      }

      break;
    // do nothing if not defined above
    default:
      break;
 8002338:	f000 bd62 	b.w	8002e00 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800233c:	2202      	movs	r2, #2
 800233e:	2100      	movs	r1, #0
 8002340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002342:	f00d fb70 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2108      	movs	r1, #8
 800234a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800234c:	f00d fb6b 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, 0x0);       //unicast
 8002350:	2200      	movs	r2, #0
 8002352:	210a      	movs	r1, #10
 8002354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002356:	f00d fb66 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	2110      	movs	r1, #16
 8002362:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002364:	f00d fb5f 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	2111      	movs	r1, #17
 8002372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002374:	f00d fb57 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	0c1b      	lsrs	r3, r3, #16
 800237c:	b2db      	uxtb	r3, r3
 800237e:	461a      	mov	r2, r3
 8002380:	2112      	movs	r1, #18
 8002382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002384:	f00d fb4f 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	0e1b      	lsrs	r3, r3, #24
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	2113      	movs	r1, #19
 8002392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002394:	f00d fb47 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2114      	movs	r1, #20
 800239c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800239e:	f00d fb42 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2115      	movs	r1, #21
 80023a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023a8:	f00d fb3d 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2116      	movs	r1, #22
 80023b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023b2:	f00d fb38 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2117      	movs	r1, #23
 80023ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023bc:	f00d fb33 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 80023c0:	2263      	movs	r2, #99	; 0x63
 80023c2:	21ec      	movs	r1, #236	; 0xec
 80023c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023c6:	f00d fb2e 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 80023ca:	2282      	movs	r2, #130	; 0x82
 80023cc:	21ed      	movs	r1, #237	; 0xed
 80023ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023d0:	f00d fb29 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 80023d4:	2253      	movs	r2, #83	; 0x53
 80023d6:	21ee      	movs	r1, #238	; 0xee
 80023d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023da:	f00d fb24 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 80023de:	2263      	movs	r2, #99	; 0x63
 80023e0:	21ef      	movs	r1, #239	; 0xef
 80023e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023e4:	f00d fb1f 	bl	800fa26 <pbuf_put_at>
      options_offset = UDP_DHCP_OPTIONS_OFS;
 80023e8:	23f0      	movs	r3, #240	; 0xf0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2235      	movs	r2, #53	; 0x35
 80023f2:	4619      	mov	r1, r3
 80023f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80023f6:	f00d fb16 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3301      	adds	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 1);
 8002400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002402:	b29b      	uxth	r3, r3
 8002404:	2201      	movs	r2, #1
 8002406:	4619      	mov	r1, r3
 8002408:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800240a:	f00d fb0c 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OFFER);
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	b29b      	uxth	r3, r3
 8002418:	2202      	movs	r2, #2
 800241a:	4619      	mov	r1, r3
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f00d fb02 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3301      	adds	r3, #1
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	b29b      	uxth	r3, r3
 800242c:	2201      	movs	r2, #1
 800242e:	4619      	mov	r1, r3
 8002430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002432:	f00d faf8 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	3301      	adds	r3, #1
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	b29b      	uxth	r3, r3
 8002440:	2204      	movs	r2, #4
 8002442:	4619      	mov	r1, r3
 8002444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002446:	f00d faee 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	3301      	adds	r3, #1
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 8002450:	4ba8      	ldr	r3, [pc, #672]	; (80026f4 <dhcpserver_fn+0x4a0>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	061a      	lsls	r2, r3, #24
 8002456:	4ba8      	ldr	r3, [pc, #672]	; (80026f8 <dhcpserver_fn+0x4a4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	041b      	lsls	r3, r3, #16
 800245c:	431a      	orrs	r2, r3
 800245e:	4ba7      	ldr	r3, [pc, #668]	; (80026fc <dhcpserver_fn+0x4a8>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	4313      	orrs	r3, r2
 8002466:	4aa6      	ldr	r2, [pc, #664]	; (8002700 <dhcpserver_fn+0x4ac>)
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	061a      	lsls	r2, r3, #24
 800246e:	4ba1      	ldr	r3, [pc, #644]	; (80026f4 <dhcpserver_fn+0x4a0>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0619      	lsls	r1, r3, #24
 8002474:	4ba0      	ldr	r3, [pc, #640]	; (80026f8 <dhcpserver_fn+0x4a4>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	4319      	orrs	r1, r3
 800247c:	4b9f      	ldr	r3, [pc, #636]	; (80026fc <dhcpserver_fn+0x4a8>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	430b      	orrs	r3, r1
 8002484:	499e      	ldr	r1, [pc, #632]	; (8002700 <dhcpserver_fn+0x4ac>)
 8002486:	7809      	ldrb	r1, [r1, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002490:	431a      	orrs	r2, r3
 8002492:	4b98      	ldr	r3, [pc, #608]	; (80026f4 <dhcpserver_fn+0x4a0>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	0619      	lsls	r1, r3, #24
 8002498:	4b97      	ldr	r3, [pc, #604]	; (80026f8 <dhcpserver_fn+0x4a4>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	4319      	orrs	r1, r3
 80024a0:	4b96      	ldr	r3, [pc, #600]	; (80026fc <dhcpserver_fn+0x4a8>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	430b      	orrs	r3, r1
 80024a8:	4995      	ldr	r1, [pc, #596]	; (8002700 <dhcpserver_fn+0x4ac>)
 80024aa:	7809      	ldrb	r1, [r1, #0]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80024b4:	431a      	orrs	r2, r3
 80024b6:	4b8f      	ldr	r3, [pc, #572]	; (80026f4 <dhcpserver_fn+0x4a0>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	0619      	lsls	r1, r3, #24
 80024bc:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <dhcpserver_fn+0x4a4>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4319      	orrs	r1, r3
 80024c4:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <dhcpserver_fn+0x4a8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	430b      	orrs	r3, r1
 80024cc:	498c      	ldr	r1, [pc, #560]	; (8002700 <dhcpserver_fn+0x4ac>)
 80024ce:	7809      	ldrb	r1, [r1, #0]
 80024d0:	430b      	orrs	r3, r1
 80024d2:	0e1b      	lsrs	r3, r3, #24
 80024d4:	4313      	orrs	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	b29b      	uxth	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	b2d2      	uxtb	r2, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024e4:	f00d fa9f 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	b299      	uxth	r1, r3
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024fa:	f00d fa94 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	b29b      	uxth	r3, r3
 8002502:	3302      	adds	r3, #2
 8002504:	b299      	uxth	r1, r3
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
 800250e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002510:	f00d fa89 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	b29b      	uxth	r3, r3
 8002518:	3303      	adds	r3, #3
 800251a:	b299      	uxth	r1, r3
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	0e1b      	lsrs	r3, r3, #24
 8002520:	b2db      	uxtb	r3, r3
 8002522:	461a      	mov	r2, r3
 8002524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002526:	f00d fa7e 	bl	800fa26 <pbuf_put_at>
      options_offset += 4;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	3304      	adds	r3, #4
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	b29b      	uxth	r3, r3
 8002534:	2203      	movs	r2, #3
 8002536:	4619      	mov	r1, r3
 8002538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800253a:	f00d fa74 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	3301      	adds	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	b29b      	uxth	r3, r3
 8002548:	2204      	movs	r2, #4
 800254a:	4619      	mov	r1, r3
 800254c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800254e:	f00d fa6a 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002558:	4b6a      	ldr	r3, [pc, #424]	; (8002704 <dhcpserver_fn+0x4b0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	061a      	lsls	r2, r3, #24
 800255e:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <dhcpserver_fn+0x4b4>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	431a      	orrs	r2, r3
 8002566:	4b69      	ldr	r3, [pc, #420]	; (800270c <dhcpserver_fn+0x4b8>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	4313      	orrs	r3, r2
 800256e:	4a68      	ldr	r2, [pc, #416]	; (8002710 <dhcpserver_fn+0x4bc>)
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	061a      	lsls	r2, r3, #24
 8002576:	4b63      	ldr	r3, [pc, #396]	; (8002704 <dhcpserver_fn+0x4b0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	0619      	lsls	r1, r3, #24
 800257c:	4b62      	ldr	r3, [pc, #392]	; (8002708 <dhcpserver_fn+0x4b4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	041b      	lsls	r3, r3, #16
 8002582:	4319      	orrs	r1, r3
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <dhcpserver_fn+0x4b8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	430b      	orrs	r3, r1
 800258c:	4960      	ldr	r1, [pc, #384]	; (8002710 <dhcpserver_fn+0x4bc>)
 800258e:	7809      	ldrb	r1, [r1, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002598:	431a      	orrs	r2, r3
 800259a:	4b5a      	ldr	r3, [pc, #360]	; (8002704 <dhcpserver_fn+0x4b0>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	0619      	lsls	r1, r3, #24
 80025a0:	4b59      	ldr	r3, [pc, #356]	; (8002708 <dhcpserver_fn+0x4b4>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	041b      	lsls	r3, r3, #16
 80025a6:	4319      	orrs	r1, r3
 80025a8:	4b58      	ldr	r3, [pc, #352]	; (800270c <dhcpserver_fn+0x4b8>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	430b      	orrs	r3, r1
 80025b0:	4957      	ldr	r1, [pc, #348]	; (8002710 <dhcpserver_fn+0x4bc>)
 80025b2:	7809      	ldrb	r1, [r1, #0]
 80025b4:	430b      	orrs	r3, r1
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80025bc:	431a      	orrs	r2, r3
 80025be:	4b51      	ldr	r3, [pc, #324]	; (8002704 <dhcpserver_fn+0x4b0>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	0619      	lsls	r1, r3, #24
 80025c4:	4b50      	ldr	r3, [pc, #320]	; (8002708 <dhcpserver_fn+0x4b4>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	4319      	orrs	r1, r3
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <dhcpserver_fn+0x4b8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	430b      	orrs	r3, r1
 80025d4:	494e      	ldr	r1, [pc, #312]	; (8002710 <dhcpserver_fn+0x4bc>)
 80025d6:	7809      	ldrb	r1, [r1, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	0e1b      	lsrs	r3, r3, #24
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80025ec:	f00d fa1b 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	b299      	uxth	r1, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002602:	f00d fa10 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	b29b      	uxth	r3, r3
 800260a:	3302      	adds	r3, #2
 800260c:	b299      	uxth	r1, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	0c1b      	lsrs	r3, r3, #16
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002618:	f00d fa05 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	b29b      	uxth	r3, r3
 8002620:	3303      	adds	r3, #3
 8002622:	b299      	uxth	r1, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	0e1b      	lsrs	r3, r3, #24
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800262e:	f00d f9fa 	bl	800fa26 <pbuf_put_at>
      options_offset += 4;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	3304      	adds	r3, #4
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	b29b      	uxth	r3, r3
 800263c:	2233      	movs	r2, #51	; 0x33
 800263e:	4619      	mov	r1, r3
 8002640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002642:	f00d f9f0 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	b29b      	uxth	r3, r3
 8002650:	2204      	movs	r2, #4
 8002652:	4619      	mov	r1, r3
 8002654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002656:	f00d f9e6 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	3301      	adds	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	b29b      	uxth	r3, r3
 8002664:	2200      	movs	r2, #0
 8002666:	4619      	mov	r1, r3
 8002668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800266a:	f00d f9dc 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	b29b      	uxth	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	b29b      	uxth	r3, r3
 8002676:	2201      	movs	r2, #1
 8002678:	4619      	mov	r1, r3
 800267a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800267c:	f00d f9d3 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	b29b      	uxth	r3, r3
 8002684:	3302      	adds	r3, #2
 8002686:	b29b      	uxth	r3, r3
 8002688:	2251      	movs	r2, #81	; 0x51
 800268a:	4619      	mov	r1, r3
 800268c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800268e:	f00d f9ca 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	b29b      	uxth	r3, r3
 8002696:	3303      	adds	r3, #3
 8002698:	b29b      	uxth	r3, r3
 800269a:	2280      	movs	r2, #128	; 0x80
 800269c:	4619      	mov	r1, r3
 800269e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026a0:	f00d f9c1 	bl	800fa26 <pbuf_put_at>
      options_offset += 4;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	3304      	adds	r3, #4
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2236      	movs	r2, #54	; 0x36
 80026b0:	4619      	mov	r1, r3
 80026b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026b4:	f00d f9b7 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	3301      	adds	r3, #1
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, 4);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2204      	movs	r2, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80026c8:	f00d f9ad 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	3301      	adds	r3, #1
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
      IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <dhcpserver_fn+0x4b0>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	061a      	lsls	r2, r3, #24
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <dhcpserver_fn+0x4b4>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <dhcpserver_fn+0x4b8>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4313      	orrs	r3, r2
 80026e8:	4a09      	ldr	r2, [pc, #36]	; (8002710 <dhcpserver_fn+0x4bc>)
 80026ea:	7812      	ldrb	r2, [r2, #0]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	061a      	lsls	r2, r3, #24
 80026f0:	e010      	b.n	8002714 <dhcpserver_fn+0x4c0>
 80026f2:	bf00      	nop
 80026f4:	2000009a 	.word	0x2000009a
 80026f8:	2000009b 	.word	0x2000009b
 80026fc:	2000009c 	.word	0x2000009c
 8002700:	200008d4 	.word	0x200008d4
 8002704:	20000096 	.word	0x20000096
 8002708:	20000097 	.word	0x20000097
 800270c:	20000098 	.word	0x20000098
 8002710:	20000099 	.word	0x20000099
 8002714:	4b54      	ldr	r3, [pc, #336]	; (8002868 <dhcpserver_fn+0x614>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	0619      	lsls	r1, r3, #24
 800271a:	4b54      	ldr	r3, [pc, #336]	; (800286c <dhcpserver_fn+0x618>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	041b      	lsls	r3, r3, #16
 8002720:	4319      	orrs	r1, r3
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <dhcpserver_fn+0x61c>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	430b      	orrs	r3, r1
 800272a:	4952      	ldr	r1, [pc, #328]	; (8002874 <dhcpserver_fn+0x620>)
 800272c:	7809      	ldrb	r1, [r1, #0]
 800272e:	430b      	orrs	r3, r1
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002736:	431a      	orrs	r2, r3
 8002738:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <dhcpserver_fn+0x614>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	0619      	lsls	r1, r3, #24
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <dhcpserver_fn+0x618>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	041b      	lsls	r3, r3, #16
 8002744:	4319      	orrs	r1, r3
 8002746:	4b4a      	ldr	r3, [pc, #296]	; (8002870 <dhcpserver_fn+0x61c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	430b      	orrs	r3, r1
 800274e:	4949      	ldr	r1, [pc, #292]	; (8002874 <dhcpserver_fn+0x620>)
 8002750:	7809      	ldrb	r1, [r1, #0]
 8002752:	430b      	orrs	r3, r1
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800275a:	431a      	orrs	r2, r3
 800275c:	4b42      	ldr	r3, [pc, #264]	; (8002868 <dhcpserver_fn+0x614>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	0619      	lsls	r1, r3, #24
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <dhcpserver_fn+0x618>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	4319      	orrs	r1, r3
 800276a:	4b41      	ldr	r3, [pc, #260]	; (8002870 <dhcpserver_fn+0x61c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	430b      	orrs	r3, r1
 8002772:	4940      	ldr	r1, [pc, #256]	; (8002874 <dhcpserver_fn+0x620>)
 8002774:	7809      	ldrb	r1, [r1, #0]
 8002776:	430b      	orrs	r3, r1
 8002778:	0e1b      	lsrs	r3, r3, #24
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
      pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	b29b      	uxth	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	4619      	mov	r1, r3
 8002788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800278a:	f00d f94c 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	b29b      	uxth	r3, r3
 8002792:	3301      	adds	r3, #1
 8002794:	b299      	uxth	r1, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027a0:	f00d f941 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3302      	adds	r3, #2
 80027aa:	b299      	uxth	r1, r3
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	461a      	mov	r2, r3
 80027b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027b6:	f00d f936 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3303      	adds	r3, #3
 80027c0:	b299      	uxth	r1, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	0e1b      	lsrs	r3, r3, #24
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027cc:	f00d f92b 	bl	800fa26 <pbuf_put_at>
      options_offset += 4;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	3304      	adds	r3, #4
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	b29b      	uxth	r3, r3
 80027da:	22ff      	movs	r2, #255	; 0xff
 80027dc:	4619      	mov	r1, r3
 80027de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027e0:	f00d f921 	bl	800fa26 <pbuf_put_at>
      options_offset++;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3301      	adds	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	4619      	mov	r1, r3
 80027f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80027f2:	f00c fc73 	bl	800f0dc <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <dhcpserver_fn+0x624>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f107 0214 	add.w	r2, r7, #20
 80027fe:	2344      	movs	r3, #68	; 0x44
 8002800:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002802:	f012 fe2f 	bl	8015464 <udp_sendto>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
      break;
 800280a:	e2f9      	b.n	8002e00 <dhcpserver_fn+0xbac>
      pbuf_put_at(pbuf_out, DHCP_OP_OFS, DHCP_BOOTREPLY);
 800280c:	2202      	movs	r2, #2
 800280e:	2100      	movs	r1, #0
 8002810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002812:	f00d f908 	bl	800fa26 <pbuf_put_at>
      pbuf_put_at(pbuf_out, DHCP_SECS_OFS, 0);
 8002816:	2200      	movs	r2, #0
 8002818:	2108      	movs	r1, #8
 800281a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800281c:	f00d f903 	bl	800fa26 <pbuf_put_at>
      flags = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      flags = pbuf_get_at(pbuf_in, DHCP_FLAGS_OFS);
 8002826:	210a      	movs	r1, #10
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f00d f8c3 	bl	800f9b4 <pbuf_get_at>
 800282e:	4603      	mov	r3, r0
 8002830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      if (flags & 0x80) {
 8002834:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002838:	2b00      	cmp	r3, #0
 800283a:	da1f      	bge.n	800287c <dhcpserver_fn+0x628>
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 800283c:	210a      	movs	r1, #10
 800283e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002840:	f00d f8b8 	bl	800f9b4 <pbuf_get_at>
 8002844:	4603      	mov	r3, r0
 8002846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags |= 0x80;
 800284a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800284e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8002856:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285a:	461a      	mov	r2, r3
 800285c:	210a      	movs	r1, #10
 800285e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002860:	f00d f8e1 	bl	800fa26 <pbuf_put_at>
 8002864:	e01e      	b.n	80028a4 <dhcpserver_fn+0x650>
 8002866:	bf00      	nop
 8002868:	20000096 	.word	0x20000096
 800286c:	20000097 	.word	0x20000097
 8002870:	20000098 	.word	0x20000098
 8002874:	20000099 	.word	0x20000099
 8002878:	200005d4 	.word	0x200005d4
        flags = pbuf_get_at(pbuf_out, DHCP_FLAGS_OFS);
 800287c:	210a      	movs	r1, #10
 800287e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002880:	f00d f898 	bl	800f9b4 <pbuf_get_at>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        flags &= ~0x80;
 800288a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800288e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        pbuf_put_at(pbuf_out, DHCP_FLAGS_OFS, flags);
 8002896:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800289a:	461a      	mov	r2, r3
 800289c:	210a      	movs	r1, #10
 800289e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028a0:	f00d f8c1 	bl	800fa26 <pbuf_put_at>
      if (0 == dhcpserver_find_requested_ip(pbuf_in, (uint8_t *)&client_requested_addr)) {
 80028a4:	f107 0318 	add.w	r3, r7, #24
 80028a8:	4619      	mov	r1, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fc7e 	bl	80021ac <dhcpserver_find_requested_ip>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 82a3 	beq.w	8002dfe <dhcpserver_fn+0xbaa>
      if (client_requested_addr == client_ip_addr.addr) {
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	429a      	cmp	r2, r3
 80028be:	f040 8249 	bne.w	8002d54 <dhcpserver_fn+0xb00>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS, client_ip_addr.addr & 0xff);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	461a      	mov	r2, r3
 80028c8:	2110      	movs	r1, #16
 80028ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028cc:	f00d f8ab 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 1, (client_ip_addr.addr >> 8) & 0xff);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	461a      	mov	r2, r3
 80028d8:	2111      	movs	r1, #17
 80028da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028dc:	f00d f8a3 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 2, (client_ip_addr.addr >> 16) & 0xff);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	0c1b      	lsrs	r3, r3, #16
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	2112      	movs	r1, #18
 80028ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028ec:	f00d f89b 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_YIADDR_OFS + 3, (client_ip_addr.addr >> 24) & 0xff);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	0e1b      	lsrs	r3, r3, #24
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	2113      	movs	r1, #19
 80028fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80028fc:	f00d f893 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2114      	movs	r1, #20
 8002904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002906:	f00d f88e 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 1, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2115      	movs	r1, #21
 800290e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002910:	f00d f889 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 2, 0);
 8002914:	2200      	movs	r2, #0
 8002916:	2116      	movs	r1, #22
 8002918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800291a:	f00d f884 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_SIADDR_OFS + 3, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2117      	movs	r1, #23
 8002922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002924:	f00d f87f 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002928:	2263      	movs	r2, #99	; 0x63
 800292a:	21ec      	movs	r1, #236	; 0xec
 800292c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800292e:	f00d f87a 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002932:	2282      	movs	r2, #130	; 0x82
 8002934:	21ed      	movs	r1, #237	; 0xed
 8002936:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002938:	f00d f875 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 800293c:	2253      	movs	r2, #83	; 0x53
 800293e:	21ee      	movs	r1, #238	; 0xee
 8002940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002942:	f00d f870 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002946:	2263      	movs	r2, #99	; 0x63
 8002948:	21ef      	movs	r1, #239	; 0xef
 800294a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800294c:	f00d f86b 	bl	800fa26 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002950:	23f0      	movs	r3, #240	; 0xf0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	b29b      	uxth	r3, r3
 8002958:	2235      	movs	r2, #53	; 0x35
 800295a:	4619      	mov	r1, r3
 800295c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800295e:	f00d f862 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	b29b      	uxth	r3, r3
 800296c:	2201      	movs	r2, #1
 800296e:	4619      	mov	r1, r3
 8002970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002972:	f00d f858 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	3301      	adds	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_ACK);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	b29b      	uxth	r3, r3
 8002980:	2205      	movs	r2, #5
 8002982:	4619      	mov	r1, r3
 8002984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002986:	f00d f84e 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	3301      	adds	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SUBNET_MASK);
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	b29b      	uxth	r3, r3
 8002994:	2201      	movs	r2, #1
 8002996:	4619      	mov	r1, r3
 8002998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800299a:	f00d f844 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	3301      	adds	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2204      	movs	r2, #4
 80029aa:	4619      	mov	r1, r3
 80029ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80029ae:	f00d f83a 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	3301      	adds	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_netmask_addr0, ap_netmask_addr1, ap_netmask_addr2, ap_netmask_addr3);
 80029b8:	4ba8      	ldr	r3, [pc, #672]	; (8002c5c <dhcpserver_fn+0xa08>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061a      	lsls	r2, r3, #24
 80029be:	4ba8      	ldr	r3, [pc, #672]	; (8002c60 <dhcpserver_fn+0xa0c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	4ba7      	ldr	r3, [pc, #668]	; (8002c64 <dhcpserver_fn+0xa10>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4313      	orrs	r3, r2
 80029ce:	4aa6      	ldr	r2, [pc, #664]	; (8002c68 <dhcpserver_fn+0xa14>)
 80029d0:	7812      	ldrb	r2, [r2, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	061a      	lsls	r2, r3, #24
 80029d6:	4ba1      	ldr	r3, [pc, #644]	; (8002c5c <dhcpserver_fn+0xa08>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	0619      	lsls	r1, r3, #24
 80029dc:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <dhcpserver_fn+0xa0c>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	4319      	orrs	r1, r3
 80029e4:	4b9f      	ldr	r3, [pc, #636]	; (8002c64 <dhcpserver_fn+0xa10>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	430b      	orrs	r3, r1
 80029ec:	499e      	ldr	r1, [pc, #632]	; (8002c68 <dhcpserver_fn+0xa14>)
 80029ee:	7809      	ldrb	r1, [r1, #0]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80029f8:	431a      	orrs	r2, r3
 80029fa:	4b98      	ldr	r3, [pc, #608]	; (8002c5c <dhcpserver_fn+0xa08>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	0619      	lsls	r1, r3, #24
 8002a00:	4b97      	ldr	r3, [pc, #604]	; (8002c60 <dhcpserver_fn+0xa0c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	041b      	lsls	r3, r3, #16
 8002a06:	4319      	orrs	r1, r3
 8002a08:	4b96      	ldr	r3, [pc, #600]	; (8002c64 <dhcpserver_fn+0xa10>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	4995      	ldr	r1, [pc, #596]	; (8002c68 <dhcpserver_fn+0xa14>)
 8002a12:	7809      	ldrb	r1, [r1, #0]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	4b8f      	ldr	r3, [pc, #572]	; (8002c5c <dhcpserver_fn+0xa08>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	0619      	lsls	r1, r3, #24
 8002a24:	4b8e      	ldr	r3, [pc, #568]	; (8002c60 <dhcpserver_fn+0xa0c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	041b      	lsls	r3, r3, #16
 8002a2a:	4319      	orrs	r1, r3
 8002a2c:	4b8d      	ldr	r3, [pc, #564]	; (8002c64 <dhcpserver_fn+0xa10>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	430b      	orrs	r3, r1
 8002a34:	498c      	ldr	r1, [pc, #560]	; (8002c68 <dhcpserver_fn+0xa14>)
 8002a36:	7809      	ldrb	r1, [r1, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	0e1b      	lsrs	r3, r3, #24
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a4c:	f00c ffeb 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	b299      	uxth	r1, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a62:	f00c ffe0 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	b299      	uxth	r1, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a78:	f00c ffd5 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3303      	adds	r3, #3
 8002a82:	b299      	uxth	r1, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	0e1b      	lsrs	r3, r3, #24
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8e:	f00c ffca 	bl	800fa26 <pbuf_put_at>
        options_offset += 4;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	3304      	adds	r3, #4
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_ROUTER);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aa2:	f00c ffc0 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ab6:	f00c ffb6 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	3301      	adds	r3, #1
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002ac0:	4b6a      	ldr	r3, [pc, #424]	; (8002c6c <dhcpserver_fn+0xa18>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	061a      	lsls	r2, r3, #24
 8002ac6:	4b6a      	ldr	r3, [pc, #424]	; (8002c70 <dhcpserver_fn+0xa1c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	431a      	orrs	r2, r3
 8002ace:	4b69      	ldr	r3, [pc, #420]	; (8002c74 <dhcpserver_fn+0xa20>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	4a68      	ldr	r2, [pc, #416]	; (8002c78 <dhcpserver_fn+0xa24>)
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	061a      	lsls	r2, r3, #24
 8002ade:	4b63      	ldr	r3, [pc, #396]	; (8002c6c <dhcpserver_fn+0xa18>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	0619      	lsls	r1, r3, #24
 8002ae4:	4b62      	ldr	r3, [pc, #392]	; (8002c70 <dhcpserver_fn+0xa1c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	041b      	lsls	r3, r3, #16
 8002aea:	4319      	orrs	r1, r3
 8002aec:	4b61      	ldr	r3, [pc, #388]	; (8002c74 <dhcpserver_fn+0xa20>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	430b      	orrs	r3, r1
 8002af4:	4960      	ldr	r1, [pc, #384]	; (8002c78 <dhcpserver_fn+0xa24>)
 8002af6:	7809      	ldrb	r1, [r1, #0]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b00:	431a      	orrs	r2, r3
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <dhcpserver_fn+0xa18>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	0619      	lsls	r1, r3, #24
 8002b08:	4b59      	ldr	r3, [pc, #356]	; (8002c70 <dhcpserver_fn+0xa1c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	041b      	lsls	r3, r3, #16
 8002b0e:	4319      	orrs	r1, r3
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <dhcpserver_fn+0xa20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	430b      	orrs	r3, r1
 8002b18:	4957      	ldr	r1, [pc, #348]	; (8002c78 <dhcpserver_fn+0xa24>)
 8002b1a:	7809      	ldrb	r1, [r1, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	0a1b      	lsrs	r3, r3, #8
 8002b20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002b24:	431a      	orrs	r2, r3
 8002b26:	4b51      	ldr	r3, [pc, #324]	; (8002c6c <dhcpserver_fn+0xa18>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	0619      	lsls	r1, r3, #24
 8002b2c:	4b50      	ldr	r3, [pc, #320]	; (8002c70 <dhcpserver_fn+0xa1c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	4319      	orrs	r1, r3
 8002b34:	4b4f      	ldr	r3, [pc, #316]	; (8002c74 <dhcpserver_fn+0xa20>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	494e      	ldr	r1, [pc, #312]	; (8002c78 <dhcpserver_fn+0xa24>)
 8002b3e:	7809      	ldrb	r1, [r1, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	0e1b      	lsrs	r3, r3, #24
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b54:	f00c ff67 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	0a1b      	lsrs	r3, r3, #8
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b6a:	f00c ff5c 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3302      	adds	r3, #2
 8002b74:	b299      	uxth	r1, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b80:	f00c ff51 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3303      	adds	r3, #3
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	0e1b      	lsrs	r3, r3, #24
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b96:	f00c ff46 	bl	800fa26 <pbuf_put_at>
        options_offset += 4;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_LEASE_TIME);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2233      	movs	r2, #51	; 0x33
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002baa:	f00c ff3c 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2204      	movs	r2, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bbe:	f00c ff32 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, (LEASE_TIME_1DAY >> 24) & 0xff);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bd2:	f00c ff28 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (LEASE_TIME_1DAY >> 16) & 0xff);
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3301      	adds	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2201      	movs	r2, #1
 8002be0:	4619      	mov	r1, r3
 8002be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be4:	f00c ff1f 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (LEASE_TIME_1DAY >> 8) & 0xff);
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3302      	adds	r3, #2
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2251      	movs	r2, #81	; 0x51
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bf6:	f00c ff16 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (LEASE_TIME_1DAY) & 0xff);
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3303      	adds	r3, #3
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	4619      	mov	r1, r3
 8002c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c08:	f00c ff0d 	bl	800fa26 <pbuf_put_at>
        options_offset += 4;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	3304      	adds	r3, #4
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_SERVER_ID);
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2236      	movs	r2, #54	; 0x36
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c1c:	f00c ff03 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	3301      	adds	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 4);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c30:	f00c fef9 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	3301      	adds	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
        IP4_ADDR(&r, ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <dhcpserver_fn+0xa18>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	061a      	lsls	r2, r3, #24
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <dhcpserver_fn+0xa1c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	431a      	orrs	r2, r3
 8002c48:	4b0a      	ldr	r3, [pc, #40]	; (8002c74 <dhcpserver_fn+0xa20>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	4a09      	ldr	r2, [pc, #36]	; (8002c78 <dhcpserver_fn+0xa24>)
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	061a      	lsls	r2, r3, #24
 8002c58:	e010      	b.n	8002c7c <dhcpserver_fn+0xa28>
 8002c5a:	bf00      	nop
 8002c5c:	2000009a 	.word	0x2000009a
 8002c60:	2000009b 	.word	0x2000009b
 8002c64:	2000009c 	.word	0x2000009c
 8002c68:	200008d4 	.word	0x200008d4
 8002c6c:	20000096 	.word	0x20000096
 8002c70:	20000097 	.word	0x20000097
 8002c74:	20000098 	.word	0x20000098
 8002c78:	20000099 	.word	0x20000099
 8002c7c:	4b67      	ldr	r3, [pc, #412]	; (8002e1c <dhcpserver_fn+0xbc8>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	0619      	lsls	r1, r3, #24
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <dhcpserver_fn+0xbcc>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	4319      	orrs	r1, r3
 8002c8a:	4b66      	ldr	r3, [pc, #408]	; (8002e24 <dhcpserver_fn+0xbd0>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	430b      	orrs	r3, r1
 8002c92:	4965      	ldr	r1, [pc, #404]	; (8002e28 <dhcpserver_fn+0xbd4>)
 8002c94:	7809      	ldrb	r1, [r1, #0]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	; (8002e1c <dhcpserver_fn+0xbc8>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	0619      	lsls	r1, r3, #24
 8002ca6:	4b5e      	ldr	r3, [pc, #376]	; (8002e20 <dhcpserver_fn+0xbcc>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	041b      	lsls	r3, r3, #16
 8002cac:	4319      	orrs	r1, r3
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <dhcpserver_fn+0xbd0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	495c      	ldr	r1, [pc, #368]	; (8002e28 <dhcpserver_fn+0xbd4>)
 8002cb8:	7809      	ldrb	r1, [r1, #0]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	4b55      	ldr	r3, [pc, #340]	; (8002e1c <dhcpserver_fn+0xbc8>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	0619      	lsls	r1, r3, #24
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <dhcpserver_fn+0xbcc>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	4319      	orrs	r1, r3
 8002cd2:	4b54      	ldr	r3, [pc, #336]	; (8002e24 <dhcpserver_fn+0xbd0>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	4953      	ldr	r1, [pc, #332]	; (8002e28 <dhcpserver_fn+0xbd4>)
 8002cdc:	7809      	ldrb	r1, [r1, #0]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	0e1b      	lsrs	r3, r3, #24
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        pbuf_put_at(pbuf_out, options_offset, r.addr & 0xff);
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002cf2:	f00c fe98 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 1, (r.addr >> 8) & 0xff);
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d08:	f00c fe8d 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 2, (r.addr >> 16) & 0xff);
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3302      	adds	r3, #2
 8002d12:	b299      	uxth	r1, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d1e:	f00c fe82 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, options_offset + 3, (r.addr >> 24) & 0xff);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3303      	adds	r3, #3
 8002d28:	b299      	uxth	r1, r3
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	0e1b      	lsrs	r3, r3, #24
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d34:	f00c fe77 	bl	800fa26 <pbuf_put_at>
        options_offset += 4;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	22ff      	movs	r2, #255	; 0xff
 8002d44:	4619      	mov	r1, r3
 8002d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d48:	f00c fe6d 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	3301      	adds	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e03d      	b.n	8002dd0 <dhcpserver_fn+0xb7c>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS, (DHCP_MAGIC_COOKIE >> 24) & 0xff);
 8002d54:	2263      	movs	r2, #99	; 0x63
 8002d56:	21ec      	movs	r1, #236	; 0xec
 8002d58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d5a:	f00c fe64 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 1, (DHCP_MAGIC_COOKIE >> 16) & 0xff);
 8002d5e:	2282      	movs	r2, #130	; 0x82
 8002d60:	21ed      	movs	r1, #237	; 0xed
 8002d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d64:	f00c fe5f 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 2, (DHCP_MAGIC_COOKIE >> 8) & 0xff);
 8002d68:	2253      	movs	r2, #83	; 0x53
 8002d6a:	21ee      	movs	r1, #238	; 0xee
 8002d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6e:	f00c fe5a 	bl	800fa26 <pbuf_put_at>
        pbuf_put_at(pbuf_out, DHCP_COOKIE_OFS + 3, (DHCP_MAGIC_COOKIE) & 0xff);
 8002d72:	2263      	movs	r2, #99	; 0x63
 8002d74:	21ef      	movs	r1, #239	; 0xef
 8002d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d78:	f00c fe55 	bl	800fa26 <pbuf_put_at>
        options_offset = UDP_DHCP_OPTIONS_OFS;
 8002d7c:	23f0      	movs	r3, #240	; 0xf0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_MESSAGE_TYPE);
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2235      	movs	r2, #53	; 0x35
 8002d86:	4619      	mov	r1, r3
 8002d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d8a:	f00c fe4c 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	3301      	adds	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, 1);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d9e:	f00c fe42 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	3301      	adds	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_NAK);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2206      	movs	r2, #6
 8002dae:	4619      	mov	r1, r3
 8002db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db2:	f00c fe38 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	3301      	adds	r3, #1
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
        pbuf_put_at(pbuf_out, options_offset, DHCP_OPTION_END);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc6:	f00c fe2e 	bl	800fa26 <pbuf_put_at>
        options_offset++;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	3301      	adds	r3, #1
 8002dce:	627b      	str	r3, [r7, #36]	; 0x24
      pbuf_realloc(pbuf_out, options_offset);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dd8:	f00c f980 	bl	800f0dc <pbuf_realloc>
      if (ERR_OK != udp_sendto(dhcp_pcb, pbuf_out, &client_ip_addr, DHCP_CLIENT_PORT)) {
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <dhcpserver_fn+0xbd8>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f107 0214 	add.w	r2, r7, #20
 8002de4:	2344      	movs	r3, #68	; 0x44
 8002de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de8:	f012 fb3c 	bl	8015464 <udp_sendto>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
      break;
 8002df0:	e006      	b.n	8002e00 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002df2:	bf00      	nop
 8002df4:	e004      	b.n	8002e00 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002df6:	bf00      	nop
 8002df8:	e002      	b.n	8002e00 <dhcpserver_fn+0xbac>
    goto end_of_fcn;
 8002dfa:	bf00      	nop
 8002dfc:	e000      	b.n	8002e00 <dhcpserver_fn+0xbac>
        goto end_of_fcn;
 8002dfe:	bf00      	nop
  }

  end_of_fcn:
  if (pbuf_out) {
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <dhcpserver_fn+0xbb8>
    pbuf_free(pbuf_out);
 8002e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e08:	f00c faee 	bl	800f3e8 <pbuf_free>
  }
  pbuf_free(pbuf_in);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f00c faeb 	bl	800f3e8 <pbuf_free>
}
 8002e12:	bf00      	nop
 8002e14:	3730      	adds	r7, #48	; 0x30
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000096 	.word	0x20000096
 8002e20:	20000097 	.word	0x20000097
 8002e24:	20000098 	.word	0x20000098
 8002e28:	20000099 	.word	0x20000099
 8002e2c:	200005d4 	.word	0x200005d4

08002e30 <dhcpserver_start_prv>:

/***************************************************************************//**
 * Start DHCP server callback.
 ******************************************************************************/
static void dhcpserver_start_prv(void * arg)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  //clear saved mac addresses
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	e03d      	b.n	8002eba <dhcpserver_start_prv+0x8a>
    saved_mac[i].addr[0] = 0;
 8002e3e:	4933      	ldr	r1, [pc, #204]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	440b      	add	r3, r1
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[1] = 0;
 8002e50:	492e      	ldr	r1, [pc, #184]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3301      	adds	r3, #1
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[2] = 0;
 8002e64:	4929      	ldr	r1, [pc, #164]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	3302      	adds	r3, #2
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[3] = 0;
 8002e78:	4924      	ldr	r1, [pc, #144]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	440b      	add	r3, r1
 8002e86:	3303      	adds	r3, #3
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[4] = 0;
 8002e8c:	491f      	ldr	r1, [pc, #124]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	440b      	add	r3, r1
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
    saved_mac[i].addr[5] = 0;
 8002ea0:	491a      	ldr	r1, [pc, #104]	; (8002f0c <dhcpserver_start_prv+0xdc>)
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	3305      	adds	r3, #5
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = 0; i < DHCPS_MAX_CLIENT; ++i) {
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d9be      	bls.n	8002e3e <dhcpserver_start_prv+0xe>
  }

  if (NULL == dhcp_pcb) {
 8002ec0:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11e      	bne.n	8002f06 <dhcpserver_start_prv+0xd6>
    dhcp_pcb = udp_new();
 8002ec8:	f012 fe1c 	bl	8015b04 <udp_new>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4a10      	ldr	r2, [pc, #64]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002ed0:	6013      	str	r3, [r2, #0]
    if (NULL == dhcp_pcb) {
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d014      	beq.n	8002f04 <dhcpserver_start_prv+0xd4>
      return;
    }

    udp_bind(dhcp_pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2243      	movs	r2, #67	; 0x43
 8002ee0:	490c      	ldr	r1, [pc, #48]	; (8002f14 <dhcpserver_start_prv+0xe4>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f012 fc74 	bl	80157d0 <udp_bind>
    udp_bind_netif(dhcp_pcb, &ap_netif);
 8002ee8:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	490a      	ldr	r1, [pc, #40]	; (8002f18 <dhcpserver_start_prv+0xe8>)
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f012 fcf6 	bl	80158e0 <udp_bind_netif>
    udp_recv(dhcp_pcb, dhcpserver_fn, 0);
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <dhcpserver_start_prv+0xe0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	4908      	ldr	r1, [pc, #32]	; (8002f1c <dhcpserver_start_prv+0xec>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f012 fd9f 	bl	8015a40 <udp_recv>
 8002f02:	e000      	b.n	8002f06 <dhcpserver_start_prv+0xd6>
      return;
 8002f04:	bf00      	nop
  }
}
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	200005d8 	.word	0x200005d8
 8002f10:	200005d4 	.word	0x200005d4
 8002f14:	0806c800 	.word	0x0806c800
 8002f18:	20000864 	.word	0x20000864
 8002f1c:	08002255 	.word	0x08002255

08002f20 <dhcpserver_start>:

/***************************************************************************//**
 * Start DHCP server.
 ******************************************************************************/
void dhcpserver_start(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_start_prv, 0);
 8002f24:	2100      	movs	r1, #0
 8002f26:	4802      	ldr	r0, [pc, #8]	; (8002f30 <dhcpserver_start+0x10>)
 8002f28:	f00a fc64 	bl	800d7f4 <tcpip_callback>
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	08002e31 	.word	0x08002e31

08002f34 <dhcpserver_stop_prv>:

/***************************************************************************//**
 * Stop DHCP server callback.
 ******************************************************************************/
static void dhcpserver_stop_prv(void * arg)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  if (dhcp_pcb != NULL) {
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <dhcpserver_stop_prv+0x34>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <dhcpserver_stop_prv+0x2a>
    udp_disconnect(dhcp_pcb);
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <dhcpserver_stop_prv+0x34>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f012 fd51 	bl	80159f0 <udp_disconnect>
    udp_remove(dhcp_pcb);
 8002f4e:	4b06      	ldr	r3, [pc, #24]	; (8002f68 <dhcpserver_stop_prv+0x34>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f012 fd94 	bl	8015a80 <udp_remove>
    dhcp_pcb = NULL;
 8002f58:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <dhcpserver_stop_prv+0x34>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
  }
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200005d4 	.word	0x200005d4

08002f6c <dhcpserver_stop>:

/***************************************************************************//**
 * Stop DHCP server.
 ******************************************************************************/
void dhcpserver_stop(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  tcpip_callback(dhcpserver_stop_prv, 0);
 8002f70:	2100      	movs	r1, #0
 8002f72:	4802      	ldr	r0, [pc, #8]	; (8002f7c <dhcpserver_stop+0x10>)
 8002f74:	f00a fc3e 	bl	800d7f4 <tcpip_callback>
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	08002f35 	.word	0x08002f35

08002f80 <low_level_init>:
 * @param[in] netif: the already initialized lwip network interface structure
 *
 * @return
 *    None
 ******************************************************************************/
static void low_level_init (struct netif *netif) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* set netif MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2206      	movs	r2, #6
 8002f8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* Check which netif is initialized and set netif MAC hardware address */
  if (memcmp(netif->name, STATION_NETIF, 2) == 0) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	2202      	movs	r2, #2
 8002f96:	491b      	ldr	r1, [pc, #108]	; (8003004 <low_level_init+0x84>)
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f018 f9cd 	bl	801b338 <memcmp>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <low_level_init+0x3a>
    memcpy(netif->hwaddr, wifi_context.mac_addr_0.octet, 6);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <low_level_init+0x88>)
 8002fac:	f203 2316 	addw	r3, r3, #534	; 0x216
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	6011      	str	r1, [r2, #0]
 8002fb4:	889b      	ldrh	r3, [r3, #4]
 8002fb6:	8093      	strh	r3, [r2, #4]
 8002fb8:	e009      	b.n	8002fce <low_level_init+0x4e>
  } else {
    memcpy(netif->hwaddr, wifi_context.mac_addr_1.octet, 6);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8002fc0:	4b11      	ldr	r3, [pc, #68]	; (8003008 <low_level_init+0x88>)
 8002fc2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	6010      	str	r0, [r2, #0]
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	8093      	strh	r3, [r2, #4]
  }

  /* Set netif maximum transfer unit */
  netif->mtu = 1500;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fdc:	f043 030a 	orr.w	r3, r3, #10
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  /* Set netif link flag */
  netif->flags |= NETIF_FLAG_LINK_UP;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	0801d264 	.word	0x0801d264
 8003008:	20000608 	.word	0x20000608

0800300c <low_level_output>:
 * @param[in] p: the packet to send
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
static err_t low_level_output (struct netif *netif, struct pbuf *p) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint8_t *buffer;
  sl_wfx_packet_queue_item_t *queue_item;
  sl_status_t result;
  
  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8003016:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <low_level_output+0xe8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 31ff 	mov.w	r1, #4294967295
 800301e:	4618      	mov	r0, r3
 8003020:	f007 fec8 	bl	800adb4 <xQueueSemaphoreTake>

  /* Allocate a buffer for a queue item */
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
                                          SL_WFX_SEND_FRAME_REQ_ID,
                                          SL_WFX_TX_FRAME_BUFFER,
                                          p->tot_len + sizeof(sl_wfx_packet_queue_item_t));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	891b      	ldrh	r3, [r3, #8]
 8003028:	3318      	adds	r3, #24
  result = sl_wfx_allocate_command_buffer((sl_wfx_generic_message_t**)(&queue_item),
 800302a:	f107 0008 	add.w	r0, r7, #8
 800302e:	2200      	movs	r2, #0
 8003030:	214a      	movs	r1, #74	; 0x4a
 8003032:	f005 fd4f 	bl	8008ad4 <sl_wfx_allocate_command_buffer>
 8003036:	60f8      	str	r0, [r7, #12]
  
  if ((result != SL_STATUS_OK) || (queue_item == NULL)) {
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <low_level_output+0x38>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <low_level_output+0x4c>
	  /* Release TX queue mutex */
	    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8003044:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <low_level_output+0xe8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	f007 fbab 	bl	800a7a8 <xQueueGenericSend>
    return ERR_MEM;
 8003052:	f04f 33ff 	mov.w	r3, #4294967295
 8003056:	e049      	b.n	80030ec <low_level_output+0xe0>
  }

  buffer = queue_item->buffer.body.packet_data;
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	3318      	adds	r3, #24
 800305c:	613b      	str	r3, [r7, #16]
  
  for (q = p; q != NULL; q = q->next) {
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	e010      	b.n	8003086 <low_level_output+0x7a>
    /* Copy the bytes */
    memcpy(buffer, q->payload, q->len);
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	895b      	ldrh	r3, [r3, #10]
 800306c:	461a      	mov	r2, r3
 800306e:	6938      	ldr	r0, [r7, #16]
 8003070:	f018 fa2f 	bl	801b4d2 <memcpy>
    buffer += q->len;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	895b      	ldrh	r3, [r3, #10]
 8003078:	461a      	mov	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4413      	add	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
  for (q = p; q != NULL; q = q->next) {
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1eb      	bne.n	8003064 <low_level_output+0x58>
  }

  /* Provide the data length the interface information to the pbuf */
  queue_item->interface = (memcmp(netif->name, STATION_NETIF, 2) == 0)?  SL_WFX_STA_INTERFACE : SL_WFX_SOFTAP_INTERFACE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3332      	adds	r3, #50	; 0x32
 8003090:	2202      	movs	r2, #2
 8003092:	4919      	ldr	r1, [pc, #100]	; (80030f8 <low_level_output+0xec>)
 8003094:	4618      	mov	r0, r3
 8003096:	f018 f94f 	bl	801b338 <memcmp>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	711a      	strb	r2, [r3, #4]
  queue_item->data_length = p->tot_len;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	891a      	ldrh	r2, [r3, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	609a      	str	r2, [r3, #8]
  
  /* Determine if there is anything on the tx packet queue */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <low_level_output+0xf0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <low_level_output+0xb8>
    sl_wfx_tx_queue_context.tail_ptr->next = queue_item;
 80030ba:	4b10      	ldr	r3, [pc, #64]	; (80030fc <low_level_output+0xf0>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	e002      	b.n	80030ca <low_level_output+0xbe>
  } else {
    /* If tx packet queue is empty, setup head & tail pointers */
    sl_wfx_tx_queue_context.head_ptr = queue_item;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a0d      	ldr	r2, [pc, #52]	; (80030fc <low_level_output+0xf0>)
 80030c8:	6013      	str	r3, [r2, #0]
  }
  
  /* Update the tail pointer */
  sl_wfx_tx_queue_context.tail_ptr = queue_item;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <low_level_output+0xf0>)
 80030ce:	6053      	str	r3, [r2, #4]
  
  /* Notify that a TX frame is ready */
  xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 80030d0:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <low_level_output+0xf4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	4618      	mov	r0, r3
 80030d8:	f007 f908 	bl	800a2ec <xEventGroupSetBits>
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <low_level_output+0xe8>)
 80030de:	6818      	ldr	r0, [r3, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	f007 fb5f 	bl	800a7a8 <xQueueGenericSend>
  
  return ERR_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20001510 	.word	0x20001510
 80030f8:	0801d264 	.word	0x0801d264
 80030fc:	20001514 	.word	0x20001514
 8003100:	2000150c 	.word	0x2000150c

08003104 <low_level_input>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    LwIP pbuf filled with received packet, or NULL on error
 ******************************************************************************/
static struct pbuf *low_level_input (struct netif *netif, sl_wfx_received_ind_t* rx_buffer) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  struct pbuf *p, *q;
  uint8_t *buffer;
  
  /* Obtain the packet by removing the padding. */
  buffer = (uint8_t *)&(rx_buffer->body.frame[rx_buffer->body.frame_padding]);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	795b      	ldrb	r3, [r3, #5]
 8003112:	461a      	mov	r2, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	3308      	adds	r3, #8
 800311a:	60fb      	str	r3, [r7, #12]
 
  if (rx_buffer->body.frame_length > 0) {
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	88db      	ldrh	r3, [r3, #6]
 8003120:	b29b      	uxth	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <low_level_input+0x36>
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, rx_buffer->body.frame_length, PBUF_POOL);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	88db      	ldrh	r3, [r3, #6]
 800312a:	b29b      	uxth	r3, r3
 800312c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003130:	4619      	mov	r1, r3
 8003132:	2000      	movs	r0, #0
 8003134:	f00b fe70 	bl	800ee18 <pbuf_alloc>
 8003138:	6178      	str	r0, [r7, #20]
  }
  
  if (p != NULL) {
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d016      	beq.n	800316e <low_level_input+0x6a>
    for (q = p; q != NULL; q = q->next) {
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e010      	b.n	8003168 <low_level_input+0x64>
      /* Copy remaining data in pbuf */
      memcpy(q->payload, buffer, q->len);
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	6858      	ldr	r0, [r3, #4]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	895b      	ldrh	r3, [r3, #10]
 800314e:	461a      	mov	r2, r3
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	f018 f9be 	bl	801b4d2 <memcpy>
      buffer += q->len;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	895b      	ldrh	r3, [r3, #10]
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
    for (q = p; q != NULL; q = q->next) {
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1eb      	bne.n	8003146 <low_level_input+0x42>
    }
  }  
   
  return p;
 800316e:	697b      	ldr	r3, [r7, #20]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <sl_wfx_host_received_frame_callback>:
 * @param[in] rx_buffer: the ethernet frame received by the wf200
 *
 * @return
 *    None
******************************************************************************/
void sl_wfx_host_received_frame_callback (sl_wfx_received_ind_t* rx_buffer) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif;
  
  /* Check packet interface to send to AP or STA interface */
  if ((rx_buffer->header.info & SL_WFX_MSG_INFO_INTERFACE_MASK) == 
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	78db      	ldrb	r3, [r3, #3]
 8003184:	f003 0306 	and.w	r3, r3, #6
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <sl_wfx_host_received_frame_callback+0x1a>
     (SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET)) {
    /* Send to station interface */
    netif = &sta_netif;
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <sl_wfx_host_received_frame_callback+0x54>)
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e001      	b.n	8003196 <sl_wfx_host_received_frame_callback+0x1e>
  } else {
    /* Send to softAP interface */
    netif = &ap_netif;
 8003192:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <sl_wfx_host_received_frame_callback+0x58>)
 8003194:	60fb      	str	r3, [r7, #12]
  }

  if (netif != NULL) {
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d012      	beq.n	80031c2 <sl_wfx_host_received_frame_callback+0x4a>
    p = low_level_input(netif, rx_buffer);
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f7ff ffb0 	bl	8003104 <low_level_input>
 80031a4:	60b8      	str	r0, [r7, #8]
    if (p != NULL) {
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <sl_wfx_host_received_frame_callback+0x4a>
      if (netif->input(p, netif) != ERR_OK) {
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	68f9      	ldr	r1, [r7, #12]
 80031b2:	68b8      	ldr	r0, [r7, #8]
 80031b4:	4798      	blx	r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <sl_wfx_host_received_frame_callback+0x4a>
        pbuf_free(p);
 80031bc:	68b8      	ldr	r0, [r7, #8]
 80031be:	f00c f913 	bl	800f3e8 <pbuf_free>
      }
    }
  }
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	2000082c 	.word	0x2000082c
 80031d0:	20000864 	.word	0x20000864

080031d4 <sta_ethernetif_init>:
 * @param[in] netif: the lwip network interface structure
 *
 * @return
 *    ERR_OK if successful
 ******************************************************************************/
err_t sta_ethernetif_init (struct netif *netif) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <sta_ethernetif_init+0x1a>
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <sta_ethernetif_init+0x44>)
 80031e4:	22dc      	movs	r2, #220	; 0xdc
 80031e6:	490d      	ldr	r1, [pc, #52]	; (800321c <sta_ethernetif_init+0x48>)
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <sta_ethernetif_init+0x4c>)
 80031ea:	f017 ff53 	bl	801b094 <iprintf>

  /* Set the netif name to identify the interface */
  memcpy(netif->name, STATION_NETIF, 2);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3332      	adds	r3, #50	; 0x32
 80031f2:	2202      	movs	r2, #2
 80031f4:	490b      	ldr	r1, [pc, #44]	; (8003224 <sta_ethernetif_init+0x50>)
 80031f6:	4618      	mov	r0, r3
 80031f8:	f018 f96b 	bl	801b4d2 <memcpy>

  netif->output = etharp_output;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <sta_ethernetif_init+0x54>)
 8003200:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <sta_ethernetif_init+0x58>)
 8003206:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7ff feb9 	bl	8002f80 <low_level_init>
  
  return ERR_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	0801d268 	.word	0x0801d268
 800321c:	0801d284 	.word	0x0801d284
 8003220:	0801d294 	.word	0x0801d294
 8003224:	0801d264 	.word	0x0801d264
 8003228:	08018265 	.word	0x08018265
 800322c:	0800300d 	.word	0x0800300d

08003230 <sys_now>:
  low_level_init(netif);
  
  return ERR_OK;
}

u32_t sys_now (void) {
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003234:	f001 f970 	bl	8004518 <HAL_GetTick>
 8003238:	4603      	mov	r3, r0
}
 800323a:	4618      	mov	r0, r3
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <lwip_start_task_entry>:
 *    not used
 *
 * @return
 *    none
 ******************************************************************************/
static void lwip_start_task_entry (void const * argument) {
 8003240:	b5b0      	push	{r4, r5, r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8003248:	2100      	movs	r1, #0
 800324a:	2000      	movs	r0, #0
 800324c:	f00a fb60 	bl	800d910 <tcpip_init>

  /* Initialize the LwIP stack */
  netif_config();
 8003250:	f000 f886 	bl	8003360 <netif_config>
#endif
#ifdef LWIP_IPERF_SERVER
  lwiperf_start_tcp_server_default(lwip_iperf_results,0);
#endif

  if (use_dhcp_client) {
 8003254:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <lwip_start_task_entry+0x44>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <lwip_start_task_entry+0x38>
    /* Start DHCP Client */
    osThreadDef(DHCP, dhcpclient_start, osPriorityLow, 0, configMINIMAL_STACK_SIZE * 2);
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <lwip_start_task_entry+0x48>)
 800325e:	f107 040c 	add.w	r4, r7, #12
 8003262:	461d      	mov	r5, r3
 8003264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003268:	682b      	ldr	r3, [r5, #0]
 800326a:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(DHCP), &sta_netif);
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	4906      	ldr	r1, [pc, #24]	; (800328c <lwip_start_task_entry+0x4c>)
 8003272:	4618      	mov	r0, r3
 8003274:	f006 fd95 	bl	8009da2 <osThreadCreate>
  }

  wifi_autoconnexion_init();
 8003278:	f7fe fb2a 	bl	80018d0 <wifi_autoconnexion_init>

	while(1) {
    /* Delete the Init Thread */
    osThreadTerminate(NULL);
 800327c:	2000      	movs	r0, #0
 800327e:	f006 fdb7 	bl	8009df0 <osThreadTerminate>
 8003282:	e7fb      	b.n	800327c <lwip_start_task_entry+0x3c>
 8003284:	2000008c 	.word	0x2000008c
 8003288:	0801d2c8 	.word	0x0801d2c8
 800328c:	2000082c 	.word	0x2000082c

08003290 <lwip_set_sta_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_sta_link_up (void) {
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&sta_netif);
 8003294:	2200      	movs	r2, #0
 8003296:	4909      	ldr	r1, [pc, #36]	; (80032bc <lwip_set_sta_link_up+0x2c>)
 8003298:	4809      	ldr	r0, [pc, #36]	; (80032c0 <lwip_set_sta_link_up+0x30>)
 800329a:	f00a f975 	bl	800d588 <netifapi_netif_common>
  netifapi_netif_set_link_up(&sta_netif);
 800329e:	2200      	movs	r2, #0
 80032a0:	4908      	ldr	r1, [pc, #32]	; (80032c4 <lwip_set_sta_link_up+0x34>)
 80032a2:	4807      	ldr	r0, [pc, #28]	; (80032c0 <lwip_set_sta_link_up+0x30>)
 80032a4:	f00a f970 	bl	800d588 <netifapi_netif_common>
  if (use_dhcp_client) {
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <lwip_set_sta_link_up+0x38>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <lwip_set_sta_link_up+0x26>
    dhcpclient_set_link_state(1);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7fe fbf9 	bl	8001aa8 <dhcpclient_set_link_state>
  }
}
 80032b6:	bf00      	nop
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	0800ea9d 	.word	0x0800ea9d
 80032c0:	2000082c 	.word	0x2000082c
 80032c4:	0800ebd9 	.word	0x0800ebd9
 80032c8:	2000008c 	.word	0x2000008c

080032cc <lwip_set_sta_link_down>:
 *    none
 *
 * @return
 *    none
******************************************************************************/
void lwip_set_sta_link_down (void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  if (use_dhcp_client) {
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <lwip_set_sta_link_down+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <lwip_set_sta_link_down+0x12>
    dhcpclient_set_link_state(0);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fe fbe5 	bl	8001aa8 <dhcpclient_set_link_state>
  }
  netifapi_netif_set_link_down(&sta_netif);
 80032de:	2200      	movs	r2, #0
 80032e0:	4906      	ldr	r1, [pc, #24]	; (80032fc <lwip_set_sta_link_down+0x30>)
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <lwip_set_sta_link_down+0x34>)
 80032e4:	f00a f950 	bl	800d588 <netifapi_netif_common>
  netifapi_netif_set_down(&sta_netif);
 80032e8:	2200      	movs	r2, #0
 80032ea:	4906      	ldr	r1, [pc, #24]	; (8003304 <lwip_set_sta_link_down+0x38>)
 80032ec:	4804      	ldr	r0, [pc, #16]	; (8003300 <lwip_set_sta_link_down+0x34>)
 80032ee:	f00a f94b 	bl	800d588 <netifapi_netif_common>
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	2000008c 	.word	0x2000008c
 80032fc:	0800ec49 	.word	0x0800ec49
 8003300:	2000082c 	.word	0x2000082c
 8003304:	0800eb75 	.word	0x0800eb75

08003308 <lwip_set_ap_link_up>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_up (void) {
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  netifapi_netif_set_up(&ap_netif);
 800330c:	2200      	movs	r2, #0
 800330e:	4906      	ldr	r1, [pc, #24]	; (8003328 <lwip_set_ap_link_up+0x20>)
 8003310:	4806      	ldr	r0, [pc, #24]	; (800332c <lwip_set_ap_link_up+0x24>)
 8003312:	f00a f939 	bl	800d588 <netifapi_netif_common>
  netifapi_netif_set_link_up(&ap_netif);
 8003316:	2200      	movs	r2, #0
 8003318:	4905      	ldr	r1, [pc, #20]	; (8003330 <lwip_set_ap_link_up+0x28>)
 800331a:	4804      	ldr	r0, [pc, #16]	; (800332c <lwip_set_ap_link_up+0x24>)
 800331c:	f00a f934 	bl	800d588 <netifapi_netif_common>
  dhcpserver_start();
 8003320:	f7ff fdfe 	bl	8002f20 <dhcpserver_start>
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	0800ea9d 	.word	0x0800ea9d
 800332c:	20000864 	.word	0x20000864
 8003330:	0800ebd9 	.word	0x0800ebd9

08003334 <lwip_set_ap_link_down>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_set_ap_link_down (void) {
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  dhcpserver_stop();
 8003338:	f7ff fe18 	bl	8002f6c <dhcpserver_stop>
  netifapi_netif_set_link_down(&ap_netif);
 800333c:	2200      	movs	r2, #0
 800333e:	4905      	ldr	r1, [pc, #20]	; (8003354 <lwip_set_ap_link_down+0x20>)
 8003340:	4805      	ldr	r0, [pc, #20]	; (8003358 <lwip_set_ap_link_down+0x24>)
 8003342:	f00a f921 	bl	800d588 <netifapi_netif_common>
  netifapi_netif_set_down(&ap_netif);
 8003346:	2200      	movs	r2, #0
 8003348:	4904      	ldr	r1, [pc, #16]	; (800335c <lwip_set_ap_link_down+0x28>)
 800334a:	4803      	ldr	r0, [pc, #12]	; (8003358 <lwip_set_ap_link_down+0x24>)
 800334c:	f00a f91c 	bl	800d588 <netifapi_netif_common>
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0800ec49 	.word	0x0800ec49
 8003358:	20000864 	.word	0x20000864
 800335c:	0800eb75 	.word	0x0800eb75

08003360 <netif_config>:
 *    none
 *
 * @return
*    0: initialization success, -1: an error occurred
 ******************************************************************************/
static int netif_config(void) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	; 0x28
 8003364:	af04      	add	r7, sp, #16
  sl_status_t status;
  ip_addr_t sta_ipaddr;
  ip_addr_t sta_netmask;
  ip_addr_t sta_gw;
  int res = -1;
 8003366:	f04f 33ff 	mov.w	r3, #4294967295
 800336a:	617b      	str	r3, [r7, #20]
  /* Initialize the Station information */
  if (use_dhcp_client) {
 800336c:	4b9e      	ldr	r3, [pc, #632]	; (80035e8 <netif_config+0x288>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <netif_config+0x22>
    ip_addr_set_zero_ip4(&sta_ipaddr);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
    ip_addr_set_zero_ip4(&sta_netmask);
 8003378:	2300      	movs	r3, #0
 800337a:	60bb      	str	r3, [r7, #8]
    ip_addr_set_zero_ip4(&sta_gw);
 800337c:	2300      	movs	r3, #0
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	e0cb      	b.n	800351a <netif_config+0x1ba>
  } else {
    IP_ADDR4(&sta_ipaddr,sta_ip_addr0,sta_ip_addr1,sta_ip_addr2,sta_ip_addr3);
 8003382:	4b9a      	ldr	r3, [pc, #616]	; (80035ec <netif_config+0x28c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	061a      	lsls	r2, r3, #24
 8003388:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <netif_config+0x290>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	4b98      	ldr	r3, [pc, #608]	; (80035f4 <netif_config+0x294>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	4313      	orrs	r3, r2
 8003398:	4a97      	ldr	r2, [pc, #604]	; (80035f8 <netif_config+0x298>)
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	4313      	orrs	r3, r2
 800339e:	061a      	lsls	r2, r3, #24
 80033a0:	4b92      	ldr	r3, [pc, #584]	; (80035ec <netif_config+0x28c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	0619      	lsls	r1, r3, #24
 80033a6:	4b92      	ldr	r3, [pc, #584]	; (80035f0 <netif_config+0x290>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	4319      	orrs	r1, r3
 80033ae:	4b91      	ldr	r3, [pc, #580]	; (80035f4 <netif_config+0x294>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	021b      	lsls	r3, r3, #8
 80033b4:	430b      	orrs	r3, r1
 80033b6:	4990      	ldr	r1, [pc, #576]	; (80035f8 <netif_config+0x298>)
 80033b8:	7809      	ldrb	r1, [r1, #0]
 80033ba:	430b      	orrs	r3, r1
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033c2:	431a      	orrs	r2, r3
 80033c4:	4b89      	ldr	r3, [pc, #548]	; (80035ec <netif_config+0x28c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	0619      	lsls	r1, r3, #24
 80033ca:	4b89      	ldr	r3, [pc, #548]	; (80035f0 <netif_config+0x290>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	041b      	lsls	r3, r3, #16
 80033d0:	4319      	orrs	r1, r3
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <netif_config+0x294>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	021b      	lsls	r3, r3, #8
 80033d8:	430b      	orrs	r3, r1
 80033da:	4987      	ldr	r1, [pc, #540]	; (80035f8 <netif_config+0x298>)
 80033dc:	7809      	ldrb	r1, [r1, #0]
 80033de:	430b      	orrs	r3, r1
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80033e6:	431a      	orrs	r2, r3
 80033e8:	4b80      	ldr	r3, [pc, #512]	; (80035ec <netif_config+0x28c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	0619      	lsls	r1, r3, #24
 80033ee:	4b80      	ldr	r3, [pc, #512]	; (80035f0 <netif_config+0x290>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	4319      	orrs	r1, r3
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <netif_config+0x294>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	430b      	orrs	r3, r1
 80033fe:	497e      	ldr	r1, [pc, #504]	; (80035f8 <netif_config+0x298>)
 8003400:	7809      	ldrb	r1, [r1, #0]
 8003402:	430b      	orrs	r3, r1
 8003404:	0e1b      	lsrs	r3, r3, #24
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
    IP_ADDR4(&sta_netmask,sta_netmask_addr0,sta_netmask_addr1,sta_netmask_addr2,sta_netmask_addr3);
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <netif_config+0x29c>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	061a      	lsls	r2, r3, #24
 8003410:	4b7b      	ldr	r3, [pc, #492]	; (8003600 <netif_config+0x2a0>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	041b      	lsls	r3, r3, #16
 8003416:	431a      	orrs	r2, r3
 8003418:	4b7a      	ldr	r3, [pc, #488]	; (8003604 <netif_config+0x2a4>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	4313      	orrs	r3, r2
 8003420:	4a79      	ldr	r2, [pc, #484]	; (8003608 <netif_config+0x2a8>)
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	4313      	orrs	r3, r2
 8003426:	061a      	lsls	r2, r3, #24
 8003428:	4b74      	ldr	r3, [pc, #464]	; (80035fc <netif_config+0x29c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	0619      	lsls	r1, r3, #24
 800342e:	4b74      	ldr	r3, [pc, #464]	; (8003600 <netif_config+0x2a0>)
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	041b      	lsls	r3, r3, #16
 8003434:	4319      	orrs	r1, r3
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <netif_config+0x2a4>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	430b      	orrs	r3, r1
 800343e:	4972      	ldr	r1, [pc, #456]	; (8003608 <netif_config+0x2a8>)
 8003440:	7809      	ldrb	r1, [r1, #0]
 8003442:	430b      	orrs	r3, r1
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800344a:	431a      	orrs	r2, r3
 800344c:	4b6b      	ldr	r3, [pc, #428]	; (80035fc <netif_config+0x29c>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0619      	lsls	r1, r3, #24
 8003452:	4b6b      	ldr	r3, [pc, #428]	; (8003600 <netif_config+0x2a0>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	4319      	orrs	r1, r3
 800345a:	4b6a      	ldr	r3, [pc, #424]	; (8003604 <netif_config+0x2a4>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	021b      	lsls	r3, r3, #8
 8003460:	430b      	orrs	r3, r1
 8003462:	4969      	ldr	r1, [pc, #420]	; (8003608 <netif_config+0x2a8>)
 8003464:	7809      	ldrb	r1, [r1, #0]
 8003466:	430b      	orrs	r3, r1
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800346e:	431a      	orrs	r2, r3
 8003470:	4b62      	ldr	r3, [pc, #392]	; (80035fc <netif_config+0x29c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	0619      	lsls	r1, r3, #24
 8003476:	4b62      	ldr	r3, [pc, #392]	; (8003600 <netif_config+0x2a0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	4319      	orrs	r1, r3
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <netif_config+0x2a4>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	430b      	orrs	r3, r1
 8003486:	4960      	ldr	r1, [pc, #384]	; (8003608 <netif_config+0x2a8>)
 8003488:	7809      	ldrb	r1, [r1, #0]
 800348a:	430b      	orrs	r3, r1
 800348c:	0e1b      	lsrs	r3, r3, #24
 800348e:	4313      	orrs	r3, r2
 8003490:	60bb      	str	r3, [r7, #8]
    IP_ADDR4(&sta_gw,sta_gw_addr0,sta_gw_addr1,sta_gw_addr2,sta_gw_addr3);
 8003492:	4b5e      	ldr	r3, [pc, #376]	; (800360c <netif_config+0x2ac>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	061a      	lsls	r2, r3, #24
 8003498:	4b5d      	ldr	r3, [pc, #372]	; (8003610 <netif_config+0x2b0>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	4b5c      	ldr	r3, [pc, #368]	; (8003614 <netif_config+0x2b4>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	4313      	orrs	r3, r2
 80034a8:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <netif_config+0x2b8>)
 80034aa:	7812      	ldrb	r2, [r2, #0]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	061a      	lsls	r2, r3, #24
 80034b0:	4b56      	ldr	r3, [pc, #344]	; (800360c <netif_config+0x2ac>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	0619      	lsls	r1, r3, #24
 80034b6:	4b56      	ldr	r3, [pc, #344]	; (8003610 <netif_config+0x2b0>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	4319      	orrs	r1, r3
 80034be:	4b55      	ldr	r3, [pc, #340]	; (8003614 <netif_config+0x2b4>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	430b      	orrs	r3, r1
 80034c6:	4954      	ldr	r1, [pc, #336]	; (8003618 <netif_config+0x2b8>)
 80034c8:	7809      	ldrb	r1, [r1, #0]
 80034ca:	430b      	orrs	r3, r1
 80034cc:	021b      	lsls	r3, r3, #8
 80034ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034d2:	431a      	orrs	r2, r3
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <netif_config+0x2ac>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	0619      	lsls	r1, r3, #24
 80034da:	4b4d      	ldr	r3, [pc, #308]	; (8003610 <netif_config+0x2b0>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	4319      	orrs	r1, r3
 80034e2:	4b4c      	ldr	r3, [pc, #304]	; (8003614 <netif_config+0x2b4>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	430b      	orrs	r3, r1
 80034ea:	494b      	ldr	r1, [pc, #300]	; (8003618 <netif_config+0x2b8>)
 80034ec:	7809      	ldrb	r1, [r1, #0]
 80034ee:	430b      	orrs	r3, r1
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80034f6:	431a      	orrs	r2, r3
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <netif_config+0x2ac>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	0619      	lsls	r1, r3, #24
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <netif_config+0x2b0>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	041b      	lsls	r3, r3, #16
 8003504:	4319      	orrs	r1, r3
 8003506:	4b43      	ldr	r3, [pc, #268]	; (8003614 <netif_config+0x2b4>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	430b      	orrs	r3, r1
 800350e:	4942      	ldr	r1, [pc, #264]	; (8003618 <netif_config+0x2b8>)
 8003510:	7809      	ldrb	r1, [r1, #0]
 8003512:	430b      	orrs	r3, r1
 8003514:	0e1b      	lsrs	r3, r3, #24
 8003516:	4313      	orrs	r3, r2
 8003518:	607b      	str	r3, [r7, #4]
  }


  /* Initialize the WF200 used by the two interfaces */
  status = sl_wfx_init(&wifi_context);
 800351a:	4840      	ldr	r0, [pc, #256]	; (800361c <netif_config+0x2bc>)
 800351c:	f004 fb18 	bl	8007b50 <sl_wfx_init>
 8003520:	6138      	str	r0, [r7, #16]
  switch (status) {
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f640 3202 	movw	r2, #2818	; 0xb02
 8003528:	4293      	cmp	r3, r2
 800352a:	d034      	beq.n	8003596 <netif_config+0x236>
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	f640 3202 	movw	r2, #2818	; 0xb02
 8003532:	4293      	cmp	r3, r2
 8003534:	d83b      	bhi.n	80035ae <netif_config+0x24e>
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f640 3201 	movw	r2, #2817	; 0xb01
 800353c:	4293      	cmp	r3, r2
 800353e:	d026      	beq.n	800358e <netif_config+0x22e>
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f640 3201 	movw	r2, #2817	; 0xb01
 8003546:	4293      	cmp	r3, r2
 8003548:	d831      	bhi.n	80035ae <netif_config+0x24e>
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	2b07      	cmp	r3, #7
 800354e:	d026      	beq.n	800359e <netif_config+0x23e>
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d82b      	bhi.n	80035ae <netif_config+0x24e>
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <netif_config+0x204>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d021      	beq.n	80035a6 <netif_config+0x246>
 8003562:	e024      	b.n	80035ae <netif_config+0x24e>
  case SL_STATUS_OK:
    wifi_context.state = SL_WFX_STARTED;
 8003564:	4b2d      	ldr	r3, [pc, #180]	; (800361c <netif_config+0x2bc>)
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800356c:	4b2b      	ldr	r3, [pc, #172]	; (800361c <netif_config+0x2bc>)
 800356e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8003572:	4619      	mov	r1, r3
    		wifi_context.firmware_minor,
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <netif_config+0x2bc>)
 8003576:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 800357a:	461a      	mov	r2, r3
			wifi_context.firmware_build);
 800357c:	4b27      	ldr	r3, [pc, #156]	; (800361c <netif_config+0x2bc>)
 800357e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
    printf("WF200 initialization successful V%d.%d.%d\r\n", wifi_context.firmware_major,
 8003582:	4827      	ldr	r0, [pc, #156]	; (8003620 <netif_config+0x2c0>)
 8003584:	f017 fd86 	bl	801b094 <iprintf>
    res = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
    break;
 800358c:	e012      	b.n	80035b4 <netif_config+0x254>
  case SL_STATUS_WIFI_INVALID_KEY:
    printf("Failed to init WF200: Firmware keyset invalid\r\n");
 800358e:	4825      	ldr	r0, [pc, #148]	; (8003624 <netif_config+0x2c4>)
 8003590:	f017 fde6 	bl	801b160 <puts>
    break;
 8003594:	e00e      	b.n	80035b4 <netif_config+0x254>
  case SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT:
    printf("Failed to init WF200: Firmware download timeout\r\n");
 8003596:	4824      	ldr	r0, [pc, #144]	; (8003628 <netif_config+0x2c8>)
 8003598:	f017 fde2 	bl	801b160 <puts>
    break;
 800359c:	e00a      	b.n	80035b4 <netif_config+0x254>
  case SL_STATUS_TIMEOUT:
    printf("Failed to init WF200: Poll for value timeout\r\n");
 800359e:	4823      	ldr	r0, [pc, #140]	; (800362c <netif_config+0x2cc>)
 80035a0:	f017 fdde 	bl	801b160 <puts>
    break;
 80035a4:	e006      	b.n	80035b4 <netif_config+0x254>
  case SL_STATUS_FAIL:
    printf("Failed to init WF200: Error\r\n");
 80035a6:	4822      	ldr	r0, [pc, #136]	; (8003630 <netif_config+0x2d0>)
 80035a8:	f017 fdda 	bl	801b160 <puts>
    break;
 80035ac:	e002      	b.n	80035b4 <netif_config+0x254>
  default :
    printf("Failed to init WF200: Unknown error\r\n");
 80035ae:	4821      	ldr	r0, [pc, #132]	; (8003634 <netif_config+0x2d4>)
 80035b0:	f017 fdd6 	bl	801b160 <puts>
  }

  if (res == 0) {
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d110      	bne.n	80035dc <netif_config+0x27c>
    /* Add station and softAP interfaces */
    netif_add(&sta_netif, &sta_ipaddr, &sta_netmask, &sta_gw, NULL, &sta_ethernetif_init, &tcpip_input);
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	f107 0208 	add.w	r2, r7, #8
 80035c0:	f107 010c 	add.w	r1, r7, #12
 80035c4:	481c      	ldr	r0, [pc, #112]	; (8003638 <netif_config+0x2d8>)
 80035c6:	9002      	str	r0, [sp, #8]
 80035c8:	481c      	ldr	r0, [pc, #112]	; (800363c <netif_config+0x2dc>)
 80035ca:	9001      	str	r0, [sp, #4]
 80035cc:	2000      	movs	r0, #0
 80035ce:	9000      	str	r0, [sp, #0]
 80035d0:	481b      	ldr	r0, [pc, #108]	; (8003640 <netif_config+0x2e0>)
 80035d2:	f00b f899 	bl	800e708 <netif_add>
    //netif_add(&ap_netif, &ap_ipaddr, &ap_netmask, &ap_gw, NULL, &ap_ethernetif_init, &tcpip_input);

    /* Registers the default network interface */
    netif_set_default(&sta_netif);
 80035d6:	481a      	ldr	r0, [pc, #104]	; (8003640 <netif_config+0x2e0>)
 80035d8:	f00b fa50 	bl	800ea7c <netif_set_default>
  wifi_cli_cfg_dialog();
#else
  //sl_wfx_start_ap_command(softap_channel, (uint8_t*) softap_ssid, strlen(softap_ssid), 0, 0, softap_security, 0, (uint8_t*) softap_passkey, strlen(softap_passkey), NULL, 0, NULL, 0);
#endif
  
  return res;
 80035dc:	697b      	ldr	r3, [r7, #20]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000008c 	.word	0x2000008c
 80035ec:	20000090 	.word	0x20000090
 80035f0:	20000091 	.word	0x20000091
 80035f4:	200008ce 	.word	0x200008ce
 80035f8:	20000092 	.word	0x20000092
 80035fc:	20000093 	.word	0x20000093
 8003600:	20000094 	.word	0x20000094
 8003604:	20000095 	.word	0x20000095
 8003608:	200008cf 	.word	0x200008cf
 800360c:	200008d0 	.word	0x200008d0
 8003610:	200008d1 	.word	0x200008d1
 8003614:	200008d2 	.word	0x200008d2
 8003618:	200008d3 	.word	0x200008d3
 800361c:	20000608 	.word	0x20000608
 8003620:	0801d2dc 	.word	0x0801d2dc
 8003624:	0801d308 	.word	0x0801d308
 8003628:	0801d338 	.word	0x0801d338
 800362c:	0801d36c 	.word	0x0801d36c
 8003630:	0801d39c 	.word	0x0801d39c
 8003634:	0801d3bc 	.word	0x0801d3bc
 8003638:	0800d7b1 	.word	0x0800d7b1
 800363c:	080031d5 	.word	0x080031d5
 8003640:	2000082c 	.word	0x2000082c

08003644 <lwip_start>:
 *    none
 *
 * @return
 *    none
 ******************************************************************************/
void lwip_start (void) {
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
  osThreadDef(lwip_start, lwip_start_task_entry, osPriorityNormal, 0, configMINIMAL_STACK_SIZE*5);
 800364a:	4b08      	ldr	r3, [pc, #32]	; (800366c <lwip_start+0x28>)
 800364c:	1d3c      	adds	r4, r7, #4
 800364e:	461d      	mov	r5, r3
 8003650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003654:	682b      	ldr	r3, [r5, #0]
 8003656:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(lwip_start), NULL);
 8003658:	1d3b      	adds	r3, r7, #4
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f006 fba0 	bl	8009da2 <osThreadCreate>
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bdb0      	pop	{r4, r5, r7, pc}
 800366a:	bf00      	nop
 800366c:	0801d3f0 	.word	0x0801d3f0

08003670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003674:	f000 feea 	bl	800444c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8003678:	f000 f81e 	bl	80036b8 <SystemClock_Config>

    /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800367c:	f000 f950 	bl	8003920 <MX_GPIO_Init>
  MX_DMA_Init();
 8003680:	f000 f92e 	bl	80038e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003684:	f000 f902 	bl	800388c <MX_USART2_UART_Init>
  //MX_SPI1_Init(); THIS WILL BE HANDLE BY THE SL_WFX_DRIVER --> SL_WFX_INIT()

  //THIS INIT TAKES CARE OF MOSI,MISO AND CLK GPIO
  MX_SPI3_Init();
 8003688:	f000 f8cc 	bl	8003824 <MX_SPI3_Init>
  MX_SPI4_Init();
 800368c:	f000 f892 	bl	80037b4 <MX_SPI4_Init>
  /* Clear the console and buffer */
  printf("\033\143");
 8003690:	4807      	ldr	r0, [pc, #28]	; (80036b0 <main+0x40>)
 8003692:	f017 fcff 	bl	801b094 <iprintf>
//  printf("\033[3J");
  printf("Hello, welcome to the WFM200 driver \r\n");
 8003696:	4807      	ldr	r0, [pc, #28]	; (80036b4 <main+0x44>)
 8003698:	f017 fd62 	bl	801b160 <puts>


#ifndef spi_mode_only
  /* Task init */
//  vTraceEnable(TRC_START);
  sl_wfx_task_start();
 800369c:	f006 fa68 	bl	8009b70 <sl_wfx_task_start>
  wifi_events_start();
 80036a0:	f006 f8f8 	bl	8009894 <wifi_events_start>
  //wifi_cli_start();					/*NOT GOING TO USE THE CLI SINCE THERE WILL NOT BE ANY USART CONNECTION*/
  lwip_start();
 80036a4:	f7ff ffce 	bl	8003644 <lwip_start>

#endif


  /* Start scheduler */
  osKernelStart();
 80036a8:	f006 fb64 	bl	8009d74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <main+0x3c>
 80036ae:	bf00      	nop
 80036b0:	0801d404 	.word	0x0801d404
 80036b4:	0801d408 	.word	0x0801d408

080036b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b094      	sub	sp, #80	; 0x50
 80036bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036be:	f107 0320 	add.w	r3, r7, #32
 80036c2:	2230      	movs	r2, #48	; 0x30
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f017 fe46 	bl	801b358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036cc:	f107 030c 	add.w	r3, r7, #12
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	2300      	movs	r3, #0
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <SystemClock_Config+0xf0>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <SystemClock_Config+0xf0>)
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	6413      	str	r3, [r2, #64]	; 0x40
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <SystemClock_Config+0xf0>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f8:	2300      	movs	r3, #0
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <SystemClock_Config+0xf4>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a2a      	ldr	r2, [pc, #168]	; (80037ac <SystemClock_Config+0xf4>)
 8003702:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	4b28      	ldr	r3, [pc, #160]	; (80037ac <SystemClock_Config+0xf4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
//  RCC_OscInitStruct.PLL.PLLN = 400;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
//  RCC_OscInitStruct.PLL.PLLQ = 4;

  //SETUP FOR 96MHz
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003714:	2301      	movs	r3, #1
 8003716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003718:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800371e:	2302      	movs	r3, #2
 8003720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003722:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003728:	2308      	movs	r3, #8
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
//  RCC_OscInitStruct.PLL.PLLN = 280; //70MHz
//  RCC_OscInitStruct.PLL.PLLN = 260; //65MHz
//  RCC_OscInitStruct.PLL.PLLN = 240; //60MHz
//  RCC_OscInitStruct.PLL.PLLN = 200; //55MHz

  RCC_OscInitStruct.PLL.PLLN = 400;
 800372c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8003730:	647b      	str	r3, [r7, #68]	; 0x44

  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003732:	2304      	movs	r3, #4
 8003734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003736:	2308      	movs	r3, #8
 8003738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	4618      	mov	r0, r3
 8003740:	f001 ff10 	bl	8005564 <HAL_RCC_OscConfig>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800374a:	f000 f98d 	bl	8003a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800374e:	230f      	movs	r3, #15
 8003750:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003752:	2302      	movs	r3, #2
 8003754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800375a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800375e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003764:	f107 030c 	add.w	r3, r7, #12
 8003768:	2103      	movs	r1, #3
 800376a:	4618      	mov	r0, r3
 800376c:	f002 f972 	bl	8005a54 <HAL_RCC_ClockConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003776:	f000 f977 	bl	8003a68 <Error_Handler>
  }

  /**Configure the Systick interrupt time*/
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800377a:	f002 fb57 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 800377e:	4603      	mov	r3, r0
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <SystemClock_Config+0xf8>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	099b      	lsrs	r3, r3, #6
 8003788:	4618      	mov	r0, r3
 800378a:	f001 f82c 	bl	80047e6 <HAL_SYSTICK_Config>
	  /**Configure the Systick */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800378e:	2004      	movs	r0, #4
 8003790:	f001 f836 	bl	8004800 <HAL_SYSTICK_CLKSourceConfig>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003794:	2200      	movs	r2, #0
 8003796:	210f      	movs	r1, #15
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	f000 ffeb 	bl	8004776 <HAL_NVIC_SetPriority>

}
 80037a0:	bf00      	nop
 80037a2:	3750      	adds	r7, #80	; 0x50
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
 80037b0:	10624dd3 	.word	0x10624dd3

080037b4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* SPI4 parameter configuration */
  hspi4.Instance = SPI4;
 80037b8:	4b18      	ldr	r3, [pc, #96]	; (800381c <MX_SPI4_Init+0x68>)
 80037ba:	4a19      	ldr	r2, [pc, #100]	; (8003820 <MX_SPI4_Init+0x6c>)
 80037bc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <MX_SPI4_Init+0x68>)
 80037c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037c4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <MX_SPI4_Init+0x68>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80037cc:	4b13      	ldr	r3, [pc, #76]	; (800381c <MX_SPI4_Init+0x68>)
 80037ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037d2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;  // Set CPOL = 1
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <MX_SPI4_Init+0x68>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;       // Set CPHA = 1
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <MX_SPI4_Init+0x68>)
 80037dc:	2201      	movs	r2, #1
 80037de:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <MX_SPI4_Init+0x68>)
 80037e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <MX_SPI4_Init+0x68>)
 80037ea:	2210      	movs	r2, #16
 80037ec:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <MX_SPI4_Init+0x68>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f4:	4b09      	ldr	r3, [pc, #36]	; (800381c <MX_SPI4_Init+0x68>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037fa:	4b08      	ldr	r3, [pc, #32]	; (800381c <MX_SPI4_Init+0x68>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8003800:	4b06      	ldr	r3, [pc, #24]	; (800381c <MX_SPI4_Init+0x68>)
 8003802:	220a      	movs	r2, #10
 8003804:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003806:	4805      	ldr	r0, [pc, #20]	; (800381c <MX_SPI4_Init+0x68>)
 8003808:	f002 fb44 	bl	8005e94 <HAL_SPI_Init>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_SPI4_Init+0x62>
  {
    Error_Handler();
 8003812:	f000 f929 	bl	8003a68 <Error_Handler>
  }
}
 8003816:	bf00      	nop
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200009d4 	.word	0x200009d4
 8003820:	40013400 	.word	0x40013400

08003824 <MX_SPI3_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* SPI4 parameter configuration*/
  hspi3.Instance = SPI3;
 8003828:	4b16      	ldr	r3, [pc, #88]	; (8003884 <MX_SPI3_Init+0x60>)
 800382a:	4a17      	ldr	r2, [pc, #92]	; (8003888 <MX_SPI3_Init+0x64>)
 800382c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800382e:	4b15      	ldr	r3, [pc, #84]	; (8003884 <MX_SPI3_Init+0x60>)
 8003830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003834:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <MX_SPI3_Init+0x60>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_SPI3_Init+0x60>)
 800383e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003842:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_SPI3_Init+0x60>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_SPI3_Init+0x60>)
 800384c:	2200      	movs	r2, #0
 800384e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003850:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_SPI3_Init+0x60>)
 8003852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003856:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <MX_SPI3_Init+0x60>)
 800385a:	2200      	movs	r2, #0
 800385c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_SPI3_Init+0x60>)
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <MX_SPI3_Init+0x60>)
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_SPI3_Init+0x60>)
 800386c:	220a      	movs	r2, #10
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <MX_SPI3_Init+0x60>)
 8003872:	f002 fb0f 	bl	8005e94 <HAL_SPI_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_SPI3_Init+0x5c>
  {
	Error_Handler();
 800387c:	f000 f8f4 	bl	8003a68 <Error_Handler>
  }
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	2000091c 	.word	0x2000091c
 8003888:	40003c00 	.word	0x40003c00

0800388c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <MX_USART2_UART_Init+0x50>)
 8003894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 8003898:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800389c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038b2:	220c      	movs	r2, #12
 80038b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038c2:	4805      	ldr	r0, [pc, #20]	; (80038d8 <MX_USART2_UART_Init+0x4c>)
 80038c4:	f003 faf2 	bl	8006eac <HAL_UART_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038ce:	f000 f8cb 	bl	8003a68 <Error_Handler>
  }
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200008d8 	.word	0x200008d8
 80038dc:	40004400 	.word	0x40004400

080038e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_DMA_Init+0x3c>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a0b      	ldr	r2, [pc, #44]	; (800391c <MX_DMA_Init+0x3c>)
 80038f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_DMA_Init+0x3c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */


  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003902:	2200      	movs	r2, #0
 8003904:	2100      	movs	r1, #0
 8003906:	203b      	movs	r0, #59	; 0x3b
 8003908:	f000 ff35 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800390c:	203b      	movs	r0, #59	; 0x3b
 800390e:	f000 ff4e 	bl	80047ae <HAL_NVIC_EnableIRQ>

}
 8003912:	bf00      	nop
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <MX_GPIO_Init>:


//INIT THE WFM PINs THAT ARE NOT SPI RELATED
static void MX_GPIO_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003926:	f107 0314 	add.w	r3, r7, #20
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
 8003934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <MX_GPIO_Init+0x114>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	4a3d      	ldr	r2, [pc, #244]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003940:	f043 0304 	orr.w	r3, r3, #4
 8003944:	6313      	str	r3, [r2, #48]	; 0x30
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a36      	ldr	r2, [pc, #216]	; (8003a34 <MX_GPIO_Init+0x114>)
 800395c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	4a2f      	ldr	r2, [pc, #188]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6313      	str	r3, [r2, #48]	; 0x30
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	4a28      	ldr	r2, [pc, #160]	; (8003a34 <MX_GPIO_Init+0x114>)
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	6313      	str	r3, [r2, #48]	; 0x30
 800399a:	4b26      	ldr	r3, [pc, #152]	; (8003a34 <MX_GPIO_Init+0x114>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 80039a6:	2201      	movs	r2, #1
 80039a8:	2110      	movs	r1, #16
 80039aa:	4823      	ldr	r0, [pc, #140]	; (8003a38 <MX_GPIO_Init+0x118>)
 80039ac:	f001 fd9c 	bl	80054e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2101      	movs	r1, #1
 80039b4:	4821      	ldr	r0, [pc, #132]	; (8003a3c <MX_GPIO_Init+0x11c>)
 80039b6:	f001 fd97 	bl	80054e8 <HAL_GPIO_WritePin>

  //  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(WFM_GPIO_WIRQ_Port, WFM_GPIO_WIRQ_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : WFM_NSS_Pin */
  GPIO_InitStruct.Pin = WFM_NSS_Pin;
 80039ba:	2310      	movs	r3, #16
 80039bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039be:	2301      	movs	r3, #1
 80039c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c6:	2303      	movs	r3, #3
 80039c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_NSS_GPIO_Port, &GPIO_InitStruct);
 80039ca:	f107 0314 	add.w	r3, r7, #20
 80039ce:	4619      	mov	r1, r3
 80039d0:	4819      	ldr	r0, [pc, #100]	; (8003a38 <MX_GPIO_Init+0x118>)
 80039d2:	f001 fb21 	bl	8005018 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_RESET_Pin */
  GPIO_InitStruct.Pin = WFM_RESET_Pin;
 80039d6:	2301      	movs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WFM_RESET_GPIO_Port, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	4813      	ldr	r0, [pc, #76]	; (8003a3c <MX_GPIO_Init+0x11c>)
 80039ee:	f001 fb13 	bl	8005018 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_WUP_Pin */
   GPIO_InitStruct.Pin = WFM_WUP_Pin;
 80039f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f6:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039f8:	2301      	movs	r3, #1
 80039fa:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(WFM_WUP_GPIO_Port, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	480d      	ldr	r0, [pc, #52]	; (8003a40 <MX_GPIO_Init+0x120>)
 8003a0c:	f001 fb04 	bl	8005018 <HAL_GPIO_Init>

  /*Configure GPIO pin : WFM_SPI_WIRQ_Pin */
  GPIO_InitStruct.Pin = WFM_SPI_WIRQ_Pin;
 8003a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WFM_SPI_WIRQ_Port, &GPIO_InitStruct);
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	4619      	mov	r1, r3
 8003a26:	4806      	ldr	r0, [pc, #24]	; (8003a40 <MX_GPIO_Init+0x120>)
 8003a28:	f001 faf6 	bl	8005018 <HAL_GPIO_Init>
//
//  /* EXTI interrupt init*/
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}
 8003a2c:	bf00      	nop
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020000 	.word	0x40020000
 8003a3c:	40020800 	.word	0x40020800
 8003a40:	40020400 	.word	0x40020400

08003a44 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8003a4c:	1d39      	adds	r1, r7, #4
 8003a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a52:	2201      	movs	r2, #1
 8003a54:	4803      	ldr	r0, [pc, #12]	; (8003a64 <__io_putchar+0x20>)
 8003a56:	f003 fa76 	bl	8006f46 <HAL_UART_Transmit>

  return ch;
 8003a5a:	687b      	ldr	r3, [r7, #4]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200008d8 	.word	0x200008d8

08003a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
}
 8003a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <Error_Handler+0x8>
	...

08003a74 <HAL_MspInit>:
extern DMA_HandleTypeDef hdma_spi4_rx;
extern DMA_HandleTypeDef hdma_spi3_rx;


void HAL_MspInit(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	607b      	str	r3, [r7, #4]
 8003a7e:	4b25      	ldr	r3, [pc, #148]	; (8003b14 <HAL_MspInit+0xa0>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	4a24      	ldr	r2, [pc, #144]	; (8003b14 <HAL_MspInit+0xa0>)
 8003a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a88:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8a:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <HAL_MspInit+0xa0>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_PWR_CLK_ENABLE();
 8003a96:	2300      	movs	r3, #0
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_MspInit+0xa0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_MspInit+0xa0>)
 8003aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_MspInit+0xa0>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]

	  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	f000 fe54 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

	  /* System interrupt init*/
	  /* MemoryManagement_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	f06f 000b 	mvn.w	r0, #11
 8003ac0:	f000 fe59 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* BusFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f06f 000a 	mvn.w	r0, #10
 8003acc:	f000 fe53 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* UsageFault_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f06f 0009 	mvn.w	r0, #9
 8003ad8:	f000 fe4d 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* SVCall_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f06f 0004 	mvn.w	r0, #4
 8003ae4:	f000 fe47 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* DebugMonitor_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	f06f 0003 	mvn.w	r0, #3
 8003af0:	f000 fe41 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* PendSV_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	210f      	movs	r1, #15
 8003af8:	f06f 0001 	mvn.w	r0, #1
 8003afc:	f000 fe3b 	bl	8004776 <HAL_NVIC_SetPriority>
	  /* SysTick_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003b00:	2200      	movs	r2, #0
 8003b02:	210f      	movs	r1, #15
 8003b04:	f04f 30ff 	mov.w	r0, #4294967295
 8003b08:	f000 fe35 	bl	8004776 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b090      	sub	sp, #64	; 0x40
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4aa7      	ldr	r2, [pc, #668]	; (8003dd4 <HAL_SPI_MspInit+0x2bc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	f040 80a1 	bne.w	8003c7e <HAL_SPI_MspInit+0x166>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b40:	4ba5      	ldr	r3, [pc, #660]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b44:	4aa4      	ldr	r2, [pc, #656]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b4a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4c:	4ba2      	ldr	r3, [pc, #648]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5c:	4b9e      	ldr	r3, [pc, #632]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4a9d      	ldr	r2, [pc, #628]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6313      	str	r3, [r2, #48]	; 0x30
 8003b68:	4b9b      	ldr	r3, [pc, #620]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin;
 8003b74:	23e0      	movs	r3, #224	; 0xe0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b80:	2303      	movs	r3, #3
 8003b82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b84:	2305      	movs	r3, #5
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4893      	ldr	r0, [pc, #588]	; (8003ddc <HAL_SPI_MspInit+0x2c4>)
 8003b90:	f001 fa42 	bl	8005018 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8003b94:	4b92      	ldr	r3, [pc, #584]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003b96:	4a93      	ldr	r2, [pc, #588]	; (8003de4 <HAL_SPI_MspInit+0x2cc>)
 8003b98:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003b9a:	4b91      	ldr	r3, [pc, #580]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003b9c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003ba0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ba2:	4b8f      	ldr	r3, [pc, #572]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba8:	4b8d      	ldr	r3, [pc, #564]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bae:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb6:	4b8a      	ldr	r3, [pc, #552]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bbc:	4b88      	ldr	r3, [pc, #544]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003bc2:	4b87      	ldr	r3, [pc, #540]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bc8:	4b85      	ldr	r3, [pc, #532]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bce:	4b84      	ldr	r3, [pc, #528]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003bd4:	4882      	ldr	r0, [pc, #520]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bd6:	f000 fe2f 	bl	8004838 <HAL_DMA_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003be0:	f7ff ff42 	bl	8003a68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a7e      	ldr	r2, [pc, #504]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bea:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_SPI_MspInit+0x2c8>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8003bf0:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003bf2:	4a7e      	ldr	r2, [pc, #504]	; (8003dec <HAL_SPI_MspInit+0x2d4>)
 8003bf4:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8003bf6:	4b7c      	ldr	r3, [pc, #496]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003bf8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003bfc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c04:	4b78      	ldr	r3, [pc, #480]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c0a:	4b77      	ldr	r3, [pc, #476]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c10:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c12:	4b75      	ldr	r3, [pc, #468]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c18:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003c1e:	4b72      	ldr	r3, [pc, #456]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c24:	4b70      	ldr	r3, [pc, #448]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c2a:	4b6f      	ldr	r3, [pc, #444]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003c30:	486d      	ldr	r0, [pc, #436]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c32:	f000 fe01 	bl	8004838 <HAL_DMA_Init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8003c3c:	f7ff ff14 	bl	8003a68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a69      	ldr	r2, [pc, #420]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c44:	649a      	str	r2, [r3, #72]	; 0x48
 8003c46:	4a68      	ldr	r2, [pc, #416]	; (8003de8 <HAL_SPI_MspInit+0x2d0>)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn RX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 10, 1);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	210a      	movs	r1, #10
 8003c50:	2038      	movs	r0, #56	; 0x38
 8003c52:	f000 fd90 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c56:	2038      	movs	r0, #56	; 0x38
 8003c58:	f000 fda9 	bl	80047ae <HAL_NVIC_EnableIRQ>

    /* DMA2_Stream2_IRQn TX interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 10, 0);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	210a      	movs	r1, #10
 8003c60:	203a      	movs	r0, #58	; 0x3a
 8003c62:	f000 fd88 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003c66:	203a      	movs	r0, #58	; 0x3a
 8003c68:	f000 fda1 	bl	80047ae <HAL_NVIC_EnableIRQ>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 10, 2);
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	210a      	movs	r1, #10
 8003c70:	2023      	movs	r0, #35	; 0x23
 8003c72:	f000 fd80 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003c76:	2023      	movs	r0, #35	; 0x23
 8003c78:	f000 fd99 	bl	80047ae <HAL_NVIC_EnableIRQ>
          /* USER CODE BEGIN SPI3_MspInit 1 */

          /* USER CODE END SPI3_MspInit 1 */
      }

}
 8003c7c:	e147      	b.n	8003f0e <HAL_SPI_MspInit+0x3f6>
  else if(hspi->Instance==SPI4)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5b      	ldr	r2, [pc, #364]	; (8003df0 <HAL_SPI_MspInit+0x2d8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f040 80bb 	bne.w	8003e00 <HAL_SPI_MspInit+0x2e8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	623b      	str	r3, [r7, #32]
 8003c8e:	4b52      	ldr	r3, [pc, #328]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	4a51      	ldr	r2, [pc, #324]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003c94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c98:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca2:	623b      	str	r3, [r7, #32]
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
 8003caa:	4b4b      	ldr	r3, [pc, #300]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a4a      	ldr	r2, [pc, #296]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b48      	ldr	r3, [pc, #288]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	4b44      	ldr	r3, [pc, #272]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	4a43      	ldr	r2, [pc, #268]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd2:	4b41      	ldr	r3, [pc, #260]	; (8003dd8 <HAL_SPI_MspInit+0x2c0>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RHD_SPI_MOSI_Pin;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003cee:	2305      	movs	r3, #5
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RHD_SPI_MOSI_Port, &GPIO_InitStruct);
 8003cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4838      	ldr	r0, [pc, #224]	; (8003ddc <HAL_SPI_MspInit+0x2c4>)
 8003cfa:	f001 f98d 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RHD_SPI_MISO_Pin;
 8003cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d04:	2302      	movs	r3, #2
 8003d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003d10:	2306      	movs	r3, #6
 8003d12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RHD_SPI_MISO_Port, &GPIO_InitStruct);
 8003d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4830      	ldr	r0, [pc, #192]	; (8003ddc <HAL_SPI_MspInit+0x2c4>)
 8003d1c:	f001 f97c 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CLK_Pin;
 8003d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003d32:	2306      	movs	r3, #6
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(RHD_SPI_CLK_Port, &GPIO_InitStruct);
 8003d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	482d      	ldr	r0, [pc, #180]	; (8003df4 <HAL_SPI_MspInit+0x2dc>)
 8003d3e:	f001 f96b 	bl	8005018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin   = RHD_SPI_CS_Pin;
 8003d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d50:	2303      	movs	r3, #3
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_GPIO_Init(RHD_SPI_CS_Port, &GPIO_InitStruct);
 8003d54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4826      	ldr	r0, [pc, #152]	; (8003df4 <HAL_SPI_MspInit+0x2dc>)
 8003d5c:	f001 f95c 	bl	8005018 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8003d60:	4b25      	ldr	r3, [pc, #148]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d62:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_SPI_MspInit+0x2e4>)
 8003d64:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d68:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003d6c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d7a:	4b1f      	ldr	r3, [pc, #124]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d80:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d8a:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d90:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8003d92:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d9e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003da0:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8003da6:	4814      	ldr	r0, [pc, #80]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003da8:	f000 fd46 	bl	8004838 <HAL_DMA_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_SPI_MspInit+0x29e>
      Error_Handler();
 8003db2:	f7ff fe59 	bl	8003a68 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003dba:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dbc:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_SPI_MspInit+0x2e0>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	203b      	movs	r0, #59	; 0x3b
 8003dc8:	f000 fcd5 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003dcc:	203b      	movs	r0, #59	; 0x3b
 8003dce:	f000 fcee 	bl	80047ae <HAL_NVIC_EnableIRQ>
}
 8003dd2:	e09c      	b.n	8003f0e <HAL_SPI_MspInit+0x3f6>
 8003dd4:	40013000 	.word	0x40013000
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	40020000 	.word	0x40020000
 8003de0:	200014a4 	.word	0x200014a4
 8003de4:	40026410 	.word	0x40026410
 8003de8:	20001444 	.word	0x20001444
 8003dec:	40026440 	.word	0x40026440
 8003df0:	40013400 	.word	0x40013400
 8003df4:	40020400 	.word	0x40020400
 8003df8:	20000a2c 	.word	0x20000a2c
 8003dfc:	40026458 	.word	0x40026458
  else if (hspi->Instance == SPI3)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a44      	ldr	r2, [pc, #272]	; (8003f18 <HAL_SPI_MspInit+0x400>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f040 8081 	bne.w	8003f0e <HAL_SPI_MspInit+0x3f6>
	  __HAL_RCC_SPI3_CLK_ENABLE();
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	4b42      	ldr	r3, [pc, #264]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	4a41      	ldr	r2, [pc, #260]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1c:	4b3f      	ldr	r3, [pc, #252]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e30:	4a3a      	ldr	r2, [pc, #232]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e32:	f043 0304 	orr.w	r3, r3, #4
 8003e36:	6313      	str	r3, [r2, #48]	; 0x30
 8003e38:	4b38      	ldr	r3, [pc, #224]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a33      	ldr	r2, [pc, #204]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e4e:	f043 0308 	orr.w	r3, r3, #8
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_SPI_MspInit+0x404>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
	  GPIO_InitStruct.Pin = RHS_SPI_CLK_Pin | RHS_SPI_MISO_Pin | RHS_SPI_MOSI_Pin;
 8003e60:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	637b      	str	r3, [r7, #52]	; 0x34
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
	  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e72:	2306      	movs	r3, #6
 8003e74:	63fb      	str	r3, [r7, #60]	; 0x3c
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4828      	ldr	r0, [pc, #160]	; (8003f20 <HAL_SPI_MspInit+0x408>)
 8003e7e:	f001 f8cb 	bl	8005018 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pin = RHS_SPI_CS_Pin;
 8003e82:	2304      	movs	r3, #4
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4825      	ldr	r0, [pc, #148]	; (8003f24 <HAL_SPI_MspInit+0x40c>)
 8003e8e:	f001 f8c3 	bl	8005018 <HAL_GPIO_Init>
	  hdma_spi3_rx.Instance = DMA1_Stream0; // Adjust stream and channel as per your hardware
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003e94:	4a25      	ldr	r2, [pc, #148]	; (8003f2c <HAL_SPI_MspInit+0x414>)
 8003e96:	601a      	str	r2, [r3, #0]
	  hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
	  hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
	  hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
	  hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb0:	611a      	str	r2, [r3, #16]
	  hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
	  hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003eb8:	4b1b      	ldr	r3, [pc, #108]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	619a      	str	r2, [r3, #24]
	  hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8003ebe:	4b1a      	ldr	r3, [pc, #104]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	61da      	str	r2, [r3, #28]
	  hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eca:	621a      	str	r2, [r3, #32]
	  hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ecc:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8003ed2:	4815      	ldr	r0, [pc, #84]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ed4:	f000 fcb0 	bl	8004838 <HAL_DMA_Init>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_SPI_MspInit+0x3ca>
		  Error_Handler();
 8003ede:	f7ff fdc3 	bl	8003a68 <Error_Handler>
	  __HAL_LINKDMA(hspi, hdmarx, hdma_spi3_rx);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a10      	ldr	r2, [pc, #64]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003ee6:	64da      	str	r2, [r3, #76]	; 0x4c
 8003ee8:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <HAL_SPI_MspInit+0x410>)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6393      	str	r3, [r2, #56]	; 0x38
	  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	200b      	movs	r0, #11
 8003ef4:	f000 fc3f 	bl	8004776 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003ef8:	200b      	movs	r0, #11
 8003efa:	f000 fc58 	bl	80047ae <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2105      	movs	r1, #5
 8003f02:	2033      	movs	r0, #51	; 0x33
 8003f04:	f000 fc37 	bl	8004776 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003f08:	2033      	movs	r0, #51	; 0x33
 8003f0a:	f000 fc50 	bl	80047ae <HAL_NVIC_EnableIRQ>
}
 8003f0e:	bf00      	nop
 8003f10:	3740      	adds	r7, #64	; 0x40
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40003c00 	.word	0x40003c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020800 	.word	0x40020800
 8003f24:	40020c00 	.word	0x40020c00
 8003f28:	20000974 	.word	0x20000974
 8003f2c:	40026010 	.word	0x40026010

08003f30 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_SPI_MspDeInit+0x80>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d114      	bne.n	8003f6c <HAL_SPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_SPI_MspDeInit+0x84>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	4a1b      	ldr	r2, [pc, #108]	; (8003fb4 <HAL_SPI_MspDeInit+0x84>)
 8003f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f4c:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, WFM_SCK_Pin|WFM_MISO_Pin|WFM_MOSI_Pin);
 8003f4e:	21e0      	movs	r1, #224	; 0xe0
 8003f50:	4819      	ldr	r0, [pc, #100]	; (8003fb8 <HAL_SPI_MspDeInit+0x88>)
 8003f52:	f001 f9e5 	bl	8005320 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmarx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd1a 	bl	8004994 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fd15 	bl	8004994 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI4_MspDeInit 1 */

  /* USER CODE END SPI4_MspDeInit 1 */
  }

}
 8003f6a:	e01d      	b.n	8003fa8 <HAL_SPI_MspDeInit+0x78>
  else if(hspi->Instance==SPI4)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <HAL_SPI_MspDeInit+0x8c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d118      	bne.n	8003fa8 <HAL_SPI_MspDeInit+0x78>
    __HAL_RCC_SPI4_CLK_DISABLE();
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_SPI_MspDeInit+0x84>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_SPI_MspDeInit+0x84>)
 8003f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(RHD_SPI_MOSI_Port, RHD_SPI_MOSI_Pin);
 8003f82:	2102      	movs	r1, #2
 8003f84:	480c      	ldr	r0, [pc, #48]	; (8003fb8 <HAL_SPI_MspDeInit+0x88>)
 8003f86:	f001 f9cb 	bl	8005320 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(RHD_SPI_CS_Port  , RHD_SPI_CS_Pin | RHD_SPI_CLK_Pin);
 8003f8a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8003f8e:	480c      	ldr	r0, [pc, #48]	; (8003fc0 <HAL_SPI_MspDeInit+0x90>)
 8003f90:	f001 f9c6 	bl	8005320 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fcfb 	bl	8004994 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fcf6 	bl	8004994 <HAL_DMA_DeInit>
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40013000 	.word	0x40013000
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	40013400 	.word	0x40013400
 8003fc0:	40020400 	.word	0x40020400

08003fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08a      	sub	sp, #40	; 0x28
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	60da      	str	r2, [r3, #12]
 8003fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_UART_MspInit+0x84>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12b      	bne.n	800403e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	4b18      	ldr	r3, [pc, #96]	; (800404c <HAL_UART_MspInit+0x88>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_UART_MspInit+0x88>)
 8003ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff6:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_UART_MspInit+0x88>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_UART_MspInit+0x88>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <HAL_UART_MspInit+0x88>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_UART_MspInit+0x88>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800401e:	230c      	movs	r3, #12
 8004020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004022:	2302      	movs	r3, #2
 8004024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402a:	2303      	movs	r3, #3
 800402c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800402e:	2307      	movs	r3, #7
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	4805      	ldr	r0, [pc, #20]	; (8004050 <HAL_UART_MspInit+0x8c>)
 800403a:	f000 ffed 	bl	8005018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800403e:	bf00      	nop
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40004400 	.word	0x40004400
 800404c:	40023800 	.word	0x40023800
 8004050:	40020000 	.word	0x40020000

08004054 <SPI1_IRQHandler>:

/* USER CODE BEGIN EV */
/**************************************************************************//**
 * Handle SPI1 global interrupt
 *****************************************************************************/
void SPI1_IRQHandler (void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi1);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <SPI1_IRQHandler+0x10>)
 800405a:	f002 fb83 	bl	8006764 <HAL_SPI_IRQHandler>
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200013ec 	.word	0x200013ec

08004068 <HAL_SPI_TxCpltCallback>:


/**************************************************************************//**
 * SPI transmit complete callback
 *****************************************************************************/
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef *hspi) {
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_SPI_TxCpltCallback+0x3c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f107 020c 	add.w	r2, r7, #12
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f006 fd2b 	bl	800aada <xQueueGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_SPI_TxCpltCallback+0x32>
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_SPI_TxCpltCallback+0x40>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20001504 	.word	0x20001504
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <HAL_SPI_RxCpltCallback>:

/**************************************************************************//**
 * SPI receive complete callback
 *****************************************************************************/
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef *hspi) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
	if(hspi->Instance==SPI1){
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_SPI_RxCpltCallback+0x84>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d112      	bne.n	80040e8 <HAL_SPI_RxCpltCallback+0x3c>
		  xSemaphoreGiveFromISR(spiDMASemaphore, &xHigherPriorityTaskWoken);
 80040c2:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <HAL_SPI_RxCpltCallback+0x88>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f107 020c 	add.w	r2, r7, #12
 80040ca:	4611      	mov	r1, r2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f006 fd04 	bl	800aada <xQueueGiveFromISR>
		  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_SPI_RxCpltCallback+0x3c>
 80040d8:	4b17      	ldr	r3, [pc, #92]	; (8004138 <HAL_SPI_RxCpltCallback+0x8c>)
 80040da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	f3bf 8f6f 	isb	sy
	}

	if(hspi->Instance==SPI4){
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <HAL_SPI_RxCpltCallback+0x90>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d119      	bne.n	8004126 <HAL_SPI_RxCpltCallback+0x7a>
		current_buffer = (current_buffer + 1) % NUM_BUFFERS;
 80040f2:	4b13      	ldr	r3, [pc, #76]	; (8004140 <HAL_SPI_RxCpltCallback+0x94>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	3301      	adds	r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	bfb8      	it	lt
 8004102:	425b      	neglt	r3, r3
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <HAL_SPI_RxCpltCallback+0x94>)
 8004108:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Receive_DMA(hspi, (uint8_t *)rx_buffers[current_buffer], SPI_BUFFER_SIZE);
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <HAL_SPI_RxCpltCallback+0x94>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	b2db      	uxtb	r3, r3
 8004110:	01db      	lsls	r3, r3, #7
 8004112:	4a0c      	ldr	r2, [pc, #48]	; (8004144 <HAL_SPI_RxCpltCallback+0x98>)
 8004114:	4413      	add	r3, r2
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f002 f95e 	bl	80063dc <HAL_SPI_Receive_DMA>
		spi_flag = 1;
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_SPI_RxCpltCallback+0x9c>)
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
	}
}
 8004126:	bf00      	nop
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40013000 	.word	0x40013000
 8004134:	20001504 	.word	0x20001504
 8004138:	e000ed04 	.word	0xe000ed04
 800413c:	40013400 	.word	0x40013400
 8004140:	200002a9 	.word	0x200002a9
 8004144:	200002ac 	.word	0x200002ac
 8004148:	200002a8 	.word	0x200002a8

0800414c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004150:	e7fe      	b.n	8004150 <NMI_Handler+0x4>

08004152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004156:	e7fe      	b.n	8004156 <HardFault_Handler+0x4>

08004158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800415c:	e7fe      	b.n	800415c <MemManage_Handler+0x4>

0800415e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800415e:	b480      	push	{r7}
 8004160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004162:	e7fe      	b.n	8004162 <BusFault_Handler+0x4>

08004164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004168:	e7fe      	b.n	8004168 <UsageFault_Handler+0x4>

0800416a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800416a:	b480      	push	{r7}
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800417c:	f000 f9b8 	bl	80044f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004180:	f008 f820 	bl	800c1c4 <xTaskGetSchedulerState>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800418a:	f008 ff65 	bl	800d058 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */
  osSystickHandler();
 800418e:	f005 ffbd 	bl	800a10c <osSystickHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <EXTI15_10_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void EXTI15_10_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800419e:	2300      	movs	r3, #0
 80041a0:	607b      	str	r3, [r7, #4]

  if (__HAL_GPIO_EXTI_GET_IT(WFM_SPI_WIRQ_Pin) != RESET) {
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <EXTI15_10_IRQHandler+0x60>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d011      	beq.n	80041d2 <EXTI15_10_IRQHandler+0x3a>
	  if(sl_wfx_wake_up_sem){
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <EXTI15_10_IRQHandler+0x64>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d006      	beq.n	80041c4 <EXTI15_10_IRQHandler+0x2c>
		  xSemaphoreGiveFromISR(sl_wfx_wake_up_sem, &xHigherPriorityTaskWoken);
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <EXTI15_10_IRQHandler+0x64>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	1d3a      	adds	r2, r7, #4
 80041bc:	4611      	mov	r1, r2
 80041be:	4618      	mov	r0, r3
 80041c0:	f006 fc8b 	bl	800aada <xQueueGiveFromISR>
	   }

	xEventGroupSetBitsFromISR(sl_wfx_event_group,
 80041c4:	4b0e      	ldr	r3, [pc, #56]	; (8004200 <EXTI15_10_IRQHandler+0x68>)
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	2202      	movs	r2, #2
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <EXTI15_10_IRQHandler+0x6c>)
 80041ce:	f008 fd61 	bl	800cc94 <xTimerPendFunctionCallFromISR>
							  SL_WFX_RX_PACKET_AVAILABLE,
							  &xHigherPriorityTaskWoken);
  }

  HAL_GPIO_EXTI_IRQHandler(WFM_SPI_WIRQ_Pin);
 80041d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80041d6:	f001 f9a1 	bl	800551c <HAL_GPIO_EXTI_IRQHandler>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <EXTI15_10_IRQHandler+0x58>
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <EXTI15_10_IRQHandler+0x70>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy

}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013c00 	.word	0x40013c00
 80041fc:	200013d0 	.word	0x200013d0
 8004200:	2000150c 	.word	0x2000150c
 8004204:	0800a403 	.word	0x0800a403
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004210:	4802      	ldr	r0, [pc, #8]	; (800421c <DMA2_Stream0_IRQHandler+0x10>)
 8004212:	f000 fc97 	bl	8004b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004216:	bf00      	nop
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	200014a4 	.word	0x200014a4

08004220 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <DMA2_Stream2_IRQHandler+0x10>)
 8004226:	f000 fc8d 	bl	8004b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20001444 	.word	0x20001444

08004234 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <DMA2_Stream3_IRQHandler+0x10>)
 800423a:	f000 fc83 	bl	8004b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000a2c 	.word	0x20000a2c

08004248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
	return 1;
 800424c:	2301      	movs	r3, #1
}
 800424e:	4618      	mov	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <_kill>:

int _kill(int pid, int sig)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004262:	f017 f901 	bl	801b468 <__errno>
 8004266:	4603      	mov	r3, r0
 8004268:	2216      	movs	r2, #22
 800426a:	601a      	str	r2, [r3, #0]
	return -1;
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <_exit>:

void _exit (int status)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004280:	f04f 31ff 	mov.w	r1, #4294967295
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ffe7 	bl	8004258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800428a:	e7fe      	b.n	800428a <_exit+0x12>

0800428c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e00a      	b.n	80042b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800429e:	f3af 8000 	nop.w
 80042a2:	4601      	mov	r1, r0
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	60ba      	str	r2, [r7, #8]
 80042aa:	b2ca      	uxtb	r2, r1
 80042ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3301      	adds	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	dbf0      	blt.n	800429e <_read+0x12>
	}

return len;
 80042bc:	687b      	ldr	r3, [r7, #4]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b086      	sub	sp, #24
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
 80042d6:	e009      	b.n	80042ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	60ba      	str	r2, [r7, #8]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fbaf 	bl	8003a44 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	3301      	adds	r3, #1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dbf1      	blt.n	80042d8 <_write+0x12>
	}
	return len;
 80042f4:	687b      	ldr	r3, [r7, #4]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <_close>:

int _close(int file)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	return -1;
 8004306:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004326:	605a      	str	r2, [r3, #4]
	return 0;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <_isatty>:

int _isatty(int file)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
	return 1;
 800433e:	2301      	movs	r3, #1
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
	return 0;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <_sbrk+0x5c>)
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <_sbrk+0x60>)
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800437c:	4b13      	ldr	r3, [pc, #76]	; (80043cc <_sbrk+0x64>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d102      	bne.n	800438a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <_sbrk+0x64>)
 8004386:	4a12      	ldr	r2, [pc, #72]	; (80043d0 <_sbrk+0x68>)
 8004388:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <_sbrk+0x64>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4413      	add	r3, r2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	429a      	cmp	r2, r3
 8004396:	d207      	bcs.n	80043a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004398:	f017 f866 	bl	801b468 <__errno>
 800439c:	4603      	mov	r3, r0
 800439e:	220c      	movs	r2, #12
 80043a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043a2:	f04f 33ff 	mov.w	r3, #4294967295
 80043a6:	e009      	b.n	80043bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043a8:	4b08      	ldr	r3, [pc, #32]	; (80043cc <_sbrk+0x64>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <_sbrk+0x64>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	4a05      	ldr	r2, [pc, #20]	; (80043cc <_sbrk+0x64>)
 80043b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ba:	68fb      	ldr	r3, [r7, #12]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20020000 	.word	0x20020000
 80043c8:	00000400 	.word	0x00000400
 80043cc:	20000a8c 	.word	0x20000a8c
 80043d0:	20014058 	.word	0x20014058

080043d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SystemInit+0x20>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043de:	4a05      	ldr	r2, [pc, #20]	; (80043f4 <SystemInit+0x20>)
 80043e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043e8:	bf00      	nop
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	e000ed00 	.word	0xe000ed00

080043f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004430 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043fc:	480d      	ldr	r0, [pc, #52]	; (8004434 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043fe:	490e      	ldr	r1, [pc, #56]	; (8004438 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004400:	4a0e      	ldr	r2, [pc, #56]	; (800443c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004404:	e002      	b.n	800440c <LoopCopyDataInit>

08004406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800440a:	3304      	adds	r3, #4

0800440c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800440c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800440e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004410:	d3f9      	bcc.n	8004406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004412:	4a0b      	ldr	r2, [pc, #44]	; (8004440 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004414:	4c0b      	ldr	r4, [pc, #44]	; (8004444 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004418:	e001      	b.n	800441e <LoopFillZerobss>

0800441a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800441a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800441c:	3204      	adds	r2, #4

0800441e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800441e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004420:	d3fb      	bcc.n	800441a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004422:	f7ff ffd7 	bl	80043d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004426:	f017 f825 	bl	801b474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800442a:	f7ff f921 	bl	8003670 <main>
  bx  lr    
 800442e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004438:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 800443c:	0806cbf8 	.word	0x0806cbf8
  ldr r2, =_sbss
 8004440:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004444:	20014054 	.word	0x20014054

08004448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004448:	e7fe      	b.n	8004448 <ADC_IRQHandler>
	...

0800444c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <HAL_Init+0x40>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0d      	ldr	r2, [pc, #52]	; (800448c <HAL_Init+0x40>)
 8004456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <HAL_Init+0x40>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a0a      	ldr	r2, [pc, #40]	; (800448c <HAL_Init+0x40>)
 8004462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_Init+0x40>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a07      	ldr	r2, [pc, #28]	; (800448c <HAL_Init+0x40>)
 800446e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004474:	2003      	movs	r0, #3
 8004476:	f000 f973 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800447a:	200f      	movs	r0, #15
 800447c:	f000 f808 	bl	8004490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004480:	f7ff faf8 	bl	8003a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023c00 	.word	0x40023c00

08004490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_InitTick+0x54>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	4b12      	ldr	r3, [pc, #72]	; (80044e8 <HAL_InitTick+0x58>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	4619      	mov	r1, r3
 80044a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f999 	bl	80047e6 <HAL_SYSTICK_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e00e      	b.n	80044dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	d80a      	bhi.n	80044da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044c4:	2200      	movs	r2, #0
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295
 80044cc:	f000 f953 	bl	8004776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044d0:	4a06      	ldr	r2, [pc, #24]	; (80044ec <HAL_InitTick+0x5c>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	e000      	b.n	80044dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200000a0 	.word	0x200000a0
 80044e8:	200000a8 	.word	0x200000a8
 80044ec:	200000a4 	.word	0x200000a4

080044f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_IncTick+0x20>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_IncTick+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_IncTick+0x24>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	200000a8 	.word	0x200000a8
 8004514:	20000a90 	.word	0x20000a90

08004518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return uwTick;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_GetTick+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000a90 	.word	0x20000a90

08004530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7ff ffee 	bl	8004518 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d005      	beq.n	8004556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_Delay+0x44>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004556:	bf00      	nop
 8004558:	f7ff ffde 	bl	8004518 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	429a      	cmp	r2, r3
 8004566:	d8f7      	bhi.n	8004558 <HAL_Delay+0x28>
  {
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200000a8 	.word	0x200000a8

08004578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	60d3      	str	r3, [r2, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <__NVIC_GetPriorityGrouping+0x18>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0307 	and.w	r3, r3, #7
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db0b      	blt.n	8004606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <__NVIC_EnableIRQ+0x38>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2001      	movs	r0, #1
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e100 	.word	0xe000e100

08004618 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	2b00      	cmp	r3, #0
 8004628:	db12      	blt.n	8004650 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	490a      	ldr	r1, [pc, #40]	; (800465c <__NVIC_DisableIRQ+0x44>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2001      	movs	r0, #1
 800463a:	fa00 f202 	lsl.w	r2, r0, r2
 800463e:	3320      	adds	r3, #32
 8004640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004644:	f3bf 8f4f 	dsb	sy
}
 8004648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800464a:	f3bf 8f6f 	isb	sy
}
 800464e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	e000e100 	.word	0xe000e100

08004660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	; (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf28      	it	cs
 80046d2:	2304      	movcs	r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d902      	bls.n	80046e4 <NVIC_EncodePriority+0x30>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b03      	subs	r3, #3
 80046e2:	e000      	b.n	80046e6 <NVIC_EncodePriority+0x32>
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43d9      	mvns	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	4313      	orrs	r3, r2
         );
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d301      	bcc.n	8004732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <SysTick_Config+0x40>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473a:	210f      	movs	r1, #15
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f7ff ff8e 	bl	8004660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <SysTick_Config+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <SysTick_Config+0x40>)
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000e010 	.word	0xe000e010

08004760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff05 	bl	8004578 <__NVIC_SetPriorityGrouping>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004788:	f7ff ff1a 	bl	80045c0 <__NVIC_GetPriorityGrouping>
 800478c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff ff8e 	bl	80046b4 <NVIC_EncodePriority>
 8004798:	4602      	mov	r2, r0
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff5d 	bl	8004660 <__NVIC_SetPriority>
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff0d 	bl	80045dc <__NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	4603      	mov	r3, r0
 80047d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80047d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff1d 	bl	8004618 <__NVIC_DisableIRQ>
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff ff94 	bl	800471c <SysTick_Config>
 80047f4:	4603      	mov	r3, r0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d106      	bne.n	800481c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004814:	f043 0304 	orr.w	r3, r3, #4
 8004818:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800481a:	e005      	b.n	8004828 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a04      	ldr	r2, [pc, #16]	; (8004834 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000e010 	.word	0xe000e010

08004838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004844:	f7ff fe68 	bl	8004518 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e099      	b.n	8004988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004874:	e00f      	b.n	8004896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004876:	f7ff fe4f 	bl	8004518 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b05      	cmp	r3, #5
 8004882:	d908      	bls.n	8004896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e078      	b.n	8004988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e8      	bne.n	8004876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4b38      	ldr	r3, [pc, #224]	; (8004990 <HAL_DMA_Init+0x158>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d107      	bne.n	8004900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	4313      	orrs	r3, r2
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0307 	bic.w	r3, r3, #7
 8004916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	2b04      	cmp	r3, #4
 8004928:	d117      	bne.n	800495a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 faef 	bl	8004f20 <DMA_CheckFifoParam>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004956:	2301      	movs	r3, #1
 8004958:	e016      	b.n	8004988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 faa6 	bl	8004eb4 <DMA_CalcBaseAndBitshift>
 8004968:	4603      	mov	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004970:	223f      	movs	r2, #63	; 0x3f
 8004972:	409a      	lsls	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	f010803f 	.word	0xf010803f

08004994 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e050      	b.n	8004a48 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d101      	bne.n	80049b6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	e048      	b.n	8004a48 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2200      	movs	r2, #0
 80049d4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2221      	movs	r2, #33	; 0x21
 80049f4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 fa5c 	bl	8004eb4 <DMA_CalcBaseAndBitshift>
 80049fc:	4603      	mov	r3, r0
 80049fe:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a28:	223f      	movs	r2, #63	; 0x3f
 8004a2a:	409a      	lsls	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_DMA_Start_IT+0x26>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e040      	b.n	8004af8 <HAL_DMA_Start_IT+0xa8>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d12f      	bne.n	8004aea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2202      	movs	r2, #2
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f9da 	bl	8004e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa8:	223f      	movs	r2, #63	; 0x3f
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0216 	orr.w	r2, r2, #22
 8004abe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0208 	orr.w	r2, r2, #8
 8004ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	e005      	b.n	8004af6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
 8004af4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d004      	beq.n	8004b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e00c      	b.n	8004b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2205      	movs	r2, #5
 8004b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0201 	bic.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b50:	4b8e      	ldr	r3, [pc, #568]	; (8004d8c <HAL_DMA_IRQHandler+0x248>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a8e      	ldr	r2, [pc, #568]	; (8004d90 <HAL_DMA_IRQHandler+0x24c>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0a9b      	lsrs	r3, r3, #10
 8004b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6e:	2208      	movs	r2, #8
 8004b70:	409a      	lsls	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01a      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	2208      	movs	r2, #8
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba8:	f043 0201 	orr.w	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	409a      	lsls	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d012      	beq.n	8004be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0202 	orr.w	r2, r3, #2
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bea:	2204      	movs	r2, #4
 8004bec:	409a      	lsls	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	2204      	movs	r2, #4
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	f043 0204 	orr.w	r2, r3, #4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	2210      	movs	r2, #16
 8004c22:	409a      	lsls	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d043      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d03c      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3e:	2210      	movs	r2, #16
 8004c40:	409a      	lsls	r2, r3
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	609a      	str	r2, [r3, #8]

      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d024      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
 8004c72:	e01f      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01b      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e016      	b.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d107      	bne.n	8004ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0208 	bic.w	r2, r2, #8
 8004ca2:	601a      	str	r2, [r3, #0]
        }

        if(hdma->XferHalfCpltCallback != NULL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	2220      	movs	r2, #32
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 808f 	beq.w	8004de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f000 8087 	beq.w	8004de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cda:	2220      	movs	r2, #32
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d136      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0216 	bic.w	r2, r2, #22
 8004cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <HAL_DMA_IRQHandler+0x1da>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 0208 	bic.w	r2, r2, #8
 8004d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d32:	223f      	movs	r2, #63	; 0x3f
 8004d34:	409a      	lsls	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d07e      	beq.n	8004e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	4798      	blx	r3
        }
        return;
 8004d5a:	e079      	b.n	8004e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d01d      	beq.n	8004da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d031      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
 8004d88:	e02c      	b.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
 8004d8a:	bf00      	nop
 8004d8c:	200000a0 	.word	0x200000a0
 8004d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d023      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
 8004da4:	e01e      	b.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10f      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0210 	bic.w	r2, r2, #16
 8004dc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d032      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2205      	movs	r2, #5
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d307      	bcc.n	8004e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1f2      	bne.n	8004e10 <HAL_DMA_IRQHandler+0x2cc>
 8004e2a:	e000      	b.n	8004e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d005      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
 8004e4e:	e000      	b.n	8004e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e50:	bf00      	nop
    }
  }
}
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d108      	bne.n	8004e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e96:	e007      	b.n	8004ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	3b10      	subs	r3, #16
 8004ec4:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <DMA_CalcBaseAndBitshift+0x64>)
 8004ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004ece:	4a13      	ldr	r2, [pc, #76]	; (8004f1c <DMA_CalcBaseAndBitshift+0x68>)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d909      	bls.n	8004ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ef4:	e007      	b.n	8004f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	aaaaaaab 	.word	0xaaaaaaab
 8004f1c:	08020a24 	.word	0x08020a24

08004f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d11f      	bne.n	8004f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d856      	bhi.n	8004fee <DMA_CheckFifoParam+0xce>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <DMA_CheckFifoParam+0x28>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f59 	.word	0x08004f59
 8004f4c:	08004f6b 	.word	0x08004f6b
 8004f50:	08004f59 	.word	0x08004f59
 8004f54:	08004fef 	.word	0x08004fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d046      	beq.n	8004ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f68:	e043      	b.n	8004ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f72:	d140      	bne.n	8004ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f78:	e03d      	b.n	8004ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d121      	bne.n	8004fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d837      	bhi.n	8004ffa <DMA_CheckFifoParam+0xda>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <DMA_CheckFifoParam+0x70>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fa1 	.word	0x08004fa1
 8004f94:	08004fa7 	.word	0x08004fa7
 8004f98:	08004fa1 	.word	0x08004fa1
 8004f9c:	08004fb9 	.word	0x08004fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e030      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d025      	beq.n	8004ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb6:	e022      	b.n	8004ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc0:	d11f      	bne.n	8005002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fc6:	e01c      	b.n	8005002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d903      	bls.n	8004fd6 <DMA_CheckFifoParam+0xb6>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d003      	beq.n	8004fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fd4:	e018      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fda:	e015      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	73fb      	strb	r3, [r7, #15]
      break;
 8004fec:	e00b      	b.n	8005006 <DMA_CheckFifoParam+0xe6>
      break;
 8004fee:	bf00      	nop
 8004ff0:	e00a      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
 8004ff4:	e008      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff6:	bf00      	nop
 8004ff8:	e006      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffa:	bf00      	nop
 8004ffc:	e004      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;
 8004ffe:	bf00      	nop
 8005000:	e002      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;   
 8005002:	bf00      	nop
 8005004:	e000      	b.n	8005008 <DMA_CheckFifoParam+0xe8>
      break;
 8005006:	bf00      	nop
    }
  } 
  
  return status; 
 8005008:	7bfb      	ldrb	r3, [r7, #15]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop

08005018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005018:	b480      	push	{r7}
 800501a:	b089      	sub	sp, #36	; 0x24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005022:	2300      	movs	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
 8005032:	e159      	b.n	80052e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005034:	2201      	movs	r2, #1
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4013      	ands	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	f040 8148 	bne.w	80052e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b01      	cmp	r3, #1
 800505c:	d005      	beq.n	800506a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005066:	2b02      	cmp	r3, #2
 8005068:	d130      	bne.n	80050cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	2203      	movs	r2, #3
 8005076:	fa02 f303 	lsl.w	r3, r2, r3
 800507a:	43db      	mvns	r3, r3
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	4013      	ands	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4313      	orrs	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80050a0:	2201      	movs	r2, #1
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	091b      	lsrs	r3, r3, #4
 80050b6:	f003 0201 	and.w	r2, r3, #1
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	fa02 f303 	lsl.w	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f003 0303 	and.w	r3, r3, #3
 80050d4:	2b03      	cmp	r3, #3
 80050d6:	d017      	beq.n	8005108 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	2203      	movs	r2, #3
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	43db      	mvns	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	4013      	ands	r3, r2
 80050ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4313      	orrs	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d123      	bne.n	800515c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	08da      	lsrs	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3208      	adds	r2, #8
 800511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	220f      	movs	r2, #15
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4313      	orrs	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	08da      	lsrs	r2, r3, #3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3208      	adds	r2, #8
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	2203      	movs	r2, #3
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	43db      	mvns	r3, r3
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4013      	ands	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 0203 	and.w	r2, r3, #3
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	fa02 f303 	lsl.w	r3, r2, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80a2 	beq.w	80052e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	4b57      	ldr	r3, [pc, #348]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	4a56      	ldr	r2, [pc, #344]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 80051a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051ac:	6453      	str	r3, [r2, #68]	; 0x44
 80051ae:	4b54      	ldr	r3, [pc, #336]	; (8005300 <HAL_GPIO_Init+0x2e8>)
 80051b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051ba:	4a52      	ldr	r2, [pc, #328]	; (8005304 <HAL_GPIO_Init+0x2ec>)
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	089b      	lsrs	r3, r3, #2
 80051c0:	3302      	adds	r3, #2
 80051c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	220f      	movs	r2, #15
 80051d2:	fa02 f303 	lsl.w	r3, r2, r3
 80051d6:	43db      	mvns	r3, r3
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4013      	ands	r3, r2
 80051dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a49      	ldr	r2, [pc, #292]	; (8005308 <HAL_GPIO_Init+0x2f0>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d019      	beq.n	800521a <HAL_GPIO_Init+0x202>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a48      	ldr	r2, [pc, #288]	; (800530c <HAL_GPIO_Init+0x2f4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_GPIO_Init+0x1fe>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a47      	ldr	r2, [pc, #284]	; (8005310 <HAL_GPIO_Init+0x2f8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00d      	beq.n	8005212 <HAL_GPIO_Init+0x1fa>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a46      	ldr	r2, [pc, #280]	; (8005314 <HAL_GPIO_Init+0x2fc>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d007      	beq.n	800520e <HAL_GPIO_Init+0x1f6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a45      	ldr	r2, [pc, #276]	; (8005318 <HAL_GPIO_Init+0x300>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d101      	bne.n	800520a <HAL_GPIO_Init+0x1f2>
 8005206:	2304      	movs	r3, #4
 8005208:	e008      	b.n	800521c <HAL_GPIO_Init+0x204>
 800520a:	2307      	movs	r3, #7
 800520c:	e006      	b.n	800521c <HAL_GPIO_Init+0x204>
 800520e:	2303      	movs	r3, #3
 8005210:	e004      	b.n	800521c <HAL_GPIO_Init+0x204>
 8005212:	2302      	movs	r3, #2
 8005214:	e002      	b.n	800521c <HAL_GPIO_Init+0x204>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <HAL_GPIO_Init+0x204>
 800521a:	2300      	movs	r3, #0
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f002 0203 	and.w	r2, r2, #3
 8005222:	0092      	lsls	r2, r2, #2
 8005224:	4093      	lsls	r3, r2
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4313      	orrs	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800522c:	4935      	ldr	r1, [pc, #212]	; (8005304 <HAL_GPIO_Init+0x2ec>)
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	089b      	lsrs	r3, r3, #2
 8005232:	3302      	adds	r3, #2
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800523a:	4b38      	ldr	r3, [pc, #224]	; (800531c <HAL_GPIO_Init+0x304>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	43db      	mvns	r3, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4013      	ands	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <HAL_GPIO_Init+0x304>)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005264:	4b2d      	ldr	r3, [pc, #180]	; (800531c <HAL_GPIO_Init+0x304>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d003      	beq.n	8005288 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005288:	4a24      	ldr	r2, [pc, #144]	; (800531c <HAL_GPIO_Init+0x304>)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800528e:	4b23      	ldr	r3, [pc, #140]	; (800531c <HAL_GPIO_Init+0x304>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	43db      	mvns	r3, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4013      	ands	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <HAL_GPIO_Init+0x304>)
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052b8:	4b18      	ldr	r3, [pc, #96]	; (800531c <HAL_GPIO_Init+0x304>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4013      	ands	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052dc:	4a0f      	ldr	r2, [pc, #60]	; (800531c <HAL_GPIO_Init+0x304>)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3301      	adds	r3, #1
 80052e6:	61fb      	str	r3, [r7, #28]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b0f      	cmp	r3, #15
 80052ec:	f67f aea2 	bls.w	8005034 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3724      	adds	r7, #36	; 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40023800 	.word	0x40023800
 8005304:	40013800 	.word	0x40013800
 8005308:	40020000 	.word	0x40020000
 800530c:	40020400 	.word	0x40020400
 8005310:	40020800 	.word	0x40020800
 8005314:	40020c00 	.word	0x40020c00
 8005318:	40021000 	.word	0x40021000
 800531c:	40013c00 	.word	0x40013c00

08005320 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800532a:	2300      	movs	r3, #0
 800532c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005336:	2300      	movs	r3, #0
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e0bb      	b.n	80054b4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800533c:	2201      	movs	r2, #1
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	fa02 f303 	lsl.w	r3, r2, r3
 8005344:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	429a      	cmp	r2, r3
 8005354:	f040 80ab 	bne.w	80054ae <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005358:	4a5c      	ldr	r2, [pc, #368]	; (80054cc <HAL_GPIO_DeInit+0x1ac>)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	3302      	adds	r3, #2
 8005360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005364:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	220f      	movs	r2, #15
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a54      	ldr	r2, [pc, #336]	; (80054d0 <HAL_GPIO_DeInit+0x1b0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d019      	beq.n	80053b6 <HAL_GPIO_DeInit+0x96>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a53      	ldr	r2, [pc, #332]	; (80054d4 <HAL_GPIO_DeInit+0x1b4>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_GPIO_DeInit+0x92>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a52      	ldr	r2, [pc, #328]	; (80054d8 <HAL_GPIO_DeInit+0x1b8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00d      	beq.n	80053ae <HAL_GPIO_DeInit+0x8e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a51      	ldr	r2, [pc, #324]	; (80054dc <HAL_GPIO_DeInit+0x1bc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d007      	beq.n	80053aa <HAL_GPIO_DeInit+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a50      	ldr	r2, [pc, #320]	; (80054e0 <HAL_GPIO_DeInit+0x1c0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <HAL_GPIO_DeInit+0x86>
 80053a2:	2304      	movs	r3, #4
 80053a4:	e008      	b.n	80053b8 <HAL_GPIO_DeInit+0x98>
 80053a6:	2307      	movs	r3, #7
 80053a8:	e006      	b.n	80053b8 <HAL_GPIO_DeInit+0x98>
 80053aa:	2303      	movs	r3, #3
 80053ac:	e004      	b.n	80053b8 <HAL_GPIO_DeInit+0x98>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e002      	b.n	80053b8 <HAL_GPIO_DeInit+0x98>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_GPIO_DeInit+0x98>
 80053b6:	2300      	movs	r3, #0
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	f002 0203 	and.w	r2, r2, #3
 80053be:	0092      	lsls	r2, r2, #2
 80053c0:	4093      	lsls	r3, r2
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d132      	bne.n	800542e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80053c8:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	43db      	mvns	r3, r3
 80053d0:	4944      	ldr	r1, [pc, #272]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80053d6:	4b43      	ldr	r3, [pc, #268]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053d8:	685a      	ldr	r2, [r3, #4]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	43db      	mvns	r3, r3
 80053de:	4941      	ldr	r1, [pc, #260]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80053e4:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053e6:	68da      	ldr	r2, [r3, #12]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	43db      	mvns	r3, r3
 80053ec:	493d      	ldr	r1, [pc, #244]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053ee:	4013      	ands	r3, r2
 80053f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80053f2:	4b3c      	ldr	r3, [pc, #240]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	43db      	mvns	r3, r3
 80053fa:	493a      	ldr	r1, [pc, #232]	; (80054e4 <HAL_GPIO_DeInit+0x1c4>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	220f      	movs	r2, #15
 800540a:	fa02 f303 	lsl.w	r3, r2, r3
 800540e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <HAL_GPIO_DeInit+0x1ac>)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	089b      	lsrs	r3, r3, #2
 8005416:	3302      	adds	r3, #2
 8005418:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	43da      	mvns	r2, r3
 8005420:	482a      	ldr	r0, [pc, #168]	; (80054cc <HAL_GPIO_DeInit+0x1ac>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	400a      	ands	r2, r1
 8005428:	3302      	adds	r3, #2
 800542a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2103      	movs	r1, #3
 8005438:	fa01 f303 	lsl.w	r3, r1, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	401a      	ands	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	220f      	movs	r2, #15
 800545a:	fa02 f303 	lsl.w	r3, r2, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	08d2      	lsrs	r2, r2, #3
 8005464:	4019      	ands	r1, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3208      	adds	r2, #8
 800546a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	2103      	movs	r1, #3
 8005478:	fa01 f303 	lsl.w	r3, r1, r3
 800547c:	43db      	mvns	r3, r3
 800547e:	401a      	ands	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	2101      	movs	r1, #1
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	43db      	mvns	r3, r3
 8005492:	401a      	ands	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	2103      	movs	r1, #3
 80054a2:	fa01 f303 	lsl.w	r3, r1, r3
 80054a6:	43db      	mvns	r3, r3
 80054a8:	401a      	ands	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	3301      	adds	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	f67f af40 	bls.w	800533c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40013800 	.word	0x40013800
 80054d0:	40020000 	.word	0x40020000
 80054d4:	40020400 	.word	0x40020400
 80054d8:	40020800 	.word	0x40020800
 80054dc:	40020c00 	.word	0x40020c00
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40013c00 	.word	0x40013c00

080054e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	807b      	strh	r3, [r7, #2]
 80054f4:	4613      	mov	r3, r2
 80054f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054f8:	787b      	ldrb	r3, [r7, #1]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054fe:	887a      	ldrh	r2, [r7, #2]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005504:	e003      	b.n	800550e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005506:	887b      	ldrh	r3, [r7, #2]
 8005508:	041a      	lsls	r2, r3, #16
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	619a      	str	r2, [r3, #24]
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005532:	4a05      	ldr	r2, [pc, #20]	; (8005548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f806 	bl	800554c <HAL_GPIO_EXTI_Callback>
  }
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40013c00 	.word	0x40013c00

0800554c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e267      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d075      	beq.n	800566e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005582:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b04      	cmp	r3, #4
 800558c:	d00c      	beq.n	80055a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800558e:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005596:	2b08      	cmp	r3, #8
 8005598:	d112      	bne.n	80055c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800559a:	4b82      	ldr	r3, [pc, #520]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055a6:	d10b      	bne.n	80055c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a8:	4b7e      	ldr	r3, [pc, #504]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05b      	beq.n	800566c <HAL_RCC_OscConfig+0x108>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d157      	bne.n	800566c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e242      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d106      	bne.n	80055d8 <HAL_RCC_OscConfig+0x74>
 80055ca:	4b76      	ldr	r3, [pc, #472]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a75      	ldr	r2, [pc, #468]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	e01d      	b.n	8005614 <HAL_RCC_OscConfig+0xb0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055e0:	d10c      	bne.n	80055fc <HAL_RCC_OscConfig+0x98>
 80055e2:	4b70      	ldr	r3, [pc, #448]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6f      	ldr	r2, [pc, #444]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4b6d      	ldr	r3, [pc, #436]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6c      	ldr	r2, [pc, #432]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	e00b      	b.n	8005614 <HAL_RCC_OscConfig+0xb0>
 80055fc:	4b69      	ldr	r3, [pc, #420]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a68      	ldr	r2, [pc, #416]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	4b66      	ldr	r3, [pc, #408]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 800560e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d013      	beq.n	8005644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fe ff7c 	bl	8004518 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005624:	f7fe ff78 	bl	8004518 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b64      	cmp	r3, #100	; 0x64
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e207      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005636:	4b5b      	ldr	r3, [pc, #364]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0f0      	beq.n	8005624 <HAL_RCC_OscConfig+0xc0>
 8005642:	e014      	b.n	800566e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005644:	f7fe ff68 	bl	8004518 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800564c:	f7fe ff64 	bl	8004518 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e1f3      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800565e:	4b51      	ldr	r3, [pc, #324]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0xe8>
 800566a:	e000      	b.n	800566e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d063      	beq.n	8005742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800567a:	4b4a      	ldr	r3, [pc, #296]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 030c 	and.w	r3, r3, #12
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00b      	beq.n	800569e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800568e:	2b08      	cmp	r3, #8
 8005690:	d11c      	bne.n	80056cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005692:	4b44      	ldr	r3, [pc, #272]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d116      	bne.n	80056cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569e:	4b41      	ldr	r3, [pc, #260]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_RCC_OscConfig+0x152>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d001      	beq.n	80056b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e1c7      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b6:	4b3b      	ldr	r3, [pc, #236]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4937      	ldr	r1, [pc, #220]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ca:	e03a      	b.n	8005742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d020      	beq.n	8005716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056d4:	4b34      	ldr	r3, [pc, #208]	; (80057a8 <HAL_RCC_OscConfig+0x244>)
 80056d6:	2201      	movs	r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056da:	f7fe ff1d 	bl	8004518 <HAL_GetTick>
 80056de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056e2:	f7fe ff19 	bl	8004518 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e1a8      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056f4:	4b2b      	ldr	r3, [pc, #172]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d0f0      	beq.n	80056e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005700:	4b28      	ldr	r3, [pc, #160]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4925      	ldr	r1, [pc, #148]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]
 8005714:	e015      	b.n	8005742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005716:	4b24      	ldr	r3, [pc, #144]	; (80057a8 <HAL_RCC_OscConfig+0x244>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fe fefc 	bl	8004518 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005724:	f7fe fef8 	bl	8004518 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e187      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005736:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f0      	bne.n	8005724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d036      	beq.n	80057bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <HAL_RCC_OscConfig+0x248>)
 8005758:	2201      	movs	r2, #1
 800575a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800575c:	f7fe fedc 	bl	8004518 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005764:	f7fe fed8 	bl	8004518 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e167      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <HAL_RCC_OscConfig+0x240>)
 8005778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0f0      	beq.n	8005764 <HAL_RCC_OscConfig+0x200>
 8005782:	e01b      	b.n	80057bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005784:	4b09      	ldr	r3, [pc, #36]	; (80057ac <HAL_RCC_OscConfig+0x248>)
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578a:	f7fe fec5 	bl	8004518 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005790:	e00e      	b.n	80057b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005792:	f7fe fec1 	bl	8004518 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d907      	bls.n	80057b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e150      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
 80057a4:	40023800 	.word	0x40023800
 80057a8:	42470000 	.word	0x42470000
 80057ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057b0:	4b88      	ldr	r3, [pc, #544]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80057b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ea      	bne.n	8005792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 8097 	beq.w	80058f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ca:	2300      	movs	r3, #0
 80057cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ce:	4b81      	ldr	r3, [pc, #516]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	4b7d      	ldr	r3, [pc, #500]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	4a7c      	ldr	r2, [pc, #496]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ea:	4b7a      	ldr	r3, [pc, #488]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fa:	4b77      	ldr	r3, [pc, #476]	; (80059d8 <HAL_RCC_OscConfig+0x474>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005806:	4b74      	ldr	r3, [pc, #464]	; (80059d8 <HAL_RCC_OscConfig+0x474>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a73      	ldr	r2, [pc, #460]	; (80059d8 <HAL_RCC_OscConfig+0x474>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fe fe81 	bl	8004518 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fe fe7d 	bl	8004518 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e10c      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800582c:	4b6a      	ldr	r3, [pc, #424]	; (80059d8 <HAL_RCC_OscConfig+0x474>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d106      	bne.n	800584e <HAL_RCC_OscConfig+0x2ea>
 8005840:	4b64      	ldr	r3, [pc, #400]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	4a63      	ldr	r2, [pc, #396]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	6713      	str	r3, [r2, #112]	; 0x70
 800584c:	e01c      	b.n	8005888 <HAL_RCC_OscConfig+0x324>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b05      	cmp	r3, #5
 8005854:	d10c      	bne.n	8005870 <HAL_RCC_OscConfig+0x30c>
 8005856:	4b5f      	ldr	r3, [pc, #380]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a5e      	ldr	r2, [pc, #376]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 800585c:	f043 0304 	orr.w	r3, r3, #4
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
 8005862:	4b5c      	ldr	r3, [pc, #368]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	4a5b      	ldr	r2, [pc, #364]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6713      	str	r3, [r2, #112]	; 0x70
 800586e:	e00b      	b.n	8005888 <HAL_RCC_OscConfig+0x324>
 8005870:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	4a57      	ldr	r2, [pc, #348]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	6713      	str	r3, [r2, #112]	; 0x70
 800587c:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 800587e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005880:	4a54      	ldr	r2, [pc, #336]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005882:	f023 0304 	bic.w	r3, r3, #4
 8005886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d015      	beq.n	80058bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005890:	f7fe fe42 	bl	8004518 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005896:	e00a      	b.n	80058ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005898:	f7fe fe3e 	bl	8004518 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e0cb      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ae:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0ee      	beq.n	8005898 <HAL_RCC_OscConfig+0x334>
 80058ba:	e014      	b.n	80058e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058bc:	f7fe fe2c 	bl	8004518 <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058c2:	e00a      	b.n	80058da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058c4:	f7fe fe28 	bl	8004518 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e0b5      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058da:	4b3e      	ldr	r3, [pc, #248]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80058dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1ee      	bne.n	80058c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058e6:	7dfb      	ldrb	r3, [r7, #23]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d105      	bne.n	80058f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ec:	4b39      	ldr	r3, [pc, #228]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	4a38      	ldr	r2, [pc, #224]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 80a1 	beq.w	8005a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005902:	4b34      	ldr	r3, [pc, #208]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b08      	cmp	r3, #8
 800590c:	d05c      	beq.n	80059c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b02      	cmp	r3, #2
 8005914:	d141      	bne.n	800599a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005916:	4b31      	ldr	r3, [pc, #196]	; (80059dc <HAL_RCC_OscConfig+0x478>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800591c:	f7fe fdfc 	bl	8004518 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005924:	f7fe fdf8 	bl	8004518 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e087      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f0      	bne.n	8005924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	019b      	lsls	r3, r3, #6
 8005952:	431a      	orrs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	3b01      	subs	r3, #1
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	431a      	orrs	r2, r3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	061b      	lsls	r3, r3, #24
 8005966:	491b      	ldr	r1, [pc, #108]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 8005968:	4313      	orrs	r3, r2
 800596a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <HAL_RCC_OscConfig+0x478>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7fe fdd1 	bl	8004518 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597a:	f7fe fdcd 	bl	8004518 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e05c      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x416>
 8005998:	e054      	b.n	8005a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800599a:	4b10      	ldr	r3, [pc, #64]	; (80059dc <HAL_RCC_OscConfig+0x478>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fe fdba 	bl	8004518 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fe fdb6 	bl	8004518 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e045      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_RCC_OscConfig+0x470>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x444>
 80059c6:	e03d      	b.n	8005a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e038      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40007000 	.word	0x40007000
 80059dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x4ec>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d028      	beq.n	8005a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d121      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d11a      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d001      	beq.n	8005a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e000      	b.n	8005a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800

08005a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0cc      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a68:	4b68      	ldr	r3, [pc, #416]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d90c      	bls.n	8005a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b65      	ldr	r3, [pc, #404]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0b8      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d020      	beq.n	8005ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aa8:	4b59      	ldr	r3, [pc, #356]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	4a58      	ldr	r2, [pc, #352]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ac0:	4b53      	ldr	r3, [pc, #332]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	4a52      	ldr	r2, [pc, #328]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005acc:	4b50      	ldr	r3, [pc, #320]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	494d      	ldr	r1, [pc, #308]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d044      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d107      	bne.n	8005b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af2:	4b47      	ldr	r3, [pc, #284]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d119      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e07f      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d107      	bne.n	8005b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b12:	4b3f      	ldr	r3, [pc, #252]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e06f      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b22:	4b3b      	ldr	r3, [pc, #236]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e067      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b32:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f023 0203 	bic.w	r2, r3, #3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4934      	ldr	r1, [pc, #208]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b44:	f7fe fce8 	bl	8004518 <HAL_GetTick>
 8005b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b4a:	e00a      	b.n	8005b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b4c:	f7fe fce4 	bl	8004518 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e04f      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b62:	4b2b      	ldr	r3, [pc, #172]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 020c 	and.w	r2, r3, #12
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1eb      	bne.n	8005b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b74:	4b25      	ldr	r3, [pc, #148]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d20c      	bcs.n	8005b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b82:	4b22      	ldr	r3, [pc, #136]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <HAL_RCC_ClockConfig+0x1b8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e032      	b.n	8005c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d008      	beq.n	8005bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	4916      	ldr	r1, [pc, #88]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d009      	beq.n	8005bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bc6:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	490e      	ldr	r1, [pc, #56]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bda:	f000 f821 	bl	8005c20 <HAL_RCC_GetSysClockFreq>
 8005bde:	4602      	mov	r2, r0
 8005be0:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	490a      	ldr	r1, [pc, #40]	; (8005c14 <HAL_RCC_ClockConfig+0x1c0>)
 8005bec:	5ccb      	ldrb	r3, [r1, r3]
 8005bee:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <HAL_RCC_ClockConfig+0x1c8>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe fc48 	bl	8004490 <HAL_InitTick>

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	40023c00 	.word	0x40023c00
 8005c10:	40023800 	.word	0x40023800
 8005c14:	08020a0c 	.word	0x08020a0c
 8005c18:	200000a0 	.word	0x200000a0
 8005c1c:	200000a4 	.word	0x200000a4

08005c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c24:	b094      	sub	sp, #80	; 0x50
 8005c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c30:	2300      	movs	r3, #0
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c38:	4b79      	ldr	r3, [pc, #484]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 030c 	and.w	r3, r3, #12
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d00d      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x40>
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	f200 80e1 	bhi.w	8005e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_RCC_GetSysClockFreq+0x34>
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	d003      	beq.n	8005c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c52:	e0db      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c54:	4b73      	ldr	r3, [pc, #460]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005c58:	e0db      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c5a:	4b73      	ldr	r3, [pc, #460]	; (8005e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8005c5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c5e:	e0d8      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c60:	4b6f      	ldr	r3, [pc, #444]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d063      	beq.n	8005d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c76:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	099b      	lsrs	r3, r3, #6
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c92:	4622      	mov	r2, r4
 8005c94:	462b      	mov	r3, r5
 8005c96:	f04f 0000 	mov.w	r0, #0
 8005c9a:	f04f 0100 	mov.w	r1, #0
 8005c9e:	0159      	lsls	r1, r3, #5
 8005ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ca4:	0150      	lsls	r0, r2, #5
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4621      	mov	r1, r4
 8005cac:	1a51      	subs	r1, r2, r1
 8005cae:	6139      	str	r1, [r7, #16]
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005cc4:	4659      	mov	r1, fp
 8005cc6:	018b      	lsls	r3, r1, #6
 8005cc8:	4651      	mov	r1, sl
 8005cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cce:	4651      	mov	r1, sl
 8005cd0:	018a      	lsls	r2, r1, #6
 8005cd2:	4651      	mov	r1, sl
 8005cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8005cd8:	4659      	mov	r1, fp
 8005cda:	eb63 0901 	sbc.w	r9, r3, r1
 8005cde:	f04f 0200 	mov.w	r2, #0
 8005ce2:	f04f 0300 	mov.w	r3, #0
 8005ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cf2:	4690      	mov	r8, r2
 8005cf4:	4699      	mov	r9, r3
 8005cf6:	4623      	mov	r3, r4
 8005cf8:	eb18 0303 	adds.w	r3, r8, r3
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	462b      	mov	r3, r5
 8005d00:	eb49 0303 	adc.w	r3, r9, r3
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d12:	4629      	mov	r1, r5
 8005d14:	024b      	lsls	r3, r1, #9
 8005d16:	4621      	mov	r1, r4
 8005d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	024a      	lsls	r2, r1, #9
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	2200      	movs	r2, #0
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d30:	f7fa ff52 	bl	8000bd8 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d3c:	e058      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d3e:	4b38      	ldr	r3, [pc, #224]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	099b      	lsrs	r3, r3, #6
 8005d44:	2200      	movs	r2, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	4611      	mov	r1, r2
 8005d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d4e:	623b      	str	r3, [r7, #32]
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	; 0x24
 8005d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	f04f 0000 	mov.w	r0, #0
 8005d60:	f04f 0100 	mov.w	r1, #0
 8005d64:	0159      	lsls	r1, r3, #5
 8005d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d6a:	0150      	lsls	r0, r2, #5
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4641      	mov	r1, r8
 8005d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005d76:	4649      	mov	r1, r9
 8005d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005d90:	ebb2 040a 	subs.w	r4, r2, sl
 8005d94:	eb63 050b 	sbc.w	r5, r3, fp
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	00eb      	lsls	r3, r5, #3
 8005da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da6:	00e2      	lsls	r2, r4, #3
 8005da8:	4614      	mov	r4, r2
 8005daa:	461d      	mov	r5, r3
 8005dac:	4643      	mov	r3, r8
 8005dae:	18e3      	adds	r3, r4, r3
 8005db0:	603b      	str	r3, [r7, #0]
 8005db2:	464b      	mov	r3, r9
 8005db4:	eb45 0303 	adc.w	r3, r5, r3
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	028b      	lsls	r3, r1, #10
 8005dca:	4621      	mov	r1, r4
 8005dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	028a      	lsls	r2, r1, #10
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dda:	2200      	movs	r2, #0
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	61fa      	str	r2, [r7, #28]
 8005de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de4:	f7fa fef8 	bl	8000bd8 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4613      	mov	r3, r2
 8005dee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	0c1b      	lsrs	r3, r3, #16
 8005df6:	f003 0303 	and.w	r3, r3, #3
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005e00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e0a:	e002      	b.n	8005e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3750      	adds	r7, #80	; 0x50
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e1e:	bf00      	nop
 8005e20:	40023800 	.word	0x40023800
 8005e24:	00f42400 	.word	0x00f42400
 8005e28:	007a1200 	.word	0x007a1200

08005e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e30:	4b03      	ldr	r3, [pc, #12]	; (8005e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e32:	681b      	ldr	r3, [r3, #0]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	200000a0 	.word	0x200000a0

08005e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e48:	f7ff fff0 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	0a9b      	lsrs	r3, r3, #10
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	4903      	ldr	r1, [pc, #12]	; (8005e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e5a:	5ccb      	ldrb	r3, [r1, r3]
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	40023800 	.word	0x40023800
 8005e68:	08020a1c 	.word	0x08020a1c

08005e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e70:	f7ff ffdc 	bl	8005e2c <HAL_RCC_GetHCLKFreq>
 8005e74:	4602      	mov	r2, r0
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	0b5b      	lsrs	r3, r3, #13
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	4903      	ldr	r1, [pc, #12]	; (8005e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e82:	5ccb      	ldrb	r3, [r1, r3]
 8005e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	08020a1c 	.word	0x08020a1c

08005e94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e07b      	b.n	8005f9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d108      	bne.n	8005ec0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb6:	d009      	beq.n	8005ecc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	61da      	str	r2, [r3, #28]
 8005ebe:	e005      	b.n	8005ecc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7fd fe16 	bl	8003b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a1b      	ldr	r3, [r3, #32]
 8005f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f50:	ea42 0103 	orr.w	r1, r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	0c1b      	lsrs	r3, r3, #16
 8005f6a:	f003 0104 	and.w	r1, r3, #4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	f003 0210 	and.w	r2, r3, #16
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e01a      	b.n	8005fee <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fce:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7fd ffad 	bl	8003f30 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b088      	sub	sp, #32
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	603b      	str	r3, [r7, #0]
 8006002:	4613      	mov	r3, r2
 8006004:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_SPI_Transmit+0x22>
 8006014:	2302      	movs	r3, #2
 8006016:	e126      	b.n	8006266 <HAL_SPI_Transmit+0x270>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006020:	f7fe fa7a 	bl	8004518 <HAL_GetTick>
 8006024:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b01      	cmp	r3, #1
 8006034:	d002      	beq.n	800603c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006036:	2302      	movs	r3, #2
 8006038:	77fb      	strb	r3, [r7, #31]
    goto error;
 800603a:	e10b      	b.n	8006254 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <HAL_SPI_Transmit+0x52>
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800604c:	e102      	b.n	8006254 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2203      	movs	r2, #3
 8006052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	88fa      	ldrh	r2, [r7, #6]
 8006066:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006094:	d10f      	bne.n	80060b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c0:	2b40      	cmp	r3, #64	; 0x40
 80060c2:	d007      	beq.n	80060d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060dc:	d14b      	bne.n	8006176 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <HAL_SPI_Transmit+0xf6>
 80060e6:	8afb      	ldrh	r3, [r7, #22]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d13e      	bne.n	800616a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	881a      	ldrh	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	1c9a      	adds	r2, r3, #2
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006110:	e02b      	b.n	800616a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b02      	cmp	r3, #2
 800611e:	d112      	bne.n	8006146 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006124:	881a      	ldrh	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	1c9a      	adds	r2, r3, #2
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800613a:	b29b      	uxth	r3, r3
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	86da      	strh	r2, [r3, #54]	; 0x36
 8006144:	e011      	b.n	800616a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006146:	f7fe f9e7 	bl	8004518 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d803      	bhi.n	800615e <HAL_SPI_Transmit+0x168>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d102      	bne.n	8006164 <HAL_SPI_Transmit+0x16e>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d102      	bne.n	800616a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006168:	e074      	b.n	8006254 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1ce      	bne.n	8006112 <HAL_SPI_Transmit+0x11c>
 8006174:	e04c      	b.n	8006210 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <HAL_SPI_Transmit+0x18e>
 800617e:	8afb      	ldrh	r3, [r7, #22]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d140      	bne.n	8006206 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80061aa:	e02c      	b.n	8006206 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d113      	bne.n	80061e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	86da      	strh	r2, [r3, #54]	; 0x36
 80061e0:	e011      	b.n	8006206 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061e2:	f7fe f999 	bl	8004518 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d803      	bhi.n	80061fa <HAL_SPI_Transmit+0x204>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f8:	d102      	bne.n	8006200 <HAL_SPI_Transmit+0x20a>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d102      	bne.n	8006206 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006204:	e026      	b.n	8006254 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1cd      	bne.n	80061ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fe07 	bl	8006e28 <SPI_EndRxTxTransaction>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	613b      	str	r3, [r7, #16]
 8006242:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006248:	2b00      	cmp	r3, #0
 800624a:	d002      	beq.n	8006252 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e000      	b.n	8006254 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006252:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006264:	7ffb      	ldrb	r3, [r7, #31]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3720      	adds	r7, #32
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	4613      	mov	r3, r2
 800627c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_SPI_Transmit_DMA+0x20>
 800628c:	2302      	movs	r3, #2
 800628e:	e09b      	b.n	80063c8 <HAL_SPI_Transmit_DMA+0x158>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d002      	beq.n	80062aa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062a8:	e089      	b.n	80063be <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Transmit_DMA+0x46>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062ba:	e080      	b.n	80063be <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2203      	movs	r2, #3
 80062c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68ba      	ldr	r2, [r7, #8]
 80062ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	88fa      	ldrh	r2, [r7, #6]
 80062d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d10f      	bne.n	8006324 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006312:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006322:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006328:	4a29      	ldr	r2, [pc, #164]	; (80063d0 <HAL_SPI_Transmit_DMA+0x160>)
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006330:	4a28      	ldr	r2, [pc, #160]	; (80063d4 <HAL_SPI_Transmit_DMA+0x164>)
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006338:	4a27      	ldr	r2, [pc, #156]	; (80063d8 <HAL_SPI_Transmit_DMA+0x168>)
 800633a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006340:	2200      	movs	r2, #0
 8006342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	4619      	mov	r1, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	330c      	adds	r3, #12
 8006354:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800635a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800635c:	f7fe fb78 	bl	8004a50 <HAL_DMA_Start_IT>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00c      	beq.n	8006380 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0210 	orr.w	r2, r3, #16
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800637e:	e01e      	b.n	80063be <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d007      	beq.n	800639e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0220 	orr.w	r2, r2, #32
 80063ac:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0202 	orr.w	r2, r2, #2
 80063bc:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80063c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	08006b91 	.word	0x08006b91
 80063d4:	080069b1 	.word	0x080069b1
 80063d8:	08006be5 	.word	0x08006be5

080063dc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	4613      	mov	r3, r2
 80063e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d110      	bne.n	8006418 <HAL_SPI_Receive_DMA+0x3c>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063fe:	d10b      	bne.n	8006418 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2204      	movs	r2, #4
 8006404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 f8a6 	bl	8006560 <HAL_SPI_TransmitReceive_DMA>
 8006414:	4603      	mov	r3, r0
 8006416:	e09b      	b.n	8006550 <HAL_SPI_Receive_DMA+0x174>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_SPI_Receive_DMA+0x4a>
 8006422:	2302      	movs	r3, #2
 8006424:	e094      	b.n	8006550 <HAL_SPI_Receive_DMA+0x174>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b01      	cmp	r3, #1
 8006438:	d002      	beq.n	8006440 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800643a:	2302      	movs	r3, #2
 800643c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800643e:	e082      	b.n	8006546 <HAL_SPI_Receive_DMA+0x16a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_SPI_Receive_DMA+0x70>
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006450:	e079      	b.n	8006546 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2204      	movs	r2, #4
 8006456:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	88fa      	ldrh	r2, [r7, #6]
 800646a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	88fa      	ldrh	r2, [r7, #6]
 8006470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006492:	d10f      	bne.n	80064b4 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064b2:	601a      	str	r2, [r3, #0]

//  /* Set the SPI RxDMA Half transfer complete callback */
//  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b8:	4a27      	ldr	r2, [pc, #156]	; (8006558 <HAL_SPI_Receive_DMA+0x17c>)
 80064ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <HAL_SPI_Receive_DMA+0x180>)
 80064c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c8:	2200      	movs	r2, #0
 80064ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	4619      	mov	r1, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80064e4:	f7fe fab4 	bl	8004a50 <HAL_DMA_Start_IT>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <HAL_SPI_Receive_DMA+0x12c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f2:	f043 0210 	orr.w	r2, r3, #16
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006506:	e01e      	b.n	8006546 <HAL_SPI_Receive_DMA+0x16a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d007      	beq.n	8006526 <HAL_SPI_Receive_DMA+0x14a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006524:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0220 	orr.w	r2, r2, #32
 8006534:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	08006a59 	.word	0x08006a59
 800655c:	08006be5 	.word	0x08006be5

08006560 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_SPI_TransmitReceive_DMA+0x20>
 800657c:	2302      	movs	r3, #2
 800657e:	e0e3      	b.n	8006748 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800658e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006596:	7dbb      	ldrb	r3, [r7, #22]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d00d      	beq.n	80065b8 <HAL_SPI_TransmitReceive_DMA+0x58>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d106      	bne.n	80065b2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d102      	bne.n	80065b2 <HAL_SPI_TransmitReceive_DMA+0x52>
 80065ac:	7dbb      	ldrb	r3, [r7, #22]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d002      	beq.n	80065b8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
 80065b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065b6:	e0c2      	b.n	800673e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d002      	beq.n	80065ca <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065ce:	e0b6      	b.n	800673e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d003      	beq.n	80065e4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2205      	movs	r2, #5
 80065e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	887a      	ldrh	r2, [r7, #2]
 80065f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	887a      	ldrh	r2, [r7, #2]
 80065fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	887a      	ldrh	r2, [r7, #2]
 8006606:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	887a      	ldrh	r2, [r7, #2]
 800660c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b04      	cmp	r3, #4
 8006624:	d108      	bne.n	8006638 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800662a:	4a49      	ldr	r2, [pc, #292]	; (8006750 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006632:	4a48      	ldr	r2, [pc, #288]	; (8006754 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8006634:	63da      	str	r2, [r3, #60]	; 0x3c
 8006636:	e007      	b.n	8006648 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800663c:	4a46      	ldr	r2, [pc, #280]	; (8006758 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800663e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006644:	4a45      	ldr	r2, [pc, #276]	; (800675c <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8006646:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800664c:	4a44      	ldr	r2, [pc, #272]	; (8006760 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800664e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006654:	2200      	movs	r2, #0
 8006656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	330c      	adds	r3, #12
 8006662:	4619      	mov	r1, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006668:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800666e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006670:	f7fe f9ee 	bl	8004a50 <HAL_DMA_Start_IT>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00c      	beq.n	8006694 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f043 0210 	orr.w	r2, r3, #16
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006692:	e054      	b.n	800673e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f042 0201 	orr.w	r2, r2, #1
 80066a2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066a8:	2200      	movs	r2, #0
 80066aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b0:	2200      	movs	r2, #0
 80066b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b8:	2200      	movs	r2, #0
 80066ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066c0:	2200      	movs	r2, #0
 80066c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	4619      	mov	r1, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80066dc:	f7fe f9b8 	bl	8004a50 <HAL_DMA_Start_IT>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ea:	f043 0210 	orr.w	r2, r3, #16
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80066fe:	e01e      	b.n	800673e <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d007      	beq.n	800671e <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800671c:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0220 	orr.w	r2, r2, #32
 800672c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0202 	orr.w	r2, r2, #2
 800673c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	08006bad 	.word	0x08006bad
 8006754:	08006a59 	.word	0x08006a59
 8006758:	08006bc9 	.word	0x08006bc9
 800675c:	08006b01 	.word	0x08006b01
 8006760:	08006be5 	.word	0x08006be5

08006764 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10e      	bne.n	80067a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
    return;
 80067a2:	e0ce      	b.n	8006942 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	f003 0302 	and.w	r3, r3, #2
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_SPI_IRQHandler+0x5e>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	4798      	blx	r3
    return;
 80067c0:	e0bf      	b.n	8006942 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f003 0320 	and.w	r3, r3, #32
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <HAL_SPI_IRQHandler+0x7e>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d105      	bne.n	80067e2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80b0 	beq.w	8006942 <HAL_SPI_IRQHandler+0x1de>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 80aa 	beq.w	8006942 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d023      	beq.n	8006840 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b03      	cmp	r3, #3
 8006802:	d011      	beq.n	8006828 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006808:	f043 0204 	orr.w	r2, r3, #4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006810:	2300      	movs	r3, #0
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	e00b      	b.n	8006840 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006828:	2300      	movs	r3, #0
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	693b      	ldr	r3, [r7, #16]
        return;
 800683e:	e080      	b.n	8006942 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d00c      	beq.n	8006898 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006882:	f043 0208 	orr.w	r2, r3, #8
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	2b00      	cmp	r3, #0
 800689e:	d04f      	beq.n	8006940 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068ae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d104      	bne.n	80068cc <HAL_SPI_IRQHandler+0x168>
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d034      	beq.n	8006936 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0203 	bic.w	r2, r2, #3
 80068da:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d011      	beq.n	8006908 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e8:	4a17      	ldr	r2, [pc, #92]	; (8006948 <HAL_SPI_IRQHandler+0x1e4>)
 80068ea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe f905 	bl	8004b00 <HAL_DMA_Abort_IT>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006900:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800690c:	2b00      	cmp	r3, #0
 800690e:	d016      	beq.n	800693e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006914:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <HAL_SPI_IRQHandler+0x1e4>)
 8006916:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe f8ef 	bl	8004b00 <HAL_DMA_Abort_IT>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800692c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006934:	e003      	b.n	800693e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f830 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800693c:	e000      	b.n	8006940 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800693e:	bf00      	nop
    return;
 8006940:	bf00      	nop
  }
}
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	08006c25 	.word	0x08006c25

0800694c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069be:	f7fd fdab 	bl	8004518 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d2:	d03b      	beq.n	8006a4c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 0220 	bic.w	r2, r2, #32
 80069e2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685a      	ldr	r2, [r3, #4]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f022 0202 	bic.w	r2, r2, #2
 80069f2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	2164      	movs	r1, #100	; 0x64
 80069f8:	6978      	ldr	r0, [r7, #20]
 80069fa:	f000 fa15 	bl	8006e28 <SPI_EndRxTxTransaction>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d005      	beq.n	8006a10 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2200      	movs	r2, #0
 8006a32:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006a44:	6978      	ldr	r0, [r7, #20]
 8006a46:	f7ff ffa9 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006a4a:	e002      	b.n	8006a52 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006a4c:	6978      	ldr	r0, [r7, #20]
 8006a4e:	f7fd fb0b 	bl	8004068 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a66:	f7fd fd57 	bl	8004518 <HAL_GetTick>
 8006a6a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a7a:	d03b      	beq.n	8006af4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0220 	bic.w	r2, r2, #32
 8006a8a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10d      	bne.n	8006ab0 <SPI_DMAReceiveCplt+0x58>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a9c:	d108      	bne.n	8006ab0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0203 	bic.w	r2, r2, #3
 8006aac:	605a      	str	r2, [r3, #4]
 8006aae:	e007      	b.n	8006ac0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0201 	bic.w	r2, r2, #1
 8006abe:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	2164      	movs	r1, #100	; 0x64
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f949 	bl	8006d5c <SPI_EndRxTransaction>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f7ff ff55 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006af2:	e002      	b.n	8006afa <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7fd fad9 	bl	80040ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b0e:	f7fd fd03 	bl	8004518 <HAL_GetTick>
 8006b12:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b22:	d02f      	beq.n	8006b84 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0220 	bic.w	r2, r2, #32
 8006b32:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	2164      	movs	r1, #100	; 0x64
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f975 	bl	8006e28 <SPI_EndRxTxTransaction>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f043 0220 	orr.w	r2, r3, #32
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0203 	bic.w	r2, r2, #3
 8006b5e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d003      	beq.n	8006b84 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f7ff ff0d 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006b82:	e002      	b.n	8006b8a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fee1 	bl	800694c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f7ff fede 	bl	8006960 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7ff feda 	bl	8006974 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f7ff fed6 	bl	8006988 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006bdc:	bf00      	nop
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0203 	bic.w	r2, r2, #3
 8006c00:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c06:	f043 0210 	orr.w	r2, r3, #16
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fec0 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff feac 	bl	800699c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006c44:	bf00      	nop
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c5c:	f7fd fc5c 	bl	8004518 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c64:	1a9b      	subs	r3, r3, r2
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	4413      	add	r3, r2
 8006c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c6c:	f7fd fc54 	bl	8004518 <HAL_GetTick>
 8006c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	015b      	lsls	r3, r3, #5
 8006c78:	0d1b      	lsrs	r3, r3, #20
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	fb02 f303 	mul.w	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c82:	e054      	b.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d050      	beq.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c8c:	f7fd fc44 	bl	8004518 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d902      	bls.n	8006ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d13d      	bne.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cba:	d111      	bne.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	d004      	beq.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cce:	d107      	bne.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ce8:	d10f      	bne.n	8006d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e017      	b.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	4013      	ands	r3, r2
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	bf0c      	ite	eq
 8006d3e:	2301      	moveq	r3, #1
 8006d40:	2300      	movne	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	461a      	mov	r2, r3
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d19b      	bne.n	8006c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200000a0 	.word	0x200000a0

08006d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d70:	d111      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7a:	d004      	beq.n	8006d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d107      	bne.n	8006d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d9e:	d12a      	bne.n	8006df6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da8:	d012      	beq.n	8006dd0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2200      	movs	r2, #0
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff ff49 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02d      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	f043 0220 	orr.w	r2, r3, #32
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e026      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2101      	movs	r1, #1
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff ff36 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01a      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f043 0220 	orr.w	r2, r3, #32
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e013      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2101      	movs	r1, #1
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f7ff ff23 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d007      	beq.n	8006e1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f043 0220 	orr.w	r2, r3, #32
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e000      	b.n	8006e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e34:	4b1b      	ldr	r3, [pc, #108]	; (8006ea4 <SPI_EndRxTxTransaction+0x7c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <SPI_EndRxTxTransaction+0x80>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	0d5b      	lsrs	r3, r3, #21
 8006e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006e44:	fb02 f303 	mul.w	r3, r2, r3
 8006e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e52:	d112      	bne.n	8006e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff fef4 	bl	8006c4c <SPI_WaitFlagStateUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d016      	beq.n	8006e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e00f      	b.n	8006e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d0f2      	beq.n	8006e7a <SPI_EndRxTxTransaction+0x52>
 8006e94:	e000      	b.n	8006e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8006e96:	bf00      	nop
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	200000a0 	.word	0x200000a0
 8006ea8:	165e9f81 	.word	0x165e9f81

08006eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e03f      	b.n	8006f3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fd f876 	bl	8003fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2224      	movs	r2, #36	; 0x24
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f929 	bl	8007148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691a      	ldr	r2, [r3, #16]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08a      	sub	sp, #40	; 0x28
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d17c      	bne.n	8007060 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_UART_Transmit+0x2c>
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e075      	b.n	8007062 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_UART_Transmit+0x3e>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e06e      	b.n	8007062 <HAL_UART_Transmit+0x11c>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2221      	movs	r2, #33	; 0x21
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f9a:	f7fd fabd 	bl	8004518 <HAL_GetTick>
 8006f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	88fa      	ldrh	r2, [r7, #6]
 8006fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fb4:	d108      	bne.n	8006fc8 <HAL_UART_Transmit+0x82>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d104      	bne.n	8006fc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	e003      	b.n	8006fd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fd8:	e02a      	b.n	8007030 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f840 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e036      	b.n	8007062 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3302      	adds	r3, #2
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e007      	b.n	8007022 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	3301      	adds	r3, #1
 8007020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007026:	b29b      	uxth	r3, r3
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007034:	b29b      	uxth	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1cf      	bne.n	8006fda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2200      	movs	r2, #0
 8007042:	2140      	movs	r1, #64	; 0x40
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f810 	bl	800706a <UART_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e006      	b.n	8007062 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	e000      	b.n	8007062 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007060:	2302      	movs	r3, #2
  }
}
 8007062:	4618      	mov	r0, r3
 8007064:	3720      	adds	r7, #32
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b090      	sub	sp, #64	; 0x40
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	603b      	str	r3, [r7, #0]
 8007076:	4613      	mov	r3, r2
 8007078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707a:	e050      	b.n	800711e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007082:	d04c      	beq.n	800711e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007086:	2b00      	cmp	r3, #0
 8007088:	d007      	beq.n	800709a <UART_WaitOnFlagUntilTimeout+0x30>
 800708a:	f7fd fa45 	bl	8004518 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007096:	429a      	cmp	r2, r3
 8007098:	d241      	bcs.n	800711e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	330c      	adds	r3, #12
 80070b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070ba:	637a      	str	r2, [r7, #52]	; 0x34
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c2:	e841 2300 	strex	r3, r2, [r1]
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1e5      	bne.n	800709a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3314      	adds	r3, #20
 80070d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	613b      	str	r3, [r7, #16]
   return(result);
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	f023 0301 	bic.w	r3, r3, #1
 80070e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3314      	adds	r3, #20
 80070ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ee:	623a      	str	r2, [r7, #32]
 80070f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	69f9      	ldr	r1, [r7, #28]
 80070f4:	6a3a      	ldr	r2, [r7, #32]
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e5      	bne.n	80070ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2220      	movs	r2, #32
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e00f      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4013      	ands	r3, r2
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	429a      	cmp	r2, r3
 800712c:	bf0c      	ite	eq
 800712e:	2301      	moveq	r3, #1
 8007130:	2300      	movne	r3, #0
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	79fb      	ldrb	r3, [r7, #7]
 8007138:	429a      	cmp	r2, r3
 800713a:	d09f      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3740      	adds	r7, #64	; 0x40
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800714c:	b0c0      	sub	sp, #256	; 0x100
 800714e:	af00      	add	r7, sp, #0
 8007150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	ea40 0301 	orr.w	r3, r0, r1
 8007170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	431a      	orrs	r2, r3
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	431a      	orrs	r2, r3
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071a0:	f021 010c 	bic.w	r1, r1, #12
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071ae:	430b      	orrs	r3, r1
 80071b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80071be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c2:	6999      	ldr	r1, [r3, #24]
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	ea40 0301 	orr.w	r3, r0, r1
 80071ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4b8f      	ldr	r3, [pc, #572]	; (8007414 <UART_SetConfig+0x2cc>)
 80071d8:	429a      	cmp	r2, r3
 80071da:	d005      	beq.n	80071e8 <UART_SetConfig+0xa0>
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b8d      	ldr	r3, [pc, #564]	; (8007418 <UART_SetConfig+0x2d0>)
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d104      	bne.n	80071f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071e8:	f7fe fe40 	bl	8005e6c <HAL_RCC_GetPCLK2Freq>
 80071ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071f0:	e003      	b.n	80071fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071f2:	f7fe fe27 	bl	8005e44 <HAL_RCC_GetPCLK1Freq>
 80071f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007204:	f040 810c 	bne.w	8007420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800721a:	4622      	mov	r2, r4
 800721c:	462b      	mov	r3, r5
 800721e:	1891      	adds	r1, r2, r2
 8007220:	65b9      	str	r1, [r7, #88]	; 0x58
 8007222:	415b      	adcs	r3, r3
 8007224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800722a:	4621      	mov	r1, r4
 800722c:	eb12 0801 	adds.w	r8, r2, r1
 8007230:	4629      	mov	r1, r5
 8007232:	eb43 0901 	adc.w	r9, r3, r1
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800724a:	4690      	mov	r8, r2
 800724c:	4699      	mov	r9, r3
 800724e:	4623      	mov	r3, r4
 8007250:	eb18 0303 	adds.w	r3, r8, r3
 8007254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007258:	462b      	mov	r3, r5
 800725a:	eb49 0303 	adc.w	r3, r9, r3
 800725e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800726e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007276:	460b      	mov	r3, r1
 8007278:	18db      	adds	r3, r3, r3
 800727a:	653b      	str	r3, [r7, #80]	; 0x50
 800727c:	4613      	mov	r3, r2
 800727e:	eb42 0303 	adc.w	r3, r2, r3
 8007282:	657b      	str	r3, [r7, #84]	; 0x54
 8007284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800728c:	f7f9 fca4 	bl	8000bd8 <__aeabi_uldivmod>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4b61      	ldr	r3, [pc, #388]	; (800741c <UART_SetConfig+0x2d4>)
 8007296:	fba3 2302 	umull	r2, r3, r3, r2
 800729a:	095b      	lsrs	r3, r3, #5
 800729c:	011c      	lsls	r4, r3, #4
 800729e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072b0:	4642      	mov	r2, r8
 80072b2:	464b      	mov	r3, r9
 80072b4:	1891      	adds	r1, r2, r2
 80072b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80072b8:	415b      	adcs	r3, r3
 80072ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80072c0:	4641      	mov	r1, r8
 80072c2:	eb12 0a01 	adds.w	sl, r2, r1
 80072c6:	4649      	mov	r1, r9
 80072c8:	eb43 0b01 	adc.w	fp, r3, r1
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	f04f 0300 	mov.w	r3, #0
 80072d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072e0:	4692      	mov	sl, r2
 80072e2:	469b      	mov	fp, r3
 80072e4:	4643      	mov	r3, r8
 80072e6:	eb1a 0303 	adds.w	r3, sl, r3
 80072ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ee:	464b      	mov	r3, r9
 80072f0:	eb4b 0303 	adc.w	r3, fp, r3
 80072f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800730c:	460b      	mov	r3, r1
 800730e:	18db      	adds	r3, r3, r3
 8007310:	643b      	str	r3, [r7, #64]	; 0x40
 8007312:	4613      	mov	r3, r2
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	647b      	str	r3, [r7, #68]	; 0x44
 800731a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800731e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007322:	f7f9 fc59 	bl	8000bd8 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4611      	mov	r1, r2
 800732c:	4b3b      	ldr	r3, [pc, #236]	; (800741c <UART_SetConfig+0x2d4>)
 800732e:	fba3 2301 	umull	r2, r3, r3, r1
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	2264      	movs	r2, #100	; 0x64
 8007336:	fb02 f303 	mul.w	r3, r2, r3
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007342:	4b36      	ldr	r3, [pc, #216]	; (800741c <UART_SetConfig+0x2d4>)
 8007344:	fba3 2302 	umull	r2, r3, r3, r2
 8007348:	095b      	lsrs	r3, r3, #5
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007350:	441c      	add	r4, r3
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800735c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	63b9      	str	r1, [r7, #56]	; 0x38
 800736c:	415b      	adcs	r3, r3
 800736e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007374:	4641      	mov	r1, r8
 8007376:	1851      	adds	r1, r2, r1
 8007378:	6339      	str	r1, [r7, #48]	; 0x30
 800737a:	4649      	mov	r1, r9
 800737c:	414b      	adcs	r3, r1
 800737e:	637b      	str	r3, [r7, #52]	; 0x34
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800738c:	4659      	mov	r1, fp
 800738e:	00cb      	lsls	r3, r1, #3
 8007390:	4651      	mov	r1, sl
 8007392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007396:	4651      	mov	r1, sl
 8007398:	00ca      	lsls	r2, r1, #3
 800739a:	4610      	mov	r0, r2
 800739c:	4619      	mov	r1, r3
 800739e:	4603      	mov	r3, r0
 80073a0:	4642      	mov	r2, r8
 80073a2:	189b      	adds	r3, r3, r2
 80073a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073a8:	464b      	mov	r3, r9
 80073aa:	460a      	mov	r2, r1
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80073c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073c8:	460b      	mov	r3, r1
 80073ca:	18db      	adds	r3, r3, r3
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ce:	4613      	mov	r3, r2
 80073d0:	eb42 0303 	adc.w	r3, r2, r3
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073de:	f7f9 fbfb 	bl	8000bd8 <__aeabi_uldivmod>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	4b0d      	ldr	r3, [pc, #52]	; (800741c <UART_SetConfig+0x2d4>)
 80073e8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	2164      	movs	r1, #100	; 0x64
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	3332      	adds	r3, #50	; 0x32
 80073fa:	4a08      	ldr	r2, [pc, #32]	; (800741c <UART_SetConfig+0x2d4>)
 80073fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	f003 0207 	and.w	r2, r3, #7
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4422      	add	r2, r4
 800740e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007410:	e106      	b.n	8007620 <UART_SetConfig+0x4d8>
 8007412:	bf00      	nop
 8007414:	40011000 	.word	0x40011000
 8007418:	40011400 	.word	0x40011400
 800741c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007424:	2200      	movs	r2, #0
 8007426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800742a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800742e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007432:	4642      	mov	r2, r8
 8007434:	464b      	mov	r3, r9
 8007436:	1891      	adds	r1, r2, r2
 8007438:	6239      	str	r1, [r7, #32]
 800743a:	415b      	adcs	r3, r3
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
 800743e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007442:	4641      	mov	r1, r8
 8007444:	1854      	adds	r4, r2, r1
 8007446:	4649      	mov	r1, r9
 8007448:	eb43 0501 	adc.w	r5, r3, r1
 800744c:	f04f 0200 	mov.w	r2, #0
 8007450:	f04f 0300 	mov.w	r3, #0
 8007454:	00eb      	lsls	r3, r5, #3
 8007456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800745a:	00e2      	lsls	r2, r4, #3
 800745c:	4614      	mov	r4, r2
 800745e:	461d      	mov	r5, r3
 8007460:	4643      	mov	r3, r8
 8007462:	18e3      	adds	r3, r4, r3
 8007464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007468:	464b      	mov	r3, r9
 800746a:	eb45 0303 	adc.w	r3, r5, r3
 800746e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800747e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800748e:	4629      	mov	r1, r5
 8007490:	008b      	lsls	r3, r1, #2
 8007492:	4621      	mov	r1, r4
 8007494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007498:	4621      	mov	r1, r4
 800749a:	008a      	lsls	r2, r1, #2
 800749c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074a0:	f7f9 fb9a 	bl	8000bd8 <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4b60      	ldr	r3, [pc, #384]	; (800762c <UART_SetConfig+0x4e4>)
 80074aa:	fba3 2302 	umull	r2, r3, r3, r2
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	011c      	lsls	r4, r3, #4
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80074c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	61b9      	str	r1, [r7, #24]
 80074cc:	415b      	adcs	r3, r3
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074d4:	4641      	mov	r1, r8
 80074d6:	1851      	adds	r1, r2, r1
 80074d8:	6139      	str	r1, [r7, #16]
 80074da:	4649      	mov	r1, r9
 80074dc:	414b      	adcs	r3, r1
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ec:	4659      	mov	r1, fp
 80074ee:	00cb      	lsls	r3, r1, #3
 80074f0:	4651      	mov	r1, sl
 80074f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074f6:	4651      	mov	r1, sl
 80074f8:	00ca      	lsls	r2, r1, #3
 80074fa:	4610      	mov	r0, r2
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	4642      	mov	r2, r8
 8007502:	189b      	adds	r3, r3, r2
 8007504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007508:	464b      	mov	r3, r9
 800750a:	460a      	mov	r2, r1
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	67bb      	str	r3, [r7, #120]	; 0x78
 800751e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800752c:	4649      	mov	r1, r9
 800752e:	008b      	lsls	r3, r1, #2
 8007530:	4641      	mov	r1, r8
 8007532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007536:	4641      	mov	r1, r8
 8007538:	008a      	lsls	r2, r1, #2
 800753a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800753e:	f7f9 fb4b 	bl	8000bd8 <__aeabi_uldivmod>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4611      	mov	r1, r2
 8007548:	4b38      	ldr	r3, [pc, #224]	; (800762c <UART_SetConfig+0x4e4>)
 800754a:	fba3 2301 	umull	r2, r3, r3, r1
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	2264      	movs	r2, #100	; 0x64
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	1acb      	subs	r3, r1, r3
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	3332      	adds	r3, #50	; 0x32
 800755c:	4a33      	ldr	r2, [pc, #204]	; (800762c <UART_SetConfig+0x4e4>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007568:	441c      	add	r4, r3
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756e:	2200      	movs	r2, #0
 8007570:	673b      	str	r3, [r7, #112]	; 0x70
 8007572:	677a      	str	r2, [r7, #116]	; 0x74
 8007574:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	415b      	adcs	r3, r3
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80075ba:	464b      	mov	r3, r9
 80075bc:	460a      	mov	r2, r1
 80075be:	eb42 0303 	adc.w	r3, r2, r3
 80075c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	663b      	str	r3, [r7, #96]	; 0x60
 80075ce:	667a      	str	r2, [r7, #100]	; 0x64
 80075d0:	f04f 0200 	mov.w	r2, #0
 80075d4:	f04f 0300 	mov.w	r3, #0
 80075d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075dc:	4649      	mov	r1, r9
 80075de:	008b      	lsls	r3, r1, #2
 80075e0:	4641      	mov	r1, r8
 80075e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075e6:	4641      	mov	r1, r8
 80075e8:	008a      	lsls	r2, r1, #2
 80075ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075ee:	f7f9 faf3 	bl	8000bd8 <__aeabi_uldivmod>
 80075f2:	4602      	mov	r2, r0
 80075f4:	460b      	mov	r3, r1
 80075f6:	4b0d      	ldr	r3, [pc, #52]	; (800762c <UART_SetConfig+0x4e4>)
 80075f8:	fba3 1302 	umull	r1, r3, r3, r2
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	2164      	movs	r1, #100	; 0x64
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	3332      	adds	r3, #50	; 0x32
 800760a:	4a08      	ldr	r2, [pc, #32]	; (800762c <UART_SetConfig+0x4e4>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	f003 020f 	and.w	r2, r3, #15
 8007616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4422      	add	r2, r4
 800761e:	609a      	str	r2, [r3, #8]
}
 8007620:	bf00      	nop
 8007622:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800762c:	51eb851f 	.word	0x51eb851f

08007630 <uint32_identity>:
{
  return x;
}

static inline uint32_t uint32_identity(uint32_t x)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  return x;
 8007638:	687b      	ldr	r3, [r7, #4]
}
 800763a:	4618      	mov	r0, r3
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <sl_wfx_reg_read_16>:
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length);

sl_status_t sl_wfx_reg_read_16(sl_wfx_register_address_t address, uint16_t *value_out)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	4603      	mov	r3, r0
 800764e:	6039      	str	r1, [r7, #0]
 8007650:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp[4];
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, tmp, sizeof(tmp));
 8007652:	f107 0208 	add.w	r2, r7, #8
 8007656:	79f9      	ldrb	r1, [r7, #7]
 8007658:	2304      	movs	r3, #4
 800765a:	2002      	movs	r0, #2
 800765c:	f000 f8f8 	bl	8007850 <sl_wfx_bus_access>
 8007660:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_unpack_16bit_little_endian(tmp);
 8007662:	7a3b      	ldrb	r3, [r7, #8]
 8007664:	b29a      	uxth	r2, r3
 8007666:	7a7b      	ldrb	r3, [r7, #9]
 8007668:	b29b      	uxth	r3, r3
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b29b      	uxth	r3, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	b29a      	uxth	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	801a      	strh	r2, [r3, #0]
                  address,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <sl_wfx_reg_write_16>:

sl_status_t sl_wfx_reg_write_16(sl_wfx_register_address_t address, uint16_t value_in)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	4603      	mov	r3, r0
 8007688:	460a      	mov	r2, r1
 800768a:	71fb      	strb	r3, [r7, #7]
 800768c:	4613      	mov	r3, r2
 800768e:	80bb      	strh	r3, [r7, #4]
                  address,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  sl_wfx_pack_16bit_little_endian(tmp, value_in);
 8007690:	88bb      	ldrh	r3, [r7, #4]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	733b      	strb	r3, [r7, #12]
 8007696:	88bb      	ldrh	r3, [r7, #4]
 8007698:	0a1b      	lsrs	r3, r3, #8
 800769a:	b29b      	uxth	r3, r3
 800769c:	b2db      	uxtb	r3, r3
 800769e:	737b      	strb	r3, [r7, #13]
  tmp[2] = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73bb      	strb	r3, [r7, #14]
  tmp[3] = 0;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73fb      	strb	r3, [r7, #15]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, tmp, sizeof(tmp));
 80076a8:	f107 020c 	add.w	r2, r7, #12
 80076ac:	79f9      	ldrb	r1, [r7, #7]
 80076ae:	2304      	movs	r3, #4
 80076b0:	2001      	movs	r0, #1
 80076b2:	f000 f8cd 	bl	8007850 <sl_wfx_bus_access>
 80076b6:	4603      	mov	r3, r0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <sl_wfx_reg_read_32>:

sl_status_t sl_wfx_reg_read_32(sl_wfx_register_address_t address, uint32_t *value_out)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
  sl_status_t result = sl_wfx_bus_access(SL_WFX_BUS_READ, address, value_out, sizeof(*value_out));
 80076cc:	79f9      	ldrb	r1, [r7, #7]
 80076ce:	2304      	movs	r3, #4
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	2002      	movs	r0, #2
 80076d4:	f000 f8bc 	bl	8007850 <sl_wfx_bus_access>
 80076d8:	60f8      	str	r0, [r7, #12]

  *value_out = sl_wfx_htole32(*value_out);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff ffa6 	bl	8007630 <uint32_identity>
 80076e4:	4602      	mov	r2, r0
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	601a      	str	r2, [r3, #0]
                  (*value_out >> 16) & 0xFF,
                  (*value_out >> 8) & 0xFF,
                  *value_out & 0xFF);
#endif

  return result;
 80076ea:	68fb      	ldr	r3, [r7, #12]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <sl_wfx_reg_write_32>:

sl_status_t sl_wfx_reg_write_32(sl_wfx_register_address_t address, uint32_t value_in)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	6039      	str	r1, [r7, #0]
 80076fe:	71fb      	strb	r3, [r7, #7]
                  (value_in >> 16) & 0xFF,
                  (value_in >> 8) & 0xFF,
                  value_in & 0xFF);
#endif

  value_in = sl_wfx_htole32(value_in);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f7ff ff94 	bl	8007630 <uint32_identity>
 8007708:	4603      	mov	r3, r0
 800770a:	603b      	str	r3, [r7, #0]

  return sl_wfx_bus_access(SL_WFX_BUS_WRITE, address, &value_in, sizeof(value_in));
 800770c:	463a      	mov	r2, r7
 800770e:	79f9      	ldrb	r1, [r7, #7]
 8007710:	2304      	movs	r3, #4
 8007712:	2001      	movs	r0, #1
 8007714:	f000 f89c 	bl	8007850 <sl_wfx_bus_access>
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <sl_wfx_data_read>:

sl_status_t sl_wfx_data_read(void *buffer, uint32_t length)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_bus_access(SL_WFX_BUS_READ, SL_WFX_IN_OUT_QUEUE_REG_ID, buffer, length);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	2102      	movs	r1, #2
 8007732:	2002      	movs	r0, #2
 8007734:	f000 f88c 	bl	8007850 <sl_wfx_bus_access>
 8007738:	60f8      	str	r0, [r7, #12]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  return result;
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <sl_wfx_data_write>:

sl_status_t sl_wfx_data_write(const void *buffer, uint32_t length)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  }
#endif
  sl_wfx_host_log("\r\n");
#endif

  result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_IN_OUT_QUEUE_REG_ID, (void*) buffer, length);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	2102      	movs	r1, #2
 8007754:	2001      	movs	r0, #1
 8007756:	f000 f87b 	bl	8007850 <sl_wfx_bus_access>
 800775a:	60f8      	str	r0, [r7, #12]

  return result;
 800775c:	68fb      	ldr	r3, [r7, #12]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <sl_wfx_apb_write>:

sl_status_t sl_wfx_apb_write(uint32_t address, const void *buffer, uint32_t length)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
  sl_status_t result;
  if (length / 2 >= 0x1000) {
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007778:	d301      	bcc.n	800777e <sl_wfx_apb_write+0x18>
    return SL_STATUS_INVALID_PARAMETER;
 800777a:	2321      	movs	r3, #33	; 0x21
 800777c:	e00f      	b.n	800779e <sl_wfx_apb_write+0x38>
  }

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	2004      	movs	r0, #4
 8007782:	f7ff ffb7 	bl	80076f4 <sl_wfx_reg_write_32>
 8007786:	6178      	str	r0, [r7, #20]

  if (result == SL_STATUS_OK) {
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d106      	bne.n	800779c <sl_wfx_apb_write+0x36>
    result = sl_wfx_bus_access(SL_WFX_BUS_WRITE, SL_WFX_SRAM_DPORT_REG_ID, (void*) buffer, length);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	2105      	movs	r1, #5
 8007794:	2001      	movs	r0, #1
 8007796:	f000 f85b 	bl	8007850 <sl_wfx_bus_access>
 800779a:	6178      	str	r0, [r7, #20]
  }

  return result;
 800779c:	697b      	ldr	r3, [r7, #20]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3718      	adds	r7, #24
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <sl_wfx_apb_write_32>:

sl_status_t sl_wfx_apb_write_32(uint32_t address, uint32_t value_in)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  sl_status_t result;

  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	2004      	movs	r0, #4
 80077b4:	f7ff ff9e 	bl	80076f4 <sl_wfx_reg_write_32>
 80077b8:	60f8      	str	r0, [r7, #12]

  if (result == SL_STATUS_OK) {
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d104      	bne.n	80077ca <sl_wfx_apb_write_32+0x24>
    result = sl_wfx_reg_write_32(SL_WFX_SRAM_DPORT_REG_ID, value_in);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	2005      	movs	r0, #5
 80077c4:	f7ff ff96 	bl	80076f4 <sl_wfx_reg_write_32>
 80077c8:	60f8      	str	r0, [r7, #12]
  }

  return result;
 80077ca:	68fb      	ldr	r3, [r7, #12]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <sl_wfx_apb_read_32>:

sl_status_t sl_wfx_apb_read_32(uint32_t address, uint32_t *value_out)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t value32;
  sl_status_t result;

  // write address
  result = sl_wfx_reg_write_32(SL_WFX_SRAM_BASE_ADDR_REG_ID, address);
 80077de:	6879      	ldr	r1, [r7, #4]
 80077e0:	2004      	movs	r0, #4
 80077e2:	f7ff ff87 	bl	80076f4 <sl_wfx_reg_write_32>
 80077e6:	6138      	str	r0, [r7, #16]

  // set the "prefetch" bit
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4619      	mov	r1, r3
 80077ee:	2000      	movs	r0, #0
 80077f0:	f7ff ff66 	bl	80076c0 <sl_wfx_reg_read_32>
 80077f4:	6138      	str	r0, [r7, #16]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32 | CONFIG_PREFETCH_BIT);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077fc:	4619      	mov	r1, r3
 80077fe:	2000      	movs	r0, #0
 8007800:	f7ff ff78 	bl	80076f4 <sl_wfx_reg_write_32>
 8007804:	6138      	str	r0, [r7, #16]

  // and wait for the prefetch bit to clear
  for (uint32_t i = 0; i < 20; i++) {
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e011      	b.n	8007830 <sl_wfx_apb_read_32+0x5c>
    result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800780c:	f107 030c 	add.w	r3, r7, #12
 8007810:	4619      	mov	r1, r3
 8007812:	2000      	movs	r0, #0
 8007814:	f7ff ff54 	bl	80076c0 <sl_wfx_reg_read_32>
 8007818:	6138      	str	r0, [r7, #16]
    if ((value32 & CONFIG_PREFETCH_BIT) == 0) {
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <sl_wfx_apb_read_32+0x64>
      break;
    }

    sl_wfx_host_wait(1);
 8007824:	2001      	movs	r0, #1
 8007826:	f001 fadd 	bl	8008de4 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 20; i++) {
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	3301      	adds	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b13      	cmp	r3, #19
 8007834:	d9ea      	bls.n	800780c <sl_wfx_apb_read_32+0x38>
 8007836:	e000      	b.n	800783a <sl_wfx_apb_read_32+0x66>
      break;
 8007838:	bf00      	nop
  }

  // and data is ready
  result = sl_wfx_reg_read_32(SL_WFX_SRAM_DPORT_REG_ID, value_out);
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	2005      	movs	r0, #5
 800783e:	f7ff ff3f 	bl	80076c0 <sl_wfx_reg_read_32>
 8007842:	6138      	str	r0, [r7, #16]

  return result;
 8007844:	693b      	ldr	r3, [r7, #16]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <sl_wfx_bus_access>:

static sl_status_t sl_wfx_bus_access(sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     void *buffer,
                                     uint32_t length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60ba      	str	r2, [r7, #8]
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	4603      	mov	r3, r0
 800785c:	73fb      	strb	r3, [r7, #15]
 800785e:	460b      	mov	r3, r1
 8007860:	73bb      	strb	r3, [r7, #14]
  sl_status_t result;

  /* If the WFx is sleeping, wake it up */
  if (sl_wfx_context->state & SL_WFX_SLEEPING) {
 8007862:	4b43      	ldr	r3, [pc, #268]	; (8007970 <sl_wfx_bus_access+0x120>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d01a      	beq.n	80078a8 <sl_wfx_bus_access+0x58>
    result = sl_wfx_host_set_wake_up_pin(1);
 8007872:	2001      	movs	r0, #1
 8007874:	f001 fa30 	bl	8008cd8 <sl_wfx_host_set_wake_up_pin>
 8007878:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d171      	bne.n	8007964 <sl_wfx_bus_access+0x114>
    /* If the command is of read type, consider the WFx awake */
    if (type == SL_WFX_BUS_WRITE) {
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d105      	bne.n	8007892 <sl_wfx_bus_access+0x42>
      result = sl_wfx_host_wait_for_wake_up();
 8007886:	f001 fa43 	bl	8008d10 <sl_wfx_host_wait_for_wake_up>
 800788a:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d168      	bne.n	8007964 <sl_wfx_bus_access+0x114>
    }
    sl_wfx_context->state &= ~SL_WFX_SLEEPING;
 8007892:	4b37      	ldr	r3, [pc, #220]	; (8007970 <sl_wfx_bus_access+0x120>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800789a:	4b35      	ldr	r3, [pc, #212]	; (8007970 <sl_wfx_bus_access+0x120>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0208 	bic.w	r2, r2, #8
 80078a2:	b2d2      	uxtb	r2, r2
 80078a4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
    sl_wfx_host_log("WFx awake\r\n");
#endif
  }

  /* Send the communication on the bus */
  if (type == SL_WFX_BUS_READ) {
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d107      	bne.n	80078be <sl_wfx_bus_access+0x6e>
    result = sl_wfx_reg_read(address, buffer, length);
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68b9      	ldr	r1, [r7, #8]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f000 f85d 	bl	8007974 <sl_wfx_reg_read>
 80078ba:	6178      	str	r0, [r7, #20]
 80078bc:	e00c      	b.n	80078d8 <sl_wfx_bus_access+0x88>
  } else if (type == SL_WFX_BUS_WRITE) {
 80078be:	7bfb      	ldrb	r3, [r7, #15]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d107      	bne.n	80078d4 <sl_wfx_bus_access+0x84>
    result = sl_wfx_reg_write(address, buffer, length);
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 f89e 	bl	8007a0c <sl_wfx_reg_write>
 80078d0:	6178      	str	r0, [r7, #20]
 80078d2:	e001      	b.n	80078d8 <sl_wfx_bus_access+0x88>
  } else {
    result = SL_STATUS_INVALID_PARAMETER;
 80078d4:	2321      	movs	r3, #33	; 0x21
 80078d6:	617b      	str	r3, [r7, #20]
  }
  SL_WFX_ERROR_CHECK(result);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d142      	bne.n	8007964 <sl_wfx_bus_access+0x114>

  /* If the power save is active and there is no confirmation pending, put
     the WFx back to sleep */
  if ((sl_wfx_context->state & SL_WFX_POWER_SAVE_ACTIVE)
 80078de:	4b24      	ldr	r3, [pc, #144]	; (8007970 <sl_wfx_bus_access+0x120>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 80078e6:	f003 0310 	and.w	r3, r3, #16
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d039      	beq.n	8007962 <sl_wfx_bus_access+0x112>
      && (type == SL_WFX_BUS_READ)
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d136      	bne.n	8007962 <sl_wfx_bus_access+0x112>
      && ((address != SL_WFX_CONTROL_REG_ID)
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d108      	bne.n	800790c <sl_wfx_bus_access+0xbc>
          || ((address == SL_WFX_CONTROL_REG_ID) && ((*(uint16_t *)buffer & SL_WFX_CONT_NEXT_LEN_MASK) == 0)))
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d130      	bne.n	8007962 <sl_wfx_bus_access+0x112>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007908:	2b00      	cmp	r3, #0
 800790a:	d12a      	bne.n	8007962 <sl_wfx_bus_access+0x112>
      && (sl_wfx_context->used_buffers <= 1)
 800790c:	4b18      	ldr	r3, [pc, #96]	; (8007970 <sl_wfx_bus_access+0x120>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007914:	2b01      	cmp	r3, #1
 8007916:	d824      	bhi.n	8007962 <sl_wfx_bus_access+0x112>
      && ((*((uint16_t *)((uint8_t *)buffer + length - SL_WFX_CONT_REGISTER_SIZE)) & SL_WFX_CONT_NEXT_LEN_MASK) == 0)) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3b02      	subs	r3, #2
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007926:	2b00      	cmp	r3, #0
 8007928:	d11b      	bne.n	8007962 <sl_wfx_bus_access+0x112>
    /* Ask the host opinion on whether the WFx should be put back to sleep or
       not*/
    if (sl_wfx_host_sleep_grant(type, address, length) == SL_STATUS_WIFI_SLEEP_GRANTED) {
 800792a:	7bb9      	ldrb	r1, [r7, #14]
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fa01 	bl	8008d38 <sl_wfx_host_sleep_grant>
 8007936:	4603      	mov	r3, r0
 8007938:	f640 3208 	movw	r2, #2824	; 0xb08
 800793c:	4293      	cmp	r3, r2
 800793e:	d110      	bne.n	8007962 <sl_wfx_bus_access+0x112>
      sl_wfx_context->state |= SL_WFX_SLEEPING;
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <sl_wfx_bus_access+0x120>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8007948:	4b09      	ldr	r3, [pc, #36]	; (8007970 <sl_wfx_bus_access+0x120>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0208 	orr.w	r2, r2, #8
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
      result = sl_wfx_host_set_wake_up_pin(0);
 8007956:	2000      	movs	r0, #0
 8007958:	f001 f9be 	bl	8008cd8 <sl_wfx_host_set_wake_up_pin>
 800795c:	6178      	str	r0, [r7, #20]
      SL_WFX_ERROR_CHECK(result);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
      sl_wfx_host_log("WFx sleeping\r\n");
#endif
    }
  }

  error_handler:
 8007962:	bf00      	nop
  return result;
 8007964:	697b      	ldr	r3, [r7, #20]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000a94 	.word	0x20000a94

08007974 <sl_wfx_reg_read>:

#define SET_WRITE 0x7FFF /* usage: and operation */
#define SET_READ 0x8000  /* usage: or operation */

sl_status_t sl_wfx_reg_read(sl_wfx_register_address_t address, void *buffer, uint32_t length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af02      	add	r7, sp, #8
 800797a:	4603      	mov	r3, r0
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	73fb      	strb	r3, [r7, #15]
  uint16_t header = SET_READ | (address << 12) | (length / 2);
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	b29b      	uxth	r3, r3
 8007986:	031b      	lsls	r3, r3, #12
 8007988:	b29a      	uxth	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	085b      	lsrs	r3, r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	4313      	orrs	r3, r2
 8007992:	b29b      	uxth	r3, r3
 8007994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800799c:	83fb      	strh	r3, [r7, #30]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 800799e:	8bfb      	ldrh	r3, [r7, #30]
 80079a0:	0a1b      	lsrs	r3, r3, #8
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	753b      	strb	r3, [r7, #20]
 80079a8:	8bfb      	ldrh	r3, [r7, #30]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 80079ae:	f002 f80f 	bl	80099d0 <sl_wfx_host_spi_cs_assert>
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_READ, header_as_bytes, 2, (uint8_t *)buffer, length);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	f107 0114 	add.w	r1, r7, #20
 80079ba:	9300      	str	r3, [sp, #0]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2202      	movs	r2, #2
 80079c0:	2002      	movs	r0, #2
 80079c2:	f002 f81d 	bl	8009a00 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 80079c6:	f002 f80f 	bl	80099e8 <sl_wfx_host_spi_cs_deassert>

  if (address == SL_WFX_CONFIG_REG_ID) {
 80079ca:	7bfb      	ldrb	r3, [r7, #15]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d118      	bne.n	8007a02 <sl_wfx_reg_read+0x8e>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	61bb      	str	r3, [r7, #24]
    uint8_t byte_swap = tmp[0];
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	75fb      	strb	r3, [r7, #23]
    tmp[0] = tmp[1];
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	785a      	ldrb	r2, [r3, #1]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	3301      	adds	r3, #1
 80079e6:	7dfa      	ldrb	r2, [r7, #23]
 80079e8:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	789b      	ldrb	r3, [r3, #2]
 80079ee:	75fb      	strb	r3, [r7, #23]
    tmp[2] = tmp[3];
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	3302      	adds	r3, #2
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	78d2      	ldrb	r2, [r2, #3]
 80079f8:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	3303      	adds	r3, #3
 80079fe:	7dfa      	ldrb	r2, [r7, #23]
 8007a00:	701a      	strb	r2, [r3, #0]
  }

  return SL_STATUS_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <sl_wfx_reg_write>:

sl_status_t sl_wfx_reg_write(sl_wfx_register_address_t address, const void *buffer, uint32_t length)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b08a      	sub	sp, #40	; 0x28
 8007a10:	af02      	add	r7, sp, #8
 8007a12:	4603      	mov	r3, r0
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	73fb      	strb	r3, [r7, #15]
  if (address == SL_WFX_CONFIG_REG_ID) {
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d118      	bne.n	8007a52 <sl_wfx_reg_write+0x46>
    // Config always read/written in "word mode 0"
    // that is, its byte-order looks like that
    // B1 B0 B3 B2
    // here is this rearrangement
    uint8_t *tmp = (uint8_t *)buffer;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	61fb      	str	r3, [r7, #28]
    uint8_t byte_swap = tmp[0];
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	76fb      	strb	r3, [r7, #27]
    tmp[0] = tmp[1];
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	785a      	ldrb	r2, [r3, #1]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	701a      	strb	r2, [r3, #0]
    tmp[1] = byte_swap;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	7efa      	ldrb	r2, [r7, #27]
 8007a38:	701a      	strb	r2, [r3, #0]

    byte_swap = tmp[2];
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	789b      	ldrb	r3, [r3, #2]
 8007a3e:	76fb      	strb	r3, [r7, #27]
    tmp[2] = tmp[3];
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	3302      	adds	r3, #2
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	78d2      	ldrb	r2, [r2, #3]
 8007a48:	701a      	strb	r2, [r3, #0]
    tmp[3] = byte_swap;
 8007a4a:	69fb      	ldr	r3, [r7, #28]
 8007a4c:	3303      	adds	r3, #3
 8007a4e:	7efa      	ldrb	r2, [r7, #27]
 8007a50:	701a      	strb	r2, [r3, #0]
  }

  uint16_t header = /* write flag = 0*/ (address << 12) | (length / 2);
 8007a52:	7bfb      	ldrb	r3, [r7, #15]
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	031b      	lsls	r3, r3, #12
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	085b      	lsrs	r3, r3, #1
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	4313      	orrs	r3, r2
 8007a62:	833b      	strh	r3, [r7, #24]

  uint8_t header_as_bytes[2];
  sl_wfx_pack_16bit_big_endian(header_as_bytes, header);
 8007a64:	8b3b      	ldrh	r3, [r7, #24]
 8007a66:	0a1b      	lsrs	r3, r3, #8
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	753b      	strb	r3, [r7, #20]
 8007a6e:	8b3b      	ldrh	r3, [r7, #24]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	757b      	strb	r3, [r7, #21]

  sl_wfx_host_spi_cs_assert();
 8007a74:	f001 ffac 	bl	80099d0 <sl_wfx_host_spi_cs_assert>
  /* Note: sl_wfx_host_spi_transfer_no_cs_assert() does not modify the buffer when doing SL_WFX_BUS_WRITE */
  sl_wfx_host_spi_transfer_no_cs_assert(SL_WFX_BUS_WRITE, header_as_bytes, 2, (uint8_t *)buffer, length);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	f107 0114 	add.w	r1, r7, #20
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	2202      	movs	r2, #2
 8007a86:	2001      	movs	r0, #1
 8007a88:	f001 ffba 	bl	8009a00 <sl_wfx_host_spi_transfer_no_cs_assert>
  sl_wfx_host_spi_cs_deassert();
 8007a8c:	f001 ffac 	bl	80099e8 <sl_wfx_host_spi_cs_deassert>

  return SL_STATUS_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <sl_wfx_init_bus>:

sl_status_t sl_wfx_init_bus(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
  sl_status_t status;
  uint32_t value32;

  status = sl_wfx_host_init_bus();
 8007aa2:	f001 ff6f 	bl	8009984 <sl_wfx_host_init_bus>
 8007aa6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d12b      	bne.n	8007b06 <sl_wfx_init_bus+0x6a>

  sl_wfx_host_reset_chip();
 8007aae:	f001 f8fb 	bl	8008ca8 <sl_wfx_host_reset_chip>

  status = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8007ab2:	463b      	mov	r3, r7
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	f7ff fe02 	bl	80076c0 <sl_wfx_reg_read_32>
 8007abc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d120      	bne.n	8007b06 <sl_wfx_init_bus+0x6a>

  if (value32 == 0 || value32 == 0xFFFFFFFF) {
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <sl_wfx_init_bus+0x36>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d104      	bne.n	8007adc <sl_wfx_init_bus+0x40>
    status = SL_STATUS_FAIL;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(status);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d114      	bne.n	8007b06 <sl_wfx_init_bus+0x6a>
  }

  // setting up "word mode = b10", this means that data on SPI bus
  // is sent as B0, B1, B2, B3 , ....
  value32 &= ~SL_WFX_CONFIG_WORD_MODE_BITS;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae2:	603b      	str	r3, [r7, #0]
  value32 |= SL_WFX_CONFIG_WORD_MODE_2;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aea:	603b      	str	r3, [r7, #0]

  /* Write CONFIG Register to configure SPI clock edge to support high frequency*/
  value32 |= 0x04045400;
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	4b08      	ldr	r3, [pc, #32]	; (8007b10 <sl_wfx_init_bus+0x74>)
 8007af0:	4313      	orrs	r3, r2
 8007af2:	603b      	str	r3, [r7, #0]

  status = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	2000      	movs	r0, #0
 8007afa:	f7ff fdfb 	bl	80076f4 <sl_wfx_reg_write_32>
 8007afe:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(status);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0

  error_handler:
 8007b04:	bf00      	nop
  return status;
 8007b06:	687b      	ldr	r3, [r7, #4]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	04045400 	.word	0x04045400

08007b14 <sl_wfx_deinit_bus>:

sl_status_t sl_wfx_deinit_bus(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	af00      	add	r7, sp, #0
  return sl_wfx_host_deinit_bus();
 8007b18:	f001 ff4c 	bl	80099b4 <sl_wfx_host_deinit_bus>
 8007b1c:	4603      	mov	r3, r0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <uint16_identity>:
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	4603      	mov	r3, r0
 8007b2a:	80fb      	strh	r3, [r7, #6]
  return x;
 8007b2c:	88fb      	ldrh	r3, [r7, #6]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <uint32_identity>:
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  return x;
 8007b42:	687b      	ldr	r3, [r7, #4]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <sl_wfx_init>:
 * SL_STATUS_FAIL otherwise
 *
 * @note Actions performed by sl_wfx_init(): Reset -> load firmware -> send PDS
 *****************************************************************************/
sl_status_t sl_wfx_init(sl_wfx_context_t *context)
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b089      	sub	sp, #36	; 0x24
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  const char           *pds_data;
#ifdef SL_WFX_USE_SECURE_LINK
  sl_wfx_secure_link_mode_t link_mode;
#endif

  memset(context, 0, sizeof(*context) );
 8007b58:	f44f 7209 	mov.w	r2, #548	; 0x224
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f013 fbfa 	bl	801b358 <memset>

  sl_wfx_context = context;
 8007b64:	4a5f      	ldr	r2, [pc, #380]	; (8007ce4 <sl_wfx_init+0x194>)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6013      	str	r3, [r2, #0]
  sl_wfx_context->used_buffers = 0;
 8007b6a:	4b5e      	ldr	r3, [pc, #376]	; (8007ce4 <sl_wfx_init+0x194>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  result = sl_wfx_init_bus(  );
 8007b74:	f7ff ff92 	bl	8007a9c <sl_wfx_init_bus>
 8007b78:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f040 80a2 	bne.w	8007cc6 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bus initialized--\r\n");
#endif

  result = sl_wfx_init_chip( );
 8007b82:	f000 fbf3 	bl	800836c <sl_wfx_init_chip>
 8007b86:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f040 809b 	bne.w	8007cc6 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Chip initialized--\r\n");
#endif

  result = sl_wfx_download_run_bootloader();
 8007b90:	f000 fc80 	bl	8008494 <sl_wfx_download_run_bootloader>
 8007b94:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f040 8094 	bne.w	8007cc6 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Bootloader running--\r\n");
#endif

  result = sl_wfx_host_setup_waited_event(SL_WFX_STARTUP_IND_ID);
 8007b9e:	20e1      	movs	r0, #225	; 0xe1
 8007ba0:	f001 f8da 	bl	8008d58 <sl_wfx_host_setup_waited_event>
 8007ba4:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f040 808c 	bne.w	8007cc6 <sl_wfx_init+0x176>

  /* Downloading Wi-Fi chip firmware */
  result = sl_wfx_download_run_firmware( );
 8007bae:	f000 fcb9 	bl	8008524 <sl_wfx_download_run_firmware>
 8007bb2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	f040 8085 	bne.w	8007cc6 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Firmware downloaded--\r\n");
#endif

  result = sl_wfx_enable_irq(  );
 8007bbc:	f000 fb72 	bl	80082a4 <sl_wfx_enable_irq>
 8007bc0:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d17e      	bne.n	8007cc6 <sl_wfx_init+0x176>

  result = sl_wfx_set_access_mode_message(  );
 8007bc8:	f000 fbb4 	bl	8008334 <sl_wfx_set_access_mode_message>
 8007bcc:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d178      	bne.n	8007cc6 <sl_wfx_init+0x176>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--Message mode set--\r\n");
#endif

  /* Waiting for the startup indication from Wi-Fi chip, SL_WFX_STARTUP_IND_ID */
  result = sl_wfx_host_wait_for_confirmation(SL_WFX_STARTUP_IND_ID,
 8007bd4:	f107 0314 	add.w	r3, r7, #20
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f241 3188 	movw	r1, #5000	; 0x1388
 8007bde:	20e1      	movs	r0, #225	; 0xe1
 8007be0:	f001 f8cc 	bl	8008d7c <sl_wfx_host_wait_for_confirmation>
 8007be4:	61f8      	str	r0, [r7, #28]
                                             SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS,
                                             (void **)&startup_info);
  SL_WFX_ERROR_CHECK(result);
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d16c      	bne.n	8007cc6 <sl_wfx_init+0x176>

  /* Store the firware version in the context */
  context->firmware_build = startup_info->body.firmware_build;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  context->firmware_minor = startup_info->body.firmware_minor;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  context->firmware_major = startup_info->body.firmware_major;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202

  /* Storing mac addresses from Wi-Fi chip in the context  */
  memcpy(&(context->mac_addr_0.octet),
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f203 2016 	addw	r0, r3, #534	; 0x216
         startup_info->body.mac_addr[0],
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	3326      	adds	r3, #38	; 0x26
  memcpy(&(context->mac_addr_0.octet),
 8007c1a:	2206      	movs	r2, #6
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f013 fc58 	bl	801b4d2 <memcpy>
         sizeof(sl_wfx_mac_address_t));
  memcpy(&(context->mac_addr_1.octet),
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f503 7007 	add.w	r0, r3, #540	; 0x21c
         startup_info->body.mac_addr[1],
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	332c      	adds	r3, #44	; 0x2c
  memcpy(&(context->mac_addr_1.octet),
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	4619      	mov	r1, r3
 8007c30:	f013 fc4f 	bl	801b4d2 <memcpy>
         sizeof(sl_wfx_mac_address_t));

  /* Storing input buffer limit from Wi-Fi chip */
  sl_wfx_input_buffer_number = sl_wfx_htole16(startup_info->body.num_inp_ch_bufs);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	8c1b      	ldrh	r3, [r3, #32]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff ff71 	bl	8007b22 <uint16_identity>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	4b28      	ldr	r3, [pc, #160]	; (8007ce8 <sl_wfx_init+0x198>)
 8007c46:	801a      	strh	r2, [r3, #0]

  /* Store the OPN */
  memcpy(context->wfx_opn, startup_info->body.opn, SL_WFX_OPN_SIZE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	330a      	adds	r3, #10
 8007c52:	220e      	movs	r2, #14
 8007c54:	4619      	mov	r1, r3
 8007c56:	f013 fc3c 	bl	801b4d2 <memcpy>

  /* Set the wake up pin of the host */
  sl_wfx_host_set_wake_up_pin(1);
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	f001 f83c 	bl	8008cd8 <sl_wfx_host_set_wake_up_pin>
        goto error_handler;
    }
  }
#endif //SL_WFX_USE_SECURE_LINK

  result = sl_wfx_host_get_pds_size(&pds_size);
 8007c60:	f107 0312 	add.w	r3, r7, #18
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fff7 	bl	8008c58 <sl_wfx_host_get_pds_size>
 8007c6a:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d129      	bne.n	8007cc6 <sl_wfx_init+0x176>
  /* Sending to Wi-Fi chip PDS configuration (Platform data set) */
  for (uint8_t a = 0; a < pds_size; a++) {
 8007c72:	2300      	movs	r3, #0
 8007c74:	76fb      	strb	r3, [r7, #27]
 8007c76:	e01c      	b.n	8007cb2 <sl_wfx_init+0x162>
    result = sl_wfx_host_get_pds_data(&pds_data, a);
 8007c78:	7efb      	ldrb	r3, [r7, #27]
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 ffbc 	bl	8008c00 <sl_wfx_host_get_pds_data>
 8007c88:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11a      	bne.n	8007cc6 <sl_wfx_init+0x176>
    result = sl_wfx_send_configuration(pds_data, strlen(pds_data));
 8007c90:	68fc      	ldr	r4, [r7, #12]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7f8 fb03 	bl	80002a0 <strlen>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 f950 	bl	8007f44 <sl_wfx_send_configuration>
 8007ca4:	61f8      	str	r0, [r7, #28]
    SL_WFX_ERROR_CHECK(result);
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d10c      	bne.n	8007cc6 <sl_wfx_init+0x176>
  for (uint8_t a = 0; a < pds_size; a++) {
 8007cac:	7efb      	ldrb	r3, [r7, #27]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	76fb      	strb	r3, [r7, #27]
 8007cb2:	7efb      	ldrb	r3, [r7, #27]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	8a7b      	ldrh	r3, [r7, #18]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d3dd      	bcc.n	8007c78 <sl_wfx_init+0x128>

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_INIT)
  sl_wfx_host_log("--PDS configured--\r\n");
#endif

  sl_wfx_context->state = SL_WFX_STARTED;
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <sl_wfx_init+0x194>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  error_handler:
  if (result != SL_STATUS_OK) {
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d005      	beq.n	8007cd8 <sl_wfx_init+0x188>
    sl_wfx_disable_irq( );
 8007ccc:	f000 fb0e 	bl	80082ec <sl_wfx_disable_irq>
    sl_wfx_deinit_bus();
 8007cd0:	f7ff ff20 	bl	8007b14 <sl_wfx_deinit_bus>
    sl_wfx_host_deinit();
 8007cd4:	f000 ffe0 	bl	8008c98 <sl_wfx_host_deinit>
  }

  return result;
 8007cd8:	69fb      	ldr	r3, [r7, #28]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3724      	adds	r7, #36	; 0x24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd90      	pop	{r4, r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000a94 	.word	0x20000a94
 8007ce8:	20000a9a 	.word	0x20000a9a

08007cec <sl_wfx_send_join_command>:
                                     uint16_t        management_frame_protection,
                                     const uint8_t  *passkey,
                                     uint16_t        passkey_length,
                                     const uint8_t  *ie_data,
                                     uint16_t        ie_data_length)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	807b      	strh	r3, [r7, #2]
  sl_status_t               result           = SL_STATUS_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
  sl_wfx_generic_message_t  *frame           = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	61bb      	str	r3, [r7, #24]
  sl_wfx_connect_cnf_t      *reply           = NULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
  sl_wfx_connect_req_body_t *connect_request = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	623b      	str	r3, [r7, #32]
  uint32_t request_length  = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_connect_req_t) + ie_data_length);
 8007d0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007d0e:	3301      	adds	r3, #1
 8007d10:	f023 0301 	bic.w	r3, r3, #1
 8007d14:	3378      	adds	r3, #120	; 0x78
 8007d16:	61fb      	str	r3, [r7, #28]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007d18:	f107 0018 	add.w	r0, r7, #24
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	2143      	movs	r1, #67	; 0x43
 8007d22:	f000 fed7 	bl	8008ad4 <sl_wfx_allocate_command_buffer>
 8007d26:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f040 8092 	bne.w	8007e54 <sl_wfx_send_join_command+0x168>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2200      	movs	r2, #0
 8007d34:	70da      	strb	r2, [r3, #3]

  connect_request                        = (sl_wfx_connect_req_body_t *)&frame->body;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	623b      	str	r3, [r7, #32]
  connect_request->ssid_def.ssid_length  = sl_wfx_htole32(ssid_length);
 8007d3c:	68b8      	ldr	r0, [r7, #8]
 8007d3e:	f7ff fefc 	bl	8007b3a <uint32_identity>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	601a      	str	r2, [r3, #0]
  connect_request->channel               = sl_wfx_htole16(channel);
 8007d48:	887b      	ldrh	r3, [r7, #2]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fee9 	bl	8007b22 <uint16_identity>
 8007d50:	4603      	mov	r3, r0
 8007d52:	461a      	mov	r2, r3
 8007d54:	6a3b      	ldr	r3, [r7, #32]
 8007d56:	855a      	strh	r2, [r3, #42]	; 0x2a
  connect_request->security_mode         = security_mode;
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d5e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  connect_request->prevent_roaming       = prevent_roaming;
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007d68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (security_mode == WFM_SECURITY_MODE_WPA3_SAE) {
 8007d6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007d70:	2b06      	cmp	r3, #6
 8007d72:	d109      	bne.n	8007d88 <sl_wfx_send_join_command+0x9c>
    connect_request->mgmt_frame_protection = WFM_MGMT_FRAME_PROTECTION_MANDATORY;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f042 0202 	orr.w	r2, r2, #2
 8007d7c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8007d86:	e007      	b.n	8007d98 <sl_wfx_send_join_command+0xac>
  } else {
    connect_request->mgmt_frame_protection = sl_wfx_htole16(management_frame_protection);
 8007d88:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fec9 	bl	8007b22 <uint16_identity>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	85da      	strh	r2, [r3, #46]	; 0x2e
  }
  connect_request->password_length       = sl_wfx_htole16(passkey_length);
 8007d98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fec0 	bl	8007b22 <uint16_identity>
 8007da2:	4603      	mov	r3, r0
 8007da4:	461a      	mov	r2, r3
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	861a      	strh	r2, [r3, #48]	; 0x30
  connect_request->ie_data_length        = sl_wfx_htole16(ie_data_length);
 8007daa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff feb7 	bl	8007b22 <uint16_identity>
 8007db4:	4603      	mov	r3, r0
 8007db6:	461a      	mov	r2, r3
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  memcpy(connect_request->ssid_def.ssid, ssid, ssid_length);
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	68f9      	ldr	r1, [r7, #12]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f013 fb83 	bl	801b4d2 <memcpy>
  memcpy(connect_request->password, passkey, passkey_length);
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	3332      	adds	r3, #50	; 0x32
 8007dd0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f013 fb7b 	bl	801b4d2 <memcpy>
  memcpy(connect_request + 1, ie_data, ie_data_length);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	3374      	adds	r3, #116	; 0x74
 8007de0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8007de4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007de6:	4618      	mov	r0, r3
 8007de8:	f013 fb73 	bl	801b4d2 <memcpy>
  if (bssid != NULL) {
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d007      	beq.n	8007e02 <sl_wfx_send_join_command+0x116>
    memcpy(connect_request->bssid, &bssid->octet, SL_WFX_BSSID_SIZE);
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	3324      	adds	r3, #36	; 0x24
 8007df6:	6879      	ldr	r1, [r7, #4]
 8007df8:	2206      	movs	r2, #6
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f013 fb69 	bl	801b4d2 <memcpy>
 8007e00:	e006      	b.n	8007e10 <sl_wfx_send_join_command+0x124>
  } else {
    memset(connect_request->bssid, 0xFF, SL_WFX_BSSID_SIZE);
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	2206      	movs	r2, #6
 8007e08:	21ff      	movs	r1, #255	; 0xff
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f013 faa4 	bl	801b358 <memset>
  }

  result = sl_wfx_send_request(SL_WFX_CONNECT_REQ_ID, frame, request_length);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	b292      	uxth	r2, r2
 8007e16:	4619      	mov	r1, r3
 8007e18:	2043      	movs	r0, #67	; 0x43
 8007e1a:	f000 f90b 	bl	8008034 <sl_wfx_send_request>
 8007e1e:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d116      	bne.n	8007e54 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONNECT_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007e26:	f107 0314 	add.w	r3, r7, #20
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007e30:	2043      	movs	r0, #67	; 0x43
 8007e32:	f000 ffa3 	bl	8008d7c <sl_wfx_host_wait_for_confirmation>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <sl_wfx_send_join_command+0x168>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONNECT_REQ_ID);
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fe79 	bl	8007b3a <uint32_identity>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2143      	movs	r1, #67	; 0x43
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 fd61 	bl	8008914 <sl_wfx_get_status_code>
 8007e52:	6278      	str	r0, [r7, #36]	; 0x24

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	2b07      	cmp	r3, #7
 8007e58:	d10d      	bne.n	8007e76 <sl_wfx_send_join_command+0x18a>
    if (sl_wfx_context->used_buffers > 0) {
 8007e5a:	4b0e      	ldr	r3, [pc, #56]	; (8007e94 <sl_wfx_send_join_command+0x1a8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d007      	beq.n	8007e76 <sl_wfx_send_join_command+0x18a>
      sl_wfx_context->used_buffers--;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	; (8007e94 <sl_wfx_send_join_command+0x1a8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8007e6e:	3a01      	subs	r2, #1
 8007e70:	b292      	uxth	r2, r2
 8007e72:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <sl_wfx_send_join_command+0x19c>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONNECT_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	2143      	movs	r1, #67	; 0x43
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fe44 	bl	8008b10 <sl_wfx_free_command_buffer>
  }
  return result;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3728      	adds	r7, #40	; 0x28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000a94 	.word	0x20000a94

08007e98 <sl_wfx_send_ethernet_frame>:
 *****************************************************************************/
sl_status_t sl_wfx_send_ethernet_frame(sl_wfx_send_frame_req_t *frame,
                                       uint32_t data_length,
                                       sl_wfx_interface_t interface,
                                       uint8_t priority)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	71fb      	strb	r3, [r7, #7]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	71bb      	strb	r3, [r7, #6]
  sl_status_t result;
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_send_frame_req_t) + data_length);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	617b      	str	r3, [r7, #20]

  sl_wfx_context->data_frame_id++;
 8007eba:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <sl_wfx_send_ethernet_frame+0xa8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f8b3 2204 	ldrh.w	r2, [r3, #516]	; 0x204
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	b292      	uxth	r2, r2
 8007ec6:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204

  frame->header.length           = sl_wfx_htole16(data_length + sizeof(sl_wfx_send_frame_req_t));
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	330c      	adds	r3, #12
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fe25 	bl	8007b22 <uint16_identity>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	461a      	mov	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	801a      	strh	r2, [r3, #0]
  frame->header.id               = SL_WFX_SEND_FRAME_REQ_ID;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	224a      	movs	r2, #74	; 0x4a
 8007ee4:	709a      	strb	r2, [r3, #2]
  frame->header.info             = (interface << SL_WFX_MSG_INFO_INTERFACE_OFFSET) & SL_WFX_MSG_INFO_INTERFACE_MASK;
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0306 	and.w	r3, r3, #6
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	70da      	strb	r2, [r3, #3]
  frame->body.frame_type         = WFM_FRAME_TYPE_DATA;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2208      	movs	r2, #8
 8007efa:	711a      	strb	r2, [r3, #4]
  frame->body.priority           = priority;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	79ba      	ldrb	r2, [r7, #6]
 8007f00:	715a      	strb	r2, [r3, #5]
  frame->body.packet_id          = sl_wfx_htole16(sl_wfx_context->data_frame_id);
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <sl_wfx_send_ethernet_frame+0xa8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fe09 	bl	8007b22 <uint16_identity>
 8007f10:	4603      	mov	r3, r0
 8007f12:	461a      	mov	r2, r3
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	80da      	strh	r2, [r3, #6]
  frame->body.packet_data_length = sl_wfx_htole32(data_length);
 8007f18:	68b8      	ldr	r0, [r7, #8]
 8007f1a:	f7ff fe0e 	bl	8007b3a <uint32_identity>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	609a      	str	r2, [r3, #8]

  result = sl_wfx_send_request(SL_WFX_SEND_FRAME_REQ_ID, (sl_wfx_generic_message_t*) frame, request_length);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	204a      	movs	r0, #74	; 0x4a
 8007f2e:	f000 f881 	bl	8008034 <sl_wfx_send_request>
 8007f32:	6138      	str	r0, [r7, #16]

  return result;
 8007f34:	693b      	ldr	r3, [r7, #16]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000a94 	.word	0x20000a94

08007f44 <sl_wfx_send_configuration>:
 * SL_STATUS_FAIL otherwise
 *
 * @note The PDS (Platform Data Set) file contains the WF200 settings
 *****************************************************************************/
sl_status_t sl_wfx_send_configuration(const char *pds_data, uint32_t pds_data_length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  sl_status_t                      result         = SL_STATUS_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
  sl_wfx_generic_message_t        *frame          = NULL;
 8007f52:	2300      	movs	r3, #0
 8007f54:	613b      	str	r3, [r7, #16]
  sl_wfx_configuration_cnf_t      *reply          = NULL;
 8007f56:	2300      	movs	r3, #0
 8007f58:	60fb      	str	r3, [r7, #12]
  sl_wfx_configuration_req_body_t *config_request = NULL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	61bb      	str	r3, [r7, #24]
  uint32_t request_length = SL_WFX_ROUND_UP_EVEN(sizeof(sl_wfx_configuration_req_t) + pds_data_length);
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	3306      	adds	r3, #6
 8007f68:	617b      	str	r3, [r7, #20]

  result = sl_wfx_allocate_command_buffer(&frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER, request_length);
 8007f6a:	f107 0010 	add.w	r0, r7, #16
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2202      	movs	r2, #2
 8007f72:	2109      	movs	r1, #9
 8007f74:	f000 fdae 	bl	8008ad4 <sl_wfx_allocate_command_buffer>
 8007f78:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d137      	bne.n	8007ff0 <sl_wfx_send_configuration+0xac>

  frame->header.info = SL_WFX_STA_INTERFACE << SL_WFX_MSG_INFO_INTERFACE_OFFSET;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2200      	movs	r2, #0
 8007f84:	70da      	strb	r2, [r3, #3]

  config_request = (sl_wfx_configuration_req_body_t *)&frame->body;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	61bb      	str	r3, [r7, #24]
  config_request->length = sl_wfx_htole16(pds_data_length);
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7ff fdc6 	bl	8007b22 <uint16_identity>
 8007f96:	4603      	mov	r3, r0
 8007f98:	461a      	mov	r2, r3
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	801a      	strh	r2, [r3, #0]

  memcpy(config_request->pds_data, pds_data, pds_data_length);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	3302      	adds	r3, #2
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f013 fa93 	bl	801b4d2 <memcpy>

  result = sl_wfx_send_request(SL_WFX_CONFIGURATION_REQ_ID, frame, request_length);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	b292      	uxth	r2, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	2009      	movs	r0, #9
 8007fb6:	f000 f83d 	bl	8008034 <sl_wfx_send_request>
 8007fba:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d116      	bne.n	8007ff0 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_host_wait_for_confirmation(SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_DEFAULT_REQUEST_TIMEOUT_MS, (void **)&reply);
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f241 3188 	movw	r1, #5000	; 0x1388
 8007fcc:	2009      	movs	r0, #9
 8007fce:	f000 fed5 	bl	8008d7c <sl_wfx_host_wait_for_confirmation>
 8007fd2:	61f8      	str	r0, [r7, #28]
  SL_WFX_ERROR_CHECK(result);
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <sl_wfx_send_configuration+0xac>

  result = sl_wfx_get_status_code(sl_wfx_htole32(reply->body.status), SL_WFX_CONFIGURATION_REQ_ID);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff fdab 	bl	8007b3a <uint32_identity>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2109      	movs	r1, #9
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f000 fc93 	bl	8008914 <sl_wfx_get_status_code>
 8007fee:	61f8      	str	r0, [r7, #28]

  error_handler:
  if (result == SL_STATUS_TIMEOUT) {
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b07      	cmp	r3, #7
 8007ff4:	d10d      	bne.n	8008012 <sl_wfx_send_configuration+0xce>
    if (sl_wfx_context->used_buffers > 0) {
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <sl_wfx_send_configuration+0xec>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d007      	beq.n	8008012 <sl_wfx_send_configuration+0xce>
      sl_wfx_context->used_buffers--;
 8008002:	4b0b      	ldr	r3, [pc, #44]	; (8008030 <sl_wfx_send_configuration+0xec>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800800a:	3a01      	subs	r2, #1
 800800c:	b292      	uxth	r2, r2
 800800e:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
    }
  }
  if (frame != NULL) {
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d005      	beq.n	8008024 <sl_wfx_send_configuration+0xe0>
    sl_wfx_free_command_buffer(frame, SL_WFX_CONFIGURATION_REQ_ID, SL_WFX_CONTROL_BUFFER);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	2202      	movs	r2, #2
 800801c:	2109      	movs	r1, #9
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fd76 	bl	8008b10 <sl_wfx_free_command_buffer>
  }
  return result;
 8008024:	69fb      	ldr	r3, [r7, #28]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20000a94 	.word	0x20000a94

08008034 <sl_wfx_send_request>:
 * @returns SL_STATUS_OK if the command is sent correctly,
 * SL_STATUS_WOULD_OVERFLOW if the HIF queue is full,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_send_request(uint8_t command_id, sl_wfx_generic_message_t *request, uint16_t request_length)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	4603      	mov	r3, r0
 800803c:	6039      	str	r1, [r7, #0]
 800803e:	71fb      	strb	r3, [r7, #7]
 8008040:	4613      	mov	r3, r2
 8008042:	80bb      	strh	r3, [r7, #4]
  sl_status_t result;
  sl_status_t unlock_result;

  result = sl_wfx_host_lock();
 8008044:	f001 f84a 	bl	80090dc <sl_wfx_host_lock>
 8008048:	60f8      	str	r0, [r7, #12]

  if (result != SL_STATUS_OK) {
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <sl_wfx_send_request+0x28>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Send request lock error %u\n", result);
 8008050:	68f9      	ldr	r1, [r7, #12]
 8008052:	482f      	ldr	r0, [pc, #188]	; (8008110 <sl_wfx_send_request+0xdc>)
 8008054:	f001 f830 	bl	80090b8 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return
    return result;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	e054      	b.n	8008106 <sl_wfx_send_request+0xd2>
  }

  if (sl_wfx_context->used_buffers >= sl_wfx_input_buffer_number) {
 800805c:	4b2d      	ldr	r3, [pc, #180]	; (8008114 <sl_wfx_send_request+0xe0>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008064:	4b2c      	ldr	r3, [pc, #176]	; (8008118 <sl_wfx_send_request+0xe4>)
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	429a      	cmp	r2, r3
 800806a:	d304      	bcc.n	8008076 <sl_wfx_send_request+0x42>
    result = SL_STATUS_WOULD_OVERFLOW;
 800806c:	231d      	movs	r3, #29
 800806e:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d137      	bne.n	80080e6 <sl_wfx_send_request+0xb2>
  }

  // Write the buffer header
  request->header.id     = command_id;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	79fa      	ldrb	r2, [r7, #7]
 800807a:	709a      	strb	r2, [r3, #2]
  request->header.length = sl_wfx_htole16(request_length);
 800807c:	88bb      	ldrh	r3, [r7, #4]
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fd4f 	bl	8007b22 <uint16_identity>
 8008084:	4603      	mov	r3, r0
 8008086:	461a      	mov	r2, r3
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	801a      	strh	r2, [r3, #0]

#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_send(command_id, &request, &request_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK
  if (command_id != SL_WFX_SEND_FRAME_REQ_ID
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b4a      	cmp	r3, #74	; 0x4a
 8008090:	d00a      	beq.n	80080a8 <sl_wfx_send_request+0x74>
      && command_id != SL_WFX_SHUT_DOWN_REQ_ID) {
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	2b32      	cmp	r3, #50	; 0x32
 8008096:	d007      	beq.n	80080a8 <sl_wfx_send_request+0x74>
    result = sl_wfx_host_setup_waited_event(command_id);
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fe5c 	bl	8008d58 <sl_wfx_host_setup_waited_event>
 80080a0:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d11e      	bne.n	80080e6 <sl_wfx_send_request+0xb2>
  }

  if (result != SL_STATUS_OK) {
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <sl_wfx_send_request+0x82>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80080ae:	68f9      	ldr	r1, [r7, #12]
 80080b0:	481a      	ldr	r0, [pc, #104]	; (800811c <sl_wfx_send_request+0xe8>)
 80080b2:	f001 f801 	bl	80090b8 <sl_wfx_host_log>
  }

  result = sl_wfx_host_transmit_frame(request, request_length);
 80080b6:	88bb      	ldrh	r3, [r7, #4]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6838      	ldr	r0, [r7, #0]
 80080bc:	f000 ffee 	bl	800909c <sl_wfx_host_transmit_frame>
 80080c0:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10e      	bne.n	80080e6 <sl_wfx_send_request+0xb2>

  if (result != SL_STATUS_OK) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <sl_wfx_send_request+0xa2>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	4812      	ldr	r0, [pc, #72]	; (800811c <sl_wfx_send_request+0xe8>)
 80080d2:	f000 fff1 	bl	80090b8 <sl_wfx_host_log>
  }

  sl_wfx_context->used_buffers++;
 80080d6:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <sl_wfx_send_request+0xe0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80080de:	3201      	adds	r2, #1
 80080e0:	b292      	uxth	r2, r2
 80080e2:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206

  error_handler:
  unlock_result = sl_wfx_host_unlock();
 80080e6:	f001 f819 	bl	800911c <sl_wfx_host_unlock>
 80080ea:	60b8      	str	r0, [r7, #8]
  if (unlock_result != SL_STATUS_OK) {
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <sl_wfx_send_request+0xc2>
    result = unlock_result;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	60fb      	str	r3, [r7, #12]
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <sl_wfx_send_request+0xd0>
    sl_wfx_host_log("Send request error %u\r\n", result);
 80080fc:	68f9      	ldr	r1, [r7, #12]
 80080fe:	4807      	ldr	r0, [pc, #28]	; (800811c <sl_wfx_send_request+0xe8>)
 8008100:	f000 ffda 	bl	80090b8 <sl_wfx_host_log>
  }
#endif
  return result;
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	0801d430 	.word	0x0801d430
 8008114:	20000a94 	.word	0x20000a94
 8008118:	20000a9a 	.word	0x20000a9a
 800811c:	0801d44c 	.word	0x0801d44c

08008120 <sl_wfx_receive_frame>:
 * @returns SL_STATUS_OK if the frame has been received correctly,
 * SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE if no frame are pending inside the Wi-Fi chip
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_receive_frame(uint16_t *ctrl_reg)
{
 8008120:	b590      	push	{r4, r7, lr}
 8008122:	b08b      	sub	sp, #44	; 0x2c
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  sl_status_t               result;
  sl_status_t               unlock_result;
  sl_wfx_generic_message_t *network_rx_buffer = NULL;
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
  sl_wfx_received_message_type_t message_type;
  sl_wfx_buffer_type_t      buffer_type = SL_WFX_RX_FRAME_BUFFER;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t                  read_length, frame_size;

  result = sl_wfx_host_lock();
 8008132:	f000 ffd3 	bl	80090dc <sl_wfx_host_lock>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

  if (result != SL_STATUS_OK) {
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <sl_wfx_receive_frame+0x2a>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
    sl_wfx_host_log("Receive frame lock error %u\n", result);
 800813e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008140:	4855      	ldr	r0, [pc, #340]	; (8008298 <sl_wfx_receive_frame+0x178>)
 8008142:	f000 ffb9 	bl	80090b8 <sl_wfx_host_log>
#endif
    //if driver lock is not successful, return immediatly
    return result;
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	e0a2      	b.n	8008290 <sl_wfx_receive_frame+0x170>
  }

  frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008152:	005b      	lsls	r3, r3, #1
 8008154:	61fb      	str	r3, [r7, #28]
  /* if frame_size is equal to 0, read the control register to know the frame size */
  if (frame_size == 0) {
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d116      	bne.n	800818a <sl_wfx_receive_frame+0x6a>
    /* Read the control register */
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, ctrl_reg);
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	2001      	movs	r0, #1
 8008160:	f7ff fa71 	bl	8007646 <sl_wfx_reg_read_16>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24
    SL_WFX_ERROR_CHECK(result);
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d175      	bne.n	8008258 <sl_wfx_receive_frame+0x138>
    frame_size = (*ctrl_reg & SL_WFX_CONT_NEXT_LEN_MASK) * 2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	61fb      	str	r3, [r7, #28]
    /* At this point, if frame_size is equal to zero, nothing to be read by the host */
    if (frame_size == 0) {
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d105      	bne.n	800818a <sl_wfx_receive_frame+0x6a>
      result = SL_STATUS_WIFI_NO_PACKET_TO_RECEIVE;
 800817e:	f640 3305 	movw	r3, #2821	; 0xb05
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
      SL_WFX_ERROR_CHECK(result);
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d166      	bne.n	8008258 <sl_wfx_receive_frame+0x138>
    }
  }

  /* retrieve the message type from the control register*/
  message_type = (sl_wfx_received_message_type_t)((*ctrl_reg & SL_WFX_CONT_FRAME_TYPE_INFO) >> SL_WFX_CONT_FRAME_TYPE_OFFSET);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	0b9b      	lsrs	r3, r3, #14
 8008190:	b29b      	uxth	r3, r3
 8008192:	76fb      	strb	r3, [r7, #27]

  /* critical : '+SL_WFX_CONT_REGISTER_SIZE' is to read the piggy-back value at
     the end of the control register. */
  read_length = frame_size + SL_WFX_CONT_REGISTER_SIZE;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	3302      	adds	r3, #2
 8008198:	617b      	str	r3, [r7, #20]

  /* Depending on the message type provided by the control register, allocate a
     control buffer or a ethernet RX frame */
  buffer_type = (message_type == SL_WFX_ETHERNET_DATA_MESSAGE) ? SL_WFX_RX_FRAME_BUFFER : SL_WFX_CONTROL_BUFFER;
 800819a:	7efb      	ldrb	r3, [r7, #27]
 800819c:	2b03      	cmp	r3, #3
 800819e:	d101      	bne.n	80081a4 <sl_wfx_receive_frame+0x84>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e000      	b.n	80081a6 <sl_wfx_receive_frame+0x86>
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
                                       buffer_type,
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <sl_wfx_receive_frame+0x9e>
                                       SL_WFX_ROUND_UP(read_length, SL_WFX_ROUND_UP_VALUE));
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  result = sl_wfx_host_allocate_buffer((void **)&network_rx_buffer,
 80081ba:	3340      	adds	r3, #64	; 0x40
 80081bc:	e000      	b.n	80081c0 <sl_wfx_receive_frame+0xa0>
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80081c4:	f107 000c 	add.w	r0, r7, #12
 80081c8:	461a      	mov	r2, r3
 80081ca:	f000 ff47 	bl	800905c <sl_wfx_host_allocate_buffer>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d140      	bne.n	8008258 <sl_wfx_receive_frame+0x138>

  memset(network_rx_buffer, 0, read_length);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	2100      	movs	r1, #0
 80081dc:	4618      	mov	r0, r3
 80081de:	f013 f8bb 	bl	801b358 <memset>

  /* Read the frame from WF200 */
  result = sl_wfx_data_read(network_rx_buffer, read_length);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fa9b 	bl	8007722 <sl_wfx_data_read>
 80081ec:	6278      	str	r0, [r7, #36]	; 0x24
  SL_WFX_ERROR_CHECK(result);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d131      	bne.n	8008258 <sl_wfx_receive_frame+0x138>

  /* if the frame is a confirmation, decrease used_buffers value */
  if ((sl_wfx_context->used_buffers > 0)
 80081f4:	4b29      	ldr	r3, [pc, #164]	; (800829c <sl_wfx_receive_frame+0x17c>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00c      	beq.n	800821a <sl_wfx_receive_frame+0xfa>
      && (!(network_rx_buffer->header.id & SL_WFX_IND_BASE))) {
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	789b      	ldrb	r3, [r3, #2]
 8008204:	b25b      	sxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	db07      	blt.n	800821a <sl_wfx_receive_frame+0xfa>
    sl_wfx_context->used_buffers--;
 800820a:	4b24      	ldr	r3, [pc, #144]	; (800829c <sl_wfx_receive_frame+0x17c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008212:	3a01      	subs	r2, #1
 8008214:	b292      	uxth	r2, r2
 8008216:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }

  /* read the control register value in the piggy back and pass it to the host */
  *ctrl_reg = sl_wfx_unpack_16bit_little_endian(((uint8_t *)network_rx_buffer) + frame_size);
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b29a      	uxth	r2, r3
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	3301      	adds	r3, #1
 800822a:	440b      	add	r3, r1
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	b29b      	uxth	r3, r3
 8008230:	021b      	lsls	r3, r3, #8
 8008232:	b29b      	uxth	r3, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	801a      	strh	r2, [r3, #0]
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_receive(&network_rx_buffer, read_length);
  SL_WFX_ERROR_CHECK(result);
#endif //SL_WFX_USE_SECURE_LINK

  network_rx_buffer->header.length = sl_wfx_htole16(network_rx_buffer->header.length);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	b29b      	uxth	r3, r3
 8008242:	68fc      	ldr	r4, [r7, #12]
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff fc6c 	bl	8007b22 <uint16_identity>
 800824a:	4603      	mov	r3, r0
 800824c:	8023      	strh	r3, [r4, #0]

  /* send the information to the host */
  result = sl_wfx_host_post_event(network_rx_buffer);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fdd3 	bl	8008dfc <sl_wfx_host_post_event>
 8008256:	6278      	str	r0, [r7, #36]	; 0x24

  error_handler:
  if (network_rx_buffer != NULL) {
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <sl_wfx_receive_frame+0x150>
    sl_wfx_free_command_buffer(network_rx_buffer, network_rx_buffer->header.id, buffer_type);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	4619      	mov	r1, r3
 8008266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826a:	461a      	mov	r2, r3
 800826c:	f000 fc50 	bl	8008b10 <sl_wfx_free_command_buffer>
  }
#ifdef SL_WFX_USE_SECURE_LINK
  result = sl_wfx_secure_link_renegotiate();
#endif //SL_WFX_USE_SECURE_LINK

  unlock_result = sl_wfx_host_unlock();
 8008270:	f000 ff54 	bl	800911c <sl_wfx_host_unlock>
 8008274:	6138      	str	r0, [r7, #16]
  if (unlock_result != SL_STATUS_OK) {
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <sl_wfx_receive_frame+0x160>
    result = unlock_result;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK) {
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <sl_wfx_receive_frame+0x16e>
    sl_wfx_host_log("Receive frame error %u\r\n", result);
 8008286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008288:	4805      	ldr	r0, [pc, #20]	; (80082a0 <sl_wfx_receive_frame+0x180>)
 800828a:	f000 ff15 	bl	80090b8 <sl_wfx_host_log>
  }
#endif
  return result;
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008290:	4618      	mov	r0, r3
 8008292:	372c      	adds	r7, #44	; 0x2c
 8008294:	46bd      	mov	sp, r7
 8008296:	bd90      	pop	{r4, r7, pc}
 8008298:	0801d464 	.word	0x0801d464
 800829c:	20000a94 	.word	0x20000a94
 80082a0:	0801d484 	.word	0x0801d484

080082a4 <sl_wfx_enable_irq>:
 * @return SL_STATUS_OK if the irq is enabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Enable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_enable_irq(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_host_enable_platform_interrupt();
 80082aa:	f001 fc01 	bl	8009ab0 <sl_wfx_host_enable_platform_interrupt>
 80082ae:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d115      	bne.n	80082e2 <sl_wfx_enable_irq+0x3e>

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80082b6:	463b      	mov	r3, r7
 80082b8:	4619      	mov	r1, r3
 80082ba:	2000      	movs	r0, #0
 80082bc:	f7ff fa00 	bl	80076c0 <sl_wfx_reg_read_32>
 80082c0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10c      	bne.n	80082e2 <sl_wfx_enable_irq+0x3e>

  value32 |= SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ce:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	4619      	mov	r1, r3
 80082d4:	2000      	movs	r0, #0
 80082d6:	f7ff fa0d 	bl	80076f4 <sl_wfx_reg_write_32>
 80082da:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0

  error_handler:
 80082e0:	bf00      	nop
  return result;
 80082e2:	687b      	ldr	r3, [r7, #4]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <sl_wfx_disable_irq>:
 * @return SL_STATUS_OK if the irq is disabled correctly, SL_STATUS_FAIL otherwise
 *
 * @note Disable the host irq and set the Wi-Fi chip register accordingly
 *****************************************************************************/
sl_status_t sl_wfx_disable_irq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
  uint32_t    value32;
  sl_status_t result;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80082f2:	463b      	mov	r3, r7
 80082f4:	4619      	mov	r1, r3
 80082f6:	2000      	movs	r0, #0
 80082f8:	f7ff f9e2 	bl	80076c0 <sl_wfx_reg_read_32>
 80082fc:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d112      	bne.n	800832a <sl_wfx_disable_irq+0x3e>

  value32 &= ~SL_WFX_CONFIG_DATA_IRQ_ENABLE;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800830a:	603b      	str	r3, [r7, #0]

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	4619      	mov	r1, r3
 8008310:	2000      	movs	r0, #0
 8008312:	f7ff f9ef 	bl	80076f4 <sl_wfx_reg_write_32>
 8008316:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d105      	bne.n	800832a <sl_wfx_disable_irq+0x3e>

  result = sl_wfx_host_disable_platform_interrupt();
 800831e:	f001 fbd4 	bl	8009aca <sl_wfx_host_disable_platform_interrupt>
 8008322:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0

  error_handler:
 8008328:	bf00      	nop
  return result;
 800832a:	687b      	ldr	r3, [r7, #4]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <sl_wfx_set_access_mode_message>:
 *
 * @return SL_STATUS_OK if the message mode is enabled correctly,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_set_access_mode_message(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
  /* Configure device for MESSAGE MODE */
  sl_status_t result;
  uint32_t    val32;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &val32);
 800833a:	463b      	mov	r3, r7
 800833c:	4619      	mov	r1, r3
 800833e:	2000      	movs	r0, #0
 8008340:	f7ff f9be 	bl	80076c0 <sl_wfx_reg_read_32>
 8008344:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <sl_wfx_set_access_mode_message+0x2e>

  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, val32 & ~SL_WFX_CONFIG_ACCESS_MODE_BIT);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008352:	4619      	mov	r1, r3
 8008354:	2000      	movs	r0, #0
 8008356:	f7ff f9cd 	bl	80076f4 <sl_wfx_reg_write_32>
 800835a:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0

  error_handler:
 8008360:	bf00      	nop
  return result;
 8008362:	687b      	ldr	r3, [r7, #4]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <sl_wfx_init_chip>:
 * @brief Init the Wi-Fi chip
 *
 * @return SL_STATUS_OK if the initialization is successful, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_init_chip(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;
  uint16_t    value16;

  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 8008372:	1d3b      	adds	r3, r7, #4
 8008374:	4619      	mov	r1, r3
 8008376:	2000      	movs	r0, #0
 8008378:	f7ff f9a2 	bl	80076c0 <sl_wfx_reg_read_32>
 800837c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d177      	bne.n	8008474 <sl_wfx_init_chip+0x108>

  /* General purpose registers setting */
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x07208775);
 8008384:	493e      	ldr	r1, [pc, #248]	; (8008480 <sl_wfx_init_chip+0x114>)
 8008386:	2006      	movs	r0, #6
 8008388:	f7ff f9b4 	bl	80076f4 <sl_wfx_reg_write_32>
 800838c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d16f      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x082ec020);
 8008394:	493b      	ldr	r1, [pc, #236]	; (8008484 <sl_wfx_init_chip+0x118>)
 8008396:	2006      	movs	r0, #6
 8008398:	f7ff f9ac 	bl	80076f4 <sl_wfx_reg_write_32>
 800839c:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d167      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x093c3c3c);
 80083a4:	4938      	ldr	r1, [pc, #224]	; (8008488 <sl_wfx_init_chip+0x11c>)
 80083a6:	2006      	movs	r0, #6
 80083a8:	f7ff f9a4 	bl	80076f4 <sl_wfx_reg_write_32>
 80083ac:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d15f      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0b322c44);
 80083b4:	4935      	ldr	r1, [pc, #212]	; (800848c <sl_wfx_init_chip+0x120>)
 80083b6:	2006      	movs	r0, #6
 80083b8:	f7ff f99c 	bl	80076f4 <sl_wfx_reg_write_32>
 80083bc:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d157      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  result = sl_wfx_reg_write_32(SL_WFX_TSET_GEN_R_W_REG_ID, 0x0ca06497);
 80083c4:	4932      	ldr	r1, [pc, #200]	; (8008490 <sl_wfx_init_chip+0x124>)
 80083c6:	2006      	movs	r0, #6
 80083c8:	f7ff f994 	bl	80076f4 <sl_wfx_reg_write_32>
 80083cc:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d14f      	bne.n	8008474 <sl_wfx_init_chip+0x108>

  /* set wake-up bit */
  result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 80083d4:	1cbb      	adds	r3, r7, #2
 80083d6:	4619      	mov	r1, r3
 80083d8:	2001      	movs	r0, #1
 80083da:	f7ff f934 	bl	8007646 <sl_wfx_reg_read_16>
 80083de:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d146      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  value16 |= SL_WFX_CONT_WUP_BIT;
 80083e6:	887b      	ldrh	r3, [r7, #2]
 80083e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	807b      	strh	r3, [r7, #2]
  result = sl_wfx_reg_write_16(SL_WFX_CONTROL_REG_ID, value16);
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	4619      	mov	r1, r3
 80083f4:	2001      	movs	r0, #1
 80083f6:	f7ff f943 	bl	8007680 <sl_wfx_reg_write_16>
 80083fa:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d138      	bne.n	8008474 <sl_wfx_init_chip+0x108>

  /* .. and wait for wake-up */
  for (uint32_t i = 0; i < 200; ++i) {
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	e013      	b.n	8008430 <sl_wfx_init_chip+0xc4>
    result = sl_wfx_reg_read_16(SL_WFX_CONTROL_REG_ID, &value16);
 8008408:	1cbb      	adds	r3, r7, #2
 800840a:	4619      	mov	r1, r3
 800840c:	2001      	movs	r0, #1
 800840e:	f7ff f91a 	bl	8007646 <sl_wfx_reg_read_16>
 8008412:	60f8      	str	r0, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d12c      	bne.n	8008474 <sl_wfx_init_chip+0x108>

    if ((value16 & SL_WFX_CONT_RDY_BIT) == SL_WFX_CONT_RDY_BIT) {
 800841a:	887b      	ldrh	r3, [r7, #2]
 800841c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <sl_wfx_init_chip+0xcc>
      break;
    } else {
      sl_wfx_host_wait(1);
 8008424:	2001      	movs	r0, #1
 8008426:	f000 fcdd 	bl	8008de4 <sl_wfx_host_wait>
  for (uint32_t i = 0; i < 200; ++i) {
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	3301      	adds	r3, #1
 800842e:	60bb      	str	r3, [r7, #8]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2bc7      	cmp	r3, #199	; 0xc7
 8008434:	d9e8      	bls.n	8008408 <sl_wfx_init_chip+0x9c>
 8008436:	e000      	b.n	800843a <sl_wfx_init_chip+0xce>
      break;
 8008438:	bf00      	nop
    }
  }

  if ((value16 & SL_WFX_CONT_RDY_BIT) != SL_WFX_CONT_RDY_BIT) {
 800843a:	887b      	ldrh	r3, [r7, #2]
 800843c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <sl_wfx_init_chip+0xe2>
    result = SL_STATUS_TIMEOUT;
 8008444:	2307      	movs	r3, #7
 8008446:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d112      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  }

  /* check for access mode bit */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 800844e:	1d3b      	adds	r3, r7, #4
 8008450:	4619      	mov	r1, r3
 8008452:	2000      	movs	r0, #0
 8008454:	f7ff f934 	bl	80076c0 <sl_wfx_reg_read_32>
 8008458:	60f8      	str	r0, [r7, #12]
  SL_WFX_ERROR_CHECK(result);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d109      	bne.n	8008474 <sl_wfx_init_chip+0x108>
  if ((value32 & SL_WFX_CONFIG_ACCESS_MODE_BIT) == 0) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <sl_wfx_init_chip+0x106>
    result = SL_STATUS_FAIL;
 800846a:	2301      	movs	r3, #1
 800846c:	60fb      	str	r3, [r7, #12]
    SL_WFX_ERROR_CHECK(result);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2b00      	cmp	r3, #0
  }

  error_handler:
 8008472:	bf00      	nop
  return result;
 8008474:	68fb      	ldr	r3, [r7, #12]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	07208775 	.word	0x07208775
 8008484:	082ec020 	.word	0x082ec020
 8008488:	093c3c3c 	.word	0x093c3c3c
 800848c:	0b322c44 	.word	0x0b322c44
 8008490:	0ca06497 	.word	0x0ca06497

08008494 <sl_wfx_download_run_bootloader>:
 * @brief run the Wi-Fi chip bootloader
 *
 * @return SL_STATUS_OK if the bootloader runs correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_bootloader(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
  sl_status_t result;
  uint32_t    value32;

  result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800849a:	463b      	mov	r3, r7
 800849c:	4619      	mov	r1, r3
 800849e:	481e      	ldr	r0, [pc, #120]	; (8008518 <sl_wfx_download_run_bootloader+0x84>)
 80084a0:	f7ff f998 	bl	80077d4 <sl_wfx_apb_read_32>
 80084a4:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d12f      	bne.n	800850c <sl_wfx_download_run_bootloader+0x78>

  /* release CPU from reset and enable clock */
  result = sl_wfx_reg_read_32(SL_WFX_CONFIG_REG_ID, &value32);
 80084ac:	463b      	mov	r3, r7
 80084ae:	4619      	mov	r1, r3
 80084b0:	2000      	movs	r0, #0
 80084b2:	f7ff f905 	bl	80076c0 <sl_wfx_reg_read_32>
 80084b6:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d126      	bne.n	800850c <sl_wfx_download_run_bootloader+0x78>
  value32 &= ~(SL_WFX_CONFIG_CPU_RESET_BIT | SL_WFX_CONFIG_CPU_CLK_DIS_BIT);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 80084c4:	603b      	str	r3, [r7, #0]
  result = sl_wfx_reg_write_32(SL_WFX_CONFIG_REG_ID, value32);
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	4619      	mov	r1, r3
 80084ca:	2000      	movs	r0, #0
 80084cc:	f7ff f912 	bl	80076f4 <sl_wfx_reg_write_32>
 80084d0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d119      	bne.n	800850c <sl_wfx_download_run_bootloader+0x78>

  /* Testing SRAM access */
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0x23abc88e);
 80084d8:	4910      	ldr	r1, [pc, #64]	; (800851c <sl_wfx_download_run_bootloader+0x88>)
 80084da:	4811      	ldr	r0, [pc, #68]	; (8008520 <sl_wfx_download_run_bootloader+0x8c>)
 80084dc:	f7ff f963 	bl	80077a6 <sl_wfx_apb_write_32>
 80084e0:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d111      	bne.n	800850c <sl_wfx_download_run_bootloader+0x78>

  /* Check if the write command is successful */
  result = sl_wfx_apb_read_32(ADDR_DOWNLOAD_FIFO_BASE, &value32);
 80084e8:	463b      	mov	r3, r7
 80084ea:	4619      	mov	r1, r3
 80084ec:	480c      	ldr	r0, [pc, #48]	; (8008520 <sl_wfx_download_run_bootloader+0x8c>)
 80084ee:	f7ff f971 	bl	80077d4 <sl_wfx_apb_read_32>
 80084f2:	6078      	str	r0, [r7, #4]
  SL_WFX_ERROR_CHECK(result);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d108      	bne.n	800850c <sl_wfx_download_run_bootloader+0x78>
  if (value32 != 0x23abc88e) {
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	4a07      	ldr	r2, [pc, #28]	; (800851c <sl_wfx_download_run_bootloader+0x88>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d003      	beq.n	800850a <sl_wfx_download_run_bootloader+0x76>
    result = SL_STATUS_FAIL;
 8008502:	2301      	movs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
    SL_WFX_ERROR_CHECK(result);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
  }

  error_handler:
 800850a:	bf00      	nop
  return result;
 800850c:	687b      	ldr	r3, [r7, #4]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	0900c010 	.word	0x0900c010
 800851c:	23abc88e 	.word	0x23abc88e
 8008520:	09004000 	.word	0x09004000

08008524 <sl_wfx_download_run_firmware>:
 * SL_STATUS_WIFI_INVALID_KEY if the firmware keyset does not match the chip one,
 * SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT or SL_STATUS_TIMEOUT if the process times out,
 * SL_STATUS_FAIL otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_download_run_firmware(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08c      	sub	sp, #48	; 0x30
 8008528:	af00      	add	r7, sp, #0
  uint32_t       i;
  uint32_t       value32;
  uint32_t       image_length;
  uint32_t       block;
  uint32_t       num_blocks;
  uint32_t       put = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	623b      	str	r3, [r7, #32]
  uint32_t       get = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
  const uint8_t *buffer;

  result = sl_wfx_host_init();
 8008532:	f000 faff 	bl	8008b34 <sl_wfx_host_init>
 8008536:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853a:	2b00      	cmp	r3, #0
 800853c:	f040 8185 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_NOT_READY);
 8008540:	4984      	ldr	r1, [pc, #528]	; (8008754 <sl_wfx_download_run_firmware+0x230>)
 8008542:	4885      	ldr	r0, [pc, #532]	; (8008758 <sl_wfx_download_run_firmware+0x234>)
 8008544:	f7ff f92f 	bl	80077a6 <sl_wfx_apb_write_32>
 8008548:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800854a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854c:	2b00      	cmp	r3, #0
 800854e:	f040 817c 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, 0);
 8008552:	2100      	movs	r1, #0
 8008554:	4881      	ldr	r0, [pc, #516]	; (800875c <sl_wfx_download_run_firmware+0x238>)
 8008556:	f7ff f926 	bl	80077a6 <sl_wfx_apb_write_32>
 800855a:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	f040 8173 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_GET, 0);
 8008564:	2100      	movs	r1, #0
 8008566:	487e      	ldr	r0, [pc, #504]	; (8008760 <sl_wfx_download_run_firmware+0x23c>)
 8008568:	f7ff f91d 	bl	80077a6 <sl_wfx_apb_write_32>
 800856c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2b00      	cmp	r3, #0
 8008572:	f040 816a 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_READY);
 8008576:	497b      	ldr	r1, [pc, #492]	; (8008764 <sl_wfx_download_run_firmware+0x240>)
 8008578:	4877      	ldr	r0, [pc, #476]	; (8008758 <sl_wfx_download_run_firmware+0x234>)
 800857a:	f7ff f914 	bl	80077a6 <sl_wfx_apb_write_32>
 800857e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	2b00      	cmp	r3, #0
 8008584:	f040 8161 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // wait for INFO_READ state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_INFO_READY, 100);
 8008588:	2264      	movs	r2, #100	; 0x64
 800858a:	4977      	ldr	r1, [pc, #476]	; (8008768 <sl_wfx_download_run_firmware+0x244>)
 800858c:	4877      	ldr	r0, [pc, #476]	; (800876c <sl_wfx_download_run_firmware+0x248>)
 800858e:	f000 f96b 	bl	8008868 <sl_wfx_poll_for_value>
 8008592:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 8157 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // read info
  result = sl_wfx_apb_read_32(0x0900C080, &value32);
 800859c:	f107 0310 	add.w	r3, r7, #16
 80085a0:	4619      	mov	r1, r3
 80085a2:	4873      	ldr	r0, [pc, #460]	; (8008770 <sl_wfx_download_run_firmware+0x24c>)
 80085a4:	f7ff f916 	bl	80077d4 <sl_wfx_apb_read_32>
 80085a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 814c 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // retrieve WF200 keyset
  result = sl_wfx_apb_read_32(SL_WFX_PTE_INFO + 12, &value32);
 80085b2:	f107 0310 	add.w	r3, r7, #16
 80085b6:	4619      	mov	r1, r3
 80085b8:	486e      	ldr	r0, [pc, #440]	; (8008774 <sl_wfx_download_run_firmware+0x250>)
 80085ba:	f7ff f90b 	bl	80077d4 <sl_wfx_apb_read_32>
 80085be:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f040 8141 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  encryption_keyset = (value32 >> 8);
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	4b6a      	ldr	r3, [pc, #424]	; (8008778 <sl_wfx_download_run_firmware+0x254>)
 80085d0:	701a      	strb	r2, [r3, #0]

  // report that info is read
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_HOST_INFO_READ);
 80085d2:	496a      	ldr	r1, [pc, #424]	; (800877c <sl_wfx_download_run_firmware+0x258>)
 80085d4:	4860      	ldr	r0, [pc, #384]	; (8008758 <sl_wfx_download_run_firmware+0x234>)
 80085d6:	f7ff f8e6 	bl	80077a6 <sl_wfx_apb_write_32>
 80085da:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 8133 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // wait for READY state
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_READY, 100);
 80085e4:	2264      	movs	r2, #100	; 0x64
 80085e6:	495f      	ldr	r1, [pc, #380]	; (8008764 <sl_wfx_download_run_firmware+0x240>)
 80085e8:	4860      	ldr	r0, [pc, #384]	; (800876c <sl_wfx_download_run_firmware+0x248>)
 80085ea:	f000 f93d 	bl	8008868 <sl_wfx_poll_for_value>
 80085ee:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80085f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f040 8129 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // SB misc initialization. Work around for chips < A2.
  result = sl_wfx_apb_write_32(ADDR_DOWNLOAD_FIFO_BASE, 0xFFFFFFFF);
 80085f8:	f04f 31ff 	mov.w	r1, #4294967295
 80085fc:	4860      	ldr	r0, [pc, #384]	; (8008780 <sl_wfx_download_run_firmware+0x25c>)
 80085fe:	f7ff f8d2 	bl	80077a6 <sl_wfx_apb_write_32>
 8008602:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008606:	2b00      	cmp	r3, #0
 8008608:	f040 811f 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // write image length
  sl_wfx_host_get_firmware_size(&image_length);
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	4618      	mov	r0, r3
 8008612:	f000 fae5 	bl	8008be0 <sl_wfx_host_get_firmware_size>
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_IMAGE_SIZE, image_length - FW_HASH_SIZE - FW_SIGNATURE_SIZE - FW_KEYSET_SIZE);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3b50      	subs	r3, #80	; 0x50
 800861a:	4619      	mov	r1, r3
 800861c:	4859      	ldr	r0, [pc, #356]	; (8008784 <sl_wfx_download_run_firmware+0x260>)
 800861e:	f7ff f8c2 	bl	80077a6 <sl_wfx_apb_write_32>
 8008622:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 810f 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // get firmware keyset, which is the first FW_KEYSET_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_KEYSET_SIZE);
 800862c:	1d3b      	adds	r3, r7, #4
 800862e:	2108      	movs	r1, #8
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fab9 	bl	8008ba8 <sl_wfx_host_get_firmware_data>
 8008636:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 8105 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // check if the firmware keyset corresponds to the chip keyset
  result = sl_wfx_compare_keysets(encryption_keyset, (char *)buffer);
 8008640:	4b4d      	ldr	r3, [pc, #308]	; (8008778 <sl_wfx_download_run_firmware+0x254>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	4611      	mov	r1, r2
 8008648:	4618      	mov	r0, r3
 800864a:	f000 f93c 	bl	80088c6 <sl_wfx_compare_keysets>
 800864e:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 80f9 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // write image signature, which is the next FW_SIGNATURE_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_SIGNATURE_SIZE);
 8008658:	1d3b      	adds	r3, r7, #4
 800865a:	2140      	movs	r1, #64	; 0x40
 800865c:	4618      	mov	r0, r3
 800865e:	f000 faa3 	bl	8008ba8 <sl_wfx_host_get_firmware_data>
 8008662:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	2b00      	cmp	r3, #0
 8008668:	f040 80ef 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_SIGNATURE, buffer, FW_SIGNATURE_SIZE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2240      	movs	r2, #64	; 0x40
 8008670:	4619      	mov	r1, r3
 8008672:	4845      	ldr	r0, [pc, #276]	; (8008788 <sl_wfx_download_run_firmware+0x264>)
 8008674:	f7ff f877 	bl	8007766 <sl_wfx_apb_write>
 8008678:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	f040 80e4 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // write image hash, which is the next  FW_HASH_SIZE of given image
  result = sl_wfx_host_get_firmware_data(&buffer, FW_HASH_SIZE);
 8008682:	1d3b      	adds	r3, r7, #4
 8008684:	2108      	movs	r1, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fa8e 	bl	8008ba8 <sl_wfx_host_get_firmware_data>
 800868c:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	f040 80da 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
  result = sl_wfx_apb_write(ADDR_DWL_CTRL_AREA_FW_HASH, buffer, FW_HASH_SIZE);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2208      	movs	r2, #8
 800869a:	4619      	mov	r1, r3
 800869c:	483b      	ldr	r0, [pc, #236]	; (800878c <sl_wfx_download_run_firmware+0x268>)
 800869e:	f7ff f862 	bl	8007766 <sl_wfx_apb_write>
 80086a2:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 80cf 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // write version, this is a pre-defined value (?)
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_FW_VERSION, FW_VERSION_VALUE);
 80086ac:	2101      	movs	r1, #1
 80086ae:	4838      	ldr	r0, [pc, #224]	; (8008790 <sl_wfx_download_run_firmware+0x26c>)
 80086b0:	f7ff f879 	bl	80077a6 <sl_wfx_apb_write_32>
 80086b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f040 80c6 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // notify NCP that upload is starting
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_PENDING);
 80086be:	4935      	ldr	r1, [pc, #212]	; (8008794 <sl_wfx_download_run_firmware+0x270>)
 80086c0:	4825      	ldr	r0, [pc, #148]	; (8008758 <sl_wfx_download_run_firmware+0x234>)
 80086c2:	f7ff f870 	bl	80077a6 <sl_wfx_apb_write_32>
 80086c6:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 80bd 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

  // skip signature and hash from image length
  image_length -= (FW_HASH_SIZE + FW_SIGNATURE_SIZE + FW_KEYSET_SIZE);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3b50      	subs	r3, #80	; 0x50
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Calculate number of download blocks */
  num_blocks = (image_length - 1) / DOWNLOAD_BLOCK_SIZE + 1;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3b01      	subs	r3, #1
 80086da:	0a9b      	lsrs	r3, r3, #10
 80086dc:	3301      	adds	r3, #1
 80086de:	61bb      	str	r3, [r7, #24]

  /* Firmware downloading loop */
  for ( block = 0; block < num_blocks; block++ ) {
 80086e0:	2300      	movs	r3, #0
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
 80086e4:	e093      	b.n	800880e <sl_wfx_download_run_firmware+0x2ea>
    /* loop until put - get <= 24K */
    for ( i = 0; i < 100; i++ ) {
 80086e6:	2300      	movs	r3, #0
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ea:	e015      	b.n	8008718 <sl_wfx_download_run_firmware+0x1f4>
      if ((put - get) <= (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 80086f6:	d913      	bls.n	8008720 <sl_wfx_download_run_firmware+0x1fc>
        break;
      }

      get = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	60bb      	str	r3, [r7, #8]
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_GET, &get);
 80086fc:	f107 0308 	add.w	r3, r7, #8
 8008700:	4619      	mov	r1, r3
 8008702:	4817      	ldr	r0, [pc, #92]	; (8008760 <sl_wfx_download_run_firmware+0x23c>)
 8008704:	f7ff f866 	bl	80077d4 <sl_wfx_apb_read_32>
 8008708:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 800870a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870c:	2b00      	cmp	r3, #0
 800870e:	f040 809c 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>
    for ( i = 0; i < 100; i++ ) {
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	3301      	adds	r3, #1
 8008716:	62bb      	str	r3, [r7, #40]	; 0x28
 8008718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871a:	2b63      	cmp	r3, #99	; 0x63
 800871c:	d9e6      	bls.n	80086ec <sl_wfx_download_run_firmware+0x1c8>
 800871e:	e000      	b.n	8008722 <sl_wfx_download_run_firmware+0x1fe>
        break;
 8008720:	bf00      	nop
    }

    if ((put - get) > (DOWNLOAD_FIFO_SIZE - DOWNLOAD_BLOCK_SIZE)) {
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6a3a      	ldr	r2, [r7, #32]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	f5b3 4ff8 	cmp.w	r3, #31744	; 0x7c00
 800872c:	d93a      	bls.n	80087a4 <sl_wfx_download_run_firmware+0x280>
      /* check the download status in NCP */
      result = sl_wfx_apb_read_32(ADDR_DWL_CTRL_AREA_NCP_STATUS, &value32);
 800872e:	f107 0310 	add.w	r3, r7, #16
 8008732:	4619      	mov	r1, r3
 8008734:	480d      	ldr	r0, [pc, #52]	; (800876c <sl_wfx_download_run_firmware+0x248>)
 8008736:	f7ff f84d 	bl	80077d4 <sl_wfx_apb_read_32>
 800873a:	62f8      	str	r0, [r7, #44]	; 0x2c
      SL_WFX_ERROR_CHECK(result);
 800873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 8083 	bne.w	800884a <sl_wfx_download_run_firmware+0x326>

      if (value32 != NCP_STATE_DOWNLOAD_PENDING) {
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4a13      	ldr	r2, [pc, #76]	; (8008794 <sl_wfx_download_run_firmware+0x270>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d025      	beq.n	8008798 <sl_wfx_download_run_firmware+0x274>
        result = SL_STATUS_FAIL;
 800874c:	2301      	movs	r3, #1
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008750:	e025      	b.n	800879e <sl_wfx_download_run_firmware+0x27a>
 8008752:	bf00      	nop
 8008754:	12345678 	.word	0x12345678
 8008758:	0900c00c 	.word	0x0900c00c
 800875c:	0900c004 	.word	0x0900c004
 8008760:	0900c008 	.word	0x0900c008
 8008764:	87654321 	.word	0x87654321
 8008768:	bd53ef99 	.word	0xbd53ef99
 800876c:	0900c010 	.word	0x0900c010
 8008770:	0900c080 	.word	0x0900c080
 8008774:	0900c0cc 	.word	0x0900c0cc
 8008778:	20000a98 	.word	0x20000a98
 800877c:	a753bd99 	.word	0xa753bd99
 8008780:	09004000 	.word	0x09004000
 8008784:	0900c000 	.word	0x0900c000
 8008788:	0900c014 	.word	0x0900c014
 800878c:	0900c054 	.word	0x0900c054
 8008790:	0900c05c 	.word	0x0900c05c
 8008794:	abcddcba 	.word	0xabcddcba
      } else {
        result = SL_STATUS_WIFI_FIRMWARE_DOWNLOAD_TIMEOUT;
 8008798:	f640 3302 	movw	r3, #2818	; 0xb02
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      SL_WFX_ERROR_CHECK(result);
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d152      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>
    }

    /* calculate the block size */
    uint32_t block_size = image_length - put;
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	61fb      	str	r3, [r7, #28]
    if (block_size > DOWNLOAD_BLOCK_SIZE) {
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b2:	d902      	bls.n	80087ba <sl_wfx_download_run_firmware+0x296>
      block_size = DOWNLOAD_BLOCK_SIZE;
 80087b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b8:	61fb      	str	r3, [r7, #28]
    }

    /* send the block to SRAM */
    result = sl_wfx_host_get_firmware_data(&buffer, block_size);
 80087ba:	1d3b      	adds	r3, r7, #4
 80087bc:	69f9      	ldr	r1, [r7, #28]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 f9f2 	bl	8008ba8 <sl_wfx_host_get_firmware_data>
 80087c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d13e      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>
    uint32_t block_address = ADDR_DOWNLOAD_FIFO_BASE + (put % DOWNLOAD_FIFO_SIZE);
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80087d2:	f103 6310 	add.w	r3, r3, #150994944	; 0x9000000
 80087d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80087da:	617b      	str	r3, [r7, #20]
    result = sl_wfx_apb_write(block_address, buffer, block_size);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	4619      	mov	r1, r3
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f7fe ffbf 	bl	8007766 <sl_wfx_apb_write>
 80087e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 80087ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d12c      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>
#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_FW_LOAD)
    sl_wfx_host_log("FW> %d/%d \n\r", put, image_length);
#endif

    /* update the put register */
    put += block_size;
 80087f0:	6a3a      	ldr	r2, [r7, #32]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	4413      	add	r3, r2
 80087f6:	623b      	str	r3, [r7, #32]

    result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_PUT, put);
 80087f8:	6a39      	ldr	r1, [r7, #32]
 80087fa:	4816      	ldr	r0, [pc, #88]	; (8008854 <sl_wfx_download_run_firmware+0x330>)
 80087fc:	f7fe ffd3 	bl	80077a6 <sl_wfx_apb_write_32>
 8008800:	62f8      	str	r0, [r7, #44]	; 0x2c
    SL_WFX_ERROR_CHECK(result);
 8008802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008804:	2b00      	cmp	r3, #0
 8008806:	d120      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>
  for ( block = 0; block < num_blocks; block++ ) {
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	3301      	adds	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	429a      	cmp	r2, r3
 8008814:	f4ff af67 	bcc.w	80086e6 <sl_wfx_download_run_firmware+0x1c2>
  }   /* End of firmware download loop */

  // notify NCP that upload ended
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_UPLOAD_COMPLETE);
 8008818:	490f      	ldr	r1, [pc, #60]	; (8008858 <sl_wfx_download_run_firmware+0x334>)
 800881a:	4810      	ldr	r0, [pc, #64]	; (800885c <sl_wfx_download_run_firmware+0x338>)
 800881c:	f7fe ffc3 	bl	80077a6 <sl_wfx_apb_write_32>
 8008820:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008824:	2b00      	cmp	r3, #0
 8008826:	d110      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>

  // wait for authentication result
  result = sl_wfx_poll_for_value(ADDR_DWL_CTRL_AREA_NCP_STATUS, NCP_STATE_AUTH_OK, 100);
 8008828:	2264      	movs	r2, #100	; 0x64
 800882a:	490b      	ldr	r1, [pc, #44]	; (8008858 <sl_wfx_download_run_firmware+0x334>)
 800882c:	480c      	ldr	r0, [pc, #48]	; (8008860 <sl_wfx_download_run_firmware+0x33c>)
 800882e:	f000 f81b 	bl	8008868 <sl_wfx_poll_for_value>
 8008832:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008836:	2b00      	cmp	r3, #0
 8008838:	d107      	bne.n	800884a <sl_wfx_download_run_firmware+0x326>

  // notify NCP that we are happy to run firmware
  result = sl_wfx_apb_write_32(ADDR_DWL_CTRL_AREA_HOST_STATUS, HOST_STATE_OK_TO_JUMP);
 800883a:	490a      	ldr	r1, [pc, #40]	; (8008864 <sl_wfx_download_run_firmware+0x340>)
 800883c:	4807      	ldr	r0, [pc, #28]	; (800885c <sl_wfx_download_run_firmware+0x338>)
 800883e:	f7fe ffb2 	bl	80077a6 <sl_wfx_apb_write_32>
 8008842:	62f8      	str	r0, [r7, #44]	; 0x2c
  SL_WFX_ERROR_CHECK(result);
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	2b00      	cmp	r3, #0

  error_handler:
 8008848:	bf00      	nop
  return result;
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800884c:	4618      	mov	r0, r3
 800884e:	3730      	adds	r7, #48	; 0x30
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	0900c004 	.word	0x0900c004
 8008858:	d4c64a99 	.word	0xd4c64a99
 800885c:	0900c00c 	.word	0x0900c00c
 8008860:	0900c010 	.word	0x0900c010
 8008864:	174fc882 	.word	0x174fc882

08008868 <sl_wfx_poll_for_value>:
 * @return SL_STATUS_OK if the value is received correctly,
 * SL_STATUS_TIMEOUT if the value is not found in time,
 * SL_STATUS_FAIL if not able to poll the value from the Wi-Fi chip
 *****************************************************************************/
static sl_status_t sl_wfx_poll_for_value(uint32_t address, uint32_t polled_value, uint32_t max_retries)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  uint32_t    value;
  sl_status_t result = SL_STATUS_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	617b      	str	r3, [r7, #20]

  for (; max_retries > 0; max_retries--) {
 8008878:	e013      	b.n	80088a2 <sl_wfx_poll_for_value+0x3a>
    result = sl_wfx_apb_read_32(address, &value);
 800887a:	f107 0310 	add.w	r3, r7, #16
 800887e:	4619      	mov	r1, r3
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f7fe ffa7 	bl	80077d4 <sl_wfx_apb_read_32>
 8008886:	6178      	str	r0, [r7, #20]
    SL_WFX_ERROR_CHECK(result);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d116      	bne.n	80088bc <sl_wfx_poll_for_value+0x54>
    if (value == polled_value) {
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	429a      	cmp	r2, r3
 8008894:	d009      	beq.n	80088aa <sl_wfx_poll_for_value+0x42>
      break;
    } else {
      sl_wfx_host_wait(1);
 8008896:	2001      	movs	r0, #1
 8008898:	f000 faa4 	bl	8008de4 <sl_wfx_host_wait>
  for (; max_retries > 0; max_retries--) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e8      	bne.n	800887a <sl_wfx_poll_for_value+0x12>
 80088a8:	e000      	b.n	80088ac <sl_wfx_poll_for_value+0x44>
      break;
 80088aa:	bf00      	nop
    }
  }
  if (value != polled_value) {
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d002      	beq.n	80088ba <sl_wfx_poll_for_value+0x52>
    result = SL_STATUS_TIMEOUT;
 80088b4:	2307      	movs	r3, #7
 80088b6:	617b      	str	r3, [r7, #20]
 80088b8:	e000      	b.n	80088bc <sl_wfx_poll_for_value+0x54>
  }

  error_handler:
 80088ba:	bf00      	nop
  return result;
 80088bc:	697b      	ldr	r3, [r7, #20]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <sl_wfx_compare_keysets>:
 * @param firmware_keyset is the 8 first bytes of the firmware
 * @return SL_STATUS_OK if the firmware is compatible with the WF200,
 * SL_STATUS_WIFI_INVALID_KEY otherwise
 *****************************************************************************/
static sl_status_t sl_wfx_compare_keysets(uint8_t chip_keyset, char *firmware_keyset)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	4603      	mov	r3, r0
 80088ce:	6039      	str	r1, [r7, #0]
 80088d0:	71fb      	strb	r3, [r7, #7]
  sl_status_t result;
  char        keyset_string[3];
  uint8_t     keyset_value;

  keyset_string[0] = *(firmware_keyset + 6);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	799b      	ldrb	r3, [r3, #6]
 80088d6:	723b      	strb	r3, [r7, #8]
  keyset_string[1] = *(firmware_keyset + 7);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	79db      	ldrb	r3, [r3, #7]
 80088dc:	727b      	strb	r3, [r7, #9]
  keyset_string[2] = '\0';
 80088de:	2300      	movs	r3, #0
 80088e0:	72bb      	strb	r3, [r7, #10]
  keyset_value     = (uint8_t)strtoul(keyset_string, NULL, 16);
 80088e2:	f107 0308 	add.w	r3, r7, #8
 80088e6:	2210      	movs	r2, #16
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f011 fea0 	bl	801a630 <strtoul>
 80088f0:	4603      	mov	r3, r0
 80088f2:	72fb      	strb	r3, [r7, #11]

  if (keyset_value == chip_keyset) {
 80088f4:	7afa      	ldrb	r2, [r7, #11]
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d102      	bne.n	8008902 <sl_wfx_compare_keysets+0x3c>
    result = SL_STATUS_OK;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e002      	b.n	8008908 <sl_wfx_compare_keysets+0x42>
  } else {
    result = SL_STATUS_WIFI_INVALID_KEY;
 8008902:	f640 3301 	movw	r3, #2817	; 0xb01
 8008906:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008908:	68fb      	ldr	r3, [r7, #12]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <sl_wfx_get_status_code>:
 * @param wfx_status is the status returned by the WFx
 * @param command_id is the ID of the command
 * @return corresponding driver status code enumerated in sl_status_t
 *****************************************************************************/
sl_status_t sl_wfx_get_status_code(uint32_t wfx_status, uint8_t command_id)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
  sl_status_t result;

  if (command_id & SL_WFX_MSG_ID_GENERAL_API_MASK) {
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b00      	cmp	r3, #0
 8008928:	d05b      	beq.n	80089e2 <sl_wfx_get_status_code+0xce>
    switch (wfx_status) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f241 2256 	movw	r2, #4694	; 0x1256
 8008930:	4293      	cmp	r3, r2
 8008932:	d045      	beq.n	80089c0 <sl_wfx_get_status_code+0xac>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f241 2256 	movw	r2, #4694	; 0x1256
 800893a:	4293      	cmp	r3, r2
 800893c:	d84e      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f241 2234 	movw	r2, #4660	; 0x1234
 8008944:	4293      	cmp	r3, r2
 8008946:	d038      	beq.n	80089ba <sl_wfx_get_status_code+0xa6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f241 2234 	movw	r2, #4660	; 0x1234
 800894e:	4293      	cmp	r3, r2
 8008950:	d844      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2baf      	cmp	r3, #175	; 0xaf
 8008956:	d033      	beq.n	80089c0 <sl_wfx_get_status_code+0xac>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2baf      	cmp	r3, #175	; 0xaf
 800895c:	d83e      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b9e      	cmp	r3, #158	; 0x9e
 8008962:	d02a      	beq.n	80089ba <sl_wfx_get_status_code+0xa6>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b9e      	cmp	r3, #158	; 0x9e
 8008968:	d838      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b8d      	cmp	r3, #141	; 0x8d
 800896e:	d027      	beq.n	80089c0 <sl_wfx_get_status_code+0xac>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b8d      	cmp	r3, #141	; 0x8d
 8008974:	d832      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b7c      	cmp	r3, #124	; 0x7c
 800897a:	d021      	beq.n	80089c0 <sl_wfx_get_status_code+0xac>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b7c      	cmp	r3, #124	; 0x7c
 8008980:	d82c      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b6b      	cmp	r3, #107	; 0x6b
 8008986:	d01b      	beq.n	80089c0 <sl_wfx_get_status_code+0xac>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b6b      	cmp	r3, #107	; 0x6b
 800898c:	d826      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2b04      	cmp	r3, #4
 8008992:	d80f      	bhi.n	80089b4 <sl_wfx_get_status_code+0xa0>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2b04      	cmp	r3, #4
 8008998:	d820      	bhi.n	80089dc <sl_wfx_get_status_code+0xc8>
 800899a:	a201      	add	r2, pc, #4	; (adr r2, 80089a0 <sl_wfx_get_status_code+0x8c>)
 800899c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a0:	080089bb 	.word	0x080089bb
 80089a4:	080089c1 	.word	0x080089c1
 80089a8:	080089c7 	.word	0x080089c7
 80089ac:	080089cd 	.word	0x080089cd
 80089b0:	080089d5 	.word	0x080089d5
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b5a      	cmp	r3, #90	; 0x5a
 80089b8:	d110      	bne.n	80089dc <sl_wfx_get_status_code+0xc8>
      case SL_WFX_STATUS_SUCCESS:
      case SL_WFX_MAC_KEY_STATUS_SUCCESS:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_SUCCESS:
      case SL_WFX_PREVENT_ROLLBACK_CNF_SUCCESS:
        result = SL_STATUS_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	60fb      	str	r3, [r7, #12]
        break;
 80089be:	e075      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case SL_WFX_MAC_KEY_STATUS_FAILED_KEY_ALREADY_BURNED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_RAM_MODE_NOT_ALLOWED:
      case SL_WFX_MAC_KEY_STATUS_FAILED_UNKNOWN_MODE:
      case SL_WFX_PUB_KEY_EXCHANGE_STATUS_FAILED:
      case SL_WFX_PREVENT_ROLLBACK_CNF_WRONG_MAGIC_WORD:
        result = SL_STATUS_FAIL;
 80089c0:	2301      	movs	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
        break;
 80089c4:	e072      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case SL_WFX_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 80089c6:	2321      	movs	r3, #33	; 0x21
 80089c8:	60fb      	str	r3, [r7, #12]
        break;
 80089ca:	e06f      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case SL_WFX_STATUS_GPIO_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 80089cc:	f640 3304 	movw	r3, #2820	; 0xb04
 80089d0:	60fb      	str	r3, [r7, #12]
        break;
 80089d2:	e06b      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case SL_WFX_ERROR_UNSUPPORTED_MSG_ID:
        result = SL_STATUS_WIFI_UNSUPPORTED_MESSAGE_ID;
 80089d4:	f640 3303 	movw	r3, #2819	; 0xb03
 80089d8:	60fb      	str	r3, [r7, #12]
        break;
 80089da:	e067      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 80089dc:	2301      	movs	r3, #1
 80089de:	60fb      	str	r3, [r7, #12]
        break;
 80089e0:	e064      	b.n	8008aac <sl_wfx_get_status_code+0x198>
    }
  } else {
    switch (wfx_status) {
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b14      	cmp	r3, #20
 80089e6:	d85e      	bhi.n	8008aa6 <sl_wfx_get_status_code+0x192>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <sl_wfx_get_status_code+0xdc>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a45 	.word	0x08008a45
 80089f4:	08008a4b 	.word	0x08008a4b
 80089f8:	08008a51 	.word	0x08008a51
 80089fc:	08008a59 	.word	0x08008a59
 8008a00:	08008a5f 	.word	0x08008a5f
 8008a04:	08008a67 	.word	0x08008a67
 8008a08:	08008a6f 	.word	0x08008a6f
 8008a0c:	08008a77 	.word	0x08008a77
 8008a10:	08008a7f 	.word	0x08008a7f
 8008a14:	08008a87 	.word	0x08008a87
 8008a18:	08008a8f 	.word	0x08008a8f
 8008a1c:	08008aa7 	.word	0x08008aa7
 8008a20:	08008aa7 	.word	0x08008aa7
 8008a24:	08008aa7 	.word	0x08008aa7
 8008a28:	08008aa7 	.word	0x08008aa7
 8008a2c:	08008aa7 	.word	0x08008aa7
 8008a30:	08008aa7 	.word	0x08008aa7
 8008a34:	08008aa7 	.word	0x08008aa7
 8008a38:	08008aa7 	.word	0x08008aa7
 8008a3c:	08008a97 	.word	0x08008a97
 8008a40:	08008a9f 	.word	0x08008a9f
      case WFM_STATUS_SUCCESS:
        result = SL_STATUS_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
        break;
 8008a48:	e030      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_INVALID_PARAMETER:
        result = SL_STATUS_INVALID_PARAMETER;
 8008a4a:	2321      	movs	r3, #33	; 0x21
 8008a4c:	60fb      	str	r3, [r7, #12]
        break;
 8008a4e:	e02d      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WRONG_STATE:
        result = SL_STATUS_WIFI_WRONG_STATE;
 8008a50:	f640 3318 	movw	r3, #2840	; 0xb18
 8008a54:	60fb      	str	r3, [r7, #12]
        break;
 8008a56:	e029      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_GENERAL_FAILURE:
        result = SL_STATUS_FAIL;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	60fb      	str	r3, [r7, #12]
        break;
 8008a5c:	e026      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CHANNEL_NOT_ALLOWED:
        result = SL_STATUS_WIFI_CHANNEL_NOT_ALLOWED;
 8008a5e:	f640 3319 	movw	r3, #2841	; 0xb19
 8008a62:	60fb      	str	r3, [r7, #12]
        break;
 8008a64:	e022      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_WARNING:
        result = SL_STATUS_WIFI_WARNING;
 8008a66:	f640 3304 	movw	r3, #2820	; 0xb04
 8008a6a:	60fb      	str	r3, [r7, #12]
        break;
 8008a6c:	e01e      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_NO_MATCHING_AP:
        result = SL_STATUS_WIFI_NO_MATCHING_AP;
 8008a6e:	f640 331a 	movw	r3, #2842	; 0xb1a
 8008a72:	60fb      	str	r3, [r7, #12]
        break;
 8008a74:	e01a      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_ABORTED:
        result = SL_STATUS_WIFI_CONNECTION_ABORTED;
 8008a76:	f640 331b 	movw	r3, #2843	; 0xb1b
 8008a7a:	60fb      	str	r3, [r7, #12]
        break;
 8008a7c:	e016      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_TIMEOUT:
        result = SL_STATUS_WIFI_CONNECTION_TIMEOUT;
 8008a7e:	f640 331c 	movw	r3, #2844	; 0xb1c
 8008a82:	60fb      	str	r3, [r7, #12]
        break;
 8008a84:	e012      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
        result = SL_STATUS_WIFI_CONNECTION_REJECTED_BY_AP;
 8008a86:	f640 331d 	movw	r3, #2845	; 0xb1d
 8008a8a:	60fb      	str	r3, [r7, #12]
        break;
 8008a8c:	e00e      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_CONNECTION_AUTH_FAILURE:
        result = SL_STATUS_WIFI_CONNECTION_AUTH_FAILURE;
 8008a8e:	f640 331e 	movw	r3, #2846	; 0xb1e
 8008a92:	60fb      	str	r3, [r7, #12]
        break;
 8008a94:	e00a      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_RETRY_EXCEEDED:
        result = SL_STATUS_WIFI_RETRY_EXCEEDED;
 8008a96:	f640 331f 	movw	r3, #2847	; 0xb1f
 8008a9a:	60fb      	str	r3, [r7, #12]
        break;
 8008a9c:	e006      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      case WFM_STATUS_TX_LIFETIME_EXCEEDED:
        result = SL_STATUS_WIFI_TX_LIFETIME_EXCEEDED;
 8008a9e:	f44f 6332 	mov.w	r3, #2848	; 0xb20
 8008aa2:	60fb      	str	r3, [r7, #12]
        break;
 8008aa4:	e002      	b.n	8008aac <sl_wfx_get_status_code+0x198>
      default:
        result = SL_STATUS_FAIL;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	60fb      	str	r3, [r7, #12]
        break;
 8008aaa:	bf00      	nop
    }
  }

#if (SL_WFX_DEBUG_MASK & SL_WFX_DEBUG_ERROR)
  if (result != SL_STATUS_OK && result != SL_STATUS_WIFI_WARNING) {
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <sl_wfx_get_status_code+0x1b0>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f640 3204 	movw	r2, #2820	; 0xb04
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d003      	beq.n	8008ac4 <sl_wfx_get_status_code+0x1b0>
    sl_wfx_host_log("Cnf status %u\n", result);
 8008abc:	68f9      	ldr	r1, [r7, #12]
 8008abe:	4804      	ldr	r0, [pc, #16]	; (8008ad0 <sl_wfx_get_status_code+0x1bc>)
 8008ac0:	f000 fafa 	bl	80090b8 <sl_wfx_host_log>
  }
#endif
  return result;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	0801d50c 	.word	0x0801d50c

08008ad4 <sl_wfx_allocate_command_buffer>:
 *****************************************************************************/
sl_status_t sl_wfx_allocate_command_buffer(sl_wfx_generic_message_t **buffer,
                                           uint32_t command_id,
                                           sl_wfx_buffer_type_t type,
                                           uint32_t buffer_size)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	603b      	str	r3, [r7, #0]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	71fb      	strb	r3, [r7, #7]
    *buffer = (sl_wfx_generic_message_t *)(((uint8_t *)*buffer) + SL_WFX_SECURE_LINK_HEADER_SIZE);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    result = sl_wfx_host_allocate_buffer((void **)buffer,
 8008ae4:	79fb      	ldrb	r3, [r7, #7]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	4619      	mov	r1, r3
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f000 fab6 	bl	800905c <sl_wfx_host_allocate_buffer>
 8008af0:	6178      	str	r0, [r7, #20]
                                         type,
                                         buffer_size);
    SL_WFX_ERROR_CHECK(result);
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d106      	bne.n	8008b06 <sl_wfx_allocate_command_buffer+0x32>

    memset((*buffer), 0, buffer_size);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f012 fc29 	bl	801b358 <memset>
  }

  error_handler:
  return result;
 8008b06:	697b      	ldr	r3, [r7, #20]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3718      	adds	r7, #24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <sl_wfx_free_command_buffer>:
 * @param command_id is the ID of the command to check if encryption is required
 * @param type of the buffer to allocate
 * @return SL_STATUS_OK if the values are retrieved correctly, SL_STATUS_FAIL otherwise
 *****************************************************************************/
sl_status_t sl_wfx_free_command_buffer(sl_wfx_generic_message_t *buffer, uint32_t command_id, sl_wfx_buffer_type_t type)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	71fb      	strb	r3, [r7, #7]
    return sl_wfx_host_free_buffer((uint8_t *)buffer - SL_WFX_SECURE_LINK_HEADER_SIZE, type);
  } else
#endif //SL_WFX_USE_SECURE_LINK
  {
    SL_WFX_UNUSED_PARAMETER(command_id);
    return sl_wfx_host_free_buffer(buffer, type);
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4619      	mov	r1, r3
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 faac 	bl	8009080 <sl_wfx_host_free_buffer>
 8008b28:	4603      	mov	r3, r0
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <sl_wfx_host_init>:
}host_context;

/**************************************************************************//**
 * Initialize the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_init (void) {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	af00      	add	r7, sp, #0
  host_context.sl_wfx_firmware_download_progress = 0;
 8008b38:	4b16      	ldr	r3, [pc, #88]	; (8008b94 <sl_wfx_host_init+0x60>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	601a      	str	r2, [r3, #0]
  wifi_scan_sem = xSemaphoreCreateBinary();
 8008b3e:	2203      	movs	r2, #3
 8008b40:	2100      	movs	r1, #0
 8008b42:	2001      	movs	r0, #1
 8008b44:	f001 fda8 	bl	800a698 <xQueueGenericCreate>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	4a13      	ldr	r2, [pc, #76]	; (8008b98 <sl_wfx_host_init+0x64>)
 8008b4c:	6013      	str	r3, [r2, #0]
  sl_wfx_driver_mutex = xSemaphoreCreateBinary();
 8008b4e:	2203      	movs	r2, #3
 8008b50:	2100      	movs	r1, #0
 8008b52:	2001      	movs	r0, #1
 8008b54:	f001 fda0 	bl	800a698 <xQueueGenericCreate>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	4a10      	ldr	r2, [pc, #64]	; (8008b9c <sl_wfx_host_init+0x68>)
 8008b5c:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(sl_wfx_driver_mutex);
 8008b5e:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <sl_wfx_host_init+0x68>)
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	2300      	movs	r3, #0
 8008b64:	2200      	movs	r2, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	f001 fe1e 	bl	800a7a8 <xQueueGenericSend>
//  sl_wfx_driver_mutex = true;
  sl_wfx_wake_up_sem = xSemaphoreCreateBinary();
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	2100      	movs	r1, #0
 8008b70:	2001      	movs	r0, #1
 8008b72:	f001 fd91 	bl	800a698 <xQueueGenericCreate>
 8008b76:	4603      	mov	r3, r0
 8008b78:	4a09      	ldr	r2, [pc, #36]	; (8008ba0 <sl_wfx_host_init+0x6c>)
 8008b7a:	6013      	str	r3, [r2, #0]
  sl_wfx_confirmation_queue = xQueueCreate(1, sizeof(uint8_t));
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2101      	movs	r1, #1
 8008b80:	2001      	movs	r0, #1
 8008b82:	f001 fd89 	bl	800a698 <xQueueGenericCreate>
 8008b86:	4603      	mov	r3, r0
 8008b88:	4a06      	ldr	r2, [pc, #24]	; (8008ba4 <sl_wfx_host_init+0x70>)
 8008b8a:	6013      	str	r3, [r2, #0]

  return SL_STATUS_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	200013dc 	.word	0x200013dc
 8008b98:	200013d8 	.word	0x200013d8
 8008b9c:	200013d4 	.word	0x200013d4
 8008ba0:	200013d0 	.word	0x200013d0
 8008ba4:	200013cc 	.word	0x200013cc

08008ba8 <sl_wfx_host_get_firmware_data>:

/**************************************************************************//**
 * Get a firmware chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_data (const uint8_t** data, uint32_t data_size) {
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  *data = &sl_wfx_firmware[host_context.sl_wfx_firmware_download_progress];
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <sl_wfx_host_get_firmware_data+0x30>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a09      	ldr	r2, [pc, #36]	; (8008bdc <sl_wfx_host_get_firmware_data+0x34>)
 8008bb8:	441a      	add	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	601a      	str	r2, [r3, #0]
  host_context.sl_wfx_firmware_download_progress += data_size;
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <sl_wfx_host_get_firmware_data+0x30>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <sl_wfx_host_get_firmware_data+0x30>)
 8008bc8:	6013      	str	r3, [r2, #0]
  
  return SL_STATUS_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	200013dc 	.word	0x200013dc
 8008bdc:	08020a5c 	.word	0x08020a5c

08008be0 <sl_wfx_host_get_firmware_size>:

/**************************************************************************//**
 * Get the firmware size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_firmware_size (uint32_t* firmware_size) {
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  *firmware_size = sizeof(sl_wfx_firmware);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a04      	ldr	r2, [pc, #16]	; (8008bfc <sl_wfx_host_get_firmware_size+0x1c>)
 8008bec:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	0004bc50 	.word	0x0004bc50

08008c00 <sl_wfx_host_get_pds_data>:

/**************************************************************************//**
 * Get a PDS chunk
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_data (const char **pds_data, uint16_t index) {
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	807b      	strh	r3, [r7, #2]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008c0c:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <sl_wfx_host_get_pds_data+0x48>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c14:	2206      	movs	r2, #6
 8008c16:	4619      	mov	r1, r3
 8008c18:	480c      	ldr	r0, [pc, #48]	; (8008c4c <sl_wfx_host_get_pds_data+0x4c>)
 8008c1a:	f012 fba5 	bl	801b368 <strncmp>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <sl_wfx_host_get_pds_data+0x32>
    *pds_data = pds_table_brd8023a[index];
 8008c24:	887b      	ldrh	r3, [r7, #2]
 8008c26:	4a0a      	ldr	r2, [pc, #40]	; (8008c50 <sl_wfx_host_get_pds_data+0x50>)
 8008c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e005      	b.n	8008c3e <sl_wfx_host_get_pds_data+0x3e>
  } else {
    *pds_data = pds_table_brd8022a[index];
 8008c32:	887b      	ldrh	r3, [r7, #2]
 8008c34:	4a07      	ldr	r2, [pc, #28]	; (8008c54 <sl_wfx_host_get_pds_data+0x54>)
 8008c36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000a94 	.word	0x20000a94
 8008c4c:	0801d7a8 	.word	0x0801d7a8
 8008c50:	08020a44 	.word	0x08020a44
 8008c54:	08020a2c 	.word	0x08020a2c

08008c58 <sl_wfx_host_get_pds_size>:

/**************************************************************************//**
 * Get PDS size
 *****************************************************************************/
sl_status_t sl_wfx_host_get_pds_size(uint16_t *pds_size)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Manage dynamically the PDS in function of the chip connected */
  if (strncmp("WFM200", (char *)sl_wfx_context->wfx_opn, 6) == 0) {
 8008c60:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <sl_wfx_host_get_pds_size+0x38>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c68:	2206      	movs	r2, #6
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4809      	ldr	r0, [pc, #36]	; (8008c94 <sl_wfx_host_get_pds_size+0x3c>)
 8008c6e:	f012 fb7b 	bl	801b368 <strncmp>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <sl_wfx_host_get_pds_size+0x28>
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8023a);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2206      	movs	r2, #6
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <sl_wfx_host_get_pds_size+0x2e>
  } else {
    *pds_size = SL_WFX_ARRAY_COUNT(pds_table_brd8022a);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2206      	movs	r2, #6
 8008c84:	801a      	strh	r2, [r3, #0]
  }
  
  return SL_STATUS_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20000a94 	.word	0x20000a94
 8008c94:	0801d7a8 	.word	0x0801d7a8

08008c98 <sl_wfx_host_deinit>:

/**************************************************************************//**
 * Deinit the host resources
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit (void) {
 8008c98:	b480      	push	{r7}
 8008c9a:	af00      	add	r7, sp, #0
  //Commented for now, waiting for driver fix
  //vQueueDelete(wifi_event_queue);
  //vSemaphoreDelete(sl_wfx_driver_mutex);
  //vSemaphoreDelete(sl_wfx_wake_up_sem);

  return SL_STATUS_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <sl_wfx_host_reset_chip>:

/**************************************************************************//**
 * Reset the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_reset_chip(void) {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_RESET);
 8008cac:	2200      	movs	r2, #0
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4808      	ldr	r0, [pc, #32]	; (8008cd4 <sl_wfx_host_reset_chip+0x2c>)
 8008cb2:	f7fc fc19 	bl	80054e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008cb6:	200a      	movs	r0, #10
 8008cb8:	f7fb fc3a 	bl	8004530 <HAL_Delay>
  HAL_GPIO_WritePin(WFM_RESET_GPIO_Port, WFM_RESET_Pin, GPIO_PIN_SET);
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	4804      	ldr	r0, [pc, #16]	; (8008cd4 <sl_wfx_host_reset_chip+0x2c>)
 8008cc2:	f7fc fc11 	bl	80054e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008cc6:	200a      	movs	r0, #10
 8008cc8:	f7fb fc32 	bl	8004530 <HAL_Delay>

  return SL_STATUS_OK;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	40020800 	.word	0x40020800

08008cd8 <sl_wfx_host_set_wake_up_pin>:
}

/**************************************************************************//**
 * Set or reset the wake-up pin 
 *****************************************************************************/
sl_status_t sl_wfx_host_set_wake_up_pin (uint8_t state) {
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  if (state > 0) {
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d006      	beq.n	8008cf6 <sl_wfx_host_set_wake_up_pin+0x1e>
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_SET);
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008cee:	4807      	ldr	r0, [pc, #28]	; (8008d0c <sl_wfx_host_set_wake_up_pin+0x34>)
 8008cf0:	f7fc fbfa 	bl	80054e8 <HAL_GPIO_WritePin>
 8008cf4:	e005      	b.n	8008d02 <sl_wfx_host_set_wake_up_pin+0x2a>
  } else {
    HAL_GPIO_WritePin(WFM_WUP_GPIO_Port, WFM_WUP_Pin, GPIO_PIN_RESET);
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008cfc:	4803      	ldr	r0, [pc, #12]	; (8008d0c <sl_wfx_host_set_wake_up_pin+0x34>)
 8008cfe:	f7fc fbf3 	bl	80054e8 <HAL_GPIO_WritePin>
  }
  
  return SL_STATUS_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40020400 	.word	0x40020400

08008d10 <sl_wfx_host_wait_for_wake_up>:

/**************************************************************************//**
 * Wait for a wake-up
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_wake_up (void) {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  xSemaphoreTake(sl_wfx_wake_up_sem, 0);
 8008d14:	4b07      	ldr	r3, [pc, #28]	; (8008d34 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2100      	movs	r1, #0
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f002 f84a 	bl	800adb4 <xQueueSemaphoreTake>
  xSemaphoreTake(sl_wfx_wake_up_sem, 3/portTICK_PERIOD_MS);
 8008d20:	4b04      	ldr	r3, [pc, #16]	; (8008d34 <sl_wfx_host_wait_for_wake_up+0x24>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2101      	movs	r1, #1
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 f844 	bl	800adb4 <xQueueSemaphoreTake>

  return SL_STATUS_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	200013d0 	.word	0x200013d0

08008d38 <sl_wfx_host_sleep_grant>:
/**************************************************************************//**
 * Grant the Wi-Fi device to go to sleep mode
 *****************************************************************************/
sl_status_t sl_wfx_host_sleep_grant (sl_wfx_host_bus_transfer_type_t type,
                                     sl_wfx_register_address_t address,
                                     uint32_t length) {
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	603a      	str	r2, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
 8008d44:	460b      	mov	r3, r1
 8008d46:	71bb      	strb	r3, [r7, #6]
  /* To be implemented depending on the application */ 
  return SL_STATUS_WIFI_SLEEP_GRANTED;
 8008d48:	f640 3308 	movw	r3, #2824	; 0xb08
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	370c      	adds	r7, #12
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <sl_wfx_host_setup_waited_event>:

/**************************************************************************//**
 * Set up a waited event
 *****************************************************************************/
sl_status_t sl_wfx_host_setup_waited_event (uint8_t event_id) {
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  host_context.waited_event_id = event_id;
 8008d62:	4a05      	ldr	r2, [pc, #20]	; (8008d78 <sl_wfx_host_setup_waited_event+0x20>)
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	7113      	strb	r3, [r2, #4]
  
  return SL_STATUS_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	370c      	adds	r7, #12
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	200013dc 	.word	0x200013dc

08008d7c <sl_wfx_host_wait_for_confirmation>:
/**************************************************************************//**
 * Wait for a confirmation
 *****************************************************************************/
sl_status_t sl_wfx_host_wait_for_confirmation (uint8_t confirmation_id,
                                               uint32_t timeout_ms,
                                               void **event_payload_out) {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	4603      	mov	r3, r0
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	73fb      	strb	r3, [r7, #15]
  uint8_t posted_event_id;
  
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	617b      	str	r3, [r7, #20]
 8008d8e:	e01b      	b.n	8008dc8 <sl_wfx_host_wait_for_confirmation+0x4c>
    /* Wait for an event posted by the function sl_wfx_host_post_event() */
    if (xQueueReceive(sl_wfx_confirmation_queue, &posted_event_id, 1) == pdTRUE) {
 8008d90:	4b12      	ldr	r3, [pc, #72]	; (8008ddc <sl_wfx_host_wait_for_confirmation+0x60>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f107 0113 	add.w	r1, r7, #19
 8008d98:	2201      	movs	r2, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 ff2a 	bl	800abf4 <xQueueReceive>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10d      	bne.n	8008dc2 <sl_wfx_host_wait_for_confirmation+0x46>
      /* Once a message is received, check if it is the expected ID */
      if (confirmation_id == posted_event_id) {
 8008da6:	7cfb      	ldrb	r3, [r7, #19]
 8008da8:	7bfa      	ldrb	r2, [r7, #15]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d109      	bne.n	8008dc2 <sl_wfx_host_wait_for_confirmation+0x46>
        /* Pass the confirmation reply and return*/
        if (event_payload_out != NULL) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d004      	beq.n	8008dbe <sl_wfx_host_wait_for_confirmation+0x42>
          *event_payload_out = sl_wfx_context->event_payload_buffer;
 8008db4:	4b0a      	ldr	r3, [pc, #40]	; (8008de0 <sl_wfx_host_wait_for_confirmation+0x64>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	461a      	mov	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	601a      	str	r2, [r3, #0]
        }
        return SL_STATUS_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e007      	b.n	8008dd2 <sl_wfx_host_wait_for_confirmation+0x56>
  for (uint32_t i = 0; i < timeout_ms; i++) {
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d3df      	bcc.n	8008d90 <sl_wfx_host_wait_for_confirmation+0x14>
      }
    }
  }
  
  /* The wait for the confirmation timed out, return */
  return SL_STATUS_TIMEOUT;
 8008dd0:	2307      	movs	r3, #7
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200013cc 	.word	0x200013cc
 8008de0:	20000a94 	.word	0x20000a94

08008de4 <sl_wfx_host_wait>:

/**************************************************************************//**
 * Wait function
 *****************************************************************************/
sl_status_t sl_wfx_host_wait (uint32_t wait_time) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  osDelay(wait_time);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 f80b 	bl	8009e08 <osDelay>
  
  return SL_STATUS_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <sl_wfx_host_post_event>:

/**************************************************************************//**
 * Post an event comming from the Wi-Fi device
 *****************************************************************************/
sl_status_t sl_wfx_host_post_event (sl_wfx_generic_message_t *event_payload) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  
  switch (event_payload->header.id) {
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	789b      	ldrb	r3, [r3, #2]
 8008e08:	3bc3      	subs	r3, #195	; 0xc3
 8008e0a:	2b21      	cmp	r3, #33	; 0x21
 8008e0c:	f200 80f3 	bhi.w	8008ff6 <sl_wfx_host_post_event+0x1fa>
 8008e10:	a201      	add	r2, pc, #4	; (adr r2, 8008e18 <sl_wfx_host_post_event+0x1c>)
 8008e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e16:	bf00      	nop
 8008e18:	08008ea1 	.word	0x08008ea1
 8008e1c:	08008ea9 	.word	0x08008ea9
 8008e20:	08008eb1 	.word	0x08008eb1
 8008e24:	08008ff7 	.word	0x08008ff7
 8008e28:	08008eb9 	.word	0x08008eb9
 8008e2c:	08008ff7 	.word	0x08008ff7
 8008e30:	08008ff7 	.word	0x08008ff7
 8008e34:	08008ec1 	.word	0x08008ec1
 8008e38:	08008ed7 	.word	0x08008ed7
 8008e3c:	08008edf 	.word	0x08008edf
 8008e40:	08008ee7 	.word	0x08008ee7
 8008e44:	08008eef 	.word	0x08008eef
 8008e48:	08008ef7 	.word	0x08008ef7
 8008e4c:	08008ff7 	.word	0x08008ff7
 8008e50:	08008ff7 	.word	0x08008ff7
 8008e54:	08008eff 	.word	0x08008eff
 8008e58:	08008ff7 	.word	0x08008ff7
 8008e5c:	08008ff7 	.word	0x08008ff7
 8008e60:	08008ff7 	.word	0x08008ff7
 8008e64:	08008ff7 	.word	0x08008ff7
 8008e68:	08008ff7 	.word	0x08008ff7
 8008e6c:	08008ff7 	.word	0x08008ff7
 8008e70:	08008ff7 	.word	0x08008ff7
 8008e74:	08008ff7 	.word	0x08008ff7
 8008e78:	08008ff7 	.word	0x08008ff7
 8008e7c:	08008ff7 	.word	0x08008ff7
 8008e80:	08008ff7 	.word	0x08008ff7
 8008e84:	08008ff7 	.word	0x08008ff7
 8008e88:	08008ff7 	.word	0x08008ff7
 8008e8c:	08008f07 	.word	0x08008f07
 8008e90:	08008ff7 	.word	0x08008ff7
 8008e94:	08008ff7 	.word	0x08008ff7
 8008e98:	08008ff7 	.word	0x08008ff7
 8008e9c:	08008f83 	.word	0x08008f83
    /******** INDICATION ********/
  case SL_WFX_CONNECT_IND_ID:
    {
      sl_wfx_connect_callback((sl_wfx_connect_ind_t*) event_payload);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa41 	bl	8009328 <sl_wfx_connect_callback>
      break;
 8008ea6:	e0a6      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_DISCONNECT_IND_ID:
    {
      sl_wfx_disconnect_callback((sl_wfx_disconnect_ind_t*) event_payload);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fb4d 	bl	8009548 <sl_wfx_disconnect_callback>
      break;
 8008eae:	e0a2      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_START_AP_IND_ID:
    {
      sl_wfx_start_ap_callback((sl_wfx_start_ap_ind_t*) event_payload);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fb87 	bl	80095c4 <sl_wfx_start_ap_callback>
      break;
 8008eb6:	e09e      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_STOP_AP_IND_ID:
    {
      sl_wfx_stop_ap_callback((sl_wfx_stop_ap_ind_t*) event_payload);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fbdd 	bl	8009678 <sl_wfx_stop_ap_callback>
      break;
 8008ebe:	e09a      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_RECEIVED_IND_ID:
    {
      sl_wfx_received_ind_t* ethernet_frame = (sl_wfx_received_ind_t*) event_payload;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60fb      	str	r3, [r7, #12]
      if ( ethernet_frame->body.frame_type == 0 )
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	791b      	ldrb	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f040 8093 	bne.w	8008ff4 <sl_wfx_host_post_event+0x1f8>
      {
        sl_wfx_host_received_frame_callback(ethernet_frame);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f7fa f952 	bl	8003178 <sl_wfx_host_received_frame_callback>
      }
      break;
 8008ed4:	e08e      	b.n	8008ff4 <sl_wfx_host_post_event+0x1f8>
    }
  case SL_WFX_SCAN_RESULT_IND_ID:
    {
      sl_wfx_scan_result_callback((sl_wfx_scan_result_ind_t*) event_payload);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f92e 	bl	8009138 <sl_wfx_scan_result_callback>
      break;
 8008edc:	e08b      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_SCAN_COMPLETE_IND_ID:
    {
      sl_wfx_scan_complete_callback((sl_wfx_scan_complete_ind_t*) event_payload);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9ee 	bl	80092c0 <sl_wfx_scan_complete_callback>
      break;
 8008ee4:	e087      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_CONNECTED_IND_ID:
    {
      sl_wfx_ap_client_connected_callback((sl_wfx_ap_client_connected_ind_t*) event_payload);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fc02 	bl	80096f0 <sl_wfx_ap_client_connected_callback>
      break;
 8008eec:	e083      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_REJECTED_IND_ID:
    {
      sl_wfx_ap_client_rejected_callback((sl_wfx_ap_client_rejected_ind_t*) event_payload);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc3c 	bl	800976c <sl_wfx_ap_client_rejected_callback>
      break;
 8008ef4:	e07f      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_AP_CLIENT_DISCONNECTED_IND_ID:
    {
      sl_wfx_ap_client_disconnected_callback((sl_wfx_ap_client_disconnected_ind_t*) event_payload);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fc6e 	bl	80097d8 <sl_wfx_ap_client_disconnected_callback>
      break;
 8008efc:	e07b      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_EXT_AUTH_IND_ID:
    {
      sl_wfx_ext_auth_callback((sl_wfx_ext_auth_ind_t*) event_payload);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fca0 	bl	8009844 <sl_wfx_ext_auth_callback>
      break;
 8008f04:	e077      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    {
      break;
    }
  case SL_WFX_EXCEPTION_IND_ID:
    {
      sl_wfx_exception_ind_t *firmware_exception = (sl_wfx_exception_ind_t*)event_payload;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	613b      	str	r3, [r7, #16]
      uint8_t *exception_tmp = (uint8_t *) firmware_exception;
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	627b      	str	r3, [r7, #36]	; 0x24
      printf("firmware exception %lu\r\n", firmware_exception->body.reason);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4619      	mov	r1, r3
 8008f14:	4849      	ldr	r0, [pc, #292]	; (800903c <sl_wfx_host_post_event+0x240>)
 8008f16:	f012 f8bd 	bl	801b094 <iprintf>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f1e:	e029      	b.n	8008f74 <sl_wfx_host_post_event+0x178>
        printf("hif: %.8x:", i);
 8008f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f22:	4619      	mov	r1, r3
 8008f24:	4846      	ldr	r0, [pc, #280]	; (8009040 <sl_wfx_host_post_event+0x244>)
 8008f26:	f012 f8b5 	bl	801b094 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008f30:	e00d      	b.n	8008f4e <sl_wfx_host_post_event+0x152>
            printf(" %.2x", *exception_tmp);
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	4619      	mov	r1, r3
 8008f38:	4842      	ldr	r0, [pc, #264]	; (8009044 <sl_wfx_host_post_event+0x248>)
 8008f3a:	f012 f8ab 	bl	801b094 <iprintf>
            exception_tmp++;
 8008f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f40:	3301      	adds	r3, #1
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_exception->header.length); j ++) {
 8008f44:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f48:	3301      	adds	r3, #1
 8008f4a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008f4e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f52:	2b0f      	cmp	r3, #15
 8008f54:	d808      	bhi.n	8008f68 <sl_wfx_host_post_event+0x16c>
 8008f56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f58:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008f5c:	4413      	add	r3, r2
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	8812      	ldrh	r2, [r2, #0]
 8008f62:	b292      	uxth	r2, r2
 8008f64:	4293      	cmp	r3, r2
 8008f66:	dbe4      	blt.n	8008f32 <sl_wfx_host_post_event+0x136>
        }
        printf("\r\n");
 8008f68:	4837      	ldr	r0, [pc, #220]	; (8009048 <sl_wfx_host_post_event+0x24c>)
 8008f6a:	f012 f8f9 	bl	801b160 <puts>
      for (uint16_t i = 0; i < firmware_exception->header.length; i += 16) {
 8008f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f70:	3310      	adds	r3, #16
 8008f72:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3cf      	bcc.n	8008f20 <sl_wfx_host_post_event+0x124>
      }
      break;
 8008f80:	e039      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
    }
  case SL_WFX_ERROR_IND_ID:
    {
      sl_wfx_error_ind_t *firmware_error = (sl_wfx_error_ind_t*)event_payload;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	617b      	str	r3, [r7, #20]
      uint8_t *error_tmp = (uint8_t *) firmware_error;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	61fb      	str	r3, [r7, #28]
      printf("firmware error %lu\r\n", firmware_error->body.type);
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	482e      	ldr	r0, [pc, #184]	; (800904c <sl_wfx_host_post_event+0x250>)
 8008f92:	f012 f87f 	bl	801b094 <iprintf>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008f96:	2300      	movs	r3, #0
 8008f98:	837b      	strh	r3, [r7, #26]
 8008f9a:	e024      	b.n	8008fe6 <sl_wfx_host_post_event+0x1ea>
        printf("hif: %.8x:", i);
 8008f9c:	8b7b      	ldrh	r3, [r7, #26]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4827      	ldr	r0, [pc, #156]	; (8009040 <sl_wfx_host_post_event+0x244>)
 8008fa2:	f012 f877 	bl	801b094 <iprintf>
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	767b      	strb	r3, [r7, #25]
 8008faa:	e00b      	b.n	8008fc4 <sl_wfx_host_post_event+0x1c8>
            printf(" %.2x", *error_tmp);
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4824      	ldr	r0, [pc, #144]	; (8009044 <sl_wfx_host_post_event+0x248>)
 8008fb4:	f012 f86e 	bl	801b094 <iprintf>
            error_tmp++;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; (j < 16) && ((i + j) < firmware_error->header.length); j ++) {
 8008fbe:	7e7b      	ldrb	r3, [r7, #25]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	767b      	strb	r3, [r7, #25]
 8008fc4:	7e7b      	ldrb	r3, [r7, #25]
 8008fc6:	2b0f      	cmp	r3, #15
 8008fc8:	d807      	bhi.n	8008fda <sl_wfx_host_post_event+0x1de>
 8008fca:	8b7a      	ldrh	r2, [r7, #26]
 8008fcc:	7e7b      	ldrb	r3, [r7, #25]
 8008fce:	4413      	add	r3, r2
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	8812      	ldrh	r2, [r2, #0]
 8008fd4:	b292      	uxth	r2, r2
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	dbe8      	blt.n	8008fac <sl_wfx_host_post_event+0x1b0>
        }
        printf("\r\n");
 8008fda:	481b      	ldr	r0, [pc, #108]	; (8009048 <sl_wfx_host_post_event+0x24c>)
 8008fdc:	f012 f8c0 	bl	801b160 <puts>
      for (uint16_t i = 0; i < firmware_error->header.length; i += 16) {
 8008fe0:	8b7b      	ldrh	r3, [r7, #26]
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	837b      	strh	r3, [r7, #26]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	8b7a      	ldrh	r2, [r7, #26]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3d4      	bcc.n	8008f9c <sl_wfx_host_post_event+0x1a0>
      }
      break;
 8008ff2:	e000      	b.n	8008ff6 <sl_wfx_host_post_event+0x1fa>
      break;
 8008ff4:	bf00      	nop
    }
  }

  if (host_context.waited_event_id == event_payload->header.id) {
 8008ff6:	4b16      	ldr	r3, [pc, #88]	; (8009050 <sl_wfx_host_post_event+0x254>)
 8008ff8:	791a      	ldrb	r2, [r3, #4]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	789b      	ldrb	r3, [r3, #2]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d117      	bne.n	8009032 <sl_wfx_host_post_event+0x236>
    if (event_payload->header.length < SL_WFX_EVENT_MAX_SIZE) {
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800900c:	d211      	bcs.n	8009032 <sl_wfx_host_post_event+0x236>
      /* Post the event in the queue */
      memcpy(sl_wfx_context->event_payload_buffer,
 800900e:	4b11      	ldr	r3, [pc, #68]	; (8009054 <sl_wfx_host_post_event+0x258>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
             (void*) event_payload,
             event_payload->header.length);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
      memcpy(sl_wfx_context->event_payload_buffer,
 800901a:	461a      	mov	r2, r3
 800901c:	6879      	ldr	r1, [r7, #4]
 800901e:	f012 fa58 	bl	801b4d2 <memcpy>
      xQueueOverwrite(sl_wfx_confirmation_queue, (void *) &event_payload->header.id);
 8009022:	4b0d      	ldr	r3, [pc, #52]	; (8009058 <sl_wfx_host_post_event+0x25c>)
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	1c99      	adds	r1, r3, #2
 800902a:	2302      	movs	r3, #2
 800902c:	2200      	movs	r2, #0
 800902e:	f001 fbbb 	bl	800a7a8 <xQueueGenericSend>


    }
  }

  return SL_STATUS_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3728      	adds	r7, #40	; 0x28
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	0801d7b0 	.word	0x0801d7b0
 8009040:	0801d7cc 	.word	0x0801d7cc
 8009044:	0801d7d8 	.word	0x0801d7d8
 8009048:	0801d7e0 	.word	0x0801d7e0
 800904c:	0801d7e4 	.word	0x0801d7e4
 8009050:	200013dc 	.word	0x200013dc
 8009054:	20000a94 	.word	0x20000a94
 8009058:	200013cc 	.word	0x200013cc

0800905c <sl_wfx_host_allocate_buffer>:
/**************************************************************************//**
 * Allocate a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_allocate_buffer (void** buffer,
                                         sl_wfx_buffer_type_t type,
                                         uint32_t buffer_size) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	460b      	mov	r3, r1
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	72fb      	strb	r3, [r7, #11]
  *buffer = pvPortMalloc( buffer_size);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f004 f884 	bl	800d178 <pvPortMalloc>
 8009070:	4602      	mov	r2, r0
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
  
  return SL_STATUS_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <sl_wfx_host_free_buffer>:

/**************************************************************************//**
 * Free a buffer
 *****************************************************************************/
sl_status_t sl_wfx_host_free_buffer (void* buffer, sl_wfx_buffer_type_t type) {
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  vPortFree(buffer);
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f004 f93f 	bl	800d310 <vPortFree>
  
  return SL_STATUS_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <sl_wfx_host_transmit_frame>:

/**************************************************************************//**
 * Host transmit frame
 *****************************************************************************/
sl_status_t sl_wfx_host_transmit_frame (void* frame, uint32_t frame_len) {
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  return sl_wfx_data_write(frame, frame_len);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f7fe fb4b 	bl	8007744 <sl_wfx_data_write>
 80090ae:	4603      	mov	r3, r0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <sl_wfx_host_log>:

/**************************************************************************//**
 * Output driver logs
 *****************************************************************************/
#if SL_WFX_DEBUG_MASK
void sl_wfx_host_log (const char *string, ...) {
 80090b8:	b40f      	push	{r0, r1, r2, r3}
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
  va_list valist;

  va_start(valist, string);
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	607b      	str	r3, [r7, #4]
  vprintf(string, valist);
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	6938      	ldr	r0, [r7, #16]
 80090ca:	f012 f895 	bl	801b1f8 <viprintf>
  va_end(valist);
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090d8:	b004      	add	sp, #16
 80090da:	4770      	bx	lr

080090dc <sl_wfx_host_lock>:
#endif

/**************************************************************************//**
 * Lock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_lock (void) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
  sl_status_t status = SL_STATUS_TIMEOUT;
 80090e2:	2307      	movs	r3, #7
 80090e4:	607b      	str	r3, [r7, #4]

if (xSemaphoreTake(sl_wfx_driver_mutex, 500) == pdTRUE) {
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <sl_wfx_host_lock+0x38>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80090ee:	4618      	mov	r0, r3
 80090f0:	f001 fe60 	bl	800adb4 <xQueueSemaphoreTake>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d102      	bne.n	8009100 <sl_wfx_host_lock+0x24>
//	  if (sl_wfx_driver_mutex) {
//		  sl_wfx_driver_mutex = false;
	      status = SL_STATUS_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	607b      	str	r3, [r7, #4]
 80090fe:	e004      	b.n	800910a <sl_wfx_host_lock+0x2e>
	    } else {
	      printf("Wi-Fi driver mutex timeout\r\n");
 8009100:	4805      	ldr	r0, [pc, #20]	; (8009118 <sl_wfx_host_lock+0x3c>)
 8009102:	f012 f82d 	bl	801b160 <puts>
	      status = SL_STATUS_TIMEOUT;
 8009106:	2307      	movs	r3, #7
 8009108:	607b      	str	r3, [r7, #4]
	    }

  return status;
 800910a:	687b      	ldr	r3, [r7, #4]
}
 800910c:	4618      	mov	r0, r3
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200013d4 	.word	0x200013d4
 8009118:	0801d7fc 	.word	0x0801d7fc

0800911c <sl_wfx_host_unlock>:

/**************************************************************************//**
 * Unlock the driver mutex
 *****************************************************************************/
sl_status_t sl_wfx_host_unlock (void) {
 800911c:	b580      	push	{r7, lr}
 800911e:	af00      	add	r7, sp, #0
	xSemaphoreGive(sl_wfx_driver_mutex);
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <sl_wfx_host_unlock+0x18>)
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	2300      	movs	r3, #0
 8009126:	2200      	movs	r2, #0
 8009128:	2100      	movs	r1, #0
 800912a:	f001 fb3d 	bl	800a7a8 <xQueueGenericSend>
	//sl_wfx_driver_mutex = true;
  return SL_STATUS_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	bd80      	pop	{r7, pc}
 8009134:	200013d4 	.word	0x200013d4

08009138 <sl_wfx_scan_result_callback>:


/**************************************************************************//**
 * Callback for individual scan result
 *****************************************************************************/
void sl_wfx_scan_result_callback (sl_wfx_scan_result_ind_t *scan_result) {
 8009138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913c:	b08a      	sub	sp, #40	; 0x28
 800913e:	af08      	add	r7, sp, #32
 8009140:	6078      	str	r0, [r7, #4]
  scan_count++;
 8009142:	4b5b      	ldr	r3, [pc, #364]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	b2da      	uxtb	r2, r3
 800914a:	4b59      	ldr	r3, [pc, #356]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 800914c:	701a      	strb	r2, [r3, #0]

  if (scan_verbose) {
 800914e:	4b59      	ldr	r3, [pc, #356]	; (80092b4 <sl_wfx_scan_result_callback+0x17c>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d03e      	beq.n	80091d4 <sl_wfx_scan_result_callback+0x9c>
    /*Report one AP information*/
    printf(
 8009156:	4b56      	ldr	r3, [pc, #344]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	469c      	mov	ip, r3
        "# %2d %2d %02X %03d %02X:%02X:%02X:%02X:%02X:%02X  %s\r\n",
        scan_count,
        scan_result->body.channel,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009160:	b29b      	uxth	r3, r3
    printf(
 8009162:	469e      	mov	lr, r3
        *(uint8_t *)&scan_result->body.security_mode,
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3330      	adds	r3, #48	; 0x30
 8009168:	781b      	ldrb	r3, [r3, #0]
    printf(
 800916a:	4698      	mov	r8, r3
        ((int16_t)(scan_result->body.rcpi - 220) / 2),
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009170:	b29b      	uxth	r3, r3
 8009172:	3bdc      	subs	r3, #220	; 0xdc
 8009174:	b29b      	uxth	r3, r3
 8009176:	b21b      	sxth	r3, r3
    printf(
 8009178:	0fda      	lsrs	r2, r3, #31
 800917a:	4413      	add	r3, r2
 800917c:	105b      	asrs	r3, r3, #1
 800917e:	b21b      	sxth	r3, r3
 8009180:	461a      	mov	r2, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    printf(
 8009188:	4619      	mov	r1, r3
        scan_result->body.mac[0], scan_result->body.mac[1],
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    printf(
 8009190:	4618      	mov	r0, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
    printf(
 8009198:	461c      	mov	r4, r3
        scan_result->body.mac[2], scan_result->body.mac[3],
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    printf(
 80091a0:	461d      	mov	r5, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    printf(
 80091a8:	461e      	mov	r6, r3
        scan_result->body.mac[4], scan_result->body.mac[5],
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    printf(
 80091b0:	603b      	str	r3, [r7, #0]
        scan_result->body.ssid_def.ssid);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	3308      	adds	r3, #8
    printf(
 80091b6:	9307      	str	r3, [sp, #28]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	9306      	str	r3, [sp, #24]
 80091bc:	9605      	str	r6, [sp, #20]
 80091be:	9504      	str	r5, [sp, #16]
 80091c0:	9403      	str	r4, [sp, #12]
 80091c2:	9002      	str	r0, [sp, #8]
 80091c4:	9101      	str	r1, [sp, #4]
 80091c6:	9200      	str	r2, [sp, #0]
 80091c8:	4643      	mov	r3, r8
 80091ca:	4672      	mov	r2, lr
 80091cc:	4661      	mov	r1, ip
 80091ce:	483a      	ldr	r0, [pc, #232]	; (80092b8 <sl_wfx_scan_result_callback+0x180>)
 80091d0:	f011 ff60 	bl	801b094 <iprintf>
  }

  if (scan_count <= SL_WFX_MAX_SCAN_RESULTS) {
 80091d4:	4b36      	ldr	r3, [pc, #216]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b32      	cmp	r3, #50	; 0x32
 80091da:	d863      	bhi.n	80092a4 <sl_wfx_scan_result_callback+0x16c>
    scan_list[scan_count - 1].ssid_def = scan_result->body.ssid_def;
 80091dc:	4b34      	ldr	r3, [pc, #208]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	1e5a      	subs	r2, r3, #1
 80091e2:	4936      	ldr	r1, [pc, #216]	; (80092bc <sl_wfx_scan_result_callback+0x184>)
 80091e4:	4613      	mov	r3, r2
 80091e6:	005b      	lsls	r3, r3, #1
 80091e8:	4413      	add	r3, r2
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	1a9b      	subs	r3, r3, r2
 80091ee:	18ca      	adds	r2, r1, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4610      	mov	r0, r2
 80091f6:	f103 0420 	add.w	r4, r3, #32
 80091fa:	4602      	mov	r2, r0
 80091fc:	4619      	mov	r1, r3
 80091fe:	f8d1 c000 	ldr.w	ip, [r1]
 8009202:	684e      	ldr	r6, [r1, #4]
 8009204:	688d      	ldr	r5, [r1, #8]
 8009206:	68c9      	ldr	r1, [r1, #12]
 8009208:	f8c2 c000 	str.w	ip, [r2]
 800920c:	6056      	str	r6, [r2, #4]
 800920e:	6095      	str	r5, [r2, #8]
 8009210:	60d1      	str	r1, [r2, #12]
 8009212:	3310      	adds	r3, #16
 8009214:	3010      	adds	r0, #16
 8009216:	42a3      	cmp	r3, r4
 8009218:	d1ef      	bne.n	80091fa <sl_wfx_scan_result_callback+0xc2>
 800921a:	4602      	mov	r2, r0
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6013      	str	r3, [r2, #0]
    scan_list[scan_count - 1].channel = scan_result->body.channel;
 8009220:	4b23      	ldr	r3, [pc, #140]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	1e5a      	subs	r2, r3, #1
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800922a:	b298      	uxth	r0, r3
 800922c:	4923      	ldr	r1, [pc, #140]	; (80092bc <sl_wfx_scan_result_callback+0x184>)
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	1a9b      	subs	r3, r3, r2
 8009238:	440b      	add	r3, r1
 800923a:	332a      	adds	r3, #42	; 0x2a
 800923c:	4602      	mov	r2, r0
 800923e:	801a      	strh	r2, [r3, #0]
    scan_list[scan_count - 1].security_mode = scan_result->body.security_mode;
 8009240:	4b1b      	ldr	r3, [pc, #108]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	1e5a      	subs	r2, r3, #1
 8009246:	491d      	ldr	r1, [pc, #116]	; (80092bc <sl_wfx_scan_result_callback+0x184>)
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	011b      	lsls	r3, r3, #4
 8009250:	1a9b      	subs	r3, r3, r2
 8009252:	440b      	add	r3, r1
 8009254:	332c      	adds	r3, #44	; 0x2c
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800925c:	701a      	strb	r2, [r3, #0]
    scan_list[scan_count - 1].rcpi = scan_result->body.rcpi;
 800925e:	4b14      	ldr	r3, [pc, #80]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	1e5a      	subs	r2, r3, #1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8009268:	b298      	uxth	r0, r3
 800926a:	4914      	ldr	r1, [pc, #80]	; (80092bc <sl_wfx_scan_result_callback+0x184>)
 800926c:	4613      	mov	r3, r2
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	4413      	add	r3, r2
 8009272:	011b      	lsls	r3, r3, #4
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	440b      	add	r3, r1
 8009278:	3328      	adds	r3, #40	; 0x28
 800927a:	4602      	mov	r2, r0
 800927c:	f8a3 2005 	strh.w	r2, [r3, #5]
    memcpy(scan_list[scan_count - 1].mac, scan_result->body.mac, 6);
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <sl_wfx_scan_result_callback+0x178>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	1e5a      	subs	r2, r3, #1
 8009286:	4613      	mov	r3, r2
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4413      	add	r3, r2
 800928c:	011b      	lsls	r3, r3, #4
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	3320      	adds	r3, #32
 8009292:	4a0a      	ldr	r2, [pc, #40]	; (80092bc <sl_wfx_scan_result_callback+0x184>)
 8009294:	4413      	add	r3, r2
 8009296:	1d18      	adds	r0, r3, #4
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3328      	adds	r3, #40	; 0x28
 800929c:	2206      	movs	r2, #6
 800929e:	4619      	mov	r1, r3
 80092a0:	f012 f917 	bl	801b4d2 <memcpy>
  }
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ae:	bf00      	nop
 80092b0:	200013ca 	.word	0x200013ca
 80092b4:	200000a9 	.word	0x200000a9
 80092b8:	0801d818 	.word	0x0801d818
 80092bc:	20000a9c 	.word	0x20000a9c

080092c0 <sl_wfx_scan_complete_callback>:

/**************************************************************************//**
 * Callback for scan complete
 *****************************************************************************/
void sl_wfx_scan_complete_callback (sl_wfx_scan_complete_ind_t *scan_complete) {
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  void * buffer;
  sl_status_t status;

  scan_count_web = scan_count;
 80092c8:	4b14      	ldr	r3, [pc, #80]	; (800931c <sl_wfx_scan_complete_callback+0x5c>)
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <sl_wfx_scan_complete_callback+0x60>)
 80092ce:	701a      	strb	r2, [r3, #0]
  scan_count = 0;
 80092d0:	4b12      	ldr	r3, [pc, #72]	; (800931c <sl_wfx_scan_complete_callback+0x5c>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	701a      	strb	r2, [r3, #0]

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       scan_complete->header.length);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80092dc:	461a      	mov	r2, r3
 80092de:	f107 0308 	add.w	r3, r7, #8
 80092e2:	2101      	movs	r1, #1
 80092e4:	4618      	mov	r0, r3
 80092e6:	f7ff feb9 	bl	800905c <sl_wfx_host_allocate_buffer>
 80092ea:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10f      	bne.n	8009312 <sl_wfx_scan_complete_callback+0x52>
    memcpy(buffer, (void *)scan_complete, scan_complete->header.length);
 80092f2:	68b8      	ldr	r0, [r7, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	f012 f8e8 	bl	801b4d2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009302:	4b08      	ldr	r3, [pc, #32]	; (8009324 <sl_wfx_scan_complete_callback+0x64>)
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	f107 0108 	add.w	r1, r7, #8
 800930a:	2300      	movs	r3, #0
 800930c:	2200      	movs	r2, #0
 800930e:	f001 fa4b 	bl	800a7a8 <xQueueGenericSend>
  }
}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	200013ca 	.word	0x200013ca
 8009320:	200013cb 	.word	0x200013cb
 8009324:	200013e4 	.word	0x200013e4

08009328 <sl_wfx_connect_callback>:

/**************************************************************************//**
 * Callback when station connects
 *****************************************************************************/
void sl_wfx_connect_callback (sl_wfx_connect_ind_t *connect) {
 8009328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  switch(connect->body.status){
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b0a      	cmp	r3, #10
 8009336:	f200 80d3 	bhi.w	80094e0 <sl_wfx_connect_callback+0x1b8>
 800933a:	a201      	add	r2, pc, #4	; (adr r2, 8009340 <sl_wfx_connect_callback+0x18>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	0800936d 	.word	0x0800936d
 8009344:	080094e1 	.word	0x080094e1
 8009348:	080094e1 	.word	0x080094e1
 800934c:	080094e1 	.word	0x080094e1
 8009350:	080094e1 	.word	0x080094e1
 8009354:	080094e1 	.word	0x080094e1
 8009358:	080093cb 	.word	0x080093cb
 800935c:	0800940f 	.word	0x0800940f
 8009360:	0800943d 	.word	0x0800943d
 8009364:	0800946b 	.word	0x0800946b
 8009368:	080094a7 	.word	0x080094a7
  case WFM_STATUS_SUCCESS:
    {
      printf("Connected to WiFi: %s \r\n", WLAN_SSID_DEFAULT);
 800936c:	496a      	ldr	r1, [pc, #424]	; (8009518 <sl_wfx_connect_callback+0x1f0>)
 800936e:	486b      	ldr	r0, [pc, #428]	; (800951c <sl_wfx_connect_callback+0x1f4>)
 8009370:	f011 fe90 	bl	801b094 <iprintf>
      sl_wfx_context->state |= SL_WFX_STA_INTERFACE_CONNECTED;
 8009374:	4b6a      	ldr	r3, [pc, #424]	; (8009520 <sl_wfx_connect_callback+0x1f8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 800937c:	4b68      	ldr	r3, [pc, #416]	; (8009520 <sl_wfx_connect_callback+0x1f8>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f042 0202 	orr.w	r2, r2, #2
 8009384:	b2d2      	uxtb	r2, r2
 8009386:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

      status = sl_wfx_host_allocate_buffer(&buffer,
                                           SL_WFX_RX_FRAME_BUFFER,
                                           connect->header.length);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
      status = sl_wfx_host_allocate_buffer(&buffer,
 8009390:	461a      	mov	r2, r3
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	2101      	movs	r1, #1
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff fe5f 	bl	800905c <sl_wfx_host_allocate_buffer>
 800939e:	60f8      	str	r0, [r7, #12]
      if (status == SL_STATUS_OK) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f040 80b3 	bne.w	800950e <sl_wfx_connect_callback+0x1e6>
        memcpy(buffer, (void *)connect, connect->header.length);
 80093a8:	68b8      	ldr	r0, [r7, #8]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	881b      	ldrh	r3, [r3, #0]
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	f012 f88d 	bl	801b4d2 <memcpy>
        xQueueSend(wifi_event_queue, &buffer, 0);
 80093b8:	4b5a      	ldr	r3, [pc, #360]	; (8009524 <sl_wfx_connect_callback+0x1fc>)
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	f107 0108 	add.w	r1, r7, #8
 80093c0:	2300      	movs	r3, #0
 80093c2:	2200      	movs	r2, #0
 80093c4:	f001 f9f0 	bl	800a7a8 <xQueueGenericSend>
      }
      break;
 80093c8:	e0a1      	b.n	800950e <sl_wfx_connect_callback+0x1e6>
    }
  case WFM_STATUS_NO_MATCHING_AP:
    {
      strcpy(event_log, "Connection failed, access point not found");
 80093ca:	4b57      	ldr	r3, [pc, #348]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80093cc:	4a57      	ldr	r2, [pc, #348]	; (800952c <sl_wfx_connect_callback+0x204>)
 80093ce:	4614      	mov	r4, r2
 80093d0:	469c      	mov	ip, r3
 80093d2:	f104 0e20 	add.w	lr, r4, #32
 80093d6:	4665      	mov	r5, ip
 80093d8:	4626      	mov	r6, r4
 80093da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093dc:	6028      	str	r0, [r5, #0]
 80093de:	6069      	str	r1, [r5, #4]
 80093e0:	60aa      	str	r2, [r5, #8]
 80093e2:	60eb      	str	r3, [r5, #12]
 80093e4:	3410      	adds	r4, #16
 80093e6:	f10c 0c10 	add.w	ip, ip, #16
 80093ea:	4574      	cmp	r4, lr
 80093ec:	d1f3      	bne.n	80093d6 <sl_wfx_connect_callback+0xae>
 80093ee:	4662      	mov	r2, ip
 80093f0:	4623      	mov	r3, r4
 80093f2:	cb03      	ldmia	r3!, {r0, r1}
 80093f4:	6010      	str	r0, [r2, #0]
 80093f6:	6051      	str	r1, [r2, #4]
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	8113      	strh	r3, [r2, #8]
      printf(event_log);
 80093fc:	484a      	ldr	r0, [pc, #296]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80093fe:	f011 fe49 	bl	801b094 <iprintf>
      printf("\r\n");
 8009402:	484b      	ldr	r0, [pc, #300]	; (8009530 <sl_wfx_connect_callback+0x208>)
 8009404:	f011 feac 	bl	801b160 <puts>
      wifi_autoconnexion_init();
 8009408:	f7f8 fa62 	bl	80018d0 <wifi_autoconnexion_init>
      break;
 800940c:	e080      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_ABORTED:
    {
      strcpy(event_log, "Connection aborted");
 800940e:	4a46      	ldr	r2, [pc, #280]	; (8009528 <sl_wfx_connect_callback+0x200>)
 8009410:	4b48      	ldr	r3, [pc, #288]	; (8009534 <sl_wfx_connect_callback+0x20c>)
 8009412:	4615      	mov	r5, r2
 8009414:	461c      	mov	r4, r3
 8009416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009418:	6028      	str	r0, [r5, #0]
 800941a:	6069      	str	r1, [r5, #4]
 800941c:	60aa      	str	r2, [r5, #8]
 800941e:	60eb      	str	r3, [r5, #12]
 8009420:	8823      	ldrh	r3, [r4, #0]
 8009422:	78a2      	ldrb	r2, [r4, #2]
 8009424:	822b      	strh	r3, [r5, #16]
 8009426:	4613      	mov	r3, r2
 8009428:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 800942a:	483f      	ldr	r0, [pc, #252]	; (8009528 <sl_wfx_connect_callback+0x200>)
 800942c:	f011 fe32 	bl	801b094 <iprintf>
      printf("\r\n");
 8009430:	483f      	ldr	r0, [pc, #252]	; (8009530 <sl_wfx_connect_callback+0x208>)
 8009432:	f011 fe95 	bl	801b160 <puts>
      wifi_autoconnexion_init();
 8009436:	f7f8 fa4b 	bl	80018d0 <wifi_autoconnexion_init>
      break;
 800943a:	e069      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_TIMEOUT:
    {
      strcpy(event_log, "Connection timeout");
 800943c:	4a3a      	ldr	r2, [pc, #232]	; (8009528 <sl_wfx_connect_callback+0x200>)
 800943e:	4b3e      	ldr	r3, [pc, #248]	; (8009538 <sl_wfx_connect_callback+0x210>)
 8009440:	4615      	mov	r5, r2
 8009442:	461c      	mov	r4, r3
 8009444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009446:	6028      	str	r0, [r5, #0]
 8009448:	6069      	str	r1, [r5, #4]
 800944a:	60aa      	str	r2, [r5, #8]
 800944c:	60eb      	str	r3, [r5, #12]
 800944e:	8823      	ldrh	r3, [r4, #0]
 8009450:	78a2      	ldrb	r2, [r4, #2]
 8009452:	822b      	strh	r3, [r5, #16]
 8009454:	4613      	mov	r3, r2
 8009456:	74ab      	strb	r3, [r5, #18]
      printf(event_log);
 8009458:	4833      	ldr	r0, [pc, #204]	; (8009528 <sl_wfx_connect_callback+0x200>)
 800945a:	f011 fe1b 	bl	801b094 <iprintf>
      printf("\r\n");
 800945e:	4834      	ldr	r0, [pc, #208]	; (8009530 <sl_wfx_connect_callback+0x208>)
 8009460:	f011 fe7e 	bl	801b160 <puts>
      wifi_autoconnexion_init();
 8009464:	f7f8 fa34 	bl	80018d0 <wifi_autoconnexion_init>
      break;
 8009468:	e052      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_REJECTED_BY_AP:
    {
      strcpy(event_log, "Connection rejected by the access point");
 800946a:	4b2f      	ldr	r3, [pc, #188]	; (8009528 <sl_wfx_connect_callback+0x200>)
 800946c:	4a33      	ldr	r2, [pc, #204]	; (800953c <sl_wfx_connect_callback+0x214>)
 800946e:	4614      	mov	r4, r2
 8009470:	469c      	mov	ip, r3
 8009472:	f104 0e20 	add.w	lr, r4, #32
 8009476:	4665      	mov	r5, ip
 8009478:	4626      	mov	r6, r4
 800947a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800947c:	6028      	str	r0, [r5, #0]
 800947e:	6069      	str	r1, [r5, #4]
 8009480:	60aa      	str	r2, [r5, #8]
 8009482:	60eb      	str	r3, [r5, #12]
 8009484:	3410      	adds	r4, #16
 8009486:	f10c 0c10 	add.w	ip, ip, #16
 800948a:	4574      	cmp	r4, lr
 800948c:	d1f3      	bne.n	8009476 <sl_wfx_connect_callback+0x14e>
 800948e:	4662      	mov	r2, ip
 8009490:	4623      	mov	r3, r4
 8009492:	cb03      	ldmia	r3!, {r0, r1}
 8009494:	6010      	str	r0, [r2, #0]
 8009496:	6051      	str	r1, [r2, #4]
      printf(event_log);
 8009498:	4823      	ldr	r0, [pc, #140]	; (8009528 <sl_wfx_connect_callback+0x200>)
 800949a:	f011 fdfb 	bl	801b094 <iprintf>
      printf("\r\n");
 800949e:	4824      	ldr	r0, [pc, #144]	; (8009530 <sl_wfx_connect_callback+0x208>)
 80094a0:	f011 fe5e 	bl	801b160 <puts>
      break;
 80094a4:	e034      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
    }
  case WFM_STATUS_CONNECTION_AUTH_FAILURE:
    {
      strcpy(event_log, "Connection authentication failure");
 80094a6:	4b20      	ldr	r3, [pc, #128]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80094a8:	4a25      	ldr	r2, [pc, #148]	; (8009540 <sl_wfx_connect_callback+0x218>)
 80094aa:	4614      	mov	r4, r2
 80094ac:	469c      	mov	ip, r3
 80094ae:	f104 0e20 	add.w	lr, r4, #32
 80094b2:	4665      	mov	r5, ip
 80094b4:	4626      	mov	r6, r4
 80094b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80094b8:	6028      	str	r0, [r5, #0]
 80094ba:	6069      	str	r1, [r5, #4]
 80094bc:	60aa      	str	r2, [r5, #8]
 80094be:	60eb      	str	r3, [r5, #12]
 80094c0:	3410      	adds	r4, #16
 80094c2:	f10c 0c10 	add.w	ip, ip, #16
 80094c6:	4574      	cmp	r4, lr
 80094c8:	d1f3      	bne.n	80094b2 <sl_wfx_connect_callback+0x18a>
 80094ca:	4662      	mov	r2, ip
 80094cc:	4623      	mov	r3, r4
 80094ce:	881b      	ldrh	r3, [r3, #0]
 80094d0:	8013      	strh	r3, [r2, #0]
      printf(event_log);
 80094d2:	4815      	ldr	r0, [pc, #84]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80094d4:	f011 fdde 	bl	801b094 <iprintf>
      printf("\r\n");
 80094d8:	4815      	ldr	r0, [pc, #84]	; (8009530 <sl_wfx_connect_callback+0x208>)
 80094da:	f011 fe41 	bl	801b160 <puts>
      break;
 80094de:	e017      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
    }
  default:
    {
      strcpy(event_log, "Connection attempt error");
 80094e0:	4a11      	ldr	r2, [pc, #68]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80094e2:	4b18      	ldr	r3, [pc, #96]	; (8009544 <sl_wfx_connect_callback+0x21c>)
 80094e4:	4615      	mov	r5, r2
 80094e6:	461c      	mov	r4, r3
 80094e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094ea:	6028      	str	r0, [r5, #0]
 80094ec:	6069      	str	r1, [r5, #4]
 80094ee:	60aa      	str	r2, [r5, #8]
 80094f0:	60eb      	str	r3, [r5, #12]
 80094f2:	cc03      	ldmia	r4!, {r0, r1}
 80094f4:	6128      	str	r0, [r5, #16]
 80094f6:	6169      	str	r1, [r5, #20]
 80094f8:	7823      	ldrb	r3, [r4, #0]
 80094fa:	762b      	strb	r3, [r5, #24]
      printf(event_log);
 80094fc:	480a      	ldr	r0, [pc, #40]	; (8009528 <sl_wfx_connect_callback+0x200>)
 80094fe:	f011 fdc9 	bl	801b094 <iprintf>
      printf("\r\n");
 8009502:	480b      	ldr	r0, [pc, #44]	; (8009530 <sl_wfx_connect_callback+0x208>)
 8009504:	f011 fe2c 	bl	801b160 <puts>
      wifi_autoconnexion_init();
 8009508:	f7f8 f9e2 	bl	80018d0 <wifi_autoconnexion_init>
    }
  }
}
 800950c:	e000      	b.n	8009510 <sl_wfx_connect_callback+0x1e8>
      break;
 800950e:	bf00      	nop
}
 8009510:	bf00      	nop
 8009512:	3714      	adds	r7, #20
 8009514:	46bd      	mov	sp, r7
 8009516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009518:	0801d850 	.word	0x0801d850
 800951c:	0801d860 	.word	0x0801d860
 8009520:	20000a94 	.word	0x20000a94
 8009524:	200013e4 	.word	0x200013e4
 8009528:	2000089c 	.word	0x2000089c
 800952c:	0801d87c 	.word	0x0801d87c
 8009530:	0801d7e0 	.word	0x0801d7e0
 8009534:	0801d8a8 	.word	0x0801d8a8
 8009538:	0801d8bc 	.word	0x0801d8bc
 800953c:	0801d8d0 	.word	0x0801d8d0
 8009540:	0801d8f8 	.word	0x0801d8f8
 8009544:	0801d91c 	.word	0x0801d91c

08009548 <sl_wfx_disconnect_callback>:

/**************************************************************************//**
 * Callback for station disconnect
 *****************************************************************************/
void sl_wfx_disconnect_callback (sl_wfx_disconnect_ind_t *disconnect) {
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("Disconnected %d\r\n", disconnect->body.reason);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	895b      	ldrh	r3, [r3, #10]
 8009554:	b29b      	uxth	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	4817      	ldr	r0, [pc, #92]	; (80095b8 <sl_wfx_disconnect_callback+0x70>)
 800955a:	f011 fd9b 	bl	801b094 <iprintf>
  sl_wfx_context->state &= ~SL_WFX_STA_INTERFACE_CONNECTED;
 800955e:	4b17      	ldr	r3, [pc, #92]	; (80095bc <sl_wfx_disconnect_callback+0x74>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <sl_wfx_disconnect_callback+0x74>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0202 	bic.w	r2, r2, #2
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       disconnect->header.length);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	881b      	ldrh	r3, [r3, #0]
 8009578:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 800957a:	461a      	mov	r2, r3
 800957c:	f107 0308 	add.w	r3, r7, #8
 8009580:	2101      	movs	r1, #1
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fd6a 	bl	800905c <sl_wfx_host_allocate_buffer>
 8009588:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10f      	bne.n	80095b0 <sl_wfx_disconnect_callback+0x68>
    memcpy(buffer, (void *)disconnect, disconnect->header.length);
 8009590:	68b8      	ldr	r0, [r7, #8]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	881b      	ldrh	r3, [r3, #0]
 8009596:	b29b      	uxth	r3, r3
 8009598:	461a      	mov	r2, r3
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	f011 ff99 	bl	801b4d2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80095a0:	4b07      	ldr	r3, [pc, #28]	; (80095c0 <sl_wfx_disconnect_callback+0x78>)
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	f107 0108 	add.w	r1, r7, #8
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	f001 f8fc 	bl	800a7a8 <xQueueGenericSend>
  }
}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	0801d938 	.word	0x0801d938
 80095bc:	20000a94 	.word	0x20000a94
 80095c0:	200013e4 	.word	0x200013e4

080095c4 <sl_wfx_start_ap_callback>:

/**************************************************************************//**
 * Callback for AP started
 *****************************************************************************/
void sl_wfx_start_ap_callback (sl_wfx_start_ap_ind_t *start_ap) {
 80095c4:	b5b0      	push	{r4, r5, r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  if (start_ap->body.status == 0) {
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d130      	bne.n	8009636 <sl_wfx_start_ap_callback+0x72>
    printf("AP started\r\n");
 80095d4:	4820      	ldr	r0, [pc, #128]	; (8009658 <sl_wfx_start_ap_callback+0x94>)
 80095d6:	f011 fdc3 	bl	801b160 <puts>
    printf("Join the AP with SSID: %s\r\n", softap_ssid);
 80095da:	4920      	ldr	r1, [pc, #128]	; (800965c <sl_wfx_start_ap_callback+0x98>)
 80095dc:	4820      	ldr	r0, [pc, #128]	; (8009660 <sl_wfx_start_ap_callback+0x9c>)
 80095de:	f011 fd59 	bl	801b094 <iprintf>
    sl_wfx_context->state |= SL_WFX_AP_INTERFACE_UP;
 80095e2:	4b20      	ldr	r3, [pc, #128]	; (8009664 <sl_wfx_start_ap_callback+0xa0>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 80095ea:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <sl_wfx_start_ap_callback+0xa0>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 0204 	orr.w	r2, r2, #4
 80095f2:	b2d2      	uxtb	r2, r2
 80095f4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

    status = sl_wfx_host_allocate_buffer(&buffer,
                                         SL_WFX_RX_FRAME_BUFFER,
                                         start_ap->header.length);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
    status = sl_wfx_host_allocate_buffer(&buffer,
 80095fe:	461a      	mov	r2, r3
 8009600:	f107 0308 	add.w	r3, r7, #8
 8009604:	2101      	movs	r1, #1
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff fd28 	bl	800905c <sl_wfx_host_allocate_buffer>
 800960c:	60f8      	str	r0, [r7, #12]
    if (status == SL_STATUS_OK) {
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d11c      	bne.n	800964e <sl_wfx_start_ap_callback+0x8a>
      memcpy(buffer, (void *)start_ap, start_ap->header.length);
 8009614:	68b8      	ldr	r0, [r7, #8]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	461a      	mov	r2, r3
 800961e:	6879      	ldr	r1, [r7, #4]
 8009620:	f011 ff57 	bl	801b4d2 <memcpy>
      xQueueSend(wifi_event_queue, &buffer, 0);
 8009624:	4b10      	ldr	r3, [pc, #64]	; (8009668 <sl_wfx_start_ap_callback+0xa4>)
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	f107 0108 	add.w	r1, r7, #8
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	f001 f8ba 	bl	800a7a8 <xQueueGenericSend>
    }
  } else {
    printf("AP start failed\r\n");
    strcpy(event_log, "AP start failed");
  }
}
 8009634:	e00b      	b.n	800964e <sl_wfx_start_ap_callback+0x8a>
    printf("AP start failed\r\n");
 8009636:	480d      	ldr	r0, [pc, #52]	; (800966c <sl_wfx_start_ap_callback+0xa8>)
 8009638:	f011 fd92 	bl	801b160 <puts>
    strcpy(event_log, "AP start failed");
 800963c:	4a0c      	ldr	r2, [pc, #48]	; (8009670 <sl_wfx_start_ap_callback+0xac>)
 800963e:	4b0d      	ldr	r3, [pc, #52]	; (8009674 <sl_wfx_start_ap_callback+0xb0>)
 8009640:	4614      	mov	r4, r2
 8009642:	461d      	mov	r5, r3
 8009644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009646:	6020      	str	r0, [r4, #0]
 8009648:	6061      	str	r1, [r4, #4]
 800964a:	60a2      	str	r2, [r4, #8]
 800964c:	60e3      	str	r3, [r4, #12]
}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bdb0      	pop	{r4, r5, r7, pc}
 8009656:	bf00      	nop
 8009658:	0801d94c 	.word	0x0801d94c
 800965c:	20000068 	.word	0x20000068
 8009660:	0801d958 	.word	0x0801d958
 8009664:	20000a94 	.word	0x20000a94
 8009668:	200013e4 	.word	0x200013e4
 800966c:	0801d974 	.word	0x0801d974
 8009670:	2000089c 	.word	0x2000089c
 8009674:	0801d988 	.word	0x0801d988

08009678 <sl_wfx_stop_ap_callback>:


/**************************************************************************//**
 * Callback for AP stopped
 *****************************************************************************/
void sl_wfx_stop_ap_callback(sl_wfx_stop_ap_ind_t *stop_ap) {
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  printf("SoftAP stopped\r\n");
 8009680:	4818      	ldr	r0, [pc, #96]	; (80096e4 <sl_wfx_stop_ap_callback+0x6c>)
 8009682:	f011 fd6d 	bl	801b160 <puts>
  dhcpserver_clear_stored_mac();
 8009686:	f7f8 fd41 	bl	800210c <dhcpserver_clear_stored_mac>
  sl_wfx_context->state &= ~SL_WFX_AP_INTERFACE_UP;
 800968a:	4b17      	ldr	r3, [pc, #92]	; (80096e8 <sl_wfx_stop_ap_callback+0x70>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f893 2222 	ldrb.w	r2, [r3, #546]	; 0x222
 8009692:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <sl_wfx_stop_ap_callback+0x70>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0204 	bic.w	r2, r2, #4
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       stop_ap->length);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	881b      	ldrh	r3, [r3, #0]
 80096a4:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 80096a6:	461a      	mov	r2, r3
 80096a8:	f107 0308 	add.w	r3, r7, #8
 80096ac:	2101      	movs	r1, #1
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fcd4 	bl	800905c <sl_wfx_host_allocate_buffer>
 80096b4:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10f      	bne.n	80096dc <sl_wfx_stop_ap_callback+0x64>
    memcpy(buffer, (void *)stop_ap, stop_ap->length);
 80096bc:	68b8      	ldr	r0, [r7, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	f011 ff03 	bl	801b4d2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 80096cc:	4b07      	ldr	r3, [pc, #28]	; (80096ec <sl_wfx_stop_ap_callback+0x74>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f107 0108 	add.w	r1, r7, #8
 80096d4:	2300      	movs	r3, #0
 80096d6:	2200      	movs	r2, #0
 80096d8:	f001 f866 	bl	800a7a8 <xQueueGenericSend>
  }
}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	0801d998 	.word	0x0801d998
 80096e8:	20000a94 	.word	0x20000a94
 80096ec:	200013e4 	.word	0x200013e4

080096f0 <sl_wfx_ap_client_connected_callback>:

/**************************************************************************//**
 * Callback for client connect to AP
 *****************************************************************************/
void sl_wfx_ap_client_connected_callback (sl_wfx_ap_client_connected_ind_t *ap_client_connected) {
 80096f0:	b5b0      	push	{r4, r5, r7, lr}
 80096f2:	b086      	sub	sp, #24
 80096f4:	af04      	add	r7, sp, #16
 80096f6:	6078      	str	r0, [r7, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_connected->body.mac[0],
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	791b      	ldrb	r3, [r3, #4]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80096fc:	4618      	mov	r0, r3
         ap_client_connected->body.mac[1],
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	795b      	ldrb	r3, [r3, #5]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009702:	461c      	mov	r4, r3
         ap_client_connected->body.mac[2],
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	799b      	ldrb	r3, [r3, #6]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009708:	461d      	mov	r5, r3
         ap_client_connected->body.mac[3],
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	79db      	ldrb	r3, [r3, #7]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800970e:	461a      	mov	r2, r3
         ap_client_connected->body.mac[4],
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009714:	4619      	mov	r1, r3
         ap_client_connected->body.mac[5]);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client connected, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800971a:	9302      	str	r3, [sp, #8]
 800971c:	9101      	str	r1, [sp, #4]
 800971e:	9200      	str	r2, [sp, #0]
 8009720:	462b      	mov	r3, r5
 8009722:	4622      	mov	r2, r4
 8009724:	4601      	mov	r1, r0
 8009726:	480b      	ldr	r0, [pc, #44]	; (8009754 <sl_wfx_ap_client_connected_callback+0x64>)
 8009728:	f011 fcb4 	bl	801b094 <iprintf>
  printf("Open a web browser and go to http://%d.%d.%d.%d\r\n",
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <sl_wfx_ap_client_connected_callback+0x68>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	4619      	mov	r1, r3
 8009732:	4b0a      	ldr	r3, [pc, #40]	; (800975c <sl_wfx_ap_client_connected_callback+0x6c>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	4b09      	ldr	r3, [pc, #36]	; (8009760 <sl_wfx_ap_client_connected_callback+0x70>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	4618      	mov	r0, r3
 800973e:	4b09      	ldr	r3, [pc, #36]	; (8009764 <sl_wfx_ap_client_connected_callback+0x74>)
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	4603      	mov	r3, r0
 8009746:	4808      	ldr	r0, [pc, #32]	; (8009768 <sl_wfx_ap_client_connected_callback+0x78>)
 8009748:	f011 fca4 	bl	801b094 <iprintf>
         ap_ip_addr0, ap_ip_addr1, ap_ip_addr2, ap_ip_addr3);
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bdb0      	pop	{r4, r5, r7, pc}
 8009754:	0801d9a8 	.word	0x0801d9a8
 8009758:	20000096 	.word	0x20000096
 800975c:	20000097 	.word	0x20000097
 8009760:	20000098 	.word	0x20000098
 8009764:	20000099 	.word	0x20000099
 8009768:	0801d9e0 	.word	0x0801d9e0

0800976c <sl_wfx_ap_client_rejected_callback>:

/**************************************************************************//**
 * Callback for client rejected from AP
 *****************************************************************************/
void sl_wfx_ap_client_rejected_callback (sl_wfx_ap_client_rejected_ind_t *ap_client_rejected) {
 800976c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af04      	add	r7, sp, #16
 8009772:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_rejected->body.mac, SL_WFX_BSSID_SIZE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	1d1a      	adds	r2, r3, #4
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	6810      	ldr	r0, [r2, #0]
 800977e:	6018      	str	r0, [r3, #0]
 8009780:	8892      	ldrh	r2, [r2, #4]
 8009782:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	4618      	mov	r0, r3
 800978a:	f7f8 fb01 	bl	8001d90 <dhcpserver_remove_mac>
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_rejected->body.reason,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	895b      	ldrh	r3, [r3, #10]
 8009792:	b29b      	uxth	r3, r3
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009794:	461c      	mov	r4, r3
         ap_client_rejected->body.mac[0],
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	791b      	ldrb	r3, [r3, #4]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800979a:	461d      	mov	r5, r3
         ap_client_rejected->body.mac[1],
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	795b      	ldrb	r3, [r3, #5]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097a0:	461e      	mov	r6, r3
         ap_client_rejected->body.mac[2],
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	799b      	ldrb	r3, [r3, #6]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097a6:	461a      	mov	r2, r3
         ap_client_rejected->body.mac[3],
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	79db      	ldrb	r3, [r3, #7]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097ac:	4619      	mov	r1, r3
         ap_client_rejected->body.mac[4],
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097b2:	4618      	mov	r0, r3
         ap_client_rejected->body.mac[5]);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client rejected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 80097b8:	9303      	str	r3, [sp, #12]
 80097ba:	9002      	str	r0, [sp, #8]
 80097bc:	9101      	str	r1, [sp, #4]
 80097be:	9200      	str	r2, [sp, #0]
 80097c0:	4633      	mov	r3, r6
 80097c2:	462a      	mov	r2, r5
 80097c4:	4621      	mov	r1, r4
 80097c6:	4803      	ldr	r0, [pc, #12]	; (80097d4 <sl_wfx_ap_client_rejected_callback+0x68>)
 80097c8:	f011 fc64 	bl	801b094 <iprintf>
}
 80097cc:	bf00      	nop
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	0801da14 	.word	0x0801da14

080097d8 <sl_wfx_ap_client_disconnected_callback>:

/**************************************************************************//**
 * Callback for AP client disconnect
 *****************************************************************************/
void sl_wfx_ap_client_disconnected_callback (sl_wfx_ap_client_disconnected_ind_t *ap_client_disconnected) {
 80097d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097da:	b089      	sub	sp, #36	; 0x24
 80097dc:	af04      	add	r7, sp, #16
 80097de:	6078      	str	r0, [r7, #4]
  struct eth_addr mac_addr;
  
  memcpy(&mac_addr, ap_client_disconnected->body.mac, SL_WFX_BSSID_SIZE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	1d1a      	adds	r2, r3, #4
 80097e4:	f107 0308 	add.w	r3, r7, #8
 80097e8:	6810      	ldr	r0, [r2, #0]
 80097ea:	6018      	str	r0, [r3, #0]
 80097ec:	8892      	ldrh	r2, [r2, #4]
 80097ee:	809a      	strh	r2, [r3, #4]
  dhcpserver_remove_mac(&mac_addr);
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f8 facb 	bl	8001d90 <dhcpserver_remove_mac>
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
         ap_client_disconnected->body.reason,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	895b      	ldrh	r3, [r3, #10]
 80097fe:	b29b      	uxth	r3, r3
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009800:	461c      	mov	r4, r3
         ap_client_disconnected->body.mac[0],
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	791b      	ldrb	r3, [r3, #4]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009806:	461d      	mov	r5, r3
         ap_client_disconnected->body.mac[1],
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	795b      	ldrb	r3, [r3, #5]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800980c:	461e      	mov	r6, r3
         ap_client_disconnected->body.mac[2],
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	799b      	ldrb	r3, [r3, #6]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009812:	461a      	mov	r2, r3
         ap_client_disconnected->body.mac[3],
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	79db      	ldrb	r3, [r3, #7]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009818:	4619      	mov	r1, r3
         ap_client_disconnected->body.mac[4],
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7a1b      	ldrb	r3, [r3, #8]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800981e:	4618      	mov	r0, r3
         ap_client_disconnected->body.mac[5]);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	7a5b      	ldrb	r3, [r3, #9]
  printf("Client disconnected, reason: %d, MAC: %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8009824:	9303      	str	r3, [sp, #12]
 8009826:	9002      	str	r0, [sp, #8]
 8009828:	9101      	str	r1, [sp, #4]
 800982a:	9200      	str	r2, [sp, #0]
 800982c:	4633      	mov	r3, r6
 800982e:	462a      	mov	r2, r5
 8009830:	4621      	mov	r1, r4
 8009832:	4803      	ldr	r0, [pc, #12]	; (8009840 <sl_wfx_ap_client_disconnected_callback+0x68>)
 8009834:	f011 fc2e 	bl	801b094 <iprintf>
}
 8009838:	bf00      	nop
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009840:	0801da58 	.word	0x0801da58

08009844 <sl_wfx_ext_auth_callback>:

/**************************************************************************//**
 * Callback for External Authentication
 *****************************************************************************/
void sl_wfx_ext_auth_callback (sl_wfx_ext_auth_ind_t *ext_auth_indication) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  void *buffer;
  sl_status_t status;

  status = sl_wfx_host_allocate_buffer(&buffer,
                                       SL_WFX_RX_FRAME_BUFFER,
                                       ext_auth_indication->header.length);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
  status = sl_wfx_host_allocate_buffer(&buffer,
 8009852:	461a      	mov	r2, r3
 8009854:	f107 0308 	add.w	r3, r7, #8
 8009858:	2101      	movs	r1, #1
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff fbfe 	bl	800905c <sl_wfx_host_allocate_buffer>
 8009860:	60f8      	str	r0, [r7, #12]
  if (status == SL_STATUS_OK) {
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10f      	bne.n	8009888 <sl_wfx_ext_auth_callback+0x44>
    memcpy(buffer,
 8009868:	68b8      	ldr	r0, [r7, #8]
           (void *)ext_auth_indication,
           ext_auth_indication->header.length);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	b29b      	uxth	r3, r3
    memcpy(buffer,
 8009870:	461a      	mov	r2, r3
 8009872:	6879      	ldr	r1, [r7, #4]
 8009874:	f011 fe2d 	bl	801b4d2 <memcpy>
    xQueueSend(wifi_event_queue, &buffer, 0);
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <sl_wfx_ext_auth_callback+0x4c>)
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	2300      	movs	r3, #0
 8009882:	2200      	movs	r2, #0
 8009884:	f000 ff90 	bl	800a7a8 <xQueueGenericSend>
  }
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	200013e4 	.word	0x200013e4

08009894 <wifi_events_start>:
static void wifi_events_task_entry(void const * pvParameters);

/**************************************************************************//**
 * Start the Wi-Fi event handling task
 *****************************************************************************/
void wifi_events_start (void) {
 8009894:	b5b0      	push	{r4, r5, r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
  sae_exch_sem = xSemaphoreCreateBinary();
 800989a:	2203      	movs	r2, #3
 800989c:	2100      	movs	r1, #0
 800989e:	2001      	movs	r0, #1
 80098a0:	f000 fefa 	bl	800a698 <xQueueGenericCreate>
 80098a4:	4603      	mov	r3, r0
 80098a6:	4a0d      	ldr	r2, [pc, #52]	; (80098dc <wifi_events_start+0x48>)
 80098a8:	6013      	str	r3, [r2, #0]
  osThreadDef(eventsTask, wifi_events_task_entry, osPriorityBelowNormal, 0, 1024);
 80098aa:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <wifi_events_start+0x4c>)
 80098ac:	1d3c      	adds	r4, r7, #4
 80098ae:	461d      	mov	r5, r3
 80098b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(eventsTask), NULL);
 80098b8:	1d3b      	adds	r3, r7, #4
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fa70 	bl	8009da2 <osThreadCreate>
  wifi_event_queue = xQueueCreate(SL_WFX_EVENTS_NB_MAX, sizeof(void *));
 80098c2:	2200      	movs	r2, #0
 80098c4:	2104      	movs	r1, #4
 80098c6:	200a      	movs	r0, #10
 80098c8:	f000 fee6 	bl	800a698 <xQueueGenericCreate>
 80098cc:	4603      	mov	r3, r0
 80098ce:	4a05      	ldr	r2, [pc, #20]	; (80098e4 <wifi_events_start+0x50>)
 80098d0:	6013      	str	r3, [r2, #0]
}
 80098d2:	bf00      	nop
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bdb0      	pop	{r4, r5, r7, pc}
 80098da:	bf00      	nop
 80098dc:	200013e8 	.word	0x200013e8
 80098e0:	0801daac 	.word	0x0801daac
 80098e4:	200013e4 	.word	0x200013e4

080098e8 <wifi_events_task_entry>:

/**************************************************************************//**
 * Wi-Fi event handling task entry point
 *****************************************************************************/
static void wifi_events_task_entry (void const * pvParameters) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  sl_wfx_generic_message_t *msg;
  BaseType_t ret;
  
	while(1) {

	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 80098f0:	4b22      	ldr	r3, [pc, #136]	; (800997c <wifi_events_task_entry+0x94>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f107 0108 	add.w	r1, r7, #8
 80098f8:	f04f 32ff 	mov.w	r2, #4294967295
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 f979 	bl	800abf4 <xQueueReceive>
 8009902:	60f8      	str	r0, [r7, #12]
     
    if ((ret == pdTRUE) && (msg != NULL)) {
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d1f2      	bne.n	80098f0 <wifi_events_task_entry+0x8>
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0ef      	beq.n	80098f0 <wifi_events_task_entry+0x8>
      switch (msg->header.id) {
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	789b      	ldrb	r3, [r3, #2]
 8009914:	3bc3      	subs	r3, #195	; 0xc3
 8009916:	2b09      	cmp	r3, #9
 8009918:	d82a      	bhi.n	8009970 <wifi_events_task_entry+0x88>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <wifi_events_task_entry+0x38>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009949 	.word	0x08009949
 8009924:	0800994f 	.word	0x0800994f
 8009928:	08009955 	.word	0x08009955
 800992c:	08009971 	.word	0x08009971
 8009930:	0800995b 	.word	0x0800995b
 8009934:	08009971 	.word	0x08009971
 8009938:	08009971 	.word	0x08009971
 800993c:	08009971 	.word	0x08009971
 8009940:	08009971 	.word	0x08009971
 8009944:	08009961 	.word	0x08009961
        case SL_WFX_CONNECT_IND_ID:
        {
          lwip_set_sta_link_up();
 8009948:	f7f9 fca2 	bl	8003290 <lwip_set_sta_link_up>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800994c:	e010      	b.n	8009970 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_DISCONNECT_IND_ID:
        {
          lwip_set_sta_link_down();
 800994e:	f7f9 fcbd 	bl	80032cc <lwip_set_sta_link_down>
          break;
 8009952:	e00d      	b.n	8009970 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_START_AP_IND_ID:
        {
          lwip_set_ap_link_up();
 8009954:	f7f9 fcd8 	bl	8003308 <lwip_set_ap_link_up>
#ifdef SLEEP_ENABLED
          /* Power save always disabled when SoftAP mode enabled */
          sl_wfx_set_power_mode(WFM_PM_MODE_ACTIVE, WFM_PM_POLL_FAST_PS, 0);
          sl_wfx_disable_device_power_save();
#endif
          break;
 8009958:	e00a      	b.n	8009970 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_STOP_AP_IND_ID:
        {
          lwip_set_ap_link_down();
 800995a:	f7f9 fceb 	bl	8003334 <lwip_set_ap_link_down>
            /* Enable the power save */
            sl_wfx_set_power_mode(WFM_PM_MODE_PS, WFM_PM_POLL_FAST_PS,1);
            sl_wfx_enable_device_power_save();
          }
#endif
          break;
 800995e:	e007      	b.n	8009970 <wifi_events_task_entry+0x88>
        }
        case SL_WFX_SCAN_COMPLETE_IND_ID:
        {
          xSemaphoreGive(wifi_scan_sem);
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <wifi_events_task_entry+0x98>)
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	2200      	movs	r2, #0
 8009968:	2100      	movs	r1, #0
 800996a:	f000 ff1d 	bl	800a7a8 <xQueueGenericSend>
          break;
 800996e:	bf00      	nop
        }
      }

      sl_wfx_host_free_buffer(msg, SL_WFX_RX_FRAME_BUFFER);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2101      	movs	r1, #1
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff fb83 	bl	8009080 <sl_wfx_host_free_buffer>
	ret = xQueueReceive(wifi_event_queue, (void *)&msg, portMAX_DELAY);
 800997a:	e7b9      	b.n	80098f0 <wifi_events_task_entry+0x8>
 800997c:	200013e4 	.word	0x200013e4
 8009980:	200013d8 	.word	0x200013d8

08009984 <sl_wfx_host_init_bus>:
SemaphoreHandle_t spiDMASemaphore;

/**************************************************************************//**
 * Bus init function
 *****************************************************************************/
sl_status_t sl_wfx_host_init_bus (void) {
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
  /* Init SPI interface */
  MX_SPI1_Init();
 8009988:	f000 f8a8 	bl	8009adc <MX_SPI1_Init>

  /*Create semaphore to handle SPI*/
  spiDMASemaphore = xSemaphoreCreateBinary();
 800998c:	2203      	movs	r2, #3
 800998e:	2100      	movs	r1, #0
 8009990:	2001      	movs	r0, #1
 8009992:	f000 fe81 	bl	800a698 <xQueueGenericCreate>
 8009996:	4603      	mov	r3, r0
 8009998:	4a05      	ldr	r2, [pc, #20]	; (80099b0 <sl_wfx_host_init_bus+0x2c>)
 800999a:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(spiDMASemaphore);
 800999c:	4b04      	ldr	r3, [pc, #16]	; (80099b0 <sl_wfx_host_init_bus+0x2c>)
 800999e:	6818      	ldr	r0, [r3, #0]
 80099a0:	2300      	movs	r3, #0
 80099a2:	2200      	movs	r2, #0
 80099a4:	2100      	movs	r1, #0
 80099a6:	f000 feff 	bl	800a7a8 <xQueueGenericSend>
  return SL_STATUS_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20001504 	.word	0x20001504

080099b4 <sl_wfx_host_deinit_bus>:

/**************************************************************************//**
 * Bus deinit function
 *****************************************************************************/
sl_status_t sl_wfx_host_deinit_bus (void) {
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* Delete the semaphore (No function implemented for semaphores, use mutex function) */
  osMutexDelete(spiDMASemaphore);
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <sl_wfx_host_deinit_bus+0x18>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fac9 	bl	8009f54 <osMutexDelete>

  /* Deinit SPI interface */
  MX_SPI1_DeInit();
 80099c2:	f000 f8c1 	bl	8009b48 <MX_SPI1_DeInit>
  return SL_STATUS_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	20001504 	.word	0x20001504

080099d0 <sl_wfx_host_spi_cs_assert>:

/**************************************************************************//**
 * Assert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_assert (void) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_RESET);
 80099d4:	2200      	movs	r2, #0
 80099d6:	2110      	movs	r1, #16
 80099d8:	4802      	ldr	r0, [pc, #8]	; (80099e4 <sl_wfx_host_spi_cs_assert+0x14>)
 80099da:	f7fb fd85 	bl	80054e8 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40020000 	.word	0x40020000

080099e8 <sl_wfx_host_spi_cs_deassert>:

/**************************************************************************//**
 * Deassert SPI chip select
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_cs_deassert (void) {
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(WFM_NSS_GPIO_Port, WFM_NSS_Pin, GPIO_PIN_SET);
 80099ec:	2201      	movs	r2, #1
 80099ee:	2110      	movs	r1, #16
 80099f0:	4802      	ldr	r0, [pc, #8]	; (80099fc <sl_wfx_host_spi_cs_deassert+0x14>)
 80099f2:	f7fb fd79 	bl	80054e8 <HAL_GPIO_WritePin>
  return SL_STATUS_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	40020000 	.word	0x40020000

08009a00 <sl_wfx_host_spi_transfer_no_cs_assert>:
 *****************************************************************************/
sl_status_t sl_wfx_host_spi_transfer_no_cs_assert (sl_wfx_host_bus_transfer_type_t type,
                                                   uint8_t *header,
                                                   uint16_t header_length,
                                                   uint8_t *buffer,
                                                   uint16_t buffer_length) {
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607b      	str	r3, [r7, #4]
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	81bb      	strh	r3, [r7, #12]
  sl_status_t    result  = SL_STATUS_FAIL;
 8009a12:	2301      	movs	r3, #1
 8009a14:	617b      	str	r3, [r7, #20]
  const bool     is_read = ( type == SL_WFX_BUS_READ );
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	bf0c      	ite	eq
 8009a1c:	2301      	moveq	r3, #1
 8009a1e:	2300      	movne	r3, #0
 8009a20:	74fb      	strb	r3, [r7, #19]

  /* Wait for the DMA channels to be available */
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009a22:	4b21      	ldr	r3, [pc, #132]	; (8009aa8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f04f 31ff 	mov.w	r1, #4294967295
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 f9c2 	bl	800adb4 <xQueueSemaphoreTake>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d120      	bne.n	8009a78 <sl_wfx_host_spi_transfer_no_cs_assert+0x78>
	/* send the 2-byte header without DMA */

    HAL_SPI_Transmit(&hspi1, header, header_length, 1);
 8009a36:	89ba      	ldrh	r2, [r7, #12]
 8009a38:	2301      	movs	r3, #1
 8009a3a:	68b9      	ldr	r1, [r7, #8]
 8009a3c:	481b      	ldr	r0, [pc, #108]	; (8009aac <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009a3e:	f7fc fada 	bl	8005ff6 <HAL_SPI_Transmit>
    if (is_read) {
 8009a42:	7cfb      	ldrb	r3, [r7, #19]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <sl_wfx_host_spi_transfer_no_cs_assert+0x60>
      if(HAL_SPI_Receive_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009a48:	8c3b      	ldrh	r3, [r7, #32]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	4817      	ldr	r0, [pc, #92]	; (8009aac <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009a50:	f7fc fcc4 	bl	80063dc <HAL_SPI_Receive_DMA>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d110      	bne.n	8009a7c <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	e00d      	b.n	8009a7c <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
    else {
      if(HAL_SPI_Transmit_DMA(&hspi1, buffer, buffer_length) == HAL_OK) result = SL_STATUS_OK;
 8009a60:	8c3b      	ldrh	r3, [r7, #32]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4811      	ldr	r0, [pc, #68]	; (8009aac <sl_wfx_host_spi_transfer_no_cs_assert+0xac>)
 8009a68:	f7fc fc02 	bl	8006270 <HAL_SPI_Transmit_DMA>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d104      	bne.n	8009a7c <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
 8009a72:	2300      	movs	r3, #0
 8009a74:	617b      	str	r3, [r7, #20]
 8009a76:	e001      	b.n	8009a7c <sl_wfx_host_spi_transfer_no_cs_assert+0x7c>
    }
  } else {
    result = SL_STATUS_TIMEOUT;
 8009a78:	2307      	movs	r3, #7
 8009a7a:	617b      	str	r3, [r7, #20]
  }

  /* Wait to receive the semaphore back from the DMA. In case of a read function, this means data is ready to be read*/
  if (xSemaphoreTake(spiDMASemaphore, portMAX_DELAY) == pdTRUE ) {
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	; (8009aa8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f04f 31ff 	mov.w	r1, #4294967295
 8009a84:	4618      	mov	r0, r3
 8009a86:	f001 f995 	bl	800adb4 <xQueueSemaphoreTake>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d106      	bne.n	8009a9e <sl_wfx_host_spi_transfer_no_cs_assert+0x9e>
    xSemaphoreGive(spiDMASemaphore);
 8009a90:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <sl_wfx_host_spi_transfer_no_cs_assert+0xa8>)
 8009a92:	6818      	ldr	r0, [r3, #0]
 8009a94:	2300      	movs	r3, #0
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	f000 fe85 	bl	800a7a8 <xQueueGenericSend>
  }

  return result;
 8009a9e:	697b      	ldr	r3, [r7, #20]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	20001504 	.word	0x20001504
 8009aac:	200013ec 	.word	0x200013ec

08009ab0 <sl_wfx_host_enable_platform_interrupt>:

/**************************************************************************//**
 * Enable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_enable_platform_interrupt (void) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	210a      	movs	r1, #10
 8009ab8:	2028      	movs	r0, #40	; 0x28
 8009aba:	f7fa fe5c 	bl	8004776 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8009abe:	2028      	movs	r0, #40	; 0x28
 8009ac0:	f7fa fe75 	bl	80047ae <HAL_NVIC_EnableIRQ>
  return SL_STATUS_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <sl_wfx_host_disable_platform_interrupt>:

/**************************************************************************//**
 * Disable interrupt
 *****************************************************************************/
sl_status_t sl_wfx_host_disable_platform_interrupt (void) {
 8009aca:	b580      	push	{r7, lr}
 8009acc:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8009ace:	2028      	movs	r0, #40	; 0x28
 8009ad0:	f7fa fe7b 	bl	80047ca <HAL_NVIC_DisableIRQ>
  return SL_STATUS_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	bd80      	pop	{r7, pc}
	...

08009adc <MX_SPI1_Init>:

/**************************************************************************//**
 * SPI1 init function
 *****************************************************************************/
static void MX_SPI1_Init (void) {
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8009ae0:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009ae2:	4a18      	ldr	r2, [pc, #96]	; (8009b44 <MX_SPI1_Init+0x68>)
 8009ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ae6:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009aee:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009af4:	4b12      	ldr	r3, [pc, #72]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009afa:	4b11      	ldr	r3, [pc, #68]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009b06:	4b0e      	ldr	r3, [pc, #56]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b0e:	4b0c      	ldr	r3, [pc, #48]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009b14:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009b1a:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b20:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b22:	2200      	movs	r2, #0
 8009b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b28:	220a      	movs	r2, #10
 8009b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009b2c:	4804      	ldr	r0, [pc, #16]	; (8009b40 <MX_SPI1_Init+0x64>)
 8009b2e:	f7fc f9b1 	bl	8005e94 <HAL_SPI_Init>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009b38:	f7f9 ff96 	bl	8003a68 <Error_Handler>
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	200013ec 	.word	0x200013ec
 8009b44:	40013000 	.word	0x40013000

08009b48 <MX_SPI1_DeInit>:

/**************************************************************************//**
 * SPI1 deinit function
 *****************************************************************************/
static void MX_SPI1_DeInit (void) {
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* SPI DMA DeInit */
  HAL_DMA_DeInit(&hdma_spi1_rx);
 8009b4c:	4805      	ldr	r0, [pc, #20]	; (8009b64 <MX_SPI1_DeInit+0x1c>)
 8009b4e:	f7fa ff21 	bl	8004994 <HAL_DMA_DeInit>
  HAL_DMA_DeInit(&hdma_spi1_tx);
 8009b52:	4805      	ldr	r0, [pc, #20]	; (8009b68 <MX_SPI1_DeInit+0x20>)
 8009b54:	f7fa ff1e 	bl	8004994 <HAL_DMA_DeInit>

  HAL_SPI_DeInit(&hspi1);
 8009b58:	4804      	ldr	r0, [pc, #16]	; (8009b6c <MX_SPI1_DeInit+0x24>)
 8009b5a:	f7fc fa24 	bl	8005fa6 <HAL_SPI_DeInit>
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	200014a4 	.word	0x200014a4
 8009b68:	20001444 	.word	0x20001444
 8009b6c:	200013ec 	.word	0x200013ec

08009b70 <sl_wfx_task_start>:
static sl_status_t sl_wfx_tx_process (void);

/**************************************************************************//**
 * Init wfx process thread
 *****************************************************************************/
void sl_wfx_task_start (void) {
 8009b70:	b5b0      	push	{r4, r5, r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0

  sl_wfx_event_group = xEventGroupCreate();
 8009b76:	f000 fad4 	bl	800a122 <xEventGroupCreate>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4a10      	ldr	r2, [pc, #64]	; (8009bc0 <sl_wfx_task_start+0x50>)
 8009b7e:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_mutex = xSemaphoreCreateMutex();
 8009b80:	2001      	movs	r0, #1
 8009b82:	f000 fdf8 	bl	800a776 <xQueueCreateMutex>
 8009b86:	4603      	mov	r3, r0
 8009b88:	4a0e      	ldr	r2, [pc, #56]	; (8009bc4 <sl_wfx_task_start+0x54>)
 8009b8a:	6013      	str	r3, [r2, #0]
  sl_wfx_tx_queue_context.head_ptr = NULL;
 8009b8c:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <sl_wfx_task_start+0x58>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	601a      	str	r2, [r3, #0]
  sl_wfx_tx_queue_context.tail_ptr = NULL;
 8009b92:	4b0d      	ldr	r3, [pc, #52]	; (8009bc8 <sl_wfx_task_start+0x58>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	605a      	str	r2, [r3, #4]
  osThreadDef(sl_wfx_task, sl_wfx_task_entry, osPriorityNormal , 0, configMINIMAL_STACK_SIZE*4);//osPriorityHigh
 8009b98:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <sl_wfx_task_start+0x5c>)
 8009b9a:	1d3c      	adds	r4, r7, #4
 8009b9c:	461d      	mov	r5, r3
 8009b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	6023      	str	r3, [r4, #0]
  sl_wfx_task_handle = osThreadCreate(osThread(sl_wfx_task), NULL);
 8009ba6:	1d3b      	adds	r3, r7, #4
 8009ba8:	2100      	movs	r1, #0
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f8f9 	bl	8009da2 <osThreadCreate>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4a07      	ldr	r2, [pc, #28]	; (8009bd0 <sl_wfx_task_start+0x60>)
 8009bb4:	6013      	str	r3, [r2, #0]

}
 8009bb6:	bf00      	nop
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	2000150c 	.word	0x2000150c
 8009bc4:	20001510 	.word	0x20001510
 8009bc8:	20001514 	.word	0x20001514
 8009bcc:	0801dacc 	.word	0x0801dacc
 8009bd0:	20001508 	.word	0x20001508

08009bd4 <sl_wfx_task_entry>:

/**************************************************************************//**
 * Wfx process task entry
 *****************************************************************************/
static void sl_wfx_task_entry (void const * pvParameters) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af02      	add	r7, sp, #8
 8009bda:	6078      	str	r0, [r7, #4]
  uint16_t control_register = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	81fb      	strh	r3, [r7, #14]
  

  while(1) {

    /*Wait for an event*/
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009be0:	4b0d      	ldr	r3, [pc, #52]	; (8009c18 <sl_wfx_task_entry+0x44>)
 8009be2:	6818      	ldr	r0, [r3, #0]
 8009be4:	f04f 33ff 	mov.w	r3, #4294967295
 8009be8:	9300      	str	r3, [sp, #0]
 8009bea:	2300      	movs	r3, #0
 8009bec:	2201      	movs	r2, #1
 8009bee:	2103      	movs	r1, #3
 8009bf0:	f000 faae 	bl	800a150 <xEventGroupWaitBits>
 8009bf4:	60b8      	str	r0, [r7, #8]
                                          SL_WFX_TX_PACKET_AVAILABLE | SL_WFX_RX_PACKET_AVAILABLE,
                                          pdTRUE,
                                          pdFALSE,
                                          portMAX_DELAY);

    if (wifi_event_bits & SL_WFX_TX_PACKET_AVAILABLE) {
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <sl_wfx_task_entry+0x30>
      /* Process TX packets */
      sl_wfx_tx_process();
 8009c00:	f000 f834 	bl	8009c6c <sl_wfx_tx_process>
    }
    if (wifi_event_bits & SL_WFX_RX_PACKET_AVAILABLE) {
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0e8      	beq.n	8009be0 <sl_wfx_task_entry+0xc>
      /* Process RX packets */
      sl_wfx_rx_process(control_register);
 8009c0e:	89fb      	ldrh	r3, [r7, #14]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 f803 	bl	8009c1c <sl_wfx_rx_process>
    wifi_event_bits = xEventGroupWaitBits(sl_wfx_event_group,
 8009c16:	e7e3      	b.n	8009be0 <sl_wfx_task_entry+0xc>
 8009c18:	2000150c 	.word	0x2000150c

08009c1c <sl_wfx_rx_process>:
}

/**************************************************************************//**
 * Wfx process receive frame
 *****************************************************************************/
static sl_status_t sl_wfx_rx_process (uint16_t control_register) {
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	80fb      	strh	r3, [r7, #6]
  sl_status_t result;

  sl_wfx_host_disable_platform_interrupt();
 8009c26:	f7ff ff50 	bl	8009aca <sl_wfx_host_disable_platform_interrupt>

  /* Receive a frame */
  result = sl_wfx_receive_frame(&control_register);
 8009c2a:	1dbb      	adds	r3, r7, #6
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f7fe fa77 	bl	8008120 <sl_wfx_receive_frame>
 8009c32:	60f8      	str	r0, [r7, #12]
  
  if (result) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d002      	beq.n	8009c40 <sl_wfx_rx_process+0x24>
    sl_wfx_host_enable_platform_interrupt();
 8009c3a:	f7ff ff39 	bl	8009ab0 <sl_wfx_host_enable_platform_interrupt>
 8009c3e:	e00d      	b.n	8009c5c <sl_wfx_rx_process+0x40>
  } else {
    if ((control_register & SL_WFX_CONT_NEXT_LEN_MASK) != 0) {
 8009c40:	88fb      	ldrh	r3, [r7, #6]
 8009c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d006      	beq.n	8009c58 <sl_wfx_rx_process+0x3c>
      
      /* if a packet is still available in the WF200, set an RX event */
      xEventGroupSetBits(sl_wfx_event_group, SL_WFX_RX_PACKET_AVAILABLE);
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <sl_wfx_rx_process+0x4c>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2102      	movs	r1, #2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 fb4b 	bl	800a2ec <xEventGroupSetBits>
 8009c56:	e001      	b.n	8009c5c <sl_wfx_rx_process+0x40>
    } else {
      sl_wfx_host_enable_platform_interrupt();
 8009c58:	f7ff ff2a 	bl	8009ab0 <sl_wfx_host_enable_platform_interrupt>
    }
  }

  return result;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	2000150c 	.word	0x2000150c

08009c6c <sl_wfx_tx_process>:

/**************************************************************************//**
 * Wfx process tx queue
 *****************************************************************************/
static sl_status_t sl_wfx_tx_process (void) {
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
  sl_status_t result;
  sl_wfx_packet_queue_item_t *item_to_free;

  if (sl_wfx_tx_queue_context.head_ptr == NULL) {
 8009c72:	4b28      	ldr	r3, [pc, #160]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <sl_wfx_tx_process+0x12>
    return SL_STATUS_EMPTY;
 8009c7a:	231b      	movs	r3, #27
 8009c7c:	e045      	b.n	8009d0a <sl_wfx_tx_process+0x9e>
  }

  /* Take TX queue mutex */
  xSemaphoreTake(sl_wfx_tx_queue_mutex, portMAX_DELAY);
 8009c7e:	4b26      	ldr	r3, [pc, #152]	; (8009d18 <sl_wfx_tx_process+0xac>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f04f 31ff 	mov.w	r1, #4294967295
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 f894 	bl	800adb4 <xQueueSemaphoreTake>

  /* Send the packet */
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009c8c:	4b21      	ldr	r3, [pc, #132]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f103 000c 	add.w	r0, r3, #12
                                      sl_wfx_tx_queue_context.head_ptr->data_length,
 8009c94:	4b1f      	ldr	r3, [pc, #124]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009c98:	6899      	ldr	r1, [r3, #8]
                                      sl_wfx_tx_queue_context.head_ptr->interface,
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
  result = sl_wfx_send_ethernet_frame(&sl_wfx_tx_queue_context.head_ptr->buffer,
 8009c9e:	791a      	ldrb	r2, [r3, #4]
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f7fe f8f9 	bl	8007e98 <sl_wfx_send_ethernet_frame>
 8009ca6:	6078      	str	r0, [r7, #4]
                                      WFM_PRIORITY_BE0);

  if (result != SL_STATUS_OK) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00e      	beq.n	8009ccc <sl_wfx_tx_process+0x60>
    /* If the packet is not successfully sent, set the associated event and return */
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009cae:	4b1b      	ldr	r3, [pc, #108]	; (8009d1c <sl_wfx_tx_process+0xb0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2101      	movs	r1, #1
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fb19 	bl	800a2ec <xEventGroupSetBits>
    xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009cba:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <sl_wfx_tx_process+0xac>)
 8009cbc:	6818      	ldr	r0, [r3, #0]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	f000 fd70 	bl	800a7a8 <xQueueGenericSend>
    return SL_STATUS_FULL;
 8009cc8:	231c      	movs	r3, #28
 8009cca:	e01e      	b.n	8009d0a <sl_wfx_tx_process+0x9e>
  }
  
  /* The packet has been successfully sent, free it  */
  item_to_free = sl_wfx_tx_queue_context.head_ptr;
 8009ccc:	4b11      	ldr	r3, [pc, #68]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	603b      	str	r3, [r7, #0]
  
  /* Move the queue pointer to process the next packet */
  sl_wfx_tx_queue_context.head_ptr = sl_wfx_tx_queue_context.head_ptr->next;
 8009cd2:	4b10      	ldr	r3, [pc, #64]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a0e      	ldr	r2, [pc, #56]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009cda:	6013      	str	r3, [r2, #0]

  /* The packet has been sent, release the packet  */
  sl_wfx_free_command_buffer((sl_wfx_generic_message_t*) item_to_free,
 8009cdc:	2200      	movs	r2, #0
 8009cde:	214a      	movs	r1, #74	; 0x4a
 8009ce0:	6838      	ldr	r0, [r7, #0]
 8009ce2:	f7fe ff15 	bl	8008b10 <sl_wfx_free_command_buffer>
                             SL_WFX_SEND_FRAME_REQ_ID,
                             SL_WFX_TX_FRAME_BUFFER);

  /* If a packet is available, set the associated event */
  if (sl_wfx_tx_queue_context.head_ptr != NULL) {
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <sl_wfx_tx_process+0xa8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <sl_wfx_tx_process+0x8e>
    xEventGroupSetBits(sl_wfx_event_group, SL_WFX_TX_PACKET_AVAILABLE);
 8009cee:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <sl_wfx_tx_process+0xb0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2101      	movs	r1, #1
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 faf9 	bl	800a2ec <xEventGroupSetBits>
  }
  
  /* Release TX queue mutex */
  xSemaphoreGive(sl_wfx_tx_queue_mutex);
 8009cfa:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <sl_wfx_tx_process+0xac>)
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	2300      	movs	r3, #0
 8009d00:	2200      	movs	r2, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	f000 fd50 	bl	800a7a8 <xQueueGenericSend>

  return result;
 8009d08:	687b      	ldr	r3, [r7, #4]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3708      	adds	r7, #8
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20001514 	.word	0x20001514
 8009d18:	20001510 	.word	0x20001510
 8009d1c:	2000150c 	.word	0x2000150c

08009d20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d32:	2b84      	cmp	r3, #132	; 0x84
 8009d34:	d005      	beq.n	8009d42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009d36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	3303      	adds	r3, #3
 8009d40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009d42:	68fb      	ldr	r3, [r7, #12]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d56:	f3ef 8305 	mrs	r3, IPSR
 8009d5a:	607b      	str	r3, [r7, #4]
  return(result);
 8009d5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	bf14      	ite	ne
 8009d62:	2301      	movne	r3, #1
 8009d64:	2300      	moveq	r3, #0
 8009d66:	b2db      	uxtb	r3, r3
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009d78:	f001 fd6c 	bl	800b854 <vTaskStartScheduler>
  
  return osOK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009d86:	f7ff ffe3 	bl	8009d50 <inHandlerMode>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d003      	beq.n	8009d98 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009d90:	f001 fe68 	bl	800ba64 <xTaskGetTickCountFromISR>
 8009d94:	4603      	mov	r3, r0
 8009d96:	e002      	b.n	8009d9e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009d98:	f001 fe54 	bl	800ba44 <xTaskGetTickCount>
 8009d9c:	4603      	mov	r3, r0
  }
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009da2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da4:	b087      	sub	sp, #28
 8009da6:	af02      	add	r7, sp, #8
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685c      	ldr	r4, [r3, #4]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009db8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7ff ffad 	bl	8009d20 <makeFreeRtosPriority>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	f107 030c 	add.w	r3, r7, #12
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	9200      	str	r2, [sp, #0]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	4632      	mov	r2, r6
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f001 fb46 	bl	800b468 <xTaskCreate>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d001      	beq.n	8009de6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	e000      	b.n	8009de8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009de6:	68fb      	ldr	r3, [r7, #12]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009df0 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 fc67 	bl	800b6cc <vTaskDelete>
  return osOK;
 8009dfe:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	085b      	lsrs	r3, r3, #1
 8009e14:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <osDelay+0x18>
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	e000      	b.n	8009e22 <osDelay+0x1a>
 8009e20:	2301      	movs	r3, #1
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 fce2 	bl	800b7ec <vTaskDelay>
  
  return osOK;
 8009e28:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b082      	sub	sp, #8
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f000 fc9b 	bl	800a776 <xQueueCreateMutex>
 8009e40:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b084      	sub	sp, #16
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e56:	2300      	movs	r3, #0
 8009e58:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d101      	bne.n	8009e64 <osMutexWait+0x18>
    return osErrorParameter;
 8009e60:	2380      	movs	r3, #128	; 0x80
 8009e62:	e03b      	b.n	8009edc <osMutexWait+0x90>
  }
  
  ticks = 0;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6e:	d103      	bne.n	8009e78 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009e70:	f04f 33ff 	mov.w	r3, #4294967295
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	e00a      	b.n	8009e8e <osMutexWait+0x42>
  }
  else if (millisec != 0) {
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d007      	beq.n	8009e8e <osMutexWait+0x42>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <osMutexWait+0x42>
      ticks = 1;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009e8e:	f7ff ff5f 	bl	8009d50 <inHandlerMode>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d017      	beq.n	8009ec8 <osMutexWait+0x7c>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009e98:	f107 0308 	add.w	r3, r7, #8
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	2100      	movs	r1, #0
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f001 f893 	bl	800afcc <xQueueReceiveFromISR>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d001      	beq.n	8009eb0 <osMutexWait+0x64>
      return osErrorOS;
 8009eac:	23ff      	movs	r3, #255	; 0xff
 8009eae:	e015      	b.n	8009edc <osMutexWait+0x90>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d011      	beq.n	8009eda <osMutexWait+0x8e>
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ee4 <osMutexWait+0x98>)
 8009eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	f3bf 8f6f 	isb	sy
 8009ec6:	e008      	b.n	8009eda <osMutexWait+0x8e>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009ec8:	68f9      	ldr	r1, [r7, #12]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 ff72 	bl	800adb4 <xQueueSemaphoreTake>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d001      	beq.n	8009eda <osMutexWait+0x8e>
    return osErrorOS;
 8009ed6:	23ff      	movs	r3, #255	; 0xff
 8009ed8:	e000      	b.n	8009edc <osMutexWait+0x90>
  }
  
  return osOK;
 8009eda:	2300      	movs	r3, #0
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	e000ed04 	.word	0xe000ed04

08009ee8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009ef8:	f7ff ff2a 	bl	8009d50 <inHandlerMode>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d016      	beq.n	8009f30 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fde6 	bl	800aada <xQueueGiveFromISR>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d001      	beq.n	8009f18 <osMutexRelease+0x30>
      return osErrorOS;
 8009f14:	23ff      	movs	r3, #255	; 0xff
 8009f16:	e017      	b.n	8009f48 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d013      	beq.n	8009f46 <osMutexRelease+0x5e>
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <osMutexRelease+0x68>)
 8009f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f24:	601a      	str	r2, [r3, #0]
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	e00a      	b.n	8009f46 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009f30:	2300      	movs	r3, #0
 8009f32:	2200      	movs	r2, #0
 8009f34:	2100      	movs	r1, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fc36 	bl	800a7a8 <xQueueGenericSend>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d001      	beq.n	8009f46 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009f42:	23ff      	movs	r3, #255	; 0xff
 8009f44:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009f46:	68fb      	ldr	r3, [r7, #12]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009f5c:	f7ff fef8 	bl	8009d50 <inHandlerMode>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <osMutexDelete+0x16>
    return osErrorISR;
 8009f66:	2382      	movs	r3, #130	; 0x82
 8009f68:	e003      	b.n	8009f72 <osMutexDelete+0x1e>
  }

  vQueueDelete(mutex_id);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 f8ae 	bl	800b0cc <vQueueDelete>

  return osOK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6818      	ldr	r0, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f000 fb82 	bl	800a698 <xQueueGenericCreate>
 8009f94:	4603      	mov	r3, r0
#endif
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	085b      	lsrs	r3, r3, #1
 8009fb4:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <osMessagePut+0x20>
    ticks = 1;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009fc0:	f7ff fec6 	bl	8009d50 <inHandlerMode>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d018      	beq.n	8009ffc <osMessagePut+0x5c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009fca:	f107 0210 	add.w	r2, r7, #16
 8009fce:	f107 0108 	add.w	r1, r7, #8
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f000 fce5 	bl	800a9a4 <xQueueGenericSendFromISR>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d001      	beq.n	8009fe4 <osMessagePut+0x44>
      return osErrorOS;
 8009fe0:	23ff      	movs	r3, #255	; 0xff
 8009fe2:	e018      	b.n	800a016 <osMessagePut+0x76>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d014      	beq.n	800a014 <osMessagePut+0x74>
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <osMessagePut+0x80>)
 8009fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	e00b      	b.n	800a014 <osMessagePut+0x74>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	2300      	movs	r3, #0
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	68f8      	ldr	r0, [r7, #12]
 800a006:	f000 fbcf 	bl	800a7a8 <xQueueGenericSend>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d001      	beq.n	800a014 <osMessagePut+0x74>
      return osErrorOS;
 800a010:	23ff      	movs	r3, #255	; 0xff
 800a012:	e000      	b.n	800a016 <osMessagePut+0x76>
    }
  }
  
  return osOK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a024:	b590      	push	{r4, r7, lr}
 800a026:	b08b      	sub	sp, #44	; 0x2c
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a034:	2300      	movs	r3, #0
 800a036:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a03e:	2380      	movs	r3, #128	; 0x80
 800a040:	617b      	str	r3, [r7, #20]
    return event;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	461c      	mov	r4, r3
 800a046:	f107 0314 	add.w	r3, r7, #20
 800a04a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a04e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a052:	e055      	b.n	800a100 <osMessageGet+0xdc>
  }
  
  taskWoken = pdFALSE;
 800a054:	2300      	movs	r3, #0
 800a056:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a058:	2300      	movs	r3, #0
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a062:	d103      	bne.n	800a06c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
 800a06a:	e00a      	b.n	800a082 <osMessageGet+0x5e>
  }
  else if (millisec != 0) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d007      	beq.n	800a082 <osMessageGet+0x5e>
    ticks = millisec / portTICK_PERIOD_MS;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	085b      	lsrs	r3, r3, #1
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d101      	bne.n	800a082 <osMessageGet+0x5e>
      ticks = 1;
 800a07e:	2301      	movs	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a082:	f7ff fe65 	bl	8009d50 <inHandlerMode>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d01c      	beq.n	800a0c6 <osMessageGet+0xa2>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a08c:	f107 0220 	add.w	r2, r7, #32
 800a090:	f107 0314 	add.w	r3, r7, #20
 800a094:	3304      	adds	r3, #4
 800a096:	4619      	mov	r1, r3
 800a098:	68b8      	ldr	r0, [r7, #8]
 800a09a:	f000 ff97 	bl	800afcc <xQueueReceiveFromISR>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d102      	bne.n	800a0aa <osMessageGet+0x86>
      /* We have mail */
      event.status = osEventMessage;
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	617b      	str	r3, [r7, #20]
 800a0a8:	e001      	b.n	800a0ae <osMessageGet+0x8a>
    }
    else {
      event.status = osOK;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01d      	beq.n	800a0f0 <osMessageGet+0xcc>
 800a0b4:	4b14      	ldr	r3, [pc, #80]	; (800a108 <osMessageGet+0xe4>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e014      	b.n	800a0f0 <osMessageGet+0xcc>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a0c6:	f107 0314 	add.w	r3, r7, #20
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	68b8      	ldr	r0, [r7, #8]
 800a0d2:	f000 fd8f 	bl	800abf4 <xQueueReceive>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d102      	bne.n	800a0e2 <osMessageGet+0xbe>
      /* We have mail */
      event.status = osEventMessage;
 800a0dc:	2310      	movs	r3, #16
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e006      	b.n	800a0f0 <osMessageGet+0xcc>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d101      	bne.n	800a0ec <osMessageGet+0xc8>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e000      	b.n	800a0ee <osMessageGet+0xca>
 800a0ec:	2340      	movs	r3, #64	; 0x40
 800a0ee:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	461c      	mov	r4, r3
 800a0f4:	f107 0314 	add.w	r3, r7, #20
 800a0f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	372c      	adds	r7, #44	; 0x2c
 800a104:	46bd      	mov	sp, r7
 800a106:	bd90      	pop	{r4, r7, pc}
 800a108:	e000ed04 	.word	0xe000ed04

0800a10c <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800a110:	f002 f858 	bl	800c1c4 <xTaskGetSchedulerState>
 800a114:	4603      	mov	r3, r0
 800a116:	2b01      	cmp	r3, #1
 800a118:	d001      	beq.n	800a11e <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800a11a:	f002 ff9d 	bl	800d058 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800a11e:	bf00      	nop
 800a120:	bd80      	pop	{r7, pc}

0800a122 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800a122:	b580      	push	{r7, lr}
 800a124:	b082      	sub	sp, #8
 800a126:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800a128:	2018      	movs	r0, #24
 800a12a:	f003 f825 	bl	800d178 <pvPortMalloc>
 800a12e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d007      	beq.n	800a146 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	4618      	mov	r0, r3
 800a142:	f000 f98d 	bl	800a460 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800a146:	687b      	ldr	r3, [r7, #4]
	}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b090      	sub	sp, #64	; 0x40
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800a166:	2300      	movs	r3, #0
 800a168:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00a      	beq.n	800a1a6 <xEventGroupWaitBits+0x56>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	61fb      	str	r3, [r7, #28]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xEventGroupWaitBits+0x72>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	61bb      	str	r3, [r7, #24]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1c2:	f001 ffff 	bl	800c1c4 <xTaskGetSchedulerState>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <xEventGroupWaitBits+0x82>
 800a1cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <xEventGroupWaitBits+0x86>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <xEventGroupWaitBits+0x88>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	617b      	str	r3, [r7, #20]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800a1f2:	f001 fb7d 	bl	800b8f0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800a1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	68b9      	ldr	r1, [r7, #8]
 800a200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a202:	f000 f90b 	bl	800a41c <prvTestWaitCondition>
 800a206:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800a212:	2300      	movs	r3, #0
 800a214:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d028      	beq.n	800a26e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	43db      	mvns	r3, r3
 800a224:	401a      	ands	r2, r3
 800a226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	e020      	b.n	800a26e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800a22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800a232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a234:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	633b      	str	r3, [r7, #48]	; 0x30
 800a23a:	e018      	b.n	800a26e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a244:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a248:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d003      	beq.n	800a258 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a256:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	1d18      	adds	r0, r3, #4
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a260:	4313      	orrs	r3, r2
 800a262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a264:	4619      	mov	r1, r3
 800a266:	f001 fd47 	bl	800bcf8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800a26e:	f001 fb4d 	bl	800b90c <xTaskResumeAll>
 800a272:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800a274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a276:	2b00      	cmp	r3, #0
 800a278:	d031      	beq.n	800a2de <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800a27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d107      	bne.n	800a290 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800a280:	4b19      	ldr	r3, [pc, #100]	; (800a2e8 <xEventGroupWaitBits+0x198>)
 800a282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a286:	601a      	str	r2, [r3, #0]
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800a290:	f002 f940 	bl	800c514 <uxTaskResetEventItemValue>
 800a294:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d11a      	bne.n	800a2d6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800a2a0:	f002 fe48 	bl	800cf34 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800a2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a2b0:	f000 f8b4 	bl	800a41c <prvTestWaitCondition>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d006      	beq.n	800a2ce <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800a2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	43db      	mvns	r3, r3
 800a2c8:	401a      	ands	r2, r3
 800a2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2cc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800a2d2:	f002 fe5f 	bl	800cf94 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a2de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3740      	adds	r7, #64	; 0x40
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08e      	sub	sp, #56	; 0x38
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800a2fe:	2300      	movs	r3, #0
 800a300:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xEventGroupSetBits+0x32>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	613b      	str	r3, [r7, #16]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00a      	beq.n	800a33e <xEventGroupSetBits+0x52>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	60fb      	str	r3, [r7, #12]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	3304      	adds	r3, #4
 800a342:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	3308      	adds	r3, #8
 800a348:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a34a:	f001 fad1 	bl	800b8f0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a360:	e03c      	b.n	800a3dc <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a36e:	2300      	movs	r3, #0
 800a370:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a378:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a380:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d108      	bne.n	800a39e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	4013      	ands	r3, r2
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800a398:	2301      	movs	r3, #1
 800a39a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a39c:	e008      	b.n	800a3b0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d101      	bne.n	800a3b0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d010      	beq.n	800a3d8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d003      	beq.n	800a3c8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a3c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a3d4:	f001 fd5a 	bl	800be8c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800a3dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d1be      	bne.n	800a362 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ea:	43db      	mvns	r3, r3
 800a3ec:	401a      	ands	r2, r3
 800a3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f0:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a3f2:	f001 fa8b 	bl	800b90c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f8:	681b      	ldr	r3, [r3, #0]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3738      	adds	r7, #56	; 0x38
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff ff6c 	bl	800a2ec <xEventGroupSetBits>
}
 800a414:	bf00      	nop
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d107      	bne.n	800a442 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4013      	ands	r3, r2
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d00a      	beq.n	800a452 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a43c:	2301      	movs	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e007      	b.n	800a452 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	4013      	ands	r3, r2
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d101      	bne.n	800a452 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a44e:	2301      	movs	r3, #1
 800a450:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a452:	697b      	ldr	r3, [r7, #20]
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a460:	b480      	push	{r7}
 800a462:	b083      	sub	sp, #12
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f103 0208 	add.w	r2, r3, #8
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f04f 32ff 	mov.w	r2, #4294967295
 800a478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f103 0208 	add.w	r2, r3, #8
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f103 0208 	add.w	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ae:	bf00      	nop
 800a4b0:	370c      	adds	r7, #12
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ba:	b480      	push	{r7}
 800a4bc:	b085      	sub	sp, #20
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a502:	b480      	push	{r7}
 800a504:	b085      	sub	sp, #20
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a518:	d103      	bne.n	800a522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	60fb      	str	r3, [r7, #12]
 800a520:	e00c      	b.n	800a53c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3308      	adds	r3, #8
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	e002      	b.n	800a530 <vListInsert+0x2e>
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d2f6      	bcs.n	800a52a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	685a      	ldr	r2, [r3, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	683a      	ldr	r2, [r7, #0]
 800a556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	1c5a      	adds	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	601a      	str	r2, [r3, #0]
}
 800a568:	bf00      	nop
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	6892      	ldr	r2, [r2, #8]
 800a58a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6852      	ldr	r2, [r2, #4]
 800a594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d103      	bne.n	800a5a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	1e5a      	subs	r2, r3, #1
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xQueueGenericReset+0x2a>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	60bb      	str	r3, [r7, #8]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a5f2:	f002 fc9f 	bl	800cf34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a602:	fb01 f303 	mul.w	r3, r1, r3
 800a606:	441a      	add	r2, r3
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a622:	3b01      	subs	r3, #1
 800a624:	68f9      	ldr	r1, [r7, #12]
 800a626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a628:	fb01 f303 	mul.w	r3, r1, r3
 800a62c:	441a      	add	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	22ff      	movs	r2, #255	; 0xff
 800a636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	22ff      	movs	r2, #255	; 0xff
 800a63e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d114      	bne.n	800a672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01a      	beq.n	800a686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3310      	adds	r3, #16
 800a654:	4618      	mov	r0, r3
 800a656:	f001 fbb7 	bl	800bdc8 <xTaskRemoveFromEventList>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d012      	beq.n	800a686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a660:	4b0c      	ldr	r3, [pc, #48]	; (800a694 <xQueueGenericReset+0xcc>)
 800a662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a666:	601a      	str	r2, [r3, #0]
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	e009      	b.n	800a686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3310      	adds	r3, #16
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fef2 	bl	800a460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3324      	adds	r3, #36	; 0x24
 800a680:	4618      	mov	r0, r3
 800a682:	f7ff feed 	bl	800a460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a686:	f002 fc85 	bl	800cf94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a68a:	2301      	movs	r3, #1
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}
 800a694:	e000ed04 	.word	0xe000ed04

0800a698 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08a      	sub	sp, #40	; 0x28
 800a69c:	af02      	add	r7, sp, #8
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10a      	bne.n	800a6c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	613b      	str	r3, [r7, #16]
}
 800a6be:	bf00      	nop
 800a6c0:	e7fe      	b.n	800a6c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	3348      	adds	r3, #72	; 0x48
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f002 fd51 	bl	800d178 <pvPortMalloc>
 800a6d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00d      	beq.n	800a6fa <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	3348      	adds	r3, #72	; 0x48
 800a6e6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a6e8:	79fa      	ldrb	r2, [r7, #7]
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	697a      	ldr	r2, [r7, #20]
 800a6f2:	68b9      	ldr	r1, [r7, #8]
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 f805 	bl	800a704 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a6fa:	69bb      	ldr	r3, [r7, #24]
	}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3720      	adds	r7, #32
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d103      	bne.n	800a720 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	69ba      	ldr	r2, [r7, #24]
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	e002      	b.n	800a726 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a732:	2101      	movs	r1, #1
 800a734:	69b8      	ldr	r0, [r7, #24]
 800a736:	f7ff ff47 	bl	800a5c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a742:	b580      	push	{r7, lr}
 800a744:	b082      	sub	sp, #8
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00e      	beq.n	800a76e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2200      	movs	r2, #0
 800a760:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a762:	2300      	movs	r3, #0
 800a764:	2200      	movs	r2, #0
 800a766:	2100      	movs	r1, #0
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f81d 	bl	800a7a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a76e:	bf00      	nop
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	4603      	mov	r3, r0
 800a77e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a780:	2301      	movs	r3, #1
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a788:	79fb      	ldrb	r3, [r7, #7]
 800a78a:	461a      	mov	r2, r3
 800a78c:	6939      	ldr	r1, [r7, #16]
 800a78e:	6978      	ldr	r0, [r7, #20]
 800a790:	f7ff ff82 	bl	800a698 <xQueueGenericCreate>
 800a794:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff ffd3 	bl	800a742 <prvInitialiseMutex>

		return xNewQueue;
 800a79c:	68fb      	ldr	r3, [r7, #12]
	}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08e      	sub	sp, #56	; 0x38
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <xQueueGenericSend+0x32>
	__asm volatile
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d103      	bne.n	800a7e8 <xQueueGenericSend+0x40>
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <xQueueGenericSend+0x44>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e000      	b.n	800a7ee <xQueueGenericSend+0x46>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10a      	bne.n	800a808 <xQueueGenericSend+0x60>
	__asm volatile
 800a7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f6:	f383 8811 	msr	BASEPRI, r3
 800a7fa:	f3bf 8f6f 	isb	sy
 800a7fe:	f3bf 8f4f 	dsb	sy
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a804:	bf00      	nop
 800a806:	e7fe      	b.n	800a806 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d103      	bne.n	800a816 <xQueueGenericSend+0x6e>
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a812:	2b01      	cmp	r3, #1
 800a814:	d101      	bne.n	800a81a <xQueueGenericSend+0x72>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <xQueueGenericSend+0x74>
 800a81a:	2300      	movs	r3, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <xQueueGenericSend+0x8e>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	623b      	str	r3, [r7, #32]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a836:	f001 fcc5 	bl	800c1c4 <xTaskGetSchedulerState>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <xQueueGenericSend+0x9e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d101      	bne.n	800a84a <xQueueGenericSend+0xa2>
 800a846:	2301      	movs	r3, #1
 800a848:	e000      	b.n	800a84c <xQueueGenericSend+0xa4>
 800a84a:	2300      	movs	r3, #0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10a      	bne.n	800a866 <xQueueGenericSend+0xbe>
	__asm volatile
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	61fb      	str	r3, [r7, #28]
}
 800a862:	bf00      	nop
 800a864:	e7fe      	b.n	800a864 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a866:	f002 fb65 	bl	800cf34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a872:	429a      	cmp	r2, r3
 800a874:	d302      	bcc.n	800a87c <xQueueGenericSend+0xd4>
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d129      	bne.n	800a8d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a882:	f000 fc59 	bl	800b138 <prvCopyDataToQueue>
 800a886:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d010      	beq.n	800a8b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	4618      	mov	r0, r3
 800a896:	f001 fa97 	bl	800bdc8 <xTaskRemoveFromEventList>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d013      	beq.n	800a8c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8a0:	4b3f      	ldr	r3, [pc, #252]	; (800a9a0 <xQueueGenericSend+0x1f8>)
 800a8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a6:	601a      	str	r2, [r3, #0]
 800a8a8:	f3bf 8f4f 	dsb	sy
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	e00a      	b.n	800a8c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d007      	beq.n	800a8c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a8b8:	4b39      	ldr	r3, [pc, #228]	; (800a9a0 <xQueueGenericSend+0x1f8>)
 800a8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8be:	601a      	str	r2, [r3, #0]
 800a8c0:	f3bf 8f4f 	dsb	sy
 800a8c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a8c8:	f002 fb64 	bl	800cf94 <vPortExitCritical>
				return pdPASS;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e063      	b.n	800a998 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d103      	bne.n	800a8de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a8d6:	f002 fb5d 	bl	800cf94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e05c      	b.n	800a998 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d106      	bne.n	800a8f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8e4:	f107 0314 	add.w	r3, r7, #20
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 fb31 	bl	800bf50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8f2:	f002 fb4f 	bl	800cf94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8f6:	f000 fffb 	bl	800b8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8fa:	f002 fb1b 	bl	800cf34 <vPortEnterCritical>
 800a8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a904:	b25b      	sxtb	r3, r3
 800a906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90a:	d103      	bne.n	800a914 <xQueueGenericSend+0x16c>
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a91a:	b25b      	sxtb	r3, r3
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d103      	bne.n	800a92a <xQueueGenericSend+0x182>
 800a922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a92a:	f002 fb33 	bl	800cf94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a92e:	1d3a      	adds	r2, r7, #4
 800a930:	f107 0314 	add.w	r3, r7, #20
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f001 fb20 	bl	800bf7c <xTaskCheckForTimeOut>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d124      	bne.n	800a98c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a944:	f000 fcf0 	bl	800b328 <prvIsQueueFull>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d018      	beq.n	800a980 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	3310      	adds	r3, #16
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	4611      	mov	r1, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f001 f9aa 	bl	800bcb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a95e:	f000 fc7b 	bl	800b258 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a962:	f000 ffd3 	bl	800b90c <xTaskResumeAll>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f47f af7c 	bne.w	800a866 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a96e:	4b0c      	ldr	r3, [pc, #48]	; (800a9a0 <xQueueGenericSend+0x1f8>)
 800a970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	e772      	b.n	800a866 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a982:	f000 fc69 	bl	800b258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a986:	f000 ffc1 	bl	800b90c <xTaskResumeAll>
 800a98a:	e76c      	b.n	800a866 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a98c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a98e:	f000 fc63 	bl	800b258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a992:	f000 ffbb 	bl	800b90c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a996:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3738      	adds	r7, #56	; 0x38
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b090      	sub	sp, #64	; 0x40
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d103      	bne.n	800a9e0 <xQueueGenericSendFromISR+0x3c>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d101      	bne.n	800a9e4 <xQueueGenericSendFromISR+0x40>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e000      	b.n	800a9e6 <xQueueGenericSendFromISR+0x42>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10a      	bne.n	800aa00 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	2b02      	cmp	r3, #2
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSendFromISR+0x6a>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d101      	bne.n	800aa12 <xQueueGenericSendFromISR+0x6e>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <xQueueGenericSendFromISR+0x70>
 800aa12:	2300      	movs	r3, #0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10a      	bne.n	800aa2e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aa18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1c:	f383 8811 	msr	BASEPRI, r3
 800aa20:	f3bf 8f6f 	isb	sy
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	623b      	str	r3, [r7, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	e7fe      	b.n	800aa2c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa2e:	f002 fb63 	bl	800d0f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa32:	f3ef 8211 	mrs	r2, BASEPRI
 800aa36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	61fa      	str	r2, [r7, #28]
 800aa48:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aa4a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa4c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d302      	bcc.n	800aa60 <xQueueGenericSendFromISR+0xbc>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d12f      	bne.n	800aac0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa76:	f000 fb5f 	bl	800b138 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aa7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa82:	d112      	bne.n	800aaaa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d016      	beq.n	800aaba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 f999 	bl	800bdc8 <xTaskRemoveFromEventList>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00e      	beq.n	800aaba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00b      	beq.n	800aaba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	601a      	str	r2, [r3, #0]
 800aaa8:	e007      	b.n	800aaba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aaaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aaae:	3301      	adds	r3, #1
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	b25a      	sxtb	r2, r3
 800aab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aaba:	2301      	movs	r3, #1
 800aabc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800aabe:	e001      	b.n	800aac4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aace:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3740      	adds	r7, #64	; 0x40
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b08e      	sub	sp, #56	; 0x38
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10a      	bne.n	800ab04 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	623b      	str	r3, [r7, #32]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ab0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	61fb      	str	r3, [r7, #28]
}
 800ab1e:	bf00      	nop
 800ab20:	e7fe      	b.n	800ab20 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d103      	bne.n	800ab32 <xQueueGiveFromISR+0x58>
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d101      	bne.n	800ab36 <xQueueGiveFromISR+0x5c>
 800ab32:	2301      	movs	r3, #1
 800ab34:	e000      	b.n	800ab38 <xQueueGiveFromISR+0x5e>
 800ab36:	2300      	movs	r3, #0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	61bb      	str	r3, [r7, #24]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab52:	f002 fad1 	bl	800d0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab56:	f3ef 8211 	mrs	r2, BASEPRI
 800ab5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab5e:	f383 8811 	msr	BASEPRI, r3
 800ab62:	f3bf 8f6f 	isb	sy
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	617a      	str	r2, [r7, #20]
 800ab6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ab6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d22b      	bcs.n	800abda <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9c:	d112      	bne.n	800abc4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d016      	beq.n	800abd4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba8:	3324      	adds	r3, #36	; 0x24
 800abaa:	4618      	mov	r0, r3
 800abac:	f001 f90c 	bl	800bdc8 <xTaskRemoveFromEventList>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d00e      	beq.n	800abd4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00b      	beq.n	800abd4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2201      	movs	r2, #1
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	e007      	b.n	800abd4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800abc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800abc8:	3301      	adds	r3, #1
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	b25a      	sxtb	r2, r3
 800abce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800abd4:	2301      	movs	r3, #1
 800abd6:	637b      	str	r3, [r7, #52]	; 0x34
 800abd8:	e001      	b.n	800abde <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
 800abde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f383 8811 	msr	BASEPRI, r3
}
 800abe8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800abec:	4618      	mov	r0, r3
 800abee:	3738      	adds	r7, #56	; 0x38
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08c      	sub	sp, #48	; 0x30
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ac08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10a      	bne.n	800ac24 <xQueueReceive+0x30>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	623b      	str	r3, [r7, #32]
}
 800ac20:	bf00      	nop
 800ac22:	e7fe      	b.n	800ac22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d103      	bne.n	800ac32 <xQueueReceive+0x3e>
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <xQueueReceive+0x42>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueReceive+0x44>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <xQueueReceive+0x5e>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	61fb      	str	r3, [r7, #28]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac52:	f001 fab7 	bl	800c1c4 <xTaskGetSchedulerState>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <xQueueReceive+0x6e>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <xQueueReceive+0x72>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <xQueueReceive+0x74>
 800ac66:	2300      	movs	r3, #0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xQueueReceive+0x8e>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	61bb      	str	r3, [r7, #24]
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac82:	f002 f957 	bl	800cf34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d01f      	beq.n	800acd2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac92:	68b9      	ldr	r1, [r7, #8]
 800ac94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac96:	f000 fab9 	bl	800b20c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9c:	1e5a      	subs	r2, r3, #1
 800ac9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00f      	beq.n	800acca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acac:	3310      	adds	r3, #16
 800acae:	4618      	mov	r0, r3
 800acb0:	f001 f88a 	bl	800bdc8 <xTaskRemoveFromEventList>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d007      	beq.n	800acca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800acba:	4b3d      	ldr	r3, [pc, #244]	; (800adb0 <xQueueReceive+0x1bc>)
 800acbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	f3bf 8f4f 	dsb	sy
 800acc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800acca:	f002 f963 	bl	800cf94 <vPortExitCritical>
				return pdPASS;
 800acce:	2301      	movs	r3, #1
 800acd0:	e069      	b.n	800ada6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acd8:	f002 f95c 	bl	800cf94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acdc:	2300      	movs	r3, #0
 800acde:	e062      	b.n	800ada6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ace0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d106      	bne.n	800acf4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ace6:	f107 0310 	add.w	r3, r7, #16
 800acea:	4618      	mov	r0, r3
 800acec:	f001 f930 	bl	800bf50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acf0:	2301      	movs	r3, #1
 800acf2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acf4:	f002 f94e 	bl	800cf94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acf8:	f000 fdfa 	bl	800b8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acfc:	f002 f91a 	bl	800cf34 <vPortEnterCritical>
 800ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad06:	b25b      	sxtb	r3, r3
 800ad08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0c:	d103      	bne.n	800ad16 <xQueueReceive+0x122>
 800ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad1c:	b25b      	sxtb	r3, r3
 800ad1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad22:	d103      	bne.n	800ad2c <xQueueReceive+0x138>
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad2c:	f002 f932 	bl	800cf94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad30:	1d3a      	adds	r2, r7, #4
 800ad32:	f107 0310 	add.w	r3, r7, #16
 800ad36:	4611      	mov	r1, r2
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 f91f 	bl	800bf7c <xTaskCheckForTimeOut>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d123      	bne.n	800ad8c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad46:	f000 fad9 	bl	800b2fc <prvIsQueueEmpty>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d017      	beq.n	800ad80 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad52:	3324      	adds	r3, #36	; 0x24
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	4611      	mov	r1, r2
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f000 ffa9 	bl	800bcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad60:	f000 fa7a 	bl	800b258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad64:	f000 fdd2 	bl	800b90c <xTaskResumeAll>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d189      	bne.n	800ac82 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ad6e:	4b10      	ldr	r3, [pc, #64]	; (800adb0 <xQueueReceive+0x1bc>)
 800ad70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	e780      	b.n	800ac82 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad82:	f000 fa69 	bl	800b258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad86:	f000 fdc1 	bl	800b90c <xTaskResumeAll>
 800ad8a:	e77a      	b.n	800ac82 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad8e:	f000 fa63 	bl	800b258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad92:	f000 fdbb 	bl	800b90c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad98:	f000 fab0 	bl	800b2fc <prvIsQueueEmpty>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f43f af6f 	beq.w	800ac82 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ada4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3730      	adds	r7, #48	; 0x30
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	e000ed04 	.word	0xe000ed04

0800adb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	; 0x38
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800adc6:	2300      	movs	r3, #0
 800adc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800adca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800add0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add4:	f383 8811 	msr	BASEPRI, r3
 800add8:	f3bf 8f6f 	isb	sy
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	623b      	str	r3, [r7, #32]
}
 800ade2:	bf00      	nop
 800ade4:	e7fe      	b.n	800ade4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61fb      	str	r3, [r7, #28]
}
 800ae00:	bf00      	nop
 800ae02:	e7fe      	b.n	800ae02 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae04:	f001 f9de 	bl	800c1c4 <xTaskGetSchedulerState>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <xQueueSemaphoreTake+0x60>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <xQueueSemaphoreTake+0x64>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e000      	b.n	800ae1a <xQueueSemaphoreTake+0x66>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	61bb      	str	r3, [r7, #24]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae34:	f002 f87e 	bl	800cf34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae3c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ae3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d024      	beq.n	800ae8e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	1e5a      	subs	r2, r3, #1
 800ae48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d104      	bne.n	800ae5e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ae54:	f001 fb76 	bl	800c544 <pvTaskIncrementMutexHeldCount>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae5c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	691b      	ldr	r3, [r3, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00f      	beq.n	800ae86 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	3310      	adds	r3, #16
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 ffac 	bl	800bdc8 <xTaskRemoveFromEventList>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae76:	4b54      	ldr	r3, [pc, #336]	; (800afc8 <xQueueSemaphoreTake+0x214>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae86:	f002 f885 	bl	800cf94 <vPortExitCritical>
				return pdPASS;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e097      	b.n	800afbe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d111      	bne.n	800aeb8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00a      	beq.n	800aeb0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	617b      	str	r3, [r7, #20]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800aeb0:	f002 f870 	bl	800cf94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e082      	b.n	800afbe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d106      	bne.n	800aecc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aebe:	f107 030c 	add.w	r3, r7, #12
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 f844 	bl	800bf50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aec8:	2301      	movs	r3, #1
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aecc:	f002 f862 	bl	800cf94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aed0:	f000 fd0e 	bl	800b8f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aed4:	f002 f82e 	bl	800cf34 <vPortEnterCritical>
 800aed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aede:	b25b      	sxtb	r3, r3
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d103      	bne.n	800aeee <xQueueSemaphoreTake+0x13a>
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef4:	b25b      	sxtb	r3, r3
 800aef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefa:	d103      	bne.n	800af04 <xQueueSemaphoreTake+0x150>
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af04:	f002 f846 	bl	800cf94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af08:	463a      	mov	r2, r7
 800af0a:	f107 030c 	add.w	r3, r7, #12
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f833 	bl	800bf7c <xTaskCheckForTimeOut>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d132      	bne.n	800af82 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af1e:	f000 f9ed 	bl	800b2fc <prvIsQueueEmpty>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d026      	beq.n	800af76 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d109      	bne.n	800af44 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800af30:	f002 f800 	bl	800cf34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	4618      	mov	r0, r3
 800af3a:	f001 f961 	bl	800c200 <xTaskPriorityInherit>
 800af3e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800af40:	f002 f828 	bl	800cf94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800af44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af46:	3324      	adds	r3, #36	; 0x24
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f000 feaf 	bl	800bcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800af52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af54:	f000 f980 	bl	800b258 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800af58:	f000 fcd8 	bl	800b90c <xTaskResumeAll>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	f47f af68 	bne.w	800ae34 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800af64:	4b18      	ldr	r3, [pc, #96]	; (800afc8 <xQueueSemaphoreTake+0x214>)
 800af66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	e75e      	b.n	800ae34 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af78:	f000 f96e 	bl	800b258 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af7c:	f000 fcc6 	bl	800b90c <xTaskResumeAll>
 800af80:	e758      	b.n	800ae34 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af84:	f000 f968 	bl	800b258 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af88:	f000 fcc0 	bl	800b90c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af8e:	f000 f9b5 	bl	800b2fc <prvIsQueueEmpty>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	f43f af4d 	beq.w	800ae34 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00d      	beq.n	800afbc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800afa0:	f001 ffc8 	bl	800cf34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800afa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800afa6:	f000 f8af 	bl	800b108 <prvGetDisinheritPriorityAfterTimeout>
 800afaa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800afac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 fa20 	bl	800c3f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800afb8:	f001 ffec 	bl	800cf94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800afbc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3738      	adds	r7, #56	; 0x38
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	e000ed04 	.word	0xe000ed04

0800afcc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08e      	sub	sp, #56	; 0x38
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	623b      	str	r3, [r7, #32]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d103      	bne.n	800b006 <xQueueReceiveFromISR+0x3a>
 800affe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <xQueueReceiveFromISR+0x3e>
 800b006:	2301      	movs	r3, #1
 800b008:	e000      	b.n	800b00c <xQueueReceiveFromISR+0x40>
 800b00a:	2300      	movs	r3, #0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	61fb      	str	r3, [r7, #28]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b026:	f002 f867 	bl	800d0f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b02a:	f3ef 8211 	mrs	r2, BASEPRI
 800b02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b032:	f383 8811 	msr	BASEPRI, r3
 800b036:	f3bf 8f6f 	isb	sy
 800b03a:	f3bf 8f4f 	dsb	sy
 800b03e:	61ba      	str	r2, [r7, #24]
 800b040:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b042:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b044:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d02f      	beq.n	800b0b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b05c:	68b9      	ldr	r1, [r7, #8]
 800b05e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b060:	f000 f8d4 	bl	800b20c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b066:	1e5a      	subs	r2, r3, #1
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b06c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b074:	d112      	bne.n	800b09c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d016      	beq.n	800b0ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	3310      	adds	r3, #16
 800b082:	4618      	mov	r0, r3
 800b084:	f000 fea0 	bl	800bdc8 <xTaskRemoveFromEventList>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00e      	beq.n	800b0ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	e007      	b.n	800b0ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	b25a      	sxtb	r2, r3
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b0:	e001      	b.n	800b0b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	637b      	str	r3, [r7, #52]	; 0x34
 800b0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f383 8811 	msr	BASEPRI, r3
}
 800b0c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3738      	adds	r7, #56	; 0x38
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}

0800b0cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <vQueueDelete+0x28>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60bb      	str	r3, [r7, #8]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b0f4:	68f8      	ldr	r0, [r7, #12]
 800b0f6:	f000 f959 	bl	800b3ac <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f002 f908 	bl	800d310 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b100:	bf00      	nop
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	2b00      	cmp	r3, #0
 800b116:	d006      	beq.n	800b126 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f1c3 0307 	rsb	r3, r3, #7
 800b122:	60fb      	str	r3, [r7, #12]
 800b124:	e001      	b.n	800b12a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b126:	2300      	movs	r3, #0
 800b128:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b12a:	68fb      	ldr	r3, [r7, #12]
	}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b144:	2300      	movs	r3, #0
 800b146:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d14d      	bne.n	800b1fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	4618      	mov	r0, r3
 800b164:	f001 f8c2 	bl	800c2ec <xTaskPriorityDisinherit>
 800b168:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	609a      	str	r2, [r3, #8]
 800b170:	e043      	b.n	800b1fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d119      	bne.n	800b1ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6858      	ldr	r0, [r3, #4]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	461a      	mov	r2, r3
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	f010 f9a5 	bl	801b4d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b190:	441a      	add	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	685a      	ldr	r2, [r3, #4]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	689b      	ldr	r3, [r3, #8]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d32b      	bcc.n	800b1fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	605a      	str	r2, [r3, #4]
 800b1aa:	e026      	b.n	800b1fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	68d8      	ldr	r0, [r3, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	f010 f98b 	bl	801b4d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	441a      	add	r2, r3
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	68da      	ldr	r2, [r3, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	d207      	bcs.n	800b1e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e0:	425b      	negs	r3, r3
 800b1e2:	441a      	add	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d105      	bne.n	800b1fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b202:	697b      	ldr	r3, [r7, #20]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d018      	beq.n	800b250 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	68da      	ldr	r2, [r3, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	441a      	add	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	68da      	ldr	r2, [r3, #12]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	429a      	cmp	r2, r3
 800b236:	d303      	bcc.n	800b240 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	68d9      	ldr	r1, [r3, #12]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b248:	461a      	mov	r2, r3
 800b24a:	6838      	ldr	r0, [r7, #0]
 800b24c:	f010 f941 	bl	801b4d2 <memcpy>
	}
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b084      	sub	sp, #16
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b260:	f001 fe68 	bl	800cf34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b26a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b26c:	e011      	b.n	800b292 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b272:	2b00      	cmp	r3, #0
 800b274:	d012      	beq.n	800b29c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3324      	adds	r3, #36	; 0x24
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fda4 	bl	800bdc8 <xTaskRemoveFromEventList>
 800b280:	4603      	mov	r3, r0
 800b282:	2b00      	cmp	r3, #0
 800b284:	d001      	beq.n	800b28a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b286:	f000 fedb 	bl	800c040 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b296:	2b00      	cmp	r3, #0
 800b298:	dce9      	bgt.n	800b26e <prvUnlockQueue+0x16>
 800b29a:	e000      	b.n	800b29e <prvUnlockQueue+0x46>
					break;
 800b29c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	22ff      	movs	r2, #255	; 0xff
 800b2a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2a6:	f001 fe75 	bl	800cf94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2aa:	f001 fe43 	bl	800cf34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2b6:	e011      	b.n	800b2dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	691b      	ldr	r3, [r3, #16]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d012      	beq.n	800b2e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3310      	adds	r3, #16
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f000 fd7f 	bl	800bdc8 <xTaskRemoveFromEventList>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2d0:	f000 feb6 	bl	800c040 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	3b01      	subs	r3, #1
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	dce9      	bgt.n	800b2b8 <prvUnlockQueue+0x60>
 800b2e4:	e000      	b.n	800b2e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	22ff      	movs	r2, #255	; 0xff
 800b2ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b2f0:	f001 fe50 	bl	800cf94 <vPortExitCritical>
}
 800b2f4:	bf00      	nop
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b304:	f001 fe16 	bl	800cf34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b310:	2301      	movs	r3, #1
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	e001      	b.n	800b31a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b31a:	f001 fe3b 	bl	800cf94 <vPortExitCritical>

	return xReturn;
 800b31e:	68fb      	ldr	r3, [r7, #12]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b330:	f001 fe00 	bl	800cf34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d102      	bne.n	800b346 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b340:	2301      	movs	r3, #1
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	e001      	b.n	800b34a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b34a:	f001 fe23 	bl	800cf94 <vPortExitCritical>

	return xReturn;
 800b34e:	68fb      	ldr	r3, [r7, #12]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b362:	2300      	movs	r3, #0
 800b364:	60fb      	str	r3, [r7, #12]
 800b366:	e014      	b.n	800b392 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b368:	4a0f      	ldr	r2, [pc, #60]	; (800b3a8 <vQueueAddToRegistry+0x50>)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d10b      	bne.n	800b38c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b374:	490c      	ldr	r1, [pc, #48]	; (800b3a8 <vQueueAddToRegistry+0x50>)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b37e:	4a0a      	ldr	r2, [pc, #40]	; (800b3a8 <vQueueAddToRegistry+0x50>)
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	00db      	lsls	r3, r3, #3
 800b384:	4413      	add	r3, r2
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b38a:	e006      	b.n	800b39a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	60fb      	str	r3, [r7, #12]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b07      	cmp	r3, #7
 800b396:	d9e7      	bls.n	800b368 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b398:	bf00      	nop
 800b39a:	bf00      	nop
 800b39c:	3714      	adds	r7, #20
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
 800b3a6:	bf00      	nop
 800b3a8:	2000151c 	.word	0x2000151c

0800b3ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	e016      	b.n	800b3e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b3ba:	4a10      	ldr	r2, [pc, #64]	; (800b3fc <vQueueUnregisterQueue+0x50>)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	4413      	add	r3, r2
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d10b      	bne.n	800b3e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b3ca:	4a0c      	ldr	r2, [pc, #48]	; (800b3fc <vQueueUnregisterQueue+0x50>)
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b3d4:	4a09      	ldr	r2, [pc, #36]	; (800b3fc <vQueueUnregisterQueue+0x50>)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	00db      	lsls	r3, r3, #3
 800b3da:	4413      	add	r3, r2
 800b3dc:	2200      	movs	r2, #0
 800b3de:	605a      	str	r2, [r3, #4]
				break;
 800b3e0:	e006      	b.n	800b3f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b07      	cmp	r3, #7
 800b3ec:	d9e5      	bls.n	800b3ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	2000151c 	.word	0x2000151c

0800b400 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b410:	f001 fd90 	bl	800cf34 <vPortEnterCritical>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b41a:	b25b      	sxtb	r3, r3
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d103      	bne.n	800b42a <vQueueWaitForMessageRestricted+0x2a>
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2200      	movs	r2, #0
 800b426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b430:	b25b      	sxtb	r3, r3
 800b432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b436:	d103      	bne.n	800b440 <vQueueWaitForMessageRestricted+0x40>
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b440:	f001 fda8 	bl	800cf94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	3324      	adds	r3, #36	; 0x24
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	68b9      	ldr	r1, [r7, #8]
 800b454:	4618      	mov	r0, r3
 800b456:	f000 fc8b 	bl	800bd70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b45a:	6978      	ldr	r0, [r7, #20]
 800b45c:	f7ff fefc 	bl	800b258 <prvUnlockQueue>
	}
 800b460:	bf00      	nop
 800b462:	3718      	adds	r7, #24
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08c      	sub	sp, #48	; 0x30
 800b46c:	af04      	add	r7, sp, #16
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	603b      	str	r3, [r7, #0]
 800b474:	4613      	mov	r3, r2
 800b476:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b478:	88fb      	ldrh	r3, [r7, #6]
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4618      	mov	r0, r3
 800b47e:	f001 fe7b 	bl	800d178 <pvPortMalloc>
 800b482:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00e      	beq.n	800b4a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b48a:	2054      	movs	r0, #84	; 0x54
 800b48c:	f001 fe74 	bl	800d178 <pvPortMalloc>
 800b490:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b492:	69fb      	ldr	r3, [r7, #28]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	631a      	str	r2, [r3, #48]	; 0x30
 800b49e:	e005      	b.n	800b4ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4a0:	6978      	ldr	r0, [r7, #20]
 800b4a2:	f001 ff35 	bl	800d310 <vPortFree>
 800b4a6:	e001      	b.n	800b4ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d013      	beq.n	800b4da <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4b2:	88fa      	ldrh	r2, [r7, #6]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9303      	str	r3, [sp, #12]
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	9302      	str	r3, [sp, #8]
 800b4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	68b9      	ldr	r1, [r7, #8]
 800b4c8:	68f8      	ldr	r0, [r7, #12]
 800b4ca:	f000 f80e 	bl	800b4ea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ce:	69f8      	ldr	r0, [r7, #28]
 800b4d0:	f000 f892 	bl	800b5f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	61bb      	str	r3, [r7, #24]
 800b4d8:	e002      	b.n	800b4e0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4da:	f04f 33ff 	mov.w	r3, #4294967295
 800b4de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4e0:	69bb      	ldr	r3, [r7, #24]
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3720      	adds	r7, #32
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b088      	sub	sp, #32
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b502:	3b01      	subs	r3, #1
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b50a:	69bb      	ldr	r3, [r7, #24]
 800b50c:	f023 0307 	bic.w	r3, r3, #7
 800b510:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	f003 0307 	and.w	r3, r3, #7
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	617b      	str	r3, [r7, #20]
}
 800b52e:	bf00      	nop
 800b530:	e7fe      	b.n	800b530 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d01f      	beq.n	800b578 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b538:	2300      	movs	r3, #0
 800b53a:	61fb      	str	r3, [r7, #28]
 800b53c:	e012      	b.n	800b564 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	4413      	add	r3, r2
 800b544:	7819      	ldrb	r1, [r3, #0]
 800b546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	4413      	add	r3, r2
 800b54c:	3334      	adds	r3, #52	; 0x34
 800b54e:	460a      	mov	r2, r1
 800b550:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	4413      	add	r3, r2
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d006      	beq.n	800b56c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	3301      	adds	r3, #1
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d9e9      	bls.n	800b53e <prvInitialiseNewTask+0x54>
 800b56a:	e000      	b.n	800b56e <prvInitialiseNewTask+0x84>
			{
				break;
 800b56c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b576:	e003      	b.n	800b580 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	2200      	movs	r2, #0
 800b57c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	2b06      	cmp	r3, #6
 800b584:	d901      	bls.n	800b58a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b586:	2306      	movs	r3, #6
 800b588:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b58e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b594:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	2200      	movs	r2, #0
 800b59a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59e:	3304      	adds	r3, #4
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fe ff7d 	bl	800a4a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	3318      	adds	r3, #24
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe ff78 	bl	800a4a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	f1c3 0207 	rsb	r2, r3, #7
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5c4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b5d4:	683a      	ldr	r2, [r7, #0]
 800b5d6:	68f9      	ldr	r1, [r7, #12]
 800b5d8:	69b8      	ldr	r0, [r7, #24]
 800b5da:	f001 fb7b 	bl	800ccd4 <pxPortInitialiseStack>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d002      	beq.n	800b5f0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5f0:	bf00      	nop
 800b5f2:	3720      	adds	r7, #32
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b600:	f001 fc98 	bl	800cf34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b604:	4b2a      	ldr	r3, [pc, #168]	; (800b6b0 <prvAddNewTaskToReadyList+0xb8>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3301      	adds	r3, #1
 800b60a:	4a29      	ldr	r2, [pc, #164]	; (800b6b0 <prvAddNewTaskToReadyList+0xb8>)
 800b60c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b60e:	4b29      	ldr	r3, [pc, #164]	; (800b6b4 <prvAddNewTaskToReadyList+0xbc>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d109      	bne.n	800b62a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b616:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <prvAddNewTaskToReadyList+0xbc>)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b61c:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <prvAddNewTaskToReadyList+0xb8>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d110      	bne.n	800b646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b624:	f000 fd30 	bl	800c088 <prvInitialiseTaskLists>
 800b628:	e00d      	b.n	800b646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b62a:	4b23      	ldr	r3, [pc, #140]	; (800b6b8 <prvAddNewTaskToReadyList+0xc0>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d109      	bne.n	800b646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b632:	4b20      	ldr	r3, [pc, #128]	; (800b6b4 <prvAddNewTaskToReadyList+0xbc>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d802      	bhi.n	800b646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b640:	4a1c      	ldr	r2, [pc, #112]	; (800b6b4 <prvAddNewTaskToReadyList+0xbc>)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b646:	4b1d      	ldr	r3, [pc, #116]	; (800b6bc <prvAddNewTaskToReadyList+0xc4>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3301      	adds	r3, #1
 800b64c:	4a1b      	ldr	r2, [pc, #108]	; (800b6bc <prvAddNewTaskToReadyList+0xc4>)
 800b64e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b654:	2201      	movs	r2, #1
 800b656:	409a      	lsls	r2, r3
 800b658:	4b19      	ldr	r3, [pc, #100]	; (800b6c0 <prvAddNewTaskToReadyList+0xc8>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4313      	orrs	r3, r2
 800b65e:	4a18      	ldr	r2, [pc, #96]	; (800b6c0 <prvAddNewTaskToReadyList+0xc8>)
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4a15      	ldr	r2, [pc, #84]	; (800b6c4 <prvAddNewTaskToReadyList+0xcc>)
 800b670:	441a      	add	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3304      	adds	r3, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4610      	mov	r0, r2
 800b67a:	f7fe ff1e 	bl	800a4ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b67e:	f001 fc89 	bl	800cf94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b682:	4b0d      	ldr	r3, [pc, #52]	; (800b6b8 <prvAddNewTaskToReadyList+0xc0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00e      	beq.n	800b6a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b68a:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <prvAddNewTaskToReadyList+0xbc>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b694:	429a      	cmp	r2, r3
 800b696:	d207      	bcs.n	800b6a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b698:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <prvAddNewTaskToReadyList+0xd0>)
 800b69a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69e:	601a      	str	r2, [r3, #0]
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	2000165c 	.word	0x2000165c
 800b6b4:	2000155c 	.word	0x2000155c
 800b6b8:	20001668 	.word	0x20001668
 800b6bc:	20001678 	.word	0x20001678
 800b6c0:	20001664 	.word	0x20001664
 800b6c4:	20001560 	.word	0x20001560
 800b6c8:	e000ed04 	.word	0xe000ed04

0800b6cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b6d4:	f001 fc2e 	bl	800cf34 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d102      	bne.n	800b6e4 <vTaskDelete+0x18>
 800b6de:	4b39      	ldr	r3, [pc, #228]	; (800b7c4 <vTaskDelete+0xf8>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	e000      	b.n	800b6e6 <vTaskDelete+0x1a>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fe ff41 	bl	800a574 <uxListRemove>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d115      	bne.n	800b724 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fc:	4932      	ldr	r1, [pc, #200]	; (800b7c8 <vTaskDelete+0xfc>)
 800b6fe:	4613      	mov	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	4413      	add	r3, r2
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	440b      	add	r3, r1
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d10a      	bne.n	800b724 <vTaskDelete+0x58>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b712:	2201      	movs	r2, #1
 800b714:	fa02 f303 	lsl.w	r3, r2, r3
 800b718:	43da      	mvns	r2, r3
 800b71a:	4b2c      	ldr	r3, [pc, #176]	; (800b7cc <vTaskDelete+0x100>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4013      	ands	r3, r2
 800b720:	4a2a      	ldr	r2, [pc, #168]	; (800b7cc <vTaskDelete+0x100>)
 800b722:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3318      	adds	r3, #24
 800b730:	4618      	mov	r0, r3
 800b732:	f7fe ff1f 	bl	800a574 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800b736:	4b26      	ldr	r3, [pc, #152]	; (800b7d0 <vTaskDelete+0x104>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3301      	adds	r3, #1
 800b73c:	4a24      	ldr	r2, [pc, #144]	; (800b7d0 <vTaskDelete+0x104>)
 800b73e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800b740:	4b20      	ldr	r3, [pc, #128]	; (800b7c4 <vTaskDelete+0xf8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	429a      	cmp	r2, r3
 800b748:	d10b      	bne.n	800b762 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4820      	ldr	r0, [pc, #128]	; (800b7d4 <vTaskDelete+0x108>)
 800b752:	f7fe feb2 	bl	800a4ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800b756:	4b20      	ldr	r3, [pc, #128]	; (800b7d8 <vTaskDelete+0x10c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	3301      	adds	r3, #1
 800b75c:	4a1e      	ldr	r2, [pc, #120]	; (800b7d8 <vTaskDelete+0x10c>)
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	e009      	b.n	800b776 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800b762:	4b1e      	ldr	r3, [pc, #120]	; (800b7dc <vTaskDelete+0x110>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	3b01      	subs	r3, #1
 800b768:	4a1c      	ldr	r2, [pc, #112]	; (800b7dc <vTaskDelete+0x110>)
 800b76a:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fcf9 	bl	800c164 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800b772:	f000 fd07 	bl	800c184 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800b776:	f001 fc0d 	bl	800cf94 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800b77a:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <vTaskDelete+0x114>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d01b      	beq.n	800b7ba <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 800b782:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <vTaskDelete+0xf8>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d116      	bne.n	800b7ba <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800b78c:	4b15      	ldr	r3, [pc, #84]	; (800b7e4 <vTaskDelete+0x118>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d00a      	beq.n	800b7aa <vTaskDelete+0xde>
	__asm volatile
 800b794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b798:	f383 8811 	msr	BASEPRI, r3
 800b79c:	f3bf 8f6f 	isb	sy
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	60bb      	str	r3, [r7, #8]
}
 800b7a6:	bf00      	nop
 800b7a8:	e7fe      	b.n	800b7a8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800b7aa:	4b0f      	ldr	r3, [pc, #60]	; (800b7e8 <vTaskDelete+0x11c>)
 800b7ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7b0:	601a      	str	r2, [r3, #0]
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000155c 	.word	0x2000155c
 800b7c8:	20001560 	.word	0x20001560
 800b7cc:	20001664 	.word	0x20001664
 800b7d0:	20001678 	.word	0x20001678
 800b7d4:	20001630 	.word	0x20001630
 800b7d8:	20001644 	.word	0x20001644
 800b7dc:	2000165c 	.word	0x2000165c
 800b7e0:	20001668 	.word	0x20001668
 800b7e4:	20001684 	.word	0x20001684
 800b7e8:	e000ed04 	.word	0xe000ed04

0800b7ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d017      	beq.n	800b82e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <vTaskDelay+0x60>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <vTaskDelay+0x30>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60bb      	str	r3, [r7, #8]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b81c:	f000 f868 	bl	800b8f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b820:	2100      	movs	r1, #0
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fea2 	bl	800c56c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b828:	f000 f870 	bl	800b90c <xTaskResumeAll>
 800b82c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d107      	bne.n	800b844 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <vTaskDelay+0x64>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b844:	bf00      	nop
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	20001684 	.word	0x20001684
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800b85a:	4b1f      	ldr	r3, [pc, #124]	; (800b8d8 <vTaskStartScheduler+0x84>)
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	2300      	movs	r3, #0
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	2280      	movs	r2, #128	; 0x80
 800b866:	491d      	ldr	r1, [pc, #116]	; (800b8dc <vTaskStartScheduler+0x88>)
 800b868:	481d      	ldr	r0, [pc, #116]	; (800b8e0 <vTaskStartScheduler+0x8c>)
 800b86a:	f7ff fdfd 	bl	800b468 <xTaskCreate>
 800b86e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d102      	bne.n	800b87c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800b876:	f000 fedf 	bl	800c638 <xTimerCreateTimerTask>
 800b87a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d116      	bne.n	800b8b0 <vTaskStartScheduler+0x5c>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	60bb      	str	r3, [r7, #8]
}
 800b894:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b896:	4b13      	ldr	r3, [pc, #76]	; (800b8e4 <vTaskStartScheduler+0x90>)
 800b898:	f04f 32ff 	mov.w	r2, #4294967295
 800b89c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b89e:	4b12      	ldr	r3, [pc, #72]	; (800b8e8 <vTaskStartScheduler+0x94>)
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b8a4:	4b11      	ldr	r3, [pc, #68]	; (800b8ec <vTaskStartScheduler+0x98>)
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b8aa:	f001 faa1 	bl	800cdf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b8ae:	e00e      	b.n	800b8ce <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b6:	d10a      	bne.n	800b8ce <vTaskStartScheduler+0x7a>
	__asm volatile
 800b8b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8bc:	f383 8811 	msr	BASEPRI, r3
 800b8c0:	f3bf 8f6f 	isb	sy
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	607b      	str	r3, [r7, #4]
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <vTaskStartScheduler+0x78>
}
 800b8ce:	bf00      	nop
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20001680 	.word	0x20001680
 800b8dc:	0801dae0 	.word	0x0801dae0
 800b8e0:	0800c059 	.word	0x0800c059
 800b8e4:	2000167c 	.word	0x2000167c
 800b8e8:	20001668 	.word	0x20001668
 800b8ec:	20001660 	.word	0x20001660

0800b8f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b8f4:	4b04      	ldr	r3, [pc, #16]	; (800b908 <vTaskSuspendAll+0x18>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	4a03      	ldr	r2, [pc, #12]	; (800b908 <vTaskSuspendAll+0x18>)
 800b8fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b8fe:	bf00      	nop
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	20001684 	.word	0x20001684

0800b90c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b916:	2300      	movs	r3, #0
 800b918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b91a:	4b41      	ldr	r3, [pc, #260]	; (800ba20 <xTaskResumeAll+0x114>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10a      	bne.n	800b938 <xTaskResumeAll+0x2c>
	__asm volatile
 800b922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b926:	f383 8811 	msr	BASEPRI, r3
 800b92a:	f3bf 8f6f 	isb	sy
 800b92e:	f3bf 8f4f 	dsb	sy
 800b932:	603b      	str	r3, [r7, #0]
}
 800b934:	bf00      	nop
 800b936:	e7fe      	b.n	800b936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b938:	f001 fafc 	bl	800cf34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b93c:	4b38      	ldr	r3, [pc, #224]	; (800ba20 <xTaskResumeAll+0x114>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3b01      	subs	r3, #1
 800b942:	4a37      	ldr	r2, [pc, #220]	; (800ba20 <xTaskResumeAll+0x114>)
 800b944:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b946:	4b36      	ldr	r3, [pc, #216]	; (800ba20 <xTaskResumeAll+0x114>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d161      	bne.n	800ba12 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b94e:	4b35      	ldr	r3, [pc, #212]	; (800ba24 <xTaskResumeAll+0x118>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d05d      	beq.n	800ba12 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b956:	e02e      	b.n	800b9b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b958:	4b33      	ldr	r3, [pc, #204]	; (800ba28 <xTaskResumeAll+0x11c>)
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3318      	adds	r3, #24
 800b964:	4618      	mov	r0, r3
 800b966:	f7fe fe05 	bl	800a574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fe00 	bl	800a574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b978:	2201      	movs	r2, #1
 800b97a:	409a      	lsls	r2, r3
 800b97c:	4b2b      	ldr	r3, [pc, #172]	; (800ba2c <xTaskResumeAll+0x120>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4313      	orrs	r3, r2
 800b982:	4a2a      	ldr	r2, [pc, #168]	; (800ba2c <xTaskResumeAll+0x120>)
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	4a27      	ldr	r2, [pc, #156]	; (800ba30 <xTaskResumeAll+0x124>)
 800b994:	441a      	add	r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	4610      	mov	r0, r2
 800b99e:	f7fe fd8c 	bl	800a4ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9a6:	4b23      	ldr	r3, [pc, #140]	; (800ba34 <xTaskResumeAll+0x128>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	d302      	bcc.n	800b9b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b9b0:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <xTaskResumeAll+0x12c>)
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9b6:	4b1c      	ldr	r3, [pc, #112]	; (800ba28 <xTaskResumeAll+0x11c>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1cc      	bne.n	800b958 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d001      	beq.n	800b9c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b9c4:	f000 fbde 	bl	800c184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b9c8:	4b1c      	ldr	r3, [pc, #112]	; (800ba3c <xTaskResumeAll+0x130>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d010      	beq.n	800b9f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b9d4:	f000 f858 	bl	800ba88 <xTaskIncrementTick>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d002      	beq.n	800b9e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b9de:	4b16      	ldr	r3, [pc, #88]	; (800ba38 <xTaskResumeAll+0x12c>)
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1f1      	bne.n	800b9d4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b9f0:	4b12      	ldr	r3, [pc, #72]	; (800ba3c <xTaskResumeAll+0x130>)
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b9f6:	4b10      	ldr	r3, [pc, #64]	; (800ba38 <xTaskResumeAll+0x12c>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d009      	beq.n	800ba12 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba02:	4b0f      	ldr	r3, [pc, #60]	; (800ba40 <xTaskResumeAll+0x134>)
 800ba04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba12:	f001 fabf 	bl	800cf94 <vPortExitCritical>

	return xAlreadyYielded;
 800ba16:	68bb      	ldr	r3, [r7, #8]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20001684 	.word	0x20001684
 800ba24:	2000165c 	.word	0x2000165c
 800ba28:	2000161c 	.word	0x2000161c
 800ba2c:	20001664 	.word	0x20001664
 800ba30:	20001560 	.word	0x20001560
 800ba34:	2000155c 	.word	0x2000155c
 800ba38:	20001670 	.word	0x20001670
 800ba3c:	2000166c 	.word	0x2000166c
 800ba40:	e000ed04 	.word	0xe000ed04

0800ba44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ba4a:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <xTaskGetTickCount+0x1c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ba50:	687b      	ldr	r3, [r7, #4]
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	20001660 	.word	0x20001660

0800ba64 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba6a:	f001 fb45 	bl	800d0f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ba6e:	2300      	movs	r3, #0
 800ba70:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ba72:	4b04      	ldr	r3, [pc, #16]	; (800ba84 <xTaskGetTickCountFromISR+0x20>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba78:	683b      	ldr	r3, [r7, #0]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3708      	adds	r7, #8
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20001660 	.word	0x20001660

0800ba88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba92:	4b4e      	ldr	r3, [pc, #312]	; (800bbcc <xTaskIncrementTick+0x144>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 808e 	bne.w	800bbb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba9c:	4b4c      	ldr	r3, [pc, #304]	; (800bbd0 <xTaskIncrementTick+0x148>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	3301      	adds	r3, #1
 800baa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800baa4:	4a4a      	ldr	r2, [pc, #296]	; (800bbd0 <xTaskIncrementTick+0x148>)
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d120      	bne.n	800baf2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bab0:	4b48      	ldr	r3, [pc, #288]	; (800bbd4 <xTaskIncrementTick+0x14c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00a      	beq.n	800bad0 <xTaskIncrementTick+0x48>
	__asm volatile
 800baba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babe:	f383 8811 	msr	BASEPRI, r3
 800bac2:	f3bf 8f6f 	isb	sy
 800bac6:	f3bf 8f4f 	dsb	sy
 800baca:	603b      	str	r3, [r7, #0]
}
 800bacc:	bf00      	nop
 800bace:	e7fe      	b.n	800bace <xTaskIncrementTick+0x46>
 800bad0:	4b40      	ldr	r3, [pc, #256]	; (800bbd4 <xTaskIncrementTick+0x14c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	4b40      	ldr	r3, [pc, #256]	; (800bbd8 <xTaskIncrementTick+0x150>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4a3e      	ldr	r2, [pc, #248]	; (800bbd4 <xTaskIncrementTick+0x14c>)
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	4a3e      	ldr	r2, [pc, #248]	; (800bbd8 <xTaskIncrementTick+0x150>)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6013      	str	r3, [r2, #0]
 800bae4:	4b3d      	ldr	r3, [pc, #244]	; (800bbdc <xTaskIncrementTick+0x154>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a3c      	ldr	r2, [pc, #240]	; (800bbdc <xTaskIncrementTick+0x154>)
 800baec:	6013      	str	r3, [r2, #0]
 800baee:	f000 fb49 	bl	800c184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baf2:	4b3b      	ldr	r3, [pc, #236]	; (800bbe0 <xTaskIncrementTick+0x158>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d348      	bcc.n	800bb8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bafc:	4b35      	ldr	r3, [pc, #212]	; (800bbd4 <xTaskIncrementTick+0x14c>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d104      	bne.n	800bb10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb06:	4b36      	ldr	r3, [pc, #216]	; (800bbe0 <xTaskIncrementTick+0x158>)
 800bb08:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0c:	601a      	str	r2, [r3, #0]
					break;
 800bb0e:	e03e      	b.n	800bb8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb10:	4b30      	ldr	r3, [pc, #192]	; (800bbd4 <xTaskIncrementTick+0x14c>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d203      	bcs.n	800bb30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb28:	4a2d      	ldr	r2, [pc, #180]	; (800bbe0 <xTaskIncrementTick+0x158>)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb2e:	e02e      	b.n	800bb8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	3304      	adds	r3, #4
 800bb34:	4618      	mov	r0, r3
 800bb36:	f7fe fd1d 	bl	800a574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d004      	beq.n	800bb4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	3318      	adds	r3, #24
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7fe fd14 	bl	800a574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb50:	2201      	movs	r2, #1
 800bb52:	409a      	lsls	r2, r3
 800bb54:	4b23      	ldr	r3, [pc, #140]	; (800bbe4 <xTaskIncrementTick+0x15c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	4a22      	ldr	r2, [pc, #136]	; (800bbe4 <xTaskIncrementTick+0x15c>)
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb62:	4613      	mov	r3, r2
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4413      	add	r3, r2
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	4a1f      	ldr	r2, [pc, #124]	; (800bbe8 <xTaskIncrementTick+0x160>)
 800bb6c:	441a      	add	r2, r3
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	3304      	adds	r3, #4
 800bb72:	4619      	mov	r1, r3
 800bb74:	4610      	mov	r0, r2
 800bb76:	f7fe fca0 	bl	800a4ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7e:	4b1b      	ldr	r3, [pc, #108]	; (800bbec <xTaskIncrementTick+0x164>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d3b9      	bcc.n	800bafc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb8c:	e7b6      	b.n	800bafc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb8e:	4b17      	ldr	r3, [pc, #92]	; (800bbec <xTaskIncrementTick+0x164>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb94:	4914      	ldr	r1, [pc, #80]	; (800bbe8 <xTaskIncrementTick+0x160>)
 800bb96:	4613      	mov	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	440b      	add	r3, r1
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d901      	bls.n	800bbaa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bba6:	2301      	movs	r3, #1
 800bba8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bbaa:	4b11      	ldr	r3, [pc, #68]	; (800bbf0 <xTaskIncrementTick+0x168>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d007      	beq.n	800bbc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	617b      	str	r3, [r7, #20]
 800bbb6:	e004      	b.n	800bbc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bbb8:	4b0e      	ldr	r3, [pc, #56]	; (800bbf4 <xTaskIncrementTick+0x16c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	4a0d      	ldr	r2, [pc, #52]	; (800bbf4 <xTaskIncrementTick+0x16c>)
 800bbc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bbc2:	697b      	ldr	r3, [r7, #20]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	20001684 	.word	0x20001684
 800bbd0:	20001660 	.word	0x20001660
 800bbd4:	20001614 	.word	0x20001614
 800bbd8:	20001618 	.word	0x20001618
 800bbdc:	20001674 	.word	0x20001674
 800bbe0:	2000167c 	.word	0x2000167c
 800bbe4:	20001664 	.word	0x20001664
 800bbe8:	20001560 	.word	0x20001560
 800bbec:	2000155c 	.word	0x2000155c
 800bbf0:	20001670 	.word	0x20001670
 800bbf4:	2000166c 	.word	0x2000166c

0800bbf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbfe:	4b27      	ldr	r3, [pc, #156]	; (800bc9c <vTaskSwitchContext+0xa4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d003      	beq.n	800bc0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc06:	4b26      	ldr	r3, [pc, #152]	; (800bca0 <vTaskSwitchContext+0xa8>)
 800bc08:	2201      	movs	r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc0c:	e03f      	b.n	800bc8e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bc0e:	4b24      	ldr	r3, [pc, #144]	; (800bca0 <vTaskSwitchContext+0xa8>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc14:	4b23      	ldr	r3, [pc, #140]	; (800bca4 <vTaskSwitchContext+0xac>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	fab3 f383 	clz	r3, r3
 800bc20:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bc22:	7afb      	ldrb	r3, [r7, #11]
 800bc24:	f1c3 031f 	rsb	r3, r3, #31
 800bc28:	617b      	str	r3, [r7, #20]
 800bc2a:	491f      	ldr	r1, [pc, #124]	; (800bca8 <vTaskSwitchContext+0xb0>)
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	440b      	add	r3, r1
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	607b      	str	r3, [r7, #4]
}
 800bc50:	bf00      	nop
 800bc52:	e7fe      	b.n	800bc52 <vTaskSwitchContext+0x5a>
 800bc54:	697a      	ldr	r2, [r7, #20]
 800bc56:	4613      	mov	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4a12      	ldr	r2, [pc, #72]	; (800bca8 <vTaskSwitchContext+0xb0>)
 800bc60:	4413      	add	r3, r2
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	685a      	ldr	r2, [r3, #4]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	605a      	str	r2, [r3, #4]
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	3308      	adds	r3, #8
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d104      	bne.n	800bc84 <vTaskSwitchContext+0x8c>
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	685a      	ldr	r2, [r3, #4]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	605a      	str	r2, [r3, #4]
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	4a08      	ldr	r2, [pc, #32]	; (800bcac <vTaskSwitchContext+0xb4>)
 800bc8c:	6013      	str	r3, [r2, #0]
}
 800bc8e:	bf00      	nop
 800bc90:	371c      	adds	r7, #28
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	20001684 	.word	0x20001684
 800bca0:	20001670 	.word	0x20001670
 800bca4:	20001664 	.word	0x20001664
 800bca8:	20001560 	.word	0x20001560
 800bcac:	2000155c 	.word	0x2000155c

0800bcb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10a      	bne.n	800bcd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	60fb      	str	r3, [r7, #12]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcd6:	4b07      	ldr	r3, [pc, #28]	; (800bcf4 <vTaskPlaceOnEventList+0x44>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3318      	adds	r3, #24
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7fe fc0f 	bl	800a502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bce4:	2101      	movs	r1, #1
 800bce6:	6838      	ldr	r0, [r7, #0]
 800bce8:	f000 fc40 	bl	800c56c <prvAddCurrentTaskToDelayedList>
}
 800bcec:	bf00      	nop
 800bcee:	3710      	adds	r7, #16
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	2000155c 	.word	0x2000155c

0800bcf8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	617b      	str	r3, [r7, #20]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <vTaskPlaceOnUnorderedEventList+0x70>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d10a      	bne.n	800bd3e <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	613b      	str	r3, [r7, #16]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800bd3e:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <vTaskPlaceOnUnorderedEventList+0x74>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bd48:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd4a:	4b08      	ldr	r3, [pc, #32]	; (800bd6c <vTaskPlaceOnUnorderedEventList+0x74>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3318      	adds	r3, #24
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7fe fbb1 	bl	800a4ba <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd58:	2101      	movs	r1, #1
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 fc06 	bl	800c56c <prvAddCurrentTaskToDelayedList>
}
 800bd60:	bf00      	nop
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	20001684 	.word	0x20001684
 800bd6c:	2000155c 	.word	0x2000155c

0800bd70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	617b      	str	r3, [r7, #20]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd98:	4b0a      	ldr	r3, [pc, #40]	; (800bdc4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	3318      	adds	r3, #24
 800bd9e:	4619      	mov	r1, r3
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f7fe fb8a 	bl	800a4ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d002      	beq.n	800bdb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bdac:	f04f 33ff 	mov.w	r3, #4294967295
 800bdb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	68b8      	ldr	r0, [r7, #8]
 800bdb6:	f000 fbd9 	bl	800c56c <prvAddCurrentTaskToDelayedList>
	}
 800bdba:	bf00      	nop
 800bdbc:	3718      	adds	r7, #24
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	2000155c 	.word	0x2000155c

0800bdc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	68db      	ldr	r3, [r3, #12]
 800bdd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d10a      	bne.n	800bdf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde2:	f383 8811 	msr	BASEPRI, r3
 800bde6:	f3bf 8f6f 	isb	sy
 800bdea:	f3bf 8f4f 	dsb	sy
 800bdee:	60fb      	str	r3, [r7, #12]
}
 800bdf0:	bf00      	nop
 800bdf2:	e7fe      	b.n	800bdf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	3318      	adds	r3, #24
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fe fbbb 	bl	800a574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdfe:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <xTaskRemoveFromEventList+0xac>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d11c      	bne.n	800be40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	3304      	adds	r3, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe fbb2 	bl	800a574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	2201      	movs	r2, #1
 800be16:	409a      	lsls	r2, r3
 800be18:	4b17      	ldr	r3, [pc, #92]	; (800be78 <xTaskRemoveFromEventList+0xb0>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	4a16      	ldr	r2, [pc, #88]	; (800be78 <xTaskRemoveFromEventList+0xb0>)
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4a13      	ldr	r2, [pc, #76]	; (800be7c <xTaskRemoveFromEventList+0xb4>)
 800be30:	441a      	add	r2, r3
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	3304      	adds	r3, #4
 800be36:	4619      	mov	r1, r3
 800be38:	4610      	mov	r0, r2
 800be3a:	f7fe fb3e 	bl	800a4ba <vListInsertEnd>
 800be3e:	e005      	b.n	800be4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	3318      	adds	r3, #24
 800be44:	4619      	mov	r1, r3
 800be46:	480e      	ldr	r0, [pc, #56]	; (800be80 <xTaskRemoveFromEventList+0xb8>)
 800be48:	f7fe fb37 	bl	800a4ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <xTaskRemoveFromEventList+0xbc>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be56:	429a      	cmp	r2, r3
 800be58:	d905      	bls.n	800be66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be5a:	2301      	movs	r3, #1
 800be5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be5e:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <xTaskRemoveFromEventList+0xc0>)
 800be60:	2201      	movs	r2, #1
 800be62:	601a      	str	r2, [r3, #0]
 800be64:	e001      	b.n	800be6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800be66:	2300      	movs	r3, #0
 800be68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be6a:	697b      	ldr	r3, [r7, #20]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3718      	adds	r7, #24
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20001684 	.word	0x20001684
 800be78:	20001664 	.word	0x20001664
 800be7c:	20001560 	.word	0x20001560
 800be80:	2000161c 	.word	0x2000161c
 800be84:	2000155c 	.word	0x2000155c
 800be88:	20001670 	.word	0x20001670

0800be8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800be96:	4b29      	ldr	r3, [pc, #164]	; (800bf3c <vTaskRemoveFromUnorderedEventList+0xb0>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	613b      	str	r3, [r7, #16]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10a      	bne.n	800bee0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800beca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	60fb      	str	r3, [r7, #12]
}
 800bedc:	bf00      	nop
 800bede:	e7fe      	b.n	800bede <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f7fe fb47 	bl	800a574 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fb42 	bl	800a574 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef4:	2201      	movs	r2, #1
 800bef6:	409a      	lsls	r2, r3
 800bef8:	4b11      	ldr	r3, [pc, #68]	; (800bf40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4313      	orrs	r3, r2
 800befe:	4a10      	ldr	r2, [pc, #64]	; (800bf40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800bf00:	6013      	str	r3, [r2, #0]
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf06:	4613      	mov	r3, r2
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4a0d      	ldr	r2, [pc, #52]	; (800bf44 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800bf10:	441a      	add	r2, r3
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7fe face 	bl	800a4ba <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf22:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d902      	bls.n	800bf32 <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800bf2c:	4b07      	ldr	r3, [pc, #28]	; (800bf4c <vTaskRemoveFromUnorderedEventList+0xc0>)
 800bf2e:	2201      	movs	r2, #1
 800bf30:	601a      	str	r2, [r3, #0]
	}
}
 800bf32:	bf00      	nop
 800bf34:	3718      	adds	r7, #24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20001684 	.word	0x20001684
 800bf40:	20001664 	.word	0x20001664
 800bf44:	20001560 	.word	0x20001560
 800bf48:	2000155c 	.word	0x2000155c
 800bf4c:	20001670 	.word	0x20001670

0800bf50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <vTaskInternalSetTimeOutState+0x24>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf60:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <vTaskInternalSetTimeOutState+0x28>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	605a      	str	r2, [r3, #4]
}
 800bf68:	bf00      	nop
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr
 800bf74:	20001674 	.word	0x20001674
 800bf78:	20001660 	.word	0x20001660

0800bf7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	613b      	str	r3, [r7, #16]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10a      	bne.n	800bfbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bfbe:	f000 ffb9 	bl	800cf34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bfc2:	4b1d      	ldr	r3, [pc, #116]	; (800c038 <xTaskCheckForTimeOut+0xbc>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	69ba      	ldr	r2, [r7, #24]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfda:	d102      	bne.n	800bfe2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61fb      	str	r3, [r7, #28]
 800bfe0:	e023      	b.n	800c02a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b15      	ldr	r3, [pc, #84]	; (800c03c <xTaskCheckForTimeOut+0xc0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d007      	beq.n	800bffe <xTaskCheckForTimeOut+0x82>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	69ba      	ldr	r2, [r7, #24]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d302      	bcc.n	800bffe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bff8:	2301      	movs	r3, #1
 800bffa:	61fb      	str	r3, [r7, #28]
 800bffc:	e015      	b.n	800c02a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	697a      	ldr	r2, [r7, #20]
 800c004:	429a      	cmp	r2, r3
 800c006:	d20b      	bcs.n	800c020 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	1ad2      	subs	r2, r2, r3
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7ff ff9b 	bl	800bf50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	61fb      	str	r3, [r7, #28]
 800c01e:	e004      	b.n	800c02a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c026:	2301      	movs	r3, #1
 800c028:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c02a:	f000 ffb3 	bl	800cf94 <vPortExitCritical>

	return xReturn;
 800c02e:	69fb      	ldr	r3, [r7, #28]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3720      	adds	r7, #32
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	20001660 	.word	0x20001660
 800c03c:	20001674 	.word	0x20001674

0800c040 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c040:	b480      	push	{r7}
 800c042:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c044:	4b03      	ldr	r3, [pc, #12]	; (800c054 <vTaskMissedYield+0x14>)
 800c046:	2201      	movs	r2, #1
 800c048:	601a      	str	r2, [r3, #0]
}
 800c04a:	bf00      	nop
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr
 800c054:	20001670 	.word	0x20001670

0800c058 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b082      	sub	sp, #8
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c060:	f000 f852 	bl	800c108 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c064:	4b06      	ldr	r3, [pc, #24]	; (800c080 <prvIdleTask+0x28>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2b01      	cmp	r3, #1
 800c06a:	d9f9      	bls.n	800c060 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <prvIdleTask+0x2c>)
 800c06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c07c:	e7f0      	b.n	800c060 <prvIdleTask+0x8>
 800c07e:	bf00      	nop
 800c080:	20001560 	.word	0x20001560
 800c084:	e000ed04 	.word	0xe000ed04

0800c088 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c08e:	2300      	movs	r3, #0
 800c090:	607b      	str	r3, [r7, #4]
 800c092:	e00c      	b.n	800c0ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	4a12      	ldr	r2, [pc, #72]	; (800c0e8 <prvInitialiseTaskLists+0x60>)
 800c0a0:	4413      	add	r3, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe f9dc 	bl	800a460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	607b      	str	r3, [r7, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2b06      	cmp	r3, #6
 800c0b2:	d9ef      	bls.n	800c094 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c0b4:	480d      	ldr	r0, [pc, #52]	; (800c0ec <prvInitialiseTaskLists+0x64>)
 800c0b6:	f7fe f9d3 	bl	800a460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c0ba:	480d      	ldr	r0, [pc, #52]	; (800c0f0 <prvInitialiseTaskLists+0x68>)
 800c0bc:	f7fe f9d0 	bl	800a460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c0c0:	480c      	ldr	r0, [pc, #48]	; (800c0f4 <prvInitialiseTaskLists+0x6c>)
 800c0c2:	f7fe f9cd 	bl	800a460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c0c6:	480c      	ldr	r0, [pc, #48]	; (800c0f8 <prvInitialiseTaskLists+0x70>)
 800c0c8:	f7fe f9ca 	bl	800a460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c0cc:	480b      	ldr	r0, [pc, #44]	; (800c0fc <prvInitialiseTaskLists+0x74>)
 800c0ce:	f7fe f9c7 	bl	800a460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c0d2:	4b0b      	ldr	r3, [pc, #44]	; (800c100 <prvInitialiseTaskLists+0x78>)
 800c0d4:	4a05      	ldr	r2, [pc, #20]	; (800c0ec <prvInitialiseTaskLists+0x64>)
 800c0d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c0d8:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <prvInitialiseTaskLists+0x7c>)
 800c0da:	4a05      	ldr	r2, [pc, #20]	; (800c0f0 <prvInitialiseTaskLists+0x68>)
 800c0dc:	601a      	str	r2, [r3, #0]
}
 800c0de:	bf00      	nop
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20001560 	.word	0x20001560
 800c0ec:	200015ec 	.word	0x200015ec
 800c0f0:	20001600 	.word	0x20001600
 800c0f4:	2000161c 	.word	0x2000161c
 800c0f8:	20001630 	.word	0x20001630
 800c0fc:	20001648 	.word	0x20001648
 800c100:	20001614 	.word	0x20001614
 800c104:	20001618 	.word	0x20001618

0800c108 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c10e:	e019      	b.n	800c144 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c110:	f000 ff10 	bl	800cf34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c114:	4b10      	ldr	r3, [pc, #64]	; (800c158 <prvCheckTasksWaitingTermination+0x50>)
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	68db      	ldr	r3, [r3, #12]
 800c11a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3304      	adds	r3, #4
 800c120:	4618      	mov	r0, r3
 800c122:	f7fe fa27 	bl	800a574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c126:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <prvCheckTasksWaitingTermination+0x54>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	4a0b      	ldr	r2, [pc, #44]	; (800c15c <prvCheckTasksWaitingTermination+0x54>)
 800c12e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c130:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <prvCheckTasksWaitingTermination+0x58>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3b01      	subs	r3, #1
 800c136:	4a0a      	ldr	r2, [pc, #40]	; (800c160 <prvCheckTasksWaitingTermination+0x58>)
 800c138:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c13a:	f000 ff2b 	bl	800cf94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f810 	bl	800c164 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c144:	4b06      	ldr	r3, [pc, #24]	; (800c160 <prvCheckTasksWaitingTermination+0x58>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1e1      	bne.n	800c110 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20001630 	.word	0x20001630
 800c15c:	2000165c 	.word	0x2000165c
 800c160:	20001644 	.word	0x20001644

0800c164 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c170:	4618      	mov	r0, r3
 800c172:	f001 f8cd 	bl	800d310 <vPortFree>
			vPortFree( pxTCB );
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f001 f8ca 	bl	800d310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c17c:	bf00      	nop
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c18a:	4b0c      	ldr	r3, [pc, #48]	; (800c1bc <prvResetNextTaskUnblockTime+0x38>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d104      	bne.n	800c19e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c194:	4b0a      	ldr	r3, [pc, #40]	; (800c1c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c196:	f04f 32ff 	mov.w	r2, #4294967295
 800c19a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c19c:	e008      	b.n	800c1b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c19e:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <prvResetNextTaskUnblockTime+0x38>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	4a04      	ldr	r2, [pc, #16]	; (800c1c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c1ae:	6013      	str	r3, [r2, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr
 800c1bc:	20001614 	.word	0x20001614
 800c1c0:	2000167c 	.word	0x2000167c

0800c1c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1ca:	4b0b      	ldr	r3, [pc, #44]	; (800c1f8 <xTaskGetSchedulerState+0x34>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d102      	bne.n	800c1d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	607b      	str	r3, [r7, #4]
 800c1d6:	e008      	b.n	800c1ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1d8:	4b08      	ldr	r3, [pc, #32]	; (800c1fc <xTaskGetSchedulerState+0x38>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d102      	bne.n	800c1e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	607b      	str	r3, [r7, #4]
 800c1e4:	e001      	b.n	800c1ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1ea:	687b      	ldr	r3, [r7, #4]
	}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr
 800c1f8:	20001668 	.word	0x20001668
 800c1fc:	20001684 	.word	0x20001684

0800c200 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d05e      	beq.n	800c2d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c21a:	4b31      	ldr	r3, [pc, #196]	; (800c2e0 <xTaskPriorityInherit+0xe0>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c220:	429a      	cmp	r2, r3
 800c222:	d24e      	bcs.n	800c2c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	699b      	ldr	r3, [r3, #24]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	db06      	blt.n	800c23a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22c:	4b2c      	ldr	r3, [pc, #176]	; (800c2e0 <xTaskPriorityInherit+0xe0>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	f1c3 0207 	rsb	r2, r3, #7
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6959      	ldr	r1, [r3, #20]
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c242:	4613      	mov	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	4a26      	ldr	r2, [pc, #152]	; (800c2e4 <xTaskPriorityInherit+0xe4>)
 800c24c:	4413      	add	r3, r2
 800c24e:	4299      	cmp	r1, r3
 800c250:	d12f      	bne.n	800c2b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	3304      	adds	r3, #4
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f98c 	bl	800a574 <uxListRemove>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10a      	bne.n	800c278 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c266:	2201      	movs	r2, #1
 800c268:	fa02 f303 	lsl.w	r3, r2, r3
 800c26c:	43da      	mvns	r2, r3
 800c26e:	4b1e      	ldr	r3, [pc, #120]	; (800c2e8 <xTaskPriorityInherit+0xe8>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4013      	ands	r3, r2
 800c274:	4a1c      	ldr	r2, [pc, #112]	; (800c2e8 <xTaskPriorityInherit+0xe8>)
 800c276:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c278:	4b19      	ldr	r3, [pc, #100]	; (800c2e0 <xTaskPriorityInherit+0xe0>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c286:	2201      	movs	r2, #1
 800c288:	409a      	lsls	r2, r3
 800c28a:	4b17      	ldr	r3, [pc, #92]	; (800c2e8 <xTaskPriorityInherit+0xe8>)
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4313      	orrs	r3, r2
 800c290:	4a15      	ldr	r2, [pc, #84]	; (800c2e8 <xTaskPriorityInherit+0xe8>)
 800c292:	6013      	str	r3, [r2, #0]
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c298:	4613      	mov	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	4413      	add	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4a10      	ldr	r2, [pc, #64]	; (800c2e4 <xTaskPriorityInherit+0xe4>)
 800c2a2:	441a      	add	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	4610      	mov	r0, r2
 800c2ac:	f7fe f905 	bl	800a4ba <vListInsertEnd>
 800c2b0:	e004      	b.n	800c2bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2b2:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <xTaskPriorityInherit+0xe0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	e008      	b.n	800c2d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2c6:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <xTaskPriorityInherit+0xe0>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d201      	bcs.n	800c2d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
	}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
 800c2de:	bf00      	nop
 800c2e0:	2000155c 	.word	0x2000155c
 800c2e4:	20001560 	.word	0x20001560
 800c2e8:	20001664 	.word	0x20001664

0800c2ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d06e      	beq.n	800c3e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c302:	4b3a      	ldr	r3, [pc, #232]	; (800c3ec <xTaskPriorityDisinherit+0x100>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	693a      	ldr	r2, [r7, #16]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d00a      	beq.n	800c322 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	60fb      	str	r3, [r7, #12]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10a      	bne.n	800c340 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	60bb      	str	r3, [r7, #8]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c344:	1e5a      	subs	r2, r3, #1
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	429a      	cmp	r2, r3
 800c354:	d044      	beq.n	800c3e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d140      	bne.n	800c3e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	3304      	adds	r3, #4
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe f906 	bl	800a574 <uxListRemove>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d115      	bne.n	800c39a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c372:	491f      	ldr	r1, [pc, #124]	; (800c3f0 <xTaskPriorityDisinherit+0x104>)
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	440b      	add	r3, r1
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10a      	bne.n	800c39a <xTaskPriorityDisinherit+0xae>
 800c384:	693b      	ldr	r3, [r7, #16]
 800c386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c388:	2201      	movs	r2, #1
 800c38a:	fa02 f303 	lsl.w	r3, r2, r3
 800c38e:	43da      	mvns	r2, r3
 800c390:	4b18      	ldr	r3, [pc, #96]	; (800c3f4 <xTaskPriorityDisinherit+0x108>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4013      	ands	r3, r2
 800c396:	4a17      	ldr	r2, [pc, #92]	; (800c3f4 <xTaskPriorityDisinherit+0x108>)
 800c398:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a6:	f1c3 0207 	rsb	r2, r3, #7
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c3ae:	693b      	ldr	r3, [r7, #16]
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	409a      	lsls	r2, r3
 800c3b6:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <xTaskPriorityDisinherit+0x108>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	4a0d      	ldr	r2, [pc, #52]	; (800c3f4 <xTaskPriorityDisinherit+0x108>)
 800c3be:	6013      	str	r3, [r2, #0]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4a08      	ldr	r2, [pc, #32]	; (800c3f0 <xTaskPriorityDisinherit+0x104>)
 800c3ce:	441a      	add	r2, r3
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	f7fe f86f 	bl	800a4ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c3e0:	697b      	ldr	r3, [r7, #20]
	}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	2000155c 	.word	0x2000155c
 800c3f0:	20001560 	.word	0x20001560
 800c3f4:	20001664 	.word	0x20001664

0800c3f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c406:	2301      	movs	r3, #1
 800c408:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d077      	beq.n	800c500 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	60fb      	str	r3, [r7, #12]
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d902      	bls.n	800c43e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	61fb      	str	r3, [r7, #28]
 800c43c:	e002      	b.n	800c444 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c442:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	69fa      	ldr	r2, [r7, #28]
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d058      	beq.n	800c500 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c452:	697a      	ldr	r2, [r7, #20]
 800c454:	429a      	cmp	r2, r3
 800c456:	d153      	bne.n	800c500 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c458:	4b2b      	ldr	r3, [pc, #172]	; (800c508 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10a      	bne.n	800c478 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	60bb      	str	r3, [r7, #8]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	69fa      	ldr	r2, [r7, #28]
 800c482:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	db04      	blt.n	800c496 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	f1c3 0207 	rsb	r2, r3, #7
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	6959      	ldr	r1, [r3, #20]
 800c49a:	693a      	ldr	r2, [r7, #16]
 800c49c:	4613      	mov	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4a19      	ldr	r2, [pc, #100]	; (800c50c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c4a6:	4413      	add	r3, r2
 800c4a8:	4299      	cmp	r1, r3
 800c4aa:	d129      	bne.n	800c500 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c4ac:	69bb      	ldr	r3, [r7, #24]
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7fe f85f 	bl	800a574 <uxListRemove>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	43da      	mvns	r2, r3
 800c4c8:	4b11      	ldr	r3, [pc, #68]	; (800c510 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	4a10      	ldr	r2, [pc, #64]	; (800c510 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	409a      	lsls	r2, r3
 800c4da:	4b0d      	ldr	r3, [pc, #52]	; (800c510 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	4a0b      	ldr	r2, [pc, #44]	; (800c510 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4a06      	ldr	r2, [pc, #24]	; (800c50c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c4f2:	441a      	add	r2, r3
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	3304      	adds	r3, #4
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	f7fd ffdd 	bl	800a4ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c500:	bf00      	nop
 800c502:	3720      	adds	r7, #32
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	2000155c 	.word	0x2000155c
 800c50c:	20001560 	.word	0x20001560
 800c510:	20001664 	.word	0x20001664

0800c514 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800c51a:	4b09      	ldr	r3, [pc, #36]	; (800c540 <uxTaskResetEventItemValue+0x2c>)
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c522:	4b07      	ldr	r3, [pc, #28]	; (800c540 <uxTaskResetEventItemValue+0x2c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c528:	4b05      	ldr	r3, [pc, #20]	; (800c540 <uxTaskResetEventItemValue+0x2c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f1c2 0207 	rsb	r2, r2, #7
 800c530:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800c532:	687b      	ldr	r3, [r7, #4]
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	2000155c 	.word	0x2000155c

0800c544 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c544:	b480      	push	{r7}
 800c546:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c548:	4b07      	ldr	r3, [pc, #28]	; (800c568 <pvTaskIncrementMutexHeldCount+0x24>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d004      	beq.n	800c55a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c550:	4b05      	ldr	r3, [pc, #20]	; (800c568 <pvTaskIncrementMutexHeldCount+0x24>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c556:	3201      	adds	r2, #1
 800c558:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c55a:	4b03      	ldr	r3, [pc, #12]	; (800c568 <pvTaskIncrementMutexHeldCount+0x24>)
 800c55c:	681b      	ldr	r3, [r3, #0]
	}
 800c55e:	4618      	mov	r0, r3
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr
 800c568:	2000155c 	.word	0x2000155c

0800c56c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b084      	sub	sp, #16
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c576:	4b29      	ldr	r3, [pc, #164]	; (800c61c <prvAddCurrentTaskToDelayedList+0xb0>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c57c:	4b28      	ldr	r3, [pc, #160]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	3304      	adds	r3, #4
 800c582:	4618      	mov	r0, r3
 800c584:	f7fd fff6 	bl	800a574 <uxListRemove>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c58e:	4b24      	ldr	r3, [pc, #144]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	2201      	movs	r2, #1
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	43da      	mvns	r2, r3
 800c59c:	4b21      	ldr	r3, [pc, #132]	; (800c624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	4a20      	ldr	r2, [pc, #128]	; (800c624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c5a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ac:	d10a      	bne.n	800c5c4 <prvAddCurrentTaskToDelayedList+0x58>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d007      	beq.n	800c5c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5b4:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	481a      	ldr	r0, [pc, #104]	; (800c628 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c5be:	f7fd ff7c 	bl	800a4ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c5c2:	e026      	b.n	800c612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c5cc:	4b14      	ldr	r3, [pc, #80]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d209      	bcs.n	800c5f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5dc:	4b13      	ldr	r3, [pc, #76]	; (800c62c <prvAddCurrentTaskToDelayedList+0xc0>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	4b0f      	ldr	r3, [pc, #60]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3304      	adds	r3, #4
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7fd ff8a 	bl	800a502 <vListInsert>
}
 800c5ee:	e010      	b.n	800c612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c5f0:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	4b0a      	ldr	r3, [pc, #40]	; (800c620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	4619      	mov	r1, r3
 800c5fc:	4610      	mov	r0, r2
 800c5fe:	f7fd ff80 	bl	800a502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c602:	4b0c      	ldr	r3, [pc, #48]	; (800c634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d202      	bcs.n	800c612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c60c:	4a09      	ldr	r2, [pc, #36]	; (800c634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
 800c61a:	bf00      	nop
 800c61c:	20001660 	.word	0x20001660
 800c620:	2000155c 	.word	0x2000155c
 800c624:	20001664 	.word	0x20001664
 800c628:	20001648 	.word	0x20001648
 800c62c:	20001618 	.word	0x20001618
 800c630:	20001614 	.word	0x20001614
 800c634:	2000167c 	.word	0x2000167c

0800c638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800c63e:	2300      	movs	r3, #0
 800c640:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c642:	f000 faf1 	bl	800cc28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c646:	4b11      	ldr	r3, [pc, #68]	; (800c68c <xTimerCreateTimerTask+0x54>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00a      	beq.n	800c664 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800c64e:	4b10      	ldr	r3, [pc, #64]	; (800c690 <xTimerCreateTimerTask+0x58>)
 800c650:	9301      	str	r3, [sp, #4]
 800c652:	2306      	movs	r3, #6
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	2300      	movs	r3, #0
 800c658:	2280      	movs	r2, #128	; 0x80
 800c65a:	490e      	ldr	r1, [pc, #56]	; (800c694 <xTimerCreateTimerTask+0x5c>)
 800c65c:	480e      	ldr	r0, [pc, #56]	; (800c698 <xTimerCreateTimerTask+0x60>)
 800c65e:	f7fe ff03 	bl	800b468 <xTaskCreate>
 800c662:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <xTimerCreateTimerTask+0x48>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	603b      	str	r3, [r7, #0]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <xTimerCreateTimerTask+0x46>
	return xReturn;
 800c680:	687b      	ldr	r3, [r7, #4]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	200016b8 	.word	0x200016b8
 800c690:	200016bc 	.word	0x200016bc
 800c694:	0801dae8 	.word	0x0801dae8
 800c698:	0800c7d1 	.word	0x0800c7d1

0800c69c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
 800c6a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d10a      	bne.n	800c6ca <xTimerGenericCommand+0x2e>
	__asm volatile
 800c6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b8:	f383 8811 	msr	BASEPRI, r3
 800c6bc:	f3bf 8f6f 	isb	sy
 800c6c0:	f3bf 8f4f 	dsb	sy
 800c6c4:	623b      	str	r3, [r7, #32]
}
 800c6c6:	bf00      	nop
 800c6c8:	e7fe      	b.n	800c6c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c6ca:	4b1a      	ldr	r3, [pc, #104]	; (800c734 <xTimerGenericCommand+0x98>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d02a      	beq.n	800c728 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2b05      	cmp	r3, #5
 800c6e2:	dc18      	bgt.n	800c716 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c6e4:	f7ff fd6e 	bl	800c1c4 <xTaskGetSchedulerState>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d109      	bne.n	800c702 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c6ee:	4b11      	ldr	r3, [pc, #68]	; (800c734 <xTimerGenericCommand+0x98>)
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	f107 0110 	add.w	r1, r7, #16
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6fa:	f7fe f855 	bl	800a7a8 <xQueueGenericSend>
 800c6fe:	6278      	str	r0, [r7, #36]	; 0x24
 800c700:	e012      	b.n	800c728 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c702:	4b0c      	ldr	r3, [pc, #48]	; (800c734 <xTimerGenericCommand+0x98>)
 800c704:	6818      	ldr	r0, [r3, #0]
 800c706:	f107 0110 	add.w	r1, r7, #16
 800c70a:	2300      	movs	r3, #0
 800c70c:	2200      	movs	r2, #0
 800c70e:	f7fe f84b 	bl	800a7a8 <xQueueGenericSend>
 800c712:	6278      	str	r0, [r7, #36]	; 0x24
 800c714:	e008      	b.n	800c728 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c716:	4b07      	ldr	r3, [pc, #28]	; (800c734 <xTimerGenericCommand+0x98>)
 800c718:	6818      	ldr	r0, [r3, #0]
 800c71a:	f107 0110 	add.w	r1, r7, #16
 800c71e:	2300      	movs	r3, #0
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	f7fe f93f 	bl	800a9a4 <xQueueGenericSendFromISR>
 800c726:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3728      	adds	r7, #40	; 0x28
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	200016b8 	.word	0x200016b8

0800c738 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b088      	sub	sp, #32
 800c73c:	af02      	add	r7, sp, #8
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c742:	4b22      	ldr	r3, [pc, #136]	; (800c7cc <prvProcessExpiredTimer+0x94>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	3304      	adds	r3, #4
 800c750:	4618      	mov	r0, r3
 800c752:	f7fd ff0f 	bl	800a574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d022      	beq.n	800c7aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	699a      	ldr	r2, [r3, #24]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	18d1      	adds	r1, r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	683a      	ldr	r2, [r7, #0]
 800c770:	6978      	ldr	r0, [r7, #20]
 800c772:	f000 f8d1 	bl	800c918 <prvInsertTimerInActiveList>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d01f      	beq.n	800c7bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c77c:	2300      	movs	r3, #0
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	2300      	movs	r3, #0
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	2100      	movs	r1, #0
 800c786:	6978      	ldr	r0, [r7, #20]
 800c788:	f7ff ff88 	bl	800c69c <xTimerGenericCommand>
 800c78c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d113      	bne.n	800c7bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c798:	f383 8811 	msr	BASEPRI, r3
 800c79c:	f3bf 8f6f 	isb	sy
 800c7a0:	f3bf 8f4f 	dsb	sy
 800c7a4:	60fb      	str	r3, [r7, #12]
}
 800c7a6:	bf00      	nop
 800c7a8:	e7fe      	b.n	800c7a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c7b0:	f023 0301 	bic.w	r3, r3, #1
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	6978      	ldr	r0, [r7, #20]
 800c7c2:	4798      	blx	r3
}
 800c7c4:	bf00      	nop
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	200016b0 	.word	0x200016b0

0800c7d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7d8:	f107 0308 	add.w	r3, r7, #8
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f000 f857 	bl	800c890 <prvGetNextExpireTime>
 800c7e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	68f8      	ldr	r0, [r7, #12]
 800c7ea:	f000 f803 	bl	800c7f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c7ee:	f000 f8d5 	bl	800c99c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c7f2:	e7f1      	b.n	800c7d8 <prvTimerTask+0x8>

0800c7f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c7fe:	f7ff f877 	bl	800b8f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c802:	f107 0308 	add.w	r3, r7, #8
 800c806:	4618      	mov	r0, r3
 800c808:	f000 f866 	bl	800c8d8 <prvSampleTimeNow>
 800c80c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d130      	bne.n	800c876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d10a      	bne.n	800c830 <prvProcessTimerOrBlockTask+0x3c>
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d806      	bhi.n	800c830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c822:	f7ff f873 	bl	800b90c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c826:	68f9      	ldr	r1, [r7, #12]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7ff ff85 	bl	800c738 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c82e:	e024      	b.n	800c87a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d008      	beq.n	800c848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c836:	4b13      	ldr	r3, [pc, #76]	; (800c884 <prvProcessTimerOrBlockTask+0x90>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <prvProcessTimerOrBlockTask+0x50>
 800c840:	2301      	movs	r3, #1
 800c842:	e000      	b.n	800c846 <prvProcessTimerOrBlockTask+0x52>
 800c844:	2300      	movs	r3, #0
 800c846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c848:	4b0f      	ldr	r3, [pc, #60]	; (800c888 <prvProcessTimerOrBlockTask+0x94>)
 800c84a:	6818      	ldr	r0, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	4619      	mov	r1, r3
 800c856:	f7fe fdd3 	bl	800b400 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c85a:	f7ff f857 	bl	800b90c <xTaskResumeAll>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10a      	bne.n	800c87a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c864:	4b09      	ldr	r3, [pc, #36]	; (800c88c <prvProcessTimerOrBlockTask+0x98>)
 800c866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	f3bf 8f6f 	isb	sy
}
 800c874:	e001      	b.n	800c87a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c876:	f7ff f849 	bl	800b90c <xTaskResumeAll>
}
 800c87a:	bf00      	nop
 800c87c:	3710      	adds	r7, #16
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	200016b4 	.word	0x200016b4
 800c888:	200016b8 	.word	0x200016b8
 800c88c:	e000ed04 	.word	0xe000ed04

0800c890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c898:	4b0e      	ldr	r3, [pc, #56]	; (800c8d4 <prvGetNextExpireTime+0x44>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d101      	bne.n	800c8a6 <prvGetNextExpireTime+0x16>
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	e000      	b.n	800c8a8 <prvGetNextExpireTime+0x18>
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d105      	bne.n	800c8c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8b4:	4b07      	ldr	r3, [pc, #28]	; (800c8d4 <prvGetNextExpireTime+0x44>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]
 800c8be:	e001      	b.n	800c8c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	200016b0 	.word	0x200016b0

0800c8d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c8e0:	f7ff f8b0 	bl	800ba44 <xTaskGetTickCount>
 800c8e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c8e6:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <prvSampleTimeNow+0x3c>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d205      	bcs.n	800c8fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c8f0:	f000 f936 	bl	800cb60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	e002      	b.n	800c902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c902:	4a04      	ldr	r2, [pc, #16]	; (800c914 <prvSampleTimeNow+0x3c>)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c908:	68fb      	ldr	r3, [r7, #12]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}
 800c912:	bf00      	nop
 800c914:	200016c0 	.word	0x200016c0

0800c918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	68ba      	ldr	r2, [r7, #8]
 800c92e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d812      	bhi.n	800c964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	1ad2      	subs	r2, r2, r3
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	699b      	ldr	r3, [r3, #24]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d302      	bcc.n	800c952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c94c:	2301      	movs	r3, #1
 800c94e:	617b      	str	r3, [r7, #20]
 800c950:	e01b      	b.n	800c98a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c952:	4b10      	ldr	r3, [pc, #64]	; (800c994 <prvInsertTimerInActiveList+0x7c>)
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	3304      	adds	r3, #4
 800c95a:	4619      	mov	r1, r3
 800c95c:	4610      	mov	r0, r2
 800c95e:	f7fd fdd0 	bl	800a502 <vListInsert>
 800c962:	e012      	b.n	800c98a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d206      	bcs.n	800c97a <prvInsertTimerInActiveList+0x62>
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	429a      	cmp	r2, r3
 800c972:	d302      	bcc.n	800c97a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	e007      	b.n	800c98a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <prvInsertTimerInActiveList+0x80>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3304      	adds	r3, #4
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fd fdbc 	bl	800a502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c98a:	697b      	ldr	r3, [r7, #20]
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	200016b4 	.word	0x200016b4
 800c998:	200016b0 	.word	0x200016b0

0800c99c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b08e      	sub	sp, #56	; 0x38
 800c9a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c9a2:	e0ca      	b.n	800cb3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	da18      	bge.n	800c9dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c9aa:	1d3b      	adds	r3, r7, #4
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d10a      	bne.n	800c9cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	61fb      	str	r3, [r7, #28]
}
 800c9c8:	bf00      	nop
 800c9ca:	e7fe      	b.n	800c9ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d2:	6850      	ldr	r0, [r2, #4]
 800c9d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d6:	6892      	ldr	r2, [r2, #8]
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f2c0 80ab 	blt.w	800cb3a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	695b      	ldr	r3, [r3, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d004      	beq.n	800c9fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fd fdbd 	bl	800a574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c9fa:	463b      	mov	r3, r7
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7ff ff6b 	bl	800c8d8 <prvSampleTimeNow>
 800ca02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b09      	cmp	r3, #9
 800ca08:	f200 8096 	bhi.w	800cb38 <prvProcessReceivedCommands+0x19c>
 800ca0c:	a201      	add	r2, pc, #4	; (adr r2, 800ca14 <prvProcessReceivedCommands+0x78>)
 800ca0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca12:	bf00      	nop
 800ca14:	0800ca3d 	.word	0x0800ca3d
 800ca18:	0800ca3d 	.word	0x0800ca3d
 800ca1c:	0800ca3d 	.word	0x0800ca3d
 800ca20:	0800cab1 	.word	0x0800cab1
 800ca24:	0800cac5 	.word	0x0800cac5
 800ca28:	0800cb0f 	.word	0x0800cb0f
 800ca2c:	0800ca3d 	.word	0x0800ca3d
 800ca30:	0800ca3d 	.word	0x0800ca3d
 800ca34:	0800cab1 	.word	0x0800cab1
 800ca38:	0800cac5 	.word	0x0800cac5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca42:	f043 0301 	orr.w	r3, r3, #1
 800ca46:	b2da      	uxtb	r2, r3
 800ca48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ca4e:	68ba      	ldr	r2, [r7, #8]
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	699b      	ldr	r3, [r3, #24]
 800ca54:	18d1      	adds	r1, r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca5c:	f7ff ff5c 	bl	800c918 <prvInsertTimerInActiveList>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d069      	beq.n	800cb3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca74:	f003 0304 	and.w	r3, r3, #4
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d05e      	beq.n	800cb3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	441a      	add	r2, r3
 800ca84:	2300      	movs	r3, #0
 800ca86:	9300      	str	r3, [sp, #0]
 800ca88:	2300      	movs	r3, #0
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca8e:	f7ff fe05 	bl	800c69c <xTimerGenericCommand>
 800ca92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d14f      	bne.n	800cb3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	61bb      	str	r3, [r7, #24]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cab2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cab6:	f023 0301 	bic.w	r3, r3, #1
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800cac2:	e03a      	b.n	800cb3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800caca:	f043 0301 	orr.w	r3, r3, #1
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10a      	bne.n	800cafa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	617b      	str	r3, [r7, #20]
}
 800caf6:	bf00      	nop
 800caf8:	e7fe      	b.n	800caf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafc:	699a      	ldr	r2, [r3, #24]
 800cafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb00:	18d1      	adds	r1, r2, r3
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb08:	f7ff ff06 	bl	800c918 <prvInsertTimerInActiveList>
					break;
 800cb0c:	e015      	b.n	800cb3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb14:	f003 0302 	and.w	r3, r3, #2
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d103      	bne.n	800cb24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cb1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb1e:	f000 fbf7 	bl	800d310 <vPortFree>
 800cb22:	e00a      	b.n	800cb3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cb36:	e000      	b.n	800cb3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cb38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cb3a:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <prvProcessReceivedCommands+0x1c0>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	1d39      	adds	r1, r7, #4
 800cb40:	2200      	movs	r2, #0
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe f856 	bl	800abf4 <xQueueReceive>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	f47f af2a 	bne.w	800c9a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	3730      	adds	r7, #48	; 0x30
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	200016b8 	.word	0x200016b8

0800cb60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b088      	sub	sp, #32
 800cb64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb66:	e048      	b.n	800cbfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb68:	4b2d      	ldr	r3, [pc, #180]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb72:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fd fcf7 	bl	800a574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	6a1b      	ldr	r3, [r3, #32]
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cb94:	f003 0304 	and.w	r3, r3, #4
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d02e      	beq.n	800cbfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	699b      	ldr	r3, [r3, #24]
 800cba0:	693a      	ldr	r2, [r7, #16]
 800cba2:	4413      	add	r3, r2
 800cba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cba6:	68ba      	ldr	r2, [r7, #8]
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d90e      	bls.n	800cbcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbba:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	f7fd fc9c 	bl	800a502 <vListInsert>
 800cbca:	e016      	b.n	800cbfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cbcc:	2300      	movs	r3, #0
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fd60 	bl	800c69c <xTimerGenericCommand>
 800cbdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	603b      	str	r3, [r7, #0]
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cbfa:	4b09      	ldr	r3, [pc, #36]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d1b1      	bne.n	800cb68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cc0a:	4b06      	ldr	r3, [pc, #24]	; (800cc24 <prvSwitchTimerLists+0xc4>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a04      	ldr	r2, [pc, #16]	; (800cc20 <prvSwitchTimerLists+0xc0>)
 800cc10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cc12:	4a04      	ldr	r2, [pc, #16]	; (800cc24 <prvSwitchTimerLists+0xc4>)
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	6013      	str	r3, [r2, #0]
}
 800cc18:	bf00      	nop
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	200016b0 	.word	0x200016b0
 800cc24:	200016b4 	.word	0x200016b4

0800cc28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cc2c:	f000 f982 	bl	800cf34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cc30:	4b12      	ldr	r3, [pc, #72]	; (800cc7c <prvCheckForValidListAndQueue+0x54>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d11d      	bne.n	800cc74 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800cc38:	4811      	ldr	r0, [pc, #68]	; (800cc80 <prvCheckForValidListAndQueue+0x58>)
 800cc3a:	f7fd fc11 	bl	800a460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cc3e:	4811      	ldr	r0, [pc, #68]	; (800cc84 <prvCheckForValidListAndQueue+0x5c>)
 800cc40:	f7fd fc0e 	bl	800a460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cc44:	4b10      	ldr	r3, [pc, #64]	; (800cc88 <prvCheckForValidListAndQueue+0x60>)
 800cc46:	4a0e      	ldr	r2, [pc, #56]	; (800cc80 <prvCheckForValidListAndQueue+0x58>)
 800cc48:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cc4a:	4b10      	ldr	r3, [pc, #64]	; (800cc8c <prvCheckForValidListAndQueue+0x64>)
 800cc4c:	4a0d      	ldr	r2, [pc, #52]	; (800cc84 <prvCheckForValidListAndQueue+0x5c>)
 800cc4e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800cc50:	2200      	movs	r2, #0
 800cc52:	2110      	movs	r1, #16
 800cc54:	2001      	movs	r0, #1
 800cc56:	f7fd fd1f 	bl	800a698 <xQueueGenericCreate>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <prvCheckForValidListAndQueue+0x54>)
 800cc5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cc60:	4b06      	ldr	r3, [pc, #24]	; (800cc7c <prvCheckForValidListAndQueue+0x54>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d005      	beq.n	800cc74 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cc68:	4b04      	ldr	r3, [pc, #16]	; (800cc7c <prvCheckForValidListAndQueue+0x54>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4908      	ldr	r1, [pc, #32]	; (800cc90 <prvCheckForValidListAndQueue+0x68>)
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fb72 	bl	800b358 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc74:	f000 f98e 	bl	800cf94 <vPortExitCritical>
}
 800cc78:	bf00      	nop
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	200016b8 	.word	0x200016b8
 800cc80:	20001688 	.word	0x20001688
 800cc84:	2000169c 	.word	0x2000169c
 800cc88:	200016b0 	.word	0x200016b0
 800cc8c:	200016b4 	.word	0x200016b4
 800cc90:	0801daf0 	.word	0x0801daf0

0800cc94 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b08a      	sub	sp, #40	; 0x28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	607a      	str	r2, [r7, #4]
 800cca0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800cca2:	f06f 0301 	mvn.w	r3, #1
 800cca6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccb4:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <xTimerPendFunctionCallFromISR+0x3c>)
 800ccb6:	6818      	ldr	r0, [r3, #0]
 800ccb8:	f107 0114 	add.w	r1, r7, #20
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	683a      	ldr	r2, [r7, #0]
 800ccc0:	f7fd fe70 	bl	800a9a4 <xQueueGenericSendFromISR>
 800ccc4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3728      	adds	r7, #40	; 0x28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	200016b8 	.word	0x200016b8

0800ccd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b085      	sub	sp, #20
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	3b04      	subs	r3, #4
 800cce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ccec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	3b04      	subs	r3, #4
 800ccf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	f023 0201 	bic.w	r2, r3, #1
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3b04      	subs	r3, #4
 800cd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cd04:	4a0c      	ldr	r2, [pc, #48]	; (800cd38 <pxPortInitialiseStack+0x64>)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	3b14      	subs	r3, #20
 800cd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3b04      	subs	r3, #4
 800cd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f06f 0202 	mvn.w	r2, #2
 800cd22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	3b20      	subs	r3, #32
 800cd28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr
 800cd38:	0800cd3d 	.word	0x0800cd3d

0800cd3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cd46:	4b12      	ldr	r3, [pc, #72]	; (800cd90 <prvTaskExitError+0x54>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4e:	d00a      	beq.n	800cd66 <prvTaskExitError+0x2a>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	60fb      	str	r3, [r7, #12]
}
 800cd62:	bf00      	nop
 800cd64:	e7fe      	b.n	800cd64 <prvTaskExitError+0x28>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	60bb      	str	r3, [r7, #8]
}
 800cd78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cd7a:	bf00      	nop
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0fc      	beq.n	800cd7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	3714      	adds	r7, #20
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	200000ac 	.word	0x200000ac
	...

0800cda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cda0:	4b07      	ldr	r3, [pc, #28]	; (800cdc0 <pxCurrentTCBConst2>)
 800cda2:	6819      	ldr	r1, [r3, #0]
 800cda4:	6808      	ldr	r0, [r1, #0]
 800cda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdaa:	f380 8809 	msr	PSP, r0
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f04f 0000 	mov.w	r0, #0
 800cdb6:	f380 8811 	msr	BASEPRI, r0
 800cdba:	4770      	bx	lr
 800cdbc:	f3af 8000 	nop.w

0800cdc0 <pxCurrentTCBConst2>:
 800cdc0:	2000155c 	.word	0x2000155c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cdc4:	bf00      	nop
 800cdc6:	bf00      	nop

0800cdc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cdc8:	4808      	ldr	r0, [pc, #32]	; (800cdec <prvPortStartFirstTask+0x24>)
 800cdca:	6800      	ldr	r0, [r0, #0]
 800cdcc:	6800      	ldr	r0, [r0, #0]
 800cdce:	f380 8808 	msr	MSP, r0
 800cdd2:	f04f 0000 	mov.w	r0, #0
 800cdd6:	f380 8814 	msr	CONTROL, r0
 800cdda:	b662      	cpsie	i
 800cddc:	b661      	cpsie	f
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	f3bf 8f6f 	isb	sy
 800cde6:	df00      	svc	0
 800cde8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cdea:	bf00      	nop
 800cdec:	e000ed08 	.word	0xe000ed08

0800cdf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cdf6:	4b46      	ldr	r3, [pc, #280]	; (800cf10 <xPortStartScheduler+0x120>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a46      	ldr	r2, [pc, #280]	; (800cf14 <xPortStartScheduler+0x124>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d10a      	bne.n	800ce16 <xPortStartScheduler+0x26>
	__asm volatile
 800ce00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	613b      	str	r3, [r7, #16]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ce16:	4b3e      	ldr	r3, [pc, #248]	; (800cf10 <xPortStartScheduler+0x120>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a3f      	ldr	r2, [pc, #252]	; (800cf18 <xPortStartScheduler+0x128>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d10a      	bne.n	800ce36 <xPortStartScheduler+0x46>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	f383 8811 	msr	BASEPRI, r3
 800ce28:	f3bf 8f6f 	isb	sy
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	60fb      	str	r3, [r7, #12]
}
 800ce32:	bf00      	nop
 800ce34:	e7fe      	b.n	800ce34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ce36:	4b39      	ldr	r3, [pc, #228]	; (800cf1c <xPortStartScheduler+0x12c>)
 800ce38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	22ff      	movs	r2, #255	; 0xff
 800ce46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ce50:	78fb      	ldrb	r3, [r7, #3]
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b31      	ldr	r3, [pc, #196]	; (800cf20 <xPortStartScheduler+0x130>)
 800ce5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ce5e:	4b31      	ldr	r3, [pc, #196]	; (800cf24 <xPortStartScheduler+0x134>)
 800ce60:	2207      	movs	r2, #7
 800ce62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce64:	e009      	b.n	800ce7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ce66:	4b2f      	ldr	r3, [pc, #188]	; (800cf24 <xPortStartScheduler+0x134>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	4a2d      	ldr	r2, [pc, #180]	; (800cf24 <xPortStartScheduler+0x134>)
 800ce6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	005b      	lsls	r3, r3, #1
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ce7a:	78fb      	ldrb	r3, [r7, #3]
 800ce7c:	b2db      	uxtb	r3, r3
 800ce7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce82:	2b80      	cmp	r3, #128	; 0x80
 800ce84:	d0ef      	beq.n	800ce66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ce86:	4b27      	ldr	r3, [pc, #156]	; (800cf24 <xPortStartScheduler+0x134>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f1c3 0307 	rsb	r3, r3, #7
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d00a      	beq.n	800cea8 <xPortStartScheduler+0xb8>
	__asm volatile
 800ce92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	60bb      	str	r3, [r7, #8]
}
 800cea4:	bf00      	nop
 800cea6:	e7fe      	b.n	800cea6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cea8:	4b1e      	ldr	r3, [pc, #120]	; (800cf24 <xPortStartScheduler+0x134>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	4a1d      	ldr	r2, [pc, #116]	; (800cf24 <xPortStartScheduler+0x134>)
 800ceb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ceb2:	4b1c      	ldr	r3, [pc, #112]	; (800cf24 <xPortStartScheduler+0x134>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ceba:	4a1a      	ldr	r2, [pc, #104]	; (800cf24 <xPortStartScheduler+0x134>)
 800cebc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cec6:	4b18      	ldr	r3, [pc, #96]	; (800cf28 <xPortStartScheduler+0x138>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a17      	ldr	r2, [pc, #92]	; (800cf28 <xPortStartScheduler+0x138>)
 800cecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ced0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ced2:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <xPortStartScheduler+0x138>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a14      	ldr	r2, [pc, #80]	; (800cf28 <xPortStartScheduler+0x138>)
 800ced8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cedc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cede:	f000 f8dd 	bl	800d09c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cee2:	4b12      	ldr	r3, [pc, #72]	; (800cf2c <xPortStartScheduler+0x13c>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cee8:	f000 f8fc 	bl	800d0e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ceec:	4b10      	ldr	r3, [pc, #64]	; (800cf30 <xPortStartScheduler+0x140>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a0f      	ldr	r2, [pc, #60]	; (800cf30 <xPortStartScheduler+0x140>)
 800cef2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cef6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cef8:	f7ff ff66 	bl	800cdc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cefc:	f7fe fe7c 	bl	800bbf8 <vTaskSwitchContext>
	prvTaskExitError();
 800cf00:	f7ff ff1c 	bl	800cd3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3718      	adds	r7, #24
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	e000ed00 	.word	0xe000ed00
 800cf14:	410fc271 	.word	0x410fc271
 800cf18:	410fc270 	.word	0x410fc270
 800cf1c:	e000e400 	.word	0xe000e400
 800cf20:	200016c4 	.word	0x200016c4
 800cf24:	200016c8 	.word	0x200016c8
 800cf28:	e000ed20 	.word	0xe000ed20
 800cf2c:	200000ac 	.word	0x200000ac
 800cf30:	e000ef34 	.word	0xe000ef34

0800cf34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
	__asm volatile
 800cf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3e:	f383 8811 	msr	BASEPRI, r3
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	f3bf 8f4f 	dsb	sy
 800cf4a:	607b      	str	r3, [r7, #4]
}
 800cf4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cf4e:	4b0f      	ldr	r3, [pc, #60]	; (800cf8c <vPortEnterCritical+0x58>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	3301      	adds	r3, #1
 800cf54:	4a0d      	ldr	r2, [pc, #52]	; (800cf8c <vPortEnterCritical+0x58>)
 800cf56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cf58:	4b0c      	ldr	r3, [pc, #48]	; (800cf8c <vPortEnterCritical+0x58>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d10f      	bne.n	800cf80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cf60:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <vPortEnterCritical+0x5c>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00a      	beq.n	800cf80 <vPortEnterCritical+0x4c>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	603b      	str	r3, [r7, #0]
}
 800cf7c:	bf00      	nop
 800cf7e:	e7fe      	b.n	800cf7e <vPortEnterCritical+0x4a>
	}
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	200000ac 	.word	0x200000ac
 800cf90:	e000ed04 	.word	0xe000ed04

0800cf94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf9a:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <vPortExitCritical+0x50>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d10a      	bne.n	800cfb8 <vPortExitCritical+0x24>
	__asm volatile
 800cfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa6:	f383 8811 	msr	BASEPRI, r3
 800cfaa:	f3bf 8f6f 	isb	sy
 800cfae:	f3bf 8f4f 	dsb	sy
 800cfb2:	607b      	str	r3, [r7, #4]
}
 800cfb4:	bf00      	nop
 800cfb6:	e7fe      	b.n	800cfb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cfb8:	4b0a      	ldr	r3, [pc, #40]	; (800cfe4 <vPortExitCritical+0x50>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	4a09      	ldr	r2, [pc, #36]	; (800cfe4 <vPortExitCritical+0x50>)
 800cfc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfc2:	4b08      	ldr	r3, [pc, #32]	; (800cfe4 <vPortExitCritical+0x50>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d105      	bne.n	800cfd6 <vPortExitCritical+0x42>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	f383 8811 	msr	BASEPRI, r3
}
 800cfd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cfd6:	bf00      	nop
 800cfd8:	370c      	adds	r7, #12
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	200000ac 	.word	0x200000ac
	...

0800cff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cff0:	f3ef 8009 	mrs	r0, PSP
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <pxCurrentTCBConst>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	f01e 0f10 	tst.w	lr, #16
 800d000:	bf08      	it	eq
 800d002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	6010      	str	r0, [r2, #0]
 800d00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d010:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d014:	f380 8811 	msr	BASEPRI, r0
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f7fe fdea 	bl	800bbf8 <vTaskSwitchContext>
 800d024:	f04f 0000 	mov.w	r0, #0
 800d028:	f380 8811 	msr	BASEPRI, r0
 800d02c:	bc09      	pop	{r0, r3}
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	6808      	ldr	r0, [r1, #0]
 800d032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d036:	f01e 0f10 	tst.w	lr, #16
 800d03a:	bf08      	it	eq
 800d03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d040:	f380 8809 	msr	PSP, r0
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w

0800d050 <pxCurrentTCBConst>:
 800d050:	2000155c 	.word	0x2000155c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d054:	bf00      	nop
 800d056:	bf00      	nop

0800d058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
	__asm volatile
 800d05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	607b      	str	r3, [r7, #4]
}
 800d070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d072:	f7fe fd09 	bl	800ba88 <xTaskIncrementTick>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d003      	beq.n	800d084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d07c:	4b06      	ldr	r3, [pc, #24]	; (800d098 <xPortSysTickHandler+0x40>)
 800d07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	2300      	movs	r3, #0
 800d086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	f383 8811 	msr	BASEPRI, r3
}
 800d08e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d090:	bf00      	nop
 800d092:	3708      	adds	r7, #8
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	e000ed04 	.word	0xe000ed04

0800d09c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d09c:	b480      	push	{r7}
 800d09e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d0a0:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <vPortSetupTimerInterrupt+0x34>)
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d0a6:	4b0b      	ldr	r3, [pc, #44]	; (800d0d4 <vPortSetupTimerInterrupt+0x38>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d0ac:	4b0a      	ldr	r3, [pc, #40]	; (800d0d8 <vPortSetupTimerInterrupt+0x3c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a0a      	ldr	r2, [pc, #40]	; (800d0dc <vPortSetupTimerInterrupt+0x40>)
 800d0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0b6:	099b      	lsrs	r3, r3, #6
 800d0b8:	4a09      	ldr	r2, [pc, #36]	; (800d0e0 <vPortSetupTimerInterrupt+0x44>)
 800d0ba:	3b01      	subs	r3, #1
 800d0bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d0be:	4b04      	ldr	r3, [pc, #16]	; (800d0d0 <vPortSetupTimerInterrupt+0x34>)
 800d0c0:	2207      	movs	r2, #7
 800d0c2:	601a      	str	r2, [r3, #0]
}
 800d0c4:	bf00      	nop
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	e000e010 	.word	0xe000e010
 800d0d4:	e000e018 	.word	0xe000e018
 800d0d8:	200000a0 	.word	0x200000a0
 800d0dc:	10624dd3 	.word	0x10624dd3
 800d0e0:	e000e014 	.word	0xe000e014

0800d0e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d0e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d0f4 <vPortEnableVFP+0x10>
 800d0e8:	6801      	ldr	r1, [r0, #0]
 800d0ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d0ee:	6001      	str	r1, [r0, #0]
 800d0f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d0f2:	bf00      	nop
 800d0f4:	e000ed88 	.word	0xe000ed88

0800d0f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d0fe:	f3ef 8305 	mrs	r3, IPSR
 800d102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2b0f      	cmp	r3, #15
 800d108:	d914      	bls.n	800d134 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d10a:	4a17      	ldr	r2, [pc, #92]	; (800d168 <vPortValidateInterruptPriority+0x70>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	4413      	add	r3, r2
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d114:	4b15      	ldr	r3, [pc, #84]	; (800d16c <vPortValidateInterruptPriority+0x74>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	7afa      	ldrb	r2, [r7, #11]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d20a      	bcs.n	800d134 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	607b      	str	r3, [r7, #4]
}
 800d130:	bf00      	nop
 800d132:	e7fe      	b.n	800d132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d134:	4b0e      	ldr	r3, [pc, #56]	; (800d170 <vPortValidateInterruptPriority+0x78>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d13c:	4b0d      	ldr	r3, [pc, #52]	; (800d174 <vPortValidateInterruptPriority+0x7c>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	d90a      	bls.n	800d15a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	603b      	str	r3, [r7, #0]
}
 800d156:	bf00      	nop
 800d158:	e7fe      	b.n	800d158 <vPortValidateInterruptPriority+0x60>
	}
 800d15a:	bf00      	nop
 800d15c:	3714      	adds	r7, #20
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr
 800d166:	bf00      	nop
 800d168:	e000e3f0 	.word	0xe000e3f0
 800d16c:	200016c4 	.word	0x200016c4
 800d170:	e000ed0c 	.word	0xe000ed0c
 800d174:	200016c8 	.word	0x200016c8

0800d178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08a      	sub	sp, #40	; 0x28
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d180:	2300      	movs	r3, #0
 800d182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d184:	f7fe fbb4 	bl	800b8f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d188:	4b5b      	ldr	r3, [pc, #364]	; (800d2f8 <pvPortMalloc+0x180>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d190:	f000 f920 	bl	800d3d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d194:	4b59      	ldr	r3, [pc, #356]	; (800d2fc <pvPortMalloc+0x184>)
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	4013      	ands	r3, r2
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f040 8093 	bne.w	800d2c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d01d      	beq.n	800d1e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d1a8:	2208      	movs	r2, #8
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f003 0307 	and.w	r3, r3, #7
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d014      	beq.n	800d1e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f023 0307 	bic.w	r3, r3, #7
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f003 0307 	and.w	r3, r3, #7
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00a      	beq.n	800d1e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d2:	f383 8811 	msr	BASEPRI, r3
 800d1d6:	f3bf 8f6f 	isb	sy
 800d1da:	f3bf 8f4f 	dsb	sy
 800d1de:	617b      	str	r3, [r7, #20]
}
 800d1e0:	bf00      	nop
 800d1e2:	e7fe      	b.n	800d1e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d06e      	beq.n	800d2c8 <pvPortMalloc+0x150>
 800d1ea:	4b45      	ldr	r3, [pc, #276]	; (800d300 <pvPortMalloc+0x188>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d869      	bhi.n	800d2c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d1f4:	4b43      	ldr	r3, [pc, #268]	; (800d304 <pvPortMalloc+0x18c>)
 800d1f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d1f8:	4b42      	ldr	r3, [pc, #264]	; (800d304 <pvPortMalloc+0x18c>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d1fe:	e004      	b.n	800d20a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20c:	685b      	ldr	r3, [r3, #4]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	429a      	cmp	r2, r3
 800d212:	d903      	bls.n	800d21c <pvPortMalloc+0xa4>
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1f1      	bne.n	800d200 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d21c:	4b36      	ldr	r3, [pc, #216]	; (800d2f8 <pvPortMalloc+0x180>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d222:	429a      	cmp	r2, r3
 800d224:	d050      	beq.n	800d2c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d226:	6a3b      	ldr	r3, [r7, #32]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2208      	movs	r2, #8
 800d22c:	4413      	add	r3, r2
 800d22e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23a:	685a      	ldr	r2, [r3, #4]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	1ad2      	subs	r2, r2, r3
 800d240:	2308      	movs	r3, #8
 800d242:	005b      	lsls	r3, r3, #1
 800d244:	429a      	cmp	r2, r3
 800d246:	d91f      	bls.n	800d288 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4413      	add	r3, r2
 800d24e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	f003 0307 	and.w	r3, r3, #7
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00a      	beq.n	800d270 <pvPortMalloc+0xf8>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	613b      	str	r3, [r7, #16]
}
 800d26c:	bf00      	nop
 800d26e:	e7fe      	b.n	800d26e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d282:	69b8      	ldr	r0, [r7, #24]
 800d284:	f000 f908 	bl	800d498 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <pvPortMalloc+0x188>)
 800d28a:	681a      	ldr	r2, [r3, #0]
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <pvPortMalloc+0x188>)
 800d294:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d296:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <pvPortMalloc+0x188>)
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	4b1b      	ldr	r3, [pc, #108]	; (800d308 <pvPortMalloc+0x190>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d203      	bcs.n	800d2aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d2a2:	4b17      	ldr	r3, [pc, #92]	; (800d300 <pvPortMalloc+0x188>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a18      	ldr	r2, [pc, #96]	; (800d308 <pvPortMalloc+0x190>)
 800d2a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <pvPortMalloc+0x184>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d2be:	4b13      	ldr	r3, [pc, #76]	; (800d30c <pvPortMalloc+0x194>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	4a11      	ldr	r2, [pc, #68]	; (800d30c <pvPortMalloc+0x194>)
 800d2c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d2c8:	f7fe fb20 	bl	800b90c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	f003 0307 	and.w	r3, r3, #7
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <pvPortMalloc+0x174>
	__asm volatile
 800d2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	60fb      	str	r3, [r7, #12]
}
 800d2e8:	bf00      	nop
 800d2ea:	e7fe      	b.n	800d2ea <pvPortMalloc+0x172>
	return pvReturn;
 800d2ec:	69fb      	ldr	r3, [r7, #28]
}
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	3728      	adds	r7, #40	; 0x28
 800d2f2:	46bd      	mov	sp, r7
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	2000a2d4 	.word	0x2000a2d4
 800d2fc:	2000a2e8 	.word	0x2000a2e8
 800d300:	2000a2d8 	.word	0x2000a2d8
 800d304:	2000a2cc 	.word	0x2000a2cc
 800d308:	2000a2dc 	.word	0x2000a2dc
 800d30c:	2000a2e0 	.word	0x2000a2e0

0800d310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d04d      	beq.n	800d3be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d322:	2308      	movs	r3, #8
 800d324:	425b      	negs	r3, r3
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	4413      	add	r3, r2
 800d32a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	4b24      	ldr	r3, [pc, #144]	; (800d3c8 <vPortFree+0xb8>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	4013      	ands	r3, r2
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d10a      	bne.n	800d354 <vPortFree+0x44>
	__asm volatile
 800d33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d342:	f383 8811 	msr	BASEPRI, r3
 800d346:	f3bf 8f6f 	isb	sy
 800d34a:	f3bf 8f4f 	dsb	sy
 800d34e:	60fb      	str	r3, [r7, #12]
}
 800d350:	bf00      	nop
 800d352:	e7fe      	b.n	800d352 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00a      	beq.n	800d372 <vPortFree+0x62>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	60bb      	str	r3, [r7, #8]
}
 800d36e:	bf00      	nop
 800d370:	e7fe      	b.n	800d370 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	685a      	ldr	r2, [r3, #4]
 800d376:	4b14      	ldr	r3, [pc, #80]	; (800d3c8 <vPortFree+0xb8>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4013      	ands	r3, r2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d01e      	beq.n	800d3be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2b00      	cmp	r3, #0
 800d386:	d11a      	bne.n	800d3be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	4b0e      	ldr	r3, [pc, #56]	; (800d3c8 <vPortFree+0xb8>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	43db      	mvns	r3, r3
 800d392:	401a      	ands	r2, r3
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d398:	f7fe faaa 	bl	800b8f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	685a      	ldr	r2, [r3, #4]
 800d3a0:	4b0a      	ldr	r3, [pc, #40]	; (800d3cc <vPortFree+0xbc>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4413      	add	r3, r2
 800d3a6:	4a09      	ldr	r2, [pc, #36]	; (800d3cc <vPortFree+0xbc>)
 800d3a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d3aa:	6938      	ldr	r0, [r7, #16]
 800d3ac:	f000 f874 	bl	800d498 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <vPortFree+0xc0>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	4a06      	ldr	r2, [pc, #24]	; (800d3d0 <vPortFree+0xc0>)
 800d3b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d3ba:	f7fe faa7 	bl	800b90c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d3be:	bf00      	nop
 800d3c0:	3718      	adds	r7, #24
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	2000a2e8 	.word	0x2000a2e8
 800d3cc:	2000a2d8 	.word	0x2000a2d8
 800d3d0:	2000a2e4 	.word	0x2000a2e4

0800d3d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d3da:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 800d3de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d3e0:	4b27      	ldr	r3, [pc, #156]	; (800d480 <prvHeapInit+0xac>)
 800d3e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f003 0307 	and.w	r3, r3, #7
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00c      	beq.n	800d408 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3307      	adds	r3, #7
 800d3f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f023 0307 	bic.w	r3, r3, #7
 800d3fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	4a1f      	ldr	r2, [pc, #124]	; (800d480 <prvHeapInit+0xac>)
 800d404:	4413      	add	r3, r2
 800d406:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d40c:	4a1d      	ldr	r2, [pc, #116]	; (800d484 <prvHeapInit+0xb0>)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d412:	4b1c      	ldr	r3, [pc, #112]	; (800d484 <prvHeapInit+0xb0>)
 800d414:	2200      	movs	r2, #0
 800d416:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68ba      	ldr	r2, [r7, #8]
 800d41c:	4413      	add	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d420:	2208      	movs	r2, #8
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	1a9b      	subs	r3, r3, r2
 800d426:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	4a15      	ldr	r2, [pc, #84]	; (800d488 <prvHeapInit+0xb4>)
 800d434:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d436:	4b14      	ldr	r3, [pc, #80]	; (800d488 <prvHeapInit+0xb4>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2200      	movs	r2, #0
 800d43c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d43e:	4b12      	ldr	r3, [pc, #72]	; (800d488 <prvHeapInit+0xb4>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	1ad2      	subs	r2, r2, r3
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d454:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <prvHeapInit+0xb4>)
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	4a0a      	ldr	r2, [pc, #40]	; (800d48c <prvHeapInit+0xb8>)
 800d462:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	4a09      	ldr	r2, [pc, #36]	; (800d490 <prvHeapInit+0xbc>)
 800d46a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d46c:	4b09      	ldr	r3, [pc, #36]	; (800d494 <prvHeapInit+0xc0>)
 800d46e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d472:	601a      	str	r2, [r3, #0]
}
 800d474:	bf00      	nop
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr
 800d480:	200016cc 	.word	0x200016cc
 800d484:	2000a2cc 	.word	0x2000a2cc
 800d488:	2000a2d4 	.word	0x2000a2d4
 800d48c:	2000a2dc 	.word	0x2000a2dc
 800d490:	2000a2d8 	.word	0x2000a2d8
 800d494:	2000a2e8 	.word	0x2000a2e8

0800d498 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d498:	b480      	push	{r7}
 800d49a:	b085      	sub	sp, #20
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d4a0:	4b28      	ldr	r3, [pc, #160]	; (800d544 <prvInsertBlockIntoFreeList+0xac>)
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e002      	b.n	800d4ac <prvInsertBlockIntoFreeList+0x14>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d8f7      	bhi.n	800d4a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	68ba      	ldr	r2, [r7, #8]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d108      	bne.n	800d4da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	685a      	ldr	r2, [r3, #4]
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	685b      	ldr	r3, [r3, #4]
 800d4d0:	441a      	add	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	441a      	add	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d118      	bne.n	800d520 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	4b15      	ldr	r3, [pc, #84]	; (800d548 <prvInsertBlockIntoFreeList+0xb0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d00d      	beq.n	800d516 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	441a      	add	r2, r3
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	601a      	str	r2, [r3, #0]
 800d514:	e008      	b.n	800d528 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d516:	4b0c      	ldr	r3, [pc, #48]	; (800d548 <prvInsertBlockIntoFreeList+0xb0>)
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	e003      	b.n	800d528 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d002      	beq.n	800d536 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d536:	bf00      	nop
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr
 800d542:	bf00      	nop
 800d544:	2000a2cc 	.word	0x2000a2cc
 800d548:	2000a2d4 	.word	0x2000a2d4

0800d54c <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b084      	sub	sp, #16
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	60fb      	str	r3, [r7, #12]

  if (msg->msg.common.errtfunc != NULL) {
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d007      	beq.n	800d570 <netifapi_do_netif_common+0x24>
    return msg->msg.common.errtfunc(msg->netif);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	68db      	ldr	r3, [r3, #12]
 800d564:	68fa      	ldr	r2, [r7, #12]
 800d566:	6852      	ldr	r2, [r2, #4]
 800d568:	4610      	mov	r0, r2
 800d56a:	4798      	blx	r3
 800d56c:	4603      	mov	r3, r0
 800d56e:	e006      	b.n	800d57e <netifapi_do_netif_common+0x32>
  } else {
    msg->msg.common.voidfunc(msg->netif);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	68fa      	ldr	r2, [r7, #12]
 800d576:	6852      	ldr	r2, [r2, #4]
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3
    return ERR_OK;
 800d57c:	2300      	movs	r3, #0
  }
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
	...

0800d588 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b08e      	sub	sp, #56	; 0x38
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	60f8      	str	r0, [r7, #12]
 800d590:	60b9      	str	r1, [r7, #8]
 800d592:	607a      	str	r2, [r7, #4]
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	61bb      	str	r3, [r7, #24]
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	61fb      	str	r3, [r7, #28]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	623b      	str	r3, [r7, #32]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 800d5a0:	f107 0314 	add.w	r3, r7, #20
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4806      	ldr	r0, [pc, #24]	; (800d5c0 <netifapi_netif_common+0x38>)
 800d5a8:	f000 f99a 	bl	800d8e0 <tcpip_api_call>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  NETIFAPI_VAR_FREE(msg);
  return err;
 800d5b2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3738      	adds	r7, #56	; 0x38
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0800d54d 	.word	0x0800d54d

0800d5c4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800d5ce:	f007 fd37 	bl	8015040 <sys_timeouts_sleeptime>
 800d5d2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5da:	d10b      	bne.n	800d5f4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800d5dc:	4813      	ldr	r0, [pc, #76]	; (800d62c <tcpip_timeouts_mbox_fetch+0x68>)
 800d5de:	f00c fe64 	bl	801a2aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f00c fdd8 	bl	801a19c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800d5ec:	480f      	ldr	r0, [pc, #60]	; (800d62c <tcpip_timeouts_mbox_fetch+0x68>)
 800d5ee:	f00c fe4d 	bl	801a28c <sys_mutex_lock>
    return;
 800d5f2:	e018      	b.n	800d626 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d102      	bne.n	800d600 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800d5fa:	f007 fce7 	bl	8014fcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d5fe:	e7e6      	b.n	800d5ce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800d600:	480a      	ldr	r0, [pc, #40]	; (800d62c <tcpip_timeouts_mbox_fetch+0x68>)
 800d602:	f00c fe52 	bl	801a2aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	6839      	ldr	r1, [r7, #0]
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f00c fdc6 	bl	801a19c <sys_arch_mbox_fetch>
 800d610:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800d612:	4806      	ldr	r0, [pc, #24]	; (800d62c <tcpip_timeouts_mbox_fetch+0x68>)
 800d614:	f00c fe3a 	bl	801a28c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61e:	d102      	bne.n	800d626 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800d620:	f007 fcd4 	bl	8014fcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800d624:	e7d3      	b.n	800d5ce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	2000a2f8 	.word	0x2000a2f8

0800d630 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800d638:	4810      	ldr	r0, [pc, #64]	; (800d67c <tcpip_thread+0x4c>)
 800d63a:	f00c fe27 	bl	801a28c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800d63e:	4b10      	ldr	r3, [pc, #64]	; (800d680 <tcpip_thread+0x50>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d005      	beq.n	800d652 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800d646:	4b0e      	ldr	r3, [pc, #56]	; (800d680 <tcpip_thread+0x50>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a0e      	ldr	r2, [pc, #56]	; (800d684 <tcpip_thread+0x54>)
 800d64c:	6812      	ldr	r2, [r2, #0]
 800d64e:	4610      	mov	r0, r2
 800d650:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d652:	f107 030c 	add.w	r3, r7, #12
 800d656:	4619      	mov	r1, r3
 800d658:	480b      	ldr	r0, [pc, #44]	; (800d688 <tcpip_thread+0x58>)
 800d65a:	f7ff ffb3 	bl	800d5c4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d106      	bne.n	800d672 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d664:	4b09      	ldr	r3, [pc, #36]	; (800d68c <tcpip_thread+0x5c>)
 800d666:	2291      	movs	r2, #145	; 0x91
 800d668:	4909      	ldr	r1, [pc, #36]	; (800d690 <tcpip_thread+0x60>)
 800d66a:	480a      	ldr	r0, [pc, #40]	; (800d694 <tcpip_thread+0x64>)
 800d66c:	f00d fd12 	bl	801b094 <iprintf>
      continue;
 800d670:	e003      	b.n	800d67a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	4618      	mov	r0, r3
 800d676:	f000 f80f 	bl	800d698 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800d67a:	e7ea      	b.n	800d652 <tcpip_thread+0x22>
 800d67c:	2000a2f8 	.word	0x2000a2f8
 800d680:	2000a2ec 	.word	0x2000a2ec
 800d684:	2000a2f0 	.word	0x2000a2f0
 800d688:	2000a2f4 	.word	0x2000a2f4
 800d68c:	0801daf8 	.word	0x0801daf8
 800d690:	0801db28 	.word	0x0801db28
 800d694:	0801db48 	.word	0x0801db48

0800d698 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d026      	beq.n	800d6f6 <tcpip_thread_handle_msg+0x5e>
 800d6a8:	2b02      	cmp	r3, #2
 800d6aa:	dc2b      	bgt.n	800d704 <tcpip_thread_handle_msg+0x6c>
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <tcpip_thread_handle_msg+0x1e>
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d015      	beq.n	800d6e0 <tcpip_thread_handle_msg+0x48>
 800d6b4:	e026      	b.n	800d704 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	687a      	ldr	r2, [r7, #4]
 800d6bc:	6850      	ldr	r0, [r2, #4]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	6892      	ldr	r2, [r2, #8]
 800d6c2:	4611      	mov	r1, r2
 800d6c4:	4798      	blx	r3
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d004      	beq.n	800d6d6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f001 fe89 	bl	800f3e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d6d6:	6879      	ldr	r1, [r7, #4]
 800d6d8:	2009      	movs	r0, #9
 800d6da:	f000 ffe3 	bl	800e6a4 <memp_free>
      break;
 800d6de:	e018      	b.n	800d712 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	687a      	ldr	r2, [r7, #4]
 800d6e6:	6892      	ldr	r2, [r2, #8]
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800d6ec:	6879      	ldr	r1, [r7, #4]
 800d6ee:	2008      	movs	r0, #8
 800d6f0:	f000 ffd8 	bl	800e6a4 <memp_free>
      break;
 800d6f4:	e00d      	b.n	800d712 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	6892      	ldr	r2, [r2, #8]
 800d6fe:	4610      	mov	r0, r2
 800d700:	4798      	blx	r3
      break;
 800d702:	e006      	b.n	800d712 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800d704:	4b05      	ldr	r3, [pc, #20]	; (800d71c <tcpip_thread_handle_msg+0x84>)
 800d706:	22cf      	movs	r2, #207	; 0xcf
 800d708:	4905      	ldr	r1, [pc, #20]	; (800d720 <tcpip_thread_handle_msg+0x88>)
 800d70a:	4806      	ldr	r0, [pc, #24]	; (800d724 <tcpip_thread_handle_msg+0x8c>)
 800d70c:	f00d fcc2 	bl	801b094 <iprintf>
      break;
 800d710:	bf00      	nop
  }
}
 800d712:	bf00      	nop
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	0801daf8 	.word	0x0801daf8
 800d720:	0801db28 	.word	0x0801db28
 800d724:	0801db48 	.word	0x0801db48

0800d728 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d734:	481a      	ldr	r0, [pc, #104]	; (800d7a0 <tcpip_inpkt+0x78>)
 800d736:	f00c fd70 	bl	801a21a <sys_mbox_valid>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d105      	bne.n	800d74c <tcpip_inpkt+0x24>
 800d740:	4b18      	ldr	r3, [pc, #96]	; (800d7a4 <tcpip_inpkt+0x7c>)
 800d742:	22fc      	movs	r2, #252	; 0xfc
 800d744:	4918      	ldr	r1, [pc, #96]	; (800d7a8 <tcpip_inpkt+0x80>)
 800d746:	4819      	ldr	r0, [pc, #100]	; (800d7ac <tcpip_inpkt+0x84>)
 800d748:	f00d fca4 	bl	801b094 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800d74c:	2009      	movs	r0, #9
 800d74e:	f000 ff57 	bl	800e600 <memp_malloc>
 800d752:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800d75a:	f04f 33ff 	mov.w	r3, #4294967295
 800d75e:	e01a      	b.n	800d796 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2200      	movs	r2, #0
 800d764:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	687a      	ldr	r2, [r7, #4]
 800d776:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d778:	6979      	ldr	r1, [r7, #20]
 800d77a:	4809      	ldr	r0, [pc, #36]	; (800d7a0 <tcpip_inpkt+0x78>)
 800d77c:	f00c fcf4 	bl	801a168 <sys_mbox_trypost>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d006      	beq.n	800d794 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800d786:	6979      	ldr	r1, [r7, #20]
 800d788:	2009      	movs	r0, #9
 800d78a:	f000 ff8b 	bl	800e6a4 <memp_free>
    return ERR_MEM;
 800d78e:	f04f 33ff 	mov.w	r3, #4294967295
 800d792:	e000      	b.n	800d796 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800d794:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800d796:	4618      	mov	r0, r3
 800d798:	3718      	adds	r7, #24
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	2000a2f4 	.word	0x2000a2f4
 800d7a4:	0801daf8 	.word	0x0801daf8
 800d7a8:	0801db70 	.word	0x0801db70
 800d7ac:	0801db48 	.word	0x0801db48

0800d7b0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d7c0:	f003 0318 	and.w	r3, r3, #24
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d006      	beq.n	800d7d6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800d7c8:	4a08      	ldr	r2, [pc, #32]	; (800d7ec <tcpip_input+0x3c>)
 800d7ca:	6839      	ldr	r1, [r7, #0]
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff ffab 	bl	800d728 <tcpip_inpkt>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	e005      	b.n	800d7e2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800d7d6:	4a06      	ldr	r2, [pc, #24]	; (800d7f0 <tcpip_input+0x40>)
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff ffa4 	bl	800d728 <tcpip_inpkt>
 800d7e0:	4603      	mov	r3, r0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3708      	adds	r7, #8
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	08019f55 	.word	0x08019f55
 800d7f0:	08018d1d 	.word	0x08018d1d

0800d7f4 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
 tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b084      	sub	sp, #16
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d7fe:	4814      	ldr	r0, [pc, #80]	; (800d850 <tcpip_callback+0x5c>)
 800d800:	f00c fd0b 	bl	801a21a <sys_mbox_valid>
 800d804:	4603      	mov	r3, r0
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <tcpip_callback+0x24>
 800d80a:	4b12      	ldr	r3, [pc, #72]	; (800d854 <tcpip_callback+0x60>)
 800d80c:	f240 1239 	movw	r2, #313	; 0x139
 800d810:	4911      	ldr	r1, [pc, #68]	; (800d858 <tcpip_callback+0x64>)
 800d812:	4812      	ldr	r0, [pc, #72]	; (800d85c <tcpip_callback+0x68>)
 800d814:	f00d fc3e 	bl	801b094 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d818:	2008      	movs	r0, #8
 800d81a:	f000 fef1 	bl	800e600 <memp_malloc>
 800d81e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d102      	bne.n	800d82c <tcpip_callback+0x38>
    return ERR_MEM;
 800d826:	f04f 33ff 	mov.w	r3, #4294967295
 800d82a:	e00d      	b.n	800d848 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2201      	movs	r2, #1
 800d830:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	683a      	ldr	r2, [r7, #0]
 800d83c:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800d83e:	68f9      	ldr	r1, [r7, #12]
 800d840:	4803      	ldr	r0, [pc, #12]	; (800d850 <tcpip_callback+0x5c>)
 800d842:	f00c fc7b 	bl	801a13c <sys_mbox_post>
  return ERR_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	2000a2f4 	.word	0x2000a2f4
 800d854:	0801daf8 	.word	0x0801daf8
 800d858:	0801db70 	.word	0x0801db70
 800d85c:	0801db48 	.word	0x0801db48

0800d860 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800d86a:	4819      	ldr	r0, [pc, #100]	; (800d8d0 <tcpip_try_callback+0x70>)
 800d86c:	f00c fcd5 	bl	801a21a <sys_mbox_valid>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d106      	bne.n	800d884 <tcpip_try_callback+0x24>
 800d876:	4b17      	ldr	r3, [pc, #92]	; (800d8d4 <tcpip_try_callback+0x74>)
 800d878:	f240 125d 	movw	r2, #349	; 0x15d
 800d87c:	4916      	ldr	r1, [pc, #88]	; (800d8d8 <tcpip_try_callback+0x78>)
 800d87e:	4817      	ldr	r0, [pc, #92]	; (800d8dc <tcpip_try_callback+0x7c>)
 800d880:	f00d fc08 	bl	801b094 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800d884:	2008      	movs	r0, #8
 800d886:	f000 febb 	bl	800e600 <memp_malloc>
 800d88a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d102      	bne.n	800d898 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800d892:	f04f 33ff 	mov.w	r3, #4294967295
 800d896:	e017      	b.n	800d8c8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	2201      	movs	r2, #1
 800d89c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	683a      	ldr	r2, [r7, #0]
 800d8a8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800d8aa:	68f9      	ldr	r1, [r7, #12]
 800d8ac:	4808      	ldr	r0, [pc, #32]	; (800d8d0 <tcpip_try_callback+0x70>)
 800d8ae:	f00c fc5b 	bl	801a168 <sys_mbox_trypost>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d006      	beq.n	800d8c6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800d8b8:	68f9      	ldr	r1, [r7, #12]
 800d8ba:	2008      	movs	r0, #8
 800d8bc:	f000 fef2 	bl	800e6a4 <memp_free>
    return ERR_MEM;
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c4:	e000      	b.n	800d8c8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	2000a2f4 	.word	0x2000a2f4
 800d8d4:	0801daf8 	.word	0x0801daf8
 800d8d8:	0801db70 	.word	0x0801db70
 800d8dc:	0801db48 	.word	0x0801db48

0800d8e0 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800d8ea:	4808      	ldr	r0, [pc, #32]	; (800d90c <tcpip_api_call+0x2c>)
 800d8ec:	f00c fcce 	bl	801a28c <sys_mutex_lock>
  err = fn(call);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6838      	ldr	r0, [r7, #0]
 800d8f4:	4798      	blx	r3
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73fb      	strb	r3, [r7, #15]
  UNLOCK_TCPIP_CORE();
 800d8fa:	4804      	ldr	r0, [pc, #16]	; (800d90c <tcpip_api_call+0x2c>)
 800d8fc:	f00c fcd5 	bl	801a2aa <sys_mutex_unlock>
  return err;
 800d900:	f997 300f 	ldrsb.w	r3, [r7, #15]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}
 800d90c:	2000a2f8 	.word	0x2000a2f8

0800d910 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af02      	add	r7, sp, #8
 800d916:	6078      	str	r0, [r7, #4]
 800d918:	6039      	str	r1, [r7, #0]
  lwip_init();
 800d91a:	f000 f9ea 	bl	800dcf2 <lwip_init>

  tcpip_init_done = initfunc;
 800d91e:	4a17      	ldr	r2, [pc, #92]	; (800d97c <tcpip_init+0x6c>)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800d924:	4a16      	ldr	r2, [pc, #88]	; (800d980 <tcpip_init+0x70>)
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800d92a:	210a      	movs	r1, #10
 800d92c:	4815      	ldr	r0, [pc, #84]	; (800d984 <tcpip_init+0x74>)
 800d92e:	f00c fbe7 	bl	801a100 <sys_mbox_new>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d006      	beq.n	800d946 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800d938:	4b13      	ldr	r3, [pc, #76]	; (800d988 <tcpip_init+0x78>)
 800d93a:	f240 2261 	movw	r2, #609	; 0x261
 800d93e:	4913      	ldr	r1, [pc, #76]	; (800d98c <tcpip_init+0x7c>)
 800d940:	4813      	ldr	r0, [pc, #76]	; (800d990 <tcpip_init+0x80>)
 800d942:	f00d fba7 	bl	801b094 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800d946:	4813      	ldr	r0, [pc, #76]	; (800d994 <tcpip_init+0x84>)
 800d948:	f00c fc86 	bl	801a258 <sys_mutex_new>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d006      	beq.n	800d960 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800d952:	4b0d      	ldr	r3, [pc, #52]	; (800d988 <tcpip_init+0x78>)
 800d954:	f240 2265 	movw	r2, #613	; 0x265
 800d958:	490f      	ldr	r1, [pc, #60]	; (800d998 <tcpip_init+0x88>)
 800d95a:	480d      	ldr	r0, [pc, #52]	; (800d990 <tcpip_init+0x80>)
 800d95c:	f00d fb9a 	bl	801b094 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800d960:	f04f 33ff 	mov.w	r3, #4294967295
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d96a:	2200      	movs	r2, #0
 800d96c:	490b      	ldr	r1, [pc, #44]	; (800d99c <tcpip_init+0x8c>)
 800d96e:	480c      	ldr	r0, [pc, #48]	; (800d9a0 <tcpip_init+0x90>)
 800d970:	f00c fca8 	bl	801a2c4 <sys_thread_new>
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	2000a2ec 	.word	0x2000a2ec
 800d980:	2000a2f0 	.word	0x2000a2f0
 800d984:	2000a2f4 	.word	0x2000a2f4
 800d988:	0801daf8 	.word	0x0801daf8
 800d98c:	0801db80 	.word	0x0801db80
 800d990:	0801db48 	.word	0x0801db48
 800d994:	2000a2f8 	.word	0x2000a2f8
 800d998:	0801dba4 	.word	0x0801dba4
 800d99c:	0800d631 	.word	0x0800d631
 800d9a0:	0801dbc8 	.word	0x0801dbc8

0800d9a4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b083      	sub	sp, #12
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d9ae:	88fb      	ldrh	r3, [r7, #6]
 800d9b0:	021b      	lsls	r3, r3, #8
 800d9b2:	b21a      	sxth	r2, r3
 800d9b4:	88fb      	ldrh	r3, [r7, #6]
 800d9b6:	0a1b      	lsrs	r3, r3, #8
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	b21b      	sxth	r3, r3
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	b21b      	sxth	r3, r3
 800d9c0:	b29b      	uxth	r3, r3
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9cc:	4770      	bx	lr

0800d9ce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b083      	sub	sp, #12
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	061a      	lsls	r2, r3, #24
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	021b      	lsls	r3, r3, #8
 800d9de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	0a1b      	lsrs	r3, r3, #8
 800d9e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	0e1b      	lsrs	r3, r3, #24
 800d9f2:	4313      	orrs	r3, r2
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800da00:	b480      	push	{r7}
 800da02:	b089      	sub	sp, #36	; 0x24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800da0e:	2300      	movs	r3, #0
 800da10:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	f003 0301 	and.w	r3, r3, #1
 800da1c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d00d      	beq.n	800da40 <lwip_standard_chksum+0x40>
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	dd0a      	ble.n	800da40 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800da2a:	69fa      	ldr	r2, [r7, #28]
 800da2c:	1c53      	adds	r3, r2, #1
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	f107 030e 	add.w	r3, r7, #14
 800da34:	3301      	adds	r3, #1
 800da36:	7812      	ldrb	r2, [r2, #0]
 800da38:	701a      	strb	r2, [r3, #0]
    len--;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	3b01      	subs	r3, #1
 800da3e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800da44:	e00a      	b.n	800da5c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	1c9a      	adds	r2, r3, #2
 800da4a:	61ba      	str	r2, [r7, #24]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	461a      	mov	r2, r3
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	4413      	add	r3, r2
 800da54:	617b      	str	r3, [r7, #20]
    len -= 2;
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	3b02      	subs	r3, #2
 800da5a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	dcf1      	bgt.n	800da46 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	dd04      	ble.n	800da72 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800da68:	f107 030e 	add.w	r3, r7, #14
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	7812      	ldrb	r2, [r2, #0]
 800da70:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800da72:	89fb      	ldrh	r3, [r7, #14]
 800da74:	461a      	mov	r2, r3
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	4413      	add	r3, r2
 800da7a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	0c1a      	lsrs	r2, r3, #16
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	b29b      	uxth	r3, r3
 800da84:	4413      	add	r3, r2
 800da86:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	0c1a      	lsrs	r2, r3, #16
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	b29b      	uxth	r3, r3
 800da90:	4413      	add	r3, r2
 800da92:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d007      	beq.n	800daaa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	021b      	lsls	r3, r3, #8
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	0a1b      	lsrs	r3, r3, #8
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	4313      	orrs	r3, r2
 800daa8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	b29b      	uxth	r3, r3
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3724      	adds	r7, #36	; 0x24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b086      	sub	sp, #24
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	607b      	str	r3, [r7, #4]
 800dac4:	460b      	mov	r3, r1
 800dac6:	72fb      	strb	r3, [r7, #11]
 800dac8:	4613      	mov	r3, r2
 800daca:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800dacc:	2300      	movs	r3, #0
 800dace:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	e02b      	b.n	800db2e <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	895b      	ldrh	r3, [r3, #10]
 800dade:	4619      	mov	r1, r3
 800dae0:	4610      	mov	r0, r2
 800dae2:	f7ff ff8d 	bl	800da00 <lwip_standard_chksum>
 800dae6:	4603      	mov	r3, r0
 800dae8:	461a      	mov	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4413      	add	r3, r2
 800daee:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	0c1a      	lsrs	r2, r3, #16
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	4413      	add	r3, r2
 800dafa:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	895b      	ldrh	r3, [r3, #10]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	b29b      	uxth	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00e      	beq.n	800db28 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bf0c      	ite	eq
 800db10:	2301      	moveq	r3, #1
 800db12:	2300      	movne	r3, #0
 800db14:	b2db      	uxtb	r3, r3
 800db16:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	021b      	lsls	r3, r3, #8
 800db1c:	b29a      	uxth	r2, r3
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	0a1b      	lsrs	r3, r3, #8
 800db22:	b2db      	uxtb	r3, r3
 800db24:	4313      	orrs	r3, r2
 800db26:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	617b      	str	r3, [r7, #20]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1d0      	bne.n	800dad6 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d007      	beq.n	800db4a <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	021b      	lsls	r3, r3, #8
 800db3e:	b29a      	uxth	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	0a1b      	lsrs	r3, r3, #8
 800db44:	b2db      	uxtb	r3, r3
 800db46:	4313      	orrs	r3, r2
 800db48:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800db4a:	7afb      	ldrb	r3, [r7, #11]
 800db4c:	b29b      	uxth	r3, r3
 800db4e:	4618      	mov	r0, r3
 800db50:	f7ff ff28 	bl	800d9a4 <lwip_htons>
 800db54:	4603      	mov	r3, r0
 800db56:	461a      	mov	r2, r3
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4413      	add	r3, r2
 800db5c:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800db5e:	893b      	ldrh	r3, [r7, #8]
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff ff1f 	bl	800d9a4 <lwip_htons>
 800db66:	4603      	mov	r3, r0
 800db68:	461a      	mov	r2, r3
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	4413      	add	r3, r2
 800db6e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	0c1a      	lsrs	r2, r3, #16
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	b29b      	uxth	r3, r3
 800db78:	4413      	add	r3, r2
 800db7a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	0c1a      	lsrs	r2, r3, #16
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	b29b      	uxth	r3, r3
 800db84:	4413      	add	r3, r2
 800db86:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	43db      	mvns	r3, r3
 800db8e:	b29b      	uxth	r3, r3
}
 800db90:	4618      	mov	r0, r3
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	607b      	str	r3, [r7, #4]
 800dba2:	460b      	mov	r3, r1
 800dba4:	72fb      	strb	r3, [r7, #11]
 800dba6:	4613      	mov	r3, r2
 800dba8:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	0c1b      	lsrs	r3, r3, #16
 800dbba:	693a      	ldr	r2, [r7, #16]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800dbc0:	6a3b      	ldr	r3, [r7, #32]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	4413      	add	r3, r2
 800dbce:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	0c1b      	lsrs	r3, r3, #16
 800dbd4:	693a      	ldr	r2, [r7, #16]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	0c1a      	lsrs	r2, r3, #16
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	0c1a      	lsrs	r2, r3, #16
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	4413      	add	r3, r2
 800dbf0:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800dbf2:	893a      	ldrh	r2, [r7, #8]
 800dbf4:	7af9      	ldrb	r1, [r7, #11]
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	68f8      	ldr	r0, [r7, #12]
 800dbfa:	f7ff ff5e 	bl	800daba <inet_cksum_pseudo_base>
 800dbfe:	4603      	mov	r3, r0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3718      	adds	r7, #24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	607b      	str	r3, [r7, #4]
 800dc12:	460b      	mov	r3, r1
 800dc14:	72fb      	strb	r3, [r7, #11]
 800dc16:	4613      	mov	r3, r2
 800dc18:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800dc1a:	893a      	ldrh	r2, [r7, #8]
 800dc1c:	7af9      	ldrb	r1, [r7, #11]
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f7ff ffb7 	bl	800db98 <inet_chksum_pseudo>
 800dc2a:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800dc40:	887b      	ldrh	r3, [r7, #2]
 800dc42:	4619      	mov	r1, r3
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f7ff fedb 	bl	800da00 <lwip_standard_chksum>
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	43db      	mvns	r3, r3
 800dc4e:	b29b      	uxth	r3, r3
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	613b      	str	r3, [r7, #16]
 800dc6c:	e02b      	b.n	800dcc6 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	895b      	ldrh	r3, [r3, #10]
 800dc76:	4619      	mov	r1, r3
 800dc78:	4610      	mov	r0, r2
 800dc7a:	f7ff fec1 	bl	800da00 <lwip_standard_chksum>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	461a      	mov	r2, r3
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	4413      	add	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	0c1a      	lsrs	r2, r3, #16
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4413      	add	r3, r2
 800dc92:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	895b      	ldrh	r3, [r3, #10]
 800dc98:	f003 0301 	and.w	r3, r3, #1
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00e      	beq.n	800dcc0 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bf0c      	ite	eq
 800dca8:	2301      	moveq	r3, #1
 800dcaa:	2300      	movne	r3, #0
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	021b      	lsls	r3, r3, #8
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	0a1b      	lsrs	r3, r3, #8
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	613b      	str	r3, [r7, #16]
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1d0      	bne.n	800dc6e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d007      	beq.n	800dce2 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800dcd2:	697b      	ldr	r3, [r7, #20]
 800dcd4:	021b      	lsls	r3, r3, #8
 800dcd6:	b29a      	uxth	r2, r3
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	0a1b      	lsrs	r3, r3, #8
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	4313      	orrs	r3, r2
 800dce0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800dce2:	697b      	ldr	r3, [r7, #20]
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	43db      	mvns	r3, r3
 800dce8:	b29b      	uxth	r3, r3
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3718      	adds	r7, #24
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}

0800dcf2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800dcf2:	b580      	push	{r7, lr}
 800dcf4:	b082      	sub	sp, #8
 800dcf6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800dcfc:	f00c fa9e 	bl	801a23c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800dd00:	f000 f8d4 	bl	800deac <mem_init>
  memp_init();
 800dd04:	f000 fc30 	bl	800e568 <memp_init>
  pbuf_init();
  netif_init();
 800dd08:	f000 fcf6 	bl	800e6f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800dd0c:	f007 f9d0 	bl	80150b0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800dd10:	f001 feac 	bl	800fa6c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800dd14:	f007 f912 	bl	8014f3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800dd18:	bf00      	nop
 800dd1a:	3708      	adds	r7, #8
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <ptr_to_mem+0x20>)
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	88fb      	ldrh	r3, [r7, #6]
 800dd30:	4413      	add	r3, r2
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	370c      	adds	r7, #12
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
 800dd3e:	bf00      	nop
 800dd40:	2000f328 	.word	0x2000f328

0800dd44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800dd4c:	4b05      	ldr	r3, [pc, #20]	; (800dd64 <mem_to_ptr+0x20>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	1ad3      	subs	r3, r2, r3
 800dd54:	b29b      	uxth	r3, r3
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	2000f328 	.word	0x2000f328

0800dd68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800dd70:	4b45      	ldr	r3, [pc, #276]	; (800de88 <plug_holes+0x120>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d206      	bcs.n	800dd88 <plug_holes+0x20>
 800dd7a:	4b44      	ldr	r3, [pc, #272]	; (800de8c <plug_holes+0x124>)
 800dd7c:	f240 12df 	movw	r2, #479	; 0x1df
 800dd80:	4943      	ldr	r1, [pc, #268]	; (800de90 <plug_holes+0x128>)
 800dd82:	4844      	ldr	r0, [pc, #272]	; (800de94 <plug_holes+0x12c>)
 800dd84:	f00d f986 	bl	801b094 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800dd88:	4b43      	ldr	r3, [pc, #268]	; (800de98 <plug_holes+0x130>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d306      	bcc.n	800dda0 <plug_holes+0x38>
 800dd92:	4b3e      	ldr	r3, [pc, #248]	; (800de8c <plug_holes+0x124>)
 800dd94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dd98:	4940      	ldr	r1, [pc, #256]	; (800de9c <plug_holes+0x134>)
 800dd9a:	483e      	ldr	r0, [pc, #248]	; (800de94 <plug_holes+0x12c>)
 800dd9c:	f00d f97a 	bl	801b094 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	791b      	ldrb	r3, [r3, #4]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d006      	beq.n	800ddb6 <plug_holes+0x4e>
 800dda8:	4b38      	ldr	r3, [pc, #224]	; (800de8c <plug_holes+0x124>)
 800ddaa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ddae:	493c      	ldr	r1, [pc, #240]	; (800dea0 <plug_holes+0x138>)
 800ddb0:	4838      	ldr	r0, [pc, #224]	; (800de94 <plug_holes+0x12c>)
 800ddb2:	f00d f96f 	bl	801b094 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	881b      	ldrh	r3, [r3, #0]
 800ddba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800ddbe:	d906      	bls.n	800ddce <plug_holes+0x66>
 800ddc0:	4b32      	ldr	r3, [pc, #200]	; (800de8c <plug_holes+0x124>)
 800ddc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ddc6:	4937      	ldr	r1, [pc, #220]	; (800dea4 <plug_holes+0x13c>)
 800ddc8:	4832      	ldr	r0, [pc, #200]	; (800de94 <plug_holes+0x12c>)
 800ddca:	f00d f963 	bl	801b094 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7ff ffa4 	bl	800dd20 <ptr_to_mem>
 800ddd8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d024      	beq.n	800de2c <plug_holes+0xc4>
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	791b      	ldrb	r3, [r3, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d120      	bne.n	800de2c <plug_holes+0xc4>
 800ddea:	4b2b      	ldr	r3, [pc, #172]	; (800de98 <plug_holes+0x130>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68fa      	ldr	r2, [r7, #12]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d01b      	beq.n	800de2c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ddf4:	4b2c      	ldr	r3, [pc, #176]	; (800dea8 <plug_holes+0x140>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68fa      	ldr	r2, [r7, #12]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d102      	bne.n	800de04 <plug_holes+0x9c>
      lfree = mem;
 800ddfe:	4a2a      	ldr	r2, [pc, #168]	; (800dea8 <plug_holes+0x140>)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	881a      	ldrh	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de14:	d00a      	beq.n	800de2c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff ff80 	bl	800dd20 <ptr_to_mem>
 800de20:	4604      	mov	r4, r0
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f7ff ff8e 	bl	800dd44 <mem_to_ptr>
 800de28:	4603      	mov	r3, r0
 800de2a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	885b      	ldrh	r3, [r3, #2]
 800de30:	4618      	mov	r0, r3
 800de32:	f7ff ff75 	bl	800dd20 <ptr_to_mem>
 800de36:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d01f      	beq.n	800de80 <plug_holes+0x118>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	791b      	ldrb	r3, [r3, #4]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11b      	bne.n	800de80 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800de48:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <plug_holes+0x140>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d102      	bne.n	800de58 <plug_holes+0xf0>
      lfree = pmem;
 800de52:	4a15      	ldr	r2, [pc, #84]	; (800dea8 <plug_holes+0x140>)
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	881a      	ldrh	r2, [r3, #0]
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	881b      	ldrh	r3, [r3, #0]
 800de64:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800de68:	d00a      	beq.n	800de80 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff ff56 	bl	800dd20 <ptr_to_mem>
 800de74:	4604      	mov	r4, r0
 800de76:	68b8      	ldr	r0, [r7, #8]
 800de78:	f7ff ff64 	bl	800dd44 <mem_to_ptr>
 800de7c:	4603      	mov	r3, r0
 800de7e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800de80:	bf00      	nop
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	bd90      	pop	{r4, r7, pc}
 800de88:	2000f328 	.word	0x2000f328
 800de8c:	0801dbd0 	.word	0x0801dbd0
 800de90:	0801dc00 	.word	0x0801dc00
 800de94:	0801dc18 	.word	0x0801dc18
 800de98:	2000f32c 	.word	0x2000f32c
 800de9c:	0801dc40 	.word	0x0801dc40
 800dea0:	0801dc5c 	.word	0x0801dc5c
 800dea4:	0801dc78 	.word	0x0801dc78
 800dea8:	2000f334 	.word	0x2000f334

0800deac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800deb2:	4b1f      	ldr	r3, [pc, #124]	; (800df30 <mem_init+0x84>)
 800deb4:	3303      	adds	r3, #3
 800deb6:	f023 0303 	bic.w	r3, r3, #3
 800deba:	461a      	mov	r2, r3
 800debc:	4b1d      	ldr	r3, [pc, #116]	; (800df34 <mem_init+0x88>)
 800debe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800dec0:	4b1c      	ldr	r3, [pc, #112]	; (800df34 <mem_init+0x88>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800decc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	2200      	movs	r2, #0
 800ded8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800deda:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 800dede:	f7ff ff1f 	bl	800dd20 <ptr_to_mem>
 800dee2:	4603      	mov	r3, r0
 800dee4:	4a14      	ldr	r2, [pc, #80]	; (800df38 <mem_init+0x8c>)
 800dee6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800dee8:	4b13      	ldr	r3, [pc, #76]	; (800df38 <mem_init+0x8c>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2201      	movs	r2, #1
 800deee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800def0:	4b11      	ldr	r3, [pc, #68]	; (800df38 <mem_init+0x8c>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800def8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800defa:	4b0f      	ldr	r3, [pc, #60]	; (800df38 <mem_init+0x8c>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 800df02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800df04:	4b0b      	ldr	r3, [pc, #44]	; (800df34 <mem_init+0x88>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a0c      	ldr	r2, [pc, #48]	; (800df3c <mem_init+0x90>)
 800df0a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800df0c:	480c      	ldr	r0, [pc, #48]	; (800df40 <mem_init+0x94>)
 800df0e:	f00c f9a3 	bl	801a258 <sys_mutex_new>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d006      	beq.n	800df26 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800df18:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <mem_init+0x98>)
 800df1a:	f240 221f 	movw	r2, #543	; 0x21f
 800df1e:	490a      	ldr	r1, [pc, #40]	; (800df48 <mem_init+0x9c>)
 800df20:	480a      	ldr	r0, [pc, #40]	; (800df4c <mem_init+0xa0>)
 800df22:	f00d f8b7 	bl	801b094 <iprintf>
  }
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	2000a314 	.word	0x2000a314
 800df34:	2000f328 	.word	0x2000f328
 800df38:	2000f32c 	.word	0x2000f32c
 800df3c:	2000f334 	.word	0x2000f334
 800df40:	2000f330 	.word	0x2000f330
 800df44:	0801dbd0 	.word	0x0801dbd0
 800df48:	0801dca4 	.word	0x0801dca4
 800df4c:	0801dc18 	.word	0x0801dc18

0800df50 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f7ff fef3 	bl	800dd44 <mem_to_ptr>
 800df5e:	4603      	mov	r3, r0
 800df60:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff feda 	bl	800dd20 <ptr_to_mem>
 800df6c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	885b      	ldrh	r3, [r3, #2]
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fed4 	bl	800dd20 <ptr_to_mem>
 800df78:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df82:	d818      	bhi.n	800dfb6 <mem_link_valid+0x66>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	885b      	ldrh	r3, [r3, #2]
 800df88:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800df8c:	d813      	bhi.n	800dfb6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800df92:	8afa      	ldrh	r2, [r7, #22]
 800df94:	429a      	cmp	r2, r3
 800df96:	d004      	beq.n	800dfa2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	8afa      	ldrh	r2, [r7, #22]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d109      	bne.n	800dfb6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dfa2:	4b08      	ldr	r3, [pc, #32]	; (800dfc4 <mem_link_valid+0x74>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dfa6:	693a      	ldr	r2, [r7, #16]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d006      	beq.n	800dfba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	885b      	ldrh	r3, [r3, #2]
 800dfb0:	8afa      	ldrh	r2, [r7, #22]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d001      	beq.n	800dfba <mem_link_valid+0x6a>
    return 0;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e000      	b.n	800dfbc <mem_link_valid+0x6c>
  }
  return 1;
 800dfba:	2301      	movs	r3, #1
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3718      	adds	r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	2000f32c 	.word	0x2000f32c

0800dfc8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b088      	sub	sp, #32
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d070      	beq.n	800e0b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f003 0303 	and.w	r3, r3, #3
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00d      	beq.n	800dffc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dfe0:	4b37      	ldr	r3, [pc, #220]	; (800e0c0 <mem_free+0xf8>)
 800dfe2:	f240 2273 	movw	r2, #627	; 0x273
 800dfe6:	4937      	ldr	r1, [pc, #220]	; (800e0c4 <mem_free+0xfc>)
 800dfe8:	4837      	ldr	r0, [pc, #220]	; (800e0c8 <mem_free+0x100>)
 800dfea:	f00d f853 	bl	801b094 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dfee:	f00c f987 	bl	801a300 <sys_arch_protect>
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f00c f991 	bl	801a31c <sys_arch_unprotect>
    return;
 800dffa:	e05e      	b.n	800e0ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3b08      	subs	r3, #8
 800e000:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e002:	4b32      	ldr	r3, [pc, #200]	; (800e0cc <mem_free+0x104>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	69fa      	ldr	r2, [r7, #28]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d306      	bcc.n	800e01a <mem_free+0x52>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f103 020c 	add.w	r2, r3, #12
 800e012:	4b2f      	ldr	r3, [pc, #188]	; (800e0d0 <mem_free+0x108>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	429a      	cmp	r2, r3
 800e018:	d90d      	bls.n	800e036 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e01a:	4b29      	ldr	r3, [pc, #164]	; (800e0c0 <mem_free+0xf8>)
 800e01c:	f240 227f 	movw	r2, #639	; 0x27f
 800e020:	492c      	ldr	r1, [pc, #176]	; (800e0d4 <mem_free+0x10c>)
 800e022:	4829      	ldr	r0, [pc, #164]	; (800e0c8 <mem_free+0x100>)
 800e024:	f00d f836 	bl	801b094 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e028:	f00c f96a 	bl	801a300 <sys_arch_protect>
 800e02c:	6138      	str	r0, [r7, #16]
 800e02e:	6938      	ldr	r0, [r7, #16]
 800e030:	f00c f974 	bl	801a31c <sys_arch_unprotect>
    return;
 800e034:	e041      	b.n	800e0ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e036:	4828      	ldr	r0, [pc, #160]	; (800e0d8 <mem_free+0x110>)
 800e038:	f00c f928 	bl	801a28c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	791b      	ldrb	r3, [r3, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d110      	bne.n	800e066 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e044:	4b1e      	ldr	r3, [pc, #120]	; (800e0c0 <mem_free+0xf8>)
 800e046:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e04a:	4924      	ldr	r1, [pc, #144]	; (800e0dc <mem_free+0x114>)
 800e04c:	481e      	ldr	r0, [pc, #120]	; (800e0c8 <mem_free+0x100>)
 800e04e:	f00d f821 	bl	801b094 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e052:	4821      	ldr	r0, [pc, #132]	; (800e0d8 <mem_free+0x110>)
 800e054:	f00c f929 	bl	801a2aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e058:	f00c f952 	bl	801a300 <sys_arch_protect>
 800e05c:	6178      	str	r0, [r7, #20]
 800e05e:	6978      	ldr	r0, [r7, #20]
 800e060:	f00c f95c 	bl	801a31c <sys_arch_unprotect>
    return;
 800e064:	e029      	b.n	800e0ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e066:	69f8      	ldr	r0, [r7, #28]
 800e068:	f7ff ff72 	bl	800df50 <mem_link_valid>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d110      	bne.n	800e094 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e072:	4b13      	ldr	r3, [pc, #76]	; (800e0c0 <mem_free+0xf8>)
 800e074:	f240 2295 	movw	r2, #661	; 0x295
 800e078:	4919      	ldr	r1, [pc, #100]	; (800e0e0 <mem_free+0x118>)
 800e07a:	4813      	ldr	r0, [pc, #76]	; (800e0c8 <mem_free+0x100>)
 800e07c:	f00d f80a 	bl	801b094 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e080:	4815      	ldr	r0, [pc, #84]	; (800e0d8 <mem_free+0x110>)
 800e082:	f00c f912 	bl	801a2aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e086:	f00c f93b 	bl	801a300 <sys_arch_protect>
 800e08a:	61b8      	str	r0, [r7, #24]
 800e08c:	69b8      	ldr	r0, [r7, #24]
 800e08e:	f00c f945 	bl	801a31c <sys_arch_unprotect>
    return;
 800e092:	e012      	b.n	800e0ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	2200      	movs	r2, #0
 800e098:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e09a:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <mem_free+0x11c>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d202      	bcs.n	800e0aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e0a4:	4a0f      	ldr	r2, [pc, #60]	; (800e0e4 <mem_free+0x11c>)
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e0aa:	69f8      	ldr	r0, [r7, #28]
 800e0ac:	f7ff fe5c 	bl	800dd68 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e0b0:	4809      	ldr	r0, [pc, #36]	; (800e0d8 <mem_free+0x110>)
 800e0b2:	f00c f8fa 	bl	801a2aa <sys_mutex_unlock>
 800e0b6:	e000      	b.n	800e0ba <mem_free+0xf2>
    return;
 800e0b8:	bf00      	nop
}
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}
 800e0c0:	0801dbd0 	.word	0x0801dbd0
 800e0c4:	0801dcc0 	.word	0x0801dcc0
 800e0c8:	0801dc18 	.word	0x0801dc18
 800e0cc:	2000f328 	.word	0x2000f328
 800e0d0:	2000f32c 	.word	0x2000f32c
 800e0d4:	0801dce4 	.word	0x0801dce4
 800e0d8:	2000f330 	.word	0x2000f330
 800e0dc:	0801dd00 	.word	0x0801dd00
 800e0e0:	0801dd28 	.word	0x0801dd28
 800e0e4:	2000f334 	.word	0x2000f334

0800e0e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e0f4:	887b      	ldrh	r3, [r7, #2]
 800e0f6:	3303      	adds	r3, #3
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f023 0303 	bic.w	r3, r3, #3
 800e0fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e100:	8bfb      	ldrh	r3, [r7, #30]
 800e102:	2b0b      	cmp	r3, #11
 800e104:	d801      	bhi.n	800e10a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e106:	230c      	movs	r3, #12
 800e108:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e10a:	8bfb      	ldrh	r3, [r7, #30]
 800e10c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e110:	d803      	bhi.n	800e11a <mem_trim+0x32>
 800e112:	8bfa      	ldrh	r2, [r7, #30]
 800e114:	887b      	ldrh	r3, [r7, #2]
 800e116:	429a      	cmp	r2, r3
 800e118:	d201      	bcs.n	800e11e <mem_trim+0x36>
    return NULL;
 800e11a:	2300      	movs	r3, #0
 800e11c:	e0d8      	b.n	800e2d0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e11e:	4b6e      	ldr	r3, [pc, #440]	; (800e2d8 <mem_trim+0x1f0>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	687a      	ldr	r2, [r7, #4]
 800e124:	429a      	cmp	r2, r3
 800e126:	d304      	bcc.n	800e132 <mem_trim+0x4a>
 800e128:	4b6c      	ldr	r3, [pc, #432]	; (800e2dc <mem_trim+0x1f4>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d306      	bcc.n	800e140 <mem_trim+0x58>
 800e132:	4b6b      	ldr	r3, [pc, #428]	; (800e2e0 <mem_trim+0x1f8>)
 800e134:	f240 22d1 	movw	r2, #721	; 0x2d1
 800e138:	496a      	ldr	r1, [pc, #424]	; (800e2e4 <mem_trim+0x1fc>)
 800e13a:	486b      	ldr	r0, [pc, #428]	; (800e2e8 <mem_trim+0x200>)
 800e13c:	f00c ffaa 	bl	801b094 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e140:	4b65      	ldr	r3, [pc, #404]	; (800e2d8 <mem_trim+0x1f0>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	429a      	cmp	r2, r3
 800e148:	d304      	bcc.n	800e154 <mem_trim+0x6c>
 800e14a:	4b64      	ldr	r3, [pc, #400]	; (800e2dc <mem_trim+0x1f4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	429a      	cmp	r2, r3
 800e152:	d307      	bcc.n	800e164 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e154:	f00c f8d4 	bl	801a300 <sys_arch_protect>
 800e158:	60b8      	str	r0, [r7, #8]
 800e15a:	68b8      	ldr	r0, [r7, #8]
 800e15c:	f00c f8de 	bl	801a31c <sys_arch_unprotect>
    return rmem;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	e0b5      	b.n	800e2d0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3b08      	subs	r3, #8
 800e168:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e16a:	69b8      	ldr	r0, [r7, #24]
 800e16c:	f7ff fdea 	bl	800dd44 <mem_to_ptr>
 800e170:	4603      	mov	r3, r0
 800e172:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e174:	69bb      	ldr	r3, [r7, #24]
 800e176:	881a      	ldrh	r2, [r3, #0]
 800e178:	8afb      	ldrh	r3, [r7, #22]
 800e17a:	1ad3      	subs	r3, r2, r3
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	3b08      	subs	r3, #8
 800e180:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e182:	8bfa      	ldrh	r2, [r7, #30]
 800e184:	8abb      	ldrh	r3, [r7, #20]
 800e186:	429a      	cmp	r2, r3
 800e188:	d906      	bls.n	800e198 <mem_trim+0xb0>
 800e18a:	4b55      	ldr	r3, [pc, #340]	; (800e2e0 <mem_trim+0x1f8>)
 800e18c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800e190:	4956      	ldr	r1, [pc, #344]	; (800e2ec <mem_trim+0x204>)
 800e192:	4855      	ldr	r0, [pc, #340]	; (800e2e8 <mem_trim+0x200>)
 800e194:	f00c ff7e 	bl	801b094 <iprintf>
  if (newsize > size) {
 800e198:	8bfa      	ldrh	r2, [r7, #30]
 800e19a:	8abb      	ldrh	r3, [r7, #20]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d901      	bls.n	800e1a4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	e095      	b.n	800e2d0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800e1a4:	8bfa      	ldrh	r2, [r7, #30]
 800e1a6:	8abb      	ldrh	r3, [r7, #20]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d101      	bne.n	800e1b0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	e08f      	b.n	800e2d0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e1b0:	484f      	ldr	r0, [pc, #316]	; (800e2f0 <mem_trim+0x208>)
 800e1b2:	f00c f86b 	bl	801a28c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7ff fdb0 	bl	800dd20 <ptr_to_mem>
 800e1c0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	791b      	ldrb	r3, [r3, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d13f      	bne.n	800e24a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e1ca:	69bb      	ldr	r3, [r7, #24]
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e1d2:	d106      	bne.n	800e1e2 <mem_trim+0xfa>
 800e1d4:	4b42      	ldr	r3, [pc, #264]	; (800e2e0 <mem_trim+0x1f8>)
 800e1d6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800e1da:	4946      	ldr	r1, [pc, #280]	; (800e2f4 <mem_trim+0x20c>)
 800e1dc:	4842      	ldr	r0, [pc, #264]	; (800e2e8 <mem_trim+0x200>)
 800e1de:	f00c ff59 	bl	801b094 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e1e8:	8afa      	ldrh	r2, [r7, #22]
 800e1ea:	8bfb      	ldrh	r3, [r7, #30]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	b29b      	uxth	r3, r3
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e1f4:	4b40      	ldr	r3, [pc, #256]	; (800e2f8 <mem_trim+0x210>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d106      	bne.n	800e20c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800e1fe:	89fb      	ldrh	r3, [r7, #14]
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fd8d 	bl	800dd20 <ptr_to_mem>
 800e206:	4603      	mov	r3, r0
 800e208:	4a3b      	ldr	r2, [pc, #236]	; (800e2f8 <mem_trim+0x210>)
 800e20a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e20c:	89fb      	ldrh	r3, [r7, #14]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fd86 	bl	800dd20 <ptr_to_mem>
 800e214:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	2200      	movs	r2, #0
 800e21a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	89ba      	ldrh	r2, [r7, #12]
 800e220:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	8afa      	ldrh	r2, [r7, #22]
 800e226:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e228:	69bb      	ldr	r3, [r7, #24]
 800e22a:	89fa      	ldrh	r2, [r7, #14]
 800e22c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	881b      	ldrh	r3, [r3, #0]
 800e232:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e236:	d047      	beq.n	800e2c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	881b      	ldrh	r3, [r3, #0]
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fd6f 	bl	800dd20 <ptr_to_mem>
 800e242:	4602      	mov	r2, r0
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	8053      	strh	r3, [r2, #2]
 800e248:	e03e      	b.n	800e2c8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e24a:	8bfb      	ldrh	r3, [r7, #30]
 800e24c:	f103 0214 	add.w	r2, r3, #20
 800e250:	8abb      	ldrh	r3, [r7, #20]
 800e252:	429a      	cmp	r2, r3
 800e254:	d838      	bhi.n	800e2c8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e256:	8afa      	ldrh	r2, [r7, #22]
 800e258:	8bfb      	ldrh	r3, [r7, #30]
 800e25a:	4413      	add	r3, r2
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	3308      	adds	r3, #8
 800e260:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e262:	69bb      	ldr	r3, [r7, #24]
 800e264:	881b      	ldrh	r3, [r3, #0]
 800e266:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e26a:	d106      	bne.n	800e27a <mem_trim+0x192>
 800e26c:	4b1c      	ldr	r3, [pc, #112]	; (800e2e0 <mem_trim+0x1f8>)
 800e26e:	f240 3216 	movw	r2, #790	; 0x316
 800e272:	4920      	ldr	r1, [pc, #128]	; (800e2f4 <mem_trim+0x20c>)
 800e274:	481c      	ldr	r0, [pc, #112]	; (800e2e8 <mem_trim+0x200>)
 800e276:	f00c ff0d 	bl	801b094 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e27a:	89fb      	ldrh	r3, [r7, #14]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7ff fd4f 	bl	800dd20 <ptr_to_mem>
 800e282:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e284:	4b1c      	ldr	r3, [pc, #112]	; (800e2f8 <mem_trim+0x210>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	693a      	ldr	r2, [r7, #16]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d202      	bcs.n	800e294 <mem_trim+0x1ac>
      lfree = mem2;
 800e28e:	4a1a      	ldr	r2, [pc, #104]	; (800e2f8 <mem_trim+0x210>)
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	2200      	movs	r2, #0
 800e298:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	881a      	ldrh	r2, [r3, #0]
 800e29e:	693b      	ldr	r3, [r7, #16]
 800e2a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	8afa      	ldrh	r2, [r7, #22]
 800e2a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e2a8:	69bb      	ldr	r3, [r7, #24]
 800e2aa:	89fa      	ldrh	r2, [r7, #14]
 800e2ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e2ae:	693b      	ldr	r3, [r7, #16]
 800e2b0:	881b      	ldrh	r3, [r3, #0]
 800e2b2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e2b6:	d007      	beq.n	800e2c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	881b      	ldrh	r3, [r3, #0]
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7ff fd2f 	bl	800dd20 <ptr_to_mem>
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	89fb      	ldrh	r3, [r7, #14]
 800e2c6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e2c8:	4809      	ldr	r0, [pc, #36]	; (800e2f0 <mem_trim+0x208>)
 800e2ca:	f00b ffee 	bl	801a2aa <sys_mutex_unlock>
  return rmem;
 800e2ce:	687b      	ldr	r3, [r7, #4]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3720      	adds	r7, #32
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	2000f328 	.word	0x2000f328
 800e2dc:	2000f32c 	.word	0x2000f32c
 800e2e0:	0801dbd0 	.word	0x0801dbd0
 800e2e4:	0801dd5c 	.word	0x0801dd5c
 800e2e8:	0801dc18 	.word	0x0801dc18
 800e2ec:	0801dd74 	.word	0x0801dd74
 800e2f0:	2000f330 	.word	0x2000f330
 800e2f4:	0801dd94 	.word	0x0801dd94
 800e2f8:	2000f334 	.word	0x2000f334

0800e2fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b088      	sub	sp, #32
 800e300:	af00      	add	r7, sp, #0
 800e302:	4603      	mov	r3, r0
 800e304:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e306:	88fb      	ldrh	r3, [r7, #6]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d101      	bne.n	800e310 <mem_malloc+0x14>
    return NULL;
 800e30c:	2300      	movs	r3, #0
 800e30e:	e0e2      	b.n	800e4d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e310:	88fb      	ldrh	r3, [r7, #6]
 800e312:	3303      	adds	r3, #3
 800e314:	b29b      	uxth	r3, r3
 800e316:	f023 0303 	bic.w	r3, r3, #3
 800e31a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e31c:	8bbb      	ldrh	r3, [r7, #28]
 800e31e:	2b0b      	cmp	r3, #11
 800e320:	d801      	bhi.n	800e326 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e322:	230c      	movs	r3, #12
 800e324:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e326:	8bbb      	ldrh	r3, [r7, #28]
 800e328:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e32c:	d803      	bhi.n	800e336 <mem_malloc+0x3a>
 800e32e:	8bba      	ldrh	r2, [r7, #28]
 800e330:	88fb      	ldrh	r3, [r7, #6]
 800e332:	429a      	cmp	r2, r3
 800e334:	d201      	bcs.n	800e33a <mem_malloc+0x3e>
    return NULL;
 800e336:	2300      	movs	r3, #0
 800e338:	e0cd      	b.n	800e4d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e33a:	4869      	ldr	r0, [pc, #420]	; (800e4e0 <mem_malloc+0x1e4>)
 800e33c:	f00b ffa6 	bl	801a28c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e340:	4b68      	ldr	r3, [pc, #416]	; (800e4e4 <mem_malloc+0x1e8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f7ff fcfd 	bl	800dd44 <mem_to_ptr>
 800e34a:	4603      	mov	r3, r0
 800e34c:	83fb      	strh	r3, [r7, #30]
 800e34e:	e0b7      	b.n	800e4c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e350:	8bfb      	ldrh	r3, [r7, #30]
 800e352:	4618      	mov	r0, r3
 800e354:	f7ff fce4 	bl	800dd20 <ptr_to_mem>
 800e358:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	791b      	ldrb	r3, [r3, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f040 80a7 	bne.w	800e4b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	881b      	ldrh	r3, [r3, #0]
 800e368:	461a      	mov	r2, r3
 800e36a:	8bfb      	ldrh	r3, [r7, #30]
 800e36c:	1ad3      	subs	r3, r2, r3
 800e36e:	f1a3 0208 	sub.w	r2, r3, #8
 800e372:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e374:	429a      	cmp	r2, r3
 800e376:	f0c0 809c 	bcc.w	800e4b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	881b      	ldrh	r3, [r3, #0]
 800e37e:	461a      	mov	r2, r3
 800e380:	8bfb      	ldrh	r3, [r7, #30]
 800e382:	1ad3      	subs	r3, r2, r3
 800e384:	f1a3 0208 	sub.w	r2, r3, #8
 800e388:	8bbb      	ldrh	r3, [r7, #28]
 800e38a:	3314      	adds	r3, #20
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d333      	bcc.n	800e3f8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e390:	8bfa      	ldrh	r2, [r7, #30]
 800e392:	8bbb      	ldrh	r3, [r7, #28]
 800e394:	4413      	add	r3, r2
 800e396:	b29b      	uxth	r3, r3
 800e398:	3308      	adds	r3, #8
 800e39a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e39c:	8a7b      	ldrh	r3, [r7, #18]
 800e39e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e3a2:	d106      	bne.n	800e3b2 <mem_malloc+0xb6>
 800e3a4:	4b50      	ldr	r3, [pc, #320]	; (800e4e8 <mem_malloc+0x1ec>)
 800e3a6:	f240 3287 	movw	r2, #903	; 0x387
 800e3aa:	4950      	ldr	r1, [pc, #320]	; (800e4ec <mem_malloc+0x1f0>)
 800e3ac:	4850      	ldr	r0, [pc, #320]	; (800e4f0 <mem_malloc+0x1f4>)
 800e3ae:	f00c fe71 	bl	801b094 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800e3b2:	8a7b      	ldrh	r3, [r7, #18]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7ff fcb3 	bl	800dd20 <ptr_to_mem>
 800e3ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	881a      	ldrh	r2, [r3, #0]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	8bfa      	ldrh	r2, [r7, #30]
 800e3ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	8a7a      	ldrh	r2, [r7, #18]
 800e3d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2201      	movs	r2, #1
 800e3da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	881b      	ldrh	r3, [r3, #0]
 800e3e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800e3e4:	d00b      	beq.n	800e3fe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7ff fc98 	bl	800dd20 <ptr_to_mem>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	8a7b      	ldrh	r3, [r7, #18]
 800e3f4:	8053      	strh	r3, [r2, #2]
 800e3f6:	e002      	b.n	800e3fe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e3fe:	4b39      	ldr	r3, [pc, #228]	; (800e4e4 <mem_malloc+0x1e8>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	429a      	cmp	r2, r3
 800e406:	d127      	bne.n	800e458 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e408:	4b36      	ldr	r3, [pc, #216]	; (800e4e4 <mem_malloc+0x1e8>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e40e:	e005      	b.n	800e41c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f7ff fc83 	bl	800dd20 <ptr_to_mem>
 800e41a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	791b      	ldrb	r3, [r3, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d004      	beq.n	800e42e <mem_malloc+0x132>
 800e424:	4b33      	ldr	r3, [pc, #204]	; (800e4f4 <mem_malloc+0x1f8>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d1f0      	bne.n	800e410 <mem_malloc+0x114>
          }
          lfree = cur;
 800e42e:	4a2d      	ldr	r2, [pc, #180]	; (800e4e4 <mem_malloc+0x1e8>)
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e434:	4b2b      	ldr	r3, [pc, #172]	; (800e4e4 <mem_malloc+0x1e8>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	4b2e      	ldr	r3, [pc, #184]	; (800e4f4 <mem_malloc+0x1f8>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d00b      	beq.n	800e458 <mem_malloc+0x15c>
 800e440:	4b28      	ldr	r3, [pc, #160]	; (800e4e4 <mem_malloc+0x1e8>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	791b      	ldrb	r3, [r3, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d006      	beq.n	800e458 <mem_malloc+0x15c>
 800e44a:	4b27      	ldr	r3, [pc, #156]	; (800e4e8 <mem_malloc+0x1ec>)
 800e44c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e450:	4929      	ldr	r1, [pc, #164]	; (800e4f8 <mem_malloc+0x1fc>)
 800e452:	4827      	ldr	r0, [pc, #156]	; (800e4f0 <mem_malloc+0x1f4>)
 800e454:	f00c fe1e 	bl	801b094 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e458:	4821      	ldr	r0, [pc, #132]	; (800e4e0 <mem_malloc+0x1e4>)
 800e45a:	f00b ff26 	bl	801a2aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e45e:	8bba      	ldrh	r2, [r7, #28]
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	4413      	add	r3, r2
 800e464:	3308      	adds	r3, #8
 800e466:	4a23      	ldr	r2, [pc, #140]	; (800e4f4 <mem_malloc+0x1f8>)
 800e468:	6812      	ldr	r2, [r2, #0]
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d906      	bls.n	800e47c <mem_malloc+0x180>
 800e46e:	4b1e      	ldr	r3, [pc, #120]	; (800e4e8 <mem_malloc+0x1ec>)
 800e470:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e474:	4921      	ldr	r1, [pc, #132]	; (800e4fc <mem_malloc+0x200>)
 800e476:	481e      	ldr	r0, [pc, #120]	; (800e4f0 <mem_malloc+0x1f4>)
 800e478:	f00c fe0c 	bl	801b094 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f003 0303 	and.w	r3, r3, #3
 800e482:	2b00      	cmp	r3, #0
 800e484:	d006      	beq.n	800e494 <mem_malloc+0x198>
 800e486:	4b18      	ldr	r3, [pc, #96]	; (800e4e8 <mem_malloc+0x1ec>)
 800e488:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e48c:	491c      	ldr	r1, [pc, #112]	; (800e500 <mem_malloc+0x204>)
 800e48e:	4818      	ldr	r0, [pc, #96]	; (800e4f0 <mem_malloc+0x1f4>)
 800e490:	f00c fe00 	bl	801b094 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	f003 0303 	and.w	r3, r3, #3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d006      	beq.n	800e4ac <mem_malloc+0x1b0>
 800e49e:	4b12      	ldr	r3, [pc, #72]	; (800e4e8 <mem_malloc+0x1ec>)
 800e4a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e4a4:	4917      	ldr	r1, [pc, #92]	; (800e504 <mem_malloc+0x208>)
 800e4a6:	4812      	ldr	r0, [pc, #72]	; (800e4f0 <mem_malloc+0x1f4>)
 800e4a8:	f00c fdf4 	bl	801b094 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	3308      	adds	r3, #8
 800e4b0:	e011      	b.n	800e4d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e4b2:	8bfb      	ldrh	r3, [r7, #30]
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7ff fc33 	bl	800dd20 <ptr_to_mem>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	881b      	ldrh	r3, [r3, #0]
 800e4be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e4c0:	8bfa      	ldrh	r2, [r7, #30]
 800e4c2:	8bbb      	ldrh	r3, [r7, #28]
 800e4c4:	f5c3 43a0 	rsb	r3, r3, #20480	; 0x5000
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	f4ff af41 	bcc.w	800e350 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e4ce:	4804      	ldr	r0, [pc, #16]	; (800e4e0 <mem_malloc+0x1e4>)
 800e4d0:	f00b feeb 	bl	801a2aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3720      	adds	r7, #32
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	2000f330 	.word	0x2000f330
 800e4e4:	2000f334 	.word	0x2000f334
 800e4e8:	0801dbd0 	.word	0x0801dbd0
 800e4ec:	0801dd94 	.word	0x0801dd94
 800e4f0:	0801dc18 	.word	0x0801dc18
 800e4f4:	2000f32c 	.word	0x2000f32c
 800e4f8:	0801dda8 	.word	0x0801dda8
 800e4fc:	0801ddc4 	.word	0x0801ddc4
 800e500:	0801ddf4 	.word	0x0801ddf4
 800e504:	0801de24 	.word	0x0801de24

0800e508 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	689b      	ldr	r3, [r3, #8]
 800e51c:	3303      	adds	r3, #3
 800e51e:	f023 0303 	bic.w	r3, r3, #3
 800e522:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e524:	2300      	movs	r3, #0
 800e526:	60fb      	str	r3, [r7, #12]
 800e528:	e011      	b.n	800e54e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	68ba      	ldr	r2, [r7, #8]
 800e53a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	889b      	ldrh	r3, [r3, #4]
 800e540:	461a      	mov	r2, r3
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	4413      	add	r3, r2
 800e546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	3301      	adds	r3, #1
 800e54c:	60fb      	str	r3, [r7, #12]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	88db      	ldrh	r3, [r3, #6]
 800e552:	461a      	mov	r2, r3
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	4293      	cmp	r3, r2
 800e558:	dbe7      	blt.n	800e52a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e55a:	bf00      	nop
 800e55c:	bf00      	nop
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e56e:	2300      	movs	r3, #0
 800e570:	80fb      	strh	r3, [r7, #6]
 800e572:	e009      	b.n	800e588 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	4a08      	ldr	r2, [pc, #32]	; (800e598 <memp_init+0x30>)
 800e578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7ff ffc3 	bl	800e508 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e582:	88fb      	ldrh	r3, [r7, #6]
 800e584:	3301      	adds	r3, #1
 800e586:	80fb      	strh	r3, [r7, #6]
 800e588:	88fb      	ldrh	r3, [r7, #6]
 800e58a:	2b0c      	cmp	r3, #12
 800e58c:	d9f2      	bls.n	800e574 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e58e:	bf00      	nop
 800e590:	bf00      	nop
 800e592:	3708      	adds	r7, #8
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	0806c77c 	.word	0x0806c77c

0800e59c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e5a4:	f00b feac 	bl	801a300 <sys_arch_protect>
 800e5a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d015      	beq.n	800e5e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	6812      	ldr	r2, [r2, #0]
 800e5c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d006      	beq.n	800e5da <do_memp_malloc_pool+0x3e>
 800e5cc:	4b09      	ldr	r3, [pc, #36]	; (800e5f4 <do_memp_malloc_pool+0x58>)
 800e5ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e5d2:	4909      	ldr	r1, [pc, #36]	; (800e5f8 <do_memp_malloc_pool+0x5c>)
 800e5d4:	4809      	ldr	r0, [pc, #36]	; (800e5fc <do_memp_malloc_pool+0x60>)
 800e5d6:	f00c fd5d 	bl	801b094 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e5da:	68f8      	ldr	r0, [r7, #12]
 800e5dc:	f00b fe9e 	bl	801a31c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	e003      	b.n	800e5ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e5e4:	68f8      	ldr	r0, [r7, #12]
 800e5e6:	f00b fe99 	bl	801a31c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e5ea:	2300      	movs	r3, #0
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3710      	adds	r7, #16
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	0801dee0 	.word	0x0801dee0
 800e5f8:	0801df10 	.word	0x0801df10
 800e5fc:	0801df34 	.word	0x0801df34

0800e600 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e60a:	79fb      	ldrb	r3, [r7, #7]
 800e60c:	2b0c      	cmp	r3, #12
 800e60e:	d908      	bls.n	800e622 <memp_malloc+0x22>
 800e610:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <memp_malloc+0x3c>)
 800e612:	f240 1257 	movw	r2, #343	; 0x157
 800e616:	490a      	ldr	r1, [pc, #40]	; (800e640 <memp_malloc+0x40>)
 800e618:	480a      	ldr	r0, [pc, #40]	; (800e644 <memp_malloc+0x44>)
 800e61a:	f00c fd3b 	bl	801b094 <iprintf>
 800e61e:	2300      	movs	r3, #0
 800e620:	e008      	b.n	800e634 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	4a08      	ldr	r2, [pc, #32]	; (800e648 <memp_malloc+0x48>)
 800e626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff ffb6 	bl	800e59c <do_memp_malloc_pool>
 800e630:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e632:	68fb      	ldr	r3, [r7, #12]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3710      	adds	r7, #16
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	0801dee0 	.word	0x0801dee0
 800e640:	0801df70 	.word	0x0801df70
 800e644:	0801df34 	.word	0x0801df34
 800e648:	0806c77c 	.word	0x0806c77c

0800e64c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
 800e654:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	f003 0303 	and.w	r3, r3, #3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d006      	beq.n	800e66e <do_memp_free_pool+0x22>
 800e660:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <do_memp_free_pool+0x4c>)
 800e662:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e666:	490d      	ldr	r1, [pc, #52]	; (800e69c <do_memp_free_pool+0x50>)
 800e668:	480d      	ldr	r0, [pc, #52]	; (800e6a0 <do_memp_free_pool+0x54>)
 800e66a:	f00c fd13 	bl	801b094 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e672:	f00b fe45 	bl	801a300 <sys_arch_protect>
 800e676:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68db      	ldr	r3, [r3, #12]
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e68a:	68b8      	ldr	r0, [r7, #8]
 800e68c:	f00b fe46 	bl	801a31c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e690:	bf00      	nop
 800e692:	3710      	adds	r7, #16
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	0801dee0 	.word	0x0801dee0
 800e69c:	0801df90 	.word	0x0801df90
 800e6a0:	0801df34 	.word	0x0801df34

0800e6a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b0c      	cmp	r3, #12
 800e6b4:	d907      	bls.n	800e6c6 <memp_free+0x22>
 800e6b6:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <memp_free+0x44>)
 800e6b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e6bc:	490b      	ldr	r1, [pc, #44]	; (800e6ec <memp_free+0x48>)
 800e6be:	480c      	ldr	r0, [pc, #48]	; (800e6f0 <memp_free+0x4c>)
 800e6c0:	f00c fce8 	bl	801b094 <iprintf>
 800e6c4:	e00c      	b.n	800e6e0 <memp_free+0x3c>

  if (mem == NULL) {
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d008      	beq.n	800e6de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e6cc:	79fb      	ldrb	r3, [r7, #7]
 800e6ce:	4a09      	ldr	r2, [pc, #36]	; (800e6f4 <memp_free+0x50>)
 800e6d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7ff ffb8 	bl	800e64c <do_memp_free_pool>
 800e6dc:	e000      	b.n	800e6e0 <memp_free+0x3c>
    return;
 800e6de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	0801dee0 	.word	0x0801dee0
 800e6ec:	0801dfb0 	.word	0x0801dfb0
 800e6f0:	0801df34 	.word	0x0801df34
 800e6f4:	0806c77c 	.word	0x0806c77c

0800e6f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e6fc:	bf00      	nop
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
	...

0800e708 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b086      	sub	sp, #24
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d108      	bne.n	800e72e <netif_add+0x26>
 800e71c:	4b5b      	ldr	r3, [pc, #364]	; (800e88c <netif_add+0x184>)
 800e71e:	f240 1227 	movw	r2, #295	; 0x127
 800e722:	495b      	ldr	r1, [pc, #364]	; (800e890 <netif_add+0x188>)
 800e724:	485b      	ldr	r0, [pc, #364]	; (800e894 <netif_add+0x18c>)
 800e726:	f00c fcb5 	bl	801b094 <iprintf>
 800e72a:	2300      	movs	r3, #0
 800e72c:	e0a9      	b.n	800e882 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	2b00      	cmp	r3, #0
 800e732:	d108      	bne.n	800e746 <netif_add+0x3e>
 800e734:	4b55      	ldr	r3, [pc, #340]	; (800e88c <netif_add+0x184>)
 800e736:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e73a:	4957      	ldr	r1, [pc, #348]	; (800e898 <netif_add+0x190>)
 800e73c:	4855      	ldr	r0, [pc, #340]	; (800e894 <netif_add+0x18c>)
 800e73e:	f00c fca9 	bl	801b094 <iprintf>
 800e742:	2300      	movs	r3, #0
 800e744:	e09d      	b.n	800e882 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d101      	bne.n	800e750 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e74c:	4b53      	ldr	r3, [pc, #332]	; (800e89c <netif_add+0x194>)
 800e74e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d101      	bne.n	800e75a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e756:	4b51      	ldr	r3, [pc, #324]	; (800e89c <netif_add+0x194>)
 800e758:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e760:	4b4e      	ldr	r3, [pc, #312]	; (800e89c <netif_add+0x194>)
 800e762:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	2200      	movs	r2, #0
 800e76e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2200      	movs	r2, #0
 800e774:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	4a49      	ldr	r2, [pc, #292]	; (800e8a0 <netif_add+0x198>)
 800e77a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2200      	movs	r2, #0
 800e780:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3324      	adds	r3, #36	; 0x24
 800e78e:	2204      	movs	r2, #4
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f00c fde0 	bl	801b358 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2200      	movs	r2, #0
 800e79c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6a3a      	ldr	r2, [r7, #32]
 800e7a2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e7a4:	4b3f      	ldr	r3, [pc, #252]	; (800e8a4 <netif_add+0x19c>)
 800e7a6:	781a      	ldrb	r2, [r3, #0]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e7b2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	68b9      	ldr	r1, [r7, #8]
 800e7ba:	68f8      	ldr	r0, [r7, #12]
 800e7bc:	f000 f914 	bl	800e9e8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <netif_add+0xc8>
    return NULL;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	e058      	b.n	800e882 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7d6:	2bff      	cmp	r3, #255	; 0xff
 800e7d8:	d103      	bne.n	800e7e2 <netif_add+0xda>
        netif->num = 0;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e7e6:	4b30      	ldr	r3, [pc, #192]	; (800e8a8 <netif_add+0x1a0>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	e02b      	b.n	800e846 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e7ee:	697a      	ldr	r2, [r7, #20]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d106      	bne.n	800e804 <netif_add+0xfc>
 800e7f6:	4b25      	ldr	r3, [pc, #148]	; (800e88c <netif_add+0x184>)
 800e7f8:	f240 128b 	movw	r2, #395	; 0x18b
 800e7fc:	492b      	ldr	r1, [pc, #172]	; (800e8ac <netif_add+0x1a4>)
 800e7fe:	4825      	ldr	r0, [pc, #148]	; (800e894 <netif_add+0x18c>)
 800e800:	f00c fc48 	bl	801b094 <iprintf>
        num_netifs++;
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	3301      	adds	r3, #1
 800e808:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	2bff      	cmp	r3, #255	; 0xff
 800e80e:	dd06      	ble.n	800e81e <netif_add+0x116>
 800e810:	4b1e      	ldr	r3, [pc, #120]	; (800e88c <netif_add+0x184>)
 800e812:	f240 128d 	movw	r2, #397	; 0x18d
 800e816:	4926      	ldr	r1, [pc, #152]	; (800e8b0 <netif_add+0x1a8>)
 800e818:	481e      	ldr	r0, [pc, #120]	; (800e894 <netif_add+0x18c>)
 800e81a:	f00c fc3b 	bl	801b094 <iprintf>
        if (netif2->num == netif->num) {
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d108      	bne.n	800e840 <netif_add+0x138>
          netif->num++;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e834:	3301      	adds	r3, #1
 800e836:	b2da      	uxtb	r2, r3
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800e83e:	e005      	b.n	800e84c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	617b      	str	r3, [r7, #20]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d1d0      	bne.n	800e7ee <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1be      	bne.n	800e7d0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e858:	2bfe      	cmp	r3, #254	; 0xfe
 800e85a:	d103      	bne.n	800e864 <netif_add+0x15c>
    netif_num = 0;
 800e85c:	4b11      	ldr	r3, [pc, #68]	; (800e8a4 <netif_add+0x19c>)
 800e85e:	2200      	movs	r2, #0
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	e006      	b.n	800e872 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e86a:	3301      	adds	r3, #1
 800e86c:	b2da      	uxtb	r2, r3
 800e86e:	4b0d      	ldr	r3, [pc, #52]	; (800e8a4 <netif_add+0x19c>)
 800e870:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e872:	4b0d      	ldr	r3, [pc, #52]	; (800e8a8 <netif_add+0x1a0>)
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e87a:	4a0b      	ldr	r2, [pc, #44]	; (800e8a8 <netif_add+0x1a0>)
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e880:	68fb      	ldr	r3, [r7, #12]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	0801dfcc 	.word	0x0801dfcc
 800e890:	0801e060 	.word	0x0801e060
 800e894:	0801e01c 	.word	0x0801e01c
 800e898:	0801e07c 	.word	0x0801e07c
 800e89c:	0806c800 	.word	0x0806c800
 800e8a0:	0800eca9 	.word	0x0800eca9
 800e8a4:	20013d6c 	.word	0x20013d6c
 800e8a8:	20013d64 	.word	0x20013d64
 800e8ac:	0801e0a0 	.word	0x0801e0a0
 800e8b0:	0801e0b4 	.word	0x0801e0b4

0800e8b4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f002 fc1f 	bl	8011104 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e8c6:	6839      	ldr	r1, [r7, #0]
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f007 f933 	bl	8015b34 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e8ce:	bf00      	nop
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b086      	sub	sp, #24
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <netif_do_set_ipaddr+0x20>
 800e8ea:	4b1d      	ldr	r3, [pc, #116]	; (800e960 <netif_do_set_ipaddr+0x88>)
 800e8ec:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e8f0:	491c      	ldr	r1, [pc, #112]	; (800e964 <netif_do_set_ipaddr+0x8c>)
 800e8f2:	481d      	ldr	r0, [pc, #116]	; (800e968 <netif_do_set_ipaddr+0x90>)
 800e8f4:	f00c fbce 	bl	801b094 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <netif_do_set_ipaddr+0x34>
 800e8fe:	4b18      	ldr	r3, [pc, #96]	; (800e960 <netif_do_set_ipaddr+0x88>)
 800e900:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e904:	4917      	ldr	r1, [pc, #92]	; (800e964 <netif_do_set_ipaddr+0x8c>)
 800e906:	4818      	ldr	r0, [pc, #96]	; (800e968 <netif_do_set_ipaddr+0x90>)
 800e908:	f00c fbc4 	bl	801b094 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	3304      	adds	r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	429a      	cmp	r2, r3
 800e918:	d01c      	beq.n	800e954 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	3304      	adds	r3, #4
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e92a:	f107 0314 	add.w	r3, r7, #20
 800e92e:	4619      	mov	r1, r3
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f7ff ffbf 	bl	800e8b4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d002      	beq.n	800e942 <netif_do_set_ipaddr+0x6a>
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	e000      	b.n	800e944 <netif_do_set_ipaddr+0x6c>
 800e942:	2300      	movs	r3, #0
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e948:	2101      	movs	r1, #1
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f000 f8d2 	bl	800eaf4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e950:	2301      	movs	r3, #1
 800e952:	e000      	b.n	800e956 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3718      	adds	r7, #24
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	0801dfcc 	.word	0x0801dfcc
 800e964:	0801e0e4 	.word	0x0801e0e4
 800e968:	0801e01c 	.word	0x0801e01c

0800e96c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e96c:	b480      	push	{r7}
 800e96e:	b085      	sub	sp, #20
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	60b9      	str	r1, [r7, #8]
 800e976:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e978:	68bb      	ldr	r3, [r7, #8]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	3308      	adds	r3, #8
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	d00a      	beq.n	800e99c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <netif_do_set_netmask+0x26>
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	e000      	b.n	800e994 <netif_do_set_netmask+0x28>
 800e992:	2300      	movs	r3, #0
 800e994:	68fa      	ldr	r2, [r7, #12]
 800e996:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e998:	2301      	movs	r3, #1
 800e99a:	e000      	b.n	800e99e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e99c:	2300      	movs	r3, #0
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	330c      	adds	r3, #12
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d00a      	beq.n	800e9da <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d002      	beq.n	800e9d0 <netif_do_set_gw+0x26>
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	e000      	b.n	800e9d2 <netif_do_set_gw+0x28>
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e000      	b.n	800e9dc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b088      	sub	sp, #32
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	60f8      	str	r0, [r7, #12]
 800e9f0:	60b9      	str	r1, [r7, #8]
 800e9f2:	607a      	str	r2, [r7, #4]
 800e9f4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d101      	bne.n	800ea08 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ea04:	4b1c      	ldr	r3, [pc, #112]	; (800ea78 <netif_set_addr+0x90>)
 800ea06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d101      	bne.n	800ea12 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ea0e:	4b1a      	ldr	r3, [pc, #104]	; (800ea78 <netif_set_addr+0x90>)
 800ea10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d101      	bne.n	800ea1c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ea18:	4b17      	ldr	r3, [pc, #92]	; (800ea78 <netif_set_addr+0x90>)
 800ea1a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d003      	beq.n	800ea2a <netif_set_addr+0x42>
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d101      	bne.n	800ea2e <netif_set_addr+0x46>
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e000      	b.n	800ea30 <netif_set_addr+0x48>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d006      	beq.n	800ea46 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ea38:	f107 0310 	add.w	r3, r7, #16
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	68b9      	ldr	r1, [r7, #8]
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7ff ff49 	bl	800e8d8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ea46:	69fa      	ldr	r2, [r7, #28]
 800ea48:	6879      	ldr	r1, [r7, #4]
 800ea4a:	68f8      	ldr	r0, [r7, #12]
 800ea4c:	f7ff ff8e 	bl	800e96c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ea50:	69ba      	ldr	r2, [r7, #24]
 800ea52:	6839      	ldr	r1, [r7, #0]
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7ff ffa8 	bl	800e9aa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d106      	bne.n	800ea6e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ea60:	f107 0310 	add.w	r3, r7, #16
 800ea64:	461a      	mov	r2, r3
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	68f8      	ldr	r0, [r7, #12]
 800ea6a:	f7ff ff35 	bl	800e8d8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ea6e:	bf00      	nop
 800ea70:	3720      	adds	r7, #32
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	0806c800 	.word	0x0806c800

0800ea7c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ea84:	4a04      	ldr	r2, [pc, #16]	; (800ea98 <netif_set_default+0x1c>)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ea8a:	bf00      	nop
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	20013d68 	.word	0x20013d68

0800ea9c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b082      	sub	sp, #8
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d107      	bne.n	800eaba <netif_set_up+0x1e>
 800eaaa:	4b0f      	ldr	r3, [pc, #60]	; (800eae8 <netif_set_up+0x4c>)
 800eaac:	f44f 7254 	mov.w	r2, #848	; 0x350
 800eab0:	490e      	ldr	r1, [pc, #56]	; (800eaec <netif_set_up+0x50>)
 800eab2:	480f      	ldr	r0, [pc, #60]	; (800eaf0 <netif_set_up+0x54>)
 800eab4:	f00c faee 	bl	801b094 <iprintf>
 800eab8:	e013      	b.n	800eae2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eac0:	f003 0301 	and.w	r3, r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d10c      	bne.n	800eae2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eace:	f043 0301 	orr.w	r3, r3, #1
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800eada:	2103      	movs	r1, #3
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 f809 	bl	800eaf4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	0801dfcc 	.word	0x0801dfcc
 800eaec:	0801e154 	.word	0x0801e154
 800eaf0:	0801e01c 	.word	0x0801e01c

0800eaf4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	460b      	mov	r3, r1
 800eafe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d106      	bne.n	800eb14 <netif_issue_reports+0x20>
 800eb06:	4b18      	ldr	r3, [pc, #96]	; (800eb68 <netif_issue_reports+0x74>)
 800eb08:	f240 326d 	movw	r2, #877	; 0x36d
 800eb0c:	4917      	ldr	r1, [pc, #92]	; (800eb6c <netif_issue_reports+0x78>)
 800eb0e:	4818      	ldr	r0, [pc, #96]	; (800eb70 <netif_issue_reports+0x7c>)
 800eb10:	f00c fac0 	bl	801b094 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb1a:	f003 0304 	and.w	r3, r3, #4
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d01e      	beq.n	800eb60 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb28:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d017      	beq.n	800eb60 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d013      	beq.n	800eb62 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	3304      	adds	r3, #4
 800eb3e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00e      	beq.n	800eb62 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb4a:	f003 0308 	and.w	r3, r3, #8
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d007      	beq.n	800eb62 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3304      	adds	r3, #4
 800eb56:	4619      	mov	r1, r3
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f009 fe71 	bl	8018840 <etharp_request>
 800eb5e:	e000      	b.n	800eb62 <netif_issue_reports+0x6e>
    return;
 800eb60:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	0801dfcc 	.word	0x0801dfcc
 800eb6c:	0801e170 	.word	0x0801e170
 800eb70:	0801e01c 	.word	0x0801e01c

0800eb74 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d107      	bne.n	800eb92 <netif_set_down+0x1e>
 800eb82:	4b12      	ldr	r3, [pc, #72]	; (800ebcc <netif_set_down+0x58>)
 800eb84:	f240 329b 	movw	r2, #923	; 0x39b
 800eb88:	4911      	ldr	r1, [pc, #68]	; (800ebd0 <netif_set_down+0x5c>)
 800eb8a:	4812      	ldr	r0, [pc, #72]	; (800ebd4 <netif_set_down+0x60>)
 800eb8c:	f00c fa82 	bl	801b094 <iprintf>
 800eb90:	e019      	b.n	800ebc6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d012      	beq.n	800ebc6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eba6:	f023 0301 	bic.w	r3, r3, #1
 800ebaa:	b2da      	uxtb	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ebb8:	f003 0308 	and.w	r3, r3, #8
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d002      	beq.n	800ebc6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f009 f9f7 	bl	8017fb4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	0801dfcc 	.word	0x0801dfcc
 800ebd0:	0801e194 	.word	0x0801e194
 800ebd4:	0801e01c 	.word	0x0801e01c

0800ebd8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d107      	bne.n	800ebf6 <netif_set_link_up+0x1e>
 800ebe6:	4b15      	ldr	r3, [pc, #84]	; (800ec3c <netif_set_link_up+0x64>)
 800ebe8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ebec:	4914      	ldr	r1, [pc, #80]	; (800ec40 <netif_set_link_up+0x68>)
 800ebee:	4815      	ldr	r0, [pc, #84]	; (800ec44 <netif_set_link_up+0x6c>)
 800ebf0:	f00c fa50 	bl	801b094 <iprintf>
 800ebf4:	e01e      	b.n	800ec34 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ebfc:	f003 0304 	and.w	r3, r3, #4
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d117      	bne.n	800ec34 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec0a:	f043 0304 	orr.w	r3, r3, #4
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f007 fbb6 	bl	8016388 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ec1c:	2103      	movs	r1, #3
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f7ff ff68 	bl	800eaf4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	69db      	ldr	r3, [r3, #28]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d003      	beq.n	800ec34 <netif_set_link_up+0x5c>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	69db      	ldr	r3, [r3, #28]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	0801dfcc 	.word	0x0801dfcc
 800ec40:	0801e1b4 	.word	0x0801e1b4
 800ec44:	0801e01c 	.word	0x0801e01c

0800ec48 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d107      	bne.n	800ec66 <netif_set_link_down+0x1e>
 800ec56:	4b11      	ldr	r3, [pc, #68]	; (800ec9c <netif_set_link_down+0x54>)
 800ec58:	f240 4206 	movw	r2, #1030	; 0x406
 800ec5c:	4910      	ldr	r1, [pc, #64]	; (800eca0 <netif_set_link_down+0x58>)
 800ec5e:	4811      	ldr	r0, [pc, #68]	; (800eca4 <netif_set_link_down+0x5c>)
 800ec60:	f00c fa18 	bl	801b094 <iprintf>
 800ec64:	e017      	b.n	800ec96 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d010      	beq.n	800ec96 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec7a:	f023 0304 	bic.w	r3, r3, #4
 800ec7e:	b2da      	uxtb	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	69db      	ldr	r3, [r3, #28]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d003      	beq.n	800ec96 <netif_set_link_down+0x4e>
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	69db      	ldr	r3, [r3, #28]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801dfcc 	.word	0x0801dfcc
 800eca0:	0801e1d8 	.word	0x0801e1d8
 800eca4:	0801e01c 	.word	0x0801e01c

0800eca8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ecb4:	f06f 030b 	mvn.w	r3, #11
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3714      	adds	r7, #20
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	4603      	mov	r3, r0
 800eccc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d013      	beq.n	800ecfc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ecd4:	4b0d      	ldr	r3, [pc, #52]	; (800ed0c <netif_get_by_index+0x48>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	60fb      	str	r3, [r7, #12]
 800ecda:	e00c      	b.n	800ecf6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	79fa      	ldrb	r2, [r7, #7]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d101      	bne.n	800ecf0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	e006      	b.n	800ecfe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	60fb      	str	r3, [r7, #12]
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d1ef      	bne.n	800ecdc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3714      	adds	r7, #20
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr
 800ed0a:	bf00      	nop
 800ed0c:	20013d64 	.word	0x20013d64

0800ed10 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ed16:	f00b faf3 	bl	801a300 <sys_arch_protect>
 800ed1a:	6038      	str	r0, [r7, #0]
 800ed1c:	4b0d      	ldr	r3, [pc, #52]	; (800ed54 <pbuf_free_ooseq+0x44>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	701a      	strb	r2, [r3, #0]
 800ed22:	6838      	ldr	r0, [r7, #0]
 800ed24:	f00b fafa 	bl	801a31c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ed28:	4b0b      	ldr	r3, [pc, #44]	; (800ed58 <pbuf_free_ooseq+0x48>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	607b      	str	r3, [r7, #4]
 800ed2e:	e00a      	b.n	800ed46 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d003      	beq.n	800ed40 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f002 fa21 	bl	8011180 <tcp_free_ooseq>
      return;
 800ed3e:	e005      	b.n	800ed4c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	68db      	ldr	r3, [r3, #12]
 800ed44:	607b      	str	r3, [r7, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d1f1      	bne.n	800ed30 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ed4c:	3708      	adds	r7, #8
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20013d6d 	.word	0x20013d6d
 800ed58:	20013d7c 	.word	0x20013d7c

0800ed5c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b082      	sub	sp, #8
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ed64:	f7ff ffd4 	bl	800ed10 <pbuf_free_ooseq>
}
 800ed68:	bf00      	nop
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b082      	sub	sp, #8
 800ed74:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ed76:	f00b fac3 	bl	801a300 <sys_arch_protect>
 800ed7a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ed7c:	4b0f      	ldr	r3, [pc, #60]	; (800edbc <pbuf_pool_is_empty+0x4c>)
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ed82:	4b0e      	ldr	r3, [pc, #56]	; (800edbc <pbuf_pool_is_empty+0x4c>)
 800ed84:	2201      	movs	r2, #1
 800ed86:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f00b fac7 	bl	801a31c <sys_arch_unprotect>

  if (!queued) {
 800ed8e:	78fb      	ldrb	r3, [r7, #3]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d10f      	bne.n	800edb4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ed94:	2100      	movs	r1, #0
 800ed96:	480a      	ldr	r0, [pc, #40]	; (800edc0 <pbuf_pool_is_empty+0x50>)
 800ed98:	f7fe fd62 	bl	800d860 <tcpip_try_callback>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d008      	beq.n	800edb4 <pbuf_pool_is_empty+0x44>
 800eda2:	f00b faad 	bl	801a300 <sys_arch_protect>
 800eda6:	6078      	str	r0, [r7, #4]
 800eda8:	4b04      	ldr	r3, [pc, #16]	; (800edbc <pbuf_pool_is_empty+0x4c>)
 800edaa:	2200      	movs	r2, #0
 800edac:	701a      	strb	r2, [r3, #0]
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f00b fab4 	bl	801a31c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800edb4:	bf00      	nop
 800edb6:	3708      	adds	r7, #8
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}
 800edbc:	20013d6d 	.word	0x20013d6d
 800edc0:	0800ed5d 	.word	0x0800ed5d

0800edc4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	4611      	mov	r1, r2
 800edd0:	461a      	mov	r2, r3
 800edd2:	460b      	mov	r3, r1
 800edd4:	80fb      	strh	r3, [r7, #6]
 800edd6:	4613      	mov	r3, r2
 800edd8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	68ba      	ldr	r2, [r7, #8]
 800ede4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	88fa      	ldrh	r2, [r7, #6]
 800edea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	88ba      	ldrh	r2, [r7, #4]
 800edf0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800edf2:	8b3b      	ldrh	r3, [r7, #24]
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	7f3a      	ldrb	r2, [r7, #28]
 800edfe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2201      	movs	r2, #1
 800ee04:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	73da      	strb	r2, [r3, #15]
}
 800ee0c:	bf00      	nop
 800ee0e:	3714      	adds	r7, #20
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr

0800ee18 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b08c      	sub	sp, #48	; 0x30
 800ee1c:	af02      	add	r7, sp, #8
 800ee1e:	4603      	mov	r3, r0
 800ee20:	71fb      	strb	r3, [r7, #7]
 800ee22:	460b      	mov	r3, r1
 800ee24:	80bb      	strh	r3, [r7, #4]
 800ee26:	4613      	mov	r3, r2
 800ee28:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ee2a:	79fb      	ldrb	r3, [r7, #7]
 800ee2c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ee2e:	887b      	ldrh	r3, [r7, #2]
 800ee30:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ee34:	f000 8082 	beq.w	800ef3c <pbuf_alloc+0x124>
 800ee38:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ee3c:	f300 80ca 	bgt.w	800efd4 <pbuf_alloc+0x1bc>
 800ee40:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ee44:	d010      	beq.n	800ee68 <pbuf_alloc+0x50>
 800ee46:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ee4a:	f300 80c3 	bgt.w	800efd4 <pbuf_alloc+0x1bc>
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d002      	beq.n	800ee58 <pbuf_alloc+0x40>
 800ee52:	2b41      	cmp	r3, #65	; 0x41
 800ee54:	f040 80be 	bne.w	800efd4 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ee58:	887a      	ldrh	r2, [r7, #2]
 800ee5a:	88bb      	ldrh	r3, [r7, #4]
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	2000      	movs	r0, #0
 800ee60:	f000 f8d4 	bl	800f00c <pbuf_alloc_reference>
 800ee64:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ee66:	e0bf      	b.n	800efe8 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ee70:	88bb      	ldrh	r3, [r7, #4]
 800ee72:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ee74:	200c      	movs	r0, #12
 800ee76:	f7ff fbc3 	bl	800e600 <memp_malloc>
 800ee7a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d109      	bne.n	800ee96 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800ee82:	f7ff ff75 	bl	800ed70 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ee86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800ee8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee8e:	f000 faab 	bl	800f3e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e0a9      	b.n	800efea <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ee96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee98:	3303      	adds	r3, #3
 800ee9a:	b29b      	uxth	r3, r3
 800ee9c:	f023 0303 	bic.w	r3, r3, #3
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800eea6:	3304      	adds	r3, #4
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	8b7a      	ldrh	r2, [r7, #26]
 800eeac:	4293      	cmp	r3, r2
 800eeae:	bf28      	it	cs
 800eeb0:	4613      	movcs	r3, r2
 800eeb2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eeb4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeb6:	3310      	adds	r3, #16
 800eeb8:	693a      	ldr	r2, [r7, #16]
 800eeba:	4413      	add	r3, r2
 800eebc:	3303      	adds	r3, #3
 800eebe:	f023 0303 	bic.w	r3, r3, #3
 800eec2:	4618      	mov	r0, r3
 800eec4:	89f9      	ldrh	r1, [r7, #14]
 800eec6:	8b7a      	ldrh	r2, [r7, #26]
 800eec8:	2300      	movs	r3, #0
 800eeca:	9301      	str	r3, [sp, #4]
 800eecc:	887b      	ldrh	r3, [r7, #2]
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	460b      	mov	r3, r1
 800eed2:	4601      	mov	r1, r0
 800eed4:	6938      	ldr	r0, [r7, #16]
 800eed6:	f7ff ff75 	bl	800edc4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	f003 0303 	and.w	r3, r3, #3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d006      	beq.n	800eef4 <pbuf_alloc+0xdc>
 800eee6:	4b43      	ldr	r3, [pc, #268]	; (800eff4 <pbuf_alloc+0x1dc>)
 800eee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eeec:	4942      	ldr	r1, [pc, #264]	; (800eff8 <pbuf_alloc+0x1e0>)
 800eeee:	4843      	ldr	r0, [pc, #268]	; (800effc <pbuf_alloc+0x1e4>)
 800eef0:	f00c f8d0 	bl	801b094 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eef6:	3303      	adds	r3, #3
 800eef8:	f023 0303 	bic.w	r3, r3, #3
 800eefc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d106      	bne.n	800ef12 <pbuf_alloc+0xfa>
 800ef04:	4b3b      	ldr	r3, [pc, #236]	; (800eff4 <pbuf_alloc+0x1dc>)
 800ef06:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ef0a:	493d      	ldr	r1, [pc, #244]	; (800f000 <pbuf_alloc+0x1e8>)
 800ef0c:	483b      	ldr	r0, [pc, #236]	; (800effc <pbuf_alloc+0x1e4>)
 800ef0e:	f00c f8c1 	bl	801b094 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ef12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef1c:	e002      	b.n	800ef24 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	693a      	ldr	r2, [r7, #16]
 800ef22:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ef28:	8b7a      	ldrh	r2, [r7, #26]
 800ef2a:	89fb      	ldrh	r3, [r7, #14]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ef30:	2300      	movs	r3, #0
 800ef32:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ef34:	8b7b      	ldrh	r3, [r7, #26]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d19c      	bne.n	800ee74 <pbuf_alloc+0x5c>
      break;
 800ef3a:	e055      	b.n	800efe8 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ef3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef3e:	3303      	adds	r3, #3
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	f023 0303 	bic.w	r3, r3, #3
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	88bb      	ldrh	r3, [r7, #4]
 800ef4a:	3303      	adds	r3, #3
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	f023 0303 	bic.w	r3, r3, #3
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	4413      	add	r3, r2
 800ef56:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ef58:	8b3b      	ldrh	r3, [r7, #24]
 800ef5a:	3310      	adds	r3, #16
 800ef5c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ef5e:	8b3a      	ldrh	r2, [r7, #24]
 800ef60:	88bb      	ldrh	r3, [r7, #4]
 800ef62:	3303      	adds	r3, #3
 800ef64:	f023 0303 	bic.w	r3, r3, #3
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d306      	bcc.n	800ef7a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ef6c:	8afa      	ldrh	r2, [r7, #22]
 800ef6e:	88bb      	ldrh	r3, [r7, #4]
 800ef70:	3303      	adds	r3, #3
 800ef72:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d201      	bcs.n	800ef7e <pbuf_alloc+0x166>
        return NULL;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	e035      	b.n	800efea <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ef7e:	8afb      	ldrh	r3, [r7, #22]
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff f9bb 	bl	800e2fc <mem_malloc>
 800ef86:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d101      	bne.n	800ef92 <pbuf_alloc+0x17a>
        return NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e02b      	b.n	800efea <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ef92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef94:	3310      	adds	r3, #16
 800ef96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef98:	4413      	add	r3, r2
 800ef9a:	3303      	adds	r3, #3
 800ef9c:	f023 0303 	bic.w	r3, r3, #3
 800efa0:	4618      	mov	r0, r3
 800efa2:	88b9      	ldrh	r1, [r7, #4]
 800efa4:	88ba      	ldrh	r2, [r7, #4]
 800efa6:	2300      	movs	r3, #0
 800efa8:	9301      	str	r3, [sp, #4]
 800efaa:	887b      	ldrh	r3, [r7, #2]
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	460b      	mov	r3, r1
 800efb0:	4601      	mov	r1, r0
 800efb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efb4:	f7ff ff06 	bl	800edc4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	f003 0303 	and.w	r3, r3, #3
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d010      	beq.n	800efe6 <pbuf_alloc+0x1ce>
 800efc4:	4b0b      	ldr	r3, [pc, #44]	; (800eff4 <pbuf_alloc+0x1dc>)
 800efc6:	f44f 7291 	mov.w	r2, #290	; 0x122
 800efca:	490e      	ldr	r1, [pc, #56]	; (800f004 <pbuf_alloc+0x1ec>)
 800efcc:	480b      	ldr	r0, [pc, #44]	; (800effc <pbuf_alloc+0x1e4>)
 800efce:	f00c f861 	bl	801b094 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800efd2:	e008      	b.n	800efe6 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800efd4:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <pbuf_alloc+0x1dc>)
 800efd6:	f240 1227 	movw	r2, #295	; 0x127
 800efda:	490b      	ldr	r1, [pc, #44]	; (800f008 <pbuf_alloc+0x1f0>)
 800efdc:	4807      	ldr	r0, [pc, #28]	; (800effc <pbuf_alloc+0x1e4>)
 800efde:	f00c f859 	bl	801b094 <iprintf>
      return NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	e001      	b.n	800efea <pbuf_alloc+0x1d2>
      break;
 800efe6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800efe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efea:	4618      	mov	r0, r3
 800efec:	3728      	adds	r7, #40	; 0x28
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
 800eff2:	bf00      	nop
 800eff4:	0801e1fc 	.word	0x0801e1fc
 800eff8:	0801e22c 	.word	0x0801e22c
 800effc:	0801e25c 	.word	0x0801e25c
 800f000:	0801e284 	.word	0x0801e284
 800f004:	0801e2b8 	.word	0x0801e2b8
 800f008:	0801e2e4 	.word	0x0801e2e4

0800f00c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b086      	sub	sp, #24
 800f010:	af02      	add	r7, sp, #8
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	460b      	mov	r3, r1
 800f016:	807b      	strh	r3, [r7, #2]
 800f018:	4613      	mov	r3, r2
 800f01a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f01c:	883b      	ldrh	r3, [r7, #0]
 800f01e:	2b41      	cmp	r3, #65	; 0x41
 800f020:	d009      	beq.n	800f036 <pbuf_alloc_reference+0x2a>
 800f022:	883b      	ldrh	r3, [r7, #0]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d006      	beq.n	800f036 <pbuf_alloc_reference+0x2a>
 800f028:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <pbuf_alloc_reference+0x5c>)
 800f02a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f02e:	490f      	ldr	r1, [pc, #60]	; (800f06c <pbuf_alloc_reference+0x60>)
 800f030:	480f      	ldr	r0, [pc, #60]	; (800f070 <pbuf_alloc_reference+0x64>)
 800f032:	f00c f82f 	bl	801b094 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f036:	200b      	movs	r0, #11
 800f038:	f7ff fae2 	bl	800e600 <memp_malloc>
 800f03c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f044:	2300      	movs	r3, #0
 800f046:	e00b      	b.n	800f060 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f048:	8879      	ldrh	r1, [r7, #2]
 800f04a:	887a      	ldrh	r2, [r7, #2]
 800f04c:	2300      	movs	r3, #0
 800f04e:	9301      	str	r3, [sp, #4]
 800f050:	883b      	ldrh	r3, [r7, #0]
 800f052:	9300      	str	r3, [sp, #0]
 800f054:	460b      	mov	r3, r1
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f7ff feb3 	bl	800edc4 <pbuf_init_alloced_pbuf>
  return p;
 800f05e:	68fb      	ldr	r3, [r7, #12]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3710      	adds	r7, #16
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	0801e1fc 	.word	0x0801e1fc
 800f06c:	0801e300 	.word	0x0801e300
 800f070:	0801e25c 	.word	0x0801e25c

0800f074 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b088      	sub	sp, #32
 800f078:	af02      	add	r7, sp, #8
 800f07a:	607b      	str	r3, [r7, #4]
 800f07c:	4603      	mov	r3, r0
 800f07e:	73fb      	strb	r3, [r7, #15]
 800f080:	460b      	mov	r3, r1
 800f082:	81bb      	strh	r3, [r7, #12]
 800f084:	4613      	mov	r3, r2
 800f086:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f088:	7bfb      	ldrb	r3, [r7, #15]
 800f08a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f08c:	8a7b      	ldrh	r3, [r7, #18]
 800f08e:	3303      	adds	r3, #3
 800f090:	f023 0203 	bic.w	r2, r3, #3
 800f094:	89bb      	ldrh	r3, [r7, #12]
 800f096:	441a      	add	r2, r3
 800f098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d901      	bls.n	800f0a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	e018      	b.n	800f0d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f0a2:	6a3b      	ldr	r3, [r7, #32]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d007      	beq.n	800f0b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f0a8:	8a7b      	ldrh	r3, [r7, #18]
 800f0aa:	3303      	adds	r3, #3
 800f0ac:	f023 0303 	bic.w	r3, r3, #3
 800f0b0:	6a3a      	ldr	r2, [r7, #32]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	617b      	str	r3, [r7, #20]
 800f0b6:	e001      	b.n	800f0bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	89b9      	ldrh	r1, [r7, #12]
 800f0c0:	89ba      	ldrh	r2, [r7, #12]
 800f0c2:	2302      	movs	r3, #2
 800f0c4:	9301      	str	r3, [sp, #4]
 800f0c6:	897b      	ldrh	r3, [r7, #10]
 800f0c8:	9300      	str	r3, [sp, #0]
 800f0ca:	460b      	mov	r3, r1
 800f0cc:	6979      	ldr	r1, [r7, #20]
 800f0ce:	f7ff fe79 	bl	800edc4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f0d2:	687b      	ldr	r3, [r7, #4]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3718      	adds	r7, #24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	460b      	mov	r3, r1
 800f0e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d106      	bne.n	800f0fc <pbuf_realloc+0x20>
 800f0ee:	4b3a      	ldr	r3, [pc, #232]	; (800f1d8 <pbuf_realloc+0xfc>)
 800f0f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f0f4:	4939      	ldr	r1, [pc, #228]	; (800f1dc <pbuf_realloc+0x100>)
 800f0f6:	483a      	ldr	r0, [pc, #232]	; (800f1e0 <pbuf_realloc+0x104>)
 800f0f8:	f00b ffcc 	bl	801b094 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	891b      	ldrh	r3, [r3, #8]
 800f100:	887a      	ldrh	r2, [r7, #2]
 800f102:	429a      	cmp	r2, r3
 800f104:	d263      	bcs.n	800f1ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	891a      	ldrh	r2, [r3, #8]
 800f10a:	887b      	ldrh	r3, [r7, #2]
 800f10c:	1ad3      	subs	r3, r2, r3
 800f10e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f110:	887b      	ldrh	r3, [r7, #2]
 800f112:	817b      	strh	r3, [r7, #10]
  q = p;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f118:	e018      	b.n	800f14c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	895b      	ldrh	r3, [r3, #10]
 800f11e:	897a      	ldrh	r2, [r7, #10]
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	891a      	ldrh	r2, [r3, #8]
 800f128:	893b      	ldrh	r3, [r7, #8]
 800f12a:	1ad3      	subs	r3, r2, r3
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d106      	bne.n	800f14c <pbuf_realloc+0x70>
 800f13e:	4b26      	ldr	r3, [pc, #152]	; (800f1d8 <pbuf_realloc+0xfc>)
 800f140:	f240 12af 	movw	r2, #431	; 0x1af
 800f144:	4927      	ldr	r1, [pc, #156]	; (800f1e4 <pbuf_realloc+0x108>)
 800f146:	4826      	ldr	r0, [pc, #152]	; (800f1e0 <pbuf_realloc+0x104>)
 800f148:	f00b ffa4 	bl	801b094 <iprintf>
  while (rem_len > q->len) {
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	895b      	ldrh	r3, [r3, #10]
 800f150:	897a      	ldrh	r2, [r7, #10]
 800f152:	429a      	cmp	r2, r3
 800f154:	d8e1      	bhi.n	800f11a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	7b1b      	ldrb	r3, [r3, #12]
 800f15a:	f003 030f 	and.w	r3, r3, #15
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d121      	bne.n	800f1a6 <pbuf_realloc+0xca>
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	895b      	ldrh	r3, [r3, #10]
 800f166:	897a      	ldrh	r2, [r7, #10]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d01c      	beq.n	800f1a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	7b5b      	ldrb	r3, [r3, #13]
 800f170:	f003 0302 	and.w	r3, r3, #2
 800f174:	2b00      	cmp	r3, #0
 800f176:	d116      	bne.n	800f1a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	1ad3      	subs	r3, r2, r3
 800f180:	b29a      	uxth	r2, r3
 800f182:	897b      	ldrh	r3, [r7, #10]
 800f184:	4413      	add	r3, r2
 800f186:	b29b      	uxth	r3, r3
 800f188:	4619      	mov	r1, r3
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7fe ffac 	bl	800e0e8 <mem_trim>
 800f190:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d106      	bne.n	800f1a6 <pbuf_realloc+0xca>
 800f198:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <pbuf_realloc+0xfc>)
 800f19a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800f19e:	4912      	ldr	r1, [pc, #72]	; (800f1e8 <pbuf_realloc+0x10c>)
 800f1a0:	480f      	ldr	r0, [pc, #60]	; (800f1e0 <pbuf_realloc+0x104>)
 800f1a2:	f00b ff77 	bl	801b094 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	897a      	ldrh	r2, [r7, #10]
 800f1aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	895a      	ldrh	r2, [r3, #10]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d004      	beq.n	800f1c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f000 f911 	bl	800f3e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	601a      	str	r2, [r3, #0]
 800f1cc:	e000      	b.n	800f1d0 <pbuf_realloc+0xf4>
    return;
 800f1ce:	bf00      	nop

}
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	0801e1fc 	.word	0x0801e1fc
 800f1dc:	0801e314 	.word	0x0801e314
 800f1e0:	0801e25c 	.word	0x0801e25c
 800f1e4:	0801e32c 	.word	0x0801e32c
 800f1e8:	0801e344 	.word	0x0801e344

0800f1ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d106      	bne.n	800f20e <pbuf_add_header_impl+0x22>
 800f200:	4b2b      	ldr	r3, [pc, #172]	; (800f2b0 <pbuf_add_header_impl+0xc4>)
 800f202:	f240 12df 	movw	r2, #479	; 0x1df
 800f206:	492b      	ldr	r1, [pc, #172]	; (800f2b4 <pbuf_add_header_impl+0xc8>)
 800f208:	482b      	ldr	r0, [pc, #172]	; (800f2b8 <pbuf_add_header_impl+0xcc>)
 800f20a:	f00b ff43 	bl	801b094 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d003      	beq.n	800f21c <pbuf_add_header_impl+0x30>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f21a:	d301      	bcc.n	800f220 <pbuf_add_header_impl+0x34>
    return 1;
 800f21c:	2301      	movs	r3, #1
 800f21e:	e043      	b.n	800f2a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d101      	bne.n	800f22a <pbuf_add_header_impl+0x3e>
    return 0;
 800f226:	2300      	movs	r3, #0
 800f228:	e03e      	b.n	800f2a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	891a      	ldrh	r2, [r3, #8]
 800f232:	8a7b      	ldrh	r3, [r7, #18]
 800f234:	4413      	add	r3, r2
 800f236:	b29b      	uxth	r3, r3
 800f238:	8a7a      	ldrh	r2, [r7, #18]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d901      	bls.n	800f242 <pbuf_add_header_impl+0x56>
    return 1;
 800f23e:	2301      	movs	r3, #1
 800f240:	e032      	b.n	800f2a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	7b1b      	ldrb	r3, [r3, #12]
 800f246:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f248:	8a3b      	ldrh	r3, [r7, #16]
 800f24a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00c      	beq.n	800f26c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	685a      	ldr	r2, [r3, #4]
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	425b      	negs	r3, r3
 800f25a:	4413      	add	r3, r2
 800f25c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	3310      	adds	r3, #16
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	429a      	cmp	r2, r3
 800f266:	d20d      	bcs.n	800f284 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f268:	2301      	movs	r3, #1
 800f26a:	e01d      	b.n	800f2a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f26c:	79fb      	ldrb	r3, [r7, #7]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d006      	beq.n	800f280 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	685a      	ldr	r2, [r3, #4]
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	425b      	negs	r3, r3
 800f27a:	4413      	add	r3, r2
 800f27c:	617b      	str	r3, [r7, #20]
 800f27e:	e001      	b.n	800f284 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f280:	2301      	movs	r3, #1
 800f282:	e011      	b.n	800f2a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	895a      	ldrh	r2, [r3, #10]
 800f28e:	8a7b      	ldrh	r3, [r7, #18]
 800f290:	4413      	add	r3, r2
 800f292:	b29a      	uxth	r2, r3
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	891a      	ldrh	r2, [r3, #8]
 800f29c:	8a7b      	ldrh	r3, [r7, #18]
 800f29e:	4413      	add	r3, r2
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3718      	adds	r7, #24
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	0801e1fc 	.word	0x0801e1fc
 800f2b4:	0801e360 	.word	0x0801e360
 800f2b8:	0801e25c 	.word	0x0801e25c

0800f2bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff ff8e 	bl	800f1ec <pbuf_add_header_impl>
 800f2d0:	4603      	mov	r3, r0
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	bd80      	pop	{r7, pc}
	...

0800f2dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d106      	bne.n	800f2fa <pbuf_remove_header+0x1e>
 800f2ec:	4b20      	ldr	r3, [pc, #128]	; (800f370 <pbuf_remove_header+0x94>)
 800f2ee:	f240 224b 	movw	r2, #587	; 0x24b
 800f2f2:	4920      	ldr	r1, [pc, #128]	; (800f374 <pbuf_remove_header+0x98>)
 800f2f4:	4820      	ldr	r0, [pc, #128]	; (800f378 <pbuf_remove_header+0x9c>)
 800f2f6:	f00b fecd 	bl	801b094 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <pbuf_remove_header+0x2c>
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f306:	d301      	bcc.n	800f30c <pbuf_remove_header+0x30>
    return 1;
 800f308:	2301      	movs	r3, #1
 800f30a:	e02c      	b.n	800f366 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d101      	bne.n	800f316 <pbuf_remove_header+0x3a>
    return 0;
 800f312:	2300      	movs	r3, #0
 800f314:	e027      	b.n	800f366 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	895b      	ldrh	r3, [r3, #10]
 800f31e:	89fa      	ldrh	r2, [r7, #14]
 800f320:	429a      	cmp	r2, r3
 800f322:	d908      	bls.n	800f336 <pbuf_remove_header+0x5a>
 800f324:	4b12      	ldr	r3, [pc, #72]	; (800f370 <pbuf_remove_header+0x94>)
 800f326:	f240 2255 	movw	r2, #597	; 0x255
 800f32a:	4914      	ldr	r1, [pc, #80]	; (800f37c <pbuf_remove_header+0xa0>)
 800f32c:	4812      	ldr	r0, [pc, #72]	; (800f378 <pbuf_remove_header+0x9c>)
 800f32e:	f00b feb1 	bl	801b094 <iprintf>
 800f332:	2301      	movs	r3, #1
 800f334:	e017      	b.n	800f366 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	685a      	ldr	r2, [r3, #4]
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	441a      	add	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	895a      	ldrh	r2, [r3, #10]
 800f34c:	89fb      	ldrh	r3, [r7, #14]
 800f34e:	1ad3      	subs	r3, r2, r3
 800f350:	b29a      	uxth	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	891a      	ldrh	r2, [r3, #8]
 800f35a:	89fb      	ldrh	r3, [r7, #14]
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	b29a      	uxth	r2, r3
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800f364:	2300      	movs	r3, #0
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	0801e1fc 	.word	0x0801e1fc
 800f374:	0801e360 	.word	0x0801e360
 800f378:	0801e25c 	.word	0x0801e25c
 800f37c:	0801e36c 	.word	0x0801e36c

0800f380 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	460b      	mov	r3, r1
 800f38a:	807b      	strh	r3, [r7, #2]
 800f38c:	4613      	mov	r3, r2
 800f38e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800f390:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f394:	2b00      	cmp	r3, #0
 800f396:	da08      	bge.n	800f3aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800f398:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f39c:	425b      	negs	r3, r3
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7ff ff9b 	bl	800f2dc <pbuf_remove_header>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	e007      	b.n	800f3ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800f3aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f3ae:	787a      	ldrb	r2, [r7, #1]
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff ff1a 	bl	800f1ec <pbuf_add_header_impl>
 800f3b8:	4603      	mov	r3, r0
  }
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3708      	adds	r7, #8
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b082      	sub	sp, #8
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800f3ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff ffd2 	bl	800f380 <pbuf_header_impl>
 800f3dc:	4603      	mov	r3, r0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b088      	sub	sp, #32
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10b      	bne.n	800f40e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d106      	bne.n	800f40a <pbuf_free+0x22>
 800f3fc:	4b3b      	ldr	r3, [pc, #236]	; (800f4ec <pbuf_free+0x104>)
 800f3fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f402:	493b      	ldr	r1, [pc, #236]	; (800f4f0 <pbuf_free+0x108>)
 800f404:	483b      	ldr	r0, [pc, #236]	; (800f4f4 <pbuf_free+0x10c>)
 800f406:	f00b fe45 	bl	801b094 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	e069      	b.n	800f4e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f412:	e062      	b.n	800f4da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f414:	f00a ff74 	bl	801a300 <sys_arch_protect>
 800f418:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	7b9b      	ldrb	r3, [r3, #14]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d106      	bne.n	800f430 <pbuf_free+0x48>
 800f422:	4b32      	ldr	r3, [pc, #200]	; (800f4ec <pbuf_free+0x104>)
 800f424:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f428:	4933      	ldr	r1, [pc, #204]	; (800f4f8 <pbuf_free+0x110>)
 800f42a:	4832      	ldr	r0, [pc, #200]	; (800f4f4 <pbuf_free+0x10c>)
 800f42c:	f00b fe32 	bl	801b094 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	7b9b      	ldrb	r3, [r3, #14]
 800f434:	3b01      	subs	r3, #1
 800f436:	b2da      	uxtb	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	739a      	strb	r2, [r3, #14]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	7b9b      	ldrb	r3, [r3, #14]
 800f440:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f442:	69b8      	ldr	r0, [r7, #24]
 800f444:	f00a ff6a 	bl	801a31c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f448:	7dfb      	ldrb	r3, [r7, #23]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d143      	bne.n	800f4d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	7b1b      	ldrb	r3, [r3, #12]
 800f458:	f003 030f 	and.w	r3, r3, #15
 800f45c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7b5b      	ldrb	r3, [r3, #13]
 800f462:	f003 0302 	and.w	r3, r3, #2
 800f466:	2b00      	cmp	r3, #0
 800f468:	d011      	beq.n	800f48e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <pbuf_free+0x9c>
 800f476:	4b1d      	ldr	r3, [pc, #116]	; (800f4ec <pbuf_free+0x104>)
 800f478:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f47c:	491f      	ldr	r1, [pc, #124]	; (800f4fc <pbuf_free+0x114>)
 800f47e:	481d      	ldr	r0, [pc, #116]	; (800f4f4 <pbuf_free+0x10c>)
 800f480:	f00b fe08 	bl	801b094 <iprintf>
        pc->custom_free_function(p);
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	4798      	blx	r3
 800f48c:	e01d      	b.n	800f4ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f48e:	7bfb      	ldrb	r3, [r7, #15]
 800f490:	2b02      	cmp	r3, #2
 800f492:	d104      	bne.n	800f49e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f494:	6879      	ldr	r1, [r7, #4]
 800f496:	200c      	movs	r0, #12
 800f498:	f7ff f904 	bl	800e6a4 <memp_free>
 800f49c:	e015      	b.n	800f4ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f49e:	7bfb      	ldrb	r3, [r7, #15]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d104      	bne.n	800f4ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f4a4:	6879      	ldr	r1, [r7, #4]
 800f4a6:	200b      	movs	r0, #11
 800f4a8:	f7ff f8fc 	bl	800e6a4 <memp_free>
 800f4ac:	e00d      	b.n	800f4ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f4ae:	7bfb      	ldrb	r3, [r7, #15]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d103      	bne.n	800f4bc <pbuf_free+0xd4>
          mem_free(p);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7fe fd87 	bl	800dfc8 <mem_free>
 800f4ba:	e006      	b.n	800f4ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f4bc:	4b0b      	ldr	r3, [pc, #44]	; (800f4ec <pbuf_free+0x104>)
 800f4be:	f240 320f 	movw	r2, #783	; 0x30f
 800f4c2:	490f      	ldr	r1, [pc, #60]	; (800f500 <pbuf_free+0x118>)
 800f4c4:	480b      	ldr	r0, [pc, #44]	; (800f4f4 <pbuf_free+0x10c>)
 800f4c6:	f00b fde5 	bl	801b094 <iprintf>
        }
      }
      count++;
 800f4ca:	7ffb      	ldrb	r3, [r7, #31]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	607b      	str	r3, [r7, #4]
 800f4d4:	e001      	b.n	800f4da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d199      	bne.n	800f414 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f4e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	0801e1fc 	.word	0x0801e1fc
 800f4f0:	0801e360 	.word	0x0801e360
 800f4f4:	0801e25c 	.word	0x0801e25c
 800f4f8:	0801e38c 	.word	0x0801e38c
 800f4fc:	0801e3a4 	.word	0x0801e3a4
 800f500:	0801e3c8 	.word	0x0801e3c8

0800f504 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f504:	b480      	push	{r7}
 800f506:	b085      	sub	sp, #20
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f50c:	2300      	movs	r3, #0
 800f50e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f510:	e005      	b.n	800f51e <pbuf_clen+0x1a>
    ++len;
 800f512:	89fb      	ldrh	r3, [r7, #14]
 800f514:	3301      	adds	r3, #1
 800f516:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1f6      	bne.n	800f512 <pbuf_clen+0xe>
  }
  return len;
 800f524:	89fb      	ldrh	r3, [r7, #14]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f530:	4770      	bx	lr
	...

0800f534 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b084      	sub	sp, #16
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d016      	beq.n	800f570 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f542:	f00a fedd 	bl	801a300 <sys_arch_protect>
 800f546:	60f8      	str	r0, [r7, #12]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	7b9b      	ldrb	r3, [r3, #14]
 800f54c:	3301      	adds	r3, #1
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	739a      	strb	r2, [r3, #14]
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f00a fee1 	bl	801a31c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	7b9b      	ldrb	r3, [r3, #14]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d106      	bne.n	800f570 <pbuf_ref+0x3c>
 800f562:	4b05      	ldr	r3, [pc, #20]	; (800f578 <pbuf_ref+0x44>)
 800f564:	f240 3242 	movw	r2, #834	; 0x342
 800f568:	4904      	ldr	r1, [pc, #16]	; (800f57c <pbuf_ref+0x48>)
 800f56a:	4805      	ldr	r0, [pc, #20]	; (800f580 <pbuf_ref+0x4c>)
 800f56c:	f00b fd92 	bl	801b094 <iprintf>
  }
}
 800f570:	bf00      	nop
 800f572:	3710      	adds	r7, #16
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	0801e1fc 	.word	0x0801e1fc
 800f57c:	0801e3dc 	.word	0x0801e3dc
 800f580:	0801e25c 	.word	0x0801e25c

0800f584 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d002      	beq.n	800f59a <pbuf_cat+0x16>
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d107      	bne.n	800f5aa <pbuf_cat+0x26>
 800f59a:	4b20      	ldr	r3, [pc, #128]	; (800f61c <pbuf_cat+0x98>)
 800f59c:	f240 3259 	movw	r2, #857	; 0x359
 800f5a0:	491f      	ldr	r1, [pc, #124]	; (800f620 <pbuf_cat+0x9c>)
 800f5a2:	4820      	ldr	r0, [pc, #128]	; (800f624 <pbuf_cat+0xa0>)
 800f5a4:	f00b fd76 	bl	801b094 <iprintf>
 800f5a8:	e034      	b.n	800f614 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	60fb      	str	r3, [r7, #12]
 800f5ae:	e00a      	b.n	800f5c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	891a      	ldrh	r2, [r3, #8]
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	891b      	ldrh	r3, [r3, #8]
 800f5b8:	4413      	add	r3, r2
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1f0      	bne.n	800f5b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	891a      	ldrh	r2, [r3, #8]
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	895b      	ldrh	r3, [r3, #10]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d006      	beq.n	800f5e8 <pbuf_cat+0x64>
 800f5da:	4b10      	ldr	r3, [pc, #64]	; (800f61c <pbuf_cat+0x98>)
 800f5dc:	f240 3262 	movw	r2, #866	; 0x362
 800f5e0:	4911      	ldr	r1, [pc, #68]	; (800f628 <pbuf_cat+0xa4>)
 800f5e2:	4810      	ldr	r0, [pc, #64]	; (800f624 <pbuf_cat+0xa0>)
 800f5e4:	f00b fd56 	bl	801b094 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d006      	beq.n	800f5fe <pbuf_cat+0x7a>
 800f5f0:	4b0a      	ldr	r3, [pc, #40]	; (800f61c <pbuf_cat+0x98>)
 800f5f2:	f240 3263 	movw	r2, #867	; 0x363
 800f5f6:	490d      	ldr	r1, [pc, #52]	; (800f62c <pbuf_cat+0xa8>)
 800f5f8:	480a      	ldr	r0, [pc, #40]	; (800f624 <pbuf_cat+0xa0>)
 800f5fa:	f00b fd4b 	bl	801b094 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	891a      	ldrh	r2, [r3, #8]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	891b      	ldrh	r3, [r3, #8]
 800f606:	4413      	add	r3, r2
 800f608:	b29a      	uxth	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	683a      	ldr	r2, [r7, #0]
 800f612:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f614:	3710      	adds	r7, #16
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	0801e1fc 	.word	0x0801e1fc
 800f620:	0801e3f0 	.word	0x0801e3f0
 800f624:	0801e25c 	.word	0x0801e25c
 800f628:	0801e428 	.word	0x0801e428
 800f62c:	0801e458 	.word	0x0801e458

0800f630 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b082      	sub	sp, #8
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff ffa1 	bl	800f584 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800f642:	6838      	ldr	r0, [r7, #0]
 800f644:	f7ff ff76 	bl	800f534 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800f648:	bf00      	nop
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b086      	sub	sp, #24
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f65a:	2300      	movs	r3, #0
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	2300      	movs	r3, #0
 800f660:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d008      	beq.n	800f67a <pbuf_copy+0x2a>
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d005      	beq.n	800f67a <pbuf_copy+0x2a>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	891a      	ldrh	r2, [r3, #8]
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	891b      	ldrh	r3, [r3, #8]
 800f676:	429a      	cmp	r2, r3
 800f678:	d209      	bcs.n	800f68e <pbuf_copy+0x3e>
 800f67a:	4b57      	ldr	r3, [pc, #348]	; (800f7d8 <pbuf_copy+0x188>)
 800f67c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f680:	4956      	ldr	r1, [pc, #344]	; (800f7dc <pbuf_copy+0x18c>)
 800f682:	4857      	ldr	r0, [pc, #348]	; (800f7e0 <pbuf_copy+0x190>)
 800f684:	f00b fd06 	bl	801b094 <iprintf>
 800f688:	f06f 030f 	mvn.w	r3, #15
 800f68c:	e09f      	b.n	800f7ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	895b      	ldrh	r3, [r3, #10]
 800f692:	461a      	mov	r2, r3
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	1ad2      	subs	r2, r2, r3
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	895b      	ldrh	r3, [r3, #10]
 800f69c:	4619      	mov	r1, r3
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	1acb      	subs	r3, r1, r3
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d306      	bcc.n	800f6b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	895b      	ldrh	r3, [r3, #10]
 800f6aa:	461a      	mov	r2, r3
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	60fb      	str	r3, [r7, #12]
 800f6b2:	e005      	b.n	800f6c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	895b      	ldrh	r3, [r3, #10]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	685a      	ldr	r2, [r3, #4]
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	18d0      	adds	r0, r2, r3
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	f00b fefd 	bl	801b4d2 <memcpy>
    offset_to += len;
 800f6d8:	697a      	ldr	r2, [r7, #20]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	4413      	add	r3, r2
 800f6de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f6e0:	693a      	ldr	r2, [r7, #16]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	4413      	add	r3, r2
 800f6e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	895b      	ldrh	r3, [r3, #10]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d906      	bls.n	800f702 <pbuf_copy+0xb2>
 800f6f4:	4b38      	ldr	r3, [pc, #224]	; (800f7d8 <pbuf_copy+0x188>)
 800f6f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f6fa:	493a      	ldr	r1, [pc, #232]	; (800f7e4 <pbuf_copy+0x194>)
 800f6fc:	4838      	ldr	r0, [pc, #224]	; (800f7e0 <pbuf_copy+0x190>)
 800f6fe:	f00b fcc9 	bl	801b094 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	895b      	ldrh	r3, [r3, #10]
 800f706:	461a      	mov	r2, r3
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d906      	bls.n	800f71c <pbuf_copy+0xcc>
 800f70e:	4b32      	ldr	r3, [pc, #200]	; (800f7d8 <pbuf_copy+0x188>)
 800f710:	f240 32da 	movw	r2, #986	; 0x3da
 800f714:	4934      	ldr	r1, [pc, #208]	; (800f7e8 <pbuf_copy+0x198>)
 800f716:	4832      	ldr	r0, [pc, #200]	; (800f7e0 <pbuf_copy+0x190>)
 800f718:	f00b fcbc 	bl	801b094 <iprintf>
    if (offset_from >= p_from->len) {
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	895b      	ldrh	r3, [r3, #10]
 800f720:	461a      	mov	r2, r3
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	4293      	cmp	r3, r2
 800f726:	d304      	bcc.n	800f732 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f728:	2300      	movs	r3, #0
 800f72a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	895b      	ldrh	r3, [r3, #10]
 800f736:	461a      	mov	r2, r3
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d114      	bne.n	800f768 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10c      	bne.n	800f768 <pbuf_copy+0x118>
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <pbuf_copy+0x118>
 800f754:	4b20      	ldr	r3, [pc, #128]	; (800f7d8 <pbuf_copy+0x188>)
 800f756:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f75a:	4924      	ldr	r1, [pc, #144]	; (800f7ec <pbuf_copy+0x19c>)
 800f75c:	4820      	ldr	r0, [pc, #128]	; (800f7e0 <pbuf_copy+0x190>)
 800f75e:	f00b fc99 	bl	801b094 <iprintf>
 800f762:	f06f 030f 	mvn.w	r3, #15
 800f766:	e032      	b.n	800f7ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d013      	beq.n	800f796 <pbuf_copy+0x146>
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	895a      	ldrh	r2, [r3, #10]
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	891b      	ldrh	r3, [r3, #8]
 800f776:	429a      	cmp	r2, r3
 800f778:	d10d      	bne.n	800f796 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d009      	beq.n	800f796 <pbuf_copy+0x146>
 800f782:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <pbuf_copy+0x188>)
 800f784:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f788:	4919      	ldr	r1, [pc, #100]	; (800f7f0 <pbuf_copy+0x1a0>)
 800f78a:	4815      	ldr	r0, [pc, #84]	; (800f7e0 <pbuf_copy+0x190>)
 800f78c:	f00b fc82 	bl	801b094 <iprintf>
 800f790:	f06f 0305 	mvn.w	r3, #5
 800f794:	e01b      	b.n	800f7ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d013      	beq.n	800f7c4 <pbuf_copy+0x174>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	895a      	ldrh	r2, [r3, #10]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	891b      	ldrh	r3, [r3, #8]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d10d      	bne.n	800f7c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d009      	beq.n	800f7c4 <pbuf_copy+0x174>
 800f7b0:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <pbuf_copy+0x188>)
 800f7b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f7b6:	490e      	ldr	r1, [pc, #56]	; (800f7f0 <pbuf_copy+0x1a0>)
 800f7b8:	4809      	ldr	r0, [pc, #36]	; (800f7e0 <pbuf_copy+0x190>)
 800f7ba:	f00b fc6b 	bl	801b094 <iprintf>
 800f7be:	f06f 0305 	mvn.w	r3, #5
 800f7c2:	e004      	b.n	800f7ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f47f af61 	bne.w	800f68e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	0801e1fc 	.word	0x0801e1fc
 800f7dc:	0801e4a4 	.word	0x0801e4a4
 800f7e0:	0801e25c 	.word	0x0801e25c
 800f7e4:	0801e4d4 	.word	0x0801e4d4
 800f7e8:	0801e4ec 	.word	0x0801e4ec
 800f7ec:	0801e508 	.word	0x0801e508
 800f7f0:	0801e518 	.word	0x0801e518

0800f7f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b088      	sub	sp, #32
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4611      	mov	r1, r2
 800f800:	461a      	mov	r2, r3
 800f802:	460b      	mov	r3, r1
 800f804:	80fb      	strh	r3, [r7, #6]
 800f806:	4613      	mov	r3, r2
 800f808:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f80a:	2300      	movs	r3, #0
 800f80c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f80e:	2300      	movs	r3, #0
 800f810:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d108      	bne.n	800f82a <pbuf_copy_partial+0x36>
 800f818:	4b2b      	ldr	r3, [pc, #172]	; (800f8c8 <pbuf_copy_partial+0xd4>)
 800f81a:	f240 420a 	movw	r2, #1034	; 0x40a
 800f81e:	492b      	ldr	r1, [pc, #172]	; (800f8cc <pbuf_copy_partial+0xd8>)
 800f820:	482b      	ldr	r0, [pc, #172]	; (800f8d0 <pbuf_copy_partial+0xdc>)
 800f822:	f00b fc37 	bl	801b094 <iprintf>
 800f826:	2300      	movs	r3, #0
 800f828:	e04a      	b.n	800f8c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d108      	bne.n	800f842 <pbuf_copy_partial+0x4e>
 800f830:	4b25      	ldr	r3, [pc, #148]	; (800f8c8 <pbuf_copy_partial+0xd4>)
 800f832:	f240 420b 	movw	r2, #1035	; 0x40b
 800f836:	4927      	ldr	r1, [pc, #156]	; (800f8d4 <pbuf_copy_partial+0xe0>)
 800f838:	4825      	ldr	r0, [pc, #148]	; (800f8d0 <pbuf_copy_partial+0xdc>)
 800f83a:	f00b fc2b 	bl	801b094 <iprintf>
 800f83e:	2300      	movs	r3, #0
 800f840:	e03e      	b.n	800f8c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	61fb      	str	r3, [r7, #28]
 800f846:	e034      	b.n	800f8b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f848:	88bb      	ldrh	r3, [r7, #4]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00a      	beq.n	800f864 <pbuf_copy_partial+0x70>
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	895b      	ldrh	r3, [r3, #10]
 800f852:	88ba      	ldrh	r2, [r7, #4]
 800f854:	429a      	cmp	r2, r3
 800f856:	d305      	bcc.n	800f864 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	895b      	ldrh	r3, [r3, #10]
 800f85c:	88ba      	ldrh	r2, [r7, #4]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	80bb      	strh	r3, [r7, #4]
 800f862:	e023      	b.n	800f8ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	895a      	ldrh	r2, [r3, #10]
 800f868:	88bb      	ldrh	r3, [r7, #4]
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f86e:	8b3a      	ldrh	r2, [r7, #24]
 800f870:	88fb      	ldrh	r3, [r7, #6]
 800f872:	429a      	cmp	r2, r3
 800f874:	d901      	bls.n	800f87a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f876:	88fb      	ldrh	r3, [r7, #6]
 800f878:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f87a:	8b7b      	ldrh	r3, [r7, #26]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	18d0      	adds	r0, r2, r3
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	685a      	ldr	r2, [r3, #4]
 800f884:	88bb      	ldrh	r3, [r7, #4]
 800f886:	4413      	add	r3, r2
 800f888:	8b3a      	ldrh	r2, [r7, #24]
 800f88a:	4619      	mov	r1, r3
 800f88c:	f00b fe21 	bl	801b4d2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f890:	8afa      	ldrh	r2, [r7, #22]
 800f892:	8b3b      	ldrh	r3, [r7, #24]
 800f894:	4413      	add	r3, r2
 800f896:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f898:	8b7a      	ldrh	r2, [r7, #26]
 800f89a:	8b3b      	ldrh	r3, [r7, #24]
 800f89c:	4413      	add	r3, r2
 800f89e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f8a0:	88fa      	ldrh	r2, [r7, #6]
 800f8a2:	8b3b      	ldrh	r3, [r7, #24]
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	61fb      	str	r3, [r7, #28]
 800f8b2:	88fb      	ldrh	r3, [r7, #6]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d002      	beq.n	800f8be <pbuf_copy_partial+0xca>
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d1c4      	bne.n	800f848 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f8be:	8afb      	ldrh	r3, [r7, #22]
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3720      	adds	r7, #32
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}
 800f8c8:	0801e1fc 	.word	0x0801e1fc
 800f8cc:	0801e544 	.word	0x0801e544
 800f8d0:	0801e25c 	.word	0x0801e25c
 800f8d4:	0801e564 	.word	0x0801e564

0800f8d8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	460b      	mov	r3, r1
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f8e6:	897b      	ldrh	r3, [r7, #10]
 800f8e8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f8ee:	e007      	b.n	800f900 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	895b      	ldrh	r3, [r3, #10]
 800f8f4:	8afa      	ldrh	r2, [r7, #22]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d004      	beq.n	800f910 <pbuf_skip_const+0x38>
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	895b      	ldrh	r3, [r3, #10]
 800f90a:	8afa      	ldrh	r2, [r7, #22]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d2ef      	bcs.n	800f8f0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d002      	beq.n	800f91c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	8afa      	ldrh	r2, [r7, #22]
 800f91a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f91c:	693b      	ldr	r3, [r7, #16]
}
 800f91e:	4618      	mov	r0, r3
 800f920:	371c      	adds	r7, #28
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr

0800f92a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b086      	sub	sp, #24
 800f92e:	af00      	add	r7, sp, #0
 800f930:	60f8      	str	r0, [r7, #12]
 800f932:	460b      	mov	r3, r1
 800f934:	607a      	str	r2, [r7, #4]
 800f936:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f938:	897b      	ldrh	r3, [r7, #10]
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	4619      	mov	r1, r3
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f7ff ffca 	bl	800f8d8 <pbuf_skip_const>
 800f944:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f946:	697b      	ldr	r3, [r7, #20]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3718      	adds	r7, #24
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	4603      	mov	r3, r0
 800f958:	603a      	str	r2, [r7, #0]
 800f95a:	71fb      	strb	r3, [r7, #7]
 800f95c:	460b      	mov	r3, r1
 800f95e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	8919      	ldrh	r1, [r3, #8]
 800f964:	88ba      	ldrh	r2, [r7, #4]
 800f966:	79fb      	ldrb	r3, [r7, #7]
 800f968:	4618      	mov	r0, r3
 800f96a:	f7ff fa55 	bl	800ee18 <pbuf_alloc>
 800f96e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <pbuf_clone+0x2a>
    return NULL;
 800f976:	2300      	movs	r3, #0
 800f978:	e011      	b.n	800f99e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f97a:	6839      	ldr	r1, [r7, #0]
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f7ff fe67 	bl	800f650 <pbuf_copy>
 800f982:	4603      	mov	r3, r0
 800f984:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f986:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d006      	beq.n	800f99c <pbuf_clone+0x4c>
 800f98e:	4b06      	ldr	r3, [pc, #24]	; (800f9a8 <pbuf_clone+0x58>)
 800f990:	f240 5224 	movw	r2, #1316	; 0x524
 800f994:	4905      	ldr	r1, [pc, #20]	; (800f9ac <pbuf_clone+0x5c>)
 800f996:	4806      	ldr	r0, [pc, #24]	; (800f9b0 <pbuf_clone+0x60>)
 800f998:	f00b fb7c 	bl	801b094 <iprintf>
  return q;
 800f99c:	68fb      	ldr	r3, [r7, #12]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	0801e1fc 	.word	0x0801e1fc
 800f9ac:	0801e670 	.word	0x0801e670
 800f9b0:	0801e25c 	.word	0x0801e25c

0800f9b4 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800f9c0:	887b      	ldrh	r3, [r7, #2]
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 f80c 	bl	800f9e2 <pbuf_try_get_at>
 800f9ca:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	db02      	blt.n	800f9d8 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	e000      	b.n	800f9da <pbuf_get_at+0x26>
  }
  return 0;
 800f9d8:	2300      	movs	r3, #0
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800f9ee:	f107 020a 	add.w	r2, r7, #10
 800f9f2:	887b      	ldrh	r3, [r7, #2]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff ff6e 	bl	800f8d8 <pbuf_skip_const>
 800f9fc:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00a      	beq.n	800fa1a <pbuf_try_get_at+0x38>
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	895a      	ldrh	r2, [r3, #10]
 800fa08:	897b      	ldrh	r3, [r7, #10]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d905      	bls.n	800fa1a <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	897a      	ldrh	r2, [r7, #10]
 800fa14:	4413      	add	r3, r2
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	e001      	b.n	800fa1e <pbuf_try_get_at+0x3c>
  }
  return -1;
 800fa1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	807b      	strh	r3, [r7, #2]
 800fa32:	4613      	mov	r3, r2
 800fa34:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800fa36:	f107 020a 	add.w	r2, r7, #10
 800fa3a:	887b      	ldrh	r3, [r7, #2]
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f7ff ff73 	bl	800f92a <pbuf_skip>
 800fa44:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d00a      	beq.n	800fa62 <pbuf_put_at+0x3c>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	895a      	ldrh	r2, [r3, #10]
 800fa50:	897b      	ldrh	r3, [r7, #10]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d905      	bls.n	800fa62 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	897a      	ldrh	r2, [r7, #10]
 800fa5c:	4413      	add	r3, r2
 800fa5e:	787a      	ldrb	r2, [r7, #1]
 800fa60:	701a      	strb	r2, [r3, #0]
  }
}
 800fa62:	bf00      	nop
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
	...

0800fa6c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800fa70:	f00a fd2e 	bl	801a4d0 <rand>
 800fa74:	4603      	mov	r3, r0
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	4b01      	ldr	r3, [pc, #4]	; (800fa8c <tcp_init+0x20>)
 800fa86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800fa88:	bf00      	nop
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	200000b0 	.word	0x200000b0

0800fa90 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	7d1b      	ldrb	r3, [r3, #20]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d105      	bne.n	800faac <tcp_free+0x1c>
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <tcp_free+0x2c>)
 800faa2:	22d4      	movs	r2, #212	; 0xd4
 800faa4:	4906      	ldr	r1, [pc, #24]	; (800fac0 <tcp_free+0x30>)
 800faa6:	4807      	ldr	r0, [pc, #28]	; (800fac4 <tcp_free+0x34>)
 800faa8:	f00b faf4 	bl	801b094 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800faac:	6879      	ldr	r1, [r7, #4]
 800faae:	2001      	movs	r0, #1
 800fab0:	f7fe fdf8 	bl	800e6a4 <memp_free>
}
 800fab4:	bf00      	nop
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	0801e6fc 	.word	0x0801e6fc
 800fac0:	0801e72c 	.word	0x0801e72c
 800fac4:	0801e740 	.word	0x0801e740

0800fac8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	7d1b      	ldrb	r3, [r3, #20]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d105      	bne.n	800fae4 <tcp_free_listen+0x1c>
 800fad8:	4b06      	ldr	r3, [pc, #24]	; (800faf4 <tcp_free_listen+0x2c>)
 800fada:	22df      	movs	r2, #223	; 0xdf
 800fadc:	4906      	ldr	r1, [pc, #24]	; (800faf8 <tcp_free_listen+0x30>)
 800fade:	4807      	ldr	r0, [pc, #28]	; (800fafc <tcp_free_listen+0x34>)
 800fae0:	f00b fad8 	bl	801b094 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800fae4:	6879      	ldr	r1, [r7, #4]
 800fae6:	2002      	movs	r0, #2
 800fae8:	f7fe fddc 	bl	800e6a4 <memp_free>
}
 800faec:	bf00      	nop
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	0801e6fc 	.word	0x0801e6fc
 800faf8:	0801e768 	.word	0x0801e768
 800fafc:	0801e740 	.word	0x0801e740

0800fb00 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800fb04:	f000 fea4 	bl	8010850 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800fb08:	4b07      	ldr	r3, [pc, #28]	; (800fb28 <tcp_tmr+0x28>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	4b05      	ldr	r3, [pc, #20]	; (800fb28 <tcp_tmr+0x28>)
 800fb12:	701a      	strb	r2, [r3, #0]
 800fb14:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <tcp_tmr+0x28>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	f003 0301 	and.w	r3, r3, #1
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d001      	beq.n	800fb24 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800fb20:	f000 fb56 	bl	80101d0 <tcp_slowtmr>
  }
}
 800fb24:	bf00      	nop
 800fb26:	bd80      	pop	{r7, pc}
 800fb28:	20013d85 	.word	0x20013d85

0800fb2c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d105      	bne.n	800fb48 <tcp_remove_listener+0x1c>
 800fb3c:	4b0d      	ldr	r3, [pc, #52]	; (800fb74 <tcp_remove_listener+0x48>)
 800fb3e:	22ff      	movs	r2, #255	; 0xff
 800fb40:	490d      	ldr	r1, [pc, #52]	; (800fb78 <tcp_remove_listener+0x4c>)
 800fb42:	480e      	ldr	r0, [pc, #56]	; (800fb7c <tcp_remove_listener+0x50>)
 800fb44:	f00b faa6 	bl	801b094 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	60fb      	str	r3, [r7, #12]
 800fb4c:	e00a      	b.n	800fb64 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d102      	bne.n	800fb5e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	60fb      	str	r3, [r7, #12]
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d1f1      	bne.n	800fb4e <tcp_remove_listener+0x22>
    }
  }
}
 800fb6a:	bf00      	nop
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	0801e6fc 	.word	0x0801e6fc
 800fb78:	0801e784 	.word	0x0801e784
 800fb7c:	0801e740 	.word	0x0801e740

0800fb80 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d106      	bne.n	800fb9c <tcp_listen_closed+0x1c>
 800fb8e:	4b14      	ldr	r3, [pc, #80]	; (800fbe0 <tcp_listen_closed+0x60>)
 800fb90:	f240 1211 	movw	r2, #273	; 0x111
 800fb94:	4913      	ldr	r1, [pc, #76]	; (800fbe4 <tcp_listen_closed+0x64>)
 800fb96:	4814      	ldr	r0, [pc, #80]	; (800fbe8 <tcp_listen_closed+0x68>)
 800fb98:	f00b fa7c 	bl	801b094 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	7d1b      	ldrb	r3, [r3, #20]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d006      	beq.n	800fbb2 <tcp_listen_closed+0x32>
 800fba4:	4b0e      	ldr	r3, [pc, #56]	; (800fbe0 <tcp_listen_closed+0x60>)
 800fba6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800fbaa:	4910      	ldr	r1, [pc, #64]	; (800fbec <tcp_listen_closed+0x6c>)
 800fbac:	480e      	ldr	r0, [pc, #56]	; (800fbe8 <tcp_listen_closed+0x68>)
 800fbae:	f00b fa71 	bl	801b094 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	60fb      	str	r3, [r7, #12]
 800fbb6:	e00b      	b.n	800fbd0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800fbb8:	4a0d      	ldr	r2, [pc, #52]	; (800fbf0 <tcp_listen_closed+0x70>)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	6879      	ldr	r1, [r7, #4]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff ffb1 	bl	800fb2c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b03      	cmp	r3, #3
 800fbd4:	d9f0      	bls.n	800fbb8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800fbd6:	bf00      	nop
 800fbd8:	bf00      	nop
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	0801e6fc 	.word	0x0801e6fc
 800fbe4:	0801e7ac 	.word	0x0801e7ac
 800fbe8:	0801e740 	.word	0x0801e740
 800fbec:	0801e7b8 	.word	0x0801e7b8
 800fbf0:	0806c7c8 	.word	0x0806c7c8

0800fbf4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800fbf4:	b5b0      	push	{r4, r5, r7, lr}
 800fbf6:	b088      	sub	sp, #32
 800fbf8:	af04      	add	r7, sp, #16
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d106      	bne.n	800fc14 <tcp_close_shutdown+0x20>
 800fc06:	4b63      	ldr	r3, [pc, #396]	; (800fd94 <tcp_close_shutdown+0x1a0>)
 800fc08:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800fc0c:	4962      	ldr	r1, [pc, #392]	; (800fd98 <tcp_close_shutdown+0x1a4>)
 800fc0e:	4863      	ldr	r0, [pc, #396]	; (800fd9c <tcp_close_shutdown+0x1a8>)
 800fc10:	f00b fa40 	bl	801b094 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d067      	beq.n	800fcea <tcp_close_shutdown+0xf6>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	7d1b      	ldrb	r3, [r3, #20]
 800fc1e:	2b04      	cmp	r3, #4
 800fc20:	d003      	beq.n	800fc2a <tcp_close_shutdown+0x36>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	7d1b      	ldrb	r3, [r3, #20]
 800fc26:	2b07      	cmp	r3, #7
 800fc28:	d15f      	bne.n	800fcea <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d105      	bne.n	800fc3e <tcp_close_shutdown+0x4a>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc36:	f642 52a0 	movw	r2, #11680	; 0x2da0
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d055      	beq.n	800fcea <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8b5b      	ldrh	r3, [r3, #26]
 800fc42:	f003 0310 	and.w	r3, r3, #16
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d106      	bne.n	800fc58 <tcp_close_shutdown+0x64>
 800fc4a:	4b52      	ldr	r3, [pc, #328]	; (800fd94 <tcp_close_shutdown+0x1a0>)
 800fc4c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800fc50:	4953      	ldr	r1, [pc, #332]	; (800fda0 <tcp_close_shutdown+0x1ac>)
 800fc52:	4852      	ldr	r0, [pc, #328]	; (800fd9c <tcp_close_shutdown+0x1a8>)
 800fc54:	f00b fa1e 	bl	801b094 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fc60:	687d      	ldr	r5, [r7, #4]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	3304      	adds	r3, #4
 800fc66:	687a      	ldr	r2, [r7, #4]
 800fc68:	8ad2      	ldrh	r2, [r2, #22]
 800fc6a:	6879      	ldr	r1, [r7, #4]
 800fc6c:	8b09      	ldrh	r1, [r1, #24]
 800fc6e:	9102      	str	r1, [sp, #8]
 800fc70:	9201      	str	r2, [sp, #4]
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	462b      	mov	r3, r5
 800fc76:	4622      	mov	r2, r4
 800fc78:	4601      	mov	r1, r0
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f004 fedc 	bl	8014a38 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f001 f8c9 	bl	8010e18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800fc86:	4b47      	ldr	r3, [pc, #284]	; (800fda4 <tcp_close_shutdown+0x1b0>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d105      	bne.n	800fc9c <tcp_close_shutdown+0xa8>
 800fc90:	4b44      	ldr	r3, [pc, #272]	; (800fda4 <tcp_close_shutdown+0x1b0>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	4a43      	ldr	r2, [pc, #268]	; (800fda4 <tcp_close_shutdown+0x1b0>)
 800fc98:	6013      	str	r3, [r2, #0]
 800fc9a:	e013      	b.n	800fcc4 <tcp_close_shutdown+0xd0>
 800fc9c:	4b41      	ldr	r3, [pc, #260]	; (800fda4 <tcp_close_shutdown+0x1b0>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	e00c      	b.n	800fcbe <tcp_close_shutdown+0xca>
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	68db      	ldr	r3, [r3, #12]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d104      	bne.n	800fcb8 <tcp_close_shutdown+0xc4>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	60da      	str	r2, [r3, #12]
 800fcb6:	e005      	b.n	800fcc4 <tcp_close_shutdown+0xd0>
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	68db      	ldr	r3, [r3, #12]
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d1ef      	bne.n	800fca4 <tcp_close_shutdown+0xb0>
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	60da      	str	r2, [r3, #12]
 800fcca:	4b37      	ldr	r3, [pc, #220]	; (800fda8 <tcp_close_shutdown+0x1b4>)
 800fccc:	2201      	movs	r2, #1
 800fcce:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800fcd0:	4b36      	ldr	r3, [pc, #216]	; (800fdac <tcp_close_shutdown+0x1b8>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d102      	bne.n	800fce0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800fcda:	f003 fd75 	bl	80137c8 <tcp_trigger_input_pcb_close>
 800fcde:	e002      	b.n	800fce6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7ff fed5 	bl	800fa90 <tcp_free>
      }
      return ERR_OK;
 800fce6:	2300      	movs	r3, #0
 800fce8:	e050      	b.n	800fd8c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	7d1b      	ldrb	r3, [r3, #20]
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d03b      	beq.n	800fd6a <tcp_close_shutdown+0x176>
 800fcf2:	2b02      	cmp	r3, #2
 800fcf4:	dc44      	bgt.n	800fd80 <tcp_close_shutdown+0x18c>
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <tcp_close_shutdown+0x10c>
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d02a      	beq.n	800fd54 <tcp_close_shutdown+0x160>
 800fcfe:	e03f      	b.n	800fd80 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	8adb      	ldrh	r3, [r3, #22]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d021      	beq.n	800fd4c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fd08:	4b29      	ldr	r3, [pc, #164]	; (800fdb0 <tcp_close_shutdown+0x1bc>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	687a      	ldr	r2, [r7, #4]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d105      	bne.n	800fd1e <tcp_close_shutdown+0x12a>
 800fd12:	4b27      	ldr	r3, [pc, #156]	; (800fdb0 <tcp_close_shutdown+0x1bc>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	4a25      	ldr	r2, [pc, #148]	; (800fdb0 <tcp_close_shutdown+0x1bc>)
 800fd1a:	6013      	str	r3, [r2, #0]
 800fd1c:	e013      	b.n	800fd46 <tcp_close_shutdown+0x152>
 800fd1e:	4b24      	ldr	r3, [pc, #144]	; (800fdb0 <tcp_close_shutdown+0x1bc>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	60bb      	str	r3, [r7, #8]
 800fd24:	e00c      	b.n	800fd40 <tcp_close_shutdown+0x14c>
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	687a      	ldr	r2, [r7, #4]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d104      	bne.n	800fd3a <tcp_close_shutdown+0x146>
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68da      	ldr	r2, [r3, #12]
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	60da      	str	r2, [r3, #12]
 800fd38:	e005      	b.n	800fd46 <tcp_close_shutdown+0x152>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	60bb      	str	r3, [r7, #8]
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1ef      	bne.n	800fd26 <tcp_close_shutdown+0x132>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7ff fe9f 	bl	800fa90 <tcp_free>
      break;
 800fd52:	e01a      	b.n	800fd8a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff ff13 	bl	800fb80 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800fd5a:	6879      	ldr	r1, [r7, #4]
 800fd5c:	4815      	ldr	r0, [pc, #84]	; (800fdb4 <tcp_close_shutdown+0x1c0>)
 800fd5e:	f001 f8ab 	bl	8010eb8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7ff feb0 	bl	800fac8 <tcp_free_listen>
      break;
 800fd68:	e00f      	b.n	800fd8a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fd6a:	6879      	ldr	r1, [r7, #4]
 800fd6c:	480d      	ldr	r0, [pc, #52]	; (800fda4 <tcp_close_shutdown+0x1b0>)
 800fd6e:	f001 f8a3 	bl	8010eb8 <tcp_pcb_remove>
 800fd72:	4b0d      	ldr	r3, [pc, #52]	; (800fda8 <tcp_close_shutdown+0x1b4>)
 800fd74:	2201      	movs	r2, #1
 800fd76:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7ff fe89 	bl	800fa90 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800fd7e:	e004      	b.n	800fd8a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f819 	bl	800fdb8 <tcp_close_shutdown_fin>
 800fd86:	4603      	mov	r3, r0
 800fd88:	e000      	b.n	800fd8c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3710      	adds	r7, #16
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bdb0      	pop	{r4, r5, r7, pc}
 800fd94:	0801e6fc 	.word	0x0801e6fc
 800fd98:	0801e7d0 	.word	0x0801e7d0
 800fd9c:	0801e740 	.word	0x0801e740
 800fda0:	0801e7f0 	.word	0x0801e7f0
 800fda4:	20013d7c 	.word	0x20013d7c
 800fda8:	20013d84 	.word	0x20013d84
 800fdac:	20013dc0 	.word	0x20013dc0
 800fdb0:	20013d74 	.word	0x20013d74
 800fdb4:	20013d78 	.word	0x20013d78

0800fdb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b084      	sub	sp, #16
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d106      	bne.n	800fdd4 <tcp_close_shutdown_fin+0x1c>
 800fdc6:	4b2e      	ldr	r3, [pc, #184]	; (800fe80 <tcp_close_shutdown_fin+0xc8>)
 800fdc8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800fdcc:	492d      	ldr	r1, [pc, #180]	; (800fe84 <tcp_close_shutdown_fin+0xcc>)
 800fdce:	482e      	ldr	r0, [pc, #184]	; (800fe88 <tcp_close_shutdown_fin+0xd0>)
 800fdd0:	f00b f960 	bl	801b094 <iprintf>

  switch (pcb->state) {
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7d1b      	ldrb	r3, [r3, #20]
 800fdd8:	2b07      	cmp	r3, #7
 800fdda:	d020      	beq.n	800fe1e <tcp_close_shutdown_fin+0x66>
 800fddc:	2b07      	cmp	r3, #7
 800fdde:	dc2b      	bgt.n	800fe38 <tcp_close_shutdown_fin+0x80>
 800fde0:	2b03      	cmp	r3, #3
 800fde2:	d002      	beq.n	800fdea <tcp_close_shutdown_fin+0x32>
 800fde4:	2b04      	cmp	r3, #4
 800fde6:	d00d      	beq.n	800fe04 <tcp_close_shutdown_fin+0x4c>
 800fde8:	e026      	b.n	800fe38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f003 ff04 	bl	8013bf8 <tcp_send_fin>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fdf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d11f      	bne.n	800fe3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2205      	movs	r2, #5
 800fe00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe02:	e01b      	b.n	800fe3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f003 fef7 	bl	8013bf8 <tcp_send_fin>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d114      	bne.n	800fe40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2205      	movs	r2, #5
 800fe1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe1c:	e010      	b.n	800fe40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f003 feea 	bl	8013bf8 <tcp_send_fin>
 800fe24:	4603      	mov	r3, r0
 800fe26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800fe28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d109      	bne.n	800fe44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2209      	movs	r2, #9
 800fe34:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe36:	e005      	b.n	800fe44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	e01c      	b.n	800fe76 <tcp_close_shutdown_fin+0xbe>
      break;
 800fe3c:	bf00      	nop
 800fe3e:	e002      	b.n	800fe46 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe40:	bf00      	nop
 800fe42:	e000      	b.n	800fe46 <tcp_close_shutdown_fin+0x8e>
      break;
 800fe44:	bf00      	nop
  }

  if (err == ERR_OK) {
 800fe46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d103      	bne.n	800fe56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f004 f810 	bl	8013e74 <tcp_output>
 800fe54:	e00d      	b.n	800fe72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800fe56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe5e:	d108      	bne.n	800fe72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	8b5b      	ldrh	r3, [r3, #26]
 800fe64:	f043 0308 	orr.w	r3, r3, #8
 800fe68:	b29a      	uxth	r2, r3
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e001      	b.n	800fe76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800fe72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	0801e6fc 	.word	0x0801e6fc
 800fe84:	0801e7ac 	.word	0x0801e7ac
 800fe88:	0801e740 	.word	0x0801e740

0800fe8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b082      	sub	sp, #8
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d109      	bne.n	800feae <tcp_close+0x22>
 800fe9a:	4b0f      	ldr	r3, [pc, #60]	; (800fed8 <tcp_close+0x4c>)
 800fe9c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800fea0:	490e      	ldr	r1, [pc, #56]	; (800fedc <tcp_close+0x50>)
 800fea2:	480f      	ldr	r0, [pc, #60]	; (800fee0 <tcp_close+0x54>)
 800fea4:	f00b f8f6 	bl	801b094 <iprintf>
 800fea8:	f06f 030f 	mvn.w	r3, #15
 800feac:	e00f      	b.n	800fece <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	7d1b      	ldrb	r3, [r3, #20]
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d006      	beq.n	800fec4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	8b5b      	ldrh	r3, [r3, #26]
 800feba:	f043 0310 	orr.w	r3, r3, #16
 800febe:	b29a      	uxth	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800fec4:	2101      	movs	r1, #1
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff fe94 	bl	800fbf4 <tcp_close_shutdown>
 800fecc:	4603      	mov	r3, r0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3708      	adds	r7, #8
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	0801e6fc 	.word	0x0801e6fc
 800fedc:	0801e80c 	.word	0x0801e80c
 800fee0:	0801e740 	.word	0x0801e740

0800fee4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b08e      	sub	sp, #56	; 0x38
 800fee8:	af04      	add	r7, sp, #16
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d107      	bne.n	800ff04 <tcp_abandon+0x20>
 800fef4:	4b52      	ldr	r3, [pc, #328]	; (8010040 <tcp_abandon+0x15c>)
 800fef6:	f240 223d 	movw	r2, #573	; 0x23d
 800fefa:	4952      	ldr	r1, [pc, #328]	; (8010044 <tcp_abandon+0x160>)
 800fefc:	4852      	ldr	r0, [pc, #328]	; (8010048 <tcp_abandon+0x164>)
 800fefe:	f00b f8c9 	bl	801b094 <iprintf>
 800ff02:	e099      	b.n	8010038 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	7d1b      	ldrb	r3, [r3, #20]
 800ff08:	2b01      	cmp	r3, #1
 800ff0a:	d106      	bne.n	800ff1a <tcp_abandon+0x36>
 800ff0c:	4b4c      	ldr	r3, [pc, #304]	; (8010040 <tcp_abandon+0x15c>)
 800ff0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800ff12:	494e      	ldr	r1, [pc, #312]	; (801004c <tcp_abandon+0x168>)
 800ff14:	484c      	ldr	r0, [pc, #304]	; (8010048 <tcp_abandon+0x164>)
 800ff16:	f00b f8bd 	bl	801b094 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	7d1b      	ldrb	r3, [r3, #20]
 800ff1e:	2b0a      	cmp	r3, #10
 800ff20:	d107      	bne.n	800ff32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	484a      	ldr	r0, [pc, #296]	; (8010050 <tcp_abandon+0x16c>)
 800ff26:	f000 ffc7 	bl	8010eb8 <tcp_pcb_remove>
    tcp_free(pcb);
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f7ff fdb0 	bl	800fa90 <tcp_free>
 800ff30:	e082      	b.n	8010038 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ff36:	2300      	movs	r3, #0
 800ff38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d126      	bne.n	800ffaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	8adb      	ldrh	r3, [r3, #22]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d02e      	beq.n	800ffc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ff64:	4b3b      	ldr	r3, [pc, #236]	; (8010054 <tcp_abandon+0x170>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d105      	bne.n	800ff7a <tcp_abandon+0x96>
 800ff6e:	4b39      	ldr	r3, [pc, #228]	; (8010054 <tcp_abandon+0x170>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	4a37      	ldr	r2, [pc, #220]	; (8010054 <tcp_abandon+0x170>)
 800ff76:	6013      	str	r3, [r2, #0]
 800ff78:	e013      	b.n	800ffa2 <tcp_abandon+0xbe>
 800ff7a:	4b36      	ldr	r3, [pc, #216]	; (8010054 <tcp_abandon+0x170>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	61fb      	str	r3, [r7, #28]
 800ff80:	e00c      	b.n	800ff9c <tcp_abandon+0xb8>
 800ff82:	69fb      	ldr	r3, [r7, #28]
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d104      	bne.n	800ff96 <tcp_abandon+0xb2>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	68da      	ldr	r2, [r3, #12]
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	60da      	str	r2, [r3, #12]
 800ff94:	e005      	b.n	800ffa2 <tcp_abandon+0xbe>
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	61fb      	str	r3, [r7, #28]
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1ef      	bne.n	800ff82 <tcp_abandon+0x9e>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	60da      	str	r2, [r3, #12]
 800ffa8:	e00b      	b.n	800ffc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	8adb      	ldrh	r3, [r3, #22]
 800ffb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ffb4:	6879      	ldr	r1, [r7, #4]
 800ffb6:	4828      	ldr	r0, [pc, #160]	; (8010058 <tcp_abandon+0x174>)
 800ffb8:	f000 ff7e 	bl	8010eb8 <tcp_pcb_remove>
 800ffbc:	4b27      	ldr	r3, [pc, #156]	; (801005c <tcp_abandon+0x178>)
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d004      	beq.n	800ffd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f000 fd20 	bl	8010a14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d004      	beq.n	800ffe6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f000 fd17 	bl	8010a14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d004      	beq.n	800fff8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff2:	4618      	mov	r0, r3
 800fff4:	f000 fd0e 	bl	8010a14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d00e      	beq.n	801001c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	3304      	adds	r3, #4
 8010004:	687a      	ldr	r2, [r7, #4]
 8010006:	8b12      	ldrh	r2, [r2, #24]
 8010008:	9202      	str	r2, [sp, #8]
 801000a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801000c:	9201      	str	r2, [sp, #4]
 801000e:	9300      	str	r3, [sp, #0]
 8010010:	460b      	mov	r3, r1
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	69b9      	ldr	r1, [r7, #24]
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f004 fd0e 	bl	8014a38 <tcp_rst>
    }
    last_state = pcb->state;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7d1b      	ldrb	r3, [r3, #20]
 8010020:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f7ff fd34 	bl	800fa90 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010028:	693b      	ldr	r3, [r7, #16]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d004      	beq.n	8010038 <tcp_abandon+0x154>
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	f06f 010c 	mvn.w	r1, #12
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	4798      	blx	r3
  }
}
 8010038:	3728      	adds	r7, #40	; 0x28
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}
 801003e:	bf00      	nop
 8010040:	0801e6fc 	.word	0x0801e6fc
 8010044:	0801e840 	.word	0x0801e840
 8010048:	0801e740 	.word	0x0801e740
 801004c:	0801e85c 	.word	0x0801e85c
 8010050:	20013d80 	.word	0x20013d80
 8010054:	20013d74 	.word	0x20013d74
 8010058:	20013d7c 	.word	0x20013d7c
 801005c:	20013d84 	.word	0x20013d84

08010060 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010068:	2101      	movs	r1, #1
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f7ff ff3a 	bl	800fee4 <tcp_abandon>
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}

08010078 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b084      	sub	sp, #16
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d106      	bne.n	8010094 <tcp_update_rcv_ann_wnd+0x1c>
 8010086:	4b25      	ldr	r3, [pc, #148]	; (801011c <tcp_update_rcv_ann_wnd+0xa4>)
 8010088:	f240 32a6 	movw	r2, #934	; 0x3a6
 801008c:	4924      	ldr	r1, [pc, #144]	; (8010120 <tcp_update_rcv_ann_wnd+0xa8>)
 801008e:	4825      	ldr	r0, [pc, #148]	; (8010124 <tcp_update_rcv_ann_wnd+0xac>)
 8010090:	f00b f800 	bl	801b094 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801009c:	4413      	add	r3, r2
 801009e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80100a8:	f241 61d0 	movw	r1, #5840	; 0x16d0
 80100ac:	428a      	cmp	r2, r1
 80100ae:	bf28      	it	cs
 80100b0:	460a      	movcs	r2, r1
 80100b2:	b292      	uxth	r2, r2
 80100b4:	4413      	add	r3, r2
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	db08      	blt.n	80100d0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	1ad3      	subs	r3, r2, r3
 80100ce:	e020      	b.n	8010112 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	1ad3      	subs	r3, r2, r3
 80100da:	2b00      	cmp	r3, #0
 80100dc:	dd03      	ble.n	80100e6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80100e4:	e014      	b.n	8010110 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100f8:	d306      	bcc.n	8010108 <tcp_update_rcv_ann_wnd+0x90>
 80100fa:	4b08      	ldr	r3, [pc, #32]	; (801011c <tcp_update_rcv_ann_wnd+0xa4>)
 80100fc:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010100:	4909      	ldr	r1, [pc, #36]	; (8010128 <tcp_update_rcv_ann_wnd+0xb0>)
 8010102:	4808      	ldr	r0, [pc, #32]	; (8010124 <tcp_update_rcv_ann_wnd+0xac>)
 8010104:	f00a ffc6 	bl	801b094 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	b29a      	uxth	r2, r3
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010110:	2300      	movs	r3, #0
  }
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	0801e6fc 	.word	0x0801e6fc
 8010120:	0801e958 	.word	0x0801e958
 8010124:	0801e740 	.word	0x0801e740
 8010128:	0801e97c 	.word	0x0801e97c

0801012c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	460b      	mov	r3, r1
 8010136:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d107      	bne.n	801014e <tcp_recved+0x22>
 801013e:	4b20      	ldr	r3, [pc, #128]	; (80101c0 <tcp_recved+0x94>)
 8010140:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010144:	491f      	ldr	r1, [pc, #124]	; (80101c4 <tcp_recved+0x98>)
 8010146:	4820      	ldr	r0, [pc, #128]	; (80101c8 <tcp_recved+0x9c>)
 8010148:	f00a ffa4 	bl	801b094 <iprintf>
 801014c:	e034      	b.n	80101b8 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	7d1b      	ldrb	r3, [r3, #20]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d106      	bne.n	8010164 <tcp_recved+0x38>
 8010156:	4b1a      	ldr	r3, [pc, #104]	; (80101c0 <tcp_recved+0x94>)
 8010158:	f240 32d2 	movw	r2, #978	; 0x3d2
 801015c:	491b      	ldr	r1, [pc, #108]	; (80101cc <tcp_recved+0xa0>)
 801015e:	481a      	ldr	r0, [pc, #104]	; (80101c8 <tcp_recved+0x9c>)
 8010160:	f00a ff98 	bl	801b094 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010168:	887b      	ldrh	r3, [r7, #2]
 801016a:	4413      	add	r3, r2
 801016c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801016e:	89fb      	ldrh	r3, [r7, #14]
 8010170:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010174:	4293      	cmp	r3, r2
 8010176:	d804      	bhi.n	8010182 <tcp_recved+0x56>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801017c:	89fa      	ldrh	r2, [r7, #14]
 801017e:	429a      	cmp	r2, r3
 8010180:	d204      	bcs.n	801018c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010188:	851a      	strh	r2, [r3, #40]	; 0x28
 801018a:	e002      	b.n	8010192 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	89fa      	ldrh	r2, [r7, #14]
 8010190:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff ff70 	bl	8010078 <tcp_update_rcv_ann_wnd>
 8010198:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	f640 3267 	movw	r2, #2919	; 0xb67
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d909      	bls.n	80101b8 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8b5b      	ldrh	r3, [r3, #26]
 80101a8:	f043 0302 	orr.w	r3, r3, #2
 80101ac:	b29a      	uxth	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f003 fe5e 	bl	8013e74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80101b8:	3710      	adds	r7, #16
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}
 80101be:	bf00      	nop
 80101c0:	0801e6fc 	.word	0x0801e6fc
 80101c4:	0801e998 	.word	0x0801e998
 80101c8:	0801e740 	.word	0x0801e740
 80101cc:	0801e9b0 	.word	0x0801e9b0

080101d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b090      	sub	sp, #64	; 0x40
 80101d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80101d6:	2300      	movs	r3, #0
 80101d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80101dc:	4b94      	ldr	r3, [pc, #592]	; (8010430 <tcp_slowtmr+0x260>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	3301      	adds	r3, #1
 80101e2:	4a93      	ldr	r2, [pc, #588]	; (8010430 <tcp_slowtmr+0x260>)
 80101e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80101e6:	4b93      	ldr	r3, [pc, #588]	; (8010434 <tcp_slowtmr+0x264>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	3301      	adds	r3, #1
 80101ec:	b2da      	uxtb	r2, r3
 80101ee:	4b91      	ldr	r3, [pc, #580]	; (8010434 <tcp_slowtmr+0x264>)
 80101f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80101f6:	4b90      	ldr	r3, [pc, #576]	; (8010438 <tcp_slowtmr+0x268>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80101fc:	e29f      	b.n	801073e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	7d1b      	ldrb	r3, [r3, #20]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d106      	bne.n	8010214 <tcp_slowtmr+0x44>
 8010206:	4b8d      	ldr	r3, [pc, #564]	; (801043c <tcp_slowtmr+0x26c>)
 8010208:	f240 42be 	movw	r2, #1214	; 0x4be
 801020c:	498c      	ldr	r1, [pc, #560]	; (8010440 <tcp_slowtmr+0x270>)
 801020e:	488d      	ldr	r0, [pc, #564]	; (8010444 <tcp_slowtmr+0x274>)
 8010210:	f00a ff40 	bl	801b094 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010216:	7d1b      	ldrb	r3, [r3, #20]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d106      	bne.n	801022a <tcp_slowtmr+0x5a>
 801021c:	4b87      	ldr	r3, [pc, #540]	; (801043c <tcp_slowtmr+0x26c>)
 801021e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010222:	4989      	ldr	r1, [pc, #548]	; (8010448 <tcp_slowtmr+0x278>)
 8010224:	4887      	ldr	r0, [pc, #540]	; (8010444 <tcp_slowtmr+0x274>)
 8010226:	f00a ff35 	bl	801b094 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801022a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022c:	7d1b      	ldrb	r3, [r3, #20]
 801022e:	2b0a      	cmp	r3, #10
 8010230:	d106      	bne.n	8010240 <tcp_slowtmr+0x70>
 8010232:	4b82      	ldr	r3, [pc, #520]	; (801043c <tcp_slowtmr+0x26c>)
 8010234:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010238:	4984      	ldr	r1, [pc, #528]	; (801044c <tcp_slowtmr+0x27c>)
 801023a:	4882      	ldr	r0, [pc, #520]	; (8010444 <tcp_slowtmr+0x274>)
 801023c:	f00a ff2a 	bl	801b094 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010242:	7f9a      	ldrb	r2, [r3, #30]
 8010244:	4b7b      	ldr	r3, [pc, #492]	; (8010434 <tcp_slowtmr+0x264>)
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	429a      	cmp	r2, r3
 801024a:	d105      	bne.n	8010258 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010256:	e272      	b.n	801073e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010258:	4b76      	ldr	r3, [pc, #472]	; (8010434 <tcp_slowtmr+0x264>)
 801025a:	781a      	ldrb	r2, [r3, #0]
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010260:	2300      	movs	r3, #0
 8010262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010266:	2300      	movs	r3, #0
 8010268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	7d1b      	ldrb	r3, [r3, #20]
 8010270:	2b02      	cmp	r3, #2
 8010272:	d10a      	bne.n	801028a <tcp_slowtmr+0xba>
 8010274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801027a:	2b05      	cmp	r3, #5
 801027c:	d905      	bls.n	801028a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801027e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010282:	3301      	adds	r3, #1
 8010284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 8010288:	e11e      	b.n	80104c8 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801028a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010290:	2b0b      	cmp	r3, #11
 8010292:	d905      	bls.n	80102a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010298:	3301      	adds	r3, #1
 801029a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801029e:	e113      	b.n	80104c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80102a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d075      	beq.n	8010396 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80102aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d006      	beq.n	80102c0 <tcp_slowtmr+0xf0>
 80102b2:	4b62      	ldr	r3, [pc, #392]	; (801043c <tcp_slowtmr+0x26c>)
 80102b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80102b8:	4965      	ldr	r1, [pc, #404]	; (8010450 <tcp_slowtmr+0x280>)
 80102ba:	4862      	ldr	r0, [pc, #392]	; (8010444 <tcp_slowtmr+0x274>)
 80102bc:	f00a feea 	bl	801b094 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80102c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d106      	bne.n	80102d6 <tcp_slowtmr+0x106>
 80102c8:	4b5c      	ldr	r3, [pc, #368]	; (801043c <tcp_slowtmr+0x26c>)
 80102ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80102ce:	4961      	ldr	r1, [pc, #388]	; (8010454 <tcp_slowtmr+0x284>)
 80102d0:	485c      	ldr	r0, [pc, #368]	; (8010444 <tcp_slowtmr+0x274>)
 80102d2:	f00a fedf 	bl	801b094 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80102d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80102dc:	2b0b      	cmp	r3, #11
 80102de:	d905      	bls.n	80102ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80102e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102e4:	3301      	adds	r3, #1
 80102e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80102ea:	e0ed      	b.n	80104c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80102f2:	3b01      	subs	r3, #1
 80102f4:	4a58      	ldr	r2, [pc, #352]	; (8010458 <tcp_slowtmr+0x288>)
 80102f6:	5cd3      	ldrb	r3, [r2, r3]
 80102f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010300:	7c7a      	ldrb	r2, [r7, #17]
 8010302:	429a      	cmp	r2, r3
 8010304:	d907      	bls.n	8010316 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801030c:	3301      	adds	r3, #1
 801030e:	b2da      	uxtb	r2, r3
 8010310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010312:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010318:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801031c:	7c7a      	ldrb	r2, [r7, #17]
 801031e:	429a      	cmp	r2, r3
 8010320:	f200 80d2 	bhi.w	80104c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010324:	2301      	movs	r3, #1
 8010326:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801032e:	2b00      	cmp	r3, #0
 8010330:	d108      	bne.n	8010344 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010334:	f004 fc74 	bl	8014c20 <tcp_zero_window_probe>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d014      	beq.n	8010368 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801033e:	2300      	movs	r3, #0
 8010340:	623b      	str	r3, [r7, #32]
 8010342:	e011      	b.n	8010368 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801034a:	4619      	mov	r1, r3
 801034c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801034e:	f003 fb07 	bl	8013960 <tcp_split_unsent_seg>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d107      	bne.n	8010368 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801035a:	f003 fd8b 	bl	8013e74 <tcp_output>
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d101      	bne.n	8010368 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010364:	2300      	movs	r3, #0
 8010366:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010368:	6a3b      	ldr	r3, [r7, #32]
 801036a:	2b00      	cmp	r3, #0
 801036c:	f000 80ac 	beq.w	80104c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801037e:	2b06      	cmp	r3, #6
 8010380:	f200 80a2 	bhi.w	80104c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801038a:	3301      	adds	r3, #1
 801038c:	b2da      	uxtb	r2, r3
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010394:	e098      	b.n	80104c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010398:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801039c:	2b00      	cmp	r3, #0
 801039e:	db0f      	blt.n	80103c0 <tcp_slowtmr+0x1f0>
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80103a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d008      	beq.n	80103c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80103ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	3301      	adds	r3, #1
 80103b8:	b29b      	uxth	r3, r3
 80103ba:	b21a      	sxth	r2, r3
 80103bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80103cc:	429a      	cmp	r2, r3
 80103ce:	db7b      	blt.n	80104c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80103d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103d2:	f004 f857 	bl	8014484 <tcp_rexmit_rto_prepare>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d007      	beq.n	80103ec <tcp_slowtmr+0x21c>
 80103dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d171      	bne.n	80104c8 <tcp_slowtmr+0x2f8>
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d06d      	beq.n	80104c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	7d1b      	ldrb	r3, [r3, #20]
 80103f0:	2b02      	cmp	r3, #2
 80103f2:	d03a      	beq.n	801046a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103fa:	2b0c      	cmp	r3, #12
 80103fc:	bf28      	it	cs
 80103fe:	230c      	movcs	r3, #12
 8010400:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010404:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010408:	10db      	asrs	r3, r3, #3
 801040a:	b21b      	sxth	r3, r3
 801040c:	461a      	mov	r2, r3
 801040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010410:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010414:	4413      	add	r3, r2
 8010416:	7efa      	ldrb	r2, [r7, #27]
 8010418:	4910      	ldr	r1, [pc, #64]	; (801045c <tcp_slowtmr+0x28c>)
 801041a:	5c8a      	ldrb	r2, [r1, r2]
 801041c:	4093      	lsls	r3, r2
 801041e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010426:	4293      	cmp	r3, r2
 8010428:	dc1a      	bgt.n	8010460 <tcp_slowtmr+0x290>
 801042a:	697b      	ldr	r3, [r7, #20]
 801042c:	b21a      	sxth	r2, r3
 801042e:	e019      	b.n	8010464 <tcp_slowtmr+0x294>
 8010430:	20013d70 	.word	0x20013d70
 8010434:	20013d86 	.word	0x20013d86
 8010438:	20013d7c 	.word	0x20013d7c
 801043c:	0801e6fc 	.word	0x0801e6fc
 8010440:	0801ea40 	.word	0x0801ea40
 8010444:	0801e740 	.word	0x0801e740
 8010448:	0801ea6c 	.word	0x0801ea6c
 801044c:	0801ea98 	.word	0x0801ea98
 8010450:	0801eac8 	.word	0x0801eac8
 8010454:	0801eafc 	.word	0x0801eafc
 8010458:	0806c7c0 	.word	0x0806c7c0
 801045c:	0806c7b0 	.word	0x0806c7b0
 8010460:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010466:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801046a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046c:	2200      	movs	r2, #0
 801046e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010478:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801047c:	4293      	cmp	r3, r2
 801047e:	bf28      	it	cs
 8010480:	4613      	movcs	r3, r2
 8010482:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010484:	8a7b      	ldrh	r3, [r7, #18]
 8010486:	085b      	lsrs	r3, r3, #1
 8010488:	b29a      	uxth	r2, r3
 801048a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801049a:	005b      	lsls	r3, r3, #1
 801049c:	b29b      	uxth	r3, r3
 801049e:	429a      	cmp	r2, r3
 80104a0:	d206      	bcs.n	80104b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80104a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80104b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80104ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104bc:	2200      	movs	r2, #0
 80104be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80104c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104c4:	f004 f858 	bl	8014578 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80104c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ca:	7d1b      	ldrb	r3, [r3, #20]
 80104cc:	2b06      	cmp	r3, #6
 80104ce:	d111      	bne.n	80104f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80104d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d2:	8b5b      	ldrh	r3, [r3, #26]
 80104d4:	f003 0310 	and.w	r3, r3, #16
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00b      	beq.n	80104f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104dc:	4b9d      	ldr	r3, [pc, #628]	; (8010754 <tcp_slowtmr+0x584>)
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	6a1b      	ldr	r3, [r3, #32]
 80104e4:	1ad3      	subs	r3, r2, r3
 80104e6:	2b28      	cmp	r3, #40	; 0x28
 80104e8:	d904      	bls.n	80104f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80104ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ee:	3301      	adds	r3, #1
 80104f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80104f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f6:	7a5b      	ldrb	r3, [r3, #9]
 80104f8:	f003 0308 	and.w	r3, r3, #8
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d04c      	beq.n	801059a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010502:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010504:	2b04      	cmp	r3, #4
 8010506:	d003      	beq.n	8010510 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801050c:	2b07      	cmp	r3, #7
 801050e:	d144      	bne.n	801059a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010510:	4b90      	ldr	r3, [pc, #576]	; (8010754 <tcp_slowtmr+0x584>)
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010516:	6a1b      	ldr	r3, [r3, #32]
 8010518:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801051a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801051c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010520:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8010524:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010528:	498b      	ldr	r1, [pc, #556]	; (8010758 <tcp_slowtmr+0x588>)
 801052a:	fba1 1303 	umull	r1, r3, r1, r3
 801052e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010530:	429a      	cmp	r2, r3
 8010532:	d90a      	bls.n	801054a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010538:	3301      	adds	r3, #1
 801053a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801053e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010542:	3301      	adds	r3, #1
 8010544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010548:	e027      	b.n	801059a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801054a:	4b82      	ldr	r3, [pc, #520]	; (8010754 <tcp_slowtmr+0x584>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010550:	6a1b      	ldr	r3, [r3, #32]
 8010552:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010556:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801055a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010560:	4618      	mov	r0, r3
 8010562:	4b7e      	ldr	r3, [pc, #504]	; (801075c <tcp_slowtmr+0x58c>)
 8010564:	fb00 f303 	mul.w	r3, r0, r3
 8010568:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801056a:	497b      	ldr	r1, [pc, #492]	; (8010758 <tcp_slowtmr+0x588>)
 801056c:	fba1 1303 	umull	r1, r3, r1, r3
 8010570:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010572:	429a      	cmp	r2, r3
 8010574:	d911      	bls.n	801059a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010576:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010578:	f004 fb12 	bl	8014ba0 <tcp_keepalive>
 801057c:	4603      	mov	r3, r0
 801057e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010582:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010586:	2b00      	cmp	r3, #0
 8010588:	d107      	bne.n	801059a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010590:	3301      	adds	r3, #1
 8010592:	b2da      	uxtb	r2, r3
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d011      	beq.n	80105c6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80105a2:	4b6c      	ldr	r3, [pc, #432]	; (8010754 <tcp_slowtmr+0x584>)
 80105a4:	681a      	ldr	r2, [r3, #0]
 80105a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	1ad2      	subs	r2, r2, r3
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80105b2:	4619      	mov	r1, r3
 80105b4:	460b      	mov	r3, r1
 80105b6:	005b      	lsls	r3, r3, #1
 80105b8:	440b      	add	r3, r1
 80105ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80105bc:	429a      	cmp	r2, r3
 80105be:	d302      	bcc.n	80105c6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80105c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105c2:	f000 fddd 	bl	8011180 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80105c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c8:	7d1b      	ldrb	r3, [r3, #20]
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d10b      	bne.n	80105e6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105ce:	4b61      	ldr	r3, [pc, #388]	; (8010754 <tcp_slowtmr+0x584>)
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d4:	6a1b      	ldr	r3, [r3, #32]
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	2b28      	cmp	r3, #40	; 0x28
 80105da:	d904      	bls.n	80105e6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80105dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105e0:	3301      	adds	r3, #1
 80105e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80105e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e8:	7d1b      	ldrb	r3, [r3, #20]
 80105ea:	2b09      	cmp	r3, #9
 80105ec:	d10b      	bne.n	8010606 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80105ee:	4b59      	ldr	r3, [pc, #356]	; (8010754 <tcp_slowtmr+0x584>)
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f4:	6a1b      	ldr	r3, [r3, #32]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	2bf0      	cmp	r3, #240	; 0xf0
 80105fa:	d904      	bls.n	8010606 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80105fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010600:	3301      	adds	r3, #1
 8010602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801060a:	2b00      	cmp	r3, #0
 801060c:	d060      	beq.n	80106d0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010614:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010618:	f000 fbfe 	bl	8010e18 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801061c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061e:	2b00      	cmp	r3, #0
 8010620:	d010      	beq.n	8010644 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010622:	4b4f      	ldr	r3, [pc, #316]	; (8010760 <tcp_slowtmr+0x590>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010628:	429a      	cmp	r2, r3
 801062a:	d106      	bne.n	801063a <tcp_slowtmr+0x46a>
 801062c:	4b4d      	ldr	r3, [pc, #308]	; (8010764 <tcp_slowtmr+0x594>)
 801062e:	f240 526d 	movw	r2, #1389	; 0x56d
 8010632:	494d      	ldr	r1, [pc, #308]	; (8010768 <tcp_slowtmr+0x598>)
 8010634:	484d      	ldr	r0, [pc, #308]	; (801076c <tcp_slowtmr+0x59c>)
 8010636:	f00a fd2d 	bl	801b094 <iprintf>
        prev->next = pcb->next;
 801063a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801063c:	68da      	ldr	r2, [r3, #12]
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	60da      	str	r2, [r3, #12]
 8010642:	e00f      	b.n	8010664 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010644:	4b46      	ldr	r3, [pc, #280]	; (8010760 <tcp_slowtmr+0x590>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801064a:	429a      	cmp	r2, r3
 801064c:	d006      	beq.n	801065c <tcp_slowtmr+0x48c>
 801064e:	4b45      	ldr	r3, [pc, #276]	; (8010764 <tcp_slowtmr+0x594>)
 8010650:	f240 5271 	movw	r2, #1393	; 0x571
 8010654:	4946      	ldr	r1, [pc, #280]	; (8010770 <tcp_slowtmr+0x5a0>)
 8010656:	4845      	ldr	r0, [pc, #276]	; (801076c <tcp_slowtmr+0x59c>)
 8010658:	f00a fd1c 	bl	801b094 <iprintf>
        tcp_active_pcbs = pcb->next;
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	68db      	ldr	r3, [r3, #12]
 8010660:	4a3f      	ldr	r2, [pc, #252]	; (8010760 <tcp_slowtmr+0x590>)
 8010662:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010668:	2b00      	cmp	r3, #0
 801066a:	d013      	beq.n	8010694 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010674:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	3304      	adds	r3, #4
 801067a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801067c:	8ad2      	ldrh	r2, [r2, #22]
 801067e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010680:	8b09      	ldrh	r1, [r1, #24]
 8010682:	9102      	str	r1, [sp, #8]
 8010684:	9201      	str	r2, [sp, #4]
 8010686:	9300      	str	r3, [sp, #0]
 8010688:	462b      	mov	r3, r5
 801068a:	4622      	mov	r2, r4
 801068c:	4601      	mov	r1, r0
 801068e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010690:	f004 f9d2 	bl	8014a38 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	691b      	ldr	r3, [r3, #16]
 8010698:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	7d1b      	ldrb	r3, [r3, #20]
 801069e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80106a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80106a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80106aa:	6838      	ldr	r0, [r7, #0]
 80106ac:	f7ff f9f0 	bl	800fa90 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80106b0:	4b30      	ldr	r3, [pc, #192]	; (8010774 <tcp_slowtmr+0x5a4>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d004      	beq.n	80106c6 <tcp_slowtmr+0x4f6>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f06f 010c 	mvn.w	r1, #12
 80106c2:	68b8      	ldr	r0, [r7, #8]
 80106c4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80106c6:	4b2b      	ldr	r3, [pc, #172]	; (8010774 <tcp_slowtmr+0x5a4>)
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d037      	beq.n	801073e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80106ce:	e590      	b.n	80101f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80106d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80106d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80106da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106dc:	7f1b      	ldrb	r3, [r3, #28]
 80106de:	3301      	adds	r3, #1
 80106e0:	b2da      	uxtb	r2, r3
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	7f1a      	ldrb	r2, [r3, #28]
 80106ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ec:	7f5b      	ldrb	r3, [r3, #29]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d325      	bcc.n	801073e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80106f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f4:	2200      	movs	r2, #0
 80106f6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80106f8:	4b1e      	ldr	r3, [pc, #120]	; (8010774 <tcp_slowtmr+0x5a4>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010704:	2b00      	cmp	r3, #0
 8010706:	d00b      	beq.n	8010720 <tcp_slowtmr+0x550>
 8010708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801070a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801070e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010710:	6912      	ldr	r2, [r2, #16]
 8010712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010714:	4610      	mov	r0, r2
 8010716:	4798      	blx	r3
 8010718:	4603      	mov	r3, r0
 801071a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801071e:	e002      	b.n	8010726 <tcp_slowtmr+0x556>
 8010720:	2300      	movs	r3, #0
 8010722:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010726:	4b13      	ldr	r3, [pc, #76]	; (8010774 <tcp_slowtmr+0x5a4>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d000      	beq.n	8010730 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 801072e:	e560      	b.n	80101f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010730:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010734:	2b00      	cmp	r3, #0
 8010736:	d102      	bne.n	801073e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801073a:	f003 fb9b 	bl	8013e74 <tcp_output>
  while (pcb != NULL) {
 801073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010740:	2b00      	cmp	r3, #0
 8010742:	f47f ad5c 	bne.w	80101fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010746:	2300      	movs	r3, #0
 8010748:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801074a:	4b0b      	ldr	r3, [pc, #44]	; (8010778 <tcp_slowtmr+0x5a8>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010750:	e067      	b.n	8010822 <tcp_slowtmr+0x652>
 8010752:	bf00      	nop
 8010754:	20013d70 	.word	0x20013d70
 8010758:	10624dd3 	.word	0x10624dd3
 801075c:	000124f8 	.word	0x000124f8
 8010760:	20013d7c 	.word	0x20013d7c
 8010764:	0801e6fc 	.word	0x0801e6fc
 8010768:	0801eb34 	.word	0x0801eb34
 801076c:	0801e740 	.word	0x0801e740
 8010770:	0801eb60 	.word	0x0801eb60
 8010774:	20013d84 	.word	0x20013d84
 8010778:	20013d80 	.word	0x20013d80
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801077c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077e:	7d1b      	ldrb	r3, [r3, #20]
 8010780:	2b0a      	cmp	r3, #10
 8010782:	d006      	beq.n	8010792 <tcp_slowtmr+0x5c2>
 8010784:	4b2b      	ldr	r3, [pc, #172]	; (8010834 <tcp_slowtmr+0x664>)
 8010786:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801078a:	492b      	ldr	r1, [pc, #172]	; (8010838 <tcp_slowtmr+0x668>)
 801078c:	482b      	ldr	r0, [pc, #172]	; (801083c <tcp_slowtmr+0x66c>)
 801078e:	f00a fc81 	bl	801b094 <iprintf>
    pcb_remove = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010798:	4b29      	ldr	r3, [pc, #164]	; (8010840 <tcp_slowtmr+0x670>)
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079e:	6a1b      	ldr	r3, [r3, #32]
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	2bf0      	cmp	r3, #240	; 0xf0
 80107a4:	d904      	bls.n	80107b0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80107a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107aa:	3301      	adds	r3, #1
 80107ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80107b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d02f      	beq.n	8010818 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80107b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107ba:	f000 fb2d 	bl	8010e18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80107be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d010      	beq.n	80107e6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80107c4:	4b1f      	ldr	r3, [pc, #124]	; (8010844 <tcp_slowtmr+0x674>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d106      	bne.n	80107dc <tcp_slowtmr+0x60c>
 80107ce:	4b19      	ldr	r3, [pc, #100]	; (8010834 <tcp_slowtmr+0x664>)
 80107d0:	f240 52af 	movw	r2, #1455	; 0x5af
 80107d4:	491c      	ldr	r1, [pc, #112]	; (8010848 <tcp_slowtmr+0x678>)
 80107d6:	4819      	ldr	r0, [pc, #100]	; (801083c <tcp_slowtmr+0x66c>)
 80107d8:	f00a fc5c 	bl	801b094 <iprintf>
        prev->next = pcb->next;
 80107dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107de:	68da      	ldr	r2, [r3, #12]
 80107e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e2:	60da      	str	r2, [r3, #12]
 80107e4:	e00f      	b.n	8010806 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80107e6:	4b17      	ldr	r3, [pc, #92]	; (8010844 <tcp_slowtmr+0x674>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d006      	beq.n	80107fe <tcp_slowtmr+0x62e>
 80107f0:	4b10      	ldr	r3, [pc, #64]	; (8010834 <tcp_slowtmr+0x664>)
 80107f2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80107f6:	4915      	ldr	r1, [pc, #84]	; (801084c <tcp_slowtmr+0x67c>)
 80107f8:	4810      	ldr	r0, [pc, #64]	; (801083c <tcp_slowtmr+0x66c>)
 80107fa:	f00a fc4b 	bl	801b094 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	4a10      	ldr	r2, [pc, #64]	; (8010844 <tcp_slowtmr+0x674>)
 8010804:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010810:	69f8      	ldr	r0, [r7, #28]
 8010812:	f7ff f93d 	bl	800fa90 <tcp_free>
 8010816:	e004      	b.n	8010822 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801081e:	68db      	ldr	r3, [r3, #12]
 8010820:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1a9      	bne.n	801077c <tcp_slowtmr+0x5ac>
    }
  }
}
 8010828:	bf00      	nop
 801082a:	bf00      	nop
 801082c:	3730      	adds	r7, #48	; 0x30
 801082e:	46bd      	mov	sp, r7
 8010830:	bdb0      	pop	{r4, r5, r7, pc}
 8010832:	bf00      	nop
 8010834:	0801e6fc 	.word	0x0801e6fc
 8010838:	0801eb8c 	.word	0x0801eb8c
 801083c:	0801e740 	.word	0x0801e740
 8010840:	20013d70 	.word	0x20013d70
 8010844:	20013d80 	.word	0x20013d80
 8010848:	0801ebbc 	.word	0x0801ebbc
 801084c:	0801ebe4 	.word	0x0801ebe4

08010850 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010856:	4b2d      	ldr	r3, [pc, #180]	; (801090c <tcp_fasttmr+0xbc>)
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	3301      	adds	r3, #1
 801085c:	b2da      	uxtb	r2, r3
 801085e:	4b2b      	ldr	r3, [pc, #172]	; (801090c <tcp_fasttmr+0xbc>)
 8010860:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010862:	4b2b      	ldr	r3, [pc, #172]	; (8010910 <tcp_fasttmr+0xc0>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010868:	e048      	b.n	80108fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	7f9a      	ldrb	r2, [r3, #30]
 801086e:	4b27      	ldr	r3, [pc, #156]	; (801090c <tcp_fasttmr+0xbc>)
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	429a      	cmp	r2, r3
 8010874:	d03f      	beq.n	80108f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010876:	4b25      	ldr	r3, [pc, #148]	; (801090c <tcp_fasttmr+0xbc>)
 8010878:	781a      	ldrb	r2, [r3, #0]
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	8b5b      	ldrh	r3, [r3, #26]
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d010      	beq.n	80108ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8b5b      	ldrh	r3, [r3, #26]
 801088e:	f043 0302 	orr.w	r3, r3, #2
 8010892:	b29a      	uxth	r2, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f003 faeb 	bl	8013e74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	8b5b      	ldrh	r3, [r3, #26]
 80108a2:	f023 0303 	bic.w	r3, r3, #3
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	8b5b      	ldrh	r3, [r3, #26]
 80108b0:	f003 0308 	and.w	r3, r3, #8
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d009      	beq.n	80108cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8b5b      	ldrh	r3, [r3, #26]
 80108bc:	f023 0308 	bic.w	r3, r3, #8
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff fa76 	bl	800fdb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00a      	beq.n	80108f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80108da:	4b0e      	ldr	r3, [pc, #56]	; (8010914 <tcp_fasttmr+0xc4>)
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f000 f819 	bl	8010918 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80108e6:	4b0b      	ldr	r3, [pc, #44]	; (8010914 <tcp_fasttmr+0xc4>)
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d000      	beq.n	80108f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80108ee:	e7b8      	b.n	8010862 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	607b      	str	r3, [r7, #4]
 80108f4:	e002      	b.n	80108fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1b3      	bne.n	801086a <tcp_fasttmr+0x1a>
    }
  }
}
 8010902:	bf00      	nop
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	20013d86 	.word	0x20013d86
 8010910:	20013d7c 	.word	0x20013d7c
 8010914:	20013d84 	.word	0x20013d84

08010918 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010918:	b590      	push	{r4, r7, lr}
 801091a:	b085      	sub	sp, #20
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d109      	bne.n	801093a <tcp_process_refused_data+0x22>
 8010926:	4b38      	ldr	r3, [pc, #224]	; (8010a08 <tcp_process_refused_data+0xf0>)
 8010928:	f240 6209 	movw	r2, #1545	; 0x609
 801092c:	4937      	ldr	r1, [pc, #220]	; (8010a0c <tcp_process_refused_data+0xf4>)
 801092e:	4838      	ldr	r0, [pc, #224]	; (8010a10 <tcp_process_refused_data+0xf8>)
 8010930:	f00a fbb0 	bl	801b094 <iprintf>
 8010934:	f06f 030f 	mvn.w	r3, #15
 8010938:	e061      	b.n	80109fe <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801093e:	7b5b      	ldrb	r3, [r3, #13]
 8010940:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010946:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2200      	movs	r2, #0
 801094c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00b      	beq.n	8010970 <tcp_process_refused_data+0x58>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6918      	ldr	r0, [r3, #16]
 8010962:	2300      	movs	r3, #0
 8010964:	68ba      	ldr	r2, [r7, #8]
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	47a0      	blx	r4
 801096a:	4603      	mov	r3, r0
 801096c:	73fb      	strb	r3, [r7, #15]
 801096e:	e007      	b.n	8010980 <tcp_process_refused_data+0x68>
 8010970:	2300      	movs	r3, #0
 8010972:	68ba      	ldr	r2, [r7, #8]
 8010974:	6879      	ldr	r1, [r7, #4]
 8010976:	2000      	movs	r0, #0
 8010978:	f000 f8a6 	bl	8010ac8 <tcp_recv_null>
 801097c:	4603      	mov	r3, r0
 801097e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d12b      	bne.n	80109e0 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010988:	7bbb      	ldrb	r3, [r7, #14]
 801098a:	f003 0320 	and.w	r3, r3, #32
 801098e:	2b00      	cmp	r3, #0
 8010990:	d034      	beq.n	80109fc <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010996:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801099a:	4293      	cmp	r3, r2
 801099c:	d005      	beq.n	80109aa <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109a2:	3301      	adds	r3, #1
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00b      	beq.n	80109cc <tcp_process_refused_data+0xb4>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6918      	ldr	r0, [r3, #16]
 80109be:	2300      	movs	r3, #0
 80109c0:	2200      	movs	r2, #0
 80109c2:	6879      	ldr	r1, [r7, #4]
 80109c4:	47a0      	blx	r4
 80109c6:	4603      	mov	r3, r0
 80109c8:	73fb      	strb	r3, [r7, #15]
 80109ca:	e001      	b.n	80109d0 <tcp_process_refused_data+0xb8>
 80109cc:	2300      	movs	r3, #0
 80109ce:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80109d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109d4:	f113 0f0d 	cmn.w	r3, #13
 80109d8:	d110      	bne.n	80109fc <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80109da:	f06f 030c 	mvn.w	r3, #12
 80109de:	e00e      	b.n	80109fe <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80109e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109e4:	f113 0f0d 	cmn.w	r3, #13
 80109e8:	d102      	bne.n	80109f0 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80109ea:	f06f 030c 	mvn.w	r3, #12
 80109ee:	e006      	b.n	80109fe <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80109f6:	f06f 0304 	mvn.w	r3, #4
 80109fa:	e000      	b.n	80109fe <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80109fc:	2300      	movs	r3, #0
}
 80109fe:	4618      	mov	r0, r3
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd90      	pop	{r4, r7, pc}
 8010a06:	bf00      	nop
 8010a08:	0801e6fc 	.word	0x0801e6fc
 8010a0c:	0801ec0c 	.word	0x0801ec0c
 8010a10:	0801e740 	.word	0x0801e740

08010a14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010a1c:	e007      	b.n	8010a2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f80a 	bl	8010a3e <tcp_seg_free>
    seg = next;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d1f4      	bne.n	8010a1e <tcp_segs_free+0xa>
  }
}
 8010a34:	bf00      	nop
 8010a36:	bf00      	nop
 8010a38:	3710      	adds	r7, #16
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010a3e:	b580      	push	{r7, lr}
 8010a40:	b082      	sub	sp, #8
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d00c      	beq.n	8010a66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d004      	beq.n	8010a5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	685b      	ldr	r3, [r3, #4]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fe fcc5 	bl	800f3e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010a5e:	6879      	ldr	r1, [r7, #4]
 8010a60:	2003      	movs	r0, #3
 8010a62:	f7fd fe1f 	bl	800e6a4 <memp_free>
  }
}
 8010a66:	bf00      	nop
 8010a68:	3708      	adds	r7, #8
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	bd80      	pop	{r7, pc}
	...

08010a70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b084      	sub	sp, #16
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d106      	bne.n	8010a8c <tcp_seg_copy+0x1c>
 8010a7e:	4b0f      	ldr	r3, [pc, #60]	; (8010abc <tcp_seg_copy+0x4c>)
 8010a80:	f240 6282 	movw	r2, #1666	; 0x682
 8010a84:	490e      	ldr	r1, [pc, #56]	; (8010ac0 <tcp_seg_copy+0x50>)
 8010a86:	480f      	ldr	r0, [pc, #60]	; (8010ac4 <tcp_seg_copy+0x54>)
 8010a88:	f00a fb04 	bl	801b094 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010a8c:	2003      	movs	r0, #3
 8010a8e:	f7fd fdb7 	bl	800e600 <memp_malloc>
 8010a92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d101      	bne.n	8010a9e <tcp_seg_copy+0x2e>
    return NULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	e00a      	b.n	8010ab4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010a9e:	2214      	movs	r2, #20
 8010aa0:	6879      	ldr	r1, [r7, #4]
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f00a fd15 	bl	801b4d2 <memcpy>
  pbuf_ref(cseg->p);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fe fd41 	bl	800f534 <pbuf_ref>
  return cseg;
 8010ab2:	68fb      	ldr	r3, [r7, #12]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3710      	adds	r7, #16
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	0801e6fc 	.word	0x0801e6fc
 8010ac0:	0801ec50 	.word	0x0801ec50
 8010ac4:	0801e740 	.word	0x0801e740

08010ac8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	607a      	str	r2, [r7, #4]
 8010ad4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d109      	bne.n	8010af0 <tcp_recv_null+0x28>
 8010adc:	4b12      	ldr	r3, [pc, #72]	; (8010b28 <tcp_recv_null+0x60>)
 8010ade:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010ae2:	4912      	ldr	r1, [pc, #72]	; (8010b2c <tcp_recv_null+0x64>)
 8010ae4:	4812      	ldr	r0, [pc, #72]	; (8010b30 <tcp_recv_null+0x68>)
 8010ae6:	f00a fad5 	bl	801b094 <iprintf>
 8010aea:	f06f 030f 	mvn.w	r3, #15
 8010aee:	e016      	b.n	8010b1e <tcp_recv_null+0x56>

  if (p != NULL) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d009      	beq.n	8010b0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	891b      	ldrh	r3, [r3, #8]
 8010afa:	4619      	mov	r1, r3
 8010afc:	68b8      	ldr	r0, [r7, #8]
 8010afe:	f7ff fb15 	bl	801012c <tcp_recved>
    pbuf_free(p);
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7fe fc70 	bl	800f3e8 <pbuf_free>
 8010b08:	e008      	b.n	8010b1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d104      	bne.n	8010b1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010b12:	68b8      	ldr	r0, [r7, #8]
 8010b14:	f7ff f9ba 	bl	800fe8c <tcp_close>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	e000      	b.n	8010b1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010b1c:	2300      	movs	r3, #0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	0801e6fc 	.word	0x0801e6fc
 8010b2c:	0801ec6c 	.word	0x0801ec6c
 8010b30:	0801e740 	.word	0x0801e740

08010b34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b086      	sub	sp, #24
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	db01      	blt.n	8010b4a <tcp_kill_prio+0x16>
 8010b46:	79fb      	ldrb	r3, [r7, #7]
 8010b48:	e000      	b.n	8010b4c <tcp_kill_prio+0x18>
 8010b4a:	237f      	movs	r3, #127	; 0x7f
 8010b4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010b4e:	7afb      	ldrb	r3, [r7, #11]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d034      	beq.n	8010bbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010b54:	7afb      	ldrb	r3, [r7, #11]
 8010b56:	3b01      	subs	r3, #1
 8010b58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b62:	4b19      	ldr	r3, [pc, #100]	; (8010bc8 <tcp_kill_prio+0x94>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	617b      	str	r3, [r7, #20]
 8010b68:	e01f      	b.n	8010baa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	7d5b      	ldrb	r3, [r3, #21]
 8010b6e:	7afa      	ldrb	r2, [r7, #11]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d80c      	bhi.n	8010b8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010b78:	7afa      	ldrb	r2, [r7, #11]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d112      	bne.n	8010ba4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010b7e:	4b13      	ldr	r3, [pc, #76]	; (8010bcc <tcp_kill_prio+0x98>)
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	6a1b      	ldr	r3, [r3, #32]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	68fa      	ldr	r2, [r7, #12]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d80a      	bhi.n	8010ba4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010b8e:	4b0f      	ldr	r3, [pc, #60]	; (8010bcc <tcp_kill_prio+0x98>)
 8010b90:	681a      	ldr	r2, [r3, #0]
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	1ad3      	subs	r3, r2, r3
 8010b98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	7d5b      	ldrb	r3, [r3, #21]
 8010ba2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	617b      	str	r3, [r7, #20]
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1dc      	bne.n	8010b6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d004      	beq.n	8010bc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010bb6:	6938      	ldr	r0, [r7, #16]
 8010bb8:	f7ff fa52 	bl	8010060 <tcp_abort>
 8010bbc:	e000      	b.n	8010bc0 <tcp_kill_prio+0x8c>
    return;
 8010bbe:	bf00      	nop
  }
}
 8010bc0:	3718      	adds	r7, #24
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}
 8010bc6:	bf00      	nop
 8010bc8:	20013d7c 	.word	0x20013d7c
 8010bcc:	20013d70 	.word	0x20013d70

08010bd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010bda:	79fb      	ldrb	r3, [r7, #7]
 8010bdc:	2b08      	cmp	r3, #8
 8010bde:	d009      	beq.n	8010bf4 <tcp_kill_state+0x24>
 8010be0:	79fb      	ldrb	r3, [r7, #7]
 8010be2:	2b09      	cmp	r3, #9
 8010be4:	d006      	beq.n	8010bf4 <tcp_kill_state+0x24>
 8010be6:	4b1a      	ldr	r3, [pc, #104]	; (8010c50 <tcp_kill_state+0x80>)
 8010be8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010bec:	4919      	ldr	r1, [pc, #100]	; (8010c54 <tcp_kill_state+0x84>)
 8010bee:	481a      	ldr	r0, [pc, #104]	; (8010c58 <tcp_kill_state+0x88>)
 8010bf0:	f00a fa50 	bl	801b094 <iprintf>

  inactivity = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bfc:	4b17      	ldr	r3, [pc, #92]	; (8010c5c <tcp_kill_state+0x8c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	617b      	str	r3, [r7, #20]
 8010c02:	e017      	b.n	8010c34 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	7d1b      	ldrb	r3, [r3, #20]
 8010c08:	79fa      	ldrb	r2, [r7, #7]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d10f      	bne.n	8010c2e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c0e:	4b14      	ldr	r3, [pc, #80]	; (8010c60 <tcp_kill_state+0x90>)
 8010c10:	681a      	ldr	r2, [r3, #0]
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	6a1b      	ldr	r3, [r3, #32]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	68fa      	ldr	r2, [r7, #12]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d807      	bhi.n	8010c2e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <tcp_kill_state+0x90>)
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	6a1b      	ldr	r3, [r3, #32]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	617b      	str	r3, [r7, #20]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e4      	bne.n	8010c04 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d003      	beq.n	8010c48 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010c40:	2100      	movs	r1, #0
 8010c42:	6938      	ldr	r0, [r7, #16]
 8010c44:	f7ff f94e 	bl	800fee4 <tcp_abandon>
  }
}
 8010c48:	bf00      	nop
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	0801e6fc 	.word	0x0801e6fc
 8010c54:	0801ec88 	.word	0x0801ec88
 8010c58:	0801e740 	.word	0x0801e740
 8010c5c:	20013d7c 	.word	0x20013d7c
 8010c60:	20013d70 	.word	0x20013d70

08010c64 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c72:	4b12      	ldr	r3, [pc, #72]	; (8010cbc <tcp_kill_timewait+0x58>)
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	60fb      	str	r3, [r7, #12]
 8010c78:	e012      	b.n	8010ca0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c7a:	4b11      	ldr	r3, [pc, #68]	; (8010cc0 <tcp_kill_timewait+0x5c>)
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d807      	bhi.n	8010c9a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010c8a:	4b0d      	ldr	r3, [pc, #52]	; (8010cc0 <tcp_kill_timewait+0x5c>)
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6a1b      	ldr	r3, [r3, #32]
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d1e9      	bne.n	8010c7a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d002      	beq.n	8010cb2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010cac:	68b8      	ldr	r0, [r7, #8]
 8010cae:	f7ff f9d7 	bl	8010060 <tcp_abort>
  }
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}
 8010cba:	bf00      	nop
 8010cbc:	20013d80 	.word	0x20013d80
 8010cc0:	20013d70 	.word	0x20013d70

08010cc4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010cca:	4b10      	ldr	r3, [pc, #64]	; (8010d0c <tcp_handle_closepend+0x48>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010cd0:	e014      	b.n	8010cfc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	68db      	ldr	r3, [r3, #12]
 8010cd6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	8b5b      	ldrh	r3, [r3, #26]
 8010cdc:	f003 0308 	and.w	r3, r3, #8
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d009      	beq.n	8010cf8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	8b5b      	ldrh	r3, [r3, #26]
 8010ce8:	f023 0308 	bic.w	r3, r3, #8
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7ff f860 	bl	800fdb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1e7      	bne.n	8010cd2 <tcp_handle_closepend+0xe>
  }
}
 8010d02:	bf00      	nop
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	20013d7c 	.word	0x20013d7c

08010d10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	4603      	mov	r3, r0
 8010d18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d1a:	2001      	movs	r0, #1
 8010d1c:	f7fd fc70 	bl	800e600 <memp_malloc>
 8010d20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d126      	bne.n	8010d76 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010d28:	f7ff ffcc 	bl	8010cc4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010d2c:	f7ff ff9a 	bl	8010c64 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d30:	2001      	movs	r0, #1
 8010d32:	f7fd fc65 	bl	800e600 <memp_malloc>
 8010d36:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d11b      	bne.n	8010d76 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010d3e:	2009      	movs	r0, #9
 8010d40:	f7ff ff46 	bl	8010bd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d44:	2001      	movs	r0, #1
 8010d46:	f7fd fc5b 	bl	800e600 <memp_malloc>
 8010d4a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d111      	bne.n	8010d76 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010d52:	2008      	movs	r0, #8
 8010d54:	f7ff ff3c 	bl	8010bd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d58:	2001      	movs	r0, #1
 8010d5a:	f7fd fc51 	bl	800e600 <memp_malloc>
 8010d5e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d107      	bne.n	8010d76 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7ff fee3 	bl	8010b34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d6e:	2001      	movs	r0, #1
 8010d70:	f7fd fc46 	bl	800e600 <memp_malloc>
 8010d74:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d03f      	beq.n	8010dfc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010d7c:	229c      	movs	r2, #156	; 0x9c
 8010d7e:	2100      	movs	r1, #0
 8010d80:	68f8      	ldr	r0, [r7, #12]
 8010d82:	f00a fae9 	bl	801b358 <memset>
    pcb->prio = prio;
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	79fa      	ldrb	r2, [r7, #7]
 8010d8a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010d92:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	22ff      	movs	r2, #255	; 0xff
 8010daa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010db2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2206      	movs	r2, #6
 8010db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2206      	movs	r2, #6
 8010dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dc8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	2201      	movs	r2, #1
 8010dce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010dd2:	4b0d      	ldr	r3, [pc, #52]	; (8010e08 <tcp_alloc+0xf8>)
 8010dd4:	681a      	ldr	r2, [r3, #0]
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010dda:	4b0c      	ldr	r3, [pc, #48]	; (8010e0c <tcp_alloc+0xfc>)
 8010ddc:	781a      	ldrb	r2, [r3, #0]
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	f642 52a0 	movw	r2, #11680	; 0x2da0
 8010de8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	4a08      	ldr	r2, [pc, #32]	; (8010e10 <tcp_alloc+0x100>)
 8010df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	4a07      	ldr	r2, [pc, #28]	; (8010e14 <tcp_alloc+0x104>)
 8010df8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010dfc:	68fb      	ldr	r3, [r7, #12]
}
 8010dfe:	4618      	mov	r0, r3
 8010e00:	3710      	adds	r7, #16
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bd80      	pop	{r7, pc}
 8010e06:	bf00      	nop
 8010e08:	20013d70 	.word	0x20013d70
 8010e0c:	20013d86 	.word	0x20013d86
 8010e10:	08010ac9 	.word	0x08010ac9
 8010e14:	006ddd00 	.word	0x006ddd00

08010e18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b082      	sub	sp, #8
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d107      	bne.n	8010e36 <tcp_pcb_purge+0x1e>
 8010e26:	4b21      	ldr	r3, [pc, #132]	; (8010eac <tcp_pcb_purge+0x94>)
 8010e28:	f640 0251 	movw	r2, #2129	; 0x851
 8010e2c:	4920      	ldr	r1, [pc, #128]	; (8010eb0 <tcp_pcb_purge+0x98>)
 8010e2e:	4821      	ldr	r0, [pc, #132]	; (8010eb4 <tcp_pcb_purge+0x9c>)
 8010e30:	f00a f930 	bl	801b094 <iprintf>
 8010e34:	e037      	b.n	8010ea6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	7d1b      	ldrb	r3, [r3, #20]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d033      	beq.n	8010ea6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010e42:	2b0a      	cmp	r3, #10
 8010e44:	d02f      	beq.n	8010ea6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d02b      	beq.n	8010ea6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d007      	beq.n	8010e66 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	f7fe fac4 	bl	800f3e8 <pbuf_free>
      pcb->refused_data = NULL;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d002      	beq.n	8010e74 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f986 	bl	8011180 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e7a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7ff fdc7 	bl	8010a14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7ff fdc2 	bl	8010a14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2200      	movs	r2, #0
 8010e94:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	0801e6fc 	.word	0x0801e6fc
 8010eb0:	0801ed48 	.word	0x0801ed48
 8010eb4:	0801e740 	.word	0x0801e740

08010eb8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b084      	sub	sp, #16
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d106      	bne.n	8010ed6 <tcp_pcb_remove+0x1e>
 8010ec8:	4b3e      	ldr	r3, [pc, #248]	; (8010fc4 <tcp_pcb_remove+0x10c>)
 8010eca:	f640 0283 	movw	r2, #2179	; 0x883
 8010ece:	493e      	ldr	r1, [pc, #248]	; (8010fc8 <tcp_pcb_remove+0x110>)
 8010ed0:	483e      	ldr	r0, [pc, #248]	; (8010fcc <tcp_pcb_remove+0x114>)
 8010ed2:	f00a f8df 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d106      	bne.n	8010eea <tcp_pcb_remove+0x32>
 8010edc:	4b39      	ldr	r3, [pc, #228]	; (8010fc4 <tcp_pcb_remove+0x10c>)
 8010ede:	f640 0284 	movw	r2, #2180	; 0x884
 8010ee2:	493b      	ldr	r1, [pc, #236]	; (8010fd0 <tcp_pcb_remove+0x118>)
 8010ee4:	4839      	ldr	r0, [pc, #228]	; (8010fcc <tcp_pcb_remove+0x114>)
 8010ee6:	f00a f8d5 	bl	801b094 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	683a      	ldr	r2, [r7, #0]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d105      	bne.n	8010f00 <tcp_pcb_remove+0x48>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	68da      	ldr	r2, [r3, #12]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	601a      	str	r2, [r3, #0]
 8010efe:	e013      	b.n	8010f28 <tcp_pcb_remove+0x70>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	60fb      	str	r3, [r7, #12]
 8010f06:	e00c      	b.n	8010f22 <tcp_pcb_remove+0x6a>
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d104      	bne.n	8010f1c <tcp_pcb_remove+0x64>
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	68da      	ldr	r2, [r3, #12]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	60da      	str	r2, [r3, #12]
 8010f1a:	e005      	b.n	8010f28 <tcp_pcb_remove+0x70>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	60fb      	str	r3, [r7, #12]
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d1ef      	bne.n	8010f08 <tcp_pcb_remove+0x50>
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010f2e:	6838      	ldr	r0, [r7, #0]
 8010f30:	f7ff ff72 	bl	8010e18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	7d1b      	ldrb	r3, [r3, #20]
 8010f38:	2b0a      	cmp	r3, #10
 8010f3a:	d013      	beq.n	8010f64 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d00f      	beq.n	8010f64 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d009      	beq.n	8010f64 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010f50:	683b      	ldr	r3, [r7, #0]
 8010f52:	8b5b      	ldrh	r3, [r3, #26]
 8010f54:	f043 0302 	orr.w	r3, r3, #2
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010f5e:	6838      	ldr	r0, [r7, #0]
 8010f60:	f002 ff88 	bl	8013e74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	7d1b      	ldrb	r3, [r3, #20]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d020      	beq.n	8010fae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d006      	beq.n	8010f82 <tcp_pcb_remove+0xca>
 8010f74:	4b13      	ldr	r3, [pc, #76]	; (8010fc4 <tcp_pcb_remove+0x10c>)
 8010f76:	f640 0293 	movw	r2, #2195	; 0x893
 8010f7a:	4916      	ldr	r1, [pc, #88]	; (8010fd4 <tcp_pcb_remove+0x11c>)
 8010f7c:	4813      	ldr	r0, [pc, #76]	; (8010fcc <tcp_pcb_remove+0x114>)
 8010f7e:	f00a f889 	bl	801b094 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d006      	beq.n	8010f98 <tcp_pcb_remove+0xe0>
 8010f8a:	4b0e      	ldr	r3, [pc, #56]	; (8010fc4 <tcp_pcb_remove+0x10c>)
 8010f8c:	f640 0294 	movw	r2, #2196	; 0x894
 8010f90:	4911      	ldr	r1, [pc, #68]	; (8010fd8 <tcp_pcb_remove+0x120>)
 8010f92:	480e      	ldr	r0, [pc, #56]	; (8010fcc <tcp_pcb_remove+0x114>)
 8010f94:	f00a f87e 	bl	801b094 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d006      	beq.n	8010fae <tcp_pcb_remove+0xf6>
 8010fa0:	4b08      	ldr	r3, [pc, #32]	; (8010fc4 <tcp_pcb_remove+0x10c>)
 8010fa2:	f640 0296 	movw	r2, #2198	; 0x896
 8010fa6:	490d      	ldr	r1, [pc, #52]	; (8010fdc <tcp_pcb_remove+0x124>)
 8010fa8:	4808      	ldr	r0, [pc, #32]	; (8010fcc <tcp_pcb_remove+0x114>)
 8010faa:	f00a f873 	bl	801b094 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010fba:	bf00      	nop
 8010fbc:	3710      	adds	r7, #16
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	0801e6fc 	.word	0x0801e6fc
 8010fc8:	0801ed64 	.word	0x0801ed64
 8010fcc:	0801e740 	.word	0x0801e740
 8010fd0:	0801ed80 	.word	0x0801ed80
 8010fd4:	0801eda0 	.word	0x0801eda0
 8010fd8:	0801edb8 	.word	0x0801edb8
 8010fdc:	0801edd4 	.word	0x0801edd4

08010fe0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <tcp_next_iss+0x1c>
 8010fee:	4b0a      	ldr	r3, [pc, #40]	; (8011018 <tcp_next_iss+0x38>)
 8010ff0:	f640 02af 	movw	r2, #2223	; 0x8af
 8010ff4:	4909      	ldr	r1, [pc, #36]	; (801101c <tcp_next_iss+0x3c>)
 8010ff6:	480a      	ldr	r0, [pc, #40]	; (8011020 <tcp_next_iss+0x40>)
 8010ff8:	f00a f84c 	bl	801b094 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010ffc:	4b09      	ldr	r3, [pc, #36]	; (8011024 <tcp_next_iss+0x44>)
 8010ffe:	681a      	ldr	r2, [r3, #0]
 8011000:	4b09      	ldr	r3, [pc, #36]	; (8011028 <tcp_next_iss+0x48>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	4413      	add	r3, r2
 8011006:	4a07      	ldr	r2, [pc, #28]	; (8011024 <tcp_next_iss+0x44>)
 8011008:	6013      	str	r3, [r2, #0]
  return iss;
 801100a:	4b06      	ldr	r3, [pc, #24]	; (8011024 <tcp_next_iss+0x44>)
 801100c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801100e:	4618      	mov	r0, r3
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	0801e6fc 	.word	0x0801e6fc
 801101c:	0801edec 	.word	0x0801edec
 8011020:	0801e740 	.word	0x0801e740
 8011024:	200000b4 	.word	0x200000b4
 8011028:	20013d70 	.word	0x20013d70

0801102c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b086      	sub	sp, #24
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	607a      	str	r2, [r7, #4]
 8011038:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d106      	bne.n	801104e <tcp_eff_send_mss_netif+0x22>
 8011040:	4b14      	ldr	r3, [pc, #80]	; (8011094 <tcp_eff_send_mss_netif+0x68>)
 8011042:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011046:	4914      	ldr	r1, [pc, #80]	; (8011098 <tcp_eff_send_mss_netif+0x6c>)
 8011048:	4814      	ldr	r0, [pc, #80]	; (801109c <tcp_eff_send_mss_netif+0x70>)
 801104a:	f00a f823 	bl	801b094 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d101      	bne.n	8011058 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011054:	89fb      	ldrh	r3, [r7, #14]
 8011056:	e019      	b.n	801108c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801105c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801105e:	8afb      	ldrh	r3, [r7, #22]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d012      	beq.n	801108a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011064:	2328      	movs	r3, #40	; 0x28
 8011066:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011068:	8afa      	ldrh	r2, [r7, #22]
 801106a:	8abb      	ldrh	r3, [r7, #20]
 801106c:	429a      	cmp	r2, r3
 801106e:	d904      	bls.n	801107a <tcp_eff_send_mss_netif+0x4e>
 8011070:	8afa      	ldrh	r2, [r7, #22]
 8011072:	8abb      	ldrh	r3, [r7, #20]
 8011074:	1ad3      	subs	r3, r2, r3
 8011076:	b29b      	uxth	r3, r3
 8011078:	e000      	b.n	801107c <tcp_eff_send_mss_netif+0x50>
 801107a:	2300      	movs	r3, #0
 801107c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801107e:	8a7a      	ldrh	r2, [r7, #18]
 8011080:	89fb      	ldrh	r3, [r7, #14]
 8011082:	4293      	cmp	r3, r2
 8011084:	bf28      	it	cs
 8011086:	4613      	movcs	r3, r2
 8011088:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801108a:	89fb      	ldrh	r3, [r7, #14]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3718      	adds	r7, #24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	0801e6fc 	.word	0x0801e6fc
 8011098:	0801ee08 	.word	0x0801ee08
 801109c:	0801e740 	.word	0x0801e740

080110a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d119      	bne.n	80110e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80110b4:	4b10      	ldr	r3, [pc, #64]	; (80110f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80110b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80110ba:	4910      	ldr	r1, [pc, #64]	; (80110fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80110bc:	4810      	ldr	r0, [pc, #64]	; (8011100 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80110be:	f009 ffe9 	bl	801b094 <iprintf>

  while (pcb != NULL) {
 80110c2:	e011      	b.n	80110e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d108      	bne.n	80110e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80110d6:	68f8      	ldr	r0, [r7, #12]
 80110d8:	f7fe ffc2 	bl	8010060 <tcp_abort>
      pcb = next;
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	60fb      	str	r3, [r7, #12]
 80110e0:	e002      	b.n	80110e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d1ea      	bne.n	80110c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80110ee:	bf00      	nop
 80110f0:	bf00      	nop
 80110f2:	3710      	adds	r7, #16
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	0801e6fc 	.word	0x0801e6fc
 80110fc:	0801ee30 	.word	0x0801ee30
 8011100:	0801e740 	.word	0x0801e740

08011104 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d02a      	beq.n	801116a <tcp_netif_ip_addr_changed+0x66>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d026      	beq.n	801116a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801111c:	4b15      	ldr	r3, [pc, #84]	; (8011174 <tcp_netif_ip_addr_changed+0x70>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4619      	mov	r1, r3
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f7ff ffbc 	bl	80110a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011128:	4b13      	ldr	r3, [pc, #76]	; (8011178 <tcp_netif_ip_addr_changed+0x74>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff ffb6 	bl	80110a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d017      	beq.n	801116a <tcp_netif_ip_addr_changed+0x66>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d013      	beq.n	801116a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011142:	4b0e      	ldr	r3, [pc, #56]	; (801117c <tcp_netif_ip_addr_changed+0x78>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	60fb      	str	r3, [r7, #12]
 8011148:	e00c      	b.n	8011164 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	429a      	cmp	r2, r3
 8011154:	d103      	bne.n	801115e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	681a      	ldr	r2, [r3, #0]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	68db      	ldr	r3, [r3, #12]
 8011162:	60fb      	str	r3, [r7, #12]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1ef      	bne.n	801114a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801116a:	bf00      	nop
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
 8011172:	bf00      	nop
 8011174:	20013d7c 	.word	0x20013d7c
 8011178:	20013d74 	.word	0x20013d74
 801117c:	20013d78 	.word	0x20013d78

08011180 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801118c:	2b00      	cmp	r3, #0
 801118e:	d007      	beq.n	80111a0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff fc3d 	bl	8010a14 <tcp_segs_free>
    pcb->ooseq = NULL;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80111a0:	bf00      	nop
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}

080111a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80111a8:	b590      	push	{r4, r7, lr}
 80111aa:	b08d      	sub	sp, #52	; 0x34
 80111ac:	af04      	add	r7, sp, #16
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d105      	bne.n	80111c4 <tcp_input+0x1c>
 80111b8:	4b8b      	ldr	r3, [pc, #556]	; (80113e8 <tcp_input+0x240>)
 80111ba:	2283      	movs	r2, #131	; 0x83
 80111bc:	498b      	ldr	r1, [pc, #556]	; (80113ec <tcp_input+0x244>)
 80111be:	488c      	ldr	r0, [pc, #560]	; (80113f0 <tcp_input+0x248>)
 80111c0:	f009 ff68 	bl	801b094 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	4a8a      	ldr	r2, [pc, #552]	; (80113f4 <tcp_input+0x24c>)
 80111ca:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	895b      	ldrh	r3, [r3, #10]
 80111d0:	2b13      	cmp	r3, #19
 80111d2:	f240 83e3 	bls.w	801199c <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80111d6:	4b88      	ldr	r3, [pc, #544]	; (80113f8 <tcp_input+0x250>)
 80111d8:	695b      	ldr	r3, [r3, #20]
 80111da:	4a87      	ldr	r2, [pc, #540]	; (80113f8 <tcp_input+0x250>)
 80111dc:	6812      	ldr	r2, [r2, #0]
 80111de:	4611      	mov	r1, r2
 80111e0:	4618      	mov	r0, r3
 80111e2:	f008 f827 	bl	8019234 <ip4_addr_isbroadcast_u32>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	f040 83d9 	bne.w	80119a0 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80111ee:	4b82      	ldr	r3, [pc, #520]	; (80113f8 <tcp_input+0x250>)
 80111f0:	695b      	ldr	r3, [r3, #20]
 80111f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80111f6:	2be0      	cmp	r3, #224	; 0xe0
 80111f8:	f000 83d2 	beq.w	80119a0 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	891a      	ldrh	r2, [r3, #8]
 8011200:	4b7e      	ldr	r3, [pc, #504]	; (80113fc <tcp_input+0x254>)
 8011202:	9300      	str	r3, [sp, #0]
 8011204:	4b7e      	ldr	r3, [pc, #504]	; (8011400 <tcp_input+0x258>)
 8011206:	2106      	movs	r1, #6
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7fc fcfd 	bl	800dc08 <ip_chksum_pseudo>
 801120e:	4603      	mov	r3, r0
 8011210:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 8011212:	8a3b      	ldrh	r3, [r7, #16]
 8011214:	2b00      	cmp	r3, #0
 8011216:	f040 83c5 	bne.w	80119a4 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801121a:	4b76      	ldr	r3, [pc, #472]	; (80113f4 <tcp_input+0x24c>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	b29b      	uxth	r3, r3
 8011222:	4618      	mov	r0, r3
 8011224:	f7fc fbbe 	bl	800d9a4 <lwip_htons>
 8011228:	4603      	mov	r3, r0
 801122a:	0b1b      	lsrs	r3, r3, #12
 801122c:	b29b      	uxth	r3, r3
 801122e:	b2db      	uxtb	r3, r3
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011234:	7bfb      	ldrb	r3, [r7, #15]
 8011236:	2b13      	cmp	r3, #19
 8011238:	f240 83b6 	bls.w	80119a8 <tcp_input+0x800>
 801123c:	7bfb      	ldrb	r3, [r7, #15]
 801123e:	b29a      	uxth	r2, r3
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	891b      	ldrh	r3, [r3, #8]
 8011244:	429a      	cmp	r2, r3
 8011246:	f200 83af 	bhi.w	80119a8 <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801124a:	7bfb      	ldrb	r3, [r7, #15]
 801124c:	b29b      	uxth	r3, r3
 801124e:	3b14      	subs	r3, #20
 8011250:	b29a      	uxth	r2, r3
 8011252:	4b6c      	ldr	r3, [pc, #432]	; (8011404 <tcp_input+0x25c>)
 8011254:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011256:	4b6c      	ldr	r3, [pc, #432]	; (8011408 <tcp_input+0x260>)
 8011258:	2200      	movs	r2, #0
 801125a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	895a      	ldrh	r2, [r3, #10]
 8011260:	7bfb      	ldrb	r3, [r7, #15]
 8011262:	b29b      	uxth	r3, r3
 8011264:	429a      	cmp	r2, r3
 8011266:	d309      	bcc.n	801127c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011268:	4b66      	ldr	r3, [pc, #408]	; (8011404 <tcp_input+0x25c>)
 801126a:	881a      	ldrh	r2, [r3, #0]
 801126c:	4b67      	ldr	r3, [pc, #412]	; (801140c <tcp_input+0x264>)
 801126e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011270:	7bfb      	ldrb	r3, [r7, #15]
 8011272:	4619      	mov	r1, r3
 8011274:	6878      	ldr	r0, [r7, #4]
 8011276:	f7fe f831 	bl	800f2dc <pbuf_remove_header>
 801127a:	e04e      	b.n	801131a <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d105      	bne.n	8011290 <tcp_input+0xe8>
 8011284:	4b58      	ldr	r3, [pc, #352]	; (80113e8 <tcp_input+0x240>)
 8011286:	22c2      	movs	r2, #194	; 0xc2
 8011288:	4961      	ldr	r1, [pc, #388]	; (8011410 <tcp_input+0x268>)
 801128a:	4859      	ldr	r0, [pc, #356]	; (80113f0 <tcp_input+0x248>)
 801128c:	f009 ff02 	bl	801b094 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011290:	2114      	movs	r1, #20
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7fe f822 	bl	800f2dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	895a      	ldrh	r2, [r3, #10]
 801129c:	4b5b      	ldr	r3, [pc, #364]	; (801140c <tcp_input+0x264>)
 801129e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80112a0:	4b58      	ldr	r3, [pc, #352]	; (8011404 <tcp_input+0x25c>)
 80112a2:	881a      	ldrh	r2, [r3, #0]
 80112a4:	4b59      	ldr	r3, [pc, #356]	; (801140c <tcp_input+0x264>)
 80112a6:	881b      	ldrh	r3, [r3, #0]
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80112ac:	4b57      	ldr	r3, [pc, #348]	; (801140c <tcp_input+0x264>)
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	4619      	mov	r1, r3
 80112b2:	6878      	ldr	r0, [r7, #4]
 80112b4:	f7fe f812 	bl	800f2dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	895b      	ldrh	r3, [r3, #10]
 80112be:	89ba      	ldrh	r2, [r7, #12]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	f200 8373 	bhi.w	80119ac <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	4a4e      	ldr	r2, [pc, #312]	; (8011408 <tcp_input+0x260>)
 80112ce:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	89ba      	ldrh	r2, [r7, #12]
 80112d6:	4611      	mov	r1, r2
 80112d8:	4618      	mov	r0, r3
 80112da:	f7fd ffff 	bl	800f2dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	891a      	ldrh	r2, [r3, #8]
 80112e2:	89bb      	ldrh	r3, [r7, #12]
 80112e4:	1ad3      	subs	r3, r2, r3
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	895b      	ldrh	r3, [r3, #10]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d005      	beq.n	8011300 <tcp_input+0x158>
 80112f4:	4b3c      	ldr	r3, [pc, #240]	; (80113e8 <tcp_input+0x240>)
 80112f6:	22df      	movs	r2, #223	; 0xdf
 80112f8:	4946      	ldr	r1, [pc, #280]	; (8011414 <tcp_input+0x26c>)
 80112fa:	483d      	ldr	r0, [pc, #244]	; (80113f0 <tcp_input+0x248>)
 80112fc:	f009 feca 	bl	801b094 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	891a      	ldrh	r2, [r3, #8]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	891b      	ldrh	r3, [r3, #8]
 801130a:	429a      	cmp	r2, r3
 801130c:	d005      	beq.n	801131a <tcp_input+0x172>
 801130e:	4b36      	ldr	r3, [pc, #216]	; (80113e8 <tcp_input+0x240>)
 8011310:	22e0      	movs	r2, #224	; 0xe0
 8011312:	4941      	ldr	r1, [pc, #260]	; (8011418 <tcp_input+0x270>)
 8011314:	4836      	ldr	r0, [pc, #216]	; (80113f0 <tcp_input+0x248>)
 8011316:	f009 febd 	bl	801b094 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801131a:	4b36      	ldr	r3, [pc, #216]	; (80113f4 <tcp_input+0x24c>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	881b      	ldrh	r3, [r3, #0]
 8011320:	b29b      	uxth	r3, r3
 8011322:	4a34      	ldr	r2, [pc, #208]	; (80113f4 <tcp_input+0x24c>)
 8011324:	6814      	ldr	r4, [r2, #0]
 8011326:	4618      	mov	r0, r3
 8011328:	f7fc fb3c 	bl	800d9a4 <lwip_htons>
 801132c:	4603      	mov	r3, r0
 801132e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011330:	4b30      	ldr	r3, [pc, #192]	; (80113f4 <tcp_input+0x24c>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	885b      	ldrh	r3, [r3, #2]
 8011336:	b29b      	uxth	r3, r3
 8011338:	4a2e      	ldr	r2, [pc, #184]	; (80113f4 <tcp_input+0x24c>)
 801133a:	6814      	ldr	r4, [r2, #0]
 801133c:	4618      	mov	r0, r3
 801133e:	f7fc fb31 	bl	800d9a4 <lwip_htons>
 8011342:	4603      	mov	r3, r0
 8011344:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011346:	4b2b      	ldr	r3, [pc, #172]	; (80113f4 <tcp_input+0x24c>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	685b      	ldr	r3, [r3, #4]
 801134c:	4a29      	ldr	r2, [pc, #164]	; (80113f4 <tcp_input+0x24c>)
 801134e:	6814      	ldr	r4, [r2, #0]
 8011350:	4618      	mov	r0, r3
 8011352:	f7fc fb3c 	bl	800d9ce <lwip_htonl>
 8011356:	4603      	mov	r3, r0
 8011358:	6063      	str	r3, [r4, #4]
 801135a:	6863      	ldr	r3, [r4, #4]
 801135c:	4a2f      	ldr	r2, [pc, #188]	; (801141c <tcp_input+0x274>)
 801135e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011360:	4b24      	ldr	r3, [pc, #144]	; (80113f4 <tcp_input+0x24c>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	689b      	ldr	r3, [r3, #8]
 8011366:	4a23      	ldr	r2, [pc, #140]	; (80113f4 <tcp_input+0x24c>)
 8011368:	6814      	ldr	r4, [r2, #0]
 801136a:	4618      	mov	r0, r3
 801136c:	f7fc fb2f 	bl	800d9ce <lwip_htonl>
 8011370:	4603      	mov	r3, r0
 8011372:	60a3      	str	r3, [r4, #8]
 8011374:	68a3      	ldr	r3, [r4, #8]
 8011376:	4a2a      	ldr	r2, [pc, #168]	; (8011420 <tcp_input+0x278>)
 8011378:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801137a:	4b1e      	ldr	r3, [pc, #120]	; (80113f4 <tcp_input+0x24c>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	89db      	ldrh	r3, [r3, #14]
 8011380:	b29b      	uxth	r3, r3
 8011382:	4a1c      	ldr	r2, [pc, #112]	; (80113f4 <tcp_input+0x24c>)
 8011384:	6814      	ldr	r4, [r2, #0]
 8011386:	4618      	mov	r0, r3
 8011388:	f7fc fb0c 	bl	800d9a4 <lwip_htons>
 801138c:	4603      	mov	r3, r0
 801138e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011390:	4b18      	ldr	r3, [pc, #96]	; (80113f4 <tcp_input+0x24c>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	899b      	ldrh	r3, [r3, #12]
 8011396:	b29b      	uxth	r3, r3
 8011398:	4618      	mov	r0, r3
 801139a:	f7fc fb03 	bl	800d9a4 <lwip_htons>
 801139e:	4603      	mov	r3, r0
 80113a0:	b2db      	uxtb	r3, r3
 80113a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113a6:	b2da      	uxtb	r2, r3
 80113a8:	4b1e      	ldr	r3, [pc, #120]	; (8011424 <tcp_input+0x27c>)
 80113aa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	891a      	ldrh	r2, [r3, #8]
 80113b0:	4b1d      	ldr	r3, [pc, #116]	; (8011428 <tcp_input+0x280>)
 80113b2:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80113b4:	4b1b      	ldr	r3, [pc, #108]	; (8011424 <tcp_input+0x27c>)
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f003 0303 	and.w	r3, r3, #3
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d00c      	beq.n	80113da <tcp_input+0x232>
    tcplen++;
 80113c0:	4b19      	ldr	r3, [pc, #100]	; (8011428 <tcp_input+0x280>)
 80113c2:	881b      	ldrh	r3, [r3, #0]
 80113c4:	3301      	adds	r3, #1
 80113c6:	b29a      	uxth	r2, r3
 80113c8:	4b17      	ldr	r3, [pc, #92]	; (8011428 <tcp_input+0x280>)
 80113ca:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	891a      	ldrh	r2, [r3, #8]
 80113d0:	4b15      	ldr	r3, [pc, #84]	; (8011428 <tcp_input+0x280>)
 80113d2:	881b      	ldrh	r3, [r3, #0]
 80113d4:	429a      	cmp	r2, r3
 80113d6:	f200 82eb 	bhi.w	80119b0 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80113da:	2300      	movs	r3, #0
 80113dc:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80113de:	4b13      	ldr	r3, [pc, #76]	; (801142c <tcp_input+0x284>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	61bb      	str	r3, [r7, #24]
 80113e4:	e09b      	b.n	801151e <tcp_input+0x376>
 80113e6:	bf00      	nop
 80113e8:	0801ee64 	.word	0x0801ee64
 80113ec:	0801ee98 	.word	0x0801ee98
 80113f0:	0801eeb0 	.word	0x0801eeb0
 80113f4:	20013d9c 	.word	0x20013d9c
 80113f8:	2000a2fc 	.word	0x2000a2fc
 80113fc:	2000a310 	.word	0x2000a310
 8011400:	2000a30c 	.word	0x2000a30c
 8011404:	20013da0 	.word	0x20013da0
 8011408:	20013da4 	.word	0x20013da4
 801140c:	20013da2 	.word	0x20013da2
 8011410:	0801eed8 	.word	0x0801eed8
 8011414:	0801eee8 	.word	0x0801eee8
 8011418:	0801eef4 	.word	0x0801eef4
 801141c:	20013dac 	.word	0x20013dac
 8011420:	20013db0 	.word	0x20013db0
 8011424:	20013db8 	.word	0x20013db8
 8011428:	20013db6 	.word	0x20013db6
 801142c:	20013d7c 	.word	0x20013d7c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011430:	69bb      	ldr	r3, [r7, #24]
 8011432:	7d1b      	ldrb	r3, [r3, #20]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d105      	bne.n	8011444 <tcp_input+0x29c>
 8011438:	4b88      	ldr	r3, [pc, #544]	; (801165c <tcp_input+0x4b4>)
 801143a:	22fb      	movs	r2, #251	; 0xfb
 801143c:	4988      	ldr	r1, [pc, #544]	; (8011660 <tcp_input+0x4b8>)
 801143e:	4889      	ldr	r0, [pc, #548]	; (8011664 <tcp_input+0x4bc>)
 8011440:	f009 fe28 	bl	801b094 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	7d1b      	ldrb	r3, [r3, #20]
 8011448:	2b0a      	cmp	r3, #10
 801144a:	d105      	bne.n	8011458 <tcp_input+0x2b0>
 801144c:	4b83      	ldr	r3, [pc, #524]	; (801165c <tcp_input+0x4b4>)
 801144e:	22fc      	movs	r2, #252	; 0xfc
 8011450:	4985      	ldr	r1, [pc, #532]	; (8011668 <tcp_input+0x4c0>)
 8011452:	4884      	ldr	r0, [pc, #528]	; (8011664 <tcp_input+0x4bc>)
 8011454:	f009 fe1e 	bl	801b094 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011458:	69bb      	ldr	r3, [r7, #24]
 801145a:	7d1b      	ldrb	r3, [r3, #20]
 801145c:	2b01      	cmp	r3, #1
 801145e:	d105      	bne.n	801146c <tcp_input+0x2c4>
 8011460:	4b7e      	ldr	r3, [pc, #504]	; (801165c <tcp_input+0x4b4>)
 8011462:	22fd      	movs	r2, #253	; 0xfd
 8011464:	4981      	ldr	r1, [pc, #516]	; (801166c <tcp_input+0x4c4>)
 8011466:	487f      	ldr	r0, [pc, #508]	; (8011664 <tcp_input+0x4bc>)
 8011468:	f009 fe14 	bl	801b094 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801146c:	69bb      	ldr	r3, [r7, #24]
 801146e:	7a1b      	ldrb	r3, [r3, #8]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00c      	beq.n	801148e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	7a1a      	ldrb	r2, [r3, #8]
 8011478:	4b7d      	ldr	r3, [pc, #500]	; (8011670 <tcp_input+0x4c8>)
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011480:	3301      	adds	r3, #1
 8011482:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011484:	429a      	cmp	r2, r3
 8011486:	d002      	beq.n	801148e <tcp_input+0x2e6>
      prev = pcb;
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	61fb      	str	r3, [r7, #28]
      continue;
 801148c:	e044      	b.n	8011518 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	8b1a      	ldrh	r2, [r3, #24]
 8011492:	4b78      	ldr	r3, [pc, #480]	; (8011674 <tcp_input+0x4cc>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	b29b      	uxth	r3, r3
 801149a:	429a      	cmp	r2, r3
 801149c:	d13a      	bne.n	8011514 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 801149e:	69bb      	ldr	r3, [r7, #24]
 80114a0:	8ada      	ldrh	r2, [r3, #22]
 80114a2:	4b74      	ldr	r3, [pc, #464]	; (8011674 <tcp_input+0x4cc>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	885b      	ldrh	r3, [r3, #2]
 80114a8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d132      	bne.n	8011514 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	4b6f      	ldr	r3, [pc, #444]	; (8011670 <tcp_input+0x4c8>)
 80114b4:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d12c      	bne.n	8011514 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	4b6c      	ldr	r3, [pc, #432]	; (8011670 <tcp_input+0x4c8>)
 80114c0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d126      	bne.n	8011514 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	69ba      	ldr	r2, [r7, #24]
 80114cc:	429a      	cmp	r2, r3
 80114ce:	d106      	bne.n	80114de <tcp_input+0x336>
 80114d0:	4b62      	ldr	r3, [pc, #392]	; (801165c <tcp_input+0x4b4>)
 80114d2:	f240 120d 	movw	r2, #269	; 0x10d
 80114d6:	4968      	ldr	r1, [pc, #416]	; (8011678 <tcp_input+0x4d0>)
 80114d8:	4862      	ldr	r0, [pc, #392]	; (8011664 <tcp_input+0x4bc>)
 80114da:	f009 fddb 	bl	801b094 <iprintf>
      if (prev != NULL) {
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00a      	beq.n	80114fa <tcp_input+0x352>
        prev->next = pcb->next;
 80114e4:	69bb      	ldr	r3, [r7, #24]
 80114e6:	68da      	ldr	r2, [r3, #12]
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80114ec:	4b63      	ldr	r3, [pc, #396]	; (801167c <tcp_input+0x4d4>)
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80114f4:	4a61      	ldr	r2, [pc, #388]	; (801167c <tcp_input+0x4d4>)
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	69ba      	ldr	r2, [r7, #24]
 8011500:	429a      	cmp	r2, r3
 8011502:	d110      	bne.n	8011526 <tcp_input+0x37e>
 8011504:	4b55      	ldr	r3, [pc, #340]	; (801165c <tcp_input+0x4b4>)
 8011506:	f240 1215 	movw	r2, #277	; 0x115
 801150a:	495d      	ldr	r1, [pc, #372]	; (8011680 <tcp_input+0x4d8>)
 801150c:	4855      	ldr	r0, [pc, #340]	; (8011664 <tcp_input+0x4bc>)
 801150e:	f009 fdc1 	bl	801b094 <iprintf>
      break;
 8011512:	e008      	b.n	8011526 <tcp_input+0x37e>
    }
    prev = pcb;
 8011514:	69bb      	ldr	r3, [r7, #24]
 8011516:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	61bb      	str	r3, [r7, #24]
 801151e:	69bb      	ldr	r3, [r7, #24]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d185      	bne.n	8011430 <tcp_input+0x288>
 8011524:	e000      	b.n	8011528 <tcp_input+0x380>
      break;
 8011526:	bf00      	nop
  }

  if (pcb == NULL) {
 8011528:	69bb      	ldr	r3, [r7, #24]
 801152a:	2b00      	cmp	r3, #0
 801152c:	f040 80b0 	bne.w	8011690 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011530:	4b54      	ldr	r3, [pc, #336]	; (8011684 <tcp_input+0x4dc>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	61bb      	str	r3, [r7, #24]
 8011536:	e03f      	b.n	80115b8 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	7d1b      	ldrb	r3, [r3, #20]
 801153c:	2b0a      	cmp	r3, #10
 801153e:	d006      	beq.n	801154e <tcp_input+0x3a6>
 8011540:	4b46      	ldr	r3, [pc, #280]	; (801165c <tcp_input+0x4b4>)
 8011542:	f240 121f 	movw	r2, #287	; 0x11f
 8011546:	4950      	ldr	r1, [pc, #320]	; (8011688 <tcp_input+0x4e0>)
 8011548:	4846      	ldr	r0, [pc, #280]	; (8011664 <tcp_input+0x4bc>)
 801154a:	f009 fda3 	bl	801b094 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	7a1b      	ldrb	r3, [r3, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d009      	beq.n	801156a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	7a1a      	ldrb	r2, [r3, #8]
 801155a:	4b45      	ldr	r3, [pc, #276]	; (8011670 <tcp_input+0x4c8>)
 801155c:	685b      	ldr	r3, [r3, #4]
 801155e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011562:	3301      	adds	r3, #1
 8011564:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011566:	429a      	cmp	r2, r3
 8011568:	d122      	bne.n	80115b0 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801156a:	69bb      	ldr	r3, [r7, #24]
 801156c:	8b1a      	ldrh	r2, [r3, #24]
 801156e:	4b41      	ldr	r3, [pc, #260]	; (8011674 <tcp_input+0x4cc>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	881b      	ldrh	r3, [r3, #0]
 8011574:	b29b      	uxth	r3, r3
 8011576:	429a      	cmp	r2, r3
 8011578:	d11b      	bne.n	80115b2 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 801157a:	69bb      	ldr	r3, [r7, #24]
 801157c:	8ada      	ldrh	r2, [r3, #22]
 801157e:	4b3d      	ldr	r3, [pc, #244]	; (8011674 <tcp_input+0x4cc>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	885b      	ldrh	r3, [r3, #2]
 8011584:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011586:	429a      	cmp	r2, r3
 8011588:	d113      	bne.n	80115b2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801158a:	69bb      	ldr	r3, [r7, #24]
 801158c:	685a      	ldr	r2, [r3, #4]
 801158e:	4b38      	ldr	r3, [pc, #224]	; (8011670 <tcp_input+0x4c8>)
 8011590:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011592:	429a      	cmp	r2, r3
 8011594:	d10d      	bne.n	80115b2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	4b35      	ldr	r3, [pc, #212]	; (8011670 <tcp_input+0x4c8>)
 801159c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801159e:	429a      	cmp	r2, r3
 80115a0:	d107      	bne.n	80115b2 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80115a2:	69b8      	ldr	r0, [r7, #24]
 80115a4:	f000 fb5e 	bl	8011c64 <tcp_timewait_input>
        }
        pbuf_free(p);
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	f7fd ff1d 	bl	800f3e8 <pbuf_free>
        return;
 80115ae:	e205      	b.n	80119bc <tcp_input+0x814>
        continue;
 80115b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80115b2:	69bb      	ldr	r3, [r7, #24]
 80115b4:	68db      	ldr	r3, [r3, #12]
 80115b6:	61bb      	str	r3, [r7, #24]
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d1bc      	bne.n	8011538 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80115be:	2300      	movs	r3, #0
 80115c0:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80115c2:	4b32      	ldr	r3, [pc, #200]	; (801168c <tcp_input+0x4e4>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	617b      	str	r3, [r7, #20]
 80115c8:	e02a      	b.n	8011620 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	7a1b      	ldrb	r3, [r3, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d00c      	beq.n	80115ec <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115d2:	697b      	ldr	r3, [r7, #20]
 80115d4:	7a1a      	ldrb	r2, [r3, #8]
 80115d6:	4b26      	ldr	r3, [pc, #152]	; (8011670 <tcp_input+0x4c8>)
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80115de:	3301      	adds	r3, #1
 80115e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d002      	beq.n	80115ec <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	61fb      	str	r3, [r7, #28]
        continue;
 80115ea:	e016      	b.n	801161a <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	8ada      	ldrh	r2, [r3, #22]
 80115f0:	4b20      	ldr	r3, [pc, #128]	; (8011674 <tcp_input+0x4cc>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	885b      	ldrh	r3, [r3, #2]
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d10c      	bne.n	8011616 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	4b1b      	ldr	r3, [pc, #108]	; (8011670 <tcp_input+0x4c8>)
 8011602:	695b      	ldr	r3, [r3, #20]
 8011604:	429a      	cmp	r2, r3
 8011606:	d00f      	beq.n	8011628 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00d      	beq.n	801162a <tcp_input+0x482>
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d009      	beq.n	801162a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801161a:	697b      	ldr	r3, [r7, #20]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	617b      	str	r3, [r7, #20]
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1d1      	bne.n	80115ca <tcp_input+0x422>
 8011626:	e000      	b.n	801162a <tcp_input+0x482>
            break;
 8011628:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d02f      	beq.n	8011690 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00a      	beq.n	801164c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	68da      	ldr	r2, [r3, #12]
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801163e:	4b13      	ldr	r3, [pc, #76]	; (801168c <tcp_input+0x4e4>)
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011646:	4a11      	ldr	r2, [pc, #68]	; (801168c <tcp_input+0x4e4>)
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801164c:	6978      	ldr	r0, [r7, #20]
 801164e:	f000 fa0b 	bl	8011a68 <tcp_listen_input>
      }
      pbuf_free(p);
 8011652:	6878      	ldr	r0, [r7, #4]
 8011654:	f7fd fec8 	bl	800f3e8 <pbuf_free>
      return;
 8011658:	e1b0      	b.n	80119bc <tcp_input+0x814>
 801165a:	bf00      	nop
 801165c:	0801ee64 	.word	0x0801ee64
 8011660:	0801ef14 	.word	0x0801ef14
 8011664:	0801eeb0 	.word	0x0801eeb0
 8011668:	0801ef3c 	.word	0x0801ef3c
 801166c:	0801ef68 	.word	0x0801ef68
 8011670:	2000a2fc 	.word	0x2000a2fc
 8011674:	20013d9c 	.word	0x20013d9c
 8011678:	0801ef90 	.word	0x0801ef90
 801167c:	20013d7c 	.word	0x20013d7c
 8011680:	0801efbc 	.word	0x0801efbc
 8011684:	20013d80 	.word	0x20013d80
 8011688:	0801efe8 	.word	0x0801efe8
 801168c:	20013d78 	.word	0x20013d78
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	2b00      	cmp	r3, #0
 8011694:	f000 8158 	beq.w	8011948 <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011698:	4b95      	ldr	r3, [pc, #596]	; (80118f0 <tcp_input+0x748>)
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	891a      	ldrh	r2, [r3, #8]
 80116a2:	4b93      	ldr	r3, [pc, #588]	; (80118f0 <tcp_input+0x748>)
 80116a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80116a6:	4a92      	ldr	r2, [pc, #584]	; (80118f0 <tcp_input+0x748>)
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80116ac:	4b91      	ldr	r3, [pc, #580]	; (80118f4 <tcp_input+0x74c>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a8f      	ldr	r2, [pc, #572]	; (80118f0 <tcp_input+0x748>)
 80116b2:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 80116b4:	4b90      	ldr	r3, [pc, #576]	; (80118f8 <tcp_input+0x750>)
 80116b6:	2200      	movs	r2, #0
 80116b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80116ba:	4b90      	ldr	r3, [pc, #576]	; (80118fc <tcp_input+0x754>)
 80116bc:	2200      	movs	r2, #0
 80116be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80116c0:	4b8f      	ldr	r3, [pc, #572]	; (8011900 <tcp_input+0x758>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80116c6:	4b8f      	ldr	r3, [pc, #572]	; (8011904 <tcp_input+0x75c>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	f003 0308 	and.w	r3, r3, #8
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d006      	beq.n	80116e0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	7b5b      	ldrb	r3, [r3, #13]
 80116d6:	f043 0301 	orr.w	r3, r3, #1
 80116da:	b2da      	uxtb	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d017      	beq.n	8011718 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80116e8:	69b8      	ldr	r0, [r7, #24]
 80116ea:	f7ff f915 	bl	8010918 <tcp_process_refused_data>
 80116ee:	4603      	mov	r3, r0
 80116f0:	f113 0f0d 	cmn.w	r3, #13
 80116f4:	d007      	beq.n	8011706 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80116f6:	69bb      	ldr	r3, [r7, #24]
 80116f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00c      	beq.n	8011718 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80116fe:	4b82      	ldr	r3, [pc, #520]	; (8011908 <tcp_input+0x760>)
 8011700:	881b      	ldrh	r3, [r3, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d008      	beq.n	8011718 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011706:	69bb      	ldr	r3, [r7, #24]
 8011708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801170a:	2b00      	cmp	r3, #0
 801170c:	f040 80e4 	bne.w	80118d8 <tcp_input+0x730>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011710:	69b8      	ldr	r0, [r7, #24]
 8011712:	f003 f9e3 	bl	8014adc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011716:	e0df      	b.n	80118d8 <tcp_input+0x730>
      }
    }
    tcp_input_pcb = pcb;
 8011718:	4a7c      	ldr	r2, [pc, #496]	; (801190c <tcp_input+0x764>)
 801171a:	69bb      	ldr	r3, [r7, #24]
 801171c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801171e:	69b8      	ldr	r0, [r7, #24]
 8011720:	f000 fb1a 	bl	8011d58 <tcp_process>
 8011724:	4603      	mov	r3, r0
 8011726:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011728:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801172c:	f113 0f0d 	cmn.w	r3, #13
 8011730:	f000 80d4 	beq.w	80118dc <tcp_input+0x734>
      if (recv_flags & TF_RESET) {
 8011734:	4b71      	ldr	r3, [pc, #452]	; (80118fc <tcp_input+0x754>)
 8011736:	781b      	ldrb	r3, [r3, #0]
 8011738:	f003 0308 	and.w	r3, r3, #8
 801173c:	2b00      	cmp	r3, #0
 801173e:	d015      	beq.n	801176c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011746:	2b00      	cmp	r3, #0
 8011748:	d008      	beq.n	801175c <tcp_input+0x5b4>
 801174a:	69bb      	ldr	r3, [r7, #24]
 801174c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	6912      	ldr	r2, [r2, #16]
 8011754:	f06f 010d 	mvn.w	r1, #13
 8011758:	4610      	mov	r0, r2
 801175a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801175c:	69b9      	ldr	r1, [r7, #24]
 801175e:	486c      	ldr	r0, [pc, #432]	; (8011910 <tcp_input+0x768>)
 8011760:	f7ff fbaa 	bl	8010eb8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011764:	69b8      	ldr	r0, [r7, #24]
 8011766:	f7fe f993 	bl	800fa90 <tcp_free>
 801176a:	e0da      	b.n	8011922 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011770:	4b63      	ldr	r3, [pc, #396]	; (8011900 <tcp_input+0x758>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d01d      	beq.n	80117b4 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011778:	4b61      	ldr	r3, [pc, #388]	; (8011900 <tcp_input+0x758>)
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011784:	2b00      	cmp	r3, #0
 8011786:	d00a      	beq.n	801179e <tcp_input+0x5f6>
 8011788:	69bb      	ldr	r3, [r7, #24]
 801178a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801178e:	69ba      	ldr	r2, [r7, #24]
 8011790:	6910      	ldr	r0, [r2, #16]
 8011792:	897a      	ldrh	r2, [r7, #10]
 8011794:	69b9      	ldr	r1, [r7, #24]
 8011796:	4798      	blx	r3
 8011798:	4603      	mov	r3, r0
 801179a:	74fb      	strb	r3, [r7, #19]
 801179c:	e001      	b.n	80117a2 <tcp_input+0x5fa>
 801179e:	2300      	movs	r3, #0
 80117a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80117a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117a6:	f113 0f0d 	cmn.w	r3, #13
 80117aa:	f000 8099 	beq.w	80118e0 <tcp_input+0x738>
              goto aborted;
            }
          }
          recv_acked = 0;
 80117ae:	4b54      	ldr	r3, [pc, #336]	; (8011900 <tcp_input+0x758>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80117b4:	69b8      	ldr	r0, [r7, #24]
 80117b6:	f000 f917 	bl	80119e8 <tcp_input_delayed_close>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f040 8091 	bne.w	80118e4 <tcp_input+0x73c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80117c2:	4b4d      	ldr	r3, [pc, #308]	; (80118f8 <tcp_input+0x750>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d041      	beq.n	801184e <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d006      	beq.n	80117e0 <tcp_input+0x638>
 80117d2:	4b50      	ldr	r3, [pc, #320]	; (8011914 <tcp_input+0x76c>)
 80117d4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80117d8:	494f      	ldr	r1, [pc, #316]	; (8011918 <tcp_input+0x770>)
 80117da:	4850      	ldr	r0, [pc, #320]	; (801191c <tcp_input+0x774>)
 80117dc:	f009 fc5a 	bl	801b094 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	8b5b      	ldrh	r3, [r3, #26]
 80117e4:	f003 0310 	and.w	r3, r3, #16
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d008      	beq.n	80117fe <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80117ec:	4b42      	ldr	r3, [pc, #264]	; (80118f8 <tcp_input+0x750>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4618      	mov	r0, r3
 80117f2:	f7fd fdf9 	bl	800f3e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80117f6:	69b8      	ldr	r0, [r7, #24]
 80117f8:	f7fe fc32 	bl	8010060 <tcp_abort>
            goto aborted;
 80117fc:	e091      	b.n	8011922 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00c      	beq.n	8011822 <tcp_input+0x67a>
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	6918      	ldr	r0, [r3, #16]
 8011812:	4b39      	ldr	r3, [pc, #228]	; (80118f8 <tcp_input+0x750>)
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	2300      	movs	r3, #0
 8011818:	69b9      	ldr	r1, [r7, #24]
 801181a:	47a0      	blx	r4
 801181c:	4603      	mov	r3, r0
 801181e:	74fb      	strb	r3, [r7, #19]
 8011820:	e008      	b.n	8011834 <tcp_input+0x68c>
 8011822:	4b35      	ldr	r3, [pc, #212]	; (80118f8 <tcp_input+0x750>)
 8011824:	681a      	ldr	r2, [r3, #0]
 8011826:	2300      	movs	r3, #0
 8011828:	69b9      	ldr	r1, [r7, #24]
 801182a:	2000      	movs	r0, #0
 801182c:	f7ff f94c 	bl	8010ac8 <tcp_recv_null>
 8011830:	4603      	mov	r3, r0
 8011832:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011834:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011838:	f113 0f0d 	cmn.w	r3, #13
 801183c:	d054      	beq.n	80118e8 <tcp_input+0x740>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801183e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d003      	beq.n	801184e <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011846:	4b2c      	ldr	r3, [pc, #176]	; (80118f8 <tcp_input+0x750>)
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801184e:	4b2b      	ldr	r3, [pc, #172]	; (80118fc <tcp_input+0x754>)
 8011850:	781b      	ldrb	r3, [r3, #0]
 8011852:	f003 0320 	and.w	r3, r3, #32
 8011856:	2b00      	cmp	r3, #0
 8011858:	d031      	beq.n	80118be <tcp_input+0x716>
          if (pcb->refused_data != NULL) {
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801185e:	2b00      	cmp	r3, #0
 8011860:	d009      	beq.n	8011876 <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011866:	7b5a      	ldrb	r2, [r3, #13]
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801186c:	f042 0220 	orr.w	r2, r2, #32
 8011870:	b2d2      	uxtb	r2, r2
 8011872:	735a      	strb	r2, [r3, #13]
 8011874:	e023      	b.n	80118be <tcp_input+0x716>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801187a:	f642 52a0 	movw	r2, #11680	; 0x2da0
 801187e:	4293      	cmp	r3, r2
 8011880:	d005      	beq.n	801188e <tcp_input+0x6e6>
              pcb->rcv_wnd++;
 8011882:	69bb      	ldr	r3, [r7, #24]
 8011884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011886:	3301      	adds	r3, #1
 8011888:	b29a      	uxth	r2, r3
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011894:	2b00      	cmp	r3, #0
 8011896:	d00b      	beq.n	80118b0 <tcp_input+0x708>
 8011898:	69bb      	ldr	r3, [r7, #24]
 801189a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	6918      	ldr	r0, [r3, #16]
 80118a2:	2300      	movs	r3, #0
 80118a4:	2200      	movs	r2, #0
 80118a6:	69b9      	ldr	r1, [r7, #24]
 80118a8:	47a0      	blx	r4
 80118aa:	4603      	mov	r3, r0
 80118ac:	74fb      	strb	r3, [r7, #19]
 80118ae:	e001      	b.n	80118b4 <tcp_input+0x70c>
 80118b0:	2300      	movs	r3, #0
 80118b2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80118b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118b8:	f113 0f0d 	cmn.w	r3, #13
 80118bc:	d016      	beq.n	80118ec <tcp_input+0x744>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80118be:	4b13      	ldr	r3, [pc, #76]	; (801190c <tcp_input+0x764>)
 80118c0:	2200      	movs	r2, #0
 80118c2:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80118c4:	69b8      	ldr	r0, [r7, #24]
 80118c6:	f000 f88f 	bl	80119e8 <tcp_input_delayed_close>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d127      	bne.n	8011920 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80118d0:	69b8      	ldr	r0, [r7, #24]
 80118d2:	f002 facf 	bl	8013e74 <tcp_output>
 80118d6:	e024      	b.n	8011922 <tcp_input+0x77a>
        goto aborted;
 80118d8:	bf00      	nop
 80118da:	e022      	b.n	8011922 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80118dc:	bf00      	nop
 80118de:	e020      	b.n	8011922 <tcp_input+0x77a>
              goto aborted;
 80118e0:	bf00      	nop
 80118e2:	e01e      	b.n	8011922 <tcp_input+0x77a>
          goto aborted;
 80118e4:	bf00      	nop
 80118e6:	e01c      	b.n	8011922 <tcp_input+0x77a>
            goto aborted;
 80118e8:	bf00      	nop
 80118ea:	e01a      	b.n	8011922 <tcp_input+0x77a>
              goto aborted;
 80118ec:	bf00      	nop
 80118ee:	e018      	b.n	8011922 <tcp_input+0x77a>
 80118f0:	20013d88 	.word	0x20013d88
 80118f4:	20013d9c 	.word	0x20013d9c
 80118f8:	20013dbc 	.word	0x20013dbc
 80118fc:	20013db9 	.word	0x20013db9
 8011900:	20013db4 	.word	0x20013db4
 8011904:	20013db8 	.word	0x20013db8
 8011908:	20013db6 	.word	0x20013db6
 801190c:	20013dc0 	.word	0x20013dc0
 8011910:	20013d7c 	.word	0x20013d7c
 8011914:	0801ee64 	.word	0x0801ee64
 8011918:	0801f018 	.word	0x0801f018
 801191c:	0801eeb0 	.word	0x0801eeb0
          goto aborted;
 8011920:	bf00      	nop
    tcp_input_pcb = NULL;
 8011922:	4b28      	ldr	r3, [pc, #160]	; (80119c4 <tcp_input+0x81c>)
 8011924:	2200      	movs	r2, #0
 8011926:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011928:	4b27      	ldr	r3, [pc, #156]	; (80119c8 <tcp_input+0x820>)
 801192a:	2200      	movs	r2, #0
 801192c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801192e:	4b27      	ldr	r3, [pc, #156]	; (80119cc <tcp_input+0x824>)
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d041      	beq.n	80119ba <tcp_input+0x812>
      pbuf_free(inseg.p);
 8011936:	4b25      	ldr	r3, [pc, #148]	; (80119cc <tcp_input+0x824>)
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	4618      	mov	r0, r3
 801193c:	f7fd fd54 	bl	800f3e8 <pbuf_free>
      inseg.p = NULL;
 8011940:	4b22      	ldr	r3, [pc, #136]	; (80119cc <tcp_input+0x824>)
 8011942:	2200      	movs	r2, #0
 8011944:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011946:	e038      	b.n	80119ba <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011948:	4b21      	ldr	r3, [pc, #132]	; (80119d0 <tcp_input+0x828>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	899b      	ldrh	r3, [r3, #12]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	f7fc f827 	bl	800d9a4 <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	b2db      	uxtb	r3, r3
 801195a:	f003 0304 	and.w	r3, r3, #4
 801195e:	2b00      	cmp	r3, #0
 8011960:	d118      	bne.n	8011994 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011962:	4b1c      	ldr	r3, [pc, #112]	; (80119d4 <tcp_input+0x82c>)
 8011964:	6819      	ldr	r1, [r3, #0]
 8011966:	4b1c      	ldr	r3, [pc, #112]	; (80119d8 <tcp_input+0x830>)
 8011968:	881b      	ldrh	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	4b1b      	ldr	r3, [pc, #108]	; (80119dc <tcp_input+0x834>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011972:	4b17      	ldr	r3, [pc, #92]	; (80119d0 <tcp_input+0x828>)
 8011974:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011976:	885b      	ldrh	r3, [r3, #2]
 8011978:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801197a:	4a15      	ldr	r2, [pc, #84]	; (80119d0 <tcp_input+0x828>)
 801197c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801197e:	8812      	ldrh	r2, [r2, #0]
 8011980:	b292      	uxth	r2, r2
 8011982:	9202      	str	r2, [sp, #8]
 8011984:	9301      	str	r3, [sp, #4]
 8011986:	4b16      	ldr	r3, [pc, #88]	; (80119e0 <tcp_input+0x838>)
 8011988:	9300      	str	r3, [sp, #0]
 801198a:	4b16      	ldr	r3, [pc, #88]	; (80119e4 <tcp_input+0x83c>)
 801198c:	4602      	mov	r2, r0
 801198e:	2000      	movs	r0, #0
 8011990:	f003 f852 	bl	8014a38 <tcp_rst>
    pbuf_free(p);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f7fd fd27 	bl	800f3e8 <pbuf_free>
  return;
 801199a:	e00e      	b.n	80119ba <tcp_input+0x812>
    goto dropped;
 801199c:	bf00      	nop
 801199e:	e008      	b.n	80119b2 <tcp_input+0x80a>
    goto dropped;
 80119a0:	bf00      	nop
 80119a2:	e006      	b.n	80119b2 <tcp_input+0x80a>
      goto dropped;
 80119a4:	bf00      	nop
 80119a6:	e004      	b.n	80119b2 <tcp_input+0x80a>
    goto dropped;
 80119a8:	bf00      	nop
 80119aa:	e002      	b.n	80119b2 <tcp_input+0x80a>
      goto dropped;
 80119ac:	bf00      	nop
 80119ae:	e000      	b.n	80119b2 <tcp_input+0x80a>
      goto dropped;
 80119b0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fd fd18 	bl	800f3e8 <pbuf_free>
 80119b8:	e000      	b.n	80119bc <tcp_input+0x814>
  return;
 80119ba:	bf00      	nop
}
 80119bc:	3724      	adds	r7, #36	; 0x24
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd90      	pop	{r4, r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20013dc0 	.word	0x20013dc0
 80119c8:	20013dbc 	.word	0x20013dbc
 80119cc:	20013d88 	.word	0x20013d88
 80119d0:	20013d9c 	.word	0x20013d9c
 80119d4:	20013db0 	.word	0x20013db0
 80119d8:	20013db6 	.word	0x20013db6
 80119dc:	20013dac 	.word	0x20013dac
 80119e0:	2000a30c 	.word	0x2000a30c
 80119e4:	2000a310 	.word	0x2000a310

080119e8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d106      	bne.n	8011a04 <tcp_input_delayed_close+0x1c>
 80119f6:	4b17      	ldr	r3, [pc, #92]	; (8011a54 <tcp_input_delayed_close+0x6c>)
 80119f8:	f240 225a 	movw	r2, #602	; 0x25a
 80119fc:	4916      	ldr	r1, [pc, #88]	; (8011a58 <tcp_input_delayed_close+0x70>)
 80119fe:	4817      	ldr	r0, [pc, #92]	; (8011a5c <tcp_input_delayed_close+0x74>)
 8011a00:	f009 fb48 	bl	801b094 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011a04:	4b16      	ldr	r3, [pc, #88]	; (8011a60 <tcp_input_delayed_close+0x78>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	f003 0310 	and.w	r3, r3, #16
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d01c      	beq.n	8011a4a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	8b5b      	ldrh	r3, [r3, #26]
 8011a14:	f003 0310 	and.w	r3, r3, #16
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d10d      	bne.n	8011a38 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d008      	beq.n	8011a38 <tcp_input_delayed_close+0x50>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	6912      	ldr	r2, [r2, #16]
 8011a30:	f06f 010e 	mvn.w	r1, #14
 8011a34:	4610      	mov	r0, r2
 8011a36:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011a38:	6879      	ldr	r1, [r7, #4]
 8011a3a:	480a      	ldr	r0, [pc, #40]	; (8011a64 <tcp_input_delayed_close+0x7c>)
 8011a3c:	f7ff fa3c 	bl	8010eb8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f7fe f825 	bl	800fa90 <tcp_free>
    return 1;
 8011a46:	2301      	movs	r3, #1
 8011a48:	e000      	b.n	8011a4c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	0801ee64 	.word	0x0801ee64
 8011a58:	0801f034 	.word	0x0801f034
 8011a5c:	0801eeb0 	.word	0x0801eeb0
 8011a60:	20013db9 	.word	0x20013db9
 8011a64:	20013d7c 	.word	0x20013d7c

08011a68 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011a68:	b590      	push	{r4, r7, lr}
 8011a6a:	b08b      	sub	sp, #44	; 0x2c
 8011a6c:	af04      	add	r7, sp, #16
 8011a6e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011a70:	4b6f      	ldr	r3, [pc, #444]	; (8011c30 <tcp_listen_input+0x1c8>)
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	f003 0304 	and.w	r3, r3, #4
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f040 80d2 	bne.w	8011c22 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d106      	bne.n	8011a92 <tcp_listen_input+0x2a>
 8011a84:	4b6b      	ldr	r3, [pc, #428]	; (8011c34 <tcp_listen_input+0x1cc>)
 8011a86:	f240 2281 	movw	r2, #641	; 0x281
 8011a8a:	496b      	ldr	r1, [pc, #428]	; (8011c38 <tcp_listen_input+0x1d0>)
 8011a8c:	486b      	ldr	r0, [pc, #428]	; (8011c3c <tcp_listen_input+0x1d4>)
 8011a8e:	f009 fb01 	bl	801b094 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011a92:	4b67      	ldr	r3, [pc, #412]	; (8011c30 <tcp_listen_input+0x1c8>)
 8011a94:	781b      	ldrb	r3, [r3, #0]
 8011a96:	f003 0310 	and.w	r3, r3, #16
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d019      	beq.n	8011ad2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a9e:	4b68      	ldr	r3, [pc, #416]	; (8011c40 <tcp_listen_input+0x1d8>)
 8011aa0:	6819      	ldr	r1, [r3, #0]
 8011aa2:	4b68      	ldr	r3, [pc, #416]	; (8011c44 <tcp_listen_input+0x1dc>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	4b67      	ldr	r3, [pc, #412]	; (8011c48 <tcp_listen_input+0x1e0>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011aae:	4b67      	ldr	r3, [pc, #412]	; (8011c4c <tcp_listen_input+0x1e4>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ab2:	885b      	ldrh	r3, [r3, #2]
 8011ab4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ab6:	4a65      	ldr	r2, [pc, #404]	; (8011c4c <tcp_listen_input+0x1e4>)
 8011ab8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011aba:	8812      	ldrh	r2, [r2, #0]
 8011abc:	b292      	uxth	r2, r2
 8011abe:	9202      	str	r2, [sp, #8]
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	4b63      	ldr	r3, [pc, #396]	; (8011c50 <tcp_listen_input+0x1e8>)
 8011ac4:	9300      	str	r3, [sp, #0]
 8011ac6:	4b63      	ldr	r3, [pc, #396]	; (8011c54 <tcp_listen_input+0x1ec>)
 8011ac8:	4602      	mov	r2, r0
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f002 ffb4 	bl	8014a38 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011ad0:	e0a9      	b.n	8011c26 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011ad2:	4b57      	ldr	r3, [pc, #348]	; (8011c30 <tcp_listen_input+0x1c8>)
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	f003 0302 	and.w	r3, r3, #2
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f000 80a3 	beq.w	8011c26 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	7d5b      	ldrb	r3, [r3, #21]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ff f913 	bl	8010d10 <tcp_alloc>
 8011aea:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d111      	bne.n	8011b16 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	699b      	ldr	r3, [r3, #24]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d00a      	beq.n	8011b10 <tcp_listen_input+0xa8>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	699b      	ldr	r3, [r3, #24]
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	6910      	ldr	r0, [r2, #16]
 8011b02:	f04f 32ff 	mov.w	r2, #4294967295
 8011b06:	2100      	movs	r1, #0
 8011b08:	4798      	blx	r3
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	73bb      	strb	r3, [r7, #14]
      return;
 8011b0e:	e08b      	b.n	8011c28 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011b10:	23f0      	movs	r3, #240	; 0xf0
 8011b12:	73bb      	strb	r3, [r7, #14]
      return;
 8011b14:	e088      	b.n	8011c28 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011b16:	4b50      	ldr	r3, [pc, #320]	; (8011c58 <tcp_listen_input+0x1f0>)
 8011b18:	695a      	ldr	r2, [r3, #20]
 8011b1a:	697b      	ldr	r3, [r7, #20]
 8011b1c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011b1e:	4b4e      	ldr	r3, [pc, #312]	; (8011c58 <tcp_listen_input+0x1f0>)
 8011b20:	691a      	ldr	r2, [r3, #16]
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8ada      	ldrh	r2, [r3, #22]
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011b2e:	4b47      	ldr	r3, [pc, #284]	; (8011c4c <tcp_listen_input+0x1e4>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	b29a      	uxth	r2, r3
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	2203      	movs	r2, #3
 8011b3e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011b40:	4b41      	ldr	r3, [pc, #260]	; (8011c48 <tcp_listen_input+0x1e0>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	1c5a      	adds	r2, r3, #1
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011b4a:	697b      	ldr	r3, [r7, #20]
 8011b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011b52:	6978      	ldr	r0, [r7, #20]
 8011b54:	f7ff fa44 	bl	8010fe0 <tcp_next_iss>
 8011b58:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011b5a:	697b      	ldr	r3, [r7, #20]
 8011b5c:	693a      	ldr	r2, [r7, #16]
 8011b5e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	693a      	ldr	r2, [r7, #16]
 8011b64:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	693a      	ldr	r2, [r7, #16]
 8011b6a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	693a      	ldr	r2, [r7, #16]
 8011b70:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011b72:	4b35      	ldr	r3, [pc, #212]	; (8011c48 <tcp_listen_input+0x1e0>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	1e5a      	subs	r2, r3, #1
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	691a      	ldr	r2, [r3, #16]
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011b84:	697b      	ldr	r3, [r7, #20]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	7a5b      	ldrb	r3, [r3, #9]
 8011b8e:	f003 030c 	and.w	r3, r3, #12
 8011b92:	b2da      	uxtb	r2, r3
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7a1a      	ldrb	r2, [r3, #8]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011ba0:	4b2e      	ldr	r3, [pc, #184]	; (8011c5c <tcp_listen_input+0x1f4>)
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	60da      	str	r2, [r3, #12]
 8011ba8:	4a2c      	ldr	r2, [pc, #176]	; (8011c5c <tcp_listen_input+0x1f4>)
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	f003 f905 	bl	8014dbc <tcp_timer_needed>
 8011bb2:	4b2b      	ldr	r3, [pc, #172]	; (8011c60 <tcp_listen_input+0x1f8>)
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011bb8:	6978      	ldr	r0, [r7, #20]
 8011bba:	f001 fd8f 	bl	80136dc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011bbe:	4b23      	ldr	r3, [pc, #140]	; (8011c4c <tcp_listen_input+0x1e4>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	89db      	ldrh	r3, [r3, #14]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	3304      	adds	r3, #4
 8011be0:	4618      	mov	r0, r3
 8011be2:	f007 f801 	bl	8018be8 <ip4_route>
 8011be6:	4601      	mov	r1, r0
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	3304      	adds	r3, #4
 8011bec:	461a      	mov	r2, r3
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f7ff fa1c 	bl	801102c <tcp_eff_send_mss_netif>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011bfc:	2112      	movs	r1, #18
 8011bfe:	6978      	ldr	r0, [r7, #20]
 8011c00:	f002 f84a 	bl	8013c98 <tcp_enqueue_flags>
 8011c04:	4603      	mov	r3, r0
 8011c06:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d004      	beq.n	8011c1a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011c10:	2100      	movs	r1, #0
 8011c12:	6978      	ldr	r0, [r7, #20]
 8011c14:	f7fe f966 	bl	800fee4 <tcp_abandon>
      return;
 8011c18:	e006      	b.n	8011c28 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011c1a:	6978      	ldr	r0, [r7, #20]
 8011c1c:	f002 f92a 	bl	8013e74 <tcp_output>
  return;
 8011c20:	e001      	b.n	8011c26 <tcp_listen_input+0x1be>
    return;
 8011c22:	bf00      	nop
 8011c24:	e000      	b.n	8011c28 <tcp_listen_input+0x1c0>
  return;
 8011c26:	bf00      	nop
}
 8011c28:	371c      	adds	r7, #28
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd90      	pop	{r4, r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	20013db8 	.word	0x20013db8
 8011c34:	0801ee64 	.word	0x0801ee64
 8011c38:	0801f05c 	.word	0x0801f05c
 8011c3c:	0801eeb0 	.word	0x0801eeb0
 8011c40:	20013db0 	.word	0x20013db0
 8011c44:	20013db6 	.word	0x20013db6
 8011c48:	20013dac 	.word	0x20013dac
 8011c4c:	20013d9c 	.word	0x20013d9c
 8011c50:	2000a30c 	.word	0x2000a30c
 8011c54:	2000a310 	.word	0x2000a310
 8011c58:	2000a2fc 	.word	0x2000a2fc
 8011c5c:	20013d7c 	.word	0x20013d7c
 8011c60:	20013d84 	.word	0x20013d84

08011c64 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af04      	add	r7, sp, #16
 8011c6a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011c6c:	4b2f      	ldr	r3, [pc, #188]	; (8011d2c <tcp_timewait_input+0xc8>)
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	f003 0304 	and.w	r3, r3, #4
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d153      	bne.n	8011d20 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d106      	bne.n	8011c8c <tcp_timewait_input+0x28>
 8011c7e:	4b2c      	ldr	r3, [pc, #176]	; (8011d30 <tcp_timewait_input+0xcc>)
 8011c80:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011c84:	492b      	ldr	r1, [pc, #172]	; (8011d34 <tcp_timewait_input+0xd0>)
 8011c86:	482c      	ldr	r0, [pc, #176]	; (8011d38 <tcp_timewait_input+0xd4>)
 8011c88:	f009 fa04 	bl	801b094 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011c8c:	4b27      	ldr	r3, [pc, #156]	; (8011d2c <tcp_timewait_input+0xc8>)
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	f003 0302 	and.w	r3, r3, #2
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d02a      	beq.n	8011cee <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011c98:	4b28      	ldr	r3, [pc, #160]	; (8011d3c <tcp_timewait_input+0xd8>)
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	db2d      	blt.n	8011d02 <tcp_timewait_input+0x9e>
 8011ca6:	4b25      	ldr	r3, [pc, #148]	; (8011d3c <tcp_timewait_input+0xd8>)
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cb2:	440b      	add	r3, r1
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	dc23      	bgt.n	8011d02 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cba:	4b21      	ldr	r3, [pc, #132]	; (8011d40 <tcp_timewait_input+0xdc>)
 8011cbc:	6819      	ldr	r1, [r3, #0]
 8011cbe:	4b21      	ldr	r3, [pc, #132]	; (8011d44 <tcp_timewait_input+0xe0>)
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	4b1d      	ldr	r3, [pc, #116]	; (8011d3c <tcp_timewait_input+0xd8>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cca:	4b1f      	ldr	r3, [pc, #124]	; (8011d48 <tcp_timewait_input+0xe4>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cce:	885b      	ldrh	r3, [r3, #2]
 8011cd0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011cd2:	4a1d      	ldr	r2, [pc, #116]	; (8011d48 <tcp_timewait_input+0xe4>)
 8011cd4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011cd6:	8812      	ldrh	r2, [r2, #0]
 8011cd8:	b292      	uxth	r2, r2
 8011cda:	9202      	str	r2, [sp, #8]
 8011cdc:	9301      	str	r3, [sp, #4]
 8011cde:	4b1b      	ldr	r3, [pc, #108]	; (8011d4c <tcp_timewait_input+0xe8>)
 8011ce0:	9300      	str	r3, [sp, #0]
 8011ce2:	4b1b      	ldr	r3, [pc, #108]	; (8011d50 <tcp_timewait_input+0xec>)
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f002 fea6 	bl	8014a38 <tcp_rst>
      return;
 8011cec:	e01b      	b.n	8011d26 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011cee:	4b0f      	ldr	r3, [pc, #60]	; (8011d2c <tcp_timewait_input+0xc8>)
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	f003 0301 	and.w	r3, r3, #1
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d003      	beq.n	8011d02 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011cfa:	4b16      	ldr	r3, [pc, #88]	; (8011d54 <tcp_timewait_input+0xf0>)
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011d02:	4b10      	ldr	r3, [pc, #64]	; (8011d44 <tcp_timewait_input+0xe0>)
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d00c      	beq.n	8011d24 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8b5b      	ldrh	r3, [r3, #26]
 8011d0e:	f043 0302 	orr.w	r3, r3, #2
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011d18:	6878      	ldr	r0, [r7, #4]
 8011d1a:	f002 f8ab 	bl	8013e74 <tcp_output>
  }
  return;
 8011d1e:	e001      	b.n	8011d24 <tcp_timewait_input+0xc0>
    return;
 8011d20:	bf00      	nop
 8011d22:	e000      	b.n	8011d26 <tcp_timewait_input+0xc2>
  return;
 8011d24:	bf00      	nop
}
 8011d26:	3708      	adds	r7, #8
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	20013db8 	.word	0x20013db8
 8011d30:	0801ee64 	.word	0x0801ee64
 8011d34:	0801f07c 	.word	0x0801f07c
 8011d38:	0801eeb0 	.word	0x0801eeb0
 8011d3c:	20013dac 	.word	0x20013dac
 8011d40:	20013db0 	.word	0x20013db0
 8011d44:	20013db6 	.word	0x20013db6
 8011d48:	20013d9c 	.word	0x20013d9c
 8011d4c:	2000a30c 	.word	0x2000a30c
 8011d50:	2000a310 	.word	0x2000a310
 8011d54:	20013d70 	.word	0x20013d70

08011d58 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011d58:	b590      	push	{r4, r7, lr}
 8011d5a:	b08d      	sub	sp, #52	; 0x34
 8011d5c:	af04      	add	r7, sp, #16
 8011d5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011d60:	2300      	movs	r3, #0
 8011d62:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8011d64:	2300      	movs	r3, #0
 8011d66:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d106      	bne.n	8011d7c <tcp_process+0x24>
 8011d6e:	4b9d      	ldr	r3, [pc, #628]	; (8011fe4 <tcp_process+0x28c>)
 8011d70:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011d74:	499c      	ldr	r1, [pc, #624]	; (8011fe8 <tcp_process+0x290>)
 8011d76:	489d      	ldr	r0, [pc, #628]	; (8011fec <tcp_process+0x294>)
 8011d78:	f009 f98c 	bl	801b094 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011d7c:	4b9c      	ldr	r3, [pc, #624]	; (8011ff0 <tcp_process+0x298>)
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	f003 0304 	and.w	r3, r3, #4
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d04e      	beq.n	8011e26 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	7d1b      	ldrb	r3, [r3, #20]
 8011d8c:	2b02      	cmp	r3, #2
 8011d8e:	d108      	bne.n	8011da2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d94:	4b97      	ldr	r3, [pc, #604]	; (8011ff4 <tcp_process+0x29c>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	429a      	cmp	r2, r3
 8011d9a:	d123      	bne.n	8011de4 <tcp_process+0x8c>
        acceptable = 1;
 8011d9c:	2301      	movs	r3, #1
 8011d9e:	77fb      	strb	r3, [r7, #31]
 8011da0:	e020      	b.n	8011de4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011da6:	4b94      	ldr	r3, [pc, #592]	; (8011ff8 <tcp_process+0x2a0>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	429a      	cmp	r2, r3
 8011dac:	d102      	bne.n	8011db4 <tcp_process+0x5c>
        acceptable = 1;
 8011dae:	2301      	movs	r3, #1
 8011db0:	77fb      	strb	r3, [r7, #31]
 8011db2:	e017      	b.n	8011de4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011db4:	4b90      	ldr	r3, [pc, #576]	; (8011ff8 <tcp_process+0x2a0>)
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	db10      	blt.n	8011de4 <tcp_process+0x8c>
 8011dc2:	4b8d      	ldr	r3, [pc, #564]	; (8011ff8 <tcp_process+0x2a0>)
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dca:	6879      	ldr	r1, [r7, #4]
 8011dcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011dce:	440b      	add	r3, r1
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	dc06      	bgt.n	8011de4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	8b5b      	ldrh	r3, [r3, #26]
 8011dda:	f043 0302 	orr.w	r3, r3, #2
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011de4:	7ffb      	ldrb	r3, [r7, #31]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d01b      	beq.n	8011e22 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	7d1b      	ldrb	r3, [r3, #20]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <tcp_process+0xa8>
 8011df2:	4b7c      	ldr	r3, [pc, #496]	; (8011fe4 <tcp_process+0x28c>)
 8011df4:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011df8:	4980      	ldr	r1, [pc, #512]	; (8011ffc <tcp_process+0x2a4>)
 8011dfa:	487c      	ldr	r0, [pc, #496]	; (8011fec <tcp_process+0x294>)
 8011dfc:	f009 f94a 	bl	801b094 <iprintf>
      recv_flags |= TF_RESET;
 8011e00:	4b7f      	ldr	r3, [pc, #508]	; (8012000 <tcp_process+0x2a8>)
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	f043 0308 	orr.w	r3, r3, #8
 8011e08:	b2da      	uxtb	r2, r3
 8011e0a:	4b7d      	ldr	r3, [pc, #500]	; (8012000 <tcp_process+0x2a8>)
 8011e0c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	8b5b      	ldrh	r3, [r3, #26]
 8011e12:	f023 0301 	bic.w	r3, r3, #1
 8011e16:	b29a      	uxth	r2, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011e1c:	f06f 030d 	mvn.w	r3, #13
 8011e20:	e37a      	b.n	8012518 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011e22:	2300      	movs	r3, #0
 8011e24:	e378      	b.n	8012518 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011e26:	4b72      	ldr	r3, [pc, #456]	; (8011ff0 <tcp_process+0x298>)
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	f003 0302 	and.w	r3, r3, #2
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d010      	beq.n	8011e54 <tcp_process+0xfc>
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	7d1b      	ldrb	r3, [r3, #20]
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d00c      	beq.n	8011e54 <tcp_process+0xfc>
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	7d1b      	ldrb	r3, [r3, #20]
 8011e3e:	2b03      	cmp	r3, #3
 8011e40:	d008      	beq.n	8011e54 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	8b5b      	ldrh	r3, [r3, #26]
 8011e46:	f043 0302 	orr.w	r3, r3, #2
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011e50:	2300      	movs	r3, #0
 8011e52:	e361      	b.n	8012518 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8b5b      	ldrh	r3, [r3, #26]
 8011e58:	f003 0310 	and.w	r3, r3, #16
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d103      	bne.n	8011e68 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011e60:	4b68      	ldr	r3, [pc, #416]	; (8012004 <tcp_process+0x2ac>)
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2200      	movs	r2, #0
 8011e74:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f001 fc2f 	bl	80136dc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	7d1b      	ldrb	r3, [r3, #20]
 8011e82:	3b02      	subs	r3, #2
 8011e84:	2b07      	cmp	r3, #7
 8011e86:	f200 8337 	bhi.w	80124f8 <tcp_process+0x7a0>
 8011e8a:	a201      	add	r2, pc, #4	; (adr r2, 8011e90 <tcp_process+0x138>)
 8011e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e90:	08011eb1 	.word	0x08011eb1
 8011e94:	080120e1 	.word	0x080120e1
 8011e98:	08012259 	.word	0x08012259
 8011e9c:	08012283 	.word	0x08012283
 8011ea0:	080123a7 	.word	0x080123a7
 8011ea4:	08012259 	.word	0x08012259
 8011ea8:	08012433 	.word	0x08012433
 8011eac:	080124c3 	.word	0x080124c3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011eb0:	4b4f      	ldr	r3, [pc, #316]	; (8011ff0 <tcp_process+0x298>)
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f003 0310 	and.w	r3, r3, #16
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	f000 80e4 	beq.w	8012086 <tcp_process+0x32e>
 8011ebe:	4b4c      	ldr	r3, [pc, #304]	; (8011ff0 <tcp_process+0x298>)
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	f003 0302 	and.w	r3, r3, #2
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	f000 80dd 	beq.w	8012086 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ed0:	1c5a      	adds	r2, r3, #1
 8011ed2:	4b48      	ldr	r3, [pc, #288]	; (8011ff4 <tcp_process+0x29c>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	f040 80d5 	bne.w	8012086 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011edc:	4b46      	ldr	r3, [pc, #280]	; (8011ff8 <tcp_process+0x2a0>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	1c5a      	adds	r2, r3, #1
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011eee:	4b41      	ldr	r3, [pc, #260]	; (8011ff4 <tcp_process+0x29c>)
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011ef6:	4b44      	ldr	r3, [pc, #272]	; (8012008 <tcp_process+0x2b0>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	89db      	ldrh	r3, [r3, #14]
 8011efc:	b29a      	uxth	r2, r3
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011f10:	4b39      	ldr	r3, [pc, #228]	; (8011ff8 <tcp_process+0x2a0>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	1e5a      	subs	r2, r3, #1
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2204      	movs	r2, #4
 8011f1e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	3304      	adds	r3, #4
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f006 fe5d 	bl	8018be8 <ip4_route>
 8011f2e:	4601      	mov	r1, r0
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	3304      	adds	r3, #4
 8011f34:	461a      	mov	r2, r3
 8011f36:	4620      	mov	r0, r4
 8011f38:	f7ff f878 	bl	801102c <tcp_eff_send_mss_netif>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	461a      	mov	r2, r3
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f48:	009a      	lsls	r2, r3, #2
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	f241 111c 	movw	r1, #4380	; 0x111c
 8011f54:	428b      	cmp	r3, r1
 8011f56:	bf38      	it	cc
 8011f58:	460b      	movcc	r3, r1
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d204      	bcs.n	8011f68 <tcp_process+0x210>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	e00d      	b.n	8011f84 <tcp_process+0x22c>
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	f241 121c 	movw	r2, #4380	; 0x111c
 8011f72:	4293      	cmp	r3, r2
 8011f74:	d904      	bls.n	8011f80 <tcp_process+0x228>
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	e001      	b.n	8011f84 <tcp_process+0x22c>
 8011f80:	f241 131c 	movw	r3, #4380	; 0x111c
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d106      	bne.n	8011fa2 <tcp_process+0x24a>
 8011f94:	4b13      	ldr	r3, [pc, #76]	; (8011fe4 <tcp_process+0x28c>)
 8011f96:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011f9a:	491c      	ldr	r1, [pc, #112]	; (801200c <tcp_process+0x2b4>)
 8011f9c:	4813      	ldr	r0, [pc, #76]	; (8011fec <tcp_process+0x294>)
 8011f9e:	f009 f879 	bl	801b094 <iprintf>
        --pcb->snd_queuelen;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011fa8:	3b01      	subs	r3, #1
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fb6:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d12a      	bne.n	8012014 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fc2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011fc4:	697b      	ldr	r3, [r7, #20]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d106      	bne.n	8011fd8 <tcp_process+0x280>
 8011fca:	4b06      	ldr	r3, [pc, #24]	; (8011fe4 <tcp_process+0x28c>)
 8011fcc:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011fd0:	490f      	ldr	r1, [pc, #60]	; (8012010 <tcp_process+0x2b8>)
 8011fd2:	4806      	ldr	r0, [pc, #24]	; (8011fec <tcp_process+0x294>)
 8011fd4:	f009 f85e 	bl	801b094 <iprintf>
          pcb->unsent = rseg->next;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	66da      	str	r2, [r3, #108]	; 0x6c
 8011fe0:	e01c      	b.n	801201c <tcp_process+0x2c4>
 8011fe2:	bf00      	nop
 8011fe4:	0801ee64 	.word	0x0801ee64
 8011fe8:	0801f09c 	.word	0x0801f09c
 8011fec:	0801eeb0 	.word	0x0801eeb0
 8011ff0:	20013db8 	.word	0x20013db8
 8011ff4:	20013db0 	.word	0x20013db0
 8011ff8:	20013dac 	.word	0x20013dac
 8011ffc:	0801f0b8 	.word	0x0801f0b8
 8012000:	20013db9 	.word	0x20013db9
 8012004:	20013d70 	.word	0x20013d70
 8012008:	20013d9c 	.word	0x20013d9c
 801200c:	0801f0d8 	.word	0x0801f0d8
 8012010:	0801f0f0 	.word	0x0801f0f0
        } else {
          pcb->unacked = rseg->next;
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801201c:	6978      	ldr	r0, [r7, #20]
 801201e:	f7fe fd0e 	bl	8010a3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012026:	2b00      	cmp	r3, #0
 8012028:	d104      	bne.n	8012034 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012030:	861a      	strh	r2, [r3, #48]	; 0x30
 8012032:	e006      	b.n	8012042 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	2200      	movs	r2, #0
 8012038:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2200      	movs	r2, #0
 801203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00a      	beq.n	8012062 <tcp_process+0x30a>
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	6910      	ldr	r0, [r2, #16]
 8012056:	2200      	movs	r2, #0
 8012058:	6879      	ldr	r1, [r7, #4]
 801205a:	4798      	blx	r3
 801205c:	4603      	mov	r3, r0
 801205e:	77bb      	strb	r3, [r7, #30]
 8012060:	e001      	b.n	8012066 <tcp_process+0x30e>
 8012062:	2300      	movs	r3, #0
 8012064:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8012066:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801206a:	f113 0f0d 	cmn.w	r3, #13
 801206e:	d102      	bne.n	8012076 <tcp_process+0x31e>
          return ERR_ABRT;
 8012070:	f06f 030c 	mvn.w	r3, #12
 8012074:	e250      	b.n	8012518 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	8b5b      	ldrh	r3, [r3, #26]
 801207a:	f043 0302 	orr.w	r3, r3, #2
 801207e:	b29a      	uxth	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012084:	e23a      	b.n	80124fc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012086:	4b98      	ldr	r3, [pc, #608]	; (80122e8 <tcp_process+0x590>)
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	f003 0310 	and.w	r3, r3, #16
 801208e:	2b00      	cmp	r3, #0
 8012090:	f000 8234 	beq.w	80124fc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012094:	4b95      	ldr	r3, [pc, #596]	; (80122ec <tcp_process+0x594>)
 8012096:	6819      	ldr	r1, [r3, #0]
 8012098:	4b95      	ldr	r3, [pc, #596]	; (80122f0 <tcp_process+0x598>)
 801209a:	881b      	ldrh	r3, [r3, #0]
 801209c:	461a      	mov	r2, r3
 801209e:	4b95      	ldr	r3, [pc, #596]	; (80122f4 <tcp_process+0x59c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120a4:	4b94      	ldr	r3, [pc, #592]	; (80122f8 <tcp_process+0x5a0>)
 80120a6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120a8:	885b      	ldrh	r3, [r3, #2]
 80120aa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120ac:	4a92      	ldr	r2, [pc, #584]	; (80122f8 <tcp_process+0x5a0>)
 80120ae:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120b0:	8812      	ldrh	r2, [r2, #0]
 80120b2:	b292      	uxth	r2, r2
 80120b4:	9202      	str	r2, [sp, #8]
 80120b6:	9301      	str	r3, [sp, #4]
 80120b8:	4b90      	ldr	r3, [pc, #576]	; (80122fc <tcp_process+0x5a4>)
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	4b90      	ldr	r3, [pc, #576]	; (8012300 <tcp_process+0x5a8>)
 80120be:	4602      	mov	r2, r0
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f002 fcb9 	bl	8014a38 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80120cc:	2b05      	cmp	r3, #5
 80120ce:	f200 8215 	bhi.w	80124fc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2200      	movs	r2, #0
 80120d6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f002 fa75 	bl	80145c8 <tcp_rexmit_rto>
      break;
 80120de:	e20d      	b.n	80124fc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80120e0:	4b81      	ldr	r3, [pc, #516]	; (80122e8 <tcp_process+0x590>)
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	f003 0310 	and.w	r3, r3, #16
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f000 80a1 	beq.w	8012230 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120ee:	4b7f      	ldr	r3, [pc, #508]	; (80122ec <tcp_process+0x594>)
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	3b01      	subs	r3, #1
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	db7e      	blt.n	80121fc <tcp_process+0x4a4>
 80120fe:	4b7b      	ldr	r3, [pc, #492]	; (80122ec <tcp_process+0x594>)
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012106:	1ad3      	subs	r3, r2, r3
 8012108:	2b00      	cmp	r3, #0
 801210a:	dc77      	bgt.n	80121fc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2204      	movs	r2, #4
 8012110:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012116:	2b00      	cmp	r3, #0
 8012118:	d102      	bne.n	8012120 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801211a:	23fa      	movs	r3, #250	; 0xfa
 801211c:	77bb      	strb	r3, [r7, #30]
 801211e:	e01d      	b.n	801215c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012124:	699b      	ldr	r3, [r3, #24]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d106      	bne.n	8012138 <tcp_process+0x3e0>
 801212a:	4b76      	ldr	r3, [pc, #472]	; (8012304 <tcp_process+0x5ac>)
 801212c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012130:	4975      	ldr	r1, [pc, #468]	; (8012308 <tcp_process+0x5b0>)
 8012132:	4876      	ldr	r0, [pc, #472]	; (801230c <tcp_process+0x5b4>)
 8012134:	f008 ffae 	bl	801b094 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801213c:	699b      	ldr	r3, [r3, #24]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d00a      	beq.n	8012158 <tcp_process+0x400>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012146:	699b      	ldr	r3, [r3, #24]
 8012148:	687a      	ldr	r2, [r7, #4]
 801214a:	6910      	ldr	r0, [r2, #16]
 801214c:	2200      	movs	r2, #0
 801214e:	6879      	ldr	r1, [r7, #4]
 8012150:	4798      	blx	r3
 8012152:	4603      	mov	r3, r0
 8012154:	77bb      	strb	r3, [r7, #30]
 8012156:	e001      	b.n	801215c <tcp_process+0x404>
 8012158:	23f0      	movs	r3, #240	; 0xf0
 801215a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801215c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d00a      	beq.n	801217a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012164:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012168:	f113 0f0d 	cmn.w	r3, #13
 801216c:	d002      	beq.n	8012174 <tcp_process+0x41c>
              tcp_abort(pcb);
 801216e:	6878      	ldr	r0, [r7, #4]
 8012170:	f7fd ff76 	bl	8010060 <tcp_abort>
            }
            return ERR_ABRT;
 8012174:	f06f 030c 	mvn.w	r3, #12
 8012178:	e1ce      	b.n	8012518 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f000 fae0 	bl	8012740 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012180:	4b63      	ldr	r3, [pc, #396]	; (8012310 <tcp_process+0x5b8>)
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d005      	beq.n	8012194 <tcp_process+0x43c>
            recv_acked--;
 8012188:	4b61      	ldr	r3, [pc, #388]	; (8012310 <tcp_process+0x5b8>)
 801218a:	881b      	ldrh	r3, [r3, #0]
 801218c:	3b01      	subs	r3, #1
 801218e:	b29a      	uxth	r2, r3
 8012190:	4b5f      	ldr	r3, [pc, #380]	; (8012310 <tcp_process+0x5b8>)
 8012192:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012198:	009a      	lsls	r2, r3, #2
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801219e:	005b      	lsls	r3, r3, #1
 80121a0:	f241 111c 	movw	r1, #4380	; 0x111c
 80121a4:	428b      	cmp	r3, r1
 80121a6:	bf38      	it	cc
 80121a8:	460b      	movcc	r3, r1
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d204      	bcs.n	80121b8 <tcp_process+0x460>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121b2:	009b      	lsls	r3, r3, #2
 80121b4:	b29b      	uxth	r3, r3
 80121b6:	e00d      	b.n	80121d4 <tcp_process+0x47c>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121bc:	005b      	lsls	r3, r3, #1
 80121be:	f241 121c 	movw	r2, #4380	; 0x111c
 80121c2:	4293      	cmp	r3, r2
 80121c4:	d904      	bls.n	80121d0 <tcp_process+0x478>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121ca:	005b      	lsls	r3, r3, #1
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	e001      	b.n	80121d4 <tcp_process+0x47c>
 80121d0:	f241 131c 	movw	r3, #4380	; 0x111c
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80121da:	4b4e      	ldr	r3, [pc, #312]	; (8012314 <tcp_process+0x5bc>)
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	f003 0320 	and.w	r3, r3, #32
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d037      	beq.n	8012256 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	8b5b      	ldrh	r3, [r3, #26]
 80121ea:	f043 0302 	orr.w	r3, r3, #2
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2207      	movs	r2, #7
 80121f8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80121fa:	e02c      	b.n	8012256 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121fc:	4b3b      	ldr	r3, [pc, #236]	; (80122ec <tcp_process+0x594>)
 80121fe:	6819      	ldr	r1, [r3, #0]
 8012200:	4b3b      	ldr	r3, [pc, #236]	; (80122f0 <tcp_process+0x598>)
 8012202:	881b      	ldrh	r3, [r3, #0]
 8012204:	461a      	mov	r2, r3
 8012206:	4b3b      	ldr	r3, [pc, #236]	; (80122f4 <tcp_process+0x59c>)
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801220c:	4b3a      	ldr	r3, [pc, #232]	; (80122f8 <tcp_process+0x5a0>)
 801220e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012210:	885b      	ldrh	r3, [r3, #2]
 8012212:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012214:	4a38      	ldr	r2, [pc, #224]	; (80122f8 <tcp_process+0x5a0>)
 8012216:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012218:	8812      	ldrh	r2, [r2, #0]
 801221a:	b292      	uxth	r2, r2
 801221c:	9202      	str	r2, [sp, #8]
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	4b36      	ldr	r3, [pc, #216]	; (80122fc <tcp_process+0x5a4>)
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	4b36      	ldr	r3, [pc, #216]	; (8012300 <tcp_process+0x5a8>)
 8012226:	4602      	mov	r2, r0
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f002 fc05 	bl	8014a38 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801222e:	e167      	b.n	8012500 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012230:	4b2d      	ldr	r3, [pc, #180]	; (80122e8 <tcp_process+0x590>)
 8012232:	781b      	ldrb	r3, [r3, #0]
 8012234:	f003 0302 	and.w	r3, r3, #2
 8012238:	2b00      	cmp	r3, #0
 801223a:	f000 8161 	beq.w	8012500 <tcp_process+0x7a8>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012242:	1e5a      	subs	r2, r3, #1
 8012244:	4b2b      	ldr	r3, [pc, #172]	; (80122f4 <tcp_process+0x59c>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	429a      	cmp	r2, r3
 801224a:	f040 8159 	bne.w	8012500 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801224e:	6878      	ldr	r0, [r7, #4]
 8012250:	f002 f9dc 	bl	801460c <tcp_rexmit>
      break;
 8012254:	e154      	b.n	8012500 <tcp_process+0x7a8>
 8012256:	e153      	b.n	8012500 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012258:	6878      	ldr	r0, [r7, #4]
 801225a:	f000 fa71 	bl	8012740 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801225e:	4b2d      	ldr	r3, [pc, #180]	; (8012314 <tcp_process+0x5bc>)
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	f003 0320 	and.w	r3, r3, #32
 8012266:	2b00      	cmp	r3, #0
 8012268:	f000 814c 	beq.w	8012504 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	8b5b      	ldrh	r3, [r3, #26]
 8012270:	f043 0302 	orr.w	r3, r3, #2
 8012274:	b29a      	uxth	r2, r3
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2207      	movs	r2, #7
 801227e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012280:	e140      	b.n	8012504 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fa5c 	bl	8012740 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012288:	4b22      	ldr	r3, [pc, #136]	; (8012314 <tcp_process+0x5bc>)
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	f003 0320 	and.w	r3, r3, #32
 8012290:	2b00      	cmp	r3, #0
 8012292:	d071      	beq.n	8012378 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012294:	4b14      	ldr	r3, [pc, #80]	; (80122e8 <tcp_process+0x590>)
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f003 0310 	and.w	r3, r3, #16
 801229c:	2b00      	cmp	r3, #0
 801229e:	d060      	beq.n	8012362 <tcp_process+0x60a>
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122a4:	4b11      	ldr	r3, [pc, #68]	; (80122ec <tcp_process+0x594>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d15a      	bne.n	8012362 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d156      	bne.n	8012362 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	8b5b      	ldrh	r3, [r3, #26]
 80122b8:	f043 0302 	orr.w	r3, r3, #2
 80122bc:	b29a      	uxth	r2, r3
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f7fe fda8 	bl	8010e18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80122c8:	4b13      	ldr	r3, [pc, #76]	; (8012318 <tcp_process+0x5c0>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d105      	bne.n	80122de <tcp_process+0x586>
 80122d2:	4b11      	ldr	r3, [pc, #68]	; (8012318 <tcp_process+0x5c0>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	4a0f      	ldr	r2, [pc, #60]	; (8012318 <tcp_process+0x5c0>)
 80122da:	6013      	str	r3, [r2, #0]
 80122dc:	e02e      	b.n	801233c <tcp_process+0x5e4>
 80122de:	4b0e      	ldr	r3, [pc, #56]	; (8012318 <tcp_process+0x5c0>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	613b      	str	r3, [r7, #16]
 80122e4:	e027      	b.n	8012336 <tcp_process+0x5de>
 80122e6:	bf00      	nop
 80122e8:	20013db8 	.word	0x20013db8
 80122ec:	20013db0 	.word	0x20013db0
 80122f0:	20013db6 	.word	0x20013db6
 80122f4:	20013dac 	.word	0x20013dac
 80122f8:	20013d9c 	.word	0x20013d9c
 80122fc:	2000a30c 	.word	0x2000a30c
 8012300:	2000a310 	.word	0x2000a310
 8012304:	0801ee64 	.word	0x0801ee64
 8012308:	0801f104 	.word	0x0801f104
 801230c:	0801eeb0 	.word	0x0801eeb0
 8012310:	20013db4 	.word	0x20013db4
 8012314:	20013db9 	.word	0x20013db9
 8012318:	20013d7c 	.word	0x20013d7c
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	687a      	ldr	r2, [r7, #4]
 8012322:	429a      	cmp	r2, r3
 8012324:	d104      	bne.n	8012330 <tcp_process+0x5d8>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	68da      	ldr	r2, [r3, #12]
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	60da      	str	r2, [r3, #12]
 801232e:	e005      	b.n	801233c <tcp_process+0x5e4>
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	68db      	ldr	r3, [r3, #12]
 8012334:	613b      	str	r3, [r7, #16]
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d1ef      	bne.n	801231c <tcp_process+0x5c4>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2200      	movs	r2, #0
 8012340:	60da      	str	r2, [r3, #12]
 8012342:	4b77      	ldr	r3, [pc, #476]	; (8012520 <tcp_process+0x7c8>)
 8012344:	2201      	movs	r2, #1
 8012346:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	220a      	movs	r2, #10
 801234c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801234e:	4b75      	ldr	r3, [pc, #468]	; (8012524 <tcp_process+0x7cc>)
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	60da      	str	r2, [r3, #12]
 8012356:	4a73      	ldr	r2, [pc, #460]	; (8012524 <tcp_process+0x7cc>)
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6013      	str	r3, [r2, #0]
 801235c:	f002 fd2e 	bl	8014dbc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012360:	e0d2      	b.n	8012508 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	8b5b      	ldrh	r3, [r3, #26]
 8012366:	f043 0302 	orr.w	r3, r3, #2
 801236a:	b29a      	uxth	r2, r3
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2208      	movs	r2, #8
 8012374:	751a      	strb	r2, [r3, #20]
      break;
 8012376:	e0c7      	b.n	8012508 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012378:	4b6b      	ldr	r3, [pc, #428]	; (8012528 <tcp_process+0x7d0>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	f003 0310 	and.w	r3, r3, #16
 8012380:	2b00      	cmp	r3, #0
 8012382:	f000 80c1 	beq.w	8012508 <tcp_process+0x7b0>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801238a:	4b68      	ldr	r3, [pc, #416]	; (801252c <tcp_process+0x7d4>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	429a      	cmp	r2, r3
 8012390:	f040 80ba 	bne.w	8012508 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012398:	2b00      	cmp	r3, #0
 801239a:	f040 80b5 	bne.w	8012508 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2206      	movs	r2, #6
 80123a2:	751a      	strb	r2, [r3, #20]
      break;
 80123a4:	e0b0      	b.n	8012508 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f000 f9ca 	bl	8012740 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80123ac:	4b60      	ldr	r3, [pc, #384]	; (8012530 <tcp_process+0x7d8>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f003 0320 	and.w	r3, r3, #32
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	f000 80a9 	beq.w	801250c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8b5b      	ldrh	r3, [r3, #26]
 80123be:	f043 0302 	orr.w	r3, r3, #2
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80123c8:	6878      	ldr	r0, [r7, #4]
 80123ca:	f7fe fd25 	bl	8010e18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80123ce:	4b59      	ldr	r3, [pc, #356]	; (8012534 <tcp_process+0x7dc>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	687a      	ldr	r2, [r7, #4]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d105      	bne.n	80123e4 <tcp_process+0x68c>
 80123d8:	4b56      	ldr	r3, [pc, #344]	; (8012534 <tcp_process+0x7dc>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	4a55      	ldr	r2, [pc, #340]	; (8012534 <tcp_process+0x7dc>)
 80123e0:	6013      	str	r3, [r2, #0]
 80123e2:	e013      	b.n	801240c <tcp_process+0x6b4>
 80123e4:	4b53      	ldr	r3, [pc, #332]	; (8012534 <tcp_process+0x7dc>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	60fb      	str	r3, [r7, #12]
 80123ea:	e00c      	b.n	8012406 <tcp_process+0x6ae>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d104      	bne.n	8012400 <tcp_process+0x6a8>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	68da      	ldr	r2, [r3, #12]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	60da      	str	r2, [r3, #12]
 80123fe:	e005      	b.n	801240c <tcp_process+0x6b4>
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	68db      	ldr	r3, [r3, #12]
 8012404:	60fb      	str	r3, [r7, #12]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d1ef      	bne.n	80123ec <tcp_process+0x694>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	2200      	movs	r2, #0
 8012410:	60da      	str	r2, [r3, #12]
 8012412:	4b43      	ldr	r3, [pc, #268]	; (8012520 <tcp_process+0x7c8>)
 8012414:	2201      	movs	r2, #1
 8012416:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	220a      	movs	r2, #10
 801241c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801241e:	4b41      	ldr	r3, [pc, #260]	; (8012524 <tcp_process+0x7cc>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	60da      	str	r2, [r3, #12]
 8012426:	4a3f      	ldr	r2, [pc, #252]	; (8012524 <tcp_process+0x7cc>)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	f002 fcc6 	bl	8014dbc <tcp_timer_needed>
      }
      break;
 8012430:	e06c      	b.n	801250c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f984 	bl	8012740 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012438:	4b3b      	ldr	r3, [pc, #236]	; (8012528 <tcp_process+0x7d0>)
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	f003 0310 	and.w	r3, r3, #16
 8012440:	2b00      	cmp	r3, #0
 8012442:	d065      	beq.n	8012510 <tcp_process+0x7b8>
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012448:	4b38      	ldr	r3, [pc, #224]	; (801252c <tcp_process+0x7d4>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	429a      	cmp	r2, r3
 801244e:	d15f      	bne.n	8012510 <tcp_process+0x7b8>
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012454:	2b00      	cmp	r3, #0
 8012456:	d15b      	bne.n	8012510 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f7fe fcdd 	bl	8010e18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801245e:	4b35      	ldr	r3, [pc, #212]	; (8012534 <tcp_process+0x7dc>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d105      	bne.n	8012474 <tcp_process+0x71c>
 8012468:	4b32      	ldr	r3, [pc, #200]	; (8012534 <tcp_process+0x7dc>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	68db      	ldr	r3, [r3, #12]
 801246e:	4a31      	ldr	r2, [pc, #196]	; (8012534 <tcp_process+0x7dc>)
 8012470:	6013      	str	r3, [r2, #0]
 8012472:	e013      	b.n	801249c <tcp_process+0x744>
 8012474:	4b2f      	ldr	r3, [pc, #188]	; (8012534 <tcp_process+0x7dc>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	61bb      	str	r3, [r7, #24]
 801247a:	e00c      	b.n	8012496 <tcp_process+0x73e>
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	429a      	cmp	r2, r3
 8012484:	d104      	bne.n	8012490 <tcp_process+0x738>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	68da      	ldr	r2, [r3, #12]
 801248a:	69bb      	ldr	r3, [r7, #24]
 801248c:	60da      	str	r2, [r3, #12]
 801248e:	e005      	b.n	801249c <tcp_process+0x744>
 8012490:	69bb      	ldr	r3, [r7, #24]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	61bb      	str	r3, [r7, #24]
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d1ef      	bne.n	801247c <tcp_process+0x724>
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	60da      	str	r2, [r3, #12]
 80124a2:	4b1f      	ldr	r3, [pc, #124]	; (8012520 <tcp_process+0x7c8>)
 80124a4:	2201      	movs	r2, #1
 80124a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	220a      	movs	r2, #10
 80124ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80124ae:	4b1d      	ldr	r3, [pc, #116]	; (8012524 <tcp_process+0x7cc>)
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	60da      	str	r2, [r3, #12]
 80124b6:	4a1b      	ldr	r2, [pc, #108]	; (8012524 <tcp_process+0x7cc>)
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	6013      	str	r3, [r2, #0]
 80124bc:	f002 fc7e 	bl	8014dbc <tcp_timer_needed>
      }
      break;
 80124c0:	e026      	b.n	8012510 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f93c 	bl	8012740 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80124c8:	4b17      	ldr	r3, [pc, #92]	; (8012528 <tcp_process+0x7d0>)
 80124ca:	781b      	ldrb	r3, [r3, #0]
 80124cc:	f003 0310 	and.w	r3, r3, #16
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d01f      	beq.n	8012514 <tcp_process+0x7bc>
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124d8:	4b14      	ldr	r3, [pc, #80]	; (801252c <tcp_process+0x7d4>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	429a      	cmp	r2, r3
 80124de:	d119      	bne.n	8012514 <tcp_process+0x7bc>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d115      	bne.n	8012514 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80124e8:	4b11      	ldr	r3, [pc, #68]	; (8012530 <tcp_process+0x7d8>)
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f043 0310 	orr.w	r3, r3, #16
 80124f0:	b2da      	uxtb	r2, r3
 80124f2:	4b0f      	ldr	r3, [pc, #60]	; (8012530 <tcp_process+0x7d8>)
 80124f4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80124f6:	e00d      	b.n	8012514 <tcp_process+0x7bc>
    default:
      break;
 80124f8:	bf00      	nop
 80124fa:	e00c      	b.n	8012516 <tcp_process+0x7be>
      break;
 80124fc:	bf00      	nop
 80124fe:	e00a      	b.n	8012516 <tcp_process+0x7be>
      break;
 8012500:	bf00      	nop
 8012502:	e008      	b.n	8012516 <tcp_process+0x7be>
      break;
 8012504:	bf00      	nop
 8012506:	e006      	b.n	8012516 <tcp_process+0x7be>
      break;
 8012508:	bf00      	nop
 801250a:	e004      	b.n	8012516 <tcp_process+0x7be>
      break;
 801250c:	bf00      	nop
 801250e:	e002      	b.n	8012516 <tcp_process+0x7be>
      break;
 8012510:	bf00      	nop
 8012512:	e000      	b.n	8012516 <tcp_process+0x7be>
      break;
 8012514:	bf00      	nop
  }
  return ERR_OK;
 8012516:	2300      	movs	r3, #0
}
 8012518:	4618      	mov	r0, r3
 801251a:	3724      	adds	r7, #36	; 0x24
 801251c:	46bd      	mov	sp, r7
 801251e:	bd90      	pop	{r4, r7, pc}
 8012520:	20013d84 	.word	0x20013d84
 8012524:	20013d80 	.word	0x20013d80
 8012528:	20013db8 	.word	0x20013db8
 801252c:	20013db0 	.word	0x20013db0
 8012530:	20013db9 	.word	0x20013db9
 8012534:	20013d7c 	.word	0x20013d7c

08012538 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012538:	b590      	push	{r4, r7, lr}
 801253a:	b085      	sub	sp, #20
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d106      	bne.n	8012556 <tcp_oos_insert_segment+0x1e>
 8012548:	4b3b      	ldr	r3, [pc, #236]	; (8012638 <tcp_oos_insert_segment+0x100>)
 801254a:	f240 421f 	movw	r2, #1055	; 0x41f
 801254e:	493b      	ldr	r1, [pc, #236]	; (801263c <tcp_oos_insert_segment+0x104>)
 8012550:	483b      	ldr	r0, [pc, #236]	; (8012640 <tcp_oos_insert_segment+0x108>)
 8012552:	f008 fd9f 	bl	801b094 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	691b      	ldr	r3, [r3, #16]
 801255a:	899b      	ldrh	r3, [r3, #12]
 801255c:	b29b      	uxth	r3, r3
 801255e:	4618      	mov	r0, r3
 8012560:	f7fb fa20 	bl	800d9a4 <lwip_htons>
 8012564:	4603      	mov	r3, r0
 8012566:	b2db      	uxtb	r3, r3
 8012568:	f003 0301 	and.w	r3, r3, #1
 801256c:	2b00      	cmp	r3, #0
 801256e:	d028      	beq.n	80125c2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012570:	6838      	ldr	r0, [r7, #0]
 8012572:	f7fe fa4f 	bl	8010a14 <tcp_segs_free>
    next = NULL;
 8012576:	2300      	movs	r3, #0
 8012578:	603b      	str	r3, [r7, #0]
 801257a:	e056      	b.n	801262a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	691b      	ldr	r3, [r3, #16]
 8012580:	899b      	ldrh	r3, [r3, #12]
 8012582:	b29b      	uxth	r3, r3
 8012584:	4618      	mov	r0, r3
 8012586:	f7fb fa0d 	bl	800d9a4 <lwip_htons>
 801258a:	4603      	mov	r3, r0
 801258c:	b2db      	uxtb	r3, r3
 801258e:	f003 0301 	and.w	r3, r3, #1
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00d      	beq.n	80125b2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	691b      	ldr	r3, [r3, #16]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	b29c      	uxth	r4, r3
 801259e:	2001      	movs	r0, #1
 80125a0:	f7fb fa00 	bl	800d9a4 <lwip_htons>
 80125a4:	4603      	mov	r3, r0
 80125a6:	461a      	mov	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	691b      	ldr	r3, [r3, #16]
 80125ac:	4322      	orrs	r2, r4
 80125ae:	b292      	uxth	r2, r2
 80125b0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80125bc:	68f8      	ldr	r0, [r7, #12]
 80125be:	f7fe fa3e 	bl	8010a3e <tcp_seg_free>
    while (next &&
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d00e      	beq.n	80125e6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	891b      	ldrh	r3, [r3, #8]
 80125cc:	461a      	mov	r2, r3
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <tcp_oos_insert_segment+0x10c>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	441a      	add	r2, r3
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	685b      	ldr	r3, [r3, #4]
 80125da:	6839      	ldr	r1, [r7, #0]
 80125dc:	8909      	ldrh	r1, [r1, #8]
 80125de:	440b      	add	r3, r1
 80125e0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	daca      	bge.n	801257c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d01e      	beq.n	801262a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	891b      	ldrh	r3, [r3, #8]
 80125f0:	461a      	mov	r2, r3
 80125f2:	4b14      	ldr	r3, [pc, #80]	; (8012644 <tcp_oos_insert_segment+0x10c>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	441a      	add	r2, r3
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012600:	2b00      	cmp	r3, #0
 8012602:	dd12      	ble.n	801262a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	691b      	ldr	r3, [r3, #16]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	b29a      	uxth	r2, r3
 801260c:	4b0d      	ldr	r3, [pc, #52]	; (8012644 <tcp_oos_insert_segment+0x10c>)
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	b29b      	uxth	r3, r3
 8012612:	1ad3      	subs	r3, r2, r3
 8012614:	b29a      	uxth	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685a      	ldr	r2, [r3, #4]
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	891b      	ldrh	r3, [r3, #8]
 8012622:	4619      	mov	r1, r3
 8012624:	4610      	mov	r0, r2
 8012626:	f7fc fd59 	bl	800f0dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	683a      	ldr	r2, [r7, #0]
 801262e:	601a      	str	r2, [r3, #0]
}
 8012630:	bf00      	nop
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	bd90      	pop	{r4, r7, pc}
 8012638:	0801ee64 	.word	0x0801ee64
 801263c:	0801f124 	.word	0x0801f124
 8012640:	0801eeb0 	.word	0x0801eeb0
 8012644:	20013dac 	.word	0x20013dac

08012648 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012648:	b5b0      	push	{r4, r5, r7, lr}
 801264a:	b086      	sub	sp, #24
 801264c:	af00      	add	r7, sp, #0
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
 8012654:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012656:	e03e      	b.n	80126d6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012658:	68bb      	ldr	r3, [r7, #8]
 801265a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	4618      	mov	r0, r3
 8012668:	f7fc ff4c 	bl	800f504 <pbuf_clen>
 801266c:	4603      	mov	r3, r0
 801266e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012676:	8a7a      	ldrh	r2, [r7, #18]
 8012678:	429a      	cmp	r2, r3
 801267a:	d906      	bls.n	801268a <tcp_free_acked_segments+0x42>
 801267c:	4b2a      	ldr	r3, [pc, #168]	; (8012728 <tcp_free_acked_segments+0xe0>)
 801267e:	f240 4257 	movw	r2, #1111	; 0x457
 8012682:	492a      	ldr	r1, [pc, #168]	; (801272c <tcp_free_acked_segments+0xe4>)
 8012684:	482a      	ldr	r0, [pc, #168]	; (8012730 <tcp_free_acked_segments+0xe8>)
 8012686:	f008 fd05 	bl	801b094 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012690:	8a7b      	ldrh	r3, [r7, #18]
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	b29a      	uxth	r2, r3
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	891a      	ldrh	r2, [r3, #8]
 80126a0:	4b24      	ldr	r3, [pc, #144]	; (8012734 <tcp_free_acked_segments+0xec>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	4413      	add	r3, r2
 80126a6:	b29a      	uxth	r2, r3
 80126a8:	4b22      	ldr	r3, [pc, #136]	; (8012734 <tcp_free_acked_segments+0xec>)
 80126aa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80126ac:	6978      	ldr	r0, [r7, #20]
 80126ae:	f7fe f9c6 	bl	8010a3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d00c      	beq.n	80126d6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d109      	bne.n	80126d6 <tcp_free_acked_segments+0x8e>
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d106      	bne.n	80126d6 <tcp_free_acked_segments+0x8e>
 80126c8:	4b17      	ldr	r3, [pc, #92]	; (8012728 <tcp_free_acked_segments+0xe0>)
 80126ca:	f240 4261 	movw	r2, #1121	; 0x461
 80126ce:	491a      	ldr	r1, [pc, #104]	; (8012738 <tcp_free_acked_segments+0xf0>)
 80126d0:	4817      	ldr	r0, [pc, #92]	; (8012730 <tcp_free_acked_segments+0xe8>)
 80126d2:	f008 fcdf 	bl	801b094 <iprintf>
  while (seg_list != NULL &&
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d020      	beq.n	801271e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	691b      	ldr	r3, [r3, #16]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	4618      	mov	r0, r3
 80126e4:	f7fb f973 	bl	800d9ce <lwip_htonl>
 80126e8:	4604      	mov	r4, r0
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	891b      	ldrh	r3, [r3, #8]
 80126ee:	461d      	mov	r5, r3
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	691b      	ldr	r3, [r3, #16]
 80126f4:	899b      	ldrh	r3, [r3, #12]
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fb f953 	bl	800d9a4 <lwip_htons>
 80126fe:	4603      	mov	r3, r0
 8012700:	b2db      	uxtb	r3, r3
 8012702:	f003 0303 	and.w	r3, r3, #3
 8012706:	2b00      	cmp	r3, #0
 8012708:	d001      	beq.n	801270e <tcp_free_acked_segments+0xc6>
 801270a:	2301      	movs	r3, #1
 801270c:	e000      	b.n	8012710 <tcp_free_acked_segments+0xc8>
 801270e:	2300      	movs	r3, #0
 8012710:	442b      	add	r3, r5
 8012712:	18e2      	adds	r2, r4, r3
 8012714:	4b09      	ldr	r3, [pc, #36]	; (801273c <tcp_free_acked_segments+0xf4>)
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801271a:	2b00      	cmp	r3, #0
 801271c:	dd9c      	ble.n	8012658 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801271e:	68bb      	ldr	r3, [r7, #8]
}
 8012720:	4618      	mov	r0, r3
 8012722:	3718      	adds	r7, #24
 8012724:	46bd      	mov	sp, r7
 8012726:	bdb0      	pop	{r4, r5, r7, pc}
 8012728:	0801ee64 	.word	0x0801ee64
 801272c:	0801f14c 	.word	0x0801f14c
 8012730:	0801eeb0 	.word	0x0801eeb0
 8012734:	20013db4 	.word	0x20013db4
 8012738:	0801f174 	.word	0x0801f174
 801273c:	20013db0 	.word	0x20013db0

08012740 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012740:	b5b0      	push	{r4, r5, r7, lr}
 8012742:	b094      	sub	sp, #80	; 0x50
 8012744:	af00      	add	r7, sp, #0
 8012746:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012748:	2300      	movs	r3, #0
 801274a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d106      	bne.n	8012760 <tcp_receive+0x20>
 8012752:	4b91      	ldr	r3, [pc, #580]	; (8012998 <tcp_receive+0x258>)
 8012754:	f240 427b 	movw	r2, #1147	; 0x47b
 8012758:	4990      	ldr	r1, [pc, #576]	; (801299c <tcp_receive+0x25c>)
 801275a:	4891      	ldr	r0, [pc, #580]	; (80129a0 <tcp_receive+0x260>)
 801275c:	f008 fc9a 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	7d1b      	ldrb	r3, [r3, #20]
 8012764:	2b03      	cmp	r3, #3
 8012766:	d806      	bhi.n	8012776 <tcp_receive+0x36>
 8012768:	4b8b      	ldr	r3, [pc, #556]	; (8012998 <tcp_receive+0x258>)
 801276a:	f240 427c 	movw	r2, #1148	; 0x47c
 801276e:	498d      	ldr	r1, [pc, #564]	; (80129a4 <tcp_receive+0x264>)
 8012770:	488b      	ldr	r0, [pc, #556]	; (80129a0 <tcp_receive+0x260>)
 8012772:	f008 fc8f 	bl	801b094 <iprintf>

  if (flags & TCP_ACK) {
 8012776:	4b8c      	ldr	r3, [pc, #560]	; (80129a8 <tcp_receive+0x268>)
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	f003 0310 	and.w	r3, r3, #16
 801277e:	2b00      	cmp	r3, #0
 8012780:	f000 8264 	beq.w	8012c4c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801278a:	461a      	mov	r2, r3
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012790:	4413      	add	r3, r2
 8012792:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012798:	4b84      	ldr	r3, [pc, #528]	; (80129ac <tcp_receive+0x26c>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	2b00      	cmp	r3, #0
 80127a0:	db1b      	blt.n	80127da <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80127a6:	4b81      	ldr	r3, [pc, #516]	; (80129ac <tcp_receive+0x26c>)
 80127a8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d106      	bne.n	80127bc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80127b2:	4b7f      	ldr	r3, [pc, #508]	; (80129b0 <tcp_receive+0x270>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	db0e      	blt.n	80127da <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80127c0:	4b7b      	ldr	r3, [pc, #492]	; (80129b0 <tcp_receive+0x270>)
 80127c2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80127c4:	429a      	cmp	r2, r3
 80127c6:	d125      	bne.n	8012814 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80127c8:	4b7a      	ldr	r3, [pc, #488]	; (80129b4 <tcp_receive+0x274>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	89db      	ldrh	r3, [r3, #14]
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d91c      	bls.n	8012814 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80127da:	4b76      	ldr	r3, [pc, #472]	; (80129b4 <tcp_receive+0x274>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	89db      	ldrh	r3, [r3, #14]
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d205      	bcs.n	8012804 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012804:	4b69      	ldr	r3, [pc, #420]	; (80129ac <tcp_receive+0x26c>)
 8012806:	681a      	ldr	r2, [r3, #0]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801280c:	4b68      	ldr	r3, [pc, #416]	; (80129b0 <tcp_receive+0x270>)
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012814:	4b66      	ldr	r3, [pc, #408]	; (80129b0 <tcp_receive+0x270>)
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801281c:	1ad3      	subs	r3, r2, r3
 801281e:	2b00      	cmp	r3, #0
 8012820:	dc58      	bgt.n	80128d4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012822:	4b65      	ldr	r3, [pc, #404]	; (80129b8 <tcp_receive+0x278>)
 8012824:	881b      	ldrh	r3, [r3, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d14b      	bne.n	80128c2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012834:	4413      	add	r3, r2
 8012836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012838:	429a      	cmp	r2, r3
 801283a:	d142      	bne.n	80128c2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012842:	2b00      	cmp	r3, #0
 8012844:	db3d      	blt.n	80128c2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801284a:	4b59      	ldr	r3, [pc, #356]	; (80129b0 <tcp_receive+0x270>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	429a      	cmp	r2, r3
 8012850:	d137      	bne.n	80128c2 <tcp_receive+0x182>
              found_dupack = 1;
 8012852:	2301      	movs	r3, #1
 8012854:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801285c:	2bff      	cmp	r3, #255	; 0xff
 801285e:	d007      	beq.n	8012870 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012866:	3301      	adds	r3, #1
 8012868:	b2da      	uxtb	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012876:	2b03      	cmp	r3, #3
 8012878:	d91b      	bls.n	80128b2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012884:	4413      	add	r3, r2
 8012886:	b29a      	uxth	r2, r3
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801288e:	429a      	cmp	r2, r3
 8012890:	d30a      	bcc.n	80128a8 <tcp_receive+0x168>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801289c:	4413      	add	r3, r2
 801289e:	b29a      	uxth	r2, r3
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80128a6:	e004      	b.n	80128b2 <tcp_receive+0x172>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	d902      	bls.n	80128c2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f001 ff11 	bl	80146e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80128c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f040 8161 	bne.w	8012b8c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80128d2:	e15b      	b.n	8012b8c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128d4:	4b36      	ldr	r3, [pc, #216]	; (80129b0 <tcp_receive+0x270>)
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	3b01      	subs	r3, #1
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f2c0 814e 	blt.w	8012b82 <tcp_receive+0x442>
 80128e6:	4b32      	ldr	r3, [pc, #200]	; (80129b0 <tcp_receive+0x270>)
 80128e8:	681a      	ldr	r2, [r3, #0]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f300 8146 	bgt.w	8012b82 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	8b5b      	ldrh	r3, [r3, #26]
 80128fa:	f003 0304 	and.w	r3, r3, #4
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d010      	beq.n	8012924 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8b5b      	ldrh	r3, [r3, #26]
 8012906:	f023 0304 	bic.w	r3, r3, #4
 801290a:	b29a      	uxth	r2, r3
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2200      	movs	r2, #0
 8012920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012932:	10db      	asrs	r3, r3, #3
 8012934:	b21b      	sxth	r3, r3
 8012936:	b29a      	uxth	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801293e:	b29b      	uxth	r3, r3
 8012940:	4413      	add	r3, r2
 8012942:	b29b      	uxth	r3, r3
 8012944:	b21a      	sxth	r2, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801294c:	4b18      	ldr	r3, [pc, #96]	; (80129b0 <tcp_receive+0x270>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	b29a      	uxth	r2, r3
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012956:	b29b      	uxth	r3, r3
 8012958:	1ad3      	subs	r3, r2, r3
 801295a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2200      	movs	r2, #0
 8012960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012964:	4b12      	ldr	r3, [pc, #72]	; (80129b0 <tcp_receive+0x270>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7d1b      	ldrb	r3, [r3, #20]
 8012970:	2b03      	cmp	r3, #3
 8012972:	f240 8097 	bls.w	8012aa4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012982:	429a      	cmp	r2, r3
 8012984:	d245      	bcs.n	8012a12 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	8b5b      	ldrh	r3, [r3, #26]
 801298a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801298e:	2b00      	cmp	r3, #0
 8012990:	d014      	beq.n	80129bc <tcp_receive+0x27c>
 8012992:	2301      	movs	r3, #1
 8012994:	e013      	b.n	80129be <tcp_receive+0x27e>
 8012996:	bf00      	nop
 8012998:	0801ee64 	.word	0x0801ee64
 801299c:	0801f194 	.word	0x0801f194
 80129a0:	0801eeb0 	.word	0x0801eeb0
 80129a4:	0801f1b0 	.word	0x0801f1b0
 80129a8:	20013db8 	.word	0x20013db8
 80129ac:	20013dac 	.word	0x20013dac
 80129b0:	20013db0 	.word	0x20013db0
 80129b4:	20013d9c 	.word	0x20013d9c
 80129b8:	20013db6 	.word	0x20013db6
 80129bc:	2302      	movs	r3, #2
 80129be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80129c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129cc:	fb12 f303 	smulbb	r3, r2, r3
 80129d0:	b29b      	uxth	r3, r3
 80129d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129d4:	4293      	cmp	r3, r2
 80129d6:	bf28      	it	cs
 80129d8:	4613      	movcs	r3, r2
 80129da:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129e4:	4413      	add	r3, r2
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d309      	bcc.n	8012a06 <tcp_receive+0x2c6>
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80129fa:	4413      	add	r3, r2
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a04:	e04e      	b.n	8012aa4 <tcp_receive+0x364>
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a10:	e048      	b.n	8012aa4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a1a:	4413      	add	r3, r2
 8012a1c:	b29a      	uxth	r2, r3
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d309      	bcc.n	8012a3c <tcp_receive+0x2fc>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a30:	4413      	add	r3, r2
 8012a32:	b29a      	uxth	r2, r3
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012a3a:	e004      	b.n	8012a46 <tcp_receive+0x306>
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d326      	bcc.n	8012aa4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	b29a      	uxth	r2, r3
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a76:	4413      	add	r3, r2
 8012a78:	b29a      	uxth	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a80:	429a      	cmp	r2, r3
 8012a82:	d30a      	bcc.n	8012a9a <tcp_receive+0x35a>
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a8e:	4413      	add	r3, r2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a98:	e004      	b.n	8012aa4 <tcp_receive+0x364>
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012aa0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aac:	4a98      	ldr	r2, [pc, #608]	; (8012d10 <tcp_receive+0x5d0>)
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7ff fdca 	bl	8012648 <tcp_free_acked_segments>
 8012ab4:	4602      	mov	r2, r0
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ac2:	4a94      	ldr	r2, [pc, #592]	; (8012d14 <tcp_receive+0x5d4>)
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7ff fdbf 	bl	8012648 <tcp_free_acked_segments>
 8012aca:	4602      	mov	r2, r0
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d104      	bne.n	8012ae2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012ade:	861a      	strh	r2, [r3, #48]	; 0x30
 8012ae0:	e002      	b.n	8012ae8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2200      	movs	r2, #0
 8012aec:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d103      	bne.n	8012afe <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2200      	movs	r2, #0
 8012afa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012b04:	4b84      	ldr	r3, [pc, #528]	; (8012d18 <tcp_receive+0x5d8>)
 8012b06:	881b      	ldrh	r3, [r3, #0]
 8012b08:	4413      	add	r3, r2
 8012b0a:	b29a      	uxth	r2, r3
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	8b5b      	ldrh	r3, [r3, #26]
 8012b16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d035      	beq.n	8012b8a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d118      	bne.n	8012b58 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00c      	beq.n	8012b48 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b36:	691b      	ldr	r3, [r3, #16]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fa ff47 	bl	800d9ce <lwip_htonl>
 8012b40:	4603      	mov	r3, r0
 8012b42:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	dc20      	bgt.n	8012b8a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	8b5b      	ldrh	r3, [r3, #26]
 8012b4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b50:	b29a      	uxth	r2, r3
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b56:	e018      	b.n	8012b8a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b60:	691b      	ldr	r3, [r3, #16]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7fa ff32 	bl	800d9ce <lwip_htonl>
 8012b6a:	4603      	mov	r3, r0
 8012b6c:	1ae3      	subs	r3, r4, r3
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	dc0b      	bgt.n	8012b8a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	8b5b      	ldrh	r3, [r3, #26]
 8012b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b80:	e003      	b.n	8012b8a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f001 ffaa 	bl	8014adc <tcp_send_empty_ack>
 8012b88:	e000      	b.n	8012b8c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012b8a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d05b      	beq.n	8012c4c <tcp_receive+0x50c>
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b98:	4b60      	ldr	r3, [pc, #384]	; (8012d1c <tcp_receive+0x5dc>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	1ad3      	subs	r3, r2, r3
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	da54      	bge.n	8012c4c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012ba2:	4b5f      	ldr	r3, [pc, #380]	; (8012d20 <tcp_receive+0x5e0>)
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bac:	b29b      	uxth	r3, r3
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012bb6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012bc0:	10db      	asrs	r3, r3, #3
 8012bc2:	b21b      	sxth	r3, r3
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012bda:	4413      	add	r3, r2
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	b21a      	sxth	r2, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012be4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	da05      	bge.n	8012bf8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012bec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012bf0:	425b      	negs	r3, r3
 8012bf2:	b29b      	uxth	r3, r3
 8012bf4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012bf8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c02:	109b      	asrs	r3, r3, #2
 8012c04:	b21b      	sxth	r3, r3
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	1ad3      	subs	r3, r2, r3
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012c1c:	4413      	add	r3, r2
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	b21a      	sxth	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c2c:	10db      	asrs	r3, r3, #3
 8012c2e:	b21b      	sxth	r3, r3
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	4413      	add	r3, r2
 8012c3c:	b29b      	uxth	r3, r3
 8012c3e:	b21a      	sxth	r2, r3
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2200      	movs	r2, #0
 8012c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012c4c:	4b35      	ldr	r3, [pc, #212]	; (8012d24 <tcp_receive+0x5e4>)
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f000 84e2 	beq.w	801361a <tcp_receive+0xeda>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	7d1b      	ldrb	r3, [r3, #20]
 8012c5a:	2b06      	cmp	r3, #6
 8012c5c:	f200 84dd 	bhi.w	801361a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c64:	4b30      	ldr	r3, [pc, #192]	; (8012d28 <tcp_receive+0x5e8>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	1ad3      	subs	r3, r2, r3
 8012c6a:	3b01      	subs	r3, #1
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	f2c0 808f 	blt.w	8012d90 <tcp_receive+0x650>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c76:	4b2b      	ldr	r3, [pc, #172]	; (8012d24 <tcp_receive+0x5e4>)
 8012c78:	881b      	ldrh	r3, [r3, #0]
 8012c7a:	4619      	mov	r1, r3
 8012c7c:	4b2a      	ldr	r3, [pc, #168]	; (8012d28 <tcp_receive+0x5e8>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	440b      	add	r3, r1
 8012c82:	1ad3      	subs	r3, r2, r3
 8012c84:	3301      	adds	r3, #1
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f300 8082 	bgt.w	8012d90 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012c8c:	4b27      	ldr	r3, [pc, #156]	; (8012d2c <tcp_receive+0x5ec>)
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c96:	4b24      	ldr	r3, [pc, #144]	; (8012d28 <tcp_receive+0x5e8>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	1ad3      	subs	r3, r2, r3
 8012c9c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012c9e:	4b23      	ldr	r3, [pc, #140]	; (8012d2c <tcp_receive+0x5ec>)
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d106      	bne.n	8012cb4 <tcp_receive+0x574>
 8012ca6:	4b22      	ldr	r3, [pc, #136]	; (8012d30 <tcp_receive+0x5f0>)
 8012ca8:	f240 5294 	movw	r2, #1428	; 0x594
 8012cac:	4921      	ldr	r1, [pc, #132]	; (8012d34 <tcp_receive+0x5f4>)
 8012cae:	4822      	ldr	r0, [pc, #136]	; (8012d38 <tcp_receive+0x5f8>)
 8012cb0:	f008 f9f0 	bl	801b094 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d906      	bls.n	8012ccc <tcp_receive+0x58c>
 8012cbe:	4b1c      	ldr	r3, [pc, #112]	; (8012d30 <tcp_receive+0x5f0>)
 8012cc0:	f240 5295 	movw	r2, #1429	; 0x595
 8012cc4:	491d      	ldr	r1, [pc, #116]	; (8012d3c <tcp_receive+0x5fc>)
 8012cc6:	481c      	ldr	r0, [pc, #112]	; (8012d38 <tcp_receive+0x5f8>)
 8012cc8:	f008 f9e4 	bl	801b094 <iprintf>
      off = (u16_t)off32;
 8012ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012cd2:	4b16      	ldr	r3, [pc, #88]	; (8012d2c <tcp_receive+0x5ec>)
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	891b      	ldrh	r3, [r3, #8]
 8012cd8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d906      	bls.n	8012cee <tcp_receive+0x5ae>
 8012ce0:	4b13      	ldr	r3, [pc, #76]	; (8012d30 <tcp_receive+0x5f0>)
 8012ce2:	f240 5297 	movw	r2, #1431	; 0x597
 8012ce6:	4916      	ldr	r1, [pc, #88]	; (8012d40 <tcp_receive+0x600>)
 8012ce8:	4813      	ldr	r0, [pc, #76]	; (8012d38 <tcp_receive+0x5f8>)
 8012cea:	f008 f9d3 	bl	801b094 <iprintf>
      inseg.len -= off;
 8012cee:	4b0f      	ldr	r3, [pc, #60]	; (8012d2c <tcp_receive+0x5ec>)
 8012cf0:	891a      	ldrh	r2, [r3, #8]
 8012cf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012cf6:	1ad3      	subs	r3, r2, r3
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	4b0c      	ldr	r3, [pc, #48]	; (8012d2c <tcp_receive+0x5ec>)
 8012cfc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012cfe:	4b0b      	ldr	r3, [pc, #44]	; (8012d2c <tcp_receive+0x5ec>)
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	891a      	ldrh	r2, [r3, #8]
 8012d04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012d0c:	e02a      	b.n	8012d64 <tcp_receive+0x624>
 8012d0e:	bf00      	nop
 8012d10:	0801f1cc 	.word	0x0801f1cc
 8012d14:	0801f1d4 	.word	0x0801f1d4
 8012d18:	20013db4 	.word	0x20013db4
 8012d1c:	20013db0 	.word	0x20013db0
 8012d20:	20013d70 	.word	0x20013d70
 8012d24:	20013db6 	.word	0x20013db6
 8012d28:	20013dac 	.word	0x20013dac
 8012d2c:	20013d88 	.word	0x20013d88
 8012d30:	0801ee64 	.word	0x0801ee64
 8012d34:	0801f1dc 	.word	0x0801f1dc
 8012d38:	0801eeb0 	.word	0x0801eeb0
 8012d3c:	0801f1ec 	.word	0x0801f1ec
 8012d40:	0801f1fc 	.word	0x0801f1fc
        off -= p->len;
 8012d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d46:	895b      	ldrh	r3, [r3, #10]
 8012d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d4c:	1ad3      	subs	r3, r2, r3
 8012d4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d56:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d66:	895b      	ldrh	r3, [r3, #10]
 8012d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d8e9      	bhi.n	8012d44 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012d70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d74:	4619      	mov	r1, r3
 8012d76:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d78:	f7fc fab0 	bl	800f2dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d80:	4a91      	ldr	r2, [pc, #580]	; (8012fc8 <tcp_receive+0x888>)
 8012d82:	6013      	str	r3, [r2, #0]
 8012d84:	4b91      	ldr	r3, [pc, #580]	; (8012fcc <tcp_receive+0x88c>)
 8012d86:	691b      	ldr	r3, [r3, #16]
 8012d88:	4a8f      	ldr	r2, [pc, #572]	; (8012fc8 <tcp_receive+0x888>)
 8012d8a:	6812      	ldr	r2, [r2, #0]
 8012d8c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012d8e:	e00d      	b.n	8012dac <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012d90:	4b8d      	ldr	r3, [pc, #564]	; (8012fc8 <tcp_receive+0x888>)
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	da06      	bge.n	8012dac <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	8b5b      	ldrh	r3, [r3, #26]
 8012da2:	f043 0302 	orr.w	r3, r3, #2
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012dac:	4b86      	ldr	r3, [pc, #536]	; (8012fc8 <tcp_receive+0x888>)
 8012dae:	681a      	ldr	r2, [r3, #0]
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	f2c0 842a 	blt.w	8013610 <tcp_receive+0xed0>
 8012dbc:	4b82      	ldr	r3, [pc, #520]	; (8012fc8 <tcp_receive+0x888>)
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dc8:	440b      	add	r3, r1
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	3301      	adds	r3, #1
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f300 841e 	bgt.w	8013610 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012dd8:	4b7b      	ldr	r3, [pc, #492]	; (8012fc8 <tcp_receive+0x888>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	f040 829a 	bne.w	8013316 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012de2:	4b7a      	ldr	r3, [pc, #488]	; (8012fcc <tcp_receive+0x88c>)
 8012de4:	891c      	ldrh	r4, [r3, #8]
 8012de6:	4b79      	ldr	r3, [pc, #484]	; (8012fcc <tcp_receive+0x88c>)
 8012de8:	691b      	ldr	r3, [r3, #16]
 8012dea:	899b      	ldrh	r3, [r3, #12]
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	4618      	mov	r0, r3
 8012df0:	f7fa fdd8 	bl	800d9a4 <lwip_htons>
 8012df4:	4603      	mov	r3, r0
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	f003 0303 	and.w	r3, r3, #3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d001      	beq.n	8012e04 <tcp_receive+0x6c4>
 8012e00:	2301      	movs	r3, #1
 8012e02:	e000      	b.n	8012e06 <tcp_receive+0x6c6>
 8012e04:	2300      	movs	r3, #0
 8012e06:	4423      	add	r3, r4
 8012e08:	b29a      	uxth	r2, r3
 8012e0a:	4b71      	ldr	r3, [pc, #452]	; (8012fd0 <tcp_receive+0x890>)
 8012e0c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e12:	4b6f      	ldr	r3, [pc, #444]	; (8012fd0 <tcp_receive+0x890>)
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d275      	bcs.n	8012f06 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e1a:	4b6c      	ldr	r3, [pc, #432]	; (8012fcc <tcp_receive+0x88c>)
 8012e1c:	691b      	ldr	r3, [r3, #16]
 8012e1e:	899b      	ldrh	r3, [r3, #12]
 8012e20:	b29b      	uxth	r3, r3
 8012e22:	4618      	mov	r0, r3
 8012e24:	f7fa fdbe 	bl	800d9a4 <lwip_htons>
 8012e28:	4603      	mov	r3, r0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	f003 0301 	and.w	r3, r3, #1
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d01f      	beq.n	8012e74 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012e34:	4b65      	ldr	r3, [pc, #404]	; (8012fcc <tcp_receive+0x88c>)
 8012e36:	691b      	ldr	r3, [r3, #16]
 8012e38:	899b      	ldrh	r3, [r3, #12]
 8012e3a:	b29b      	uxth	r3, r3
 8012e3c:	b21b      	sxth	r3, r3
 8012e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e42:	b21c      	sxth	r4, r3
 8012e44:	4b61      	ldr	r3, [pc, #388]	; (8012fcc <tcp_receive+0x88c>)
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	899b      	ldrh	r3, [r3, #12]
 8012e4a:	b29b      	uxth	r3, r3
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fa fda9 	bl	800d9a4 <lwip_htons>
 8012e52:	4603      	mov	r3, r0
 8012e54:	b2db      	uxtb	r3, r3
 8012e56:	b29b      	uxth	r3, r3
 8012e58:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fa fda0 	bl	800d9a4 <lwip_htons>
 8012e64:	4603      	mov	r3, r0
 8012e66:	b21b      	sxth	r3, r3
 8012e68:	4323      	orrs	r3, r4
 8012e6a:	b21a      	sxth	r2, r3
 8012e6c:	4b57      	ldr	r3, [pc, #348]	; (8012fcc <tcp_receive+0x88c>)
 8012e6e:	691b      	ldr	r3, [r3, #16]
 8012e70:	b292      	uxth	r2, r2
 8012e72:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e78:	4b54      	ldr	r3, [pc, #336]	; (8012fcc <tcp_receive+0x88c>)
 8012e7a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012e7c:	4b53      	ldr	r3, [pc, #332]	; (8012fcc <tcp_receive+0x88c>)
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	899b      	ldrh	r3, [r3, #12]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7fa fd8d 	bl	800d9a4 <lwip_htons>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	f003 0302 	and.w	r3, r3, #2
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d005      	beq.n	8012ea2 <tcp_receive+0x762>
            inseg.len -= 1;
 8012e96:	4b4d      	ldr	r3, [pc, #308]	; (8012fcc <tcp_receive+0x88c>)
 8012e98:	891b      	ldrh	r3, [r3, #8]
 8012e9a:	3b01      	subs	r3, #1
 8012e9c:	b29a      	uxth	r2, r3
 8012e9e:	4b4b      	ldr	r3, [pc, #300]	; (8012fcc <tcp_receive+0x88c>)
 8012ea0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012ea2:	4b4a      	ldr	r3, [pc, #296]	; (8012fcc <tcp_receive+0x88c>)
 8012ea4:	685b      	ldr	r3, [r3, #4]
 8012ea6:	4a49      	ldr	r2, [pc, #292]	; (8012fcc <tcp_receive+0x88c>)
 8012ea8:	8912      	ldrh	r2, [r2, #8]
 8012eaa:	4611      	mov	r1, r2
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fc f915 	bl	800f0dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012eb2:	4b46      	ldr	r3, [pc, #280]	; (8012fcc <tcp_receive+0x88c>)
 8012eb4:	891c      	ldrh	r4, [r3, #8]
 8012eb6:	4b45      	ldr	r3, [pc, #276]	; (8012fcc <tcp_receive+0x88c>)
 8012eb8:	691b      	ldr	r3, [r3, #16]
 8012eba:	899b      	ldrh	r3, [r3, #12]
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fa fd70 	bl	800d9a4 <lwip_htons>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	f003 0303 	and.w	r3, r3, #3
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <tcp_receive+0x794>
 8012ed0:	2301      	movs	r3, #1
 8012ed2:	e000      	b.n	8012ed6 <tcp_receive+0x796>
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4423      	add	r3, r4
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	4b3d      	ldr	r3, [pc, #244]	; (8012fd0 <tcp_receive+0x890>)
 8012edc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012ede:	4b3c      	ldr	r3, [pc, #240]	; (8012fd0 <tcp_receive+0x890>)
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	4b38      	ldr	r3, [pc, #224]	; (8012fc8 <tcp_receive+0x888>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	441a      	add	r2, r3
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eee:	6879      	ldr	r1, [r7, #4]
 8012ef0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ef2:	440b      	add	r3, r1
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d006      	beq.n	8012f06 <tcp_receive+0x7c6>
 8012ef8:	4b36      	ldr	r3, [pc, #216]	; (8012fd4 <tcp_receive+0x894>)
 8012efa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012efe:	4936      	ldr	r1, [pc, #216]	; (8012fd8 <tcp_receive+0x898>)
 8012f00:	4836      	ldr	r0, [pc, #216]	; (8012fdc <tcp_receive+0x89c>)
 8012f02:	f008 f8c7 	bl	801b094 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	f000 80e7 	beq.w	80130de <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f10:	4b2e      	ldr	r3, [pc, #184]	; (8012fcc <tcp_receive+0x88c>)
 8012f12:	691b      	ldr	r3, [r3, #16]
 8012f14:	899b      	ldrh	r3, [r3, #12]
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fa fd43 	bl	800d9a4 <lwip_htons>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	b2db      	uxtb	r3, r3
 8012f22:	f003 0301 	and.w	r3, r3, #1
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d010      	beq.n	8012f4c <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012f2a:	e00a      	b.n	8012f42 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f30:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f7fd fd7e 	bl	8010a3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d1f0      	bne.n	8012f2c <tcp_receive+0x7ec>
 8012f4a:	e0c8      	b.n	80130de <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f50:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012f52:	e052      	b.n	8012ffa <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f56:	691b      	ldr	r3, [r3, #16]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	b29b      	uxth	r3, r3
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7fa fd21 	bl	800d9a4 <lwip_htons>
 8012f62:	4603      	mov	r3, r0
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	f003 0301 	and.w	r3, r3, #1
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d03d      	beq.n	8012fea <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012f6e:	4b17      	ldr	r3, [pc, #92]	; (8012fcc <tcp_receive+0x88c>)
 8012f70:	691b      	ldr	r3, [r3, #16]
 8012f72:	899b      	ldrh	r3, [r3, #12]
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fa fd14 	bl	800d9a4 <lwip_htons>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d130      	bne.n	8012fea <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012f88:	4b10      	ldr	r3, [pc, #64]	; (8012fcc <tcp_receive+0x88c>)
 8012f8a:	691b      	ldr	r3, [r3, #16]
 8012f8c:	899b      	ldrh	r3, [r3, #12]
 8012f8e:	b29c      	uxth	r4, r3
 8012f90:	2001      	movs	r0, #1
 8012f92:	f7fa fd07 	bl	800d9a4 <lwip_htons>
 8012f96:	4603      	mov	r3, r0
 8012f98:	461a      	mov	r2, r3
 8012f9a:	4b0c      	ldr	r3, [pc, #48]	; (8012fcc <tcp_receive+0x88c>)
 8012f9c:	691b      	ldr	r3, [r3, #16]
 8012f9e:	4322      	orrs	r2, r4
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012fa4:	4b09      	ldr	r3, [pc, #36]	; (8012fcc <tcp_receive+0x88c>)
 8012fa6:	891c      	ldrh	r4, [r3, #8]
 8012fa8:	4b08      	ldr	r3, [pc, #32]	; (8012fcc <tcp_receive+0x88c>)
 8012faa:	691b      	ldr	r3, [r3, #16]
 8012fac:	899b      	ldrh	r3, [r3, #12]
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fa fcf7 	bl	800d9a4 <lwip_htons>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	b2db      	uxtb	r3, r3
 8012fba:	f003 0303 	and.w	r3, r3, #3
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d00e      	beq.n	8012fe0 <tcp_receive+0x8a0>
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	e00d      	b.n	8012fe2 <tcp_receive+0x8a2>
 8012fc6:	bf00      	nop
 8012fc8:	20013dac 	.word	0x20013dac
 8012fcc:	20013d88 	.word	0x20013d88
 8012fd0:	20013db6 	.word	0x20013db6
 8012fd4:	0801ee64 	.word	0x0801ee64
 8012fd8:	0801f20c 	.word	0x0801f20c
 8012fdc:	0801eeb0 	.word	0x0801eeb0
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4423      	add	r3, r4
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	4b98      	ldr	r3, [pc, #608]	; (8013248 <tcp_receive+0xb08>)
 8012fe8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fec:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012ff4:	6938      	ldr	r0, [r7, #16]
 8012ff6:	f7fd fd22 	bl	8010a3e <tcp_seg_free>
            while (next &&
 8012ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d00e      	beq.n	801301e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013000:	4b91      	ldr	r3, [pc, #580]	; (8013248 <tcp_receive+0xb08>)
 8013002:	881b      	ldrh	r3, [r3, #0]
 8013004:	461a      	mov	r2, r3
 8013006:	4b91      	ldr	r3, [pc, #580]	; (801324c <tcp_receive+0xb0c>)
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	441a      	add	r2, r3
 801300c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013014:	8909      	ldrh	r1, [r1, #8]
 8013016:	440b      	add	r3, r1
 8013018:	1ad3      	subs	r3, r2, r3
            while (next &&
 801301a:	2b00      	cmp	r3, #0
 801301c:	da9a      	bge.n	8012f54 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801301e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013020:	2b00      	cmp	r3, #0
 8013022:	d059      	beq.n	80130d8 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013024:	4b88      	ldr	r3, [pc, #544]	; (8013248 <tcp_receive+0xb08>)
 8013026:	881b      	ldrh	r3, [r3, #0]
 8013028:	461a      	mov	r2, r3
 801302a:	4b88      	ldr	r3, [pc, #544]	; (801324c <tcp_receive+0xb0c>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	441a      	add	r2, r3
 8013030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013032:	691b      	ldr	r3, [r3, #16]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013038:	2b00      	cmp	r3, #0
 801303a:	dd4d      	ble.n	80130d8 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801303e:	691b      	ldr	r3, [r3, #16]
 8013040:	685b      	ldr	r3, [r3, #4]
 8013042:	b29a      	uxth	r2, r3
 8013044:	4b81      	ldr	r3, [pc, #516]	; (801324c <tcp_receive+0xb0c>)
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	b29b      	uxth	r3, r3
 801304a:	1ad3      	subs	r3, r2, r3
 801304c:	b29a      	uxth	r2, r3
 801304e:	4b80      	ldr	r3, [pc, #512]	; (8013250 <tcp_receive+0xb10>)
 8013050:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013052:	4b7f      	ldr	r3, [pc, #508]	; (8013250 <tcp_receive+0xb10>)
 8013054:	691b      	ldr	r3, [r3, #16]
 8013056:	899b      	ldrh	r3, [r3, #12]
 8013058:	b29b      	uxth	r3, r3
 801305a:	4618      	mov	r0, r3
 801305c:	f7fa fca2 	bl	800d9a4 <lwip_htons>
 8013060:	4603      	mov	r3, r0
 8013062:	b2db      	uxtb	r3, r3
 8013064:	f003 0302 	and.w	r3, r3, #2
 8013068:	2b00      	cmp	r3, #0
 801306a:	d005      	beq.n	8013078 <tcp_receive+0x938>
                inseg.len -= 1;
 801306c:	4b78      	ldr	r3, [pc, #480]	; (8013250 <tcp_receive+0xb10>)
 801306e:	891b      	ldrh	r3, [r3, #8]
 8013070:	3b01      	subs	r3, #1
 8013072:	b29a      	uxth	r2, r3
 8013074:	4b76      	ldr	r3, [pc, #472]	; (8013250 <tcp_receive+0xb10>)
 8013076:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013078:	4b75      	ldr	r3, [pc, #468]	; (8013250 <tcp_receive+0xb10>)
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	4a74      	ldr	r2, [pc, #464]	; (8013250 <tcp_receive+0xb10>)
 801307e:	8912      	ldrh	r2, [r2, #8]
 8013080:	4611      	mov	r1, r2
 8013082:	4618      	mov	r0, r3
 8013084:	f7fc f82a 	bl	800f0dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013088:	4b71      	ldr	r3, [pc, #452]	; (8013250 <tcp_receive+0xb10>)
 801308a:	891c      	ldrh	r4, [r3, #8]
 801308c:	4b70      	ldr	r3, [pc, #448]	; (8013250 <tcp_receive+0xb10>)
 801308e:	691b      	ldr	r3, [r3, #16]
 8013090:	899b      	ldrh	r3, [r3, #12]
 8013092:	b29b      	uxth	r3, r3
 8013094:	4618      	mov	r0, r3
 8013096:	f7fa fc85 	bl	800d9a4 <lwip_htons>
 801309a:	4603      	mov	r3, r0
 801309c:	b2db      	uxtb	r3, r3
 801309e:	f003 0303 	and.w	r3, r3, #3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <tcp_receive+0x96a>
 80130a6:	2301      	movs	r3, #1
 80130a8:	e000      	b.n	80130ac <tcp_receive+0x96c>
 80130aa:	2300      	movs	r3, #0
 80130ac:	4423      	add	r3, r4
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	4b65      	ldr	r3, [pc, #404]	; (8013248 <tcp_receive+0xb08>)
 80130b2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80130b4:	4b64      	ldr	r3, [pc, #400]	; (8013248 <tcp_receive+0xb08>)
 80130b6:	881b      	ldrh	r3, [r3, #0]
 80130b8:	461a      	mov	r2, r3
 80130ba:	4b64      	ldr	r3, [pc, #400]	; (801324c <tcp_receive+0xb0c>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	441a      	add	r2, r3
 80130c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130c2:	691b      	ldr	r3, [r3, #16]
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d006      	beq.n	80130d8 <tcp_receive+0x998>
 80130ca:	4b62      	ldr	r3, [pc, #392]	; (8013254 <tcp_receive+0xb14>)
 80130cc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80130d0:	4961      	ldr	r1, [pc, #388]	; (8013258 <tcp_receive+0xb18>)
 80130d2:	4862      	ldr	r0, [pc, #392]	; (801325c <tcp_receive+0xb1c>)
 80130d4:	f007 ffde 	bl	801b094 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130dc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80130de:	4b5a      	ldr	r3, [pc, #360]	; (8013248 <tcp_receive+0xb08>)
 80130e0:	881b      	ldrh	r3, [r3, #0]
 80130e2:	461a      	mov	r2, r3
 80130e4:	4b59      	ldr	r3, [pc, #356]	; (801324c <tcp_receive+0xb0c>)
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	441a      	add	r2, r3
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80130f2:	4b55      	ldr	r3, [pc, #340]	; (8013248 <tcp_receive+0xb08>)
 80130f4:	881b      	ldrh	r3, [r3, #0]
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d206      	bcs.n	8013108 <tcp_receive+0x9c8>
 80130fa:	4b56      	ldr	r3, [pc, #344]	; (8013254 <tcp_receive+0xb14>)
 80130fc:	f240 6207 	movw	r2, #1543	; 0x607
 8013100:	4957      	ldr	r1, [pc, #348]	; (8013260 <tcp_receive+0xb20>)
 8013102:	4856      	ldr	r0, [pc, #344]	; (801325c <tcp_receive+0xb1c>)
 8013104:	f007 ffc6 	bl	801b094 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801310c:	4b4e      	ldr	r3, [pc, #312]	; (8013248 <tcp_receive+0xb08>)
 801310e:	881b      	ldrh	r3, [r3, #0]
 8013110:	1ad3      	subs	r3, r2, r3
 8013112:	b29a      	uxth	r2, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f7fc ffad 	bl	8010078 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801311e:	4b4c      	ldr	r3, [pc, #304]	; (8013250 <tcp_receive+0xb10>)
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	891b      	ldrh	r3, [r3, #8]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d006      	beq.n	8013136 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8013128:	4b49      	ldr	r3, [pc, #292]	; (8013250 <tcp_receive+0xb10>)
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	4a4d      	ldr	r2, [pc, #308]	; (8013264 <tcp_receive+0xb24>)
 801312e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013130:	4b47      	ldr	r3, [pc, #284]	; (8013250 <tcp_receive+0xb10>)
 8013132:	2200      	movs	r2, #0
 8013134:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013136:	4b46      	ldr	r3, [pc, #280]	; (8013250 <tcp_receive+0xb10>)
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	899b      	ldrh	r3, [r3, #12]
 801313c:	b29b      	uxth	r3, r3
 801313e:	4618      	mov	r0, r3
 8013140:	f7fa fc30 	bl	800d9a4 <lwip_htons>
 8013144:	4603      	mov	r3, r0
 8013146:	b2db      	uxtb	r3, r3
 8013148:	f003 0301 	and.w	r3, r3, #1
 801314c:	2b00      	cmp	r3, #0
 801314e:	f000 80b8 	beq.w	80132c2 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013152:	4b45      	ldr	r3, [pc, #276]	; (8013268 <tcp_receive+0xb28>)
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	f043 0320 	orr.w	r3, r3, #32
 801315a:	b2da      	uxtb	r2, r3
 801315c:	4b42      	ldr	r3, [pc, #264]	; (8013268 <tcp_receive+0xb28>)
 801315e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013160:	e0af      	b.n	80132c2 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013166:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	4a36      	ldr	r2, [pc, #216]	; (801324c <tcp_receive+0xb0c>)
 8013172:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	891b      	ldrh	r3, [r3, #8]
 8013178:	461c      	mov	r4, r3
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	899b      	ldrh	r3, [r3, #12]
 8013180:	b29b      	uxth	r3, r3
 8013182:	4618      	mov	r0, r3
 8013184:	f7fa fc0e 	bl	800d9a4 <lwip_htons>
 8013188:	4603      	mov	r3, r0
 801318a:	b2db      	uxtb	r3, r3
 801318c:	f003 0303 	and.w	r3, r3, #3
 8013190:	2b00      	cmp	r3, #0
 8013192:	d001      	beq.n	8013198 <tcp_receive+0xa58>
 8013194:	2301      	movs	r3, #1
 8013196:	e000      	b.n	801319a <tcp_receive+0xa5a>
 8013198:	2300      	movs	r3, #0
 801319a:	191a      	adds	r2, r3, r4
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131a0:	441a      	add	r2, r3
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131aa:	461c      	mov	r4, r3
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	891b      	ldrh	r3, [r3, #8]
 80131b0:	461d      	mov	r5, r3
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	899b      	ldrh	r3, [r3, #12]
 80131b8:	b29b      	uxth	r3, r3
 80131ba:	4618      	mov	r0, r3
 80131bc:	f7fa fbf2 	bl	800d9a4 <lwip_htons>
 80131c0:	4603      	mov	r3, r0
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	f003 0303 	and.w	r3, r3, #3
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <tcp_receive+0xa90>
 80131cc:	2301      	movs	r3, #1
 80131ce:	e000      	b.n	80131d2 <tcp_receive+0xa92>
 80131d0:	2300      	movs	r3, #0
 80131d2:	442b      	add	r3, r5
 80131d4:	429c      	cmp	r4, r3
 80131d6:	d206      	bcs.n	80131e6 <tcp_receive+0xaa6>
 80131d8:	4b1e      	ldr	r3, [pc, #120]	; (8013254 <tcp_receive+0xb14>)
 80131da:	f240 622b 	movw	r2, #1579	; 0x62b
 80131de:	4923      	ldr	r1, [pc, #140]	; (801326c <tcp_receive+0xb2c>)
 80131e0:	481e      	ldr	r0, [pc, #120]	; (801325c <tcp_receive+0xb1c>)
 80131e2:	f007 ff57 	bl	801b094 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	891b      	ldrh	r3, [r3, #8]
 80131ea:	461c      	mov	r4, r3
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	691b      	ldr	r3, [r3, #16]
 80131f0:	899b      	ldrh	r3, [r3, #12]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fa fbd5 	bl	800d9a4 <lwip_htons>
 80131fa:	4603      	mov	r3, r0
 80131fc:	b2db      	uxtb	r3, r3
 80131fe:	f003 0303 	and.w	r3, r3, #3
 8013202:	2b00      	cmp	r3, #0
 8013204:	d001      	beq.n	801320a <tcp_receive+0xaca>
 8013206:	2301      	movs	r3, #1
 8013208:	e000      	b.n	801320c <tcp_receive+0xacc>
 801320a:	2300      	movs	r3, #0
 801320c:	1919      	adds	r1, r3, r4
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013212:	b28b      	uxth	r3, r1
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	b29a      	uxth	r2, r3
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7fc ff2b 	bl	8010078 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	891b      	ldrh	r3, [r3, #8]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d028      	beq.n	801327e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801322c:	4b0d      	ldr	r3, [pc, #52]	; (8013264 <tcp_receive+0xb24>)
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d01d      	beq.n	8013270 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013234:	4b0b      	ldr	r3, [pc, #44]	; (8013264 <tcp_receive+0xb24>)
 8013236:	681a      	ldr	r2, [r3, #0]
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	4619      	mov	r1, r3
 801323e:	4610      	mov	r0, r2
 8013240:	f7fc f9a0 	bl	800f584 <pbuf_cat>
 8013244:	e018      	b.n	8013278 <tcp_receive+0xb38>
 8013246:	bf00      	nop
 8013248:	20013db6 	.word	0x20013db6
 801324c:	20013dac 	.word	0x20013dac
 8013250:	20013d88 	.word	0x20013d88
 8013254:	0801ee64 	.word	0x0801ee64
 8013258:	0801f244 	.word	0x0801f244
 801325c:	0801eeb0 	.word	0x0801eeb0
 8013260:	0801f280 	.word	0x0801f280
 8013264:	20013dbc 	.word	0x20013dbc
 8013268:	20013db9 	.word	0x20013db9
 801326c:	0801f2a0 	.word	0x0801f2a0
            } else {
              recv_data = cseg->p;
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	4a70      	ldr	r2, [pc, #448]	; (8013438 <tcp_receive+0xcf8>)
 8013276:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	2200      	movs	r2, #0
 801327c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	899b      	ldrh	r3, [r3, #12]
 8013284:	b29b      	uxth	r3, r3
 8013286:	4618      	mov	r0, r3
 8013288:	f7fa fb8c 	bl	800d9a4 <lwip_htons>
 801328c:	4603      	mov	r3, r0
 801328e:	b2db      	uxtb	r3, r3
 8013290:	f003 0301 	and.w	r3, r3, #1
 8013294:	2b00      	cmp	r3, #0
 8013296:	d00d      	beq.n	80132b4 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013298:	4b68      	ldr	r3, [pc, #416]	; (801343c <tcp_receive+0xcfc>)
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	f043 0320 	orr.w	r3, r3, #32
 80132a0:	b2da      	uxtb	r2, r3
 80132a2:	4b66      	ldr	r3, [pc, #408]	; (801343c <tcp_receive+0xcfc>)
 80132a4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	7d1b      	ldrb	r3, [r3, #20]
 80132aa:	2b04      	cmp	r3, #4
 80132ac:	d102      	bne.n	80132b4 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2207      	movs	r2, #7
 80132b2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	681a      	ldr	r2, [r3, #0]
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80132bc:	68b8      	ldr	r0, [r7, #8]
 80132be:	f7fd fbbe 	bl	8010a3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d008      	beq.n	80132dc <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80132ce:	691b      	ldr	r3, [r3, #16]
 80132d0:	685a      	ldr	r2, [r3, #4]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80132d6:	429a      	cmp	r2, r3
 80132d8:	f43f af43 	beq.w	8013162 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	8b5b      	ldrh	r3, [r3, #26]
 80132e0:	f003 0301 	and.w	r3, r3, #1
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d00e      	beq.n	8013306 <tcp_receive+0xbc6>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	8b5b      	ldrh	r3, [r3, #26]
 80132ec:	f023 0301 	bic.w	r3, r3, #1
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	835a      	strh	r2, [r3, #26]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	8b5b      	ldrh	r3, [r3, #26]
 80132fa:	f043 0302 	orr.w	r3, r3, #2
 80132fe:	b29a      	uxth	r2, r3
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013304:	e188      	b.n	8013618 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	8b5b      	ldrh	r3, [r3, #26]
 801330a:	f043 0301 	orr.w	r3, r3, #1
 801330e:	b29a      	uxth	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013314:	e180      	b.n	8013618 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801331a:	2b00      	cmp	r3, #0
 801331c:	d106      	bne.n	801332c <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801331e:	4848      	ldr	r0, [pc, #288]	; (8013440 <tcp_receive+0xd00>)
 8013320:	f7fd fba6 	bl	8010a70 <tcp_seg_copy>
 8013324:	4602      	mov	r2, r0
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	675a      	str	r2, [r3, #116]	; 0x74
 801332a:	e16d      	b.n	8013608 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801332c:	2300      	movs	r3, #0
 801332e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013334:	63bb      	str	r3, [r7, #56]	; 0x38
 8013336:	e157      	b.n	80135e8 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	685a      	ldr	r2, [r3, #4]
 801333e:	4b41      	ldr	r3, [pc, #260]	; (8013444 <tcp_receive+0xd04>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	429a      	cmp	r2, r3
 8013344:	d11d      	bne.n	8013382 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013346:	4b3e      	ldr	r3, [pc, #248]	; (8013440 <tcp_receive+0xd00>)
 8013348:	891a      	ldrh	r2, [r3, #8]
 801334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801334c:	891b      	ldrh	r3, [r3, #8]
 801334e:	429a      	cmp	r2, r3
 8013350:	f240 814f 	bls.w	80135f2 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013354:	483a      	ldr	r0, [pc, #232]	; (8013440 <tcp_receive+0xd00>)
 8013356:	f7fd fb8b 	bl	8010a70 <tcp_seg_copy>
 801335a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	2b00      	cmp	r3, #0
 8013360:	f000 8149 	beq.w	80135f6 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013366:	2b00      	cmp	r3, #0
 8013368:	d003      	beq.n	8013372 <tcp_receive+0xc32>
                    prev->next = cseg;
 801336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801336c:	697a      	ldr	r2, [r7, #20]
 801336e:	601a      	str	r2, [r3, #0]
 8013370:	e002      	b.n	8013378 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	697a      	ldr	r2, [r7, #20]
 8013376:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013378:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801337a:	6978      	ldr	r0, [r7, #20]
 801337c:	f7ff f8dc 	bl	8012538 <tcp_oos_insert_segment>
                }
                break;
 8013380:	e139      	b.n	80135f6 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013384:	2b00      	cmp	r3, #0
 8013386:	d117      	bne.n	80133b8 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013388:	4b2e      	ldr	r3, [pc, #184]	; (8013444 <tcp_receive+0xd04>)
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801338e:	691b      	ldr	r3, [r3, #16]
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	1ad3      	subs	r3, r2, r3
 8013394:	2b00      	cmp	r3, #0
 8013396:	da57      	bge.n	8013448 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013398:	4829      	ldr	r0, [pc, #164]	; (8013440 <tcp_receive+0xd00>)
 801339a:	f7fd fb69 	bl	8010a70 <tcp_seg_copy>
 801339e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f000 8129 	beq.w	80135fa <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	69ba      	ldr	r2, [r7, #24]
 80133ac:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80133ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80133b0:	69b8      	ldr	r0, [r7, #24]
 80133b2:	f7ff f8c1 	bl	8012538 <tcp_oos_insert_segment>
                  }
                  break;
 80133b6:	e120      	b.n	80135fa <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80133b8:	4b22      	ldr	r3, [pc, #136]	; (8013444 <tcp_receive+0xd04>)
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133be:	691b      	ldr	r3, [r3, #16]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	1ad3      	subs	r3, r2, r3
 80133c4:	3b01      	subs	r3, #1
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	db3e      	blt.n	8013448 <tcp_receive+0xd08>
 80133ca:	4b1e      	ldr	r3, [pc, #120]	; (8013444 <tcp_receive+0xd04>)
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d0:	691b      	ldr	r3, [r3, #16]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	3301      	adds	r3, #1
 80133d8:	2b00      	cmp	r3, #0
 80133da:	dc35      	bgt.n	8013448 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80133dc:	4818      	ldr	r0, [pc, #96]	; (8013440 <tcp_receive+0xd00>)
 80133de:	f7fd fb47 	bl	8010a70 <tcp_seg_copy>
 80133e2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	f000 8109 	beq.w	80135fe <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80133ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ee:	691b      	ldr	r3, [r3, #16]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133f4:	8912      	ldrh	r2, [r2, #8]
 80133f6:	441a      	add	r2, r3
 80133f8:	4b12      	ldr	r3, [pc, #72]	; (8013444 <tcp_receive+0xd04>)
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	2b00      	cmp	r3, #0
 8013400:	dd12      	ble.n	8013428 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013402:	4b10      	ldr	r3, [pc, #64]	; (8013444 <tcp_receive+0xd04>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	b29a      	uxth	r2, r3
 8013408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	685b      	ldr	r3, [r3, #4]
 801340e:	b29b      	uxth	r3, r3
 8013410:	1ad3      	subs	r3, r2, r3
 8013412:	b29a      	uxth	r2, r3
 8013414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013416:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801341a:	685a      	ldr	r2, [r3, #4]
 801341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801341e:	891b      	ldrh	r3, [r3, #8]
 8013420:	4619      	mov	r1, r3
 8013422:	4610      	mov	r0, r2
 8013424:	f7fb fe5a 	bl	800f0dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801342a:	69fa      	ldr	r2, [r7, #28]
 801342c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801342e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013430:	69f8      	ldr	r0, [r7, #28]
 8013432:	f7ff f881 	bl	8012538 <tcp_oos_insert_segment>
                  }
                  break;
 8013436:	e0e2      	b.n	80135fe <tcp_receive+0xebe>
 8013438:	20013dbc 	.word	0x20013dbc
 801343c:	20013db9 	.word	0x20013db9
 8013440:	20013d88 	.word	0x20013d88
 8013444:	20013dac 	.word	0x20013dac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	f040 80c6 	bne.w	80135e2 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013456:	4b80      	ldr	r3, [pc, #512]	; (8013658 <tcp_receive+0xf18>)
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801345c:	691b      	ldr	r3, [r3, #16]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013462:	2b00      	cmp	r3, #0
 8013464:	f340 80bd 	ble.w	80135e2 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801346a:	691b      	ldr	r3, [r3, #16]
 801346c:	899b      	ldrh	r3, [r3, #12]
 801346e:	b29b      	uxth	r3, r3
 8013470:	4618      	mov	r0, r3
 8013472:	f7fa fa97 	bl	800d9a4 <lwip_htons>
 8013476:	4603      	mov	r3, r0
 8013478:	b2db      	uxtb	r3, r3
 801347a:	f003 0301 	and.w	r3, r3, #1
 801347e:	2b00      	cmp	r3, #0
 8013480:	f040 80bf 	bne.w	8013602 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013484:	4875      	ldr	r0, [pc, #468]	; (801365c <tcp_receive+0xf1c>)
 8013486:	f7fd faf3 	bl	8010a70 <tcp_seg_copy>
 801348a:	4602      	mov	r2, r0
 801348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801348e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	2b00      	cmp	r3, #0
 8013496:	f000 80b6 	beq.w	8013606 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349c:	691b      	ldr	r3, [r3, #16]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134a2:	8912      	ldrh	r2, [r2, #8]
 80134a4:	441a      	add	r2, r3
 80134a6:	4b6c      	ldr	r3, [pc, #432]	; (8013658 <tcp_receive+0xf18>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	1ad3      	subs	r3, r2, r3
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	dd12      	ble.n	80134d6 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80134b0:	4b69      	ldr	r3, [pc, #420]	; (8013658 <tcp_receive+0xf18>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	b29a      	uxth	r2, r3
 80134b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134b8:	691b      	ldr	r3, [r3, #16]
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	b29b      	uxth	r3, r3
 80134be:	1ad3      	subs	r3, r2, r3
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80134c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134c8:	685a      	ldr	r2, [r3, #4]
 80134ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134cc:	891b      	ldrh	r3, [r3, #8]
 80134ce:	4619      	mov	r1, r3
 80134d0:	4610      	mov	r0, r2
 80134d2:	f7fb fe03 	bl	800f0dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80134d6:	4b62      	ldr	r3, [pc, #392]	; (8013660 <tcp_receive+0xf20>)
 80134d8:	881b      	ldrh	r3, [r3, #0]
 80134da:	461a      	mov	r2, r3
 80134dc:	4b5e      	ldr	r3, [pc, #376]	; (8013658 <tcp_receive+0xf18>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	441a      	add	r2, r3
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e6:	6879      	ldr	r1, [r7, #4]
 80134e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80134ea:	440b      	add	r3, r1
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f340 8089 	ble.w	8013606 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80134f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	691b      	ldr	r3, [r3, #16]
 80134fa:	899b      	ldrh	r3, [r3, #12]
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	4618      	mov	r0, r3
 8013500:	f7fa fa50 	bl	800d9a4 <lwip_htons>
 8013504:	4603      	mov	r3, r0
 8013506:	b2db      	uxtb	r3, r3
 8013508:	f003 0301 	and.w	r3, r3, #1
 801350c:	2b00      	cmp	r3, #0
 801350e:	d022      	beq.n	8013556 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	691b      	ldr	r3, [r3, #16]
 8013516:	899b      	ldrh	r3, [r3, #12]
 8013518:	b29b      	uxth	r3, r3
 801351a:	b21b      	sxth	r3, r3
 801351c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013520:	b21c      	sxth	r4, r3
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	691b      	ldr	r3, [r3, #16]
 8013528:	899b      	ldrh	r3, [r3, #12]
 801352a:	b29b      	uxth	r3, r3
 801352c:	4618      	mov	r0, r3
 801352e:	f7fa fa39 	bl	800d9a4 <lwip_htons>
 8013532:	4603      	mov	r3, r0
 8013534:	b2db      	uxtb	r3, r3
 8013536:	b29b      	uxth	r3, r3
 8013538:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801353c:	b29b      	uxth	r3, r3
 801353e:	4618      	mov	r0, r3
 8013540:	f7fa fa30 	bl	800d9a4 <lwip_htons>
 8013544:	4603      	mov	r3, r0
 8013546:	b21b      	sxth	r3, r3
 8013548:	4323      	orrs	r3, r4
 801354a:	b21a      	sxth	r2, r3
 801354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	b292      	uxth	r2, r2
 8013554:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801355a:	b29a      	uxth	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013560:	4413      	add	r3, r2
 8013562:	b299      	uxth	r1, r3
 8013564:	4b3c      	ldr	r3, [pc, #240]	; (8013658 <tcp_receive+0xf18>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	b29a      	uxth	r2, r3
 801356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	1a8a      	subs	r2, r1, r2
 8013570:	b292      	uxth	r2, r2
 8013572:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	685a      	ldr	r2, [r3, #4]
 801357a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	891b      	ldrh	r3, [r3, #8]
 8013580:	4619      	mov	r1, r3
 8013582:	4610      	mov	r0, r2
 8013584:	f7fb fdaa 	bl	800f0dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	891c      	ldrh	r4, [r3, #8]
 801358e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	691b      	ldr	r3, [r3, #16]
 8013594:	899b      	ldrh	r3, [r3, #12]
 8013596:	b29b      	uxth	r3, r3
 8013598:	4618      	mov	r0, r3
 801359a:	f7fa fa03 	bl	800d9a4 <lwip_htons>
 801359e:	4603      	mov	r3, r0
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	f003 0303 	and.w	r3, r3, #3
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d001      	beq.n	80135ae <tcp_receive+0xe6e>
 80135aa:	2301      	movs	r3, #1
 80135ac:	e000      	b.n	80135b0 <tcp_receive+0xe70>
 80135ae:	2300      	movs	r3, #0
 80135b0:	4423      	add	r3, r4
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	4b2a      	ldr	r3, [pc, #168]	; (8013660 <tcp_receive+0xf20>)
 80135b6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80135b8:	4b29      	ldr	r3, [pc, #164]	; (8013660 <tcp_receive+0xf20>)
 80135ba:	881b      	ldrh	r3, [r3, #0]
 80135bc:	461a      	mov	r2, r3
 80135be:	4b26      	ldr	r3, [pc, #152]	; (8013658 <tcp_receive+0xf18>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	441a      	add	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135c8:	6879      	ldr	r1, [r7, #4]
 80135ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80135cc:	440b      	add	r3, r1
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d019      	beq.n	8013606 <tcp_receive+0xec6>
 80135d2:	4b24      	ldr	r3, [pc, #144]	; (8013664 <tcp_receive+0xf24>)
 80135d4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80135d8:	4923      	ldr	r1, [pc, #140]	; (8013668 <tcp_receive+0xf28>)
 80135da:	4824      	ldr	r0, [pc, #144]	; (801366c <tcp_receive+0xf2c>)
 80135dc:	f007 fd5a 	bl	801b094 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80135e0:	e011      	b.n	8013606 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80135e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80135e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	f47f aea4 	bne.w	8013338 <tcp_receive+0xbf8>
 80135f0:	e00a      	b.n	8013608 <tcp_receive+0xec8>
                break;
 80135f2:	bf00      	nop
 80135f4:	e008      	b.n	8013608 <tcp_receive+0xec8>
                break;
 80135f6:	bf00      	nop
 80135f8:	e006      	b.n	8013608 <tcp_receive+0xec8>
                  break;
 80135fa:	bf00      	nop
 80135fc:	e004      	b.n	8013608 <tcp_receive+0xec8>
                  break;
 80135fe:	bf00      	nop
 8013600:	e002      	b.n	8013608 <tcp_receive+0xec8>
                  break;
 8013602:	bf00      	nop
 8013604:	e000      	b.n	8013608 <tcp_receive+0xec8>
                break;
 8013606:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f001 fa67 	bl	8014adc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801360e:	e003      	b.n	8013618 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f001 fa63 	bl	8014adc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013616:	e01a      	b.n	801364e <tcp_receive+0xf0e>
 8013618:	e019      	b.n	801364e <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801361a:	4b0f      	ldr	r3, [pc, #60]	; (8013658 <tcp_receive+0xf18>)
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013622:	1ad3      	subs	r3, r2, r3
 8013624:	2b00      	cmp	r3, #0
 8013626:	db0a      	blt.n	801363e <tcp_receive+0xefe>
 8013628:	4b0b      	ldr	r3, [pc, #44]	; (8013658 <tcp_receive+0xf18>)
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	6879      	ldr	r1, [r7, #4]
 8013632:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013634:	440b      	add	r3, r1
 8013636:	1ad3      	subs	r3, r2, r3
 8013638:	3301      	adds	r3, #1
 801363a:	2b00      	cmp	r3, #0
 801363c:	dd07      	ble.n	801364e <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	8b5b      	ldrh	r3, [r3, #26]
 8013642:	f043 0302 	orr.w	r3, r3, #2
 8013646:	b29a      	uxth	r2, r3
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801364c:	e7ff      	b.n	801364e <tcp_receive+0xf0e>
 801364e:	bf00      	nop
 8013650:	3750      	adds	r7, #80	; 0x50
 8013652:	46bd      	mov	sp, r7
 8013654:	bdb0      	pop	{r4, r5, r7, pc}
 8013656:	bf00      	nop
 8013658:	20013dac 	.word	0x20013dac
 801365c:	20013d88 	.word	0x20013d88
 8013660:	20013db6 	.word	0x20013db6
 8013664:	0801ee64 	.word	0x0801ee64
 8013668:	0801f20c 	.word	0x0801f20c
 801366c:	0801eeb0 	.word	0x0801eeb0

08013670 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013670:	b480      	push	{r7}
 8013672:	b083      	sub	sp, #12
 8013674:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013676:	4b15      	ldr	r3, [pc, #84]	; (80136cc <tcp_get_next_optbyte+0x5c>)
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	1c5a      	adds	r2, r3, #1
 801367c:	b291      	uxth	r1, r2
 801367e:	4a13      	ldr	r2, [pc, #76]	; (80136cc <tcp_get_next_optbyte+0x5c>)
 8013680:	8011      	strh	r1, [r2, #0]
 8013682:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013684:	4b12      	ldr	r3, [pc, #72]	; (80136d0 <tcp_get_next_optbyte+0x60>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d004      	beq.n	8013696 <tcp_get_next_optbyte+0x26>
 801368c:	4b11      	ldr	r3, [pc, #68]	; (80136d4 <tcp_get_next_optbyte+0x64>)
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	88fa      	ldrh	r2, [r7, #6]
 8013692:	429a      	cmp	r2, r3
 8013694:	d208      	bcs.n	80136a8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013696:	4b10      	ldr	r3, [pc, #64]	; (80136d8 <tcp_get_next_optbyte+0x68>)
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	3314      	adds	r3, #20
 801369c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801369e:	88fb      	ldrh	r3, [r7, #6]
 80136a0:	683a      	ldr	r2, [r7, #0]
 80136a2:	4413      	add	r3, r2
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	e00b      	b.n	80136c0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80136a8:	88fb      	ldrh	r3, [r7, #6]
 80136aa:	b2da      	uxtb	r2, r3
 80136ac:	4b09      	ldr	r3, [pc, #36]	; (80136d4 <tcp_get_next_optbyte+0x64>)
 80136ae:	881b      	ldrh	r3, [r3, #0]
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	1ad3      	subs	r3, r2, r3
 80136b4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80136b6:	4b06      	ldr	r3, [pc, #24]	; (80136d0 <tcp_get_next_optbyte+0x60>)
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	797b      	ldrb	r3, [r7, #5]
 80136bc:	4413      	add	r3, r2
 80136be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	370c      	adds	r7, #12
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr
 80136cc:	20013da8 	.word	0x20013da8
 80136d0:	20013da4 	.word	0x20013da4
 80136d4:	20013da2 	.word	0x20013da2
 80136d8:	20013d9c 	.word	0x20013d9c

080136dc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d106      	bne.n	80136f8 <tcp_parseopt+0x1c>
 80136ea:	4b32      	ldr	r3, [pc, #200]	; (80137b4 <tcp_parseopt+0xd8>)
 80136ec:	f240 727d 	movw	r2, #1917	; 0x77d
 80136f0:	4931      	ldr	r1, [pc, #196]	; (80137b8 <tcp_parseopt+0xdc>)
 80136f2:	4832      	ldr	r0, [pc, #200]	; (80137bc <tcp_parseopt+0xe0>)
 80136f4:	f007 fcce 	bl	801b094 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80136f8:	4b31      	ldr	r3, [pc, #196]	; (80137c0 <tcp_parseopt+0xe4>)
 80136fa:	881b      	ldrh	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d056      	beq.n	80137ae <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013700:	4b30      	ldr	r3, [pc, #192]	; (80137c4 <tcp_parseopt+0xe8>)
 8013702:	2200      	movs	r2, #0
 8013704:	801a      	strh	r2, [r3, #0]
 8013706:	e046      	b.n	8013796 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8013708:	f7ff ffb2 	bl	8013670 <tcp_get_next_optbyte>
 801370c:	4603      	mov	r3, r0
 801370e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	2b02      	cmp	r3, #2
 8013714:	d006      	beq.n	8013724 <tcp_parseopt+0x48>
 8013716:	2b02      	cmp	r3, #2
 8013718:	dc2c      	bgt.n	8013774 <tcp_parseopt+0x98>
 801371a:	2b00      	cmp	r3, #0
 801371c:	d042      	beq.n	80137a4 <tcp_parseopt+0xc8>
 801371e:	2b01      	cmp	r3, #1
 8013720:	d128      	bne.n	8013774 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013722:	e038      	b.n	8013796 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013724:	f7ff ffa4 	bl	8013670 <tcp_get_next_optbyte>
 8013728:	4603      	mov	r3, r0
 801372a:	2b04      	cmp	r3, #4
 801372c:	d13c      	bne.n	80137a8 <tcp_parseopt+0xcc>
 801372e:	4b25      	ldr	r3, [pc, #148]	; (80137c4 <tcp_parseopt+0xe8>)
 8013730:	881b      	ldrh	r3, [r3, #0]
 8013732:	3301      	adds	r3, #1
 8013734:	4a22      	ldr	r2, [pc, #136]	; (80137c0 <tcp_parseopt+0xe4>)
 8013736:	8812      	ldrh	r2, [r2, #0]
 8013738:	4293      	cmp	r3, r2
 801373a:	da35      	bge.n	80137a8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801373c:	f7ff ff98 	bl	8013670 <tcp_get_next_optbyte>
 8013740:	4603      	mov	r3, r0
 8013742:	b29b      	uxth	r3, r3
 8013744:	021b      	lsls	r3, r3, #8
 8013746:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013748:	f7ff ff92 	bl	8013670 <tcp_get_next_optbyte>
 801374c:	4603      	mov	r3, r0
 801374e:	b29a      	uxth	r2, r3
 8013750:	89bb      	ldrh	r3, [r7, #12]
 8013752:	4313      	orrs	r3, r2
 8013754:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013756:	89bb      	ldrh	r3, [r7, #12]
 8013758:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801375c:	4293      	cmp	r3, r2
 801375e:	d804      	bhi.n	801376a <tcp_parseopt+0x8e>
 8013760:	89bb      	ldrh	r3, [r7, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d001      	beq.n	801376a <tcp_parseopt+0x8e>
 8013766:	89ba      	ldrh	r2, [r7, #12]
 8013768:	e001      	b.n	801376e <tcp_parseopt+0x92>
 801376a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013772:	e010      	b.n	8013796 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013774:	f7ff ff7c 	bl	8013670 <tcp_get_next_optbyte>
 8013778:	4603      	mov	r3, r0
 801377a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801377c:	7afb      	ldrb	r3, [r7, #11]
 801377e:	2b01      	cmp	r3, #1
 8013780:	d914      	bls.n	80137ac <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013782:	7afb      	ldrb	r3, [r7, #11]
 8013784:	b29a      	uxth	r2, r3
 8013786:	4b0f      	ldr	r3, [pc, #60]	; (80137c4 <tcp_parseopt+0xe8>)
 8013788:	881b      	ldrh	r3, [r3, #0]
 801378a:	4413      	add	r3, r2
 801378c:	b29b      	uxth	r3, r3
 801378e:	3b02      	subs	r3, #2
 8013790:	b29a      	uxth	r2, r3
 8013792:	4b0c      	ldr	r3, [pc, #48]	; (80137c4 <tcp_parseopt+0xe8>)
 8013794:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013796:	4b0b      	ldr	r3, [pc, #44]	; (80137c4 <tcp_parseopt+0xe8>)
 8013798:	881a      	ldrh	r2, [r3, #0]
 801379a:	4b09      	ldr	r3, [pc, #36]	; (80137c0 <tcp_parseopt+0xe4>)
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d3b2      	bcc.n	8013708 <tcp_parseopt+0x2c>
 80137a2:	e004      	b.n	80137ae <tcp_parseopt+0xd2>
          return;
 80137a4:	bf00      	nop
 80137a6:	e002      	b.n	80137ae <tcp_parseopt+0xd2>
            return;
 80137a8:	bf00      	nop
 80137aa:	e000      	b.n	80137ae <tcp_parseopt+0xd2>
            return;
 80137ac:	bf00      	nop
      }
    }
  }
}
 80137ae:	3710      	adds	r7, #16
 80137b0:	46bd      	mov	sp, r7
 80137b2:	bd80      	pop	{r7, pc}
 80137b4:	0801ee64 	.word	0x0801ee64
 80137b8:	0801f2c8 	.word	0x0801f2c8
 80137bc:	0801eeb0 	.word	0x0801eeb0
 80137c0:	20013da0 	.word	0x20013da0
 80137c4:	20013da8 	.word	0x20013da8

080137c8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80137c8:	b480      	push	{r7}
 80137ca:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80137cc:	4b05      	ldr	r3, [pc, #20]	; (80137e4 <tcp_trigger_input_pcb_close+0x1c>)
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	f043 0310 	orr.w	r3, r3, #16
 80137d4:	b2da      	uxtb	r2, r3
 80137d6:	4b03      	ldr	r3, [pc, #12]	; (80137e4 <tcp_trigger_input_pcb_close+0x1c>)
 80137d8:	701a      	strb	r2, [r3, #0]
}
 80137da:	bf00      	nop
 80137dc:	46bd      	mov	sp, r7
 80137de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e2:	4770      	bx	lr
 80137e4:	20013db9 	.word	0x20013db9

080137e8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00a      	beq.n	8013810 <tcp_route+0x28>
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	7a1b      	ldrb	r3, [r3, #8]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d006      	beq.n	8013810 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	7a1b      	ldrb	r3, [r3, #8]
 8013806:	4618      	mov	r0, r3
 8013808:	f7fb fa5c 	bl	800ecc4 <netif_get_by_index>
 801380c:	4603      	mov	r3, r0
 801380e:	e003      	b.n	8013818 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f005 f9e9 	bl	8018be8 <ip4_route>
 8013816:	4603      	mov	r3, r0
  }
}
 8013818:	4618      	mov	r0, r3
 801381a:	3710      	adds	r7, #16
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013820:	b590      	push	{r4, r7, lr}
 8013822:	b087      	sub	sp, #28
 8013824:	af00      	add	r7, sp, #0
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	603b      	str	r3, [r7, #0]
 801382c:	4613      	mov	r3, r2
 801382e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d105      	bne.n	8013842 <tcp_create_segment+0x22>
 8013836:	4b45      	ldr	r3, [pc, #276]	; (801394c <tcp_create_segment+0x12c>)
 8013838:	22a3      	movs	r2, #163	; 0xa3
 801383a:	4945      	ldr	r1, [pc, #276]	; (8013950 <tcp_create_segment+0x130>)
 801383c:	4845      	ldr	r0, [pc, #276]	; (8013954 <tcp_create_segment+0x134>)
 801383e:	f007 fc29 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d105      	bne.n	8013854 <tcp_create_segment+0x34>
 8013848:	4b40      	ldr	r3, [pc, #256]	; (801394c <tcp_create_segment+0x12c>)
 801384a:	22a4      	movs	r2, #164	; 0xa4
 801384c:	4942      	ldr	r1, [pc, #264]	; (8013958 <tcp_create_segment+0x138>)
 801384e:	4841      	ldr	r0, [pc, #260]	; (8013954 <tcp_create_segment+0x134>)
 8013850:	f007 fc20 	bl	801b094 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013858:	009b      	lsls	r3, r3, #2
 801385a:	b2db      	uxtb	r3, r3
 801385c:	f003 0304 	and.w	r3, r3, #4
 8013860:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013862:	2003      	movs	r0, #3
 8013864:	f7fa fecc 	bl	800e600 <memp_malloc>
 8013868:	6138      	str	r0, [r7, #16]
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d104      	bne.n	801387a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013870:	68b8      	ldr	r0, [r7, #8]
 8013872:	f7fb fdb9 	bl	800f3e8 <pbuf_free>
    return NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	e064      	b.n	8013944 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013880:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8013882:	693b      	ldr	r3, [r7, #16]
 8013884:	2200      	movs	r2, #0
 8013886:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013888:	693b      	ldr	r3, [r7, #16]
 801388a:	68ba      	ldr	r2, [r7, #8]
 801388c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	891a      	ldrh	r2, [r3, #8]
 8013892:	7dfb      	ldrb	r3, [r7, #23]
 8013894:	b29b      	uxth	r3, r3
 8013896:	429a      	cmp	r2, r3
 8013898:	d205      	bcs.n	80138a6 <tcp_create_segment+0x86>
 801389a:	4b2c      	ldr	r3, [pc, #176]	; (801394c <tcp_create_segment+0x12c>)
 801389c:	22b0      	movs	r2, #176	; 0xb0
 801389e:	492f      	ldr	r1, [pc, #188]	; (801395c <tcp_create_segment+0x13c>)
 80138a0:	482c      	ldr	r0, [pc, #176]	; (8013954 <tcp_create_segment+0x134>)
 80138a2:	f007 fbf7 	bl	801b094 <iprintf>
  seg->len = p->tot_len - optlen;
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	891a      	ldrh	r2, [r3, #8]
 80138aa:	7dfb      	ldrb	r3, [r7, #23]
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	1ad3      	subs	r3, r2, r3
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	2200      	movs	r2, #0
 80138ba:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80138bc:	2114      	movs	r1, #20
 80138be:	68b8      	ldr	r0, [r7, #8]
 80138c0:	f7fb fcfc 	bl	800f2bc <pbuf_add_header>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d004      	beq.n	80138d4 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80138ca:	6938      	ldr	r0, [r7, #16]
 80138cc:	f7fd f8b7 	bl	8010a3e <tcp_seg_free>
    return NULL;
 80138d0:	2300      	movs	r3, #0
 80138d2:	e037      	b.n	8013944 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	685a      	ldr	r2, [r3, #4]
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	8ada      	ldrh	r2, [r3, #22]
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	691c      	ldr	r4, [r3, #16]
 80138e6:	4610      	mov	r0, r2
 80138e8:	f7fa f85c 	bl	800d9a4 <lwip_htons>
 80138ec:	4603      	mov	r3, r0
 80138ee:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	8b1a      	ldrh	r2, [r3, #24]
 80138f4:	693b      	ldr	r3, [r7, #16]
 80138f6:	691c      	ldr	r4, [r3, #16]
 80138f8:	4610      	mov	r0, r2
 80138fa:	f7fa f853 	bl	800d9a4 <lwip_htons>
 80138fe:	4603      	mov	r3, r0
 8013900:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	691c      	ldr	r4, [r3, #16]
 8013906:	6838      	ldr	r0, [r7, #0]
 8013908:	f7fa f861 	bl	800d9ce <lwip_htonl>
 801390c:	4603      	mov	r3, r0
 801390e:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013910:	7dfb      	ldrb	r3, [r7, #23]
 8013912:	089b      	lsrs	r3, r3, #2
 8013914:	b2db      	uxtb	r3, r3
 8013916:	b29b      	uxth	r3, r3
 8013918:	3305      	adds	r3, #5
 801391a:	b29b      	uxth	r3, r3
 801391c:	031b      	lsls	r3, r3, #12
 801391e:	b29a      	uxth	r2, r3
 8013920:	79fb      	ldrb	r3, [r7, #7]
 8013922:	b29b      	uxth	r3, r3
 8013924:	4313      	orrs	r3, r2
 8013926:	b29a      	uxth	r2, r3
 8013928:	693b      	ldr	r3, [r7, #16]
 801392a:	691c      	ldr	r4, [r3, #16]
 801392c:	4610      	mov	r0, r2
 801392e:	f7fa f839 	bl	800d9a4 <lwip_htons>
 8013932:	4603      	mov	r3, r0
 8013934:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	691b      	ldr	r3, [r3, #16]
 801393a:	2200      	movs	r2, #0
 801393c:	749a      	strb	r2, [r3, #18]
 801393e:	2200      	movs	r2, #0
 8013940:	74da      	strb	r2, [r3, #19]
  return seg;
 8013942:	693b      	ldr	r3, [r7, #16]
}
 8013944:	4618      	mov	r0, r3
 8013946:	371c      	adds	r7, #28
 8013948:	46bd      	mov	sp, r7
 801394a:	bd90      	pop	{r4, r7, pc}
 801394c:	0801f2e4 	.word	0x0801f2e4
 8013950:	0801f318 	.word	0x0801f318
 8013954:	0801f338 	.word	0x0801f338
 8013958:	0801f360 	.word	0x0801f360
 801395c:	0801f384 	.word	0x0801f384

08013960 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b08b      	sub	sp, #44	; 0x2c
 8013964:	af02      	add	r7, sp, #8
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	460b      	mov	r3, r1
 801396a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801396c:	2300      	movs	r3, #0
 801396e:	61bb      	str	r3, [r7, #24]
 8013970:	2300      	movs	r3, #0
 8013972:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013974:	2300      	movs	r3, #0
 8013976:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <tcp_split_unsent_seg+0x2c>
 801397e:	4b97      	ldr	r3, [pc, #604]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 8013980:	f240 324b 	movw	r2, #843	; 0x34b
 8013984:	4996      	ldr	r1, [pc, #600]	; (8013be0 <tcp_split_unsent_seg+0x280>)
 8013986:	4897      	ldr	r0, [pc, #604]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 8013988:	f007 fb84 	bl	801b094 <iprintf>

  useg = pcb->unsent;
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013990:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d102      	bne.n	801399e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013998:	f04f 33ff 	mov.w	r3, #4294967295
 801399c:	e119      	b.n	8013bd2 <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 801399e:	887b      	ldrh	r3, [r7, #2]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d109      	bne.n	80139b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80139a4:	4b8d      	ldr	r3, [pc, #564]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139a6:	f240 3253 	movw	r2, #851	; 0x353
 80139aa:	498f      	ldr	r1, [pc, #572]	; (8013be8 <tcp_split_unsent_seg+0x288>)
 80139ac:	488d      	ldr	r0, [pc, #564]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 80139ae:	f007 fb71 	bl	801b094 <iprintf>
    return ERR_VAL;
 80139b2:	f06f 0305 	mvn.w	r3, #5
 80139b6:	e10c      	b.n	8013bd2 <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	891b      	ldrh	r3, [r3, #8]
 80139bc:	887a      	ldrh	r2, [r7, #2]
 80139be:	429a      	cmp	r2, r3
 80139c0:	d301      	bcc.n	80139c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80139c2:	2300      	movs	r3, #0
 80139c4:	e105      	b.n	8013bd2 <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139ca:	887a      	ldrh	r2, [r7, #2]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d906      	bls.n	80139de <tcp_split_unsent_seg+0x7e>
 80139d0:	4b82      	ldr	r3, [pc, #520]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139d2:	f240 325b 	movw	r2, #859	; 0x35b
 80139d6:	4985      	ldr	r1, [pc, #532]	; (8013bec <tcp_split_unsent_seg+0x28c>)
 80139d8:	4882      	ldr	r0, [pc, #520]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 80139da:	f007 fb5b 	bl	801b094 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	891b      	ldrh	r3, [r3, #8]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d106      	bne.n	80139f4 <tcp_split_unsent_seg+0x94>
 80139e6:	4b7d      	ldr	r3, [pc, #500]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 80139e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80139ec:	4980      	ldr	r1, [pc, #512]	; (8013bf0 <tcp_split_unsent_seg+0x290>)
 80139ee:	487d      	ldr	r0, [pc, #500]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 80139f0:	f007 fb50 	bl	801b094 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80139f4:	697b      	ldr	r3, [r7, #20]
 80139f6:	7b1b      	ldrb	r3, [r3, #12]
 80139f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80139fa:	7bfb      	ldrb	r3, [r7, #15]
 80139fc:	009b      	lsls	r3, r3, #2
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	f003 0304 	and.w	r3, r3, #4
 8013a04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013a06:	697b      	ldr	r3, [r7, #20]
 8013a08:	891a      	ldrh	r2, [r3, #8]
 8013a0a:	887b      	ldrh	r3, [r7, #2]
 8013a0c:	1ad3      	subs	r3, r2, r3
 8013a0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013a10:	7bbb      	ldrb	r3, [r7, #14]
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	89bb      	ldrh	r3, [r7, #12]
 8013a16:	4413      	add	r3, r2
 8013a18:	b29b      	uxth	r3, r3
 8013a1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a1e:	4619      	mov	r1, r3
 8013a20:	2036      	movs	r0, #54	; 0x36
 8013a22:	f7fb f9f9 	bl	800ee18 <pbuf_alloc>
 8013a26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	f000 80ba 	beq.w	8013ba4 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	891a      	ldrh	r2, [r3, #8]
 8013a36:	697b      	ldr	r3, [r7, #20]
 8013a38:	891b      	ldrh	r3, [r3, #8]
 8013a3a:	1ad3      	subs	r3, r2, r3
 8013a3c:	b29a      	uxth	r2, r3
 8013a3e:	887b      	ldrh	r3, [r7, #2]
 8013a40:	4413      	add	r3, r2
 8013a42:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	6858      	ldr	r0, [r3, #4]
 8013a48:	693b      	ldr	r3, [r7, #16]
 8013a4a:	685a      	ldr	r2, [r3, #4]
 8013a4c:	7bbb      	ldrb	r3, [r7, #14]
 8013a4e:	18d1      	adds	r1, r2, r3
 8013a50:	897b      	ldrh	r3, [r7, #10]
 8013a52:	89ba      	ldrh	r2, [r7, #12]
 8013a54:	f7fb fece 	bl	800f7f4 <pbuf_copy_partial>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	89bb      	ldrh	r3, [r7, #12]
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	f040 80a2 	bne.w	8013ba8 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	691b      	ldr	r3, [r3, #16]
 8013a68:	899b      	ldrh	r3, [r3, #12]
 8013a6a:	b29b      	uxth	r3, r3
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f9 ff99 	bl	800d9a4 <lwip_htons>
 8013a72:	4603      	mov	r3, r0
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013a7a:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 8013a80:	7ffb      	ldrb	r3, [r7, #31]
 8013a82:	f003 0308 	and.w	r3, r3, #8
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d007      	beq.n	8013a9a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013a8a:	7ffb      	ldrb	r3, [r7, #31]
 8013a8c:	f023 0308 	bic.w	r3, r3, #8
 8013a90:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 8013a92:	7fbb      	ldrb	r3, [r7, #30]
 8013a94:	f043 0308 	orr.w	r3, r3, #8
 8013a98:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 8013a9a:	7ffb      	ldrb	r3, [r7, #31]
 8013a9c:	f003 0301 	and.w	r3, r3, #1
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d007      	beq.n	8013ab4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013aa4:	7ffb      	ldrb	r3, [r7, #31]
 8013aa6:	f023 0301 	bic.w	r3, r3, #1
 8013aaa:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 8013aac:	7fbb      	ldrb	r3, [r7, #30]
 8013aae:	f043 0301 	orr.w	r3, r3, #1
 8013ab2:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	691b      	ldr	r3, [r3, #16]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	4618      	mov	r0, r3
 8013abc:	f7f9 ff87 	bl	800d9ce <lwip_htonl>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	887b      	ldrh	r3, [r7, #2]
 8013ac4:	18d1      	adds	r1, r2, r3
 8013ac6:	7fba      	ldrb	r2, [r7, #30]
 8013ac8:	7bfb      	ldrb	r3, [r7, #15]
 8013aca:	9300      	str	r3, [sp, #0]
 8013acc:	460b      	mov	r3, r1
 8013ace:	6939      	ldr	r1, [r7, #16]
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7ff fea5 	bl	8013820 <tcp_create_segment>
 8013ad6:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d066      	beq.n	8013bac <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fb fd0e 	bl	800f504 <pbuf_clen>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	461a      	mov	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013af2:	1a9b      	subs	r3, r3, r2
 8013af4:	b29a      	uxth	r2, r3
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	6858      	ldr	r0, [r3, #4]
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	891a      	ldrh	r2, [r3, #8]
 8013b06:	89bb      	ldrh	r3, [r7, #12]
 8013b08:	1ad3      	subs	r3, r2, r3
 8013b0a:	b29b      	uxth	r3, r3
 8013b0c:	4619      	mov	r1, r3
 8013b0e:	f7fb fae5 	bl	800f0dc <pbuf_realloc>
  useg->len -= remainder;
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	891a      	ldrh	r2, [r3, #8]
 8013b16:	89bb      	ldrh	r3, [r7, #12]
 8013b18:	1ad3      	subs	r3, r2, r3
 8013b1a:	b29a      	uxth	r2, r3
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	691b      	ldr	r3, [r3, #16]
 8013b24:	899b      	ldrh	r3, [r3, #12]
 8013b26:	b29c      	uxth	r4, r3
 8013b28:	7ffb      	ldrb	r3, [r7, #31]
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f9 ff39 	bl	800d9a4 <lwip_htons>
 8013b32:	4603      	mov	r3, r0
 8013b34:	461a      	mov	r2, r3
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	691b      	ldr	r3, [r3, #16]
 8013b3a:	4322      	orrs	r2, r4
 8013b3c:	b292      	uxth	r2, r2
 8013b3e:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2200      	movs	r2, #0
 8013b44:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fb fcda 	bl	800f504 <pbuf_clen>
 8013b50:	4603      	mov	r3, r0
 8013b52:	461a      	mov	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b5a:	4413      	add	r3, r2
 8013b5c:	b29a      	uxth	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	685b      	ldr	r3, [r3, #4]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fb fccb 	bl	800f504 <pbuf_clen>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	461a      	mov	r2, r3
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b78:	4413      	add	r3, r2
 8013b7a:	b29a      	uxth	r2, r3
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	681a      	ldr	r2, [r3, #0]
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	69ba      	ldr	r2, [r7, #24]
 8013b8e:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d103      	bne.n	8013ba0 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	e016      	b.n	8013bd2 <tcp_split_unsent_seg+0x272>
    goto memerr;
 8013ba4:	bf00      	nop
 8013ba6:	e002      	b.n	8013bae <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013ba8:	bf00      	nop
 8013baa:	e000      	b.n	8013bae <tcp_split_unsent_seg+0x24e>
    goto memerr;
 8013bac:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013bae:	69bb      	ldr	r3, [r7, #24]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d006      	beq.n	8013bc2 <tcp_split_unsent_seg+0x262>
 8013bb4:	4b09      	ldr	r3, [pc, #36]	; (8013bdc <tcp_split_unsent_seg+0x27c>)
 8013bb6:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013bba:	490e      	ldr	r1, [pc, #56]	; (8013bf4 <tcp_split_unsent_seg+0x294>)
 8013bbc:	4809      	ldr	r0, [pc, #36]	; (8013be4 <tcp_split_unsent_seg+0x284>)
 8013bbe:	f007 fa69 	bl	801b094 <iprintf>
  if (p != NULL) {
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d002      	beq.n	8013bce <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 8013bc8:	6938      	ldr	r0, [r7, #16]
 8013bca:	f7fb fc0d 	bl	800f3e8 <pbuf_free>
  }

  return ERR_MEM;
 8013bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3724      	adds	r7, #36	; 0x24
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd90      	pop	{r4, r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	0801f2e4 	.word	0x0801f2e4
 8013be0:	0801f6d4 	.word	0x0801f6d4
 8013be4:	0801f338 	.word	0x0801f338
 8013be8:	0801f6f8 	.word	0x0801f6f8
 8013bec:	0801f71c 	.word	0x0801f71c
 8013bf0:	0801f72c 	.word	0x0801f72c
 8013bf4:	0801f73c 	.word	0x0801f73c

08013bf8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013bf8:	b590      	push	{r4, r7, lr}
 8013bfa:	b085      	sub	sp, #20
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d106      	bne.n	8013c14 <tcp_send_fin+0x1c>
 8013c06:	4b21      	ldr	r3, [pc, #132]	; (8013c8c <tcp_send_fin+0x94>)
 8013c08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013c0c:	4920      	ldr	r1, [pc, #128]	; (8013c90 <tcp_send_fin+0x98>)
 8013c0e:	4821      	ldr	r0, [pc, #132]	; (8013c94 <tcp_send_fin+0x9c>)
 8013c10:	f007 fa40 	bl	801b094 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d02e      	beq.n	8013c7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c20:	60fb      	str	r3, [r7, #12]
 8013c22:	e002      	b.n	8013c2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1f8      	bne.n	8013c24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	691b      	ldr	r3, [r3, #16]
 8013c36:	899b      	ldrh	r3, [r3, #12]
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7f9 feb2 	bl	800d9a4 <lwip_htons>
 8013c40:	4603      	mov	r3, r0
 8013c42:	b2db      	uxtb	r3, r3
 8013c44:	f003 0307 	and.w	r3, r3, #7
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d116      	bne.n	8013c7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	691b      	ldr	r3, [r3, #16]
 8013c50:	899b      	ldrh	r3, [r3, #12]
 8013c52:	b29c      	uxth	r4, r3
 8013c54:	2001      	movs	r0, #1
 8013c56:	f7f9 fea5 	bl	800d9a4 <lwip_htons>
 8013c5a:	4603      	mov	r3, r0
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	691b      	ldr	r3, [r3, #16]
 8013c62:	4322      	orrs	r2, r4
 8013c64:	b292      	uxth	r2, r2
 8013c66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	8b5b      	ldrh	r3, [r3, #26]
 8013c6c:	f043 0320 	orr.w	r3, r3, #32
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013c76:	2300      	movs	r3, #0
 8013c78:	e004      	b.n	8013c84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013c7a:	2101      	movs	r1, #1
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f000 f80b 	bl	8013c98 <tcp_enqueue_flags>
 8013c82:	4603      	mov	r3, r0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3714      	adds	r7, #20
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd90      	pop	{r4, r7, pc}
 8013c8c:	0801f2e4 	.word	0x0801f2e4
 8013c90:	0801f748 	.word	0x0801f748
 8013c94:	0801f338 	.word	0x0801f338

08013c98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b088      	sub	sp, #32
 8013c9c:	af02      	add	r7, sp, #8
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	460b      	mov	r3, r1
 8013ca2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013cac:	78fb      	ldrb	r3, [r7, #3]
 8013cae:	f003 0303 	and.w	r3, r3, #3
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d106      	bne.n	8013cc4 <tcp_enqueue_flags+0x2c>
 8013cb6:	4b67      	ldr	r3, [pc, #412]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013cb8:	f240 4211 	movw	r2, #1041	; 0x411
 8013cbc:	4966      	ldr	r1, [pc, #408]	; (8013e58 <tcp_enqueue_flags+0x1c0>)
 8013cbe:	4867      	ldr	r0, [pc, #412]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013cc0:	f007 f9e8 	bl	801b094 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d106      	bne.n	8013cd8 <tcp_enqueue_flags+0x40>
 8013cca:	4b62      	ldr	r3, [pc, #392]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013ccc:	f240 4213 	movw	r2, #1043	; 0x413
 8013cd0:	4963      	ldr	r1, [pc, #396]	; (8013e60 <tcp_enqueue_flags+0x1c8>)
 8013cd2:	4862      	ldr	r0, [pc, #392]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013cd4:	f007 f9de 	bl	801b094 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013cd8:	78fb      	ldrb	r3, [r7, #3]
 8013cda:	f003 0302 	and.w	r3, r3, #2
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d001      	beq.n	8013ce6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ce6:	7dfb      	ldrb	r3, [r7, #23]
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	b2db      	uxtb	r3, r3
 8013cec:	f003 0304 	and.w	r3, r3, #4
 8013cf0:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013cf2:	7dbb      	ldrb	r3, [r7, #22]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	2036      	movs	r0, #54	; 0x36
 8013cfe:	f7fb f88b 	bl	800ee18 <pbuf_alloc>
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d109      	bne.n	8013d1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	8b5b      	ldrh	r3, [r3, #26]
 8013d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d18:	f04f 33ff 	mov.w	r3, #4294967295
 8013d1c:	e095      	b.n	8013e4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	895a      	ldrh	r2, [r3, #10]
 8013d22:	7dbb      	ldrb	r3, [r7, #22]
 8013d24:	b29b      	uxth	r3, r3
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d206      	bcs.n	8013d38 <tcp_enqueue_flags+0xa0>
 8013d2a:	4b4a      	ldr	r3, [pc, #296]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013d2c:	f240 4239 	movw	r2, #1081	; 0x439
 8013d30:	494c      	ldr	r1, [pc, #304]	; (8013e64 <tcp_enqueue_flags+0x1cc>)
 8013d32:	484a      	ldr	r0, [pc, #296]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013d34:	f007 f9ae 	bl	801b094 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013d3c:	78fa      	ldrb	r2, [r7, #3]
 8013d3e:	7dfb      	ldrb	r3, [r7, #23]
 8013d40:	9300      	str	r3, [sp, #0]
 8013d42:	460b      	mov	r3, r1
 8013d44:	68f9      	ldr	r1, [r7, #12]
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f7ff fd6a 	bl	8013820 <tcp_create_segment>
 8013d4c:	60b8      	str	r0, [r7, #8]
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d109      	bne.n	8013d68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	8b5b      	ldrh	r3, [r3, #26]
 8013d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d62:	f04f 33ff 	mov.w	r3, #4294967295
 8013d66:	e070      	b.n	8013e4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	691b      	ldr	r3, [r3, #16]
 8013d6c:	f003 0303 	and.w	r3, r3, #3
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d006      	beq.n	8013d82 <tcp_enqueue_flags+0xea>
 8013d74:	4b37      	ldr	r3, [pc, #220]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013d76:	f240 4242 	movw	r2, #1090	; 0x442
 8013d7a:	493b      	ldr	r1, [pc, #236]	; (8013e68 <tcp_enqueue_flags+0x1d0>)
 8013d7c:	4837      	ldr	r0, [pc, #220]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013d7e:	f007 f989 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	891b      	ldrh	r3, [r3, #8]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d006      	beq.n	8013d98 <tcp_enqueue_flags+0x100>
 8013d8a:	4b32      	ldr	r3, [pc, #200]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013d8c:	f240 4243 	movw	r2, #1091	; 0x443
 8013d90:	4936      	ldr	r1, [pc, #216]	; (8013e6c <tcp_enqueue_flags+0x1d4>)
 8013d92:	4832      	ldr	r0, [pc, #200]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013d94:	f007 f97e 	bl	801b094 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d103      	bne.n	8013da8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	66da      	str	r2, [r3, #108]	; 0x6c
 8013da6:	e00d      	b.n	8013dc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dac:	613b      	str	r3, [r7, #16]
 8013dae:	e002      	b.n	8013db6 <tcp_enqueue_flags+0x11e>
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d1f8      	bne.n	8013db0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013dcc:	78fb      	ldrb	r3, [r7, #3]
 8013dce:	f003 0302 	and.w	r3, r3, #2
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d104      	bne.n	8013de0 <tcp_enqueue_flags+0x148>
 8013dd6:	78fb      	ldrb	r3, [r7, #3]
 8013dd8:	f003 0301 	and.w	r3, r3, #1
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d004      	beq.n	8013dea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013de4:	1c5a      	adds	r2, r3, #1
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013dea:	78fb      	ldrb	r3, [r7, #3]
 8013dec:	f003 0301 	and.w	r3, r3, #1
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d006      	beq.n	8013e02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	8b5b      	ldrh	r3, [r3, #26]
 8013df8:	f043 0320 	orr.w	r3, r3, #32
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7fb fb7c 	bl	800f504 <pbuf_clen>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	461a      	mov	r2, r3
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e16:	4413      	add	r3, r2
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d00e      	beq.n	8013e48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d10a      	bne.n	8013e48 <tcp_enqueue_flags+0x1b0>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d106      	bne.n	8013e48 <tcp_enqueue_flags+0x1b0>
 8013e3a:	4b06      	ldr	r3, [pc, #24]	; (8013e54 <tcp_enqueue_flags+0x1bc>)
 8013e3c:	f240 4265 	movw	r2, #1125	; 0x465
 8013e40:	490b      	ldr	r1, [pc, #44]	; (8013e70 <tcp_enqueue_flags+0x1d8>)
 8013e42:	4806      	ldr	r0, [pc, #24]	; (8013e5c <tcp_enqueue_flags+0x1c4>)
 8013e44:	f007 f926 	bl	801b094 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013e48:	2300      	movs	r3, #0
}
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	3718      	adds	r7, #24
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}
 8013e52:	bf00      	nop
 8013e54:	0801f2e4 	.word	0x0801f2e4
 8013e58:	0801f764 	.word	0x0801f764
 8013e5c:	0801f338 	.word	0x0801f338
 8013e60:	0801f7bc 	.word	0x0801f7bc
 8013e64:	0801f7dc 	.word	0x0801f7dc
 8013e68:	0801f818 	.word	0x0801f818
 8013e6c:	0801f830 	.word	0x0801f830
 8013e70:	0801f85c 	.word	0x0801f85c

08013e74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013e74:	b5b0      	push	{r4, r5, r7, lr}
 8013e76:	b08a      	sub	sp, #40	; 0x28
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d106      	bne.n	8013e90 <tcp_output+0x1c>
 8013e82:	4b8a      	ldr	r3, [pc, #552]	; (80140ac <tcp_output+0x238>)
 8013e84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013e88:	4989      	ldr	r1, [pc, #548]	; (80140b0 <tcp_output+0x23c>)
 8013e8a:	488a      	ldr	r0, [pc, #552]	; (80140b4 <tcp_output+0x240>)
 8013e8c:	f007 f902 	bl	801b094 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	7d1b      	ldrb	r3, [r3, #20]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d106      	bne.n	8013ea6 <tcp_output+0x32>
 8013e98:	4b84      	ldr	r3, [pc, #528]	; (80140ac <tcp_output+0x238>)
 8013e9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013e9e:	4986      	ldr	r1, [pc, #536]	; (80140b8 <tcp_output+0x244>)
 8013ea0:	4884      	ldr	r0, [pc, #528]	; (80140b4 <tcp_output+0x240>)
 8013ea2:	f007 f8f7 	bl	801b094 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013ea6:	4b85      	ldr	r3, [pc, #532]	; (80140bc <tcp_output+0x248>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	687a      	ldr	r2, [r7, #4]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d101      	bne.n	8013eb4 <tcp_output+0x40>
    return ERR_OK;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	e1d1      	b.n	8014258 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ec0:	4293      	cmp	r3, r2
 8013ec2:	bf28      	it	cs
 8013ec4:	4613      	movcs	r3, r2
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ece:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d10b      	bne.n	8013eee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	8b5b      	ldrh	r3, [r3, #26]
 8013eda:	f003 0302 	and.w	r3, r3, #2
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	f000 81ad 	beq.w	801423e <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f000 fdf9 	bl	8014adc <tcp_send_empty_ack>
 8013eea:	4603      	mov	r3, r0
 8013eec:	e1b4      	b.n	8014258 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013eee:	6879      	ldr	r1, [r7, #4]
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	3304      	adds	r3, #4
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7ff fc76 	bl	80137e8 <tcp_route>
 8013efc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d102      	bne.n	8013f0a <tcp_output+0x96>
    return ERR_RTE;
 8013f04:	f06f 0303 	mvn.w	r3, #3
 8013f08:	e1a6      	b.n	8014258 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d003      	beq.n	8013f18 <tcp_output+0xa4>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d111      	bne.n	8013f3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013f18:	697b      	ldr	r3, [r7, #20]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d002      	beq.n	8013f24 <tcp_output+0xb0>
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	3304      	adds	r3, #4
 8013f22:	e000      	b.n	8013f26 <tcp_output+0xb2>
 8013f24:	2300      	movs	r3, #0
 8013f26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d102      	bne.n	8013f34 <tcp_output+0xc0>
      return ERR_RTE;
 8013f2e:	f06f 0303 	mvn.w	r3, #3
 8013f32:	e191      	b.n	8014258 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013f34:	693b      	ldr	r3, [r7, #16]
 8013f36:	681a      	ldr	r2, [r3, #0]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	691b      	ldr	r3, [r3, #16]
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7f9 fd43 	bl	800d9ce <lwip_htonl>
 8013f48:	4602      	mov	r2, r0
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f4e:	1ad3      	subs	r3, r2, r3
 8013f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f52:	8912      	ldrh	r2, [r2, #8]
 8013f54:	4413      	add	r3, r2
 8013f56:	69ba      	ldr	r2, [r7, #24]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d227      	bcs.n	8013fac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f62:	461a      	mov	r2, r3
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d114      	bne.n	8013f94 <tcp_output+0x120>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d110      	bne.n	8013f94 <tcp_output+0x120>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d10b      	bne.n	8013f94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2201      	movs	r2, #1
 8013f88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2200      	movs	r2, #0
 8013f90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	8b5b      	ldrh	r3, [r3, #26]
 8013f98:	f003 0302 	and.w	r3, r3, #2
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f000 8150 	beq.w	8014242 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f000 fd9a 	bl	8014adc <tcp_send_empty_ack>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	e155      	b.n	8014258 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013fba:	6a3b      	ldr	r3, [r7, #32]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	f000 811f 	beq.w	8014200 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 8013fc2:	e002      	b.n	8013fca <tcp_output+0x156>
 8013fc4:	6a3b      	ldr	r3, [r7, #32]
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	623b      	str	r3, [r7, #32]
 8013fca:	6a3b      	ldr	r3, [r7, #32]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d1f8      	bne.n	8013fc4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013fd2:	e115      	b.n	8014200 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	691b      	ldr	r3, [r3, #16]
 8013fd8:	899b      	ldrh	r3, [r3, #12]
 8013fda:	b29b      	uxth	r3, r3
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7f9 fce1 	bl	800d9a4 <lwip_htons>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	b2db      	uxtb	r3, r3
 8013fe6:	f003 0304 	and.w	r3, r3, #4
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d006      	beq.n	8013ffc <tcp_output+0x188>
 8013fee:	4b2f      	ldr	r3, [pc, #188]	; (80140ac <tcp_output+0x238>)
 8013ff0:	f240 5236 	movw	r2, #1334	; 0x536
 8013ff4:	4932      	ldr	r1, [pc, #200]	; (80140c0 <tcp_output+0x24c>)
 8013ff6:	482f      	ldr	r0, [pc, #188]	; (80140b4 <tcp_output+0x240>)
 8013ff8:	f007 f84c 	bl	801b094 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014000:	2b00      	cmp	r3, #0
 8014002:	d01f      	beq.n	8014044 <tcp_output+0x1d0>
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	8b5b      	ldrh	r3, [r3, #26]
 8014008:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801400c:	2b00      	cmp	r3, #0
 801400e:	d119      	bne.n	8014044 <tcp_output+0x1d0>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014014:	2b00      	cmp	r3, #0
 8014016:	d00b      	beq.n	8014030 <tcp_output+0x1bc>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d110      	bne.n	8014044 <tcp_output+0x1d0>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014026:	891a      	ldrh	r2, [r3, #8]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801402c:	429a      	cmp	r2, r3
 801402e:	d209      	bcs.n	8014044 <tcp_output+0x1d0>
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014036:	2b00      	cmp	r3, #0
 8014038:	d004      	beq.n	8014044 <tcp_output+0x1d0>
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014040:	2b0f      	cmp	r3, #15
 8014042:	d901      	bls.n	8014048 <tcp_output+0x1d4>
 8014044:	2301      	movs	r3, #1
 8014046:	e000      	b.n	801404a <tcp_output+0x1d6>
 8014048:	2300      	movs	r3, #0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d106      	bne.n	801405c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8b5b      	ldrh	r3, [r3, #26]
 8014052:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 80e7 	beq.w	801422a <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	7d1b      	ldrb	r3, [r3, #20]
 8014060:	2b02      	cmp	r3, #2
 8014062:	d00d      	beq.n	8014080 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014066:	691b      	ldr	r3, [r3, #16]
 8014068:	899b      	ldrh	r3, [r3, #12]
 801406a:	b29c      	uxth	r4, r3
 801406c:	2010      	movs	r0, #16
 801406e:	f7f9 fc99 	bl	800d9a4 <lwip_htons>
 8014072:	4603      	mov	r3, r0
 8014074:	461a      	mov	r2, r3
 8014076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014078:	691b      	ldr	r3, [r3, #16]
 801407a:	4322      	orrs	r2, r4
 801407c:	b292      	uxth	r2, r2
 801407e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014080:	697a      	ldr	r2, [r7, #20]
 8014082:	6879      	ldr	r1, [r7, #4]
 8014084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014086:	f000 f90b 	bl	80142a0 <tcp_output_segment>
 801408a:	4603      	mov	r3, r0
 801408c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801408e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d016      	beq.n	80140c4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	8b5b      	ldrh	r3, [r3, #26]
 801409a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801409e:	b29a      	uxth	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	835a      	strh	r2, [r3, #26]
      return err;
 80140a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140a8:	e0d6      	b.n	8014258 <tcp_output+0x3e4>
 80140aa:	bf00      	nop
 80140ac:	0801f2e4 	.word	0x0801f2e4
 80140b0:	0801f884 	.word	0x0801f884
 80140b4:	0801f338 	.word	0x0801f338
 80140b8:	0801f89c 	.word	0x0801f89c
 80140bc:	20013dc0 	.word	0x20013dc0
 80140c0:	0801f8c4 	.word	0x0801f8c4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80140c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c6:	2200      	movs	r2, #0
 80140c8:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80140ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	7d1b      	ldrb	r3, [r3, #20]
 80140d6:	2b02      	cmp	r3, #2
 80140d8:	d006      	beq.n	80140e8 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	8b5b      	ldrh	r3, [r3, #26]
 80140de:	f023 0303 	bic.w	r3, r3, #3
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80140e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ea:	691b      	ldr	r3, [r3, #16]
 80140ec:	685b      	ldr	r3, [r3, #4]
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7f9 fc6d 	bl	800d9ce <lwip_htonl>
 80140f4:	4604      	mov	r4, r0
 80140f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f8:	891b      	ldrh	r3, [r3, #8]
 80140fa:	461d      	mov	r5, r3
 80140fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fe:	691b      	ldr	r3, [r3, #16]
 8014100:	899b      	ldrh	r3, [r3, #12]
 8014102:	b29b      	uxth	r3, r3
 8014104:	4618      	mov	r0, r3
 8014106:	f7f9 fc4d 	bl	800d9a4 <lwip_htons>
 801410a:	4603      	mov	r3, r0
 801410c:	b2db      	uxtb	r3, r3
 801410e:	f003 0303 	and.w	r3, r3, #3
 8014112:	2b00      	cmp	r3, #0
 8014114:	d001      	beq.n	801411a <tcp_output+0x2a6>
 8014116:	2301      	movs	r3, #1
 8014118:	e000      	b.n	801411c <tcp_output+0x2a8>
 801411a:	2300      	movs	r3, #0
 801411c:	442b      	add	r3, r5
 801411e:	4423      	add	r3, r4
 8014120:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	2b00      	cmp	r3, #0
 801412c:	da02      	bge.n	8014134 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	68ba      	ldr	r2, [r7, #8]
 8014132:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014136:	891b      	ldrh	r3, [r3, #8]
 8014138:	461c      	mov	r4, r3
 801413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801413c:	691b      	ldr	r3, [r3, #16]
 801413e:	899b      	ldrh	r3, [r3, #12]
 8014140:	b29b      	uxth	r3, r3
 8014142:	4618      	mov	r0, r3
 8014144:	f7f9 fc2e 	bl	800d9a4 <lwip_htons>
 8014148:	4603      	mov	r3, r0
 801414a:	b2db      	uxtb	r3, r3
 801414c:	f003 0303 	and.w	r3, r3, #3
 8014150:	2b00      	cmp	r3, #0
 8014152:	d001      	beq.n	8014158 <tcp_output+0x2e4>
 8014154:	2301      	movs	r3, #1
 8014156:	e000      	b.n	801415a <tcp_output+0x2e6>
 8014158:	2300      	movs	r3, #0
 801415a:	4423      	add	r3, r4
 801415c:	2b00      	cmp	r3, #0
 801415e:	d049      	beq.n	80141f4 <tcp_output+0x380>
      seg->next = NULL;
 8014160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014162:	2200      	movs	r2, #0
 8014164:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801416a:	2b00      	cmp	r3, #0
 801416c:	d105      	bne.n	801417a <tcp_output+0x306>
        pcb->unacked = seg;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014172:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014176:	623b      	str	r3, [r7, #32]
 8014178:	e03f      	b.n	80141fa <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417c:	691b      	ldr	r3, [r3, #16]
 801417e:	685b      	ldr	r3, [r3, #4]
 8014180:	4618      	mov	r0, r3
 8014182:	f7f9 fc24 	bl	800d9ce <lwip_htonl>
 8014186:	4604      	mov	r4, r0
 8014188:	6a3b      	ldr	r3, [r7, #32]
 801418a:	691b      	ldr	r3, [r3, #16]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	4618      	mov	r0, r3
 8014190:	f7f9 fc1d 	bl	800d9ce <lwip_htonl>
 8014194:	4603      	mov	r3, r0
 8014196:	1ae3      	subs	r3, r4, r3
 8014198:	2b00      	cmp	r3, #0
 801419a:	da24      	bge.n	80141e6 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	3370      	adds	r3, #112	; 0x70
 80141a0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80141a2:	e002      	b.n	80141aa <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80141aa:	69fb      	ldr	r3, [r7, #28]
 80141ac:	681b      	ldr	r3, [r3, #0]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d011      	beq.n	80141d6 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	691b      	ldr	r3, [r3, #16]
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7f9 fc07 	bl	800d9ce <lwip_htonl>
 80141c0:	4604      	mov	r4, r0
 80141c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	685b      	ldr	r3, [r3, #4]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f7f9 fc00 	bl	800d9ce <lwip_htonl>
 80141ce:	4603      	mov	r3, r0
 80141d0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	dbe6      	blt.n	80141a4 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	681a      	ldr	r2, [r3, #0]
 80141da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141dc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141e2:	601a      	str	r2, [r3, #0]
 80141e4:	e009      	b.n	80141fa <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80141e6:	6a3b      	ldr	r3, [r7, #32]
 80141e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141ea:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80141ec:	6a3b      	ldr	r3, [r7, #32]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	623b      	str	r3, [r7, #32]
 80141f2:	e002      	b.n	80141fa <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80141f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141f6:	f7fc fc22 	bl	8010a3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	2b00      	cmp	r3, #0
 8014204:	d012      	beq.n	801422c <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014208:	691b      	ldr	r3, [r3, #16]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	4618      	mov	r0, r3
 801420e:	f7f9 fbde 	bl	800d9ce <lwip_htonl>
 8014212:	4602      	mov	r2, r0
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421c:	8912      	ldrh	r2, [r2, #8]
 801421e:	4413      	add	r3, r2
  while (seg != NULL &&
 8014220:	69ba      	ldr	r2, [r7, #24]
 8014222:	429a      	cmp	r2, r3
 8014224:	f4bf aed6 	bcs.w	8013fd4 <tcp_output+0x160>
 8014228:	e000      	b.n	801422c <tcp_output+0x3b8>
      break;
 801422a:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014230:	2b00      	cmp	r3, #0
 8014232:	d108      	bne.n	8014246 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801423c:	e004      	b.n	8014248 <tcp_output+0x3d4>
    goto output_done;
 801423e:	bf00      	nop
 8014240:	e002      	b.n	8014248 <tcp_output+0x3d4>
    goto output_done;
 8014242:	bf00      	nop
 8014244:	e000      	b.n	8014248 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014246:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	8b5b      	ldrh	r3, [r3, #26]
 801424c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014250:	b29a      	uxth	r2, r3
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014256:	2300      	movs	r3, #0
}
 8014258:	4618      	mov	r0, r3
 801425a:	3728      	adds	r7, #40	; 0x28
 801425c:	46bd      	mov	sp, r7
 801425e:	bdb0      	pop	{r4, r5, r7, pc}

08014260 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b082      	sub	sp, #8
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d106      	bne.n	801427c <tcp_output_segment_busy+0x1c>
 801426e:	4b09      	ldr	r3, [pc, #36]	; (8014294 <tcp_output_segment_busy+0x34>)
 8014270:	f240 529a 	movw	r2, #1434	; 0x59a
 8014274:	4908      	ldr	r1, [pc, #32]	; (8014298 <tcp_output_segment_busy+0x38>)
 8014276:	4809      	ldr	r0, [pc, #36]	; (801429c <tcp_output_segment_busy+0x3c>)
 8014278:	f006 ff0c 	bl	801b094 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	685b      	ldr	r3, [r3, #4]
 8014280:	7b9b      	ldrb	r3, [r3, #14]
 8014282:	2b01      	cmp	r3, #1
 8014284:	d001      	beq.n	801428a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014286:	2301      	movs	r3, #1
 8014288:	e000      	b.n	801428c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801428a:	2300      	movs	r3, #0
}
 801428c:	4618      	mov	r0, r3
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}
 8014294:	0801f2e4 	.word	0x0801f2e4
 8014298:	0801f8dc 	.word	0x0801f8dc
 801429c:	0801f338 	.word	0x0801f338

080142a0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80142a0:	b5b0      	push	{r4, r5, r7, lr}
 80142a2:	b08c      	sub	sp, #48	; 0x30
 80142a4:	af04      	add	r7, sp, #16
 80142a6:	60f8      	str	r0, [r7, #12]
 80142a8:	60b9      	str	r1, [r7, #8]
 80142aa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d106      	bne.n	80142c0 <tcp_output_segment+0x20>
 80142b2:	4b6d      	ldr	r3, [pc, #436]	; (8014468 <tcp_output_segment+0x1c8>)
 80142b4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80142b8:	496c      	ldr	r1, [pc, #432]	; (801446c <tcp_output_segment+0x1cc>)
 80142ba:	486d      	ldr	r0, [pc, #436]	; (8014470 <tcp_output_segment+0x1d0>)
 80142bc:	f006 feea 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d106      	bne.n	80142d4 <tcp_output_segment+0x34>
 80142c6:	4b68      	ldr	r3, [pc, #416]	; (8014468 <tcp_output_segment+0x1c8>)
 80142c8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80142cc:	4969      	ldr	r1, [pc, #420]	; (8014474 <tcp_output_segment+0x1d4>)
 80142ce:	4868      	ldr	r0, [pc, #416]	; (8014470 <tcp_output_segment+0x1d0>)
 80142d0:	f006 fee0 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d106      	bne.n	80142e8 <tcp_output_segment+0x48>
 80142da:	4b63      	ldr	r3, [pc, #396]	; (8014468 <tcp_output_segment+0x1c8>)
 80142dc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80142e0:	4965      	ldr	r1, [pc, #404]	; (8014478 <tcp_output_segment+0x1d8>)
 80142e2:	4863      	ldr	r0, [pc, #396]	; (8014470 <tcp_output_segment+0x1d0>)
 80142e4:	f006 fed6 	bl	801b094 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80142e8:	68f8      	ldr	r0, [r7, #12]
 80142ea:	f7ff ffb9 	bl	8014260 <tcp_output_segment_busy>
 80142ee:	4603      	mov	r3, r0
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d001      	beq.n	80142f8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80142f4:	2300      	movs	r3, #0
 80142f6:	e0b3      	b.n	8014460 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	691c      	ldr	r4, [r3, #16]
 8014300:	4610      	mov	r0, r2
 8014302:	f7f9 fb64 	bl	800d9ce <lwip_htonl>
 8014306:	4603      	mov	r3, r0
 8014308:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	691c      	ldr	r4, [r3, #16]
 8014312:	4610      	mov	r0, r2
 8014314:	f7f9 fb46 	bl	800d9a4 <lwip_htons>
 8014318:	4603      	mov	r3, r0
 801431a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014320:	68ba      	ldr	r2, [r7, #8]
 8014322:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014324:	441a      	add	r2, r3
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	691b      	ldr	r3, [r3, #16]
 801432e:	3314      	adds	r3, #20
 8014330:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	7b1b      	ldrb	r3, [r3, #12]
 8014336:	f003 0301 	and.w	r3, r3, #1
 801433a:	2b00      	cmp	r3, #0
 801433c:	d015      	beq.n	801436a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	3304      	adds	r3, #4
 8014342:	461a      	mov	r2, r3
 8014344:	6879      	ldr	r1, [r7, #4]
 8014346:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801434a:	f7fc fe6f 	bl	801102c <tcp_eff_send_mss_netif>
 801434e:	4603      	mov	r3, r0
 8014350:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014352:	8b7b      	ldrh	r3, [r7, #26]
 8014354:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014358:	4618      	mov	r0, r3
 801435a:	f7f9 fb38 	bl	800d9ce <lwip_htonl>
 801435e:	4602      	mov	r2, r0
 8014360:	69fb      	ldr	r3, [r7, #28]
 8014362:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014364:	69fb      	ldr	r3, [r7, #28]
 8014366:	3304      	adds	r3, #4
 8014368:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014370:	2b00      	cmp	r3, #0
 8014372:	da02      	bge.n	801437a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	2200      	movs	r2, #0
 8014378:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801437e:	2b00      	cmp	r3, #0
 8014380:	d10c      	bne.n	801439c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014382:	4b3e      	ldr	r3, [pc, #248]	; (801447c <tcp_output_segment+0x1dc>)
 8014384:	681a      	ldr	r2, [r3, #0]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	691b      	ldr	r3, [r3, #16]
 801438e:	685b      	ldr	r3, [r3, #4]
 8014390:	4618      	mov	r0, r3
 8014392:	f7f9 fb1c 	bl	800d9ce <lwip_htonl>
 8014396:	4602      	mov	r2, r0
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	691a      	ldr	r2, [r3, #16]
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	1ad3      	subs	r3, r2, r3
 80143a8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	8959      	ldrh	r1, [r3, #10]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	8b3a      	ldrh	r2, [r7, #24]
 80143b6:	1a8a      	subs	r2, r1, r2
 80143b8:	b292      	uxth	r2, r2
 80143ba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	685b      	ldr	r3, [r3, #4]
 80143c0:	8919      	ldrh	r1, [r3, #8]
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	8b3a      	ldrh	r2, [r7, #24]
 80143c8:	1a8a      	subs	r2, r1, r2
 80143ca:	b292      	uxth	r2, r2
 80143cc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	68fa      	ldr	r2, [r7, #12]
 80143d4:	6912      	ldr	r2, [r2, #16]
 80143d6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	691b      	ldr	r3, [r3, #16]
 80143dc:	2200      	movs	r2, #0
 80143de:	741a      	strb	r2, [r3, #16]
 80143e0:	2200      	movs	r2, #0
 80143e2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	691a      	ldr	r2, [r3, #16]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	7b1b      	ldrb	r3, [r3, #12]
 80143ec:	f003 0301 	and.w	r3, r3, #1
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <tcp_output_segment+0x158>
 80143f4:	2318      	movs	r3, #24
 80143f6:	e000      	b.n	80143fa <tcp_output_segment+0x15a>
 80143f8:	2314      	movs	r3, #20
 80143fa:	4413      	add	r3, r2
 80143fc:	69fa      	ldr	r2, [r7, #28]
 80143fe:	429a      	cmp	r2, r3
 8014400:	d006      	beq.n	8014410 <tcp_output_segment+0x170>
 8014402:	4b19      	ldr	r3, [pc, #100]	; (8014468 <tcp_output_segment+0x1c8>)
 8014404:	f240 621c 	movw	r2, #1564	; 0x61c
 8014408:	491d      	ldr	r1, [pc, #116]	; (8014480 <tcp_output_segment+0x1e0>)
 801440a:	4819      	ldr	r0, [pc, #100]	; (8014470 <tcp_output_segment+0x1d0>)
 801440c:	f006 fe42 	bl	801b094 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014418:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801441a:	68bd      	ldr	r5, [r7, #8]
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8014420:	68fa      	ldr	r2, [r7, #12]
 8014422:	6914      	ldr	r4, [r2, #16]
 8014424:	9300      	str	r3, [sp, #0]
 8014426:	462b      	mov	r3, r5
 8014428:	460a      	mov	r2, r1
 801442a:	2106      	movs	r1, #6
 801442c:	f7f9 fbec 	bl	800dc08 <ip_chksum_pseudo>
 8014430:	4603      	mov	r3, r0
 8014432:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	6858      	ldr	r0, [r3, #4]
 8014438:	68b9      	ldr	r1, [r7, #8]
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	1d1c      	adds	r4, r3, #4
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	7add      	ldrb	r5, [r3, #11]
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	7a9b      	ldrb	r3, [r3, #10]
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	9202      	str	r2, [sp, #8]
 801444a:	2206      	movs	r2, #6
 801444c:	9201      	str	r2, [sp, #4]
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	462b      	mov	r3, r5
 8014452:	4622      	mov	r2, r4
 8014454:	f004 fdb0 	bl	8018fb8 <ip4_output_if>
 8014458:	4603      	mov	r3, r0
 801445a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801445c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014460:	4618      	mov	r0, r3
 8014462:	3720      	adds	r7, #32
 8014464:	46bd      	mov	sp, r7
 8014466:	bdb0      	pop	{r4, r5, r7, pc}
 8014468:	0801f2e4 	.word	0x0801f2e4
 801446c:	0801f904 	.word	0x0801f904
 8014470:	0801f338 	.word	0x0801f338
 8014474:	0801f924 	.word	0x0801f924
 8014478:	0801f944 	.word	0x0801f944
 801447c:	20013d70 	.word	0x20013d70
 8014480:	0801f968 	.word	0x0801f968

08014484 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014484:	b5b0      	push	{r4, r5, r7, lr}
 8014486:	b084      	sub	sp, #16
 8014488:	af00      	add	r7, sp, #0
 801448a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <tcp_rexmit_rto_prepare+0x1c>
 8014492:	4b36      	ldr	r3, [pc, #216]	; (801456c <tcp_rexmit_rto_prepare+0xe8>)
 8014494:	f240 6263 	movw	r2, #1635	; 0x663
 8014498:	4935      	ldr	r1, [pc, #212]	; (8014570 <tcp_rexmit_rto_prepare+0xec>)
 801449a:	4836      	ldr	r0, [pc, #216]	; (8014574 <tcp_rexmit_rto_prepare+0xf0>)
 801449c:	f006 fdfa 	bl	801b094 <iprintf>

  if (pcb->unacked == NULL) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d102      	bne.n	80144ae <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80144a8:	f06f 0305 	mvn.w	r3, #5
 80144ac:	e059      	b.n	8014562 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144b2:	60fb      	str	r3, [r7, #12]
 80144b4:	e00b      	b.n	80144ce <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f7ff fed2 	bl	8014260 <tcp_output_segment_busy>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d002      	beq.n	80144c8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80144c2:	f06f 0305 	mvn.w	r3, #5
 80144c6:	e04c      	b.n	8014562 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	60fb      	str	r3, [r7, #12]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d1ef      	bne.n	80144b6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80144d6:	68f8      	ldr	r0, [r7, #12]
 80144d8:	f7ff fec2 	bl	8014260 <tcp_output_segment_busy>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d002      	beq.n	80144e8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80144e2:	f06f 0305 	mvn.w	r3, #5
 80144e6:	e03c      	b.n	8014562 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80144ec:	68fb      	ldr	r3, [r7, #12]
 80144ee:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d104      	bne.n	8014502 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	895a      	ldrh	r2, [r3, #10]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2200      	movs	r2, #0
 801450e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	8b5b      	ldrh	r3, [r3, #26]
 8014514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014518:	b29a      	uxth	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	691b      	ldr	r3, [r3, #16]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	4618      	mov	r0, r3
 8014526:	f7f9 fa52 	bl	800d9ce <lwip_htonl>
 801452a:	4604      	mov	r4, r0
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	891b      	ldrh	r3, [r3, #8]
 8014530:	461d      	mov	r5, r3
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	691b      	ldr	r3, [r3, #16]
 8014536:	899b      	ldrh	r3, [r3, #12]
 8014538:	b29b      	uxth	r3, r3
 801453a:	4618      	mov	r0, r3
 801453c:	f7f9 fa32 	bl	800d9a4 <lwip_htons>
 8014540:	4603      	mov	r3, r0
 8014542:	b2db      	uxtb	r3, r3
 8014544:	f003 0303 	and.w	r3, r3, #3
 8014548:	2b00      	cmp	r3, #0
 801454a:	d001      	beq.n	8014550 <tcp_rexmit_rto_prepare+0xcc>
 801454c:	2301      	movs	r3, #1
 801454e:	e000      	b.n	8014552 <tcp_rexmit_rto_prepare+0xce>
 8014550:	2300      	movs	r3, #0
 8014552:	442b      	add	r3, r5
 8014554:	18e2      	adds	r2, r4, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2200      	movs	r2, #0
 801455e:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014560:	2300      	movs	r3, #0
}
 8014562:	4618      	mov	r0, r3
 8014564:	3710      	adds	r7, #16
 8014566:	46bd      	mov	sp, r7
 8014568:	bdb0      	pop	{r4, r5, r7, pc}
 801456a:	bf00      	nop
 801456c:	0801f2e4 	.word	0x0801f2e4
 8014570:	0801f97c 	.word	0x0801f97c
 8014574:	0801f338 	.word	0x0801f338

08014578 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b082      	sub	sp, #8
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <tcp_rexmit_rto_commit+0x1c>
 8014586:	4b0d      	ldr	r3, [pc, #52]	; (80145bc <tcp_rexmit_rto_commit+0x44>)
 8014588:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801458c:	490c      	ldr	r1, [pc, #48]	; (80145c0 <tcp_rexmit_rto_commit+0x48>)
 801458e:	480d      	ldr	r0, [pc, #52]	; (80145c4 <tcp_rexmit_rto_commit+0x4c>)
 8014590:	f006 fd80 	bl	801b094 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801459a:	2bff      	cmp	r3, #255	; 0xff
 801459c:	d007      	beq.n	80145ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145a4:	3301      	adds	r3, #1
 80145a6:	b2da      	uxtb	r2, r3
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f7ff fc60 	bl	8013e74 <tcp_output>
}
 80145b4:	bf00      	nop
 80145b6:	3708      	adds	r7, #8
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}
 80145bc:	0801f2e4 	.word	0x0801f2e4
 80145c0:	0801f9a0 	.word	0x0801f9a0
 80145c4:	0801f338 	.word	0x0801f338

080145c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b082      	sub	sp, #8
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d106      	bne.n	80145e4 <tcp_rexmit_rto+0x1c>
 80145d6:	4b0a      	ldr	r3, [pc, #40]	; (8014600 <tcp_rexmit_rto+0x38>)
 80145d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80145dc:	4909      	ldr	r1, [pc, #36]	; (8014604 <tcp_rexmit_rto+0x3c>)
 80145de:	480a      	ldr	r0, [pc, #40]	; (8014608 <tcp_rexmit_rto+0x40>)
 80145e0:	f006 fd58 	bl	801b094 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7ff ff4d 	bl	8014484 <tcp_rexmit_rto_prepare>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d102      	bne.n	80145f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f7ff ffc1 	bl	8014578 <tcp_rexmit_rto_commit>
  }
}
 80145f6:	bf00      	nop
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	0801f2e4 	.word	0x0801f2e4
 8014604:	0801f9c4 	.word	0x0801f9c4
 8014608:	0801f338 	.word	0x0801f338

0801460c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801460c:	b590      	push	{r4, r7, lr}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_rexmit+0x1c>
 801461a:	4b2f      	ldr	r3, [pc, #188]	; (80146d8 <tcp_rexmit+0xcc>)
 801461c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014620:	492e      	ldr	r1, [pc, #184]	; (80146dc <tcp_rexmit+0xd0>)
 8014622:	482f      	ldr	r0, [pc, #188]	; (80146e0 <tcp_rexmit+0xd4>)
 8014624:	f006 fd36 	bl	801b094 <iprintf>

  if (pcb->unacked == NULL) {
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801462c:	2b00      	cmp	r3, #0
 801462e:	d102      	bne.n	8014636 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014630:	f06f 0305 	mvn.w	r3, #5
 8014634:	e04c      	b.n	80146d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801463a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801463c:	68b8      	ldr	r0, [r7, #8]
 801463e:	f7ff fe0f 	bl	8014260 <tcp_output_segment_busy>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d002      	beq.n	801464e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014648:	f06f 0305 	mvn.w	r3, #5
 801464c:	e040      	b.n	80146d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	336c      	adds	r3, #108	; 0x6c
 801465a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801465c:	e002      	b.n	8014664 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d011      	beq.n	8014690 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	691b      	ldr	r3, [r3, #16]
 8014672:	685b      	ldr	r3, [r3, #4]
 8014674:	4618      	mov	r0, r3
 8014676:	f7f9 f9aa 	bl	800d9ce <lwip_htonl>
 801467a:	4604      	mov	r4, r0
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	f7f9 f9a3 	bl	800d9ce <lwip_htonl>
 8014688:	4603      	mov	r3, r0
 801468a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801468c:	2b00      	cmp	r3, #0
 801468e:	dbe6      	blt.n	801465e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	68ba      	ldr	r2, [r7, #8]
 801469c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801469e:	68bb      	ldr	r3, [r7, #8]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d103      	bne.n	80146ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146b4:	2bff      	cmp	r3, #255	; 0xff
 80146b6:	d007      	beq.n	80146c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146be:	3301      	adds	r3, #1
 80146c0:	b2da      	uxtb	r2, r3
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80146ce:	2300      	movs	r3, #0
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3714      	adds	r7, #20
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd90      	pop	{r4, r7, pc}
 80146d8:	0801f2e4 	.word	0x0801f2e4
 80146dc:	0801f9e0 	.word	0x0801f9e0
 80146e0:	0801f338 	.word	0x0801f338

080146e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <tcp_rexmit_fast+0x1c>
 80146f2:	4b2a      	ldr	r3, [pc, #168]	; (801479c <tcp_rexmit_fast+0xb8>)
 80146f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80146f8:	4929      	ldr	r1, [pc, #164]	; (80147a0 <tcp_rexmit_fast+0xbc>)
 80146fa:	482a      	ldr	r0, [pc, #168]	; (80147a4 <tcp_rexmit_fast+0xc0>)
 80146fc:	f006 fcca 	bl	801b094 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014704:	2b00      	cmp	r3, #0
 8014706:	d044      	beq.n	8014792 <tcp_rexmit_fast+0xae>
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	8b5b      	ldrh	r3, [r3, #26]
 801470c:	f003 0304 	and.w	r3, r3, #4
 8014710:	2b00      	cmp	r3, #0
 8014712:	d13e      	bne.n	8014792 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f7ff ff79 	bl	801460c <tcp_rexmit>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d138      	bne.n	8014792 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801472c:	4293      	cmp	r3, r2
 801472e:	bf28      	it	cs
 8014730:	4613      	movcs	r3, r2
 8014732:	b29b      	uxth	r3, r3
 8014734:	0fda      	lsrs	r2, r3, #31
 8014736:	4413      	add	r3, r2
 8014738:	105b      	asrs	r3, r3, #1
 801473a:	b29a      	uxth	r2, r3
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014748:	461a      	mov	r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	429a      	cmp	r2, r3
 8014752:	d206      	bcs.n	8014762 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014758:	005b      	lsls	r3, r3, #1
 801475a:	b29a      	uxth	r2, r3
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801476c:	4619      	mov	r1, r3
 801476e:	0049      	lsls	r1, r1, #1
 8014770:	440b      	add	r3, r1
 8014772:	b29b      	uxth	r3, r3
 8014774:	4413      	add	r3, r2
 8014776:	b29a      	uxth	r2, r3
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	8b5b      	ldrh	r3, [r3, #26]
 8014782:	f043 0304 	orr.w	r3, r3, #4
 8014786:	b29a      	uxth	r2, r3
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	2200      	movs	r2, #0
 8014790:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014792:	bf00      	nop
 8014794:	3708      	adds	r7, #8
 8014796:	46bd      	mov	sp, r7
 8014798:	bd80      	pop	{r7, pc}
 801479a:	bf00      	nop
 801479c:	0801f2e4 	.word	0x0801f2e4
 80147a0:	0801f9f8 	.word	0x0801f9f8
 80147a4:	0801f338 	.word	0x0801f338

080147a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	607b      	str	r3, [r7, #4]
 80147b2:	460b      	mov	r3, r1
 80147b4:	817b      	strh	r3, [r7, #10]
 80147b6:	4613      	mov	r3, r2
 80147b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80147ba:	897a      	ldrh	r2, [r7, #10]
 80147bc:	893b      	ldrh	r3, [r7, #8]
 80147be:	4413      	add	r3, r2
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	3314      	adds	r3, #20
 80147c4:	b29b      	uxth	r3, r3
 80147c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147ca:	4619      	mov	r1, r3
 80147cc:	2022      	movs	r0, #34	; 0x22
 80147ce:	f7fa fb23 	bl	800ee18 <pbuf_alloc>
 80147d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d04d      	beq.n	8014876 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80147da:	897b      	ldrh	r3, [r7, #10]
 80147dc:	3313      	adds	r3, #19
 80147de:	697a      	ldr	r2, [r7, #20]
 80147e0:	8952      	ldrh	r2, [r2, #10]
 80147e2:	4293      	cmp	r3, r2
 80147e4:	db06      	blt.n	80147f4 <tcp_output_alloc_header_common+0x4c>
 80147e6:	4b26      	ldr	r3, [pc, #152]	; (8014880 <tcp_output_alloc_header_common+0xd8>)
 80147e8:	f240 7223 	movw	r2, #1827	; 0x723
 80147ec:	4925      	ldr	r1, [pc, #148]	; (8014884 <tcp_output_alloc_header_common+0xdc>)
 80147ee:	4826      	ldr	r0, [pc, #152]	; (8014888 <tcp_output_alloc_header_common+0xe0>)
 80147f0:	f006 fc50 	bl	801b094 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80147fa:	8c3b      	ldrh	r3, [r7, #32]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f9 f8d1 	bl	800d9a4 <lwip_htons>
 8014802:	4603      	mov	r3, r0
 8014804:	461a      	mov	r2, r3
 8014806:	693b      	ldr	r3, [r7, #16]
 8014808:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801480a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801480c:	4618      	mov	r0, r3
 801480e:	f7f9 f8c9 	bl	800d9a4 <lwip_htons>
 8014812:	4603      	mov	r3, r0
 8014814:	461a      	mov	r2, r3
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f7f9 f8d4 	bl	800d9ce <lwip_htonl>
 8014826:	4602      	mov	r2, r0
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801482c:	897b      	ldrh	r3, [r7, #10]
 801482e:	089b      	lsrs	r3, r3, #2
 8014830:	b29b      	uxth	r3, r3
 8014832:	3305      	adds	r3, #5
 8014834:	b29b      	uxth	r3, r3
 8014836:	031b      	lsls	r3, r3, #12
 8014838:	b29a      	uxth	r2, r3
 801483a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801483e:	b29b      	uxth	r3, r3
 8014840:	4313      	orrs	r3, r2
 8014842:	b29b      	uxth	r3, r3
 8014844:	4618      	mov	r0, r3
 8014846:	f7f9 f8ad 	bl	800d9a4 <lwip_htons>
 801484a:	4603      	mov	r3, r0
 801484c:	461a      	mov	r2, r3
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014852:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014854:	4618      	mov	r0, r3
 8014856:	f7f9 f8a5 	bl	800d9a4 <lwip_htons>
 801485a:	4603      	mov	r3, r0
 801485c:	461a      	mov	r2, r3
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014862:	693b      	ldr	r3, [r7, #16]
 8014864:	2200      	movs	r2, #0
 8014866:	741a      	strb	r2, [r3, #16]
 8014868:	2200      	movs	r2, #0
 801486a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	2200      	movs	r2, #0
 8014870:	749a      	strb	r2, [r3, #18]
 8014872:	2200      	movs	r2, #0
 8014874:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014876:	697b      	ldr	r3, [r7, #20]
}
 8014878:	4618      	mov	r0, r3
 801487a:	3718      	adds	r7, #24
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	0801f2e4 	.word	0x0801f2e4
 8014884:	0801fa18 	.word	0x0801fa18
 8014888:	0801f338 	.word	0x0801f338

0801488c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801488c:	b5b0      	push	{r4, r5, r7, lr}
 801488e:	b08a      	sub	sp, #40	; 0x28
 8014890:	af04      	add	r7, sp, #16
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	607b      	str	r3, [r7, #4]
 8014896:	460b      	mov	r3, r1
 8014898:	817b      	strh	r3, [r7, #10]
 801489a:	4613      	mov	r3, r2
 801489c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d106      	bne.n	80148b2 <tcp_output_alloc_header+0x26>
 80148a4:	4b15      	ldr	r3, [pc, #84]	; (80148fc <tcp_output_alloc_header+0x70>)
 80148a6:	f240 7242 	movw	r2, #1858	; 0x742
 80148aa:	4915      	ldr	r1, [pc, #84]	; (8014900 <tcp_output_alloc_header+0x74>)
 80148ac:	4815      	ldr	r0, [pc, #84]	; (8014904 <tcp_output_alloc_header+0x78>)
 80148ae:	f006 fbf1 	bl	801b094 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	8adb      	ldrh	r3, [r3, #22]
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	8b12      	ldrh	r2, [r2, #24]
 80148be:	68f9      	ldr	r1, [r7, #12]
 80148c0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80148c2:	893d      	ldrh	r5, [r7, #8]
 80148c4:	897c      	ldrh	r4, [r7, #10]
 80148c6:	9103      	str	r1, [sp, #12]
 80148c8:	2110      	movs	r1, #16
 80148ca:	9102      	str	r1, [sp, #8]
 80148cc:	9201      	str	r2, [sp, #4]
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	462a      	mov	r2, r5
 80148d4:	4621      	mov	r1, r4
 80148d6:	f7ff ff67 	bl	80147a8 <tcp_output_alloc_header_common>
 80148da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d006      	beq.n	80148f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80148ea:	441a      	add	r2, r3
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80148f0:	697b      	ldr	r3, [r7, #20]
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3718      	adds	r7, #24
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bdb0      	pop	{r4, r5, r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0801f2e4 	.word	0x0801f2e4
 8014900:	0801fa48 	.word	0x0801fa48
 8014904:	0801f338 	.word	0x0801f338

08014908 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b088      	sub	sp, #32
 801490c:	af00      	add	r7, sp, #0
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	4611      	mov	r1, r2
 8014914:	461a      	mov	r2, r3
 8014916:	460b      	mov	r3, r1
 8014918:	71fb      	strb	r3, [r7, #7]
 801491a:	4613      	mov	r3, r2
 801491c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801491e:	2300      	movs	r3, #0
 8014920:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d106      	bne.n	8014936 <tcp_output_fill_options+0x2e>
 8014928:	4b12      	ldr	r3, [pc, #72]	; (8014974 <tcp_output_fill_options+0x6c>)
 801492a:	f240 7256 	movw	r2, #1878	; 0x756
 801492e:	4912      	ldr	r1, [pc, #72]	; (8014978 <tcp_output_fill_options+0x70>)
 8014930:	4812      	ldr	r0, [pc, #72]	; (801497c <tcp_output_fill_options+0x74>)
 8014932:	f006 fbaf 	bl	801b094 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	685b      	ldr	r3, [r3, #4]
 801493a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	3314      	adds	r3, #20
 8014940:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014942:	8bfb      	ldrh	r3, [r7, #30]
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	461a      	mov	r2, r3
 8014948:	79fb      	ldrb	r3, [r7, #7]
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	f003 0304 	and.w	r3, r3, #4
 8014950:	4413      	add	r3, r2
 8014952:	3314      	adds	r3, #20
 8014954:	69ba      	ldr	r2, [r7, #24]
 8014956:	4413      	add	r3, r2
 8014958:	697a      	ldr	r2, [r7, #20]
 801495a:	429a      	cmp	r2, r3
 801495c:	d006      	beq.n	801496c <tcp_output_fill_options+0x64>
 801495e:	4b05      	ldr	r3, [pc, #20]	; (8014974 <tcp_output_fill_options+0x6c>)
 8014960:	f240 7275 	movw	r2, #1909	; 0x775
 8014964:	4906      	ldr	r1, [pc, #24]	; (8014980 <tcp_output_fill_options+0x78>)
 8014966:	4805      	ldr	r0, [pc, #20]	; (801497c <tcp_output_fill_options+0x74>)
 8014968:	f006 fb94 	bl	801b094 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801496c:	bf00      	nop
 801496e:	3720      	adds	r7, #32
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}
 8014974:	0801f2e4 	.word	0x0801f2e4
 8014978:	0801fa70 	.word	0x0801fa70
 801497c:	0801f338 	.word	0x0801f338
 8014980:	0801f968 	.word	0x0801f968

08014984 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b08c      	sub	sp, #48	; 0x30
 8014988:	af04      	add	r7, sp, #16
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
 8014990:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d106      	bne.n	80149a6 <tcp_output_control_segment+0x22>
 8014998:	4b24      	ldr	r3, [pc, #144]	; (8014a2c <tcp_output_control_segment+0xa8>)
 801499a:	f240 7287 	movw	r2, #1927	; 0x787
 801499e:	4924      	ldr	r1, [pc, #144]	; (8014a30 <tcp_output_control_segment+0xac>)
 80149a0:	4824      	ldr	r0, [pc, #144]	; (8014a34 <tcp_output_control_segment+0xb0>)
 80149a2:	f006 fb77 	bl	801b094 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80149a6:	683a      	ldr	r2, [r7, #0]
 80149a8:	6879      	ldr	r1, [r7, #4]
 80149aa:	68f8      	ldr	r0, [r7, #12]
 80149ac:	f7fe ff1c 	bl	80137e8 <tcp_route>
 80149b0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80149b2:	69bb      	ldr	r3, [r7, #24]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d102      	bne.n	80149be <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80149b8:	23fc      	movs	r3, #252	; 0xfc
 80149ba:	77fb      	strb	r3, [r7, #31]
 80149bc:	e02c      	b.n	8014a18 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80149c4:	68bb      	ldr	r3, [r7, #8]
 80149c6:	891a      	ldrh	r2, [r3, #8]
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	9300      	str	r3, [sp, #0]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2106      	movs	r1, #6
 80149d0:	68b8      	ldr	r0, [r7, #8]
 80149d2:	f7f9 f919 	bl	800dc08 <ip_chksum_pseudo>
 80149d6:	4603      	mov	r3, r0
 80149d8:	461a      	mov	r2, r3
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80149de:	68fb      	ldr	r3, [r7, #12]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d006      	beq.n	80149f2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	7adb      	ldrb	r3, [r3, #11]
 80149e8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	7a9b      	ldrb	r3, [r3, #10]
 80149ee:	777b      	strb	r3, [r7, #29]
 80149f0:	e003      	b.n	80149fa <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80149f2:	23ff      	movs	r3, #255	; 0xff
 80149f4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 80149f6:	2300      	movs	r3, #0
 80149f8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80149fa:	7fba      	ldrb	r2, [r7, #30]
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	9302      	str	r3, [sp, #8]
 8014a00:	2306      	movs	r3, #6
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	7f7b      	ldrb	r3, [r7, #29]
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4613      	mov	r3, r2
 8014a0a:	683a      	ldr	r2, [r7, #0]
 8014a0c:	6879      	ldr	r1, [r7, #4]
 8014a0e:	68b8      	ldr	r0, [r7, #8]
 8014a10:	f004 fad2 	bl	8018fb8 <ip4_output_if>
 8014a14:	4603      	mov	r3, r0
 8014a16:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014a18:	68b8      	ldr	r0, [r7, #8]
 8014a1a:	f7fa fce5 	bl	800f3e8 <pbuf_free>
  return err;
 8014a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a22:	4618      	mov	r0, r3
 8014a24:	3720      	adds	r7, #32
 8014a26:	46bd      	mov	sp, r7
 8014a28:	bd80      	pop	{r7, pc}
 8014a2a:	bf00      	nop
 8014a2c:	0801f2e4 	.word	0x0801f2e4
 8014a30:	0801fa98 	.word	0x0801fa98
 8014a34:	0801f338 	.word	0x0801f338

08014a38 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014a38:	b590      	push	{r4, r7, lr}
 8014a3a:	b08b      	sub	sp, #44	; 0x2c
 8014a3c:	af04      	add	r7, sp, #16
 8014a3e:	60f8      	str	r0, [r7, #12]
 8014a40:	60b9      	str	r1, [r7, #8]
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d106      	bne.n	8014a5a <tcp_rst+0x22>
 8014a4c:	4b1f      	ldr	r3, [pc, #124]	; (8014acc <tcp_rst+0x94>)
 8014a4e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014a52:	491f      	ldr	r1, [pc, #124]	; (8014ad0 <tcp_rst+0x98>)
 8014a54:	481f      	ldr	r0, [pc, #124]	; (8014ad4 <tcp_rst+0x9c>)
 8014a56:	f006 fb1d 	bl	801b094 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d106      	bne.n	8014a6e <tcp_rst+0x36>
 8014a60:	4b1a      	ldr	r3, [pc, #104]	; (8014acc <tcp_rst+0x94>)
 8014a62:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014a66:	491c      	ldr	r1, [pc, #112]	; (8014ad8 <tcp_rst+0xa0>)
 8014a68:	481a      	ldr	r0, [pc, #104]	; (8014ad4 <tcp_rst+0x9c>)
 8014a6a:	f006 fb13 	bl	801b094 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a6e:	2300      	movs	r3, #0
 8014a70:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014a72:	f24a 032d 	movw	r3, #41005	; 0xa02d
 8014a76:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014a78:	7dfb      	ldrb	r3, [r7, #23]
 8014a7a:	b29c      	uxth	r4, r3
 8014a7c:	68b8      	ldr	r0, [r7, #8]
 8014a7e:	f7f8 ffa6 	bl	800d9ce <lwip_htonl>
 8014a82:	4602      	mov	r2, r0
 8014a84:	8abb      	ldrh	r3, [r7, #20]
 8014a86:	9303      	str	r3, [sp, #12]
 8014a88:	2314      	movs	r3, #20
 8014a8a:	9302      	str	r3, [sp, #8]
 8014a8c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014a8e:	9301      	str	r3, [sp, #4]
 8014a90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	4613      	mov	r3, r2
 8014a96:	2200      	movs	r2, #0
 8014a98:	4621      	mov	r1, r4
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7ff fe84 	bl	80147a8 <tcp_output_alloc_header_common>
 8014aa0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d00c      	beq.n	8014ac2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014aa8:	7dfb      	ldrb	r3, [r7, #23]
 8014aaa:	2200      	movs	r2, #0
 8014aac:	6939      	ldr	r1, [r7, #16]
 8014aae:	68f8      	ldr	r0, [r7, #12]
 8014ab0:	f7ff ff2a 	bl	8014908 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	6939      	ldr	r1, [r7, #16]
 8014aba:	68f8      	ldr	r0, [r7, #12]
 8014abc:	f7ff ff62 	bl	8014984 <tcp_output_control_segment>
 8014ac0:	e000      	b.n	8014ac4 <tcp_rst+0x8c>
    return;
 8014ac2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014ac4:	371c      	adds	r7, #28
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	bd90      	pop	{r4, r7, pc}
 8014aca:	bf00      	nop
 8014acc:	0801f2e4 	.word	0x0801f2e4
 8014ad0:	0801fac4 	.word	0x0801fac4
 8014ad4:	0801f338 	.word	0x0801f338
 8014ad8:	0801fae0 	.word	0x0801fae0

08014adc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014adc:	b590      	push	{r4, r7, lr}
 8014ade:	b087      	sub	sp, #28
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014ae8:	2300      	movs	r3, #0
 8014aea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d106      	bne.n	8014b00 <tcp_send_empty_ack+0x24>
 8014af2:	4b28      	ldr	r3, [pc, #160]	; (8014b94 <tcp_send_empty_ack+0xb8>)
 8014af4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014af8:	4927      	ldr	r1, [pc, #156]	; (8014b98 <tcp_send_empty_ack+0xbc>)
 8014afa:	4828      	ldr	r0, [pc, #160]	; (8014b9c <tcp_send_empty_ack+0xc0>)
 8014afc:	f006 faca 	bl	801b094 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	b2db      	uxtb	r3, r3
 8014b06:	f003 0304 	and.w	r3, r3, #4
 8014b0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014b0c:	7d7b      	ldrb	r3, [r7, #21]
 8014b0e:	b29c      	uxth	r4, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7f8 ff5a 	bl	800d9ce <lwip_htonl>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4621      	mov	r1, r4
 8014b20:	6878      	ldr	r0, [r7, #4]
 8014b22:	f7ff feb3 	bl	801488c <tcp_output_alloc_header>
 8014b26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d109      	bne.n	8014b42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	8b5b      	ldrh	r3, [r3, #26]
 8014b32:	f043 0303 	orr.w	r3, r3, #3
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014b3c:	f06f 0301 	mvn.w	r3, #1
 8014b40:	e023      	b.n	8014b8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014b42:	7dbb      	ldrb	r3, [r7, #22]
 8014b44:	7dfa      	ldrb	r2, [r7, #23]
 8014b46:	6939      	ldr	r1, [r7, #16]
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f7ff fedd 	bl	8014908 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	3304      	adds	r3, #4
 8014b54:	6939      	ldr	r1, [r7, #16]
 8014b56:	6878      	ldr	r0, [r7, #4]
 8014b58:	f7ff ff14 	bl	8014984 <tcp_output_control_segment>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d007      	beq.n	8014b78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8b5b      	ldrh	r3, [r3, #26]
 8014b6c:	f043 0303 	orr.w	r3, r3, #3
 8014b70:	b29a      	uxth	r2, r3
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	835a      	strh	r2, [r3, #26]
 8014b76:	e006      	b.n	8014b86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8b5b      	ldrh	r3, [r3, #26]
 8014b7c:	f023 0303 	bic.w	r3, r3, #3
 8014b80:	b29a      	uxth	r2, r3
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	371c      	adds	r7, #28
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd90      	pop	{r4, r7, pc}
 8014b92:	bf00      	nop
 8014b94:	0801f2e4 	.word	0x0801f2e4
 8014b98:	0801fafc 	.word	0x0801fafc
 8014b9c:	0801f338 	.word	0x0801f338

08014ba0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014ba0:	b590      	push	{r4, r7, lr}
 8014ba2:	b085      	sub	sp, #20
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014ba8:	2300      	movs	r3, #0
 8014baa:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <tcp_keepalive+0x20>
 8014bb2:	4b18      	ldr	r3, [pc, #96]	; (8014c14 <tcp_keepalive+0x74>)
 8014bb4:	f640 0224 	movw	r2, #2084	; 0x824
 8014bb8:	4917      	ldr	r1, [pc, #92]	; (8014c18 <tcp_keepalive+0x78>)
 8014bba:	4818      	ldr	r0, [pc, #96]	; (8014c1c <tcp_keepalive+0x7c>)
 8014bbc:	f006 fa6a 	bl	801b094 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014bc0:	7abb      	ldrb	r3, [r7, #10]
 8014bc2:	b29c      	uxth	r4, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bc8:	3b01      	subs	r3, #1
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f8 feff 	bl	800d9ce <lwip_htonl>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	4621      	mov	r1, r4
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f7ff fe58 	bl	801488c <tcp_output_alloc_header>
 8014bdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d102      	bne.n	8014bea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014be4:	f04f 33ff 	mov.w	r3, #4294967295
 8014be8:	e010      	b.n	8014c0c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bea:	7abb      	ldrb	r3, [r7, #10]
 8014bec:	2200      	movs	r2, #0
 8014bee:	68f9      	ldr	r1, [r7, #12]
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7ff fe89 	bl	8014908 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014bf6:	687a      	ldr	r2, [r7, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	68f9      	ldr	r1, [r7, #12]
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f7ff fec0 	bl	8014984 <tcp_output_control_segment>
 8014c04:	4603      	mov	r3, r0
 8014c06:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014c08:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	3714      	adds	r7, #20
 8014c10:	46bd      	mov	sp, r7
 8014c12:	bd90      	pop	{r4, r7, pc}
 8014c14:	0801f2e4 	.word	0x0801f2e4
 8014c18:	0801fb1c 	.word	0x0801fb1c
 8014c1c:	0801f338 	.word	0x0801f338

08014c20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014c20:	b590      	push	{r4, r7, lr}
 8014c22:	b08b      	sub	sp, #44	; 0x2c
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c28:	2300      	movs	r3, #0
 8014c2a:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d106      	bne.n	8014c40 <tcp_zero_window_probe+0x20>
 8014c32:	4b4d      	ldr	r3, [pc, #308]	; (8014d68 <tcp_zero_window_probe+0x148>)
 8014c34:	f640 024f 	movw	r2, #2127	; 0x84f
 8014c38:	494c      	ldr	r1, [pc, #304]	; (8014d6c <tcp_zero_window_probe+0x14c>)
 8014c3a:	484d      	ldr	r0, [pc, #308]	; (8014d70 <tcp_zero_window_probe+0x150>)
 8014c3c:	f006 fa2a 	bl	801b094 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 8014c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d101      	bne.n	8014c50 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	e087      	b.n	8014d60 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014c56:	2bff      	cmp	r3, #255	; 0xff
 8014c58:	d007      	beq.n	8014c6a <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014c60:	3301      	adds	r3, #1
 8014c62:	b2da      	uxtb	r2, r3
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c6c:	691b      	ldr	r3, [r3, #16]
 8014c6e:	899b      	ldrh	r3, [r3, #12]
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7f8 fe96 	bl	800d9a4 <lwip_htons>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	b2db      	uxtb	r3, r3
 8014c7c:	f003 0301 	and.w	r3, r3, #1
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d005      	beq.n	8014c90 <tcp_zero_window_probe+0x70>
 8014c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c86:	891b      	ldrh	r3, [r3, #8]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d101      	bne.n	8014c90 <tcp_zero_window_probe+0x70>
 8014c8c:	2301      	movs	r3, #1
 8014c8e:	e000      	b.n	8014c92 <tcp_zero_window_probe+0x72>
 8014c90:	2300      	movs	r3, #0
 8014c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	bf0c      	ite	eq
 8014c9e:	2301      	moveq	r3, #1
 8014ca0:	2300      	movne	r3, #0
 8014ca2:	b2db      	uxtb	r3, r3
 8014ca4:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014ca6:	7cfb      	ldrb	r3, [r7, #19]
 8014ca8:	b299      	uxth	r1, r3
 8014caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cac:	691b      	ldr	r3, [r3, #16]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	8c3a      	ldrh	r2, [r7, #32]
 8014cb2:	6878      	ldr	r0, [r7, #4]
 8014cb4:	f7ff fdea 	bl	801488c <tcp_output_alloc_header>
 8014cb8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8014cba:	69fb      	ldr	r3, [r7, #28]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d102      	bne.n	8014cc6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cc4:	e04c      	b.n	8014d60 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014cc6:	69fb      	ldr	r3, [r7, #28]
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8014ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d011      	beq.n	8014cf8 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014cd4:	69bb      	ldr	r3, [r7, #24]
 8014cd6:	899b      	ldrh	r3, [r3, #12]
 8014cd8:	b29b      	uxth	r3, r3
 8014cda:	b21b      	sxth	r3, r3
 8014cdc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014ce0:	b21c      	sxth	r4, r3
 8014ce2:	2011      	movs	r0, #17
 8014ce4:	f7f8 fe5e 	bl	800d9a4 <lwip_htons>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	b21b      	sxth	r3, r3
 8014cec:	4323      	orrs	r3, r4
 8014cee:	b21b      	sxth	r3, r3
 8014cf0:	b29a      	uxth	r2, r3
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	819a      	strh	r2, [r3, #12]
 8014cf6:	e010      	b.n	8014d1a <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014cf8:	69fb      	ldr	r3, [r7, #28]
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	3314      	adds	r3, #20
 8014cfe:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d02:	6858      	ldr	r0, [r3, #4]
 8014d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d06:	685b      	ldr	r3, [r3, #4]
 8014d08:	891a      	ldrh	r2, [r3, #8]
 8014d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0c:	891b      	ldrh	r3, [r3, #8]
 8014d0e:	1ad3      	subs	r3, r2, r3
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	2201      	movs	r2, #1
 8014d14:	6979      	ldr	r1, [r7, #20]
 8014d16:	f7fa fd6d 	bl	800f7f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1c:	691b      	ldr	r3, [r3, #16]
 8014d1e:	685b      	ldr	r3, [r3, #4]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7f8 fe54 	bl	800d9ce <lwip_htonl>
 8014d26:	4603      	mov	r3, r0
 8014d28:	3301      	adds	r3, #1
 8014d2a:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	1ad3      	subs	r3, r2, r3
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	da02      	bge.n	8014d3e <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	68fa      	ldr	r2, [r7, #12]
 8014d3c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d3e:	7cfb      	ldrb	r3, [r7, #19]
 8014d40:	2200      	movs	r2, #0
 8014d42:	69f9      	ldr	r1, [r7, #28]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f7ff fddf 	bl	8014908 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d4a:	687a      	ldr	r2, [r7, #4]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	3304      	adds	r3, #4
 8014d50:	69f9      	ldr	r1, [r7, #28]
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f7ff fe16 	bl	8014984 <tcp_output_control_segment>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	372c      	adds	r7, #44	; 0x2c
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd90      	pop	{r4, r7, pc}
 8014d68:	0801f2e4 	.word	0x0801f2e4
 8014d6c:	0801fb38 	.word	0x0801fb38
 8014d70:	0801f338 	.word	0x0801f338

08014d74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014d7c:	f7fa fec0 	bl	800fb00 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014d80:	4b0a      	ldr	r3, [pc, #40]	; (8014dac <tcpip_tcp_timer+0x38>)
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d103      	bne.n	8014d90 <tcpip_tcp_timer+0x1c>
 8014d88:	4b09      	ldr	r3, [pc, #36]	; (8014db0 <tcpip_tcp_timer+0x3c>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d90:	2200      	movs	r2, #0
 8014d92:	4908      	ldr	r1, [pc, #32]	; (8014db4 <tcpip_tcp_timer+0x40>)
 8014d94:	20fa      	movs	r0, #250	; 0xfa
 8014d96:	f000 f8f3 	bl	8014f80 <sys_timeout>
 8014d9a:	e003      	b.n	8014da4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014d9c:	4b06      	ldr	r3, [pc, #24]	; (8014db8 <tcpip_tcp_timer+0x44>)
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
  }
}
 8014da2:	bf00      	nop
 8014da4:	bf00      	nop
 8014da6:	3708      	adds	r7, #8
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	20013d7c 	.word	0x20013d7c
 8014db0:	20013d80 	.word	0x20013d80
 8014db4:	08014d75 	.word	0x08014d75
 8014db8:	20013dcc 	.word	0x20013dcc

08014dbc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014dc0:	4b0a      	ldr	r3, [pc, #40]	; (8014dec <tcp_timer_needed+0x30>)
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d10f      	bne.n	8014de8 <tcp_timer_needed+0x2c>
 8014dc8:	4b09      	ldr	r3, [pc, #36]	; (8014df0 <tcp_timer_needed+0x34>)
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d103      	bne.n	8014dd8 <tcp_timer_needed+0x1c>
 8014dd0:	4b08      	ldr	r3, [pc, #32]	; (8014df4 <tcp_timer_needed+0x38>)
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d007      	beq.n	8014de8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014dd8:	4b04      	ldr	r3, [pc, #16]	; (8014dec <tcp_timer_needed+0x30>)
 8014dda:	2201      	movs	r2, #1
 8014ddc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014dde:	2200      	movs	r2, #0
 8014de0:	4905      	ldr	r1, [pc, #20]	; (8014df8 <tcp_timer_needed+0x3c>)
 8014de2:	20fa      	movs	r0, #250	; 0xfa
 8014de4:	f000 f8cc 	bl	8014f80 <sys_timeout>
  }
}
 8014de8:	bf00      	nop
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	20013dcc 	.word	0x20013dcc
 8014df0:	20013d7c 	.word	0x20013d7c
 8014df4:	20013d80 	.word	0x20013d80
 8014df8:	08014d75 	.word	0x08014d75

08014dfc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b086      	sub	sp, #24
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	60f8      	str	r0, [r7, #12]
 8014e04:	60b9      	str	r1, [r7, #8]
 8014e06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014e08:	200a      	movs	r0, #10
 8014e0a:	f7f9 fbf9 	bl	800e600 <memp_malloc>
 8014e0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d109      	bne.n	8014e2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d151      	bne.n	8014ec0 <sys_timeout_abs+0xc4>
 8014e1c:	4b2a      	ldr	r3, [pc, #168]	; (8014ec8 <sys_timeout_abs+0xcc>)
 8014e1e:	22be      	movs	r2, #190	; 0xbe
 8014e20:	492a      	ldr	r1, [pc, #168]	; (8014ecc <sys_timeout_abs+0xd0>)
 8014e22:	482b      	ldr	r0, [pc, #172]	; (8014ed0 <sys_timeout_abs+0xd4>)
 8014e24:	f006 f936 	bl	801b094 <iprintf>
    return;
 8014e28:	e04a      	b.n	8014ec0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	68ba      	ldr	r2, [r7, #8]
 8014e34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	68fa      	ldr	r2, [r7, #12]
 8014e40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014e42:	4b24      	ldr	r3, [pc, #144]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d103      	bne.n	8014e52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014e4a:	4a22      	ldr	r2, [pc, #136]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e4c:	693b      	ldr	r3, [r7, #16]
 8014e4e:	6013      	str	r3, [r2, #0]
    return;
 8014e50:	e037      	b.n	8014ec2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014e52:	693b      	ldr	r3, [r7, #16]
 8014e54:	685a      	ldr	r2, [r3, #4]
 8014e56:	4b1f      	ldr	r3, [pc, #124]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	685b      	ldr	r3, [r3, #4]
 8014e5c:	1ad3      	subs	r3, r2, r3
 8014e5e:	0fdb      	lsrs	r3, r3, #31
 8014e60:	f003 0301 	and.w	r3, r3, #1
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d007      	beq.n	8014e7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014e6a:	4b1a      	ldr	r3, [pc, #104]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014e72:	4a18      	ldr	r2, [pc, #96]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	6013      	str	r3, [r2, #0]
 8014e78:	e023      	b.n	8014ec2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e7a:	4b16      	ldr	r3, [pc, #88]	; (8014ed4 <sys_timeout_abs+0xd8>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	617b      	str	r3, [r7, #20]
 8014e80:	e01a      	b.n	8014eb8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d00b      	beq.n	8014ea2 <sys_timeout_abs+0xa6>
 8014e8a:	693b      	ldr	r3, [r7, #16]
 8014e8c:	685a      	ldr	r2, [r3, #4]
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	1ad3      	subs	r3, r2, r3
 8014e96:	0fdb      	lsrs	r3, r3, #31
 8014e98:	f003 0301 	and.w	r3, r3, #1
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d007      	beq.n	8014eb2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014ea2:	697b      	ldr	r3, [r7, #20]
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	693b      	ldr	r3, [r7, #16]
 8014ea8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	693a      	ldr	r2, [r7, #16]
 8014eae:	601a      	str	r2, [r3, #0]
        break;
 8014eb0:	e007      	b.n	8014ec2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	617b      	str	r3, [r7, #20]
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d1e1      	bne.n	8014e82 <sys_timeout_abs+0x86>
 8014ebe:	e000      	b.n	8014ec2 <sys_timeout_abs+0xc6>
    return;
 8014ec0:	bf00      	nop
      }
    }
  }
}
 8014ec2:	3718      	adds	r7, #24
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	bd80      	pop	{r7, pc}
 8014ec8:	0801fb5c 	.word	0x0801fb5c
 8014ecc:	0801fb90 	.word	0x0801fb90
 8014ed0:	0801fbd0 	.word	0x0801fbd0
 8014ed4:	20013dc4 	.word	0x20013dc4

08014ed8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b086      	sub	sp, #24
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ee4:	697b      	ldr	r3, [r7, #20]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	4798      	blx	r3

  now = sys_now();
 8014eea:	f7ee f9a1 	bl	8003230 <sys_now>
 8014eee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	681a      	ldr	r2, [r3, #0]
 8014ef4:	4b0f      	ldr	r3, [pc, #60]	; (8014f34 <lwip_cyclic_timer+0x5c>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	4413      	add	r3, r2
 8014efa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	1ad3      	subs	r3, r2, r3
 8014f02:	0fdb      	lsrs	r3, r3, #31
 8014f04:	f003 0301 	and.w	r3, r3, #1
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d009      	beq.n	8014f22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	693b      	ldr	r3, [r7, #16]
 8014f14:	4413      	add	r3, r2
 8014f16:	687a      	ldr	r2, [r7, #4]
 8014f18:	4907      	ldr	r1, [pc, #28]	; (8014f38 <lwip_cyclic_timer+0x60>)
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7ff ff6e 	bl	8014dfc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014f20:	e004      	b.n	8014f2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014f22:	687a      	ldr	r2, [r7, #4]
 8014f24:	4904      	ldr	r1, [pc, #16]	; (8014f38 <lwip_cyclic_timer+0x60>)
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f7ff ff68 	bl	8014dfc <sys_timeout_abs>
}
 8014f2c:	bf00      	nop
 8014f2e:	3718      	adds	r7, #24
 8014f30:	46bd      	mov	sp, r7
 8014f32:	bd80      	pop	{r7, pc}
 8014f34:	20013dc8 	.word	0x20013dc8
 8014f38:	08014ed9 	.word	0x08014ed9

08014f3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f42:	2301      	movs	r3, #1
 8014f44:	607b      	str	r3, [r7, #4]
 8014f46:	e00e      	b.n	8014f66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014f48:	4a0b      	ldr	r2, [pc, #44]	; (8014f78 <sys_timeouts_init+0x3c>)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	00db      	lsls	r3, r3, #3
 8014f54:	4a08      	ldr	r2, [pc, #32]	; (8014f78 <sys_timeouts_init+0x3c>)
 8014f56:	4413      	add	r3, r2
 8014f58:	461a      	mov	r2, r3
 8014f5a:	4908      	ldr	r1, [pc, #32]	; (8014f7c <sys_timeouts_init+0x40>)
 8014f5c:	f000 f810 	bl	8014f80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	3301      	adds	r3, #1
 8014f64:	607b      	str	r3, [r7, #4]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2b04      	cmp	r3, #4
 8014f6a:	d9ed      	bls.n	8014f48 <sys_timeouts_init+0xc>
  }
}
 8014f6c:	bf00      	nop
 8014f6e:	bf00      	nop
 8014f70:	3708      	adds	r7, #8
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	0806c7d8 	.word	0x0806c7d8
 8014f7c:	08014ed9 	.word	0x08014ed9

08014f80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f92:	d306      	bcc.n	8014fa2 <sys_timeout+0x22>
 8014f94:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <sys_timeout+0x40>)
 8014f96:	f240 1229 	movw	r2, #297	; 0x129
 8014f9a:	490a      	ldr	r1, [pc, #40]	; (8014fc4 <sys_timeout+0x44>)
 8014f9c:	480a      	ldr	r0, [pc, #40]	; (8014fc8 <sys_timeout+0x48>)
 8014f9e:	f006 f879 	bl	801b094 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014fa2:	f7ee f945 	bl	8003230 <sys_now>
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	4413      	add	r3, r2
 8014fac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014fae:	687a      	ldr	r2, [r7, #4]
 8014fb0:	68b9      	ldr	r1, [r7, #8]
 8014fb2:	6978      	ldr	r0, [r7, #20]
 8014fb4:	f7ff ff22 	bl	8014dfc <sys_timeout_abs>
#endif
}
 8014fb8:	bf00      	nop
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}
 8014fc0:	0801fb5c 	.word	0x0801fb5c
 8014fc4:	0801fbf8 	.word	0x0801fbf8
 8014fc8:	0801fbd0 	.word	0x0801fbd0

08014fcc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b084      	sub	sp, #16
 8014fd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014fd2:	f7ee f92d 	bl	8003230 <sys_now>
 8014fd6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014fd8:	4b17      	ldr	r3, [pc, #92]	; (8015038 <sys_check_timeouts+0x6c>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014fde:	68bb      	ldr	r3, [r7, #8]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d022      	beq.n	801502a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014fe4:	68bb      	ldr	r3, [r7, #8]
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	68fa      	ldr	r2, [r7, #12]
 8014fea:	1ad3      	subs	r3, r2, r3
 8014fec:	0fdb      	lsrs	r3, r3, #31
 8014fee:	f003 0301 	and.w	r3, r3, #1
 8014ff2:	b2db      	uxtb	r3, r3
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d11a      	bne.n	801502e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	4a0e      	ldr	r2, [pc, #56]	; (8015038 <sys_check_timeouts+0x6c>)
 8014ffe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	68db      	ldr	r3, [r3, #12]
 801500a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	4a0a      	ldr	r2, [pc, #40]	; (801503c <sys_check_timeouts+0x70>)
 8015012:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015014:	68b9      	ldr	r1, [r7, #8]
 8015016:	200a      	movs	r0, #10
 8015018:	f7f9 fb44 	bl	800e6a4 <memp_free>
    if (handler != NULL) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d0da      	beq.n	8014fd8 <sys_check_timeouts+0xc>
      handler(arg);
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	6838      	ldr	r0, [r7, #0]
 8015026:	4798      	blx	r3
  do {
 8015028:	e7d6      	b.n	8014fd8 <sys_check_timeouts+0xc>
      return;
 801502a:	bf00      	nop
 801502c:	e000      	b.n	8015030 <sys_check_timeouts+0x64>
      return;
 801502e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015030:	3710      	adds	r7, #16
 8015032:	46bd      	mov	sp, r7
 8015034:	bd80      	pop	{r7, pc}
 8015036:	bf00      	nop
 8015038:	20013dc4 	.word	0x20013dc4
 801503c:	20013dc8 	.word	0x20013dc8

08015040 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015046:	4b16      	ldr	r3, [pc, #88]	; (80150a0 <sys_timeouts_sleeptime+0x60>)
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d102      	bne.n	8015054 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801504e:	f04f 33ff 	mov.w	r3, #4294967295
 8015052:	e020      	b.n	8015096 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015054:	f7ee f8ec 	bl	8003230 <sys_now>
 8015058:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801505a:	4b11      	ldr	r3, [pc, #68]	; (80150a0 <sys_timeouts_sleeptime+0x60>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	685a      	ldr	r2, [r3, #4]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	1ad3      	subs	r3, r2, r3
 8015064:	0fdb      	lsrs	r3, r3, #31
 8015066:	f003 0301 	and.w	r3, r3, #1
 801506a:	b2db      	uxtb	r3, r3
 801506c:	2b00      	cmp	r3, #0
 801506e:	d001      	beq.n	8015074 <sys_timeouts_sleeptime+0x34>
    return 0;
 8015070:	2300      	movs	r3, #0
 8015072:	e010      	b.n	8015096 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015074:	4b0a      	ldr	r3, [pc, #40]	; (80150a0 <sys_timeouts_sleeptime+0x60>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	685a      	ldr	r2, [r3, #4]
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	1ad3      	subs	r3, r2, r3
 801507e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	da06      	bge.n	8015094 <sys_timeouts_sleeptime+0x54>
 8015086:	4b07      	ldr	r3, [pc, #28]	; (80150a4 <sys_timeouts_sleeptime+0x64>)
 8015088:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801508c:	4906      	ldr	r1, [pc, #24]	; (80150a8 <sys_timeouts_sleeptime+0x68>)
 801508e:	4807      	ldr	r0, [pc, #28]	; (80150ac <sys_timeouts_sleeptime+0x6c>)
 8015090:	f006 f800 	bl	801b094 <iprintf>
    return ret;
 8015094:	683b      	ldr	r3, [r7, #0]
  }
}
 8015096:	4618      	mov	r0, r3
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	20013dc4 	.word	0x20013dc4
 80150a4:	0801fb5c 	.word	0x0801fb5c
 80150a8:	0801fc30 	.word	0x0801fc30
 80150ac:	0801fbd0 	.word	0x0801fbd0

080150b0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80150b4:	f005 fa0c 	bl	801a4d0 <rand>
 80150b8:	4603      	mov	r3, r0
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80150c0:	b29b      	uxth	r3, r3
 80150c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	4b01      	ldr	r3, [pc, #4]	; (80150d0 <udp_init+0x20>)
 80150ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80150cc:	bf00      	nop
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	200000b8 	.word	0x200000b8

080150d4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80150da:	2300      	movs	r3, #0
 80150dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80150de:	4b17      	ldr	r3, [pc, #92]	; (801513c <udp_new_port+0x68>)
 80150e0:	881b      	ldrh	r3, [r3, #0]
 80150e2:	1c5a      	adds	r2, r3, #1
 80150e4:	b291      	uxth	r1, r2
 80150e6:	4a15      	ldr	r2, [pc, #84]	; (801513c <udp_new_port+0x68>)
 80150e8:	8011      	strh	r1, [r2, #0]
 80150ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d103      	bne.n	80150fa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80150f2:	4b12      	ldr	r3, [pc, #72]	; (801513c <udp_new_port+0x68>)
 80150f4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80150f8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150fa:	4b11      	ldr	r3, [pc, #68]	; (8015140 <udp_new_port+0x6c>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	e011      	b.n	8015126 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	8a5a      	ldrh	r2, [r3, #18]
 8015106:	4b0d      	ldr	r3, [pc, #52]	; (801513c <udp_new_port+0x68>)
 8015108:	881b      	ldrh	r3, [r3, #0]
 801510a:	429a      	cmp	r2, r3
 801510c:	d108      	bne.n	8015120 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801510e:	88fb      	ldrh	r3, [r7, #6]
 8015110:	3301      	adds	r3, #1
 8015112:	80fb      	strh	r3, [r7, #6]
 8015114:	88fb      	ldrh	r3, [r7, #6]
 8015116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801511a:	d3e0      	bcc.n	80150de <udp_new_port+0xa>
        return 0;
 801511c:	2300      	movs	r3, #0
 801511e:	e007      	b.n	8015130 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	68db      	ldr	r3, [r3, #12]
 8015124:	603b      	str	r3, [r7, #0]
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d1ea      	bne.n	8015102 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801512c:	4b03      	ldr	r3, [pc, #12]	; (801513c <udp_new_port+0x68>)
 801512e:	881b      	ldrh	r3, [r3, #0]
}
 8015130:	4618      	mov	r0, r3
 8015132:	370c      	adds	r7, #12
 8015134:	46bd      	mov	sp, r7
 8015136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801513a:	4770      	bx	lr
 801513c:	200000b8 	.word	0x200000b8
 8015140:	20013dd0 	.word	0x20013dd0

08015144 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	4613      	mov	r3, r2
 8015150:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d105      	bne.n	8015164 <udp_input_local_match+0x20>
 8015158:	4b27      	ldr	r3, [pc, #156]	; (80151f8 <udp_input_local_match+0xb4>)
 801515a:	2287      	movs	r2, #135	; 0x87
 801515c:	4927      	ldr	r1, [pc, #156]	; (80151fc <udp_input_local_match+0xb8>)
 801515e:	4828      	ldr	r0, [pc, #160]	; (8015200 <udp_input_local_match+0xbc>)
 8015160:	f005 ff98 	bl	801b094 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015164:	68bb      	ldr	r3, [r7, #8]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d105      	bne.n	8015176 <udp_input_local_match+0x32>
 801516a:	4b23      	ldr	r3, [pc, #140]	; (80151f8 <udp_input_local_match+0xb4>)
 801516c:	2288      	movs	r2, #136	; 0x88
 801516e:	4925      	ldr	r1, [pc, #148]	; (8015204 <udp_input_local_match+0xc0>)
 8015170:	4823      	ldr	r0, [pc, #140]	; (8015200 <udp_input_local_match+0xbc>)
 8015172:	f005 ff8f 	bl	801b094 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	7a1b      	ldrb	r3, [r3, #8]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d00b      	beq.n	8015196 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	7a1a      	ldrb	r2, [r3, #8]
 8015182:	4b21      	ldr	r3, [pc, #132]	; (8015208 <udp_input_local_match+0xc4>)
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801518a:	3301      	adds	r3, #1
 801518c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801518e:	429a      	cmp	r2, r3
 8015190:	d001      	beq.n	8015196 <udp_input_local_match+0x52>
    return 0;
 8015192:	2300      	movs	r3, #0
 8015194:	e02b      	b.n	80151ee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015196:	79fb      	ldrb	r3, [r7, #7]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d018      	beq.n	80151ce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d013      	beq.n	80151ca <udp_input_local_match+0x86>
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d00f      	beq.n	80151ca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151aa:	4b17      	ldr	r3, [pc, #92]	; (8015208 <udp_input_local_match+0xc4>)
 80151ac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80151ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151b2:	d00a      	beq.n	80151ca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	681a      	ldr	r2, [r3, #0]
 80151b8:	4b13      	ldr	r3, [pc, #76]	; (8015208 <udp_input_local_match+0xc4>)
 80151ba:	695b      	ldr	r3, [r3, #20]
 80151bc:	405a      	eors	r2, r3
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	3308      	adds	r3, #8
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d110      	bne.n	80151ec <udp_input_local_match+0xa8>
          return 1;
 80151ca:	2301      	movs	r3, #1
 80151cc:	e00f      	b.n	80151ee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d009      	beq.n	80151e8 <udp_input_local_match+0xa4>
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d005      	beq.n	80151e8 <udp_input_local_match+0xa4>
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	681a      	ldr	r2, [r3, #0]
 80151e0:	4b09      	ldr	r3, [pc, #36]	; (8015208 <udp_input_local_match+0xc4>)
 80151e2:	695b      	ldr	r3, [r3, #20]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d101      	bne.n	80151ec <udp_input_local_match+0xa8>
        return 1;
 80151e8:	2301      	movs	r3, #1
 80151ea:	e000      	b.n	80151ee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
 80151f6:	bf00      	nop
 80151f8:	0801fc44 	.word	0x0801fc44
 80151fc:	0801fc74 	.word	0x0801fc74
 8015200:	0801fc98 	.word	0x0801fc98
 8015204:	0801fcc0 	.word	0x0801fcc0
 8015208:	2000a2fc 	.word	0x2000a2fc

0801520c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801520c:	b590      	push	{r4, r7, lr}
 801520e:	b08d      	sub	sp, #52	; 0x34
 8015210:	af02      	add	r7, sp, #8
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015216:	2300      	movs	r3, #0
 8015218:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d105      	bne.n	801522c <udp_input+0x20>
 8015220:	4b87      	ldr	r3, [pc, #540]	; (8015440 <udp_input+0x234>)
 8015222:	22cf      	movs	r2, #207	; 0xcf
 8015224:	4987      	ldr	r1, [pc, #540]	; (8015444 <udp_input+0x238>)
 8015226:	4888      	ldr	r0, [pc, #544]	; (8015448 <udp_input+0x23c>)
 8015228:	f005 ff34 	bl	801b094 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801522c:	683b      	ldr	r3, [r7, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d105      	bne.n	801523e <udp_input+0x32>
 8015232:	4b83      	ldr	r3, [pc, #524]	; (8015440 <udp_input+0x234>)
 8015234:	22d0      	movs	r2, #208	; 0xd0
 8015236:	4985      	ldr	r1, [pc, #532]	; (801544c <udp_input+0x240>)
 8015238:	4883      	ldr	r0, [pc, #524]	; (8015448 <udp_input+0x23c>)
 801523a:	f005 ff2b 	bl	801b094 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	895b      	ldrh	r3, [r3, #10]
 8015242:	2b07      	cmp	r3, #7
 8015244:	d803      	bhi.n	801524e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f7fa f8ce 	bl	800f3e8 <pbuf_free>
    goto end;
 801524c:	e0f0      	b.n	8015430 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	685b      	ldr	r3, [r3, #4]
 8015252:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015254:	4b7e      	ldr	r3, [pc, #504]	; (8015450 <udp_input+0x244>)
 8015256:	695b      	ldr	r3, [r3, #20]
 8015258:	4a7d      	ldr	r2, [pc, #500]	; (8015450 <udp_input+0x244>)
 801525a:	6812      	ldr	r2, [r2, #0]
 801525c:	4611      	mov	r1, r2
 801525e:	4618      	mov	r0, r3
 8015260:	f003 ffe8 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8015264:	4603      	mov	r3, r0
 8015266:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015268:	697b      	ldr	r3, [r7, #20]
 801526a:	881b      	ldrh	r3, [r3, #0]
 801526c:	b29b      	uxth	r3, r3
 801526e:	4618      	mov	r0, r3
 8015270:	f7f8 fb98 	bl	800d9a4 <lwip_htons>
 8015274:	4603      	mov	r3, r0
 8015276:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015278:	697b      	ldr	r3, [r7, #20]
 801527a:	885b      	ldrh	r3, [r3, #2]
 801527c:	b29b      	uxth	r3, r3
 801527e:	4618      	mov	r0, r3
 8015280:	f7f8 fb90 	bl	800d9a4 <lwip_htons>
 8015284:	4603      	mov	r3, r0
 8015286:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015288:	2300      	movs	r3, #0
 801528a:	61fb      	str	r3, [r7, #28]
  prev = NULL;
 801528c:	2300      	movs	r3, #0
 801528e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015290:	2300      	movs	r3, #0
 8015292:	627b      	str	r3, [r7, #36]	; 0x24
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015294:	4b6f      	ldr	r3, [pc, #444]	; (8015454 <udp_input+0x248>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	61fb      	str	r3, [r7, #28]
 801529a:	e054      	b.n	8015346 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	8a5b      	ldrh	r3, [r3, #18]
 80152a0:	89fa      	ldrh	r2, [r7, #14]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d14a      	bne.n	801533c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80152a6:	7cfb      	ldrb	r3, [r7, #19]
 80152a8:	461a      	mov	r2, r3
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	69f8      	ldr	r0, [r7, #28]
 80152ae:	f7ff ff49 	bl	8015144 <udp_input_local_match>
 80152b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d041      	beq.n	801533c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	7c1b      	ldrb	r3, [r3, #16]
 80152bc:	f003 0304 	and.w	r3, r3, #4
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d11d      	bne.n	8015300 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80152c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d102      	bne.n	80152d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	627b      	str	r3, [r7, #36]	; 0x24
 80152ce:	e017      	b.n	8015300 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80152d0:	7cfb      	ldrb	r3, [r7, #19]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d014      	beq.n	8015300 <udp_input+0xf4>
 80152d6:	4b5e      	ldr	r3, [pc, #376]	; (8015450 <udp_input+0x244>)
 80152d8:	695b      	ldr	r3, [r3, #20]
 80152da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152de:	d10f      	bne.n	8015300 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80152e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e2:	681a      	ldr	r2, [r3, #0]
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	3304      	adds	r3, #4
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d008      	beq.n	8015300 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	681a      	ldr	r2, [r3, #0]
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	3304      	adds	r3, #4
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	429a      	cmp	r2, r3
 80152fa:	d101      	bne.n	8015300 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015300:	69fb      	ldr	r3, [r7, #28]
 8015302:	8a9b      	ldrh	r3, [r3, #20]
 8015304:	8a3a      	ldrh	r2, [r7, #16]
 8015306:	429a      	cmp	r2, r3
 8015308:	d118      	bne.n	801533c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	685a      	ldr	r2, [r3, #4]
 8015316:	4b4e      	ldr	r3, [pc, #312]	; (8015450 <udp_input+0x244>)
 8015318:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801531a:	429a      	cmp	r2, r3
 801531c:	d10e      	bne.n	801533c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801531e:	6a3b      	ldr	r3, [r7, #32]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d014      	beq.n	801534e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015324:	69fb      	ldr	r3, [r7, #28]
 8015326:	68da      	ldr	r2, [r3, #12]
 8015328:	6a3b      	ldr	r3, [r7, #32]
 801532a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801532c:	4b49      	ldr	r3, [pc, #292]	; (8015454 <udp_input+0x248>)
 801532e:	681a      	ldr	r2, [r3, #0]
 8015330:	69fb      	ldr	r3, [r7, #28]
 8015332:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015334:	4a47      	ldr	r2, [pc, #284]	; (8015454 <udp_input+0x248>)
 8015336:	69fb      	ldr	r3, [r7, #28]
 8015338:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801533a:	e008      	b.n	801534e <udp_input+0x142>
      }
    }

    prev = pcb;
 801533c:	69fb      	ldr	r3, [r7, #28]
 801533e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	68db      	ldr	r3, [r3, #12]
 8015344:	61fb      	str	r3, [r7, #28]
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1a7      	bne.n	801529c <udp_input+0x90>
 801534c:	e000      	b.n	8015350 <udp_input+0x144>
        break;
 801534e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015350:	69fb      	ldr	r3, [r7, #28]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d101      	bne.n	801535a <udp_input+0x14e>
    pcb = uncon_pcb;
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015358:	61fb      	str	r3, [r7, #28]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801535a:	69fb      	ldr	r3, [r7, #28]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d002      	beq.n	8015366 <udp_input+0x15a>
    for_us = 1;
 8015360:	2301      	movs	r3, #1
 8015362:	76fb      	strb	r3, [r7, #27]
 8015364:	e00a      	b.n	801537c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	3304      	adds	r3, #4
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	4b38      	ldr	r3, [pc, #224]	; (8015450 <udp_input+0x244>)
 801536e:	695b      	ldr	r3, [r3, #20]
 8015370:	429a      	cmp	r2, r3
 8015372:	bf0c      	ite	eq
 8015374:	2301      	moveq	r3, #1
 8015376:	2300      	movne	r3, #0
 8015378:	b2db      	uxtb	r3, r3
 801537a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801537c:	7efb      	ldrb	r3, [r7, #27]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d052      	beq.n	8015428 <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	88db      	ldrh	r3, [r3, #6]
 8015386:	b29b      	uxth	r3, r3
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00b      	beq.n	80153a4 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	891a      	ldrh	r2, [r3, #8]
 8015390:	4b31      	ldr	r3, [pc, #196]	; (8015458 <udp_input+0x24c>)
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	4b31      	ldr	r3, [pc, #196]	; (801545c <udp_input+0x250>)
 8015396:	2111      	movs	r1, #17
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f7f8 fc35 	bl	800dc08 <ip_chksum_pseudo>
 801539e:	4603      	mov	r3, r0
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d146      	bne.n	8015432 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80153a4:	2108      	movs	r1, #8
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7f9 ff98 	bl	800f2dc <pbuf_remove_header>
 80153ac:	4603      	mov	r3, r0
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d00a      	beq.n	80153c8 <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80153b2:	4b23      	ldr	r3, [pc, #140]	; (8015440 <udp_input+0x234>)
 80153b4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80153b8:	4929      	ldr	r1, [pc, #164]	; (8015460 <udp_input+0x254>)
 80153ba:	4823      	ldr	r0, [pc, #140]	; (8015448 <udp_input+0x23c>)
 80153bc:	f005 fe6a 	bl	801b094 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7fa f811 	bl	800f3e8 <pbuf_free>
      goto end;
 80153c6:	e033      	b.n	8015430 <udp_input+0x224>
    }

    if (pcb != NULL) {
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d012      	beq.n	80153f4 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80153ce:	69fb      	ldr	r3, [r7, #28]
 80153d0:	699b      	ldr	r3, [r3, #24]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d00a      	beq.n	80153ec <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80153d6:	69fb      	ldr	r3, [r7, #28]
 80153d8:	699c      	ldr	r4, [r3, #24]
 80153da:	69fb      	ldr	r3, [r7, #28]
 80153dc:	69d8      	ldr	r0, [r3, #28]
 80153de:	8a3b      	ldrh	r3, [r7, #16]
 80153e0:	9300      	str	r3, [sp, #0]
 80153e2:	4b1e      	ldr	r3, [pc, #120]	; (801545c <udp_input+0x250>)
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	69f9      	ldr	r1, [r7, #28]
 80153e8:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80153ea:	e026      	b.n	801543a <udp_input+0x22e>
        pbuf_free(p);
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7f9 fffb 	bl	800f3e8 <pbuf_free>
        goto end;
 80153f2:	e01d      	b.n	8015430 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80153f4:	7cfb      	ldrb	r3, [r7, #19]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d112      	bne.n	8015420 <udp_input+0x214>
 80153fa:	4b15      	ldr	r3, [pc, #84]	; (8015450 <udp_input+0x244>)
 80153fc:	695b      	ldr	r3, [r3, #20]
 80153fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015402:	2be0      	cmp	r3, #224	; 0xe0
 8015404:	d00c      	beq.n	8015420 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015406:	4b12      	ldr	r3, [pc, #72]	; (8015450 <udp_input+0x244>)
 8015408:	899b      	ldrh	r3, [r3, #12]
 801540a:	3308      	adds	r3, #8
 801540c:	b29b      	uxth	r3, r3
 801540e:	b21b      	sxth	r3, r3
 8015410:	4619      	mov	r1, r3
 8015412:	6878      	ldr	r0, [r7, #4]
 8015414:	f7f9 ffd5 	bl	800f3c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015418:	2103      	movs	r1, #3
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f003 fb50 	bl	8018ac0 <icmp_dest_unreach>
      pbuf_free(p);
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f7f9 ffe1 	bl	800f3e8 <pbuf_free>
  return;
 8015426:	e008      	b.n	801543a <udp_input+0x22e>
    pbuf_free(p);
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7f9 ffdd 	bl	800f3e8 <pbuf_free>
  return;
 801542e:	e004      	b.n	801543a <udp_input+0x22e>
 8015430:	e003      	b.n	801543a <udp_input+0x22e>
            goto chkerr;
 8015432:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7f9 ffd7 	bl	800f3e8 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801543a:	372c      	adds	r7, #44	; 0x2c
 801543c:	46bd      	mov	sp, r7
 801543e:	bd90      	pop	{r4, r7, pc}
 8015440:	0801fc44 	.word	0x0801fc44
 8015444:	0801fce8 	.word	0x0801fce8
 8015448:	0801fc98 	.word	0x0801fc98
 801544c:	0801fd00 	.word	0x0801fd00
 8015450:	2000a2fc 	.word	0x2000a2fc
 8015454:	20013dd0 	.word	0x20013dd0
 8015458:	2000a310 	.word	0x2000a310
 801545c:	2000a30c 	.word	0x2000a30c
 8015460:	0801fd1c 	.word	0x0801fd1c

08015464 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b088      	sub	sp, #32
 8015468:	af02      	add	r7, sp, #8
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	60b9      	str	r1, [r7, #8]
 801546e:	607a      	str	r2, [r7, #4]
 8015470:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d109      	bne.n	801548c <udp_sendto+0x28>
 8015478:	4b23      	ldr	r3, [pc, #140]	; (8015508 <udp_sendto+0xa4>)
 801547a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801547e:	4923      	ldr	r1, [pc, #140]	; (801550c <udp_sendto+0xa8>)
 8015480:	4823      	ldr	r0, [pc, #140]	; (8015510 <udp_sendto+0xac>)
 8015482:	f005 fe07 	bl	801b094 <iprintf>
 8015486:	f06f 030f 	mvn.w	r3, #15
 801548a:	e038      	b.n	80154fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801548c:	68bb      	ldr	r3, [r7, #8]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d109      	bne.n	80154a6 <udp_sendto+0x42>
 8015492:	4b1d      	ldr	r3, [pc, #116]	; (8015508 <udp_sendto+0xa4>)
 8015494:	f240 2219 	movw	r2, #537	; 0x219
 8015498:	491e      	ldr	r1, [pc, #120]	; (8015514 <udp_sendto+0xb0>)
 801549a:	481d      	ldr	r0, [pc, #116]	; (8015510 <udp_sendto+0xac>)
 801549c:	f005 fdfa 	bl	801b094 <iprintf>
 80154a0:	f06f 030f 	mvn.w	r3, #15
 80154a4:	e02b      	b.n	80154fe <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d109      	bne.n	80154c0 <udp_sendto+0x5c>
 80154ac:	4b16      	ldr	r3, [pc, #88]	; (8015508 <udp_sendto+0xa4>)
 80154ae:	f240 221a 	movw	r2, #538	; 0x21a
 80154b2:	4919      	ldr	r1, [pc, #100]	; (8015518 <udp_sendto+0xb4>)
 80154b4:	4816      	ldr	r0, [pc, #88]	; (8015510 <udp_sendto+0xac>)
 80154b6:	f005 fded 	bl	801b094 <iprintf>
 80154ba:	f06f 030f 	mvn.w	r3, #15
 80154be:	e01e      	b.n	80154fe <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	7a1b      	ldrb	r3, [r3, #8]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d006      	beq.n	80154d6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	7a1b      	ldrb	r3, [r3, #8]
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f9 fbf9 	bl	800ecc4 <netif_get_by_index>
 80154d2:	6178      	str	r0, [r7, #20]
 80154d4:	e003      	b.n	80154de <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	f003 fb86 	bl	8018be8 <ip4_route>
 80154dc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d102      	bne.n	80154ea <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80154e4:	f06f 0303 	mvn.w	r3, #3
 80154e8:	e009      	b.n	80154fe <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80154ea:	887a      	ldrh	r2, [r7, #2]
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	9300      	str	r3, [sp, #0]
 80154f0:	4613      	mov	r3, r2
 80154f2:	687a      	ldr	r2, [r7, #4]
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f000 f810 	bl	801551c <udp_sendto_if>
 80154fc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3718      	adds	r7, #24
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	0801fc44 	.word	0x0801fc44
 801550c:	0801fd68 	.word	0x0801fd68
 8015510:	0801fc98 	.word	0x0801fc98
 8015514:	0801fd80 	.word	0x0801fd80
 8015518:	0801fd9c 	.word	0x0801fd9c

0801551c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b088      	sub	sp, #32
 8015520:	af02      	add	r7, sp, #8
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d109      	bne.n	8015544 <udp_sendto_if+0x28>
 8015530:	4b2e      	ldr	r3, [pc, #184]	; (80155ec <udp_sendto_if+0xd0>)
 8015532:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015536:	492e      	ldr	r1, [pc, #184]	; (80155f0 <udp_sendto_if+0xd4>)
 8015538:	482e      	ldr	r0, [pc, #184]	; (80155f4 <udp_sendto_if+0xd8>)
 801553a:	f005 fdab 	bl	801b094 <iprintf>
 801553e:	f06f 030f 	mvn.w	r3, #15
 8015542:	e04f      	b.n	80155e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d109      	bne.n	801555e <udp_sendto_if+0x42>
 801554a:	4b28      	ldr	r3, [pc, #160]	; (80155ec <udp_sendto_if+0xd0>)
 801554c:	f240 2281 	movw	r2, #641	; 0x281
 8015550:	4929      	ldr	r1, [pc, #164]	; (80155f8 <udp_sendto_if+0xdc>)
 8015552:	4828      	ldr	r0, [pc, #160]	; (80155f4 <udp_sendto_if+0xd8>)
 8015554:	f005 fd9e 	bl	801b094 <iprintf>
 8015558:	f06f 030f 	mvn.w	r3, #15
 801555c:	e042      	b.n	80155e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d109      	bne.n	8015578 <udp_sendto_if+0x5c>
 8015564:	4b21      	ldr	r3, [pc, #132]	; (80155ec <udp_sendto_if+0xd0>)
 8015566:	f240 2282 	movw	r2, #642	; 0x282
 801556a:	4924      	ldr	r1, [pc, #144]	; (80155fc <udp_sendto_if+0xe0>)
 801556c:	4821      	ldr	r0, [pc, #132]	; (80155f4 <udp_sendto_if+0xd8>)
 801556e:	f005 fd91 	bl	801b094 <iprintf>
 8015572:	f06f 030f 	mvn.w	r3, #15
 8015576:	e035      	b.n	80155e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015578:	6a3b      	ldr	r3, [r7, #32]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d109      	bne.n	8015592 <udp_sendto_if+0x76>
 801557e:	4b1b      	ldr	r3, [pc, #108]	; (80155ec <udp_sendto_if+0xd0>)
 8015580:	f240 2283 	movw	r2, #643	; 0x283
 8015584:	491e      	ldr	r1, [pc, #120]	; (8015600 <udp_sendto_if+0xe4>)
 8015586:	481b      	ldr	r0, [pc, #108]	; (80155f4 <udp_sendto_if+0xd8>)
 8015588:	f005 fd84 	bl	801b094 <iprintf>
 801558c:	f06f 030f 	mvn.w	r3, #15
 8015590:	e028      	b.n	80155e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d009      	beq.n	80155ac <udp_sendto_if+0x90>
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d005      	beq.n	80155ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80155a8:	2be0      	cmp	r3, #224	; 0xe0
 80155aa:	d103      	bne.n	80155b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80155ac:	6a3b      	ldr	r3, [r7, #32]
 80155ae:	3304      	adds	r3, #4
 80155b0:	617b      	str	r3, [r7, #20]
 80155b2:	e00b      	b.n	80155cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	6a3b      	ldr	r3, [r7, #32]
 80155ba:	3304      	adds	r3, #4
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d002      	beq.n	80155c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80155c2:	f06f 0303 	mvn.w	r3, #3
 80155c6:	e00d      	b.n	80155e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80155cc:	887a      	ldrh	r2, [r7, #2]
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	9301      	str	r3, [sp, #4]
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	9300      	str	r3, [sp, #0]
 80155d6:	4613      	mov	r3, r2
 80155d8:	687a      	ldr	r2, [r7, #4]
 80155da:	68b9      	ldr	r1, [r7, #8]
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f000 f811 	bl	8015604 <udp_sendto_if_src>
 80155e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}
 80155ec:	0801fc44 	.word	0x0801fc44
 80155f0:	0801fdb8 	.word	0x0801fdb8
 80155f4:	0801fc98 	.word	0x0801fc98
 80155f8:	0801fdd4 	.word	0x0801fdd4
 80155fc:	0801fdf0 	.word	0x0801fdf0
 8015600:	0801fe10 	.word	0x0801fe10

08015604 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b08c      	sub	sp, #48	; 0x30
 8015608:	af04      	add	r7, sp, #16
 801560a:	60f8      	str	r0, [r7, #12]
 801560c:	60b9      	str	r1, [r7, #8]
 801560e:	607a      	str	r2, [r7, #4]
 8015610:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	2b00      	cmp	r3, #0
 8015616:	d109      	bne.n	801562c <udp_sendto_if_src+0x28>
 8015618:	4b65      	ldr	r3, [pc, #404]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 801561a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801561e:	4965      	ldr	r1, [pc, #404]	; (80157b4 <udp_sendto_if_src+0x1b0>)
 8015620:	4865      	ldr	r0, [pc, #404]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 8015622:	f005 fd37 	bl	801b094 <iprintf>
 8015626:	f06f 030f 	mvn.w	r3, #15
 801562a:	e0bc      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801562c:	68bb      	ldr	r3, [r7, #8]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d109      	bne.n	8015646 <udp_sendto_if_src+0x42>
 8015632:	4b5f      	ldr	r3, [pc, #380]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 8015634:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015638:	4960      	ldr	r1, [pc, #384]	; (80157bc <udp_sendto_if_src+0x1b8>)
 801563a:	485f      	ldr	r0, [pc, #380]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 801563c:	f005 fd2a 	bl	801b094 <iprintf>
 8015640:	f06f 030f 	mvn.w	r3, #15
 8015644:	e0af      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d109      	bne.n	8015660 <udp_sendto_if_src+0x5c>
 801564c:	4b58      	ldr	r3, [pc, #352]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 801564e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015652:	495b      	ldr	r1, [pc, #364]	; (80157c0 <udp_sendto_if_src+0x1bc>)
 8015654:	4858      	ldr	r0, [pc, #352]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 8015656:	f005 fd1d 	bl	801b094 <iprintf>
 801565a:	f06f 030f 	mvn.w	r3, #15
 801565e:	e0a2      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015662:	2b00      	cmp	r3, #0
 8015664:	d109      	bne.n	801567a <udp_sendto_if_src+0x76>
 8015666:	4b52      	ldr	r3, [pc, #328]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 8015668:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801566c:	4955      	ldr	r1, [pc, #340]	; (80157c4 <udp_sendto_if_src+0x1c0>)
 801566e:	4852      	ldr	r0, [pc, #328]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 8015670:	f005 fd10 	bl	801b094 <iprintf>
 8015674:	f06f 030f 	mvn.w	r3, #15
 8015678:	e095      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567c:	2b00      	cmp	r3, #0
 801567e:	d109      	bne.n	8015694 <udp_sendto_if_src+0x90>
 8015680:	4b4b      	ldr	r3, [pc, #300]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 8015682:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015686:	4950      	ldr	r1, [pc, #320]	; (80157c8 <udp_sendto_if_src+0x1c4>)
 8015688:	484b      	ldr	r0, [pc, #300]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 801568a:	f005 fd03 	bl	801b094 <iprintf>
 801568e:	f06f 030f 	mvn.w	r3, #15
 8015692:	e088      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	8a5b      	ldrh	r3, [r3, #18]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d10f      	bne.n	80156bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801569c:	68f9      	ldr	r1, [r7, #12]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	8a5b      	ldrh	r3, [r3, #18]
 80156a2:	461a      	mov	r2, r3
 80156a4:	68f8      	ldr	r0, [r7, #12]
 80156a6:	f000 f893 	bl	80157d0 <udp_bind>
 80156aa:	4603      	mov	r3, r0
 80156ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80156ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d002      	beq.n	80156bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80156b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80156ba:	e074      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80156bc:	68bb      	ldr	r3, [r7, #8]
 80156be:	891b      	ldrh	r3, [r3, #8]
 80156c0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80156c4:	4293      	cmp	r3, r2
 80156c6:	d902      	bls.n	80156ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80156c8:	f04f 33ff 	mov.w	r3, #4294967295
 80156cc:	e06b      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80156ce:	2108      	movs	r1, #8
 80156d0:	68b8      	ldr	r0, [r7, #8]
 80156d2:	f7f9 fdf3 	bl	800f2bc <pbuf_add_header>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d015      	beq.n	8015708 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80156dc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156e0:	2108      	movs	r1, #8
 80156e2:	2022      	movs	r0, #34	; 0x22
 80156e4:	f7f9 fb98 	bl	800ee18 <pbuf_alloc>
 80156e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d102      	bne.n	80156f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80156f0:	f04f 33ff 	mov.w	r3, #4294967295
 80156f4:	e057      	b.n	80157a6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	891b      	ldrh	r3, [r3, #8]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d006      	beq.n	801570c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80156fe:	68b9      	ldr	r1, [r7, #8]
 8015700:	69f8      	ldr	r0, [r7, #28]
 8015702:	f7f9 ff95 	bl	800f630 <pbuf_chain>
 8015706:	e001      	b.n	801570c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	895b      	ldrh	r3, [r3, #10]
 8015710:	2b07      	cmp	r3, #7
 8015712:	d806      	bhi.n	8015722 <udp_sendto_if_src+0x11e>
 8015714:	4b26      	ldr	r3, [pc, #152]	; (80157b0 <udp_sendto_if_src+0x1ac>)
 8015716:	f240 320d 	movw	r2, #781	; 0x30d
 801571a:	492c      	ldr	r1, [pc, #176]	; (80157cc <udp_sendto_if_src+0x1c8>)
 801571c:	4826      	ldr	r0, [pc, #152]	; (80157b8 <udp_sendto_if_src+0x1b4>)
 801571e:	f005 fcb9 	bl	801b094 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	8a5b      	ldrh	r3, [r3, #18]
 801572c:	4618      	mov	r0, r3
 801572e:	f7f8 f939 	bl	800d9a4 <lwip_htons>
 8015732:	4603      	mov	r3, r0
 8015734:	461a      	mov	r2, r3
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801573a:	887b      	ldrh	r3, [r7, #2]
 801573c:	4618      	mov	r0, r3
 801573e:	f7f8 f931 	bl	800d9a4 <lwip_htons>
 8015742:	4603      	mov	r3, r0
 8015744:	461a      	mov	r2, r3
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	2200      	movs	r2, #0
 801574e:	719a      	strb	r2, [r3, #6]
 8015750:	2200      	movs	r2, #0
 8015752:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	891b      	ldrh	r3, [r3, #8]
 8015758:	4618      	mov	r0, r3
 801575a:	f7f8 f923 	bl	800d9a4 <lwip_htons>
 801575e:	4603      	mov	r3, r0
 8015760:	461a      	mov	r2, r3
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015766:	2311      	movs	r3, #17
 8015768:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	7adb      	ldrb	r3, [r3, #11]
 801576e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	7a9b      	ldrb	r3, [r3, #10]
 8015774:	7cb9      	ldrb	r1, [r7, #18]
 8015776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015778:	9202      	str	r2, [sp, #8]
 801577a:	7cfa      	ldrb	r2, [r7, #19]
 801577c:	9201      	str	r2, [sp, #4]
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	460b      	mov	r3, r1
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015786:	69f8      	ldr	r0, [r7, #28]
 8015788:	f003 fc40 	bl	801900c <ip4_output_if_src>
 801578c:	4603      	mov	r3, r0
 801578e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015790:	69fa      	ldr	r2, [r7, #28]
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	429a      	cmp	r2, r3
 8015796:	d004      	beq.n	80157a2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015798:	69f8      	ldr	r0, [r7, #28]
 801579a:	f7f9 fe25 	bl	800f3e8 <pbuf_free>
    q = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80157a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80157a6:	4618      	mov	r0, r3
 80157a8:	3720      	adds	r7, #32
 80157aa:	46bd      	mov	sp, r7
 80157ac:	bd80      	pop	{r7, pc}
 80157ae:	bf00      	nop
 80157b0:	0801fc44 	.word	0x0801fc44
 80157b4:	0801fe30 	.word	0x0801fe30
 80157b8:	0801fc98 	.word	0x0801fc98
 80157bc:	0801fe50 	.word	0x0801fe50
 80157c0:	0801fe70 	.word	0x0801fe70
 80157c4:	0801fe94 	.word	0x0801fe94
 80157c8:	0801feb8 	.word	0x0801feb8
 80157cc:	0801fedc 	.word	0x0801fedc

080157d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b086      	sub	sp, #24
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	60f8      	str	r0, [r7, #12]
 80157d8:	60b9      	str	r1, [r7, #8]
 80157da:	4613      	mov	r3, r2
 80157dc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d101      	bne.n	80157e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80157e4:	4b39      	ldr	r3, [pc, #228]	; (80158cc <udp_bind+0xfc>)
 80157e6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d109      	bne.n	8015802 <udp_bind+0x32>
 80157ee:	4b38      	ldr	r3, [pc, #224]	; (80158d0 <udp_bind+0x100>)
 80157f0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80157f4:	4937      	ldr	r1, [pc, #220]	; (80158d4 <udp_bind+0x104>)
 80157f6:	4838      	ldr	r0, [pc, #224]	; (80158d8 <udp_bind+0x108>)
 80157f8:	f005 fc4c 	bl	801b094 <iprintf>
 80157fc:	f06f 030f 	mvn.w	r3, #15
 8015800:	e060      	b.n	80158c4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015802:	2300      	movs	r3, #0
 8015804:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015806:	4b35      	ldr	r3, [pc, #212]	; (80158dc <udp_bind+0x10c>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	617b      	str	r3, [r7, #20]
 801580c:	e009      	b.n	8015822 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801580e:	68fa      	ldr	r2, [r7, #12]
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	429a      	cmp	r2, r3
 8015814:	d102      	bne.n	801581c <udp_bind+0x4c>
      rebind = 1;
 8015816:	2301      	movs	r3, #1
 8015818:	74fb      	strb	r3, [r7, #19]
      break;
 801581a:	e005      	b.n	8015828 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801581c:	697b      	ldr	r3, [r7, #20]
 801581e:	68db      	ldr	r3, [r3, #12]
 8015820:	617b      	str	r3, [r7, #20]
 8015822:	697b      	ldr	r3, [r7, #20]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d1f2      	bne.n	801580e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015828:	88fb      	ldrh	r3, [r7, #6]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d109      	bne.n	8015842 <udp_bind+0x72>
    port = udp_new_port();
 801582e:	f7ff fc51 	bl	80150d4 <udp_new_port>
 8015832:	4603      	mov	r3, r0
 8015834:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015836:	88fb      	ldrh	r3, [r7, #6]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d12c      	bne.n	8015896 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801583c:	f06f 0307 	mvn.w	r3, #7
 8015840:	e040      	b.n	80158c4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015842:	4b26      	ldr	r3, [pc, #152]	; (80158dc <udp_bind+0x10c>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	617b      	str	r3, [r7, #20]
 8015848:	e022      	b.n	8015890 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801584a:	68fa      	ldr	r2, [r7, #12]
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	429a      	cmp	r2, r3
 8015850:	d01b      	beq.n	801588a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	8a5b      	ldrh	r3, [r3, #18]
 8015856:	88fa      	ldrh	r2, [r7, #6]
 8015858:	429a      	cmp	r2, r3
 801585a:	d116      	bne.n	801588a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015864:	429a      	cmp	r2, r3
 8015866:	d00d      	beq.n	8015884 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d00a      	beq.n	8015884 <udp_bind+0xb4>
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d006      	beq.n	8015884 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015876:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015878:	2b00      	cmp	r3, #0
 801587a:	d003      	beq.n	8015884 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d102      	bne.n	801588a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015884:	f06f 0307 	mvn.w	r3, #7
 8015888:	e01c      	b.n	80158c4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	617b      	str	r3, [r7, #20]
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d1d9      	bne.n	801584a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	2b00      	cmp	r3, #0
 801589a:	d002      	beq.n	80158a2 <udp_bind+0xd2>
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	e000      	b.n	80158a4 <udp_bind+0xd4>
 80158a2:	2300      	movs	r3, #0
 80158a4:	68fa      	ldr	r2, [r7, #12]
 80158a6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	88fa      	ldrh	r2, [r7, #6]
 80158ac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80158ae:	7cfb      	ldrb	r3, [r7, #19]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d106      	bne.n	80158c2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80158b4:	4b09      	ldr	r3, [pc, #36]	; (80158dc <udp_bind+0x10c>)
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80158bc:	4a07      	ldr	r2, [pc, #28]	; (80158dc <udp_bind+0x10c>)
 80158be:	68fb      	ldr	r3, [r7, #12]
 80158c0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80158c2:	2300      	movs	r3, #0
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3718      	adds	r7, #24
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	0806c800 	.word	0x0806c800
 80158d0:	0801fc44 	.word	0x0801fc44
 80158d4:	0801ff0c 	.word	0x0801ff0c
 80158d8:	0801fc98 	.word	0x0801fc98
 80158dc:	20013dd0 	.word	0x20013dd0

080158e0 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80158e0:	b480      	push	{r7}
 80158e2:	b083      	sub	sp, #12
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d007      	beq.n	8015900 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80158f6:	3301      	adds	r3, #1
 80158f8:	b2da      	uxtb	r2, r3
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80158fe:	e002      	b.n	8015906 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	2200      	movs	r2, #0
 8015904:	721a      	strb	r2, [r3, #8]
}
 8015906:	bf00      	nop
 8015908:	370c      	adds	r7, #12
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr
	...

08015914 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b086      	sub	sp, #24
 8015918:	af00      	add	r7, sp, #0
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	4613      	mov	r3, r2
 8015920:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d109      	bne.n	801593c <udp_connect+0x28>
 8015928:	4b2c      	ldr	r3, [pc, #176]	; (80159dc <udp_connect+0xc8>)
 801592a:	f240 4235 	movw	r2, #1077	; 0x435
 801592e:	492c      	ldr	r1, [pc, #176]	; (80159e0 <udp_connect+0xcc>)
 8015930:	482c      	ldr	r0, [pc, #176]	; (80159e4 <udp_connect+0xd0>)
 8015932:	f005 fbaf 	bl	801b094 <iprintf>
 8015936:	f06f 030f 	mvn.w	r3, #15
 801593a:	e04b      	b.n	80159d4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d109      	bne.n	8015956 <udp_connect+0x42>
 8015942:	4b26      	ldr	r3, [pc, #152]	; (80159dc <udp_connect+0xc8>)
 8015944:	f240 4236 	movw	r2, #1078	; 0x436
 8015948:	4927      	ldr	r1, [pc, #156]	; (80159e8 <udp_connect+0xd4>)
 801594a:	4826      	ldr	r0, [pc, #152]	; (80159e4 <udp_connect+0xd0>)
 801594c:	f005 fba2 	bl	801b094 <iprintf>
 8015950:	f06f 030f 	mvn.w	r3, #15
 8015954:	e03e      	b.n	80159d4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	8a5b      	ldrh	r3, [r3, #18]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d10f      	bne.n	801597e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801595e:	68f9      	ldr	r1, [r7, #12]
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	8a5b      	ldrh	r3, [r3, #18]
 8015964:	461a      	mov	r2, r3
 8015966:	68f8      	ldr	r0, [r7, #12]
 8015968:	f7ff ff32 	bl	80157d0 <udp_bind>
 801596c:	4603      	mov	r3, r0
 801596e:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8015970:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d002      	beq.n	801597e <udp_connect+0x6a>
      return err;
 8015978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801597c:	e02a      	b.n	80159d4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d002      	beq.n	801598a <udp_connect+0x76>
 8015984:	68bb      	ldr	r3, [r7, #8]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	e000      	b.n	801598c <udp_connect+0x78>
 801598a:	2300      	movs	r3, #0
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	88fa      	ldrh	r2, [r7, #6]
 8015994:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	7c1b      	ldrb	r3, [r3, #16]
 801599a:	f043 0304 	orr.w	r3, r3, #4
 801599e:	b2da      	uxtb	r2, r3
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159a4:	4b11      	ldr	r3, [pc, #68]	; (80159ec <udp_connect+0xd8>)
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	613b      	str	r3, [r7, #16]
 80159aa:	e008      	b.n	80159be <udp_connect+0xaa>
    if (pcb == ipcb) {
 80159ac:	68fa      	ldr	r2, [r7, #12]
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d101      	bne.n	80159b8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	e00d      	b.n	80159d4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	613b      	str	r3, [r7, #16]
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d1f3      	bne.n	80159ac <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80159c4:	4b09      	ldr	r3, [pc, #36]	; (80159ec <udp_connect+0xd8>)
 80159c6:	681a      	ldr	r2, [r3, #0]
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80159cc:	4a07      	ldr	r2, [pc, #28]	; (80159ec <udp_connect+0xd8>)
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80159d2:	2300      	movs	r3, #0
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	0801fc44 	.word	0x0801fc44
 80159e0:	0801ff24 	.word	0x0801ff24
 80159e4:	0801fc98 	.word	0x0801fc98
 80159e8:	0801ff40 	.word	0x0801ff40
 80159ec:	20013dd0 	.word	0x20013dd0

080159f0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b082      	sub	sp, #8
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d107      	bne.n	8015a0e <udp_disconnect+0x1e>
 80159fe:	4b0d      	ldr	r3, [pc, #52]	; (8015a34 <udp_disconnect+0x44>)
 8015a00:	f240 426a 	movw	r2, #1130	; 0x46a
 8015a04:	490c      	ldr	r1, [pc, #48]	; (8015a38 <udp_disconnect+0x48>)
 8015a06:	480d      	ldr	r0, [pc, #52]	; (8015a3c <udp_disconnect+0x4c>)
 8015a08:	f005 fb44 	bl	801b094 <iprintf>
 8015a0c:	e00f      	b.n	8015a2e <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2200      	movs	r2, #0
 8015a12:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	2200      	movs	r2, #0
 8015a18:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	7c1b      	ldrb	r3, [r3, #16]
 8015a24:	f023 0304 	bic.w	r3, r3, #4
 8015a28:	b2da      	uxtb	r2, r3
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	741a      	strb	r2, [r3, #16]
}
 8015a2e:	3708      	adds	r7, #8
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	0801fc44 	.word	0x0801fc44
 8015a38:	0801ff5c 	.word	0x0801ff5c
 8015a3c:	0801fc98 	.word	0x0801fc98

08015a40 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d107      	bne.n	8015a62 <udp_recv+0x22>
 8015a52:	4b08      	ldr	r3, [pc, #32]	; (8015a74 <udp_recv+0x34>)
 8015a54:	f240 428a 	movw	r2, #1162	; 0x48a
 8015a58:	4907      	ldr	r1, [pc, #28]	; (8015a78 <udp_recv+0x38>)
 8015a5a:	4808      	ldr	r0, [pc, #32]	; (8015a7c <udp_recv+0x3c>)
 8015a5c:	f005 fb1a 	bl	801b094 <iprintf>
 8015a60:	e005      	b.n	8015a6e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	61da      	str	r2, [r3, #28]
}
 8015a6e:	3710      	adds	r7, #16
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	0801fc44 	.word	0x0801fc44
 8015a78:	0801ff78 	.word	0x0801ff78
 8015a7c:	0801fc98 	.word	0x0801fc98

08015a80 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d107      	bne.n	8015a9e <udp_remove+0x1e>
 8015a8e:	4b19      	ldr	r3, [pc, #100]	; (8015af4 <udp_remove+0x74>)
 8015a90:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015a94:	4918      	ldr	r1, [pc, #96]	; (8015af8 <udp_remove+0x78>)
 8015a96:	4819      	ldr	r0, [pc, #100]	; (8015afc <udp_remove+0x7c>)
 8015a98:	f005 fafc 	bl	801b094 <iprintf>
 8015a9c:	e026      	b.n	8015aec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a9e:	4b18      	ldr	r3, [pc, #96]	; (8015b00 <udp_remove+0x80>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d105      	bne.n	8015ab4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015aa8:	4b15      	ldr	r3, [pc, #84]	; (8015b00 <udp_remove+0x80>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	68db      	ldr	r3, [r3, #12]
 8015aae:	4a14      	ldr	r2, [pc, #80]	; (8015b00 <udp_remove+0x80>)
 8015ab0:	6013      	str	r3, [r2, #0]
 8015ab2:	e017      	b.n	8015ae4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ab4:	4b12      	ldr	r3, [pc, #72]	; (8015b00 <udp_remove+0x80>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	e010      	b.n	8015ade <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	68db      	ldr	r3, [r3, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d009      	beq.n	8015ad8 <udp_remove+0x58>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d104      	bne.n	8015ad8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	68da      	ldr	r2, [r3, #12]
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	60da      	str	r2, [r3, #12]
        break;
 8015ad6:	e005      	b.n	8015ae4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	60fb      	str	r3, [r7, #12]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d1eb      	bne.n	8015abc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	f7f8 fddc 	bl	800e6a4 <memp_free>
}
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	0801fc44 	.word	0x0801fc44
 8015af8:	0801ff90 	.word	0x0801ff90
 8015afc:	0801fc98 	.word	0x0801fc98
 8015b00:	20013dd0 	.word	0x20013dd0

08015b04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015b0a:	2000      	movs	r0, #0
 8015b0c:	f7f8 fd78 	bl	800e600 <memp_malloc>
 8015b10:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d007      	beq.n	8015b28 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015b18:	2220      	movs	r2, #32
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f005 fc1b 	bl	801b358 <memset>
    pcb->ttl = UDP_TTL;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	22ff      	movs	r2, #255	; 0xff
 8015b26:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015b28:	687b      	ldr	r3, [r7, #4]
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
	...

08015b34 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015b34:	b480      	push	{r7}
 8015b36:	b085      	sub	sp, #20
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d01e      	beq.n	8015b82 <udp_netif_ip_addr_changed+0x4e>
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d01a      	beq.n	8015b82 <udp_netif_ip_addr_changed+0x4e>
 8015b4c:	683b      	ldr	r3, [r7, #0]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d017      	beq.n	8015b82 <udp_netif_ip_addr_changed+0x4e>
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d013      	beq.n	8015b82 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b5a:	4b0d      	ldr	r3, [pc, #52]	; (8015b90 <udp_netif_ip_addr_changed+0x5c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	60fb      	str	r3, [r7, #12]
 8015b60:	e00c      	b.n	8015b7c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	681a      	ldr	r2, [r3, #0]
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d103      	bne.n	8015b76 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	68db      	ldr	r3, [r3, #12]
 8015b7a:	60fb      	str	r3, [r7, #12]
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d1ef      	bne.n	8015b62 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015b82:	bf00      	nop
 8015b84:	3714      	adds	r7, #20
 8015b86:	46bd      	mov	sp, r7
 8015b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8c:	4770      	bx	lr
 8015b8e:	bf00      	nop
 8015b90:	20013dd0 	.word	0x20013dd0

08015b94 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015b98:	4b20      	ldr	r3, [pc, #128]	; (8015c1c <dhcp_inc_pcb_refcount+0x88>)
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d133      	bne.n	8015c08 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015ba0:	4b1f      	ldr	r3, [pc, #124]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d005      	beq.n	8015bb4 <dhcp_inc_pcb_refcount+0x20>
 8015ba8:	4b1e      	ldr	r3, [pc, #120]	; (8015c24 <dhcp_inc_pcb_refcount+0x90>)
 8015baa:	22e5      	movs	r2, #229	; 0xe5
 8015bac:	491e      	ldr	r1, [pc, #120]	; (8015c28 <dhcp_inc_pcb_refcount+0x94>)
 8015bae:	481f      	ldr	r0, [pc, #124]	; (8015c2c <dhcp_inc_pcb_refcount+0x98>)
 8015bb0:	f005 fa70 	bl	801b094 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015bb4:	f7ff ffa6 	bl	8015b04 <udp_new>
 8015bb8:	4603      	mov	r3, r0
 8015bba:	4a19      	ldr	r2, [pc, #100]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bbc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8015bbe:	4b18      	ldr	r3, [pc, #96]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d102      	bne.n	8015bcc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8015bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8015bca:	e024      	b.n	8015c16 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015bcc:	4b14      	ldr	r3, [pc, #80]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	7a5a      	ldrb	r2, [r3, #9]
 8015bd2:	4b13      	ldr	r3, [pc, #76]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	f042 0220 	orr.w	r2, r2, #32
 8015bda:	b2d2      	uxtb	r2, r2
 8015bdc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015bde:	4b10      	ldr	r3, [pc, #64]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2244      	movs	r2, #68	; 0x44
 8015be4:	4912      	ldr	r1, [pc, #72]	; (8015c30 <dhcp_inc_pcb_refcount+0x9c>)
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7ff fdf2 	bl	80157d0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015bec:	4b0c      	ldr	r3, [pc, #48]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2243      	movs	r2, #67	; 0x43
 8015bf2:	490f      	ldr	r1, [pc, #60]	; (8015c30 <dhcp_inc_pcb_refcount+0x9c>)
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7ff fe8d 	bl	8015914 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8015bfa:	4b09      	ldr	r3, [pc, #36]	; (8015c20 <dhcp_inc_pcb_refcount+0x8c>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	2200      	movs	r2, #0
 8015c00:	490c      	ldr	r1, [pc, #48]	; (8015c34 <dhcp_inc_pcb_refcount+0xa0>)
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7ff ff1c 	bl	8015a40 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8015c08:	4b04      	ldr	r3, [pc, #16]	; (8015c1c <dhcp_inc_pcb_refcount+0x88>)
 8015c0a:	781b      	ldrb	r3, [r3, #0]
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	b2da      	uxtb	r2, r3
 8015c10:	4b02      	ldr	r3, [pc, #8]	; (8015c1c <dhcp_inc_pcb_refcount+0x88>)
 8015c12:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015c14:	2300      	movs	r3, #0
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	20013e00 	.word	0x20013e00
 8015c20:	20013dfc 	.word	0x20013dfc
 8015c24:	0801ffa8 	.word	0x0801ffa8
 8015c28:	0801ffe0 	.word	0x0801ffe0
 8015c2c:	08020008 	.word	0x08020008
 8015c30:	0806c800 	.word	0x0806c800
 8015c34:	08017501 	.word	0x08017501

08015c38 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015c3c:	4b0e      	ldr	r3, [pc, #56]	; (8015c78 <dhcp_dec_pcb_refcount+0x40>)
 8015c3e:	781b      	ldrb	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d105      	bne.n	8015c50 <dhcp_dec_pcb_refcount+0x18>
 8015c44:	4b0d      	ldr	r3, [pc, #52]	; (8015c7c <dhcp_dec_pcb_refcount+0x44>)
 8015c46:	22ff      	movs	r2, #255	; 0xff
 8015c48:	490d      	ldr	r1, [pc, #52]	; (8015c80 <dhcp_dec_pcb_refcount+0x48>)
 8015c4a:	480e      	ldr	r0, [pc, #56]	; (8015c84 <dhcp_dec_pcb_refcount+0x4c>)
 8015c4c:	f005 fa22 	bl	801b094 <iprintf>
  dhcp_pcb_refcount--;
 8015c50:	4b09      	ldr	r3, [pc, #36]	; (8015c78 <dhcp_dec_pcb_refcount+0x40>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	3b01      	subs	r3, #1
 8015c56:	b2da      	uxtb	r2, r3
 8015c58:	4b07      	ldr	r3, [pc, #28]	; (8015c78 <dhcp_dec_pcb_refcount+0x40>)
 8015c5a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015c5c:	4b06      	ldr	r3, [pc, #24]	; (8015c78 <dhcp_dec_pcb_refcount+0x40>)
 8015c5e:	781b      	ldrb	r3, [r3, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d107      	bne.n	8015c74 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8015c64:	4b08      	ldr	r3, [pc, #32]	; (8015c88 <dhcp_dec_pcb_refcount+0x50>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	4618      	mov	r0, r3
 8015c6a:	f7ff ff09 	bl	8015a80 <udp_remove>
    dhcp_pcb = NULL;
 8015c6e:	4b06      	ldr	r3, [pc, #24]	; (8015c88 <dhcp_dec_pcb_refcount+0x50>)
 8015c70:	2200      	movs	r2, #0
 8015c72:	601a      	str	r2, [r3, #0]
  }
}
 8015c74:	bf00      	nop
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	20013e00 	.word	0x20013e00
 8015c7c:	0801ffa8 	.word	0x0801ffa8
 8015c80:	08020030 	.word	0x08020030
 8015c84:	08020008 	.word	0x08020008
 8015c88:	20013dfc 	.word	0x20013dfc

08015c8c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c98:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015c9a:	210c      	movs	r1, #12
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	f001 f860 	bl	8016d62 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015ca2:	4b06      	ldr	r3, [pc, #24]	; (8015cbc <dhcp_handle_nak+0x30>)
 8015ca4:	4a05      	ldr	r2, [pc, #20]	; (8015cbc <dhcp_handle_nak+0x30>)
 8015ca6:	4905      	ldr	r1, [pc, #20]	; (8015cbc <dhcp_handle_nak+0x30>)
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f7f8 fe9d 	bl	800e9e8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f000 fc48 	bl	8016544 <dhcp_discover>
}
 8015cb4:	bf00      	nop
 8015cb6:	3710      	adds	r7, #16
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	0806c800 	.word	0x0806c800

08015cc0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ccc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015cce:	2108      	movs	r1, #8
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f001 f846 	bl	8016d62 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	331c      	adds	r3, #28
 8015cda:	2200      	movs	r2, #0
 8015cdc:	4619      	mov	r1, r3
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	f002 fbc2 	bl	8018468 <etharp_query>
 8015ce4:	4603      	mov	r3, r0
 8015ce6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	799b      	ldrb	r3, [r3, #6]
 8015cec:	2bff      	cmp	r3, #255	; 0xff
 8015cee:	d005      	beq.n	8015cfc <dhcp_check+0x3c>
    dhcp->tries++;
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	799b      	ldrb	r3, [r3, #6]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	b2da      	uxtb	r2, r3
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015cfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015d00:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d02:	893b      	ldrh	r3, [r7, #8]
 8015d04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d08:	4a06      	ldr	r2, [pc, #24]	; (8015d24 <dhcp_check+0x64>)
 8015d0a:	fb82 1203 	smull	r1, r2, r2, r3
 8015d0e:	1152      	asrs	r2, r2, #5
 8015d10:	17db      	asrs	r3, r3, #31
 8015d12:	1ad3      	subs	r3, r2, r3
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8015d1a:	bf00      	nop
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	10624dd3 	.word	0x10624dd3

08015d28 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
 8015d30:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d36:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015d38:	4b0c      	ldr	r3, [pc, #48]	; (8015d6c <dhcp_handle_offer+0x44>)
 8015d3a:	789b      	ldrb	r3, [r3, #2]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d011      	beq.n	8015d64 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	2200      	movs	r2, #0
 8015d44:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015d46:	4b0a      	ldr	r3, [pc, #40]	; (8015d70 <dhcp_handle_offer+0x48>)
 8015d48:	689b      	ldr	r3, [r3, #8]
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f7f7 fe3f 	bl	800d9ce <lwip_htonl>
 8015d50:	4602      	mov	r2, r0
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	691a      	ldr	r2, [r3, #16]
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f000 f808 	bl	8015d74 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015d64:	bf00      	nop
 8015d66:	3710      	adds	r7, #16
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}
 8015d6c:	20013df4 	.word	0x20013df4
 8015d70:	20013dd4 	.word	0x20013dd4

08015d74 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015d74:	b5b0      	push	{r4, r5, r7, lr}
 8015d76:	b08a      	sub	sp, #40	; 0x28
 8015d78:	af02      	add	r7, sp, #8
 8015d7a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d109      	bne.n	8015d96 <dhcp_select+0x22>
 8015d82:	4b71      	ldr	r3, [pc, #452]	; (8015f48 <dhcp_select+0x1d4>)
 8015d84:	f240 1277 	movw	r2, #375	; 0x177
 8015d88:	4970      	ldr	r1, [pc, #448]	; (8015f4c <dhcp_select+0x1d8>)
 8015d8a:	4871      	ldr	r0, [pc, #452]	; (8015f50 <dhcp_select+0x1dc>)
 8015d8c:	f005 f982 	bl	801b094 <iprintf>
 8015d90:	f06f 030f 	mvn.w	r3, #15
 8015d94:	e0d3      	b.n	8015f3e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d9a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d109      	bne.n	8015db6 <dhcp_select+0x42>
 8015da2:	4b69      	ldr	r3, [pc, #420]	; (8015f48 <dhcp_select+0x1d4>)
 8015da4:	f240 1279 	movw	r2, #377	; 0x179
 8015da8:	496a      	ldr	r1, [pc, #424]	; (8015f54 <dhcp_select+0x1e0>)
 8015daa:	4869      	ldr	r0, [pc, #420]	; (8015f50 <dhcp_select+0x1dc>)
 8015dac:	f005 f972 	bl	801b094 <iprintf>
 8015db0:	f06f 0305 	mvn.w	r3, #5
 8015db4:	e0c3      	b.n	8015f3e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015db6:	2101      	movs	r1, #1
 8015db8:	69b8      	ldr	r0, [r7, #24]
 8015dba:	f000 ffd2 	bl	8016d62 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015dbe:	f107 030c 	add.w	r3, r7, #12
 8015dc2:	2203      	movs	r2, #3
 8015dc4:	69b9      	ldr	r1, [r7, #24]
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f001 fc64 	bl	8017694 <dhcp_create_msg>
 8015dcc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015dce:	697b      	ldr	r3, [r7, #20]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	f000 8085 	beq.w	8015ee0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	685b      	ldr	r3, [r3, #4]
 8015dda:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015ddc:	89b8      	ldrh	r0, [r7, #12]
 8015dde:	693b      	ldr	r3, [r7, #16]
 8015de0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015de4:	2302      	movs	r3, #2
 8015de6:	2239      	movs	r2, #57	; 0x39
 8015de8:	f000 ffd6 	bl	8016d98 <dhcp_option>
 8015dec:	4603      	mov	r3, r0
 8015dee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015df0:	89b8      	ldrh	r0, [r7, #12]
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	f001 f825 	bl	8016e4c <dhcp_option_short>
 8015e02:	4603      	mov	r3, r0
 8015e04:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015e06:	89b8      	ldrh	r0, [r7, #12]
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e0e:	2304      	movs	r3, #4
 8015e10:	2232      	movs	r2, #50	; 0x32
 8015e12:	f000 ffc1 	bl	8016d98 <dhcp_option>
 8015e16:	4603      	mov	r3, r0
 8015e18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015e1a:	89bc      	ldrh	r4, [r7, #12]
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015e22:	69bb      	ldr	r3, [r7, #24]
 8015e24:	69db      	ldr	r3, [r3, #28]
 8015e26:	4618      	mov	r0, r3
 8015e28:	f7f7 fdd1 	bl	800d9ce <lwip_htonl>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	461a      	mov	r2, r3
 8015e30:	4629      	mov	r1, r5
 8015e32:	4620      	mov	r0, r4
 8015e34:	f001 f83c 	bl	8016eb0 <dhcp_option_long>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015e3c:	89b8      	ldrh	r0, [r7, #12]
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e44:	2304      	movs	r3, #4
 8015e46:	2236      	movs	r2, #54	; 0x36
 8015e48:	f000 ffa6 	bl	8016d98 <dhcp_option>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015e50:	89bc      	ldrh	r4, [r7, #12]
 8015e52:	693b      	ldr	r3, [r7, #16]
 8015e54:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	699b      	ldr	r3, [r3, #24]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7f7 fdb6 	bl	800d9ce <lwip_htonl>
 8015e62:	4603      	mov	r3, r0
 8015e64:	461a      	mov	r2, r3
 8015e66:	4629      	mov	r1, r5
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f001 f821 	bl	8016eb0 <dhcp_option_long>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015e72:	89b8      	ldrh	r0, [r7, #12]
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e7a:	2303      	movs	r3, #3
 8015e7c:	2237      	movs	r2, #55	; 0x37
 8015e7e:	f000 ff8b 	bl	8016d98 <dhcp_option>
 8015e82:	4603      	mov	r3, r0
 8015e84:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e86:	2300      	movs	r3, #0
 8015e88:	77fb      	strb	r3, [r7, #31]
 8015e8a:	e00e      	b.n	8015eaa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015e8c:	89b8      	ldrh	r0, [r7, #12]
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e94:	7ffb      	ldrb	r3, [r7, #31]
 8015e96:	4a30      	ldr	r2, [pc, #192]	; (8015f58 <dhcp_select+0x1e4>)
 8015e98:	5cd3      	ldrb	r3, [r2, r3]
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	f000 ffb0 	bl	8016e00 <dhcp_option_byte>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ea4:	7ffb      	ldrb	r3, [r7, #31]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	77fb      	strb	r3, [r7, #31]
 8015eaa:	7ffb      	ldrb	r3, [r7, #31]
 8015eac:	2b02      	cmp	r3, #2
 8015eae:	d9ed      	bls.n	8015e8c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015eb0:	89b8      	ldrh	r0, [r7, #12]
 8015eb2:	693b      	ldr	r3, [r7, #16]
 8015eb4:	33f0      	adds	r3, #240	; 0xf0
 8015eb6:	697a      	ldr	r2, [r7, #20]
 8015eb8:	4619      	mov	r1, r3
 8015eba:	f001 fcc1 	bl	8017840 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015ebe:	4b27      	ldr	r3, [pc, #156]	; (8015f5c <dhcp_select+0x1e8>)
 8015ec0:	6818      	ldr	r0, [r3, #0]
 8015ec2:	4b27      	ldr	r3, [pc, #156]	; (8015f60 <dhcp_select+0x1ec>)
 8015ec4:	9301      	str	r3, [sp, #4]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	9300      	str	r3, [sp, #0]
 8015eca:	2343      	movs	r3, #67	; 0x43
 8015ecc:	4a25      	ldr	r2, [pc, #148]	; (8015f64 <dhcp_select+0x1f0>)
 8015ece:	6979      	ldr	r1, [r7, #20]
 8015ed0:	f7ff fb98 	bl	8015604 <udp_sendto_if_src>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	77bb      	strb	r3, [r7, #30]
    pbuf_free(p_out);
 8015ed8:	6978      	ldr	r0, [r7, #20]
 8015eda:	f7f9 fa85 	bl	800f3e8 <pbuf_free>
 8015ede:	e001      	b.n	8015ee4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015ee0:	23ff      	movs	r3, #255	; 0xff
 8015ee2:	77bb      	strb	r3, [r7, #30]
  }
  if (dhcp->tries < 255) {
 8015ee4:	69bb      	ldr	r3, [r7, #24]
 8015ee6:	799b      	ldrb	r3, [r3, #6]
 8015ee8:	2bff      	cmp	r3, #255	; 0xff
 8015eea:	d005      	beq.n	8015ef8 <dhcp_select+0x184>
    dhcp->tries++;
 8015eec:	69bb      	ldr	r3, [r7, #24]
 8015eee:	799b      	ldrb	r3, [r3, #6]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	b2da      	uxtb	r2, r3
 8015ef4:	69bb      	ldr	r3, [r7, #24]
 8015ef6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015ef8:	69bb      	ldr	r3, [r7, #24]
 8015efa:	799b      	ldrb	r3, [r3, #6]
 8015efc:	2b05      	cmp	r3, #5
 8015efe:	d80d      	bhi.n	8015f1c <dhcp_select+0x1a8>
 8015f00:	69bb      	ldr	r3, [r7, #24]
 8015f02:	799b      	ldrb	r3, [r3, #6]
 8015f04:	461a      	mov	r2, r3
 8015f06:	2301      	movs	r3, #1
 8015f08:	4093      	lsls	r3, r2
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	461a      	mov	r2, r3
 8015f0e:	0152      	lsls	r2, r2, #5
 8015f10:	1ad2      	subs	r2, r2, r3
 8015f12:	0092      	lsls	r2, r2, #2
 8015f14:	4413      	add	r3, r2
 8015f16:	00db      	lsls	r3, r3, #3
 8015f18:	b29b      	uxth	r3, r3
 8015f1a:	e001      	b.n	8015f20 <dhcp_select+0x1ac>
 8015f1c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015f20:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015f22:	89fb      	ldrh	r3, [r7, #14]
 8015f24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015f28:	4a0f      	ldr	r2, [pc, #60]	; (8015f68 <dhcp_select+0x1f4>)
 8015f2a:	fb82 1203 	smull	r1, r2, r2, r3
 8015f2e:	1152      	asrs	r2, r2, #5
 8015f30:	17db      	asrs	r3, r3, #31
 8015f32:	1ad3      	subs	r3, r2, r3
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	69bb      	ldr	r3, [r7, #24]
 8015f38:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015f3a:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3720      	adds	r7, #32
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bdb0      	pop	{r4, r5, r7, pc}
 8015f46:	bf00      	nop
 8015f48:	0801ffa8 	.word	0x0801ffa8
 8015f4c:	08020054 	.word	0x08020054
 8015f50:	08020008 	.word	0x08020008
 8015f54:	08020070 	.word	0x08020070
 8015f58:	200000bc 	.word	0x200000bc
 8015f5c:	20013dfc 	.word	0x20013dfc
 8015f60:	0806c800 	.word	0x0806c800
 8015f64:	0806c804 	.word	0x0806c804
 8015f68:	10624dd3 	.word	0x10624dd3

08015f6c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b082      	sub	sp, #8
 8015f70:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015f72:	4b27      	ldr	r3, [pc, #156]	; (8016010 <dhcp_coarse_tmr+0xa4>)
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	607b      	str	r3, [r7, #4]
 8015f78:	e042      	b.n	8016000 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f7e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d039      	beq.n	8015ffa <dhcp_coarse_tmr+0x8e>
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	795b      	ldrb	r3, [r3, #5]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d035      	beq.n	8015ffa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	8a9b      	ldrh	r3, [r3, #20]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d012      	beq.n	8015fbc <dhcp_coarse_tmr+0x50>
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	8a5b      	ldrh	r3, [r3, #18]
 8015f9a:	3301      	adds	r3, #1
 8015f9c:	b29a      	uxth	r2, r3
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	825a      	strh	r2, [r3, #18]
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	8a5a      	ldrh	r2, [r3, #18]
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	8a9b      	ldrh	r3, [r3, #20]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d106      	bne.n	8015fbc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 fe32 	bl	8016c18 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015fb4:	6878      	ldr	r0, [r7, #4]
 8015fb6:	f000 f969 	bl	801628c <dhcp_start>
 8015fba:	e01e      	b.n	8015ffa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	8a1b      	ldrh	r3, [r3, #16]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d00b      	beq.n	8015fdc <dhcp_coarse_tmr+0x70>
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	8a1b      	ldrh	r3, [r3, #16]
 8015fc8:	1e5a      	subs	r2, r3, #1
 8015fca:	b291      	uxth	r1, r2
 8015fcc:	683a      	ldr	r2, [r7, #0]
 8015fce:	8211      	strh	r1, [r2, #16]
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d103      	bne.n	8015fdc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015fd4:	6878      	ldr	r0, [r7, #4]
 8015fd6:	f000 f8c6 	bl	8016166 <dhcp_t2_timeout>
 8015fda:	e00e      	b.n	8015ffa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	89db      	ldrh	r3, [r3, #14]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d00a      	beq.n	8015ffa <dhcp_coarse_tmr+0x8e>
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	89db      	ldrh	r3, [r3, #14]
 8015fe8:	1e5a      	subs	r2, r3, #1
 8015fea:	b291      	uxth	r1, r2
 8015fec:	683a      	ldr	r2, [r7, #0]
 8015fee:	81d1      	strh	r1, [r2, #14]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d102      	bne.n	8015ffa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 f888 	bl	801610a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	607b      	str	r3, [r7, #4]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	2b00      	cmp	r3, #0
 8016004:	d1b9      	bne.n	8015f7a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8016006:	bf00      	nop
 8016008:	bf00      	nop
 801600a:	3708      	adds	r7, #8
 801600c:	46bd      	mov	sp, r7
 801600e:	bd80      	pop	{r7, pc}
 8016010:	20013d64 	.word	0x20013d64

08016014 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b082      	sub	sp, #8
 8016018:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801601a:	4b16      	ldr	r3, [pc, #88]	; (8016074 <dhcp_fine_tmr+0x60>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	607b      	str	r3, [r7, #4]
 8016020:	e020      	b.n	8016064 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016026:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d017      	beq.n	801605e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	891b      	ldrh	r3, [r3, #8]
 8016032:	2b01      	cmp	r3, #1
 8016034:	d906      	bls.n	8016044 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	891b      	ldrh	r3, [r3, #8]
 801603a:	3b01      	subs	r3, #1
 801603c:	b29a      	uxth	r2, r3
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	811a      	strh	r2, [r3, #8]
 8016042:	e00c      	b.n	801605e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8016044:	683b      	ldr	r3, [r7, #0]
 8016046:	891b      	ldrh	r3, [r3, #8]
 8016048:	2b01      	cmp	r3, #1
 801604a:	d108      	bne.n	801605e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801604c:	683b      	ldr	r3, [r7, #0]
 801604e:	891b      	ldrh	r3, [r3, #8]
 8016050:	3b01      	subs	r3, #1
 8016052:	b29a      	uxth	r2, r3
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f000 f80d 	bl	8016078 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	607b      	str	r3, [r7, #4]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d1db      	bne.n	8016022 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801606a:	bf00      	nop
 801606c:	bf00      	nop
 801606e:	3708      	adds	r7, #8
 8016070:	46bd      	mov	sp, r7
 8016072:	bd80      	pop	{r7, pc}
 8016074:	20013d64 	.word	0x20013d64

08016078 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8016078:	b580      	push	{r7, lr}
 801607a:	b084      	sub	sp, #16
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016084:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	795b      	ldrb	r3, [r3, #5]
 801608a:	2b0c      	cmp	r3, #12
 801608c:	d003      	beq.n	8016096 <dhcp_timeout+0x1e>
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	795b      	ldrb	r3, [r3, #5]
 8016092:	2b06      	cmp	r3, #6
 8016094:	d103      	bne.n	801609e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 fa54 	bl	8016544 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801609c:	e031      	b.n	8016102 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	795b      	ldrb	r3, [r3, #5]
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d10e      	bne.n	80160c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	799b      	ldrb	r3, [r3, #6]
 80160aa:	2b05      	cmp	r3, #5
 80160ac:	d803      	bhi.n	80160b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80160ae:	6878      	ldr	r0, [r7, #4]
 80160b0:	f7ff fe60 	bl	8015d74 <dhcp_select>
}
 80160b4:	e025      	b.n	8016102 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 fdae 	bl	8016c18 <dhcp_release_and_stop>
      dhcp_start(netif);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 f8e5 	bl	801628c <dhcp_start>
}
 80160c2:	e01e      	b.n	8016102 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	795b      	ldrb	r3, [r3, #5]
 80160c8:	2b08      	cmp	r3, #8
 80160ca:	d10b      	bne.n	80160e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	799b      	ldrb	r3, [r3, #6]
 80160d0:	2b01      	cmp	r3, #1
 80160d2:	d803      	bhi.n	80160dc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f7ff fdf3 	bl	8015cc0 <dhcp_check>
}
 80160da:	e012      	b.n	8016102 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 fad3 	bl	8016688 <dhcp_bind>
}
 80160e2:	e00e      	b.n	8016102 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	795b      	ldrb	r3, [r3, #5]
 80160e8:	2b03      	cmp	r3, #3
 80160ea:	d10a      	bne.n	8016102 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80160ec:	68fb      	ldr	r3, [r7, #12]
 80160ee:	799b      	ldrb	r3, [r3, #6]
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d803      	bhi.n	80160fc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f000 fcd9 	bl	8016aac <dhcp_reboot>
}
 80160fa:	e002      	b.n	8016102 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 fa21 	bl	8016544 <dhcp_discover>
}
 8016102:	bf00      	nop
 8016104:	3710      	adds	r7, #16
 8016106:	46bd      	mov	sp, r7
 8016108:	bd80      	pop	{r7, pc}

0801610a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801610a:	b580      	push	{r7, lr}
 801610c:	b084      	sub	sp, #16
 801610e:	af00      	add	r7, sp, #0
 8016110:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016116:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	795b      	ldrb	r3, [r3, #5]
 801611c:	2b01      	cmp	r3, #1
 801611e:	d007      	beq.n	8016130 <dhcp_t1_timeout+0x26>
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	795b      	ldrb	r3, [r3, #5]
 8016124:	2b0a      	cmp	r3, #10
 8016126:	d003      	beq.n	8016130 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801612c:	2b05      	cmp	r3, #5
 801612e:	d116      	bne.n	801615e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 fb83 	bl	801683c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	899b      	ldrh	r3, [r3, #12]
 801613a:	461a      	mov	r2, r3
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	8a5b      	ldrh	r3, [r3, #18]
 8016140:	1ad3      	subs	r3, r2, r3
 8016142:	2b01      	cmp	r3, #1
 8016144:	dd0b      	ble.n	801615e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016146:	68fb      	ldr	r3, [r7, #12]
 8016148:	899b      	ldrh	r3, [r3, #12]
 801614a:	461a      	mov	r2, r3
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	8a5b      	ldrh	r3, [r3, #18]
 8016150:	1ad3      	subs	r3, r2, r3
 8016152:	0fda      	lsrs	r2, r3, #31
 8016154:	4413      	add	r3, r2
 8016156:	105b      	asrs	r3, r3, #1
 8016158:	b29a      	uxth	r2, r3
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801615e:	bf00      	nop
 8016160:	3710      	adds	r7, #16
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}

08016166 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8016166:	b580      	push	{r7, lr}
 8016168:	b084      	sub	sp, #16
 801616a:	af00      	add	r7, sp, #0
 801616c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016172:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	795b      	ldrb	r3, [r3, #5]
 8016178:	2b01      	cmp	r3, #1
 801617a:	d00b      	beq.n	8016194 <dhcp_t2_timeout+0x2e>
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	795b      	ldrb	r3, [r3, #5]
 8016180:	2b0a      	cmp	r3, #10
 8016182:	d007      	beq.n	8016194 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016188:	2b05      	cmp	r3, #5
 801618a:	d003      	beq.n	8016194 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	795b      	ldrb	r3, [r3, #5]
 8016190:	2b04      	cmp	r3, #4
 8016192:	d116      	bne.n	80161c2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 fbed 	bl	8016974 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801619a:	68fb      	ldr	r3, [r7, #12]
 801619c:	8a9b      	ldrh	r3, [r3, #20]
 801619e:	461a      	mov	r2, r3
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	8a5b      	ldrh	r3, [r3, #18]
 80161a4:	1ad3      	subs	r3, r2, r3
 80161a6:	2b01      	cmp	r3, #1
 80161a8:	dd0b      	ble.n	80161c2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	8a9b      	ldrh	r3, [r3, #20]
 80161ae:	461a      	mov	r2, r3
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	8a5b      	ldrh	r3, [r3, #18]
 80161b4:	1ad3      	subs	r3, r2, r3
 80161b6:	0fda      	lsrs	r2, r3, #31
 80161b8:	4413      	add	r3, r2
 80161ba:	105b      	asrs	r3, r3, #1
 80161bc:	b29a      	uxth	r2, r3
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80161c2:	bf00      	nop
 80161c4:	3710      	adds	r7, #16
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}
	...

080161cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b084      	sub	sp, #16
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161da:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	2200      	movs	r2, #0
 80161e0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	2200      	movs	r2, #0
 80161e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80161e8:	4b26      	ldr	r3, [pc, #152]	; (8016284 <dhcp_handle_ack+0xb8>)
 80161ea:	78db      	ldrb	r3, [r3, #3]
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d003      	beq.n	80161f8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80161f0:	4b25      	ldr	r3, [pc, #148]	; (8016288 <dhcp_handle_ack+0xbc>)
 80161f2:	68da      	ldr	r2, [r3, #12]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80161f8:	4b22      	ldr	r3, [pc, #136]	; (8016284 <dhcp_handle_ack+0xb8>)
 80161fa:	791b      	ldrb	r3, [r3, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d004      	beq.n	801620a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016200:	4b21      	ldr	r3, [pc, #132]	; (8016288 <dhcp_handle_ack+0xbc>)
 8016202:	691a      	ldr	r2, [r3, #16]
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	62da      	str	r2, [r3, #44]	; 0x2c
 8016208:	e004      	b.n	8016214 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801620e:	085a      	lsrs	r2, r3, #1
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016214:	4b1b      	ldr	r3, [pc, #108]	; (8016284 <dhcp_handle_ack+0xb8>)
 8016216:	795b      	ldrb	r3, [r3, #5]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d004      	beq.n	8016226 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801621c:	4b1a      	ldr	r3, [pc, #104]	; (8016288 <dhcp_handle_ack+0xbc>)
 801621e:	695a      	ldr	r2, [r3, #20]
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	631a      	str	r2, [r3, #48]	; 0x30
 8016224:	e007      	b.n	8016236 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801622a:	4613      	mov	r3, r2
 801622c:	00db      	lsls	r3, r3, #3
 801622e:	1a9b      	subs	r3, r3, r2
 8016230:	08da      	lsrs	r2, r3, #3
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8016236:	683b      	ldr	r3, [r7, #0]
 8016238:	691a      	ldr	r2, [r3, #16]
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801623e:	4b11      	ldr	r3, [pc, #68]	; (8016284 <dhcp_handle_ack+0xb8>)
 8016240:	799b      	ldrb	r3, [r3, #6]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d00b      	beq.n	801625e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8016246:	4b10      	ldr	r3, [pc, #64]	; (8016288 <dhcp_handle_ack+0xbc>)
 8016248:	699b      	ldr	r3, [r3, #24]
 801624a:	4618      	mov	r0, r3
 801624c:	f7f7 fbbf 	bl	800d9ce <lwip_htonl>
 8016250:	4602      	mov	r2, r0
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	2201      	movs	r2, #1
 801625a:	71da      	strb	r2, [r3, #7]
 801625c:	e002      	b.n	8016264 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2200      	movs	r2, #0
 8016262:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016264:	4b07      	ldr	r3, [pc, #28]	; (8016284 <dhcp_handle_ack+0xb8>)
 8016266:	79db      	ldrb	r3, [r3, #7]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d007      	beq.n	801627c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801626c:	4b06      	ldr	r3, [pc, #24]	; (8016288 <dhcp_handle_ack+0xbc>)
 801626e:	69db      	ldr	r3, [r3, #28]
 8016270:	4618      	mov	r0, r3
 8016272:	f7f7 fbac 	bl	800d9ce <lwip_htonl>
 8016276:	4602      	mov	r2, r0
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801627c:	bf00      	nop
 801627e:	3710      	adds	r7, #16
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	20013df4 	.word	0x20013df4
 8016288:	20013dd4 	.word	0x20013dd4

0801628c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2b00      	cmp	r3, #0
 8016298:	d109      	bne.n	80162ae <dhcp_start+0x22>
 801629a:	4b37      	ldr	r3, [pc, #220]	; (8016378 <dhcp_start+0xec>)
 801629c:	f240 22e7 	movw	r2, #743	; 0x2e7
 80162a0:	4936      	ldr	r1, [pc, #216]	; (801637c <dhcp_start+0xf0>)
 80162a2:	4837      	ldr	r0, [pc, #220]	; (8016380 <dhcp_start+0xf4>)
 80162a4:	f004 fef6 	bl	801b094 <iprintf>
 80162a8:	f06f 030f 	mvn.w	r3, #15
 80162ac:	e060      	b.n	8016370 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80162b4:	f003 0301 	and.w	r3, r3, #1
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d109      	bne.n	80162d0 <dhcp_start+0x44>
 80162bc:	4b2e      	ldr	r3, [pc, #184]	; (8016378 <dhcp_start+0xec>)
 80162be:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80162c2:	4930      	ldr	r1, [pc, #192]	; (8016384 <dhcp_start+0xf8>)
 80162c4:	482e      	ldr	r0, [pc, #184]	; (8016380 <dhcp_start+0xf4>)
 80162c6:	f004 fee5 	bl	801b094 <iprintf>
 80162ca:	f06f 030f 	mvn.w	r3, #15
 80162ce:	e04f      	b.n	8016370 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80162da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80162de:	d202      	bcs.n	80162e6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80162e0:	f04f 33ff 	mov.w	r3, #4294967295
 80162e4:	e044      	b.n	8016370 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d10d      	bne.n	8016308 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80162ec:	2034      	movs	r0, #52	; 0x34
 80162ee:	f7f8 f805 	bl	800e2fc <mem_malloc>
 80162f2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d102      	bne.n	8016300 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80162fa:	f04f 33ff 	mov.w	r3, #4294967295
 80162fe:	e037      	b.n	8016370 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	68fa      	ldr	r2, [r7, #12]
 8016304:	625a      	str	r2, [r3, #36]	; 0x24
 8016306:	e005      	b.n	8016314 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	791b      	ldrb	r3, [r3, #4]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d001      	beq.n	8016314 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016310:	f7ff fc92 	bl	8015c38 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016314:	2234      	movs	r2, #52	; 0x34
 8016316:	2100      	movs	r1, #0
 8016318:	68f8      	ldr	r0, [r7, #12]
 801631a:	f005 f81d 	bl	801b358 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801631e:	f7ff fc39 	bl	8015b94 <dhcp_inc_pcb_refcount>
 8016322:	4603      	mov	r3, r0
 8016324:	2b00      	cmp	r3, #0
 8016326:	d002      	beq.n	801632e <dhcp_start+0xa2>
    return ERR_MEM;
 8016328:	f04f 33ff 	mov.w	r3, #4294967295
 801632c:	e020      	b.n	8016370 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	2201      	movs	r2, #1
 8016332:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801633a:	f003 0304 	and.w	r3, r3, #4
 801633e:	2b00      	cmp	r3, #0
 8016340:	d105      	bne.n	801634e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8016342:	2102      	movs	r1, #2
 8016344:	68f8      	ldr	r0, [r7, #12]
 8016346:	f000 fd0c 	bl	8016d62 <dhcp_set_state>
    return ERR_OK;
 801634a:	2300      	movs	r3, #0
 801634c:	e010      	b.n	8016370 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 f8f8 	bl	8016544 <dhcp_discover>
 8016354:	4603      	mov	r3, r0
 8016356:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8016358:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d005      	beq.n	801636c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8016360:	6878      	ldr	r0, [r7, #4]
 8016362:	f000 fc59 	bl	8016c18 <dhcp_release_and_stop>
    return ERR_MEM;
 8016366:	f04f 33ff 	mov.w	r3, #4294967295
 801636a:	e001      	b.n	8016370 <dhcp_start+0xe4>
  }
  return result;
 801636c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	0801ffa8 	.word	0x0801ffa8
 801637c:	0802008c 	.word	0x0802008c
 8016380:	08020008 	.word	0x08020008
 8016384:	080200d0 	.word	0x080200d0

08016388 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016394:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d025      	beq.n	80163e8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	795b      	ldrb	r3, [r3, #5]
 80163a0:	2b0a      	cmp	r3, #10
 80163a2:	d008      	beq.n	80163b6 <dhcp_network_changed+0x2e>
 80163a4:	2b0a      	cmp	r3, #10
 80163a6:	dc0d      	bgt.n	80163c4 <dhcp_network_changed+0x3c>
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d01f      	beq.n	80163ec <dhcp_network_changed+0x64>
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	db09      	blt.n	80163c4 <dhcp_network_changed+0x3c>
 80163b0:	3b03      	subs	r3, #3
 80163b2:	2b02      	cmp	r3, #2
 80163b4:	d806      	bhi.n	80163c4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2200      	movs	r2, #0
 80163ba:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 fb75 	bl	8016aac <dhcp_reboot>
      break;
 80163c2:	e014      	b.n	80163ee <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	795b      	ldrb	r3, [r3, #5]
 80163c8:	2b0c      	cmp	r3, #12
 80163ca:	d906      	bls.n	80163da <dhcp_network_changed+0x52>
 80163cc:	4b09      	ldr	r3, [pc, #36]	; (80163f4 <dhcp_network_changed+0x6c>)
 80163ce:	f240 326d 	movw	r2, #877	; 0x36d
 80163d2:	4909      	ldr	r1, [pc, #36]	; (80163f8 <dhcp_network_changed+0x70>)
 80163d4:	4809      	ldr	r0, [pc, #36]	; (80163fc <dhcp_network_changed+0x74>)
 80163d6:	f004 fe5d 	bl	801b094 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2200      	movs	r2, #0
 80163de:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80163e0:	6878      	ldr	r0, [r7, #4]
 80163e2:	f000 f8af 	bl	8016544 <dhcp_discover>
      break;
 80163e6:	e002      	b.n	80163ee <dhcp_network_changed+0x66>
    return;
 80163e8:	bf00      	nop
 80163ea:	e000      	b.n	80163ee <dhcp_network_changed+0x66>
      break;
 80163ec:	bf00      	nop
  }
}
 80163ee:	3710      	adds	r7, #16
 80163f0:	46bd      	mov	sp, r7
 80163f2:	bd80      	pop	{r7, pc}
 80163f4:	0801ffa8 	.word	0x0801ffa8
 80163f8:	080200f4 	.word	0x080200f4
 80163fc:	08020008 	.word	0x08020008

08016400 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
 8016408:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d107      	bne.n	8016420 <dhcp_arp_reply+0x20>
 8016410:	4b0e      	ldr	r3, [pc, #56]	; (801644c <dhcp_arp_reply+0x4c>)
 8016412:	f240 328b 	movw	r2, #907	; 0x38b
 8016416:	490e      	ldr	r1, [pc, #56]	; (8016450 <dhcp_arp_reply+0x50>)
 8016418:	480e      	ldr	r0, [pc, #56]	; (8016454 <dhcp_arp_reply+0x54>)
 801641a:	f004 fe3b 	bl	801b094 <iprintf>
 801641e:	e012      	b.n	8016446 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016424:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d00c      	beq.n	8016446 <dhcp_arp_reply+0x46>
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	795b      	ldrb	r3, [r3, #5]
 8016430:	2b08      	cmp	r3, #8
 8016432:	d108      	bne.n	8016446 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	681a      	ldr	r2, [r3, #0]
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	69db      	ldr	r3, [r3, #28]
 801643c:	429a      	cmp	r2, r3
 801643e:	d102      	bne.n	8016446 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f000 f809 	bl	8016458 <dhcp_decline>
    }
  }
}
 8016446:	3710      	adds	r7, #16
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}
 801644c:	0801ffa8 	.word	0x0801ffa8
 8016450:	0802008c 	.word	0x0802008c
 8016454:	08020008 	.word	0x08020008

08016458 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016458:	b5b0      	push	{r4, r5, r7, lr}
 801645a:	b08a      	sub	sp, #40	; 0x28
 801645c:	af02      	add	r7, sp, #8
 801645e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016464:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016466:	210c      	movs	r1, #12
 8016468:	69b8      	ldr	r0, [r7, #24]
 801646a:	f000 fc7a 	bl	8016d62 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801646e:	f107 030c 	add.w	r3, r7, #12
 8016472:	2204      	movs	r2, #4
 8016474:	69b9      	ldr	r1, [r7, #24]
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f001 f90c 	bl	8017694 <dhcp_create_msg>
 801647c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801647e:	697b      	ldr	r3, [r7, #20]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d035      	beq.n	80164f0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016484:	697b      	ldr	r3, [r7, #20]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801648a:	89b8      	ldrh	r0, [r7, #12]
 801648c:	693b      	ldr	r3, [r7, #16]
 801648e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016492:	2304      	movs	r3, #4
 8016494:	2232      	movs	r2, #50	; 0x32
 8016496:	f000 fc7f 	bl	8016d98 <dhcp_option>
 801649a:	4603      	mov	r3, r0
 801649c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801649e:	89bc      	ldrh	r4, [r7, #12]
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80164a6:	69bb      	ldr	r3, [r7, #24]
 80164a8:	69db      	ldr	r3, [r3, #28]
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7f7 fa8f 	bl	800d9ce <lwip_htonl>
 80164b0:	4603      	mov	r3, r0
 80164b2:	461a      	mov	r2, r3
 80164b4:	4629      	mov	r1, r5
 80164b6:	4620      	mov	r0, r4
 80164b8:	f000 fcfa 	bl	8016eb0 <dhcp_option_long>
 80164bc:	4603      	mov	r3, r0
 80164be:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80164c0:	89b8      	ldrh	r0, [r7, #12]
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	33f0      	adds	r3, #240	; 0xf0
 80164c6:	697a      	ldr	r2, [r7, #20]
 80164c8:	4619      	mov	r1, r3
 80164ca:	f001 f9b9 	bl	8017840 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80164ce:	4b19      	ldr	r3, [pc, #100]	; (8016534 <dhcp_decline+0xdc>)
 80164d0:	6818      	ldr	r0, [r3, #0]
 80164d2:	4b19      	ldr	r3, [pc, #100]	; (8016538 <dhcp_decline+0xe0>)
 80164d4:	9301      	str	r3, [sp, #4]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	9300      	str	r3, [sp, #0]
 80164da:	2343      	movs	r3, #67	; 0x43
 80164dc:	4a17      	ldr	r2, [pc, #92]	; (801653c <dhcp_decline+0xe4>)
 80164de:	6979      	ldr	r1, [r7, #20]
 80164e0:	f7ff f890 	bl	8015604 <udp_sendto_if_src>
 80164e4:	4603      	mov	r3, r0
 80164e6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80164e8:	6978      	ldr	r0, [r7, #20]
 80164ea:	f7f8 ff7d 	bl	800f3e8 <pbuf_free>
 80164ee:	e001      	b.n	80164f4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80164f0:	23ff      	movs	r3, #255	; 0xff
 80164f2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	799b      	ldrb	r3, [r3, #6]
 80164f8:	2bff      	cmp	r3, #255	; 0xff
 80164fa:	d005      	beq.n	8016508 <dhcp_decline+0xb0>
    dhcp->tries++;
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	799b      	ldrb	r3, [r3, #6]
 8016500:	3301      	adds	r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016508:	f242 7310 	movw	r3, #10000	; 0x2710
 801650c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801650e:	89fb      	ldrh	r3, [r7, #14]
 8016510:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016514:	4a0a      	ldr	r2, [pc, #40]	; (8016540 <dhcp_decline+0xe8>)
 8016516:	fb82 1203 	smull	r1, r2, r2, r3
 801651a:	1152      	asrs	r2, r2, #5
 801651c:	17db      	asrs	r3, r3, #31
 801651e:	1ad3      	subs	r3, r2, r3
 8016520:	b29a      	uxth	r2, r3
 8016522:	69bb      	ldr	r3, [r7, #24]
 8016524:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016526:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801652a:	4618      	mov	r0, r3
 801652c:	3720      	adds	r7, #32
 801652e:	46bd      	mov	sp, r7
 8016530:	bdb0      	pop	{r4, r5, r7, pc}
 8016532:	bf00      	nop
 8016534:	20013dfc 	.word	0x20013dfc
 8016538:	0806c800 	.word	0x0806c800
 801653c:	0806c804 	.word	0x0806c804
 8016540:	10624dd3 	.word	0x10624dd3

08016544 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b08a      	sub	sp, #40	; 0x28
 8016548:	af02      	add	r7, sp, #8
 801654a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016550:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016552:	2300      	movs	r3, #0
 8016554:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	2200      	movs	r2, #0
 801655a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801655c:	2106      	movs	r1, #6
 801655e:	69b8      	ldr	r0, [r7, #24]
 8016560:	f000 fbff 	bl	8016d62 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8016564:	f107 0308 	add.w	r3, r7, #8
 8016568:	2201      	movs	r2, #1
 801656a:	69b9      	ldr	r1, [r7, #24]
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f001 f891 	bl	8017694 <dhcp_create_msg>
 8016572:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d04b      	beq.n	8016612 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801657a:	693b      	ldr	r3, [r7, #16]
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016580:	8938      	ldrh	r0, [r7, #8]
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016588:	2302      	movs	r3, #2
 801658a:	2239      	movs	r2, #57	; 0x39
 801658c:	f000 fc04 	bl	8016d98 <dhcp_option>
 8016590:	4603      	mov	r3, r0
 8016592:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016594:	8938      	ldrh	r0, [r7, #8]
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165a0:	461a      	mov	r2, r3
 80165a2:	f000 fc53 	bl	8016e4c <dhcp_option_short>
 80165a6:	4603      	mov	r3, r0
 80165a8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80165aa:	8938      	ldrh	r0, [r7, #8]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165b2:	2303      	movs	r3, #3
 80165b4:	2237      	movs	r2, #55	; 0x37
 80165b6:	f000 fbef 	bl	8016d98 <dhcp_option>
 80165ba:	4603      	mov	r3, r0
 80165bc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80165be:	2300      	movs	r3, #0
 80165c0:	77fb      	strb	r3, [r7, #31]
 80165c2:	e00e      	b.n	80165e2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80165c4:	8938      	ldrh	r0, [r7, #8]
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80165cc:	7ffb      	ldrb	r3, [r7, #31]
 80165ce:	4a29      	ldr	r2, [pc, #164]	; (8016674 <dhcp_discover+0x130>)
 80165d0:	5cd3      	ldrb	r3, [r2, r3]
 80165d2:	461a      	mov	r2, r3
 80165d4:	f000 fc14 	bl	8016e00 <dhcp_option_byte>
 80165d8:	4603      	mov	r3, r0
 80165da:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80165dc:	7ffb      	ldrb	r3, [r7, #31]
 80165de:	3301      	adds	r3, #1
 80165e0:	77fb      	strb	r3, [r7, #31]
 80165e2:	7ffb      	ldrb	r3, [r7, #31]
 80165e4:	2b02      	cmp	r3, #2
 80165e6:	d9ed      	bls.n	80165c4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80165e8:	8938      	ldrh	r0, [r7, #8]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	33f0      	adds	r3, #240	; 0xf0
 80165ee:	693a      	ldr	r2, [r7, #16]
 80165f0:	4619      	mov	r1, r3
 80165f2:	f001 f925 	bl	8017840 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80165f6:	4b20      	ldr	r3, [pc, #128]	; (8016678 <dhcp_discover+0x134>)
 80165f8:	6818      	ldr	r0, [r3, #0]
 80165fa:	4b20      	ldr	r3, [pc, #128]	; (801667c <dhcp_discover+0x138>)
 80165fc:	9301      	str	r3, [sp, #4]
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	2343      	movs	r3, #67	; 0x43
 8016604:	4a1e      	ldr	r2, [pc, #120]	; (8016680 <dhcp_discover+0x13c>)
 8016606:	6939      	ldr	r1, [r7, #16]
 8016608:	f7fe fffc 	bl	8015604 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801660c:	6938      	ldr	r0, [r7, #16]
 801660e:	f7f8 feeb 	bl	800f3e8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8016612:	69bb      	ldr	r3, [r7, #24]
 8016614:	799b      	ldrb	r3, [r3, #6]
 8016616:	2bff      	cmp	r3, #255	; 0xff
 8016618:	d005      	beq.n	8016626 <dhcp_discover+0xe2>
    dhcp->tries++;
 801661a:	69bb      	ldr	r3, [r7, #24]
 801661c:	799b      	ldrb	r3, [r3, #6]
 801661e:	3301      	adds	r3, #1
 8016620:	b2da      	uxtb	r2, r3
 8016622:	69bb      	ldr	r3, [r7, #24]
 8016624:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	799b      	ldrb	r3, [r3, #6]
 801662a:	2b05      	cmp	r3, #5
 801662c:	d80d      	bhi.n	801664a <dhcp_discover+0x106>
 801662e:	69bb      	ldr	r3, [r7, #24]
 8016630:	799b      	ldrb	r3, [r3, #6]
 8016632:	461a      	mov	r2, r3
 8016634:	2301      	movs	r3, #1
 8016636:	4093      	lsls	r3, r2
 8016638:	b29b      	uxth	r3, r3
 801663a:	461a      	mov	r2, r3
 801663c:	0152      	lsls	r2, r2, #5
 801663e:	1ad2      	subs	r2, r2, r3
 8016640:	0092      	lsls	r2, r2, #2
 8016642:	4413      	add	r3, r2
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	b29b      	uxth	r3, r3
 8016648:	e001      	b.n	801664e <dhcp_discover+0x10a>
 801664a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801664e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016650:	897b      	ldrh	r3, [r7, #10]
 8016652:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016656:	4a0b      	ldr	r2, [pc, #44]	; (8016684 <dhcp_discover+0x140>)
 8016658:	fb82 1203 	smull	r1, r2, r2, r3
 801665c:	1152      	asrs	r2, r2, #5
 801665e:	17db      	asrs	r3, r3, #31
 8016660:	1ad3      	subs	r3, r2, r3
 8016662:	b29a      	uxth	r2, r3
 8016664:	69bb      	ldr	r3, [r7, #24]
 8016666:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016668:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801666c:	4618      	mov	r0, r3
 801666e:	3720      	adds	r7, #32
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	200000bc 	.word	0x200000bc
 8016678:	20013dfc 	.word	0x20013dfc
 801667c:	0806c800 	.word	0x0806c800
 8016680:	0806c804 	.word	0x0806c804
 8016684:	10624dd3 	.word	0x10624dd3

08016688 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b088      	sub	sp, #32
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d107      	bne.n	80166a6 <dhcp_bind+0x1e>
 8016696:	4b64      	ldr	r3, [pc, #400]	; (8016828 <dhcp_bind+0x1a0>)
 8016698:	f240 4215 	movw	r2, #1045	; 0x415
 801669c:	4963      	ldr	r1, [pc, #396]	; (801682c <dhcp_bind+0x1a4>)
 801669e:	4864      	ldr	r0, [pc, #400]	; (8016830 <dhcp_bind+0x1a8>)
 80166a0:	f004 fcf8 	bl	801b094 <iprintf>
 80166a4:	e0bc      	b.n	8016820 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166aa:	61fb      	str	r3, [r7, #28]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80166ac:	69fb      	ldr	r3, [r7, #28]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d107      	bne.n	80166c2 <dhcp_bind+0x3a>
 80166b2:	4b5d      	ldr	r3, [pc, #372]	; (8016828 <dhcp_bind+0x1a0>)
 80166b4:	f240 4217 	movw	r2, #1047	; 0x417
 80166b8:	495e      	ldr	r1, [pc, #376]	; (8016834 <dhcp_bind+0x1ac>)
 80166ba:	485d      	ldr	r0, [pc, #372]	; (8016830 <dhcp_bind+0x1a8>)
 80166bc:	f004 fcea 	bl	801b094 <iprintf>
 80166c0:	e0ae      	b.n	8016820 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80166c2:	69fb      	ldr	r3, [r7, #28]
 80166c4:	2200      	movs	r2, #0
 80166c6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80166c8:	69fb      	ldr	r3, [r7, #28]
 80166ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80166d0:	d019      	beq.n	8016706 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80166d2:	69fb      	ldr	r3, [r7, #28]
 80166d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166d6:	331e      	adds	r3, #30
 80166d8:	4a57      	ldr	r2, [pc, #348]	; (8016838 <dhcp_bind+0x1b0>)
 80166da:	fba2 2303 	umull	r2, r3, r2, r3
 80166de:	095b      	lsrs	r3, r3, #5
 80166e0:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80166e8:	d302      	bcc.n	80166f0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80166ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166ee:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80166f0:	69bb      	ldr	r3, [r7, #24]
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	69fb      	ldr	r3, [r7, #28]
 80166f6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80166f8:	69fb      	ldr	r3, [r7, #28]
 80166fa:	8a9b      	ldrh	r3, [r3, #20]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d102      	bne.n	8016706 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	2201      	movs	r2, #1
 8016704:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016706:	69fb      	ldr	r3, [r7, #28]
 8016708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801670a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801670e:	d01d      	beq.n	801674c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016710:	69fb      	ldr	r3, [r7, #28]
 8016712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016714:	331e      	adds	r3, #30
 8016716:	4a48      	ldr	r2, [pc, #288]	; (8016838 <dhcp_bind+0x1b0>)
 8016718:	fba2 2303 	umull	r2, r3, r2, r3
 801671c:	095b      	lsrs	r3, r3, #5
 801671e:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016726:	d302      	bcc.n	801672e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8016728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801672c:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801672e:	69bb      	ldr	r3, [r7, #24]
 8016730:	b29a      	uxth	r2, r3
 8016732:	69fb      	ldr	r3, [r7, #28]
 8016734:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016736:	69fb      	ldr	r3, [r7, #28]
 8016738:	895b      	ldrh	r3, [r3, #10]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d102      	bne.n	8016744 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801673e:	69fb      	ldr	r3, [r7, #28]
 8016740:	2201      	movs	r2, #1
 8016742:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8016744:	69fb      	ldr	r3, [r7, #28]
 8016746:	895a      	ldrh	r2, [r3, #10]
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801674c:	69fb      	ldr	r3, [r7, #28]
 801674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016754:	d01d      	beq.n	8016792 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801675a:	331e      	adds	r3, #30
 801675c:	4a36      	ldr	r2, [pc, #216]	; (8016838 <dhcp_bind+0x1b0>)
 801675e:	fba2 2303 	umull	r2, r3, r2, r3
 8016762:	095b      	lsrs	r3, r3, #5
 8016764:	61bb      	str	r3, [r7, #24]
    if (timeout > 0xffff) {
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801676c:	d302      	bcc.n	8016774 <dhcp_bind+0xec>
      timeout = 0xffff;
 801676e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016772:	61bb      	str	r3, [r7, #24]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8016774:	69bb      	ldr	r3, [r7, #24]
 8016776:	b29a      	uxth	r2, r3
 8016778:	69fb      	ldr	r3, [r7, #28]
 801677a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	899b      	ldrh	r3, [r3, #12]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d102      	bne.n	801678a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	2201      	movs	r2, #1
 8016788:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	899a      	ldrh	r2, [r3, #12]
 801678e:	69fb      	ldr	r3, [r7, #28]
 8016790:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8016792:	69fb      	ldr	r3, [r7, #28]
 8016794:	895a      	ldrh	r2, [r3, #10]
 8016796:	69fb      	ldr	r3, [r7, #28]
 8016798:	899b      	ldrh	r3, [r3, #12]
 801679a:	429a      	cmp	r2, r3
 801679c:	d306      	bcc.n	80167ac <dhcp_bind+0x124>
 801679e:	69fb      	ldr	r3, [r7, #28]
 80167a0:	899b      	ldrh	r3, [r3, #12]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d002      	beq.n	80167ac <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80167a6:	69fb      	ldr	r3, [r7, #28]
 80167a8:	2200      	movs	r2, #0
 80167aa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	79db      	ldrb	r3, [r3, #7]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d003      	beq.n	80167bc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80167b4:	69fb      	ldr	r3, [r7, #28]
 80167b6:	6a1b      	ldr	r3, [r3, #32]
 80167b8:	613b      	str	r3, [r7, #16]
 80167ba:	e014      	b.n	80167e6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	331c      	adds	r3, #28
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80167c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	db02      	blt.n	80167d2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80167cc:	23ff      	movs	r3, #255	; 0xff
 80167ce:	613b      	str	r3, [r7, #16]
 80167d0:	e009      	b.n	80167e6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80167d2:	7dfb      	ldrb	r3, [r7, #23]
 80167d4:	2bbf      	cmp	r3, #191	; 0xbf
 80167d6:	d903      	bls.n	80167e0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80167d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80167dc:	613b      	str	r3, [r7, #16]
 80167de:	e002      	b.n	80167e6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80167e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167e4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ea:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d108      	bne.n	8016804 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	69da      	ldr	r2, [r3, #28]
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	4013      	ands	r3, r2
 80167fa:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016802:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016804:	210a      	movs	r1, #10
 8016806:	69f8      	ldr	r0, [r7, #28]
 8016808:	f000 faab 	bl	8016d62 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801680c:	69fb      	ldr	r3, [r7, #28]
 801680e:	f103 011c 	add.w	r1, r3, #28
 8016812:	f107 030c 	add.w	r3, r7, #12
 8016816:	f107 0210 	add.w	r2, r7, #16
 801681a:	6878      	ldr	r0, [r7, #4]
 801681c:	f7f8 f8e4 	bl	800e9e8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016820:	3720      	adds	r7, #32
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	0801ffa8 	.word	0x0801ffa8
 801682c:	08020108 	.word	0x08020108
 8016830:	08020008 	.word	0x08020008
 8016834:	08020124 	.word	0x08020124
 8016838:	88888889 	.word	0x88888889

0801683c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b08a      	sub	sp, #40	; 0x28
 8016840:	af02      	add	r7, sp, #8
 8016842:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016848:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801684a:	2105      	movs	r1, #5
 801684c:	69b8      	ldr	r0, [r7, #24]
 801684e:	f000 fa88 	bl	8016d62 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016852:	f107 030c 	add.w	r3, r7, #12
 8016856:	2203      	movs	r2, #3
 8016858:	69b9      	ldr	r1, [r7, #24]
 801685a:	6878      	ldr	r0, [r7, #4]
 801685c:	f000 ff1a 	bl	8017694 <dhcp_create_msg>
 8016860:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016862:	697b      	ldr	r3, [r7, #20]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d04e      	beq.n	8016906 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016868:	697b      	ldr	r3, [r7, #20]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801686e:	89b8      	ldrh	r0, [r7, #12]
 8016870:	693b      	ldr	r3, [r7, #16]
 8016872:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016876:	2302      	movs	r3, #2
 8016878:	2239      	movs	r2, #57	; 0x39
 801687a:	f000 fa8d 	bl	8016d98 <dhcp_option>
 801687e:	4603      	mov	r3, r0
 8016880:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016882:	89b8      	ldrh	r0, [r7, #12]
 8016884:	693b      	ldr	r3, [r7, #16]
 8016886:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801688e:	461a      	mov	r2, r3
 8016890:	f000 fadc 	bl	8016e4c <dhcp_option_short>
 8016894:	4603      	mov	r3, r0
 8016896:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016898:	89b8      	ldrh	r0, [r7, #12]
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168a0:	2303      	movs	r3, #3
 80168a2:	2237      	movs	r2, #55	; 0x37
 80168a4:	f000 fa78 	bl	8016d98 <dhcp_option>
 80168a8:	4603      	mov	r3, r0
 80168aa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168ac:	2300      	movs	r3, #0
 80168ae:	77bb      	strb	r3, [r7, #30]
 80168b0:	e00e      	b.n	80168d0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80168b2:	89b8      	ldrh	r0, [r7, #12]
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80168ba:	7fbb      	ldrb	r3, [r7, #30]
 80168bc:	4a2a      	ldr	r2, [pc, #168]	; (8016968 <dhcp_renew+0x12c>)
 80168be:	5cd3      	ldrb	r3, [r2, r3]
 80168c0:	461a      	mov	r2, r3
 80168c2:	f000 fa9d 	bl	8016e00 <dhcp_option_byte>
 80168c6:	4603      	mov	r3, r0
 80168c8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80168ca:	7fbb      	ldrb	r3, [r7, #30]
 80168cc:	3301      	adds	r3, #1
 80168ce:	77bb      	strb	r3, [r7, #30]
 80168d0:	7fbb      	ldrb	r3, [r7, #30]
 80168d2:	2b02      	cmp	r3, #2
 80168d4:	d9ed      	bls.n	80168b2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80168d6:	89b8      	ldrh	r0, [r7, #12]
 80168d8:	693b      	ldr	r3, [r7, #16]
 80168da:	33f0      	adds	r3, #240	; 0xf0
 80168dc:	697a      	ldr	r2, [r7, #20]
 80168de:	4619      	mov	r1, r3
 80168e0:	f000 ffae 	bl	8017840 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80168e4:	4b21      	ldr	r3, [pc, #132]	; (801696c <dhcp_renew+0x130>)
 80168e6:	6818      	ldr	r0, [r3, #0]
 80168e8:	69bb      	ldr	r3, [r7, #24]
 80168ea:	f103 0218 	add.w	r2, r3, #24
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	9300      	str	r3, [sp, #0]
 80168f2:	2343      	movs	r3, #67	; 0x43
 80168f4:	6979      	ldr	r1, [r7, #20]
 80168f6:	f7fe fe11 	bl	801551c <udp_sendto_if>
 80168fa:	4603      	mov	r3, r0
 80168fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80168fe:	6978      	ldr	r0, [r7, #20]
 8016900:	f7f8 fd72 	bl	800f3e8 <pbuf_free>
 8016904:	e001      	b.n	801690a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016906:	23ff      	movs	r3, #255	; 0xff
 8016908:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801690a:	69bb      	ldr	r3, [r7, #24]
 801690c:	799b      	ldrb	r3, [r3, #6]
 801690e:	2bff      	cmp	r3, #255	; 0xff
 8016910:	d005      	beq.n	801691e <dhcp_renew+0xe2>
    dhcp->tries++;
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	799b      	ldrb	r3, [r3, #6]
 8016916:	3301      	adds	r3, #1
 8016918:	b2da      	uxtb	r2, r3
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801691e:	69bb      	ldr	r3, [r7, #24]
 8016920:	799b      	ldrb	r3, [r3, #6]
 8016922:	2b09      	cmp	r3, #9
 8016924:	d80a      	bhi.n	801693c <dhcp_renew+0x100>
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	799b      	ldrb	r3, [r3, #6]
 801692a:	b29b      	uxth	r3, r3
 801692c:	461a      	mov	r2, r3
 801692e:	0152      	lsls	r2, r2, #5
 8016930:	1ad2      	subs	r2, r2, r3
 8016932:	0092      	lsls	r2, r2, #2
 8016934:	4413      	add	r3, r2
 8016936:	011b      	lsls	r3, r3, #4
 8016938:	b29b      	uxth	r3, r3
 801693a:	e001      	b.n	8016940 <dhcp_renew+0x104>
 801693c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8016940:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016942:	89fb      	ldrh	r3, [r7, #14]
 8016944:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016948:	4a09      	ldr	r2, [pc, #36]	; (8016970 <dhcp_renew+0x134>)
 801694a:	fb82 1203 	smull	r1, r2, r2, r3
 801694e:	1152      	asrs	r2, r2, #5
 8016950:	17db      	asrs	r3, r3, #31
 8016952:	1ad3      	subs	r3, r2, r3
 8016954:	b29a      	uxth	r2, r3
 8016956:	69bb      	ldr	r3, [r7, #24]
 8016958:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801695a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801695e:	4618      	mov	r0, r3
 8016960:	3720      	adds	r7, #32
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	200000bc 	.word	0x200000bc
 801696c:	20013dfc 	.word	0x20013dfc
 8016970:	10624dd3 	.word	0x10624dd3

08016974 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b08a      	sub	sp, #40	; 0x28
 8016978:	af02      	add	r7, sp, #8
 801697a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016980:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016982:	2104      	movs	r1, #4
 8016984:	69b8      	ldr	r0, [r7, #24]
 8016986:	f000 f9ec 	bl	8016d62 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801698a:	f107 030c 	add.w	r3, r7, #12
 801698e:	2203      	movs	r2, #3
 8016990:	69b9      	ldr	r1, [r7, #24]
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	f000 fe7e 	bl	8017694 <dhcp_create_msg>
 8016998:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d04c      	beq.n	8016a3a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80169a6:	89b8      	ldrh	r0, [r7, #12]
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169ae:	2302      	movs	r3, #2
 80169b0:	2239      	movs	r2, #57	; 0x39
 80169b2:	f000 f9f1 	bl	8016d98 <dhcp_option>
 80169b6:	4603      	mov	r3, r0
 80169b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80169ba:	89b8      	ldrh	r0, [r7, #12]
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169c6:	461a      	mov	r2, r3
 80169c8:	f000 fa40 	bl	8016e4c <dhcp_option_short>
 80169cc:	4603      	mov	r3, r0
 80169ce:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80169d0:	89b8      	ldrh	r0, [r7, #12]
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169d8:	2303      	movs	r3, #3
 80169da:	2237      	movs	r2, #55	; 0x37
 80169dc:	f000 f9dc 	bl	8016d98 <dhcp_option>
 80169e0:	4603      	mov	r3, r0
 80169e2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80169e4:	2300      	movs	r3, #0
 80169e6:	77bb      	strb	r3, [r7, #30]
 80169e8:	e00e      	b.n	8016a08 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80169ea:	89b8      	ldrh	r0, [r7, #12]
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169f2:	7fbb      	ldrb	r3, [r7, #30]
 80169f4:	4a29      	ldr	r2, [pc, #164]	; (8016a9c <dhcp_rebind+0x128>)
 80169f6:	5cd3      	ldrb	r3, [r2, r3]
 80169f8:	461a      	mov	r2, r3
 80169fa:	f000 fa01 	bl	8016e00 <dhcp_option_byte>
 80169fe:	4603      	mov	r3, r0
 8016a00:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016a02:	7fbb      	ldrb	r3, [r7, #30]
 8016a04:	3301      	adds	r3, #1
 8016a06:	77bb      	strb	r3, [r7, #30]
 8016a08:	7fbb      	ldrb	r3, [r7, #30]
 8016a0a:	2b02      	cmp	r3, #2
 8016a0c:	d9ed      	bls.n	80169ea <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016a0e:	89b8      	ldrh	r0, [r7, #12]
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	33f0      	adds	r3, #240	; 0xf0
 8016a14:	697a      	ldr	r2, [r7, #20]
 8016a16:	4619      	mov	r1, r3
 8016a18:	f000 ff12 	bl	8017840 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016a1c:	4b20      	ldr	r3, [pc, #128]	; (8016aa0 <dhcp_rebind+0x12c>)
 8016a1e:	6818      	ldr	r0, [r3, #0]
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	9300      	str	r3, [sp, #0]
 8016a24:	2343      	movs	r3, #67	; 0x43
 8016a26:	4a1f      	ldr	r2, [pc, #124]	; (8016aa4 <dhcp_rebind+0x130>)
 8016a28:	6979      	ldr	r1, [r7, #20]
 8016a2a:	f7fe fd77 	bl	801551c <udp_sendto_if>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016a32:	6978      	ldr	r0, [r7, #20]
 8016a34:	f7f8 fcd8 	bl	800f3e8 <pbuf_free>
 8016a38:	e001      	b.n	8016a3e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016a3a:	23ff      	movs	r3, #255	; 0xff
 8016a3c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016a3e:	69bb      	ldr	r3, [r7, #24]
 8016a40:	799b      	ldrb	r3, [r3, #6]
 8016a42:	2bff      	cmp	r3, #255	; 0xff
 8016a44:	d005      	beq.n	8016a52 <dhcp_rebind+0xde>
    dhcp->tries++;
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	799b      	ldrb	r3, [r3, #6]
 8016a4a:	3301      	adds	r3, #1
 8016a4c:	b2da      	uxtb	r2, r3
 8016a4e:	69bb      	ldr	r3, [r7, #24]
 8016a50:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016a52:	69bb      	ldr	r3, [r7, #24]
 8016a54:	799b      	ldrb	r3, [r3, #6]
 8016a56:	2b09      	cmp	r3, #9
 8016a58:	d80a      	bhi.n	8016a70 <dhcp_rebind+0xfc>
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	799b      	ldrb	r3, [r3, #6]
 8016a5e:	b29b      	uxth	r3, r3
 8016a60:	461a      	mov	r2, r3
 8016a62:	0152      	lsls	r2, r2, #5
 8016a64:	1ad2      	subs	r2, r2, r3
 8016a66:	0092      	lsls	r2, r2, #2
 8016a68:	4413      	add	r3, r2
 8016a6a:	00db      	lsls	r3, r3, #3
 8016a6c:	b29b      	uxth	r3, r3
 8016a6e:	e001      	b.n	8016a74 <dhcp_rebind+0x100>
 8016a70:	f242 7310 	movw	r3, #10000	; 0x2710
 8016a74:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016a76:	89fb      	ldrh	r3, [r7, #14]
 8016a78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016a7c:	4a0a      	ldr	r2, [pc, #40]	; (8016aa8 <dhcp_rebind+0x134>)
 8016a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8016a82:	1152      	asrs	r2, r2, #5
 8016a84:	17db      	asrs	r3, r3, #31
 8016a86:	1ad3      	subs	r3, r2, r3
 8016a88:	b29a      	uxth	r2, r3
 8016a8a:	69bb      	ldr	r3, [r7, #24]
 8016a8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016a8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016a92:	4618      	mov	r0, r3
 8016a94:	3720      	adds	r7, #32
 8016a96:	46bd      	mov	sp, r7
 8016a98:	bd80      	pop	{r7, pc}
 8016a9a:	bf00      	nop
 8016a9c:	200000bc 	.word	0x200000bc
 8016aa0:	20013dfc 	.word	0x20013dfc
 8016aa4:	0806c804 	.word	0x0806c804
 8016aa8:	10624dd3 	.word	0x10624dd3

08016aac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016aac:	b5b0      	push	{r4, r5, r7, lr}
 8016aae:	b08a      	sub	sp, #40	; 0x28
 8016ab0:	af02      	add	r7, sp, #8
 8016ab2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ab8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016aba:	2103      	movs	r1, #3
 8016abc:	69b8      	ldr	r0, [r7, #24]
 8016abe:	f000 f950 	bl	8016d62 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016ac2:	f107 030c 	add.w	r3, r7, #12
 8016ac6:	2203      	movs	r2, #3
 8016ac8:	69b9      	ldr	r1, [r7, #24]
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 fde2 	bl	8017694 <dhcp_create_msg>
 8016ad0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d066      	beq.n	8016ba6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016ade:	89b8      	ldrh	r0, [r7, #12]
 8016ae0:	693b      	ldr	r3, [r7, #16]
 8016ae2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016ae6:	2302      	movs	r3, #2
 8016ae8:	2239      	movs	r2, #57	; 0x39
 8016aea:	f000 f955 	bl	8016d98 <dhcp_option>
 8016aee:	4603      	mov	r3, r0
 8016af0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016af2:	89b8      	ldrh	r0, [r7, #12]
 8016af4:	693b      	ldr	r3, [r7, #16]
 8016af6:	33f0      	adds	r3, #240	; 0xf0
 8016af8:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016afc:	4619      	mov	r1, r3
 8016afe:	f000 f9a5 	bl	8016e4c <dhcp_option_short>
 8016b02:	4603      	mov	r3, r0
 8016b04:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016b06:	89b8      	ldrh	r0, [r7, #12]
 8016b08:	693b      	ldr	r3, [r7, #16]
 8016b0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016b0e:	2304      	movs	r3, #4
 8016b10:	2232      	movs	r2, #50	; 0x32
 8016b12:	f000 f941 	bl	8016d98 <dhcp_option>
 8016b16:	4603      	mov	r3, r0
 8016b18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016b1a:	89bc      	ldrh	r4, [r7, #12]
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016b22:	69bb      	ldr	r3, [r7, #24]
 8016b24:	69db      	ldr	r3, [r3, #28]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f6 ff51 	bl	800d9ce <lwip_htonl>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	461a      	mov	r2, r3
 8016b30:	4629      	mov	r1, r5
 8016b32:	4620      	mov	r0, r4
 8016b34:	f000 f9bc 	bl	8016eb0 <dhcp_option_long>
 8016b38:	4603      	mov	r3, r0
 8016b3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016b3c:	89b8      	ldrh	r0, [r7, #12]
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016b44:	2303      	movs	r3, #3
 8016b46:	2237      	movs	r2, #55	; 0x37
 8016b48:	f000 f926 	bl	8016d98 <dhcp_option>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b50:	2300      	movs	r3, #0
 8016b52:	77bb      	strb	r3, [r7, #30]
 8016b54:	e00e      	b.n	8016b74 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016b56:	89b8      	ldrh	r0, [r7, #12]
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016b5e:	7fbb      	ldrb	r3, [r7, #30]
 8016b60:	4a29      	ldr	r2, [pc, #164]	; (8016c08 <dhcp_reboot+0x15c>)
 8016b62:	5cd3      	ldrb	r3, [r2, r3]
 8016b64:	461a      	mov	r2, r3
 8016b66:	f000 f94b 	bl	8016e00 <dhcp_option_byte>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b6e:	7fbb      	ldrb	r3, [r7, #30]
 8016b70:	3301      	adds	r3, #1
 8016b72:	77bb      	strb	r3, [r7, #30]
 8016b74:	7fbb      	ldrb	r3, [r7, #30]
 8016b76:	2b02      	cmp	r3, #2
 8016b78:	d9ed      	bls.n	8016b56 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b7a:	89b8      	ldrh	r0, [r7, #12]
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	33f0      	adds	r3, #240	; 0xf0
 8016b80:	697a      	ldr	r2, [r7, #20]
 8016b82:	4619      	mov	r1, r3
 8016b84:	f000 fe5c 	bl	8017840 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b88:	4b20      	ldr	r3, [pc, #128]	; (8016c0c <dhcp_reboot+0x160>)
 8016b8a:	6818      	ldr	r0, [r3, #0]
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	9300      	str	r3, [sp, #0]
 8016b90:	2343      	movs	r3, #67	; 0x43
 8016b92:	4a1f      	ldr	r2, [pc, #124]	; (8016c10 <dhcp_reboot+0x164>)
 8016b94:	6979      	ldr	r1, [r7, #20]
 8016b96:	f7fe fcc1 	bl	801551c <udp_sendto_if>
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016b9e:	6978      	ldr	r0, [r7, #20]
 8016ba0:	f7f8 fc22 	bl	800f3e8 <pbuf_free>
 8016ba4:	e001      	b.n	8016baa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016ba6:	23ff      	movs	r3, #255	; 0xff
 8016ba8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016baa:	69bb      	ldr	r3, [r7, #24]
 8016bac:	799b      	ldrb	r3, [r3, #6]
 8016bae:	2bff      	cmp	r3, #255	; 0xff
 8016bb0:	d005      	beq.n	8016bbe <dhcp_reboot+0x112>
    dhcp->tries++;
 8016bb2:	69bb      	ldr	r3, [r7, #24]
 8016bb4:	799b      	ldrb	r3, [r3, #6]
 8016bb6:	3301      	adds	r3, #1
 8016bb8:	b2da      	uxtb	r2, r3
 8016bba:	69bb      	ldr	r3, [r7, #24]
 8016bbc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016bbe:	69bb      	ldr	r3, [r7, #24]
 8016bc0:	799b      	ldrb	r3, [r3, #6]
 8016bc2:	2b09      	cmp	r3, #9
 8016bc4:	d80a      	bhi.n	8016bdc <dhcp_reboot+0x130>
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	799b      	ldrb	r3, [r3, #6]
 8016bca:	b29b      	uxth	r3, r3
 8016bcc:	461a      	mov	r2, r3
 8016bce:	0152      	lsls	r2, r2, #5
 8016bd0:	1ad2      	subs	r2, r2, r3
 8016bd2:	0092      	lsls	r2, r2, #2
 8016bd4:	4413      	add	r3, r2
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	e001      	b.n	8016be0 <dhcp_reboot+0x134>
 8016bdc:	f242 7310 	movw	r3, #10000	; 0x2710
 8016be0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016be2:	89fb      	ldrh	r3, [r7, #14]
 8016be4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016be8:	4a0a      	ldr	r2, [pc, #40]	; (8016c14 <dhcp_reboot+0x168>)
 8016bea:	fb82 1203 	smull	r1, r2, r2, r3
 8016bee:	1152      	asrs	r2, r2, #5
 8016bf0:	17db      	asrs	r3, r3, #31
 8016bf2:	1ad3      	subs	r3, r2, r3
 8016bf4:	b29a      	uxth	r2, r3
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016bfe:	4618      	mov	r0, r3
 8016c00:	3720      	adds	r7, #32
 8016c02:	46bd      	mov	sp, r7
 8016c04:	bdb0      	pop	{r4, r5, r7, pc}
 8016c06:	bf00      	nop
 8016c08:	200000bc 	.word	0x200000bc
 8016c0c:	20013dfc 	.word	0x20013dfc
 8016c10:	0806c804 	.word	0x0806c804
 8016c14:	10624dd3 	.word	0x10624dd3

08016c18 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016c18:	b5b0      	push	{r4, r5, r7, lr}
 8016c1a:	b08a      	sub	sp, #40	; 0x28
 8016c1c:	af02      	add	r7, sp, #8
 8016c1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c24:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8016c26:	69fb      	ldr	r3, [r7, #28]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	f000 8084 	beq.w	8016d36 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	795b      	ldrb	r3, [r3, #5]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f000 8081 	beq.w	8016d3a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016c38:	69fb      	ldr	r3, [r7, #28]
 8016c3a:	699b      	ldr	r3, [r3, #24]
 8016c3c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016c3e:	69fb      	ldr	r3, [r7, #28]
 8016c40:	2200      	movs	r2, #0
 8016c42:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016c44:	69fb      	ldr	r3, [r7, #28]
 8016c46:	2200      	movs	r2, #0
 8016c48:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016c4a:	69fb      	ldr	r3, [r7, #28]
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	2200      	movs	r2, #0
 8016c54:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016c56:	69fb      	ldr	r3, [r7, #28]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8016c5c:	69fb      	ldr	r3, [r7, #28]
 8016c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016c60:	69fb      	ldr	r3, [r7, #28]
 8016c62:	62da      	str	r2, [r3, #44]	; 0x2c
 8016c64:	69fb      	ldr	r3, [r7, #28]
 8016c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016c6c:	69fb      	ldr	r3, [r7, #28]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	829a      	strh	r2, [r3, #20]
 8016c72:	69fb      	ldr	r3, [r7, #28]
 8016c74:	8a9a      	ldrh	r2, [r3, #20]
 8016c76:	69fb      	ldr	r3, [r7, #28]
 8016c78:	825a      	strh	r2, [r3, #18]
 8016c7a:	69fb      	ldr	r3, [r7, #28]
 8016c7c:	8a5a      	ldrh	r2, [r3, #18]
 8016c7e:	69fb      	ldr	r3, [r7, #28]
 8016c80:	821a      	strh	r2, [r3, #16]
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	8a1a      	ldrh	r2, [r3, #16]
 8016c86:	69fb      	ldr	r3, [r7, #28]
 8016c88:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016c8a:	6878      	ldr	r0, [r7, #4]
 8016c8c:	f000 fe06 	bl	801789c <dhcp_supplied_address>
 8016c90:	4603      	mov	r3, r0
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d03b      	beq.n	8016d0e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016c96:	f107 030e 	add.w	r3, r7, #14
 8016c9a:	2207      	movs	r2, #7
 8016c9c:	69f9      	ldr	r1, [r7, #28]
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f000 fcf8 	bl	8017694 <dhcp_create_msg>
 8016ca4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8016ca6:	69bb      	ldr	r3, [r7, #24]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d030      	beq.n	8016d0e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016cac:	69bb      	ldr	r3, [r7, #24]
 8016cae:	685b      	ldr	r3, [r3, #4]
 8016cb0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8016cb2:	89f8      	ldrh	r0, [r7, #14]
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016cba:	2304      	movs	r3, #4
 8016cbc:	2236      	movs	r2, #54	; 0x36
 8016cbe:	f000 f86b 	bl	8016d98 <dhcp_option>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8016cc6:	89fc      	ldrh	r4, [r7, #14]
 8016cc8:	697b      	ldr	r3, [r7, #20]
 8016cca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f6 fe7c 	bl	800d9ce <lwip_htonl>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	461a      	mov	r2, r3
 8016cda:	4629      	mov	r1, r5
 8016cdc:	4620      	mov	r0, r4
 8016cde:	f000 f8e7 	bl	8016eb0 <dhcp_option_long>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016ce6:	89f8      	ldrh	r0, [r7, #14]
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	33f0      	adds	r3, #240	; 0xf0
 8016cec:	69ba      	ldr	r2, [r7, #24]
 8016cee:	4619      	mov	r1, r3
 8016cf0:	f000 fda6 	bl	8017840 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016cf4:	4b13      	ldr	r3, [pc, #76]	; (8016d44 <dhcp_release_and_stop+0x12c>)
 8016cf6:	6818      	ldr	r0, [r3, #0]
 8016cf8:	f107 0210 	add.w	r2, r7, #16
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	9300      	str	r3, [sp, #0]
 8016d00:	2343      	movs	r3, #67	; 0x43
 8016d02:	69b9      	ldr	r1, [r7, #24]
 8016d04:	f7fe fc0a 	bl	801551c <udp_sendto_if>
      pbuf_free(p_out);
 8016d08:	69b8      	ldr	r0, [r7, #24]
 8016d0a:	f7f8 fb6d 	bl	800f3e8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016d0e:	4b0e      	ldr	r3, [pc, #56]	; (8016d48 <dhcp_release_and_stop+0x130>)
 8016d10:	4a0d      	ldr	r2, [pc, #52]	; (8016d48 <dhcp_release_and_stop+0x130>)
 8016d12:	490d      	ldr	r1, [pc, #52]	; (8016d48 <dhcp_release_and_stop+0x130>)
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f7f7 fe67 	bl	800e9e8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8016d1a:	2100      	movs	r1, #0
 8016d1c:	69f8      	ldr	r0, [r7, #28]
 8016d1e:	f000 f820 	bl	8016d62 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	791b      	ldrb	r3, [r3, #4]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d008      	beq.n	8016d3c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016d2a:	f7fe ff85 	bl	8015c38 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8016d2e:	69fb      	ldr	r3, [r7, #28]
 8016d30:	2200      	movs	r2, #0
 8016d32:	711a      	strb	r2, [r3, #4]
 8016d34:	e002      	b.n	8016d3c <dhcp_release_and_stop+0x124>
    return;
 8016d36:	bf00      	nop
 8016d38:	e000      	b.n	8016d3c <dhcp_release_and_stop+0x124>
    return;
 8016d3a:	bf00      	nop
  }
}
 8016d3c:	3720      	adds	r7, #32
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	bdb0      	pop	{r4, r5, r7, pc}
 8016d42:	bf00      	nop
 8016d44:	20013dfc 	.word	0x20013dfc
 8016d48:	0806c800 	.word	0x0806c800

08016d4c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b082      	sub	sp, #8
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f7ff ff5f 	bl	8016c18 <dhcp_release_and_stop>
}
 8016d5a:	bf00      	nop
 8016d5c:	3708      	adds	r7, #8
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8016d62:	b480      	push	{r7}
 8016d64:	b083      	sub	sp, #12
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	795b      	ldrb	r3, [r3, #5]
 8016d72:	78fa      	ldrb	r2, [r7, #3]
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d008      	beq.n	8016d8a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	78fa      	ldrb	r2, [r7, #3]
 8016d7c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	2200      	movs	r2, #0
 8016d82:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2200      	movs	r2, #0
 8016d88:	811a      	strh	r2, [r3, #8]
  }
}
 8016d8a:	bf00      	nop
 8016d8c:	370c      	adds	r7, #12
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d94:	4770      	bx	lr
	...

08016d98 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b082      	sub	sp, #8
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6039      	str	r1, [r7, #0]
 8016da0:	4611      	mov	r1, r2
 8016da2:	461a      	mov	r2, r3
 8016da4:	4603      	mov	r3, r0
 8016da6:	80fb      	strh	r3, [r7, #6]
 8016da8:	460b      	mov	r3, r1
 8016daa:	717b      	strb	r3, [r7, #5]
 8016dac:	4613      	mov	r3, r2
 8016dae:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016db0:	88fa      	ldrh	r2, [r7, #6]
 8016db2:	793b      	ldrb	r3, [r7, #4]
 8016db4:	4413      	add	r3, r2
 8016db6:	3302      	adds	r3, #2
 8016db8:	2b44      	cmp	r3, #68	; 0x44
 8016dba:	d906      	bls.n	8016dca <dhcp_option+0x32>
 8016dbc:	4b0d      	ldr	r3, [pc, #52]	; (8016df4 <dhcp_option+0x5c>)
 8016dbe:	f240 529a 	movw	r2, #1434	; 0x59a
 8016dc2:	490d      	ldr	r1, [pc, #52]	; (8016df8 <dhcp_option+0x60>)
 8016dc4:	480d      	ldr	r0, [pc, #52]	; (8016dfc <dhcp_option+0x64>)
 8016dc6:	f004 f965 	bl	801b094 <iprintf>
  options[options_out_len++] = option_type;
 8016dca:	88fb      	ldrh	r3, [r7, #6]
 8016dcc:	1c5a      	adds	r2, r3, #1
 8016dce:	80fa      	strh	r2, [r7, #6]
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	4413      	add	r3, r2
 8016dd6:	797a      	ldrb	r2, [r7, #5]
 8016dd8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016dda:	88fb      	ldrh	r3, [r7, #6]
 8016ddc:	1c5a      	adds	r2, r3, #1
 8016dde:	80fa      	strh	r2, [r7, #6]
 8016de0:	461a      	mov	r2, r3
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	4413      	add	r3, r2
 8016de6:	793a      	ldrb	r2, [r7, #4]
 8016de8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016dea:	88fb      	ldrh	r3, [r7, #6]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3708      	adds	r7, #8
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	0801ffa8 	.word	0x0801ffa8
 8016df8:	0802013c 	.word	0x0802013c
 8016dfc:	08020008 	.word	0x08020008

08016e00 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	4603      	mov	r3, r0
 8016e08:	6039      	str	r1, [r7, #0]
 8016e0a:	80fb      	strh	r3, [r7, #6]
 8016e0c:	4613      	mov	r3, r2
 8016e0e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016e10:	88fb      	ldrh	r3, [r7, #6]
 8016e12:	2b43      	cmp	r3, #67	; 0x43
 8016e14:	d906      	bls.n	8016e24 <dhcp_option_byte+0x24>
 8016e16:	4b0a      	ldr	r3, [pc, #40]	; (8016e40 <dhcp_option_byte+0x40>)
 8016e18:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016e1c:	4909      	ldr	r1, [pc, #36]	; (8016e44 <dhcp_option_byte+0x44>)
 8016e1e:	480a      	ldr	r0, [pc, #40]	; (8016e48 <dhcp_option_byte+0x48>)
 8016e20:	f004 f938 	bl	801b094 <iprintf>
  options[options_out_len++] = value;
 8016e24:	88fb      	ldrh	r3, [r7, #6]
 8016e26:	1c5a      	adds	r2, r3, #1
 8016e28:	80fa      	strh	r2, [r7, #6]
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	4413      	add	r3, r2
 8016e30:	797a      	ldrb	r2, [r7, #5]
 8016e32:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e34:	88fb      	ldrh	r3, [r7, #6]
}
 8016e36:	4618      	mov	r0, r3
 8016e38:	3708      	adds	r7, #8
 8016e3a:	46bd      	mov	sp, r7
 8016e3c:	bd80      	pop	{r7, pc}
 8016e3e:	bf00      	nop
 8016e40:	0801ffa8 	.word	0x0801ffa8
 8016e44:	08020180 	.word	0x08020180
 8016e48:	08020008 	.word	0x08020008

08016e4c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b082      	sub	sp, #8
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	4603      	mov	r3, r0
 8016e54:	6039      	str	r1, [r7, #0]
 8016e56:	80fb      	strh	r3, [r7, #6]
 8016e58:	4613      	mov	r3, r2
 8016e5a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016e5c:	88fb      	ldrh	r3, [r7, #6]
 8016e5e:	3302      	adds	r3, #2
 8016e60:	2b44      	cmp	r3, #68	; 0x44
 8016e62:	d906      	bls.n	8016e72 <dhcp_option_short+0x26>
 8016e64:	4b0f      	ldr	r3, [pc, #60]	; (8016ea4 <dhcp_option_short+0x58>)
 8016e66:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016e6a:	490f      	ldr	r1, [pc, #60]	; (8016ea8 <dhcp_option_short+0x5c>)
 8016e6c:	480f      	ldr	r0, [pc, #60]	; (8016eac <dhcp_option_short+0x60>)
 8016e6e:	f004 f911 	bl	801b094 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016e72:	88bb      	ldrh	r3, [r7, #4]
 8016e74:	0a1b      	lsrs	r3, r3, #8
 8016e76:	b29a      	uxth	r2, r3
 8016e78:	88fb      	ldrh	r3, [r7, #6]
 8016e7a:	1c59      	adds	r1, r3, #1
 8016e7c:	80f9      	strh	r1, [r7, #6]
 8016e7e:	4619      	mov	r1, r3
 8016e80:	683b      	ldr	r3, [r7, #0]
 8016e82:	440b      	add	r3, r1
 8016e84:	b2d2      	uxtb	r2, r2
 8016e86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016e88:	88fb      	ldrh	r3, [r7, #6]
 8016e8a:	1c5a      	adds	r2, r3, #1
 8016e8c:	80fa      	strh	r2, [r7, #6]
 8016e8e:	461a      	mov	r2, r3
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	4413      	add	r3, r2
 8016e94:	88ba      	ldrh	r2, [r7, #4]
 8016e96:	b2d2      	uxtb	r2, r2
 8016e98:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016e9a:	88fb      	ldrh	r3, [r7, #6]
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3708      	adds	r7, #8
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	0801ffa8 	.word	0x0801ffa8
 8016ea8:	080201b8 	.word	0x080201b8
 8016eac:	08020008 	.word	0x08020008

08016eb0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b084      	sub	sp, #16
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
 8016ebc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016ebe:	89fb      	ldrh	r3, [r7, #14]
 8016ec0:	3304      	adds	r3, #4
 8016ec2:	2b44      	cmp	r3, #68	; 0x44
 8016ec4:	d906      	bls.n	8016ed4 <dhcp_option_long+0x24>
 8016ec6:	4b19      	ldr	r3, [pc, #100]	; (8016f2c <dhcp_option_long+0x7c>)
 8016ec8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016ecc:	4918      	ldr	r1, [pc, #96]	; (8016f30 <dhcp_option_long+0x80>)
 8016ece:	4819      	ldr	r0, [pc, #100]	; (8016f34 <dhcp_option_long+0x84>)
 8016ed0:	f004 f8e0 	bl	801b094 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	0e1a      	lsrs	r2, r3, #24
 8016ed8:	89fb      	ldrh	r3, [r7, #14]
 8016eda:	1c59      	adds	r1, r3, #1
 8016edc:	81f9      	strh	r1, [r7, #14]
 8016ede:	4619      	mov	r1, r3
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	440b      	add	r3, r1
 8016ee4:	b2d2      	uxtb	r2, r2
 8016ee6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	0c1a      	lsrs	r2, r3, #16
 8016eec:	89fb      	ldrh	r3, [r7, #14]
 8016eee:	1c59      	adds	r1, r3, #1
 8016ef0:	81f9      	strh	r1, [r7, #14]
 8016ef2:	4619      	mov	r1, r3
 8016ef4:	68bb      	ldr	r3, [r7, #8]
 8016ef6:	440b      	add	r3, r1
 8016ef8:	b2d2      	uxtb	r2, r2
 8016efa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	0a1a      	lsrs	r2, r3, #8
 8016f00:	89fb      	ldrh	r3, [r7, #14]
 8016f02:	1c59      	adds	r1, r3, #1
 8016f04:	81f9      	strh	r1, [r7, #14]
 8016f06:	4619      	mov	r1, r3
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	440b      	add	r3, r1
 8016f0c:	b2d2      	uxtb	r2, r2
 8016f0e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016f10:	89fb      	ldrh	r3, [r7, #14]
 8016f12:	1c5a      	adds	r2, r3, #1
 8016f14:	81fa      	strh	r2, [r7, #14]
 8016f16:	461a      	mov	r2, r3
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	4413      	add	r3, r2
 8016f1c:	687a      	ldr	r2, [r7, #4]
 8016f1e:	b2d2      	uxtb	r2, r2
 8016f20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016f22:	89fb      	ldrh	r3, [r7, #14]
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	0801ffa8 	.word	0x0801ffa8
 8016f30:	080201f4 	.word	0x080201f4
 8016f34:	08020008 	.word	0x08020008

08016f38 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b092      	sub	sp, #72	; 0x48
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
 8016f40:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016f42:	2300      	movs	r3, #0
 8016f44:	633b      	str	r3, [r7, #48]	; 0x30
  int parse_sname_as_options = 0;
 8016f46:	2300      	movs	r3, #0
 8016f48:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016f4a:	2208      	movs	r2, #8
 8016f4c:	2100      	movs	r1, #0
 8016f4e:	48b8      	ldr	r0, [pc, #736]	; (8017230 <dhcp_parse_reply+0x2f8>)
 8016f50:	f004 fa02 	bl	801b358 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	895b      	ldrh	r3, [r3, #10]
 8016f58:	2b2b      	cmp	r3, #43	; 0x2b
 8016f5a:	d802      	bhi.n	8016f62 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016f5c:	f06f 0301 	mvn.w	r3, #1
 8016f60:	e2b8      	b.n	80174d4 <dhcp_parse_reply+0x59c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016f68:	23f0      	movs	r3, #240	; 0xf0
 8016f6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	891b      	ldrh	r3, [r3, #8]
 8016f70:	877b      	strh	r3, [r7, #58]	; 0x3a
again:
  q = p;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016f76:	e00c      	b.n	8016f92 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f7a:	895b      	ldrh	r3, [r3, #10]
 8016f7c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016f7e:	1ad3      	subs	r3, r2, r3
 8016f80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f84:	895b      	ldrh	r3, [r3, #10]
 8016f86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f88:	1ad3      	subs	r3, r2, r3
 8016f8a:	877b      	strh	r3, [r7, #58]	; 0x3a
    q = q->next;
 8016f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (options_idx >= q->len)) {
 8016f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f94:	2b00      	cmp	r3, #0
 8016f96:	d004      	beq.n	8016fa2 <dhcp_parse_reply+0x6a>
 8016f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f9a:	895b      	ldrh	r3, [r3, #10]
 8016f9c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d2ea      	bcs.n	8016f78 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d102      	bne.n	8016fae <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016fa8:	f06f 0301 	mvn.w	r3, #1
 8016fac:	e292      	b.n	80174d4 <dhcp_parse_reply+0x59c>
  }
  offset = options_idx;
 8016fae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016fb0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  offset_max = options_idx_max;
 8016fb4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016fb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
  options = (u8_t *)q->payload;
 8016fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fba:	685b      	ldr	r3, [r3, #4]
 8016fbc:	643b      	str	r3, [r7, #64]	; 0x40
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016fbe:	e247      	b.n	8017450 <dhcp_parse_reply+0x518>
    u8_t op = options[offset];
 8016fc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016fc6:	4413      	add	r3, r2
 8016fc8:	781b      	ldrb	r3, [r3, #0]
 8016fca:	76fb      	strb	r3, [r7, #27]
    u8_t len;
    u8_t decode_len = 0;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    int decode_idx = -1;
 8016fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fd6:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t val_offset = (u16_t)(offset + 2);
 8016fd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016fdc:	3302      	adds	r3, #2
 8016fde:	847b      	strh	r3, [r7, #34]	; 0x22
    if (val_offset < offset) {
 8016fe0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016fe2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d202      	bcs.n	8016ff0 <dhcp_parse_reply+0xb8>
      /* overflow */
      return ERR_BUF;
 8016fea:	f06f 0301 	mvn.w	r3, #1
 8016fee:	e271      	b.n	80174d4 <dhcp_parse_reply+0x59c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016ff0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ff8:	8952      	ldrh	r2, [r2, #10]
 8016ffa:	4293      	cmp	r3, r2
 8016ffc:	da08      	bge.n	8017010 <dhcp_parse_reply+0xd8>
      len = options[offset + 1];
 8016ffe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017002:	3301      	adds	r3, #1
 8017004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017006:	4413      	add	r3, r2
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801700e:	e00b      	b.n	8017028 <dhcp_parse_reply+0xf0>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d004      	beq.n	8017022 <dhcp_parse_reply+0xea>
 8017018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	685b      	ldr	r3, [r3, #4]
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	e000      	b.n	8017024 <dhcp_parse_reply+0xec>
 8017022:	2300      	movs	r3, #0
 8017024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8017028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801702c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    switch (op) {
 8017030:	7efb      	ldrb	r3, [r7, #27]
 8017032:	2b3b      	cmp	r3, #59	; 0x3b
 8017034:	f200 812c 	bhi.w	8017290 <dhcp_parse_reply+0x358>
 8017038:	a201      	add	r2, pc, #4	; (adr r2, 8017040 <dhcp_parse_reply+0x108>)
 801703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801703e:	bf00      	nop
 8017040:	08017131 	.word	0x08017131
 8017044:	08017141 	.word	0x08017141
 8017048:	08017291 	.word	0x08017291
 801704c:	08017163 	.word	0x08017163
 8017050:	08017291 	.word	0x08017291
 8017054:	08017291 	.word	0x08017291
 8017058:	08017291 	.word	0x08017291
 801705c:	08017291 	.word	0x08017291
 8017060:	08017291 	.word	0x08017291
 8017064:	08017291 	.word	0x08017291
 8017068:	08017291 	.word	0x08017291
 801706c:	08017291 	.word	0x08017291
 8017070:	08017291 	.word	0x08017291
 8017074:	08017291 	.word	0x08017291
 8017078:	08017291 	.word	0x08017291
 801707c:	08017291 	.word	0x08017291
 8017080:	08017291 	.word	0x08017291
 8017084:	08017291 	.word	0x08017291
 8017088:	08017291 	.word	0x08017291
 801708c:	08017291 	.word	0x08017291
 8017090:	08017291 	.word	0x08017291
 8017094:	08017291 	.word	0x08017291
 8017098:	08017291 	.word	0x08017291
 801709c:	08017291 	.word	0x08017291
 80170a0:	08017291 	.word	0x08017291
 80170a4:	08017291 	.word	0x08017291
 80170a8:	08017291 	.word	0x08017291
 80170ac:	08017291 	.word	0x08017291
 80170b0:	08017291 	.word	0x08017291
 80170b4:	08017291 	.word	0x08017291
 80170b8:	08017291 	.word	0x08017291
 80170bc:	08017291 	.word	0x08017291
 80170c0:	08017291 	.word	0x08017291
 80170c4:	08017291 	.word	0x08017291
 80170c8:	08017291 	.word	0x08017291
 80170cc:	08017291 	.word	0x08017291
 80170d0:	08017291 	.word	0x08017291
 80170d4:	08017291 	.word	0x08017291
 80170d8:	08017291 	.word	0x08017291
 80170dc:	08017291 	.word	0x08017291
 80170e0:	08017291 	.word	0x08017291
 80170e4:	08017291 	.word	0x08017291
 80170e8:	08017291 	.word	0x08017291
 80170ec:	08017291 	.word	0x08017291
 80170f0:	08017291 	.word	0x08017291
 80170f4:	08017291 	.word	0x08017291
 80170f8:	08017291 	.word	0x08017291
 80170fc:	08017291 	.word	0x08017291
 8017100:	08017291 	.word	0x08017291
 8017104:	08017291 	.word	0x08017291
 8017108:	08017291 	.word	0x08017291
 801710c:	0801718f 	.word	0x0801718f
 8017110:	080171b1 	.word	0x080171b1
 8017114:	080171ed 	.word	0x080171ed
 8017118:	0801720f 	.word	0x0801720f
 801711c:	08017291 	.word	0x08017291
 8017120:	08017291 	.word	0x08017291
 8017124:	08017291 	.word	0x08017291
 8017128:	0801724d 	.word	0x0801724d
 801712c:	0801726f 	.word	0x0801726f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8017130:	2300      	movs	r3, #0
 8017132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801713a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        /* will be increased below */
        break;
 801713e:	e0ab      	b.n	8017298 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017144:	2b04      	cmp	r3, #4
 8017146:	d009      	beq.n	801715c <dhcp_parse_reply+0x224>
 8017148:	4b3a      	ldr	r3, [pc, #232]	; (8017234 <dhcp_parse_reply+0x2fc>)
 801714a:	f240 622e 	movw	r2, #1582	; 0x62e
 801714e:	493a      	ldr	r1, [pc, #232]	; (8017238 <dhcp_parse_reply+0x300>)
 8017150:	483a      	ldr	r0, [pc, #232]	; (801723c <dhcp_parse_reply+0x304>)
 8017152:	f003 ff9f 	bl	801b094 <iprintf>
 8017156:	f06f 0305 	mvn.w	r3, #5
 801715a:	e1bb      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801715c:	2306      	movs	r3, #6
 801715e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8017160:	e09a      	b.n	8017298 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8017162:	2304      	movs	r3, #4
 8017164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8017168:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 801716c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017170:	429a      	cmp	r2, r3
 8017172:	d209      	bcs.n	8017188 <dhcp_parse_reply+0x250>
 8017174:	4b2f      	ldr	r3, [pc, #188]	; (8017234 <dhcp_parse_reply+0x2fc>)
 8017176:	f240 6233 	movw	r2, #1587	; 0x633
 801717a:	4931      	ldr	r1, [pc, #196]	; (8017240 <dhcp_parse_reply+0x308>)
 801717c:	482f      	ldr	r0, [pc, #188]	; (801723c <dhcp_parse_reply+0x304>)
 801717e:	f003 ff89 	bl	801b094 <iprintf>
 8017182:	f06f 0305 	mvn.w	r3, #5
 8017186:	e1a5      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8017188:	2307      	movs	r3, #7
 801718a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801718c:	e084      	b.n	8017298 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801718e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017192:	2b04      	cmp	r3, #4
 8017194:	d009      	beq.n	80171aa <dhcp_parse_reply+0x272>
 8017196:	4b27      	ldr	r3, [pc, #156]	; (8017234 <dhcp_parse_reply+0x2fc>)
 8017198:	f240 6241 	movw	r2, #1601	; 0x641
 801719c:	4926      	ldr	r1, [pc, #152]	; (8017238 <dhcp_parse_reply+0x300>)
 801719e:	4827      	ldr	r0, [pc, #156]	; (801723c <dhcp_parse_reply+0x304>)
 80171a0:	f003 ff78 	bl	801b094 <iprintf>
 80171a4:	f06f 0305 	mvn.w	r3, #5
 80171a8:	e194      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80171aa:	2303      	movs	r3, #3
 80171ac:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80171ae:	e073      	b.n	8017298 <dhcp_parse_reply+0x360>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80171b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80171b4:	2b01      	cmp	r3, #1
 80171b6:	d009      	beq.n	80171cc <dhcp_parse_reply+0x294>
 80171b8:	4b1e      	ldr	r3, [pc, #120]	; (8017234 <dhcp_parse_reply+0x2fc>)
 80171ba:	f240 624f 	movw	r2, #1615	; 0x64f
 80171be:	4921      	ldr	r1, [pc, #132]	; (8017244 <dhcp_parse_reply+0x30c>)
 80171c0:	481e      	ldr	r0, [pc, #120]	; (801723c <dhcp_parse_reply+0x304>)
 80171c2:	f003 ff67 	bl	801b094 <iprintf>
 80171c6:	f06f 0305 	mvn.w	r3, #5
 80171ca:	e183      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80171cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80171ce:	2bf0      	cmp	r3, #240	; 0xf0
 80171d0:	d009      	beq.n	80171e6 <dhcp_parse_reply+0x2ae>
 80171d2:	4b18      	ldr	r3, [pc, #96]	; (8017234 <dhcp_parse_reply+0x2fc>)
 80171d4:	f240 6251 	movw	r2, #1617	; 0x651
 80171d8:	491b      	ldr	r1, [pc, #108]	; (8017248 <dhcp_parse_reply+0x310>)
 80171da:	4818      	ldr	r0, [pc, #96]	; (801723c <dhcp_parse_reply+0x304>)
 80171dc:	f003 ff5a 	bl	801b094 <iprintf>
 80171e0:	f06f 0305 	mvn.w	r3, #5
 80171e4:	e176      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80171e6:	2300      	movs	r3, #0
 80171e8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80171ea:	e055      	b.n	8017298 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80171ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80171f0:	2b01      	cmp	r3, #1
 80171f2:	d009      	beq.n	8017208 <dhcp_parse_reply+0x2d0>
 80171f4:	4b0f      	ldr	r3, [pc, #60]	; (8017234 <dhcp_parse_reply+0x2fc>)
 80171f6:	f240 6255 	movw	r2, #1621	; 0x655
 80171fa:	4912      	ldr	r1, [pc, #72]	; (8017244 <dhcp_parse_reply+0x30c>)
 80171fc:	480f      	ldr	r0, [pc, #60]	; (801723c <dhcp_parse_reply+0x304>)
 80171fe:	f003 ff49 	bl	801b094 <iprintf>
 8017202:	f06f 0305 	mvn.w	r3, #5
 8017206:	e165      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8017208:	2301      	movs	r3, #1
 801720a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801720c:	e044      	b.n	8017298 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801720e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017212:	2b04      	cmp	r3, #4
 8017214:	d009      	beq.n	801722a <dhcp_parse_reply+0x2f2>
 8017216:	4b07      	ldr	r3, [pc, #28]	; (8017234 <dhcp_parse_reply+0x2fc>)
 8017218:	f240 6259 	movw	r2, #1625	; 0x659
 801721c:	4906      	ldr	r1, [pc, #24]	; (8017238 <dhcp_parse_reply+0x300>)
 801721e:	4807      	ldr	r0, [pc, #28]	; (801723c <dhcp_parse_reply+0x304>)
 8017220:	f003 ff38 	bl	801b094 <iprintf>
 8017224:	f06f 0305 	mvn.w	r3, #5
 8017228:	e154      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801722a:	2302      	movs	r3, #2
 801722c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801722e:	e033      	b.n	8017298 <dhcp_parse_reply+0x360>
 8017230:	20013df4 	.word	0x20013df4
 8017234:	0801ffa8 	.word	0x0801ffa8
 8017238:	08020230 	.word	0x08020230
 801723c:	08020008 	.word	0x08020008
 8017240:	0802023c 	.word	0x0802023c
 8017244:	08020250 	.word	0x08020250
 8017248:	0802025c 	.word	0x0802025c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801724c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017250:	2b04      	cmp	r3, #4
 8017252:	d009      	beq.n	8017268 <dhcp_parse_reply+0x330>
 8017254:	4ba1      	ldr	r3, [pc, #644]	; (80174dc <dhcp_parse_reply+0x5a4>)
 8017256:	f240 625d 	movw	r2, #1629	; 0x65d
 801725a:	49a1      	ldr	r1, [pc, #644]	; (80174e0 <dhcp_parse_reply+0x5a8>)
 801725c:	48a1      	ldr	r0, [pc, #644]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 801725e:	f003 ff19 	bl	801b094 <iprintf>
 8017262:	f06f 0305 	mvn.w	r3, #5
 8017266:	e135      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017268:	2304      	movs	r3, #4
 801726a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801726c:	e014      	b.n	8017298 <dhcp_parse_reply+0x360>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801726e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017272:	2b04      	cmp	r3, #4
 8017274:	d009      	beq.n	801728a <dhcp_parse_reply+0x352>
 8017276:	4b99      	ldr	r3, [pc, #612]	; (80174dc <dhcp_parse_reply+0x5a4>)
 8017278:	f240 6261 	movw	r2, #1633	; 0x661
 801727c:	4998      	ldr	r1, [pc, #608]	; (80174e0 <dhcp_parse_reply+0x5a8>)
 801727e:	4899      	ldr	r0, [pc, #612]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 8017280:	f003 ff08 	bl	801b094 <iprintf>
 8017284:	f06f 0305 	mvn.w	r3, #5
 8017288:	e124      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801728a:	2305      	movs	r3, #5
 801728c:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801728e:	e003      	b.n	8017298 <dhcp_parse_reply+0x360>
      default:
        decode_len = 0;
 8017290:	2300      	movs	r3, #0
 8017292:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017296:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017298:	7efb      	ldrb	r3, [r7, #27]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d105      	bne.n	80172aa <dhcp_parse_reply+0x372>
      offset++;
 801729e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80172a2:	3301      	adds	r3, #1
 80172a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80172a8:	e0a4      	b.n	80173f4 <dhcp_parse_reply+0x4bc>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80172aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80172ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80172b2:	4413      	add	r3, r2
 80172b4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80172b8:	4293      	cmp	r3, r2
 80172ba:	dd02      	ble.n	80172c2 <dhcp_parse_reply+0x38a>
        /* overflow */
        return ERR_BUF;
 80172bc:	f06f 0301 	mvn.w	r3, #1
 80172c0:	e108      	b.n	80174d4 <dhcp_parse_reply+0x59c>
      }
      offset = (u16_t)(offset + len + 2);
 80172c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80172c6:	b29a      	uxth	r2, r3
 80172c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80172cc:	4413      	add	r3, r2
 80172ce:	b29b      	uxth	r3, r3
 80172d0:	3302      	adds	r3, #2
 80172d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      if (decode_len > 0) {
 80172d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 808a 	beq.w	80173f4 <dhcp_parse_reply+0x4bc>
        u32_t value = 0;
 80172e0:	2300      	movs	r3, #0
 80172e2:	60fb      	str	r3, [r7, #12]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80172e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	db02      	blt.n	80172f0 <dhcp_parse_reply+0x3b8>
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ec:	2b07      	cmp	r3, #7
 80172ee:	dd06      	ble.n	80172fe <dhcp_parse_reply+0x3c6>
 80172f0:	4b7a      	ldr	r3, [pc, #488]	; (80174dc <dhcp_parse_reply+0x5a4>)
 80172f2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80172f6:	497c      	ldr	r1, [pc, #496]	; (80174e8 <dhcp_parse_reply+0x5b0>)
 80172f8:	487a      	ldr	r0, [pc, #488]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 80172fa:	f003 fecb 	bl	801b094 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80172fe:	4a7b      	ldr	r2, [pc, #492]	; (80174ec <dhcp_parse_reply+0x5b4>)
 8017300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017302:	4413      	add	r3, r2
 8017304:	781b      	ldrb	r3, [r3, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d174      	bne.n	80173f4 <dhcp_parse_reply+0x4bc>
          copy_len = LWIP_MIN(decode_len, 4);
 801730a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801730e:	2b04      	cmp	r3, #4
 8017310:	bf28      	it	cs
 8017312:	2304      	movcs	r3, #4
 8017314:	b2db      	uxtb	r3, r3
 8017316:	833b      	strh	r3, [r7, #24]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8017318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801731a:	8b3a      	ldrh	r2, [r7, #24]
 801731c:	f107 010c 	add.w	r1, r7, #12
 8017320:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017322:	f7f8 fa67 	bl	800f7f4 <pbuf_copy_partial>
 8017326:	4603      	mov	r3, r0
 8017328:	461a      	mov	r2, r3
 801732a:	8b3b      	ldrh	r3, [r7, #24]
 801732c:	4293      	cmp	r3, r2
 801732e:	d002      	beq.n	8017336 <dhcp_parse_reply+0x3fe>
            return ERR_BUF;
 8017330:	f06f 0301 	mvn.w	r3, #1
 8017334:	e0ce      	b.n	80174d4 <dhcp_parse_reply+0x59c>
          }
          if (decode_len > 4) {
 8017336:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 801733a:	2b04      	cmp	r3, #4
 801733c:	d933      	bls.n	80173a6 <dhcp_parse_reply+0x46e>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801733e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017342:	f003 0303 	and.w	r3, r3, #3
 8017346:	b2db      	uxtb	r3, r3
 8017348:	2b00      	cmp	r3, #0
 801734a:	d009      	beq.n	8017360 <dhcp_parse_reply+0x428>
 801734c:	4b63      	ldr	r3, [pc, #396]	; (80174dc <dhcp_parse_reply+0x5a4>)
 801734e:	f240 6281 	movw	r2, #1665	; 0x681
 8017352:	4967      	ldr	r1, [pc, #412]	; (80174f0 <dhcp_parse_reply+0x5b8>)
 8017354:	4863      	ldr	r0, [pc, #396]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 8017356:	f003 fe9d 	bl	801b094 <iprintf>
 801735a:	f06f 0305 	mvn.w	r3, #5
 801735e:	e0b9      	b.n	80174d4 <dhcp_parse_reply+0x59c>
            dhcp_got_option(dhcp, decode_idx);
 8017360:	4a62      	ldr	r2, [pc, #392]	; (80174ec <dhcp_parse_reply+0x5b4>)
 8017362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017364:	4413      	add	r3, r2
 8017366:	2201      	movs	r2, #1
 8017368:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	4618      	mov	r0, r3
 801736e:	f7f6 fb2e 	bl	800d9ce <lwip_htonl>
 8017372:	4602      	mov	r2, r0
 8017374:	495f      	ldr	r1, [pc, #380]	; (80174f4 <dhcp_parse_reply+0x5bc>)
 8017376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801737c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8017380:	3b04      	subs	r3, #4
 8017382:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            next_val_offset = (u16_t)(val_offset + 4);
 8017386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017388:	3304      	adds	r3, #4
 801738a:	82fb      	strh	r3, [r7, #22]
            if (next_val_offset < val_offset) {
 801738c:	8afa      	ldrh	r2, [r7, #22]
 801738e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017390:	429a      	cmp	r2, r3
 8017392:	d202      	bcs.n	801739a <dhcp_parse_reply+0x462>
              /* overflow */
              return ERR_BUF;
 8017394:	f06f 0301 	mvn.w	r3, #1
 8017398:	e09c      	b.n	80174d4 <dhcp_parse_reply+0x59c>
            }
            val_offset = next_val_offset;
 801739a:	8afb      	ldrh	r3, [r7, #22]
 801739c:	847b      	strh	r3, [r7, #34]	; 0x22
            decode_idx++;
 801739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a0:	3301      	adds	r3, #1
 80173a2:	627b      	str	r3, [r7, #36]	; 0x24
            goto decode_next;
 80173a4:	e79e      	b.n	80172e4 <dhcp_parse_reply+0x3ac>
          } else if (decode_len == 4) {
 80173a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80173aa:	2b04      	cmp	r3, #4
 80173ac:	d106      	bne.n	80173bc <dhcp_parse_reply+0x484>
            value = lwip_ntohl(value);
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7f6 fb0c 	bl	800d9ce <lwip_htonl>
 80173b6:	4603      	mov	r3, r0
 80173b8:	60fb      	str	r3, [r7, #12]
 80173ba:	e011      	b.n	80173e0 <dhcp_parse_reply+0x4a8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80173bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80173c0:	2b01      	cmp	r3, #1
 80173c2:	d009      	beq.n	80173d8 <dhcp_parse_reply+0x4a0>
 80173c4:	4b45      	ldr	r3, [pc, #276]	; (80174dc <dhcp_parse_reply+0x5a4>)
 80173c6:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80173ca:	494b      	ldr	r1, [pc, #300]	; (80174f8 <dhcp_parse_reply+0x5c0>)
 80173cc:	4845      	ldr	r0, [pc, #276]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 80173ce:	f003 fe61 	bl	801b094 <iprintf>
 80173d2:	f06f 0305 	mvn.w	r3, #5
 80173d6:	e07d      	b.n	80174d4 <dhcp_parse_reply+0x59c>
            value = ((u8_t *)&value)[0];
 80173d8:	f107 030c 	add.w	r3, r7, #12
 80173dc:	781b      	ldrb	r3, [r3, #0]
 80173de:	60fb      	str	r3, [r7, #12]
          }
          dhcp_got_option(dhcp, decode_idx);
 80173e0:	4a42      	ldr	r2, [pc, #264]	; (80174ec <dhcp_parse_reply+0x5b4>)
 80173e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e4:	4413      	add	r3, r2
 80173e6:	2201      	movs	r2, #1
 80173e8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80173ea:	68fa      	ldr	r2, [r7, #12]
 80173ec:	4941      	ldr	r1, [pc, #260]	; (80174f4 <dhcp_parse_reply+0x5bc>)
 80173ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f6:	895b      	ldrh	r3, [r3, #10]
 80173f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d327      	bcc.n	8017450 <dhcp_parse_reply+0x518>
      offset = (u16_t)(offset - q->len);
 8017400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017402:	895b      	ldrh	r3, [r3, #10]
 8017404:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017408:	1ad3      	subs	r3, r2, r3
 801740a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      offset_max = (u16_t)(offset_max - q->len);
 801740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017410:	895b      	ldrh	r3, [r3, #10]
 8017412:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017414:	1ad3      	subs	r3, r2, r3
 8017416:	87fb      	strh	r3, [r7, #62]	; 0x3e
      if (offset < offset_max) {
 8017418:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801741c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801741e:	429a      	cmp	r2, r3
 8017420:	d213      	bcs.n	801744a <dhcp_parse_reply+0x512>
        q = q->next;
 8017422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	637b      	str	r3, [r7, #52]	; 0x34
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742a:	2b00      	cmp	r3, #0
 801742c:	d109      	bne.n	8017442 <dhcp_parse_reply+0x50a>
 801742e:	4b2b      	ldr	r3, [pc, #172]	; (80174dc <dhcp_parse_reply+0x5a4>)
 8017430:	f240 629d 	movw	r2, #1693	; 0x69d
 8017434:	4931      	ldr	r1, [pc, #196]	; (80174fc <dhcp_parse_reply+0x5c4>)
 8017436:	482b      	ldr	r0, [pc, #172]	; (80174e4 <dhcp_parse_reply+0x5ac>)
 8017438:	f003 fe2c 	bl	801b094 <iprintf>
 801743c:	f06f 0305 	mvn.w	r3, #5
 8017440:	e048      	b.n	80174d4 <dhcp_parse_reply+0x59c>
        options = (u8_t *)q->payload;
 8017442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017444:	685b      	ldr	r3, [r3, #4]
 8017446:	643b      	str	r3, [r7, #64]	; 0x40
 8017448:	e002      	b.n	8017450 <dhcp_parse_reply+0x518>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801744a:	f06f 0301 	mvn.w	r3, #1
 801744e:	e041      	b.n	80174d4 <dhcp_parse_reply+0x59c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017452:	2b00      	cmp	r3, #0
 8017454:	d00c      	beq.n	8017470 <dhcp_parse_reply+0x538>
 8017456:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801745a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801745c:	429a      	cmp	r2, r3
 801745e:	d207      	bcs.n	8017470 <dhcp_parse_reply+0x538>
 8017460:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017466:	4413      	add	r3, r2
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2bff      	cmp	r3, #255	; 0xff
 801746c:	f47f ada8 	bne.w	8016fc0 <dhcp_parse_reply+0x88>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017470:	4b1e      	ldr	r3, [pc, #120]	; (80174ec <dhcp_parse_reply+0x5b4>)
 8017472:	781b      	ldrb	r3, [r3, #0]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d018      	beq.n	80174aa <dhcp_parse_reply+0x572>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017478:	4b1e      	ldr	r3, [pc, #120]	; (80174f4 <dhcp_parse_reply+0x5bc>)
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	613b      	str	r3, [r7, #16]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801747e:	4b1b      	ldr	r3, [pc, #108]	; (80174ec <dhcp_parse_reply+0x5b4>)
 8017480:	2200      	movs	r2, #0
 8017482:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017484:	693b      	ldr	r3, [r7, #16]
 8017486:	2b01      	cmp	r3, #1
 8017488:	d102      	bne.n	8017490 <dhcp_parse_reply+0x558>
      parse_file_as_options = 1;
 801748a:	2301      	movs	r3, #1
 801748c:	633b      	str	r3, [r7, #48]	; 0x30
 801748e:	e00c      	b.n	80174aa <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	2b02      	cmp	r3, #2
 8017494:	d102      	bne.n	801749c <dhcp_parse_reply+0x564>
      parse_sname_as_options = 1;
 8017496:	2301      	movs	r3, #1
 8017498:	62fb      	str	r3, [r7, #44]	; 0x2c
 801749a:	e006      	b.n	80174aa <dhcp_parse_reply+0x572>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	2b03      	cmp	r3, #3
 80174a0:	d103      	bne.n	80174aa <dhcp_parse_reply+0x572>
      parse_sname_as_options = 1;
 80174a2:	2301      	movs	r3, #1
 80174a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      parse_file_as_options = 1;
 80174a6:	2301      	movs	r3, #1
 80174a8:	633b      	str	r3, [r7, #48]	; 0x30
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80174aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d006      	beq.n	80174be <dhcp_parse_reply+0x586>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	633b      	str	r3, [r7, #48]	; 0x30
    options_idx = DHCP_FILE_OFS;
 80174b4:	236c      	movs	r3, #108	; 0x6c
 80174b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80174b8:	23ec      	movs	r3, #236	; 0xec
 80174ba:	877b      	strh	r3, [r7, #58]	; 0x3a
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80174bc:	e559      	b.n	8016f72 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80174be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d006      	beq.n	80174d2 <dhcp_parse_reply+0x59a>
    parse_sname_as_options = 0;
 80174c4:	2300      	movs	r3, #0
 80174c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_SNAME_OFS;
 80174c8:	232c      	movs	r3, #44	; 0x2c
 80174ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80174cc:	236c      	movs	r3, #108	; 0x6c
 80174ce:	877b      	strh	r3, [r7, #58]	; 0x3a
    goto again;
 80174d0:	e54f      	b.n	8016f72 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80174d2:	2300      	movs	r3, #0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3748      	adds	r7, #72	; 0x48
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}
 80174dc:	0801ffa8 	.word	0x0801ffa8
 80174e0:	08020230 	.word	0x08020230
 80174e4:	08020008 	.word	0x08020008
 80174e8:	08020274 	.word	0x08020274
 80174ec:	20013df4 	.word	0x20013df4
 80174f0:	08020288 	.word	0x08020288
 80174f4:	20013dd4 	.word	0x20013dd4
 80174f8:	080202a0 	.word	0x080202a0
 80174fc:	080202b4 	.word	0x080202b4

08017500 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b08a      	sub	sp, #40	; 0x28
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801750e:	4b5e      	ldr	r3, [pc, #376]	; (8017688 <dhcp_recv+0x188>)
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	61fb      	str	r3, [r7, #28]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017514:	69fb      	ldr	r3, [r7, #28]
 8017516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017518:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	617b      	str	r3, [r7, #20]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	2b00      	cmp	r3, #0
 8017524:	f000 809a 	beq.w	801765c <dhcp_recv+0x15c>
 8017528:	69bb      	ldr	r3, [r7, #24]
 801752a:	791b      	ldrb	r3, [r3, #4]
 801752c:	2b00      	cmp	r3, #0
 801752e:	f000 8095 	beq.w	801765c <dhcp_recv+0x15c>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	895b      	ldrh	r3, [r3, #10]
 8017536:	2b2b      	cmp	r3, #43	; 0x2b
 8017538:	f240 8092 	bls.w	8017660 <dhcp_recv+0x160>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801753c:	697b      	ldr	r3, [r7, #20]
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	2b02      	cmp	r3, #2
 8017542:	f040 808f 	bne.w	8017664 <dhcp_recv+0x164>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017546:	2300      	movs	r3, #0
 8017548:	74fb      	strb	r3, [r7, #19]
 801754a:	e00e      	b.n	801756a <dhcp_recv+0x6a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801754c:	7cfb      	ldrb	r3, [r7, #19]
 801754e:	69fa      	ldr	r2, [r7, #28]
 8017550:	4413      	add	r3, r2
 8017552:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8017556:	7cfb      	ldrb	r3, [r7, #19]
 8017558:	6979      	ldr	r1, [r7, #20]
 801755a:	440b      	add	r3, r1
 801755c:	7f1b      	ldrb	r3, [r3, #28]
 801755e:	429a      	cmp	r2, r3
 8017560:	f040 8082 	bne.w	8017668 <dhcp_recv+0x168>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017564:	7cfb      	ldrb	r3, [r7, #19]
 8017566:	3301      	adds	r3, #1
 8017568:	74fb      	strb	r3, [r7, #19]
 801756a:	69fb      	ldr	r3, [r7, #28]
 801756c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017570:	7cfa      	ldrb	r2, [r7, #19]
 8017572:	429a      	cmp	r2, r3
 8017574:	d202      	bcs.n	801757c <dhcp_recv+0x7c>
 8017576:	7cfb      	ldrb	r3, [r7, #19]
 8017578:	2b05      	cmp	r3, #5
 801757a:	d9e7      	bls.n	801754c <dhcp_recv+0x4c>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	4618      	mov	r0, r3
 8017582:	f7f6 fa24 	bl	800d9ce <lwip_htonl>
 8017586:	4602      	mov	r2, r0
 8017588:	69bb      	ldr	r3, [r7, #24]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	429a      	cmp	r2, r3
 801758e:	d16d      	bne.n	801766c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017590:	69b9      	ldr	r1, [r7, #24]
 8017592:	6878      	ldr	r0, [r7, #4]
 8017594:	f7ff fcd0 	bl	8016f38 <dhcp_parse_reply>
 8017598:	4603      	mov	r3, r0
 801759a:	2b00      	cmp	r3, #0
 801759c:	d168      	bne.n	8017670 <dhcp_recv+0x170>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801759e:	4b3b      	ldr	r3, [pc, #236]	; (801768c <dhcp_recv+0x18c>)
 80175a0:	785b      	ldrb	r3, [r3, #1]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d066      	beq.n	8017674 <dhcp_recv+0x174>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80175ac:	4b38      	ldr	r3, [pc, #224]	; (8017690 <dhcp_recv+0x190>)
 80175ae:	685b      	ldr	r3, [r3, #4]
 80175b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80175b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80175b8:	2b05      	cmp	r3, #5
 80175ba:	d12a      	bne.n	8017612 <dhcp_recv+0x112>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80175bc:	69bb      	ldr	r3, [r7, #24]
 80175be:	795b      	ldrb	r3, [r3, #5]
 80175c0:	2b01      	cmp	r3, #1
 80175c2:	d112      	bne.n	80175ea <dhcp_recv+0xea>
      dhcp_handle_ack(netif, msg_in);
 80175c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175c6:	69f8      	ldr	r0, [r7, #28]
 80175c8:	f7fe fe00 	bl	80161cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80175cc:	69fb      	ldr	r3, [r7, #28]
 80175ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80175d2:	f003 0308 	and.w	r3, r3, #8
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d003      	beq.n	80175e2 <dhcp_recv+0xe2>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80175da:	69f8      	ldr	r0, [r7, #28]
 80175dc:	f7fe fb70 	bl	8015cc0 <dhcp_check>
 80175e0:	e04b      	b.n	801767a <dhcp_recv+0x17a>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80175e2:	69f8      	ldr	r0, [r7, #28]
 80175e4:	f7ff f850 	bl	8016688 <dhcp_bind>
 80175e8:	e047      	b.n	801767a <dhcp_recv+0x17a>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80175ea:	69bb      	ldr	r3, [r7, #24]
 80175ec:	795b      	ldrb	r3, [r3, #5]
 80175ee:	2b03      	cmp	r3, #3
 80175f0:	d007      	beq.n	8017602 <dhcp_recv+0x102>
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	795b      	ldrb	r3, [r3, #5]
 80175f6:	2b04      	cmp	r3, #4
 80175f8:	d003      	beq.n	8017602 <dhcp_recv+0x102>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80175fe:	2b05      	cmp	r3, #5
 8017600:	d13b      	bne.n	801767a <dhcp_recv+0x17a>
      dhcp_handle_ack(netif, msg_in);
 8017602:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017604:	69f8      	ldr	r0, [r7, #28]
 8017606:	f7fe fde1 	bl	80161cc <dhcp_handle_ack>
      dhcp_bind(netif);
 801760a:	69f8      	ldr	r0, [r7, #28]
 801760c:	f7ff f83c 	bl	8016688 <dhcp_bind>
 8017610:	e033      	b.n	801767a <dhcp_recv+0x17a>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017616:	2b06      	cmp	r3, #6
 8017618:	d113      	bne.n	8017642 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801761a:	69bb      	ldr	r3, [r7, #24]
 801761c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801761e:	2b03      	cmp	r3, #3
 8017620:	d00b      	beq.n	801763a <dhcp_recv+0x13a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017622:	69bb      	ldr	r3, [r7, #24]
 8017624:	795b      	ldrb	r3, [r3, #5]
 8017626:	2b01      	cmp	r3, #1
 8017628:	d007      	beq.n	801763a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801762a:	69bb      	ldr	r3, [r7, #24]
 801762c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801762e:	2b04      	cmp	r3, #4
 8017630:	d003      	beq.n	801763a <dhcp_recv+0x13a>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017632:	69bb      	ldr	r3, [r7, #24]
 8017634:	795b      	ldrb	r3, [r3, #5]
 8017636:	2b05      	cmp	r3, #5
 8017638:	d103      	bne.n	8017642 <dhcp_recv+0x142>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801763a:	69f8      	ldr	r0, [r7, #28]
 801763c:	f7fe fb26 	bl	8015c8c <dhcp_handle_nak>
 8017640:	e01b      	b.n	801767a <dhcp_recv+0x17a>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017642:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017646:	2b02      	cmp	r3, #2
 8017648:	d116      	bne.n	8017678 <dhcp_recv+0x178>
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	795b      	ldrb	r3, [r3, #5]
 801764e:	2b06      	cmp	r3, #6
 8017650:	d112      	bne.n	8017678 <dhcp_recv+0x178>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017654:	69f8      	ldr	r0, [r7, #28]
 8017656:	f7fe fb67 	bl	8015d28 <dhcp_handle_offer>
 801765a:	e00e      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801765c:	bf00      	nop
 801765e:	e00c      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017660:	bf00      	nop
 8017662:	e00a      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017664:	bf00      	nop
 8017666:	e008      	b.n	801767a <dhcp_recv+0x17a>
      goto free_pbuf_and_return;
 8017668:	bf00      	nop
 801766a:	e006      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 801766c:	bf00      	nop
 801766e:	e004      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017670:	bf00      	nop
 8017672:	e002      	b.n	801767a <dhcp_recv+0x17a>
    goto free_pbuf_and_return;
 8017674:	bf00      	nop
 8017676:	e000      	b.n	801767a <dhcp_recv+0x17a>
  }

free_pbuf_and_return:
 8017678:	bf00      	nop
  pbuf_free(p);
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7f7 feb4 	bl	800f3e8 <pbuf_free>
}
 8017680:	bf00      	nop
 8017682:	3728      	adds	r7, #40	; 0x28
 8017684:	46bd      	mov	sp, r7
 8017686:	bd80      	pop	{r7, pc}
 8017688:	2000a2fc 	.word	0x2000a2fc
 801768c:	20013df4 	.word	0x20013df4
 8017690:	20013dd4 	.word	0x20013dd4

08017694 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b088      	sub	sp, #32
 8017698:	af00      	add	r7, sp, #0
 801769a:	60f8      	str	r0, [r7, #12]
 801769c:	60b9      	str	r1, [r7, #8]
 801769e:	603b      	str	r3, [r7, #0]
 80176a0:	4613      	mov	r3, r2
 80176a2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d108      	bne.n	80176bc <dhcp_create_msg+0x28>
 80176aa:	4b5f      	ldr	r3, [pc, #380]	; (8017828 <dhcp_create_msg+0x194>)
 80176ac:	f240 7269 	movw	r2, #1897	; 0x769
 80176b0:	495e      	ldr	r1, [pc, #376]	; (801782c <dhcp_create_msg+0x198>)
 80176b2:	485f      	ldr	r0, [pc, #380]	; (8017830 <dhcp_create_msg+0x19c>)
 80176b4:	f003 fcee 	bl	801b094 <iprintf>
 80176b8:	2300      	movs	r3, #0
 80176ba:	e0b1      	b.n	8017820 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80176bc:	68bb      	ldr	r3, [r7, #8]
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d108      	bne.n	80176d4 <dhcp_create_msg+0x40>
 80176c2:	4b59      	ldr	r3, [pc, #356]	; (8017828 <dhcp_create_msg+0x194>)
 80176c4:	f240 726a 	movw	r2, #1898	; 0x76a
 80176c8:	495a      	ldr	r1, [pc, #360]	; (8017834 <dhcp_create_msg+0x1a0>)
 80176ca:	4859      	ldr	r0, [pc, #356]	; (8017830 <dhcp_create_msg+0x19c>)
 80176cc:	f003 fce2 	bl	801b094 <iprintf>
 80176d0:	2300      	movs	r3, #0
 80176d2:	e0a5      	b.n	8017820 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80176d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80176dc:	2036      	movs	r0, #54	; 0x36
 80176de:	f7f7 fb9b 	bl	800ee18 <pbuf_alloc>
 80176e2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80176e4:	69bb      	ldr	r3, [r7, #24]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d101      	bne.n	80176ee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80176ea:	2300      	movs	r3, #0
 80176ec:	e098      	b.n	8017820 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80176ee:	69bb      	ldr	r3, [r7, #24]
 80176f0:	895b      	ldrh	r3, [r3, #10]
 80176f2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80176f6:	d206      	bcs.n	8017706 <dhcp_create_msg+0x72>
 80176f8:	4b4b      	ldr	r3, [pc, #300]	; (8017828 <dhcp_create_msg+0x194>)
 80176fa:	f240 7271 	movw	r2, #1905	; 0x771
 80176fe:	494e      	ldr	r1, [pc, #312]	; (8017838 <dhcp_create_msg+0x1a4>)
 8017700:	484b      	ldr	r0, [pc, #300]	; (8017830 <dhcp_create_msg+0x19c>)
 8017702:	f003 fcc7 	bl	801b094 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017706:	79fb      	ldrb	r3, [r7, #7]
 8017708:	2b03      	cmp	r3, #3
 801770a:	d103      	bne.n	8017714 <dhcp_create_msg+0x80>
 801770c:	68bb      	ldr	r3, [r7, #8]
 801770e:	795b      	ldrb	r3, [r3, #5]
 8017710:	2b03      	cmp	r3, #3
 8017712:	d10d      	bne.n	8017730 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	799b      	ldrb	r3, [r3, #6]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d105      	bne.n	8017728 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801771c:	f002 fed8 	bl	801a4d0 <rand>
 8017720:	4603      	mov	r3, r0
 8017722:	461a      	mov	r2, r3
 8017724:	4b45      	ldr	r3, [pc, #276]	; (801783c <dhcp_create_msg+0x1a8>)
 8017726:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017728:	4b44      	ldr	r3, [pc, #272]	; (801783c <dhcp_create_msg+0x1a8>)
 801772a:	681a      	ldr	r2, [r3, #0]
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017730:	69bb      	ldr	r3, [r7, #24]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017736:	f44f 729a 	mov.w	r2, #308	; 0x134
 801773a:	2100      	movs	r1, #0
 801773c:	6978      	ldr	r0, [r7, #20]
 801773e:	f003 fe0b 	bl	801b358 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	2201      	movs	r2, #1
 8017746:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017748:	697b      	ldr	r3, [r7, #20]
 801774a:	2201      	movs	r2, #1
 801774c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	4618      	mov	r0, r3
 801775e:	f7f6 f936 	bl	800d9ce <lwip_htonl>
 8017762:	4602      	mov	r2, r0
 8017764:	697b      	ldr	r3, [r7, #20]
 8017766:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017768:	79fb      	ldrb	r3, [r7, #7]
 801776a:	2b08      	cmp	r3, #8
 801776c:	d010      	beq.n	8017790 <dhcp_create_msg+0xfc>
 801776e:	79fb      	ldrb	r3, [r7, #7]
 8017770:	2b04      	cmp	r3, #4
 8017772:	d00d      	beq.n	8017790 <dhcp_create_msg+0xfc>
 8017774:	79fb      	ldrb	r3, [r7, #7]
 8017776:	2b07      	cmp	r3, #7
 8017778:	d00a      	beq.n	8017790 <dhcp_create_msg+0xfc>
 801777a:	79fb      	ldrb	r3, [r7, #7]
 801777c:	2b03      	cmp	r3, #3
 801777e:	d10c      	bne.n	801779a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017784:	2b05      	cmp	r3, #5
 8017786:	d003      	beq.n	8017790 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	795b      	ldrb	r3, [r3, #5]
 801778c:	2b04      	cmp	r3, #4
 801778e:	d104      	bne.n	801779a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	3304      	adds	r3, #4
 8017794:	681a      	ldr	r2, [r3, #0]
 8017796:	697b      	ldr	r3, [r7, #20]
 8017798:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801779a:	2300      	movs	r3, #0
 801779c:	83fb      	strh	r3, [r7, #30]
 801779e:	e00c      	b.n	80177ba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80177a0:	8bfa      	ldrh	r2, [r7, #30]
 80177a2:	8bfb      	ldrh	r3, [r7, #30]
 80177a4:	68f9      	ldr	r1, [r7, #12]
 80177a6:	440a      	add	r2, r1
 80177a8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80177ac:	697a      	ldr	r2, [r7, #20]
 80177ae:	4413      	add	r3, r2
 80177b0:	460a      	mov	r2, r1
 80177b2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80177b4:	8bfb      	ldrh	r3, [r7, #30]
 80177b6:	3301      	adds	r3, #1
 80177b8:	83fb      	strh	r3, [r7, #30]
 80177ba:	8bfb      	ldrh	r3, [r7, #30]
 80177bc:	2b05      	cmp	r3, #5
 80177be:	d9ef      	bls.n	80177a0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	2200      	movs	r2, #0
 80177c4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80177c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80177cc:	2200      	movs	r2, #0
 80177ce:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80177d2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80177d6:	2200      	movs	r2, #0
 80177d8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80177dc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80177e0:	2200      	movs	r2, #0
 80177e2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80177e6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80177ea:	697b      	ldr	r3, [r7, #20]
 80177ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80177f0:	2301      	movs	r3, #1
 80177f2:	2235      	movs	r2, #53	; 0x35
 80177f4:	2000      	movs	r0, #0
 80177f6:	f7ff facf 	bl	8016d98 <dhcp_option>
 80177fa:	4603      	mov	r3, r0
 80177fc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017804:	79fa      	ldrb	r2, [r7, #7]
 8017806:	8a7b      	ldrh	r3, [r7, #18]
 8017808:	4618      	mov	r0, r3
 801780a:	f7ff faf9 	bl	8016e00 <dhcp_option_byte>
 801780e:	4603      	mov	r3, r0
 8017810:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017812:	683b      	ldr	r3, [r7, #0]
 8017814:	2b00      	cmp	r3, #0
 8017816:	d002      	beq.n	801781e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017818:	683b      	ldr	r3, [r7, #0]
 801781a:	8a7a      	ldrh	r2, [r7, #18]
 801781c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801781e:	69bb      	ldr	r3, [r7, #24]
}
 8017820:	4618      	mov	r0, r3
 8017822:	3720      	adds	r7, #32
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}
 8017828:	0801ffa8 	.word	0x0801ffa8
 801782c:	080202c8 	.word	0x080202c8
 8017830:	08020008 	.word	0x08020008
 8017834:	080202e8 	.word	0x080202e8
 8017838:	08020308 	.word	0x08020308
 801783c:	20013e04 	.word	0x20013e04

08017840 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b084      	sub	sp, #16
 8017844:	af00      	add	r7, sp, #0
 8017846:	4603      	mov	r3, r0
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	607a      	str	r2, [r7, #4]
 801784c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801784e:	89fb      	ldrh	r3, [r7, #14]
 8017850:	1c5a      	adds	r2, r3, #1
 8017852:	81fa      	strh	r2, [r7, #14]
 8017854:	461a      	mov	r2, r3
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	4413      	add	r3, r2
 801785a:	22ff      	movs	r2, #255	; 0xff
 801785c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801785e:	e007      	b.n	8017870 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017860:	89fb      	ldrh	r3, [r7, #14]
 8017862:	1c5a      	adds	r2, r3, #1
 8017864:	81fa      	strh	r2, [r7, #14]
 8017866:	461a      	mov	r2, r3
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	4413      	add	r3, r2
 801786c:	2200      	movs	r2, #0
 801786e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017870:	89fb      	ldrh	r3, [r7, #14]
 8017872:	2b43      	cmp	r3, #67	; 0x43
 8017874:	d904      	bls.n	8017880 <dhcp_option_trailer+0x40>
 8017876:	89fb      	ldrh	r3, [r7, #14]
 8017878:	f003 0303 	and.w	r3, r3, #3
 801787c:	2b00      	cmp	r3, #0
 801787e:	d002      	beq.n	8017886 <dhcp_option_trailer+0x46>
 8017880:	89fb      	ldrh	r3, [r7, #14]
 8017882:	2b43      	cmp	r3, #67	; 0x43
 8017884:	d9ec      	bls.n	8017860 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017886:	89fb      	ldrh	r3, [r7, #14]
 8017888:	33f0      	adds	r3, #240	; 0xf0
 801788a:	b29b      	uxth	r3, r3
 801788c:	4619      	mov	r1, r3
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f7f7 fc24 	bl	800f0dc <pbuf_realloc>
}
 8017894:	bf00      	nop
 8017896:	3710      	adds	r7, #16
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801789c:	b480      	push	{r7}
 801789e:	b085      	sub	sp, #20
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d017      	beq.n	80178da <dhcp_supplied_address+0x3e>
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d013      	beq.n	80178da <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178b6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	795b      	ldrb	r3, [r3, #5]
 80178bc:	2b0a      	cmp	r3, #10
 80178be:	d007      	beq.n	80178d0 <dhcp_supplied_address+0x34>
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	795b      	ldrb	r3, [r3, #5]
 80178c4:	2b05      	cmp	r3, #5
 80178c6:	d003      	beq.n	80178d0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80178cc:	2b04      	cmp	r3, #4
 80178ce:	d101      	bne.n	80178d4 <dhcp_supplied_address+0x38>
 80178d0:	2301      	movs	r3, #1
 80178d2:	e000      	b.n	80178d6 <dhcp_supplied_address+0x3a>
 80178d4:	2300      	movs	r3, #0
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	e000      	b.n	80178dc <dhcp_supplied_address+0x40>
  }
  return 0;
 80178da:	2300      	movs	r3, #0
}
 80178dc:	4618      	mov	r0, r3
 80178de:	3714      	adds	r7, #20
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80178f0:	492b      	ldr	r1, [pc, #172]	; (80179a0 <etharp_free_entry+0xb8>)
 80178f2:	687a      	ldr	r2, [r7, #4]
 80178f4:	4613      	mov	r3, r2
 80178f6:	005b      	lsls	r3, r3, #1
 80178f8:	4413      	add	r3, r2
 80178fa:	00db      	lsls	r3, r3, #3
 80178fc:	440b      	add	r3, r1
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d013      	beq.n	801792c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017904:	4926      	ldr	r1, [pc, #152]	; (80179a0 <etharp_free_entry+0xb8>)
 8017906:	687a      	ldr	r2, [r7, #4]
 8017908:	4613      	mov	r3, r2
 801790a:	005b      	lsls	r3, r3, #1
 801790c:	4413      	add	r3, r2
 801790e:	00db      	lsls	r3, r3, #3
 8017910:	440b      	add	r3, r1
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	4618      	mov	r0, r3
 8017916:	f7f7 fd67 	bl	800f3e8 <pbuf_free>
    arp_table[i].q = NULL;
 801791a:	4921      	ldr	r1, [pc, #132]	; (80179a0 <etharp_free_entry+0xb8>)
 801791c:	687a      	ldr	r2, [r7, #4]
 801791e:	4613      	mov	r3, r2
 8017920:	005b      	lsls	r3, r3, #1
 8017922:	4413      	add	r3, r2
 8017924:	00db      	lsls	r3, r3, #3
 8017926:	440b      	add	r3, r1
 8017928:	2200      	movs	r2, #0
 801792a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801792c:	491c      	ldr	r1, [pc, #112]	; (80179a0 <etharp_free_entry+0xb8>)
 801792e:	687a      	ldr	r2, [r7, #4]
 8017930:	4613      	mov	r3, r2
 8017932:	005b      	lsls	r3, r3, #1
 8017934:	4413      	add	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	440b      	add	r3, r1
 801793a:	3314      	adds	r3, #20
 801793c:	2200      	movs	r2, #0
 801793e:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017940:	4917      	ldr	r1, [pc, #92]	; (80179a0 <etharp_free_entry+0xb8>)
 8017942:	687a      	ldr	r2, [r7, #4]
 8017944:	4613      	mov	r3, r2
 8017946:	005b      	lsls	r3, r3, #1
 8017948:	4413      	add	r3, r2
 801794a:	00db      	lsls	r3, r3, #3
 801794c:	440b      	add	r3, r1
 801794e:	3312      	adds	r3, #18
 8017950:	2200      	movs	r2, #0
 8017952:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017954:	4912      	ldr	r1, [pc, #72]	; (80179a0 <etharp_free_entry+0xb8>)
 8017956:	687a      	ldr	r2, [r7, #4]
 8017958:	4613      	mov	r3, r2
 801795a:	005b      	lsls	r3, r3, #1
 801795c:	4413      	add	r3, r2
 801795e:	00db      	lsls	r3, r3, #3
 8017960:	440b      	add	r3, r1
 8017962:	3308      	adds	r3, #8
 8017964:	2200      	movs	r2, #0
 8017966:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017968:	490d      	ldr	r1, [pc, #52]	; (80179a0 <etharp_free_entry+0xb8>)
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	4613      	mov	r3, r2
 801796e:	005b      	lsls	r3, r3, #1
 8017970:	4413      	add	r3, r2
 8017972:	00db      	lsls	r3, r3, #3
 8017974:	440b      	add	r3, r1
 8017976:	3304      	adds	r3, #4
 8017978:	2200      	movs	r2, #0
 801797a:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801797c:	4908      	ldr	r1, [pc, #32]	; (80179a0 <etharp_free_entry+0xb8>)
 801797e:	687a      	ldr	r2, [r7, #4]
 8017980:	4613      	mov	r3, r2
 8017982:	005b      	lsls	r3, r3, #1
 8017984:	4413      	add	r3, r2
 8017986:	00db      	lsls	r3, r3, #3
 8017988:	440b      	add	r3, r1
 801798a:	3308      	adds	r3, #8
 801798c:	4a05      	ldr	r2, [pc, #20]	; (80179a4 <etharp_free_entry+0xbc>)
 801798e:	3304      	adds	r3, #4
 8017990:	6810      	ldr	r0, [r2, #0]
 8017992:	6018      	str	r0, [r3, #0]
 8017994:	8892      	ldrh	r2, [r2, #4]
 8017996:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017998:	bf00      	nop
 801799a:	3708      	adds	r7, #8
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	20013e08 	.word	0x20013e08
 80179a4:	0806c810 	.word	0x0806c810

080179a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179ae:	2300      	movs	r3, #0
 80179b0:	607b      	str	r3, [r7, #4]
 80179b2:	e09a      	b.n	8017aea <etharp_tmr+0x142>
    u8_t state = arp_table[i].state;
 80179b4:	4951      	ldr	r1, [pc, #324]	; (8017afc <etharp_tmr+0x154>)
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	440b      	add	r3, r1
 80179c2:	3314      	adds	r3, #20
 80179c4:	781b      	ldrb	r3, [r3, #0]
 80179c6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80179c8:	78fb      	ldrb	r3, [r7, #3]
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	f000 808a 	beq.w	8017ae4 <etharp_tmr+0x13c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
 80179d0:	78fb      	ldrb	r3, [r7, #3]
 80179d2:	2b05      	cmp	r3, #5
 80179d4:	f000 8086 	beq.w	8017ae4 <etharp_tmr+0x13c>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80179d8:	4948      	ldr	r1, [pc, #288]	; (8017afc <etharp_tmr+0x154>)
 80179da:	687a      	ldr	r2, [r7, #4]
 80179dc:	4613      	mov	r3, r2
 80179de:	005b      	lsls	r3, r3, #1
 80179e0:	4413      	add	r3, r2
 80179e2:	00db      	lsls	r3, r3, #3
 80179e4:	440b      	add	r3, r1
 80179e6:	3312      	adds	r3, #18
 80179e8:	881b      	ldrh	r3, [r3, #0]
 80179ea:	3301      	adds	r3, #1
 80179ec:	b298      	uxth	r0, r3
 80179ee:	4943      	ldr	r1, [pc, #268]	; (8017afc <etharp_tmr+0x154>)
 80179f0:	687a      	ldr	r2, [r7, #4]
 80179f2:	4613      	mov	r3, r2
 80179f4:	005b      	lsls	r3, r3, #1
 80179f6:	4413      	add	r3, r2
 80179f8:	00db      	lsls	r3, r3, #3
 80179fa:	440b      	add	r3, r1
 80179fc:	3312      	adds	r3, #18
 80179fe:	4602      	mov	r2, r0
 8017a00:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017a02:	493e      	ldr	r1, [pc, #248]	; (8017afc <etharp_tmr+0x154>)
 8017a04:	687a      	ldr	r2, [r7, #4]
 8017a06:	4613      	mov	r3, r2
 8017a08:	005b      	lsls	r3, r3, #1
 8017a0a:	4413      	add	r3, r2
 8017a0c:	00db      	lsls	r3, r3, #3
 8017a0e:	440b      	add	r3, r1
 8017a10:	3312      	adds	r3, #18
 8017a12:	881b      	ldrh	r3, [r3, #0]
 8017a14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017a18:	d215      	bcs.n	8017a46 <etharp_tmr+0x9e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017a1a:	4938      	ldr	r1, [pc, #224]	; (8017afc <etharp_tmr+0x154>)
 8017a1c:	687a      	ldr	r2, [r7, #4]
 8017a1e:	4613      	mov	r3, r2
 8017a20:	005b      	lsls	r3, r3, #1
 8017a22:	4413      	add	r3, r2
 8017a24:	00db      	lsls	r3, r3, #3
 8017a26:	440b      	add	r3, r1
 8017a28:	3314      	adds	r3, #20
 8017a2a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017a2c:	2b01      	cmp	r3, #1
 8017a2e:	d10e      	bne.n	8017a4e <etharp_tmr+0xa6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017a30:	4932      	ldr	r1, [pc, #200]	; (8017afc <etharp_tmr+0x154>)
 8017a32:	687a      	ldr	r2, [r7, #4]
 8017a34:	4613      	mov	r3, r2
 8017a36:	005b      	lsls	r3, r3, #1
 8017a38:	4413      	add	r3, r2
 8017a3a:	00db      	lsls	r3, r3, #3
 8017a3c:	440b      	add	r3, r1
 8017a3e:	3312      	adds	r3, #18
 8017a40:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017a42:	2b04      	cmp	r3, #4
 8017a44:	d903      	bls.n	8017a4e <etharp_tmr+0xa6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7ff ff4e 	bl	80178e8 <etharp_free_entry>
 8017a4c:	e04a      	b.n	8017ae4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017a4e:	492b      	ldr	r1, [pc, #172]	; (8017afc <etharp_tmr+0x154>)
 8017a50:	687a      	ldr	r2, [r7, #4]
 8017a52:	4613      	mov	r3, r2
 8017a54:	005b      	lsls	r3, r3, #1
 8017a56:	4413      	add	r3, r2
 8017a58:	00db      	lsls	r3, r3, #3
 8017a5a:	440b      	add	r3, r1
 8017a5c:	3314      	adds	r3, #20
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	2b03      	cmp	r3, #3
 8017a62:	d10a      	bne.n	8017a7a <etharp_tmr+0xd2>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017a64:	4925      	ldr	r1, [pc, #148]	; (8017afc <etharp_tmr+0x154>)
 8017a66:	687a      	ldr	r2, [r7, #4]
 8017a68:	4613      	mov	r3, r2
 8017a6a:	005b      	lsls	r3, r3, #1
 8017a6c:	4413      	add	r3, r2
 8017a6e:	00db      	lsls	r3, r3, #3
 8017a70:	440b      	add	r3, r1
 8017a72:	3314      	adds	r3, #20
 8017a74:	2204      	movs	r2, #4
 8017a76:	701a      	strb	r2, [r3, #0]
 8017a78:	e034      	b.n	8017ae4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017a7a:	4920      	ldr	r1, [pc, #128]	; (8017afc <etharp_tmr+0x154>)
 8017a7c:	687a      	ldr	r2, [r7, #4]
 8017a7e:	4613      	mov	r3, r2
 8017a80:	005b      	lsls	r3, r3, #1
 8017a82:	4413      	add	r3, r2
 8017a84:	00db      	lsls	r3, r3, #3
 8017a86:	440b      	add	r3, r1
 8017a88:	3314      	adds	r3, #20
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	2b04      	cmp	r3, #4
 8017a8e:	d10a      	bne.n	8017aa6 <etharp_tmr+0xfe>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017a90:	491a      	ldr	r1, [pc, #104]	; (8017afc <etharp_tmr+0x154>)
 8017a92:	687a      	ldr	r2, [r7, #4]
 8017a94:	4613      	mov	r3, r2
 8017a96:	005b      	lsls	r3, r3, #1
 8017a98:	4413      	add	r3, r2
 8017a9a:	00db      	lsls	r3, r3, #3
 8017a9c:	440b      	add	r3, r1
 8017a9e:	3314      	adds	r3, #20
 8017aa0:	2202      	movs	r2, #2
 8017aa2:	701a      	strb	r2, [r3, #0]
 8017aa4:	e01e      	b.n	8017ae4 <etharp_tmr+0x13c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017aa6:	4915      	ldr	r1, [pc, #84]	; (8017afc <etharp_tmr+0x154>)
 8017aa8:	687a      	ldr	r2, [r7, #4]
 8017aaa:	4613      	mov	r3, r2
 8017aac:	005b      	lsls	r3, r3, #1
 8017aae:	4413      	add	r3, r2
 8017ab0:	00db      	lsls	r3, r3, #3
 8017ab2:	440b      	add	r3, r1
 8017ab4:	3314      	adds	r3, #20
 8017ab6:	781b      	ldrb	r3, [r3, #0]
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	d113      	bne.n	8017ae4 <etharp_tmr+0x13c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017abc:	490f      	ldr	r1, [pc, #60]	; (8017afc <etharp_tmr+0x154>)
 8017abe:	687a      	ldr	r2, [r7, #4]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	005b      	lsls	r3, r3, #1
 8017ac4:	4413      	add	r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	440b      	add	r3, r1
 8017aca:	3308      	adds	r3, #8
 8017acc:	6818      	ldr	r0, [r3, #0]
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	4413      	add	r3, r2
 8017ad6:	00db      	lsls	r3, r3, #3
 8017ad8:	4a08      	ldr	r2, [pc, #32]	; (8017afc <etharp_tmr+0x154>)
 8017ada:	4413      	add	r3, r2
 8017adc:	3304      	adds	r3, #4
 8017ade:	4619      	mov	r1, r3
 8017ae0:	f000 feae 	bl	8018840 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	607b      	str	r3, [r7, #4]
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	2b09      	cmp	r3, #9
 8017aee:	f77f af61 	ble.w	80179b4 <etharp_tmr+0xc>
      }
    }
  }
}
 8017af2:	bf00      	nop
 8017af4:	bf00      	nop
 8017af6:	3708      	adds	r7, #8
 8017af8:	46bd      	mov	sp, r7
 8017afa:	bd80      	pop	{r7, pc}
 8017afc:	20013e08 	.word	0x20013e08

08017b00 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b08a      	sub	sp, #40	; 0x28
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	460b      	mov	r3, r1
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017b0e:	230a      	movs	r3, #10
 8017b10:	843b      	strh	r3, [r7, #32]
 8017b12:	230a      	movs	r3, #10
 8017b14:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t empty = ARP_TABLE_SIZE;
 8017b16:	230a      	movs	r3, #10
 8017b18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t i = 0;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017b1e:	230a      	movs	r3, #10
 8017b20:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017b22:	2300      	movs	r3, #0
 8017b24:	83bb      	strh	r3, [r7, #28]
 8017b26:	2300      	movs	r3, #0
 8017b28:	837b      	strh	r3, [r7, #26]
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b2e:	2300      	movs	r3, #0
 8017b30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017b32:	e0b1      	b.n	8017c98 <etharp_find_entry+0x198>
    u8_t state = arp_table[i].state;
 8017b34:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017b38:	49a7      	ldr	r1, [pc, #668]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017b3a:	4613      	mov	r3, r2
 8017b3c:	005b      	lsls	r3, r3, #1
 8017b3e:	4413      	add	r3, r2
 8017b40:	00db      	lsls	r3, r3, #3
 8017b42:	440b      	add	r3, r1
 8017b44:	3314      	adds	r3, #20
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017b4a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017b4e:	2b0a      	cmp	r3, #10
 8017b50:	d105      	bne.n	8017b5e <etharp_find_entry+0x5e>
 8017b52:	7dfb      	ldrb	r3, [r7, #23]
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d102      	bne.n	8017b5e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017b58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017b5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017b5c:	e098      	b.n	8017c90 <etharp_find_entry+0x190>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017b5e:	7dfb      	ldrb	r3, [r7, #23]
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	f000 8095 	beq.w	8017c90 <etharp_find_entry+0x190>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017b66:	7dfb      	ldrb	r3, [r7, #23]
 8017b68:	2b01      	cmp	r3, #1
 8017b6a:	d009      	beq.n	8017b80 <etharp_find_entry+0x80>
 8017b6c:	7dfb      	ldrb	r3, [r7, #23]
 8017b6e:	2b01      	cmp	r3, #1
 8017b70:	d806      	bhi.n	8017b80 <etharp_find_entry+0x80>
 8017b72:	4b9a      	ldr	r3, [pc, #616]	; (8017ddc <etharp_find_entry+0x2dc>)
 8017b74:	f240 1223 	movw	r2, #291	; 0x123
 8017b78:	4999      	ldr	r1, [pc, #612]	; (8017de0 <etharp_find_entry+0x2e0>)
 8017b7a:	489a      	ldr	r0, [pc, #616]	; (8017de4 <etharp_find_entry+0x2e4>)
 8017b7c:	f003 fa8a 	bl	801b094 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d020      	beq.n	8017bc8 <etharp_find_entry+0xc8>
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	6819      	ldr	r1, [r3, #0]
 8017b8a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017b8e:	4892      	ldr	r0, [pc, #584]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017b90:	4613      	mov	r3, r2
 8017b92:	005b      	lsls	r3, r3, #1
 8017b94:	4413      	add	r3, r2
 8017b96:	00db      	lsls	r3, r3, #3
 8017b98:	4403      	add	r3, r0
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	4299      	cmp	r1, r3
 8017ba0:	d112      	bne.n	8017bc8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d00c      	beq.n	8017bc2 <etharp_find_entry+0xc2>
 8017ba8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017bac:	498a      	ldr	r1, [pc, #552]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017bae:	4613      	mov	r3, r2
 8017bb0:	005b      	lsls	r3, r3, #1
 8017bb2:	4413      	add	r3, r2
 8017bb4:	00db      	lsls	r3, r3, #3
 8017bb6:	440b      	add	r3, r1
 8017bb8:	3308      	adds	r3, #8
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	429a      	cmp	r2, r3
 8017bc0:	d102      	bne.n	8017bc8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017bc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017bc6:	e103      	b.n	8017dd0 <etharp_find_entry+0x2d0>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017bc8:	7dfb      	ldrb	r3, [r7, #23]
 8017bca:	2b01      	cmp	r3, #1
 8017bcc:	d140      	bne.n	8017c50 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017bce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017bd2:	4981      	ldr	r1, [pc, #516]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017bd4:	4613      	mov	r3, r2
 8017bd6:	005b      	lsls	r3, r3, #1
 8017bd8:	4413      	add	r3, r2
 8017bda:	00db      	lsls	r3, r3, #3
 8017bdc:	440b      	add	r3, r1
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d01a      	beq.n	8017c1a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017be4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017be8:	497b      	ldr	r1, [pc, #492]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017bea:	4613      	mov	r3, r2
 8017bec:	005b      	lsls	r3, r3, #1
 8017bee:	4413      	add	r3, r2
 8017bf0:	00db      	lsls	r3, r3, #3
 8017bf2:	440b      	add	r3, r1
 8017bf4:	3312      	adds	r3, #18
 8017bf6:	881b      	ldrh	r3, [r3, #0]
 8017bf8:	8bba      	ldrh	r2, [r7, #28]
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d848      	bhi.n	8017c90 <etharp_find_entry+0x190>
            old_queue = i;
 8017bfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017c00:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017c02:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017c06:	4974      	ldr	r1, [pc, #464]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017c08:	4613      	mov	r3, r2
 8017c0a:	005b      	lsls	r3, r3, #1
 8017c0c:	4413      	add	r3, r2
 8017c0e:	00db      	lsls	r3, r3, #3
 8017c10:	440b      	add	r3, r1
 8017c12:	3312      	adds	r3, #18
 8017c14:	881b      	ldrh	r3, [r3, #0]
 8017c16:	83bb      	strh	r3, [r7, #28]
 8017c18:	e03a      	b.n	8017c90 <etharp_find_entry+0x190>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017c1a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017c1e:	496e      	ldr	r1, [pc, #440]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017c20:	4613      	mov	r3, r2
 8017c22:	005b      	lsls	r3, r3, #1
 8017c24:	4413      	add	r3, r2
 8017c26:	00db      	lsls	r3, r3, #3
 8017c28:	440b      	add	r3, r1
 8017c2a:	3312      	adds	r3, #18
 8017c2c:	881b      	ldrh	r3, [r3, #0]
 8017c2e:	8b7a      	ldrh	r2, [r7, #26]
 8017c30:	429a      	cmp	r2, r3
 8017c32:	d82d      	bhi.n	8017c90 <etharp_find_entry+0x190>
            old_pending = i;
 8017c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017c36:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 8017c38:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017c3c:	4966      	ldr	r1, [pc, #408]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017c3e:	4613      	mov	r3, r2
 8017c40:	005b      	lsls	r3, r3, #1
 8017c42:	4413      	add	r3, r2
 8017c44:	00db      	lsls	r3, r3, #3
 8017c46:	440b      	add	r3, r1
 8017c48:	3312      	adds	r3, #18
 8017c4a:	881b      	ldrh	r3, [r3, #0]
 8017c4c:	837b      	strh	r3, [r7, #26]
 8017c4e:	e01f      	b.n	8017c90 <etharp_find_entry+0x190>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017c50:	7dfb      	ldrb	r3, [r7, #23]
 8017c52:	2b01      	cmp	r3, #1
 8017c54:	d91c      	bls.n	8017c90 <etharp_find_entry+0x190>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
 8017c56:	7dfb      	ldrb	r3, [r7, #23]
 8017c58:	2b04      	cmp	r3, #4
 8017c5a:	d819      	bhi.n	8017c90 <etharp_find_entry+0x190>
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017c5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017c60:	495d      	ldr	r1, [pc, #372]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017c62:	4613      	mov	r3, r2
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	4413      	add	r3, r2
 8017c68:	00db      	lsls	r3, r3, #3
 8017c6a:	440b      	add	r3, r1
 8017c6c:	3312      	adds	r3, #18
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	8b3a      	ldrh	r2, [r7, #24]
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d80c      	bhi.n	8017c90 <etharp_find_entry+0x190>
            old_stable = i;
 8017c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017c78:	847b      	strh	r3, [r7, #34]	; 0x22
            age_stable = arp_table[i].ctime;
 8017c7a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017c7e:	4956      	ldr	r1, [pc, #344]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017c80:	4613      	mov	r3, r2
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	4413      	add	r3, r2
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	440b      	add	r3, r1
 8017c8a:	3312      	adds	r3, #18
 8017c8c:	881b      	ldrh	r3, [r3, #0]
 8017c8e:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017c92:	3301      	adds	r3, #1
 8017c94:	b29b      	uxth	r3, r3
 8017c96:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017c98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017c9c:	2b09      	cmp	r3, #9
 8017c9e:	f77f af49 	ble.w	8017b34 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017ca2:	7afb      	ldrb	r3, [r7, #11]
 8017ca4:	f003 0302 	and.w	r3, r3, #2
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d108      	bne.n	8017cbe <etharp_find_entry+0x1be>
 8017cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017cb0:	2b0a      	cmp	r3, #10
 8017cb2:	d107      	bne.n	8017cc4 <etharp_find_entry+0x1c4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017cb4:	7afb      	ldrb	r3, [r7, #11]
 8017cb6:	f003 0301 	and.w	r3, r3, #1
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d102      	bne.n	8017cc4 <etharp_find_entry+0x1c4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8017cc2:	e085      	b.n	8017dd0 <etharp_find_entry+0x2d0>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017cc8:	2b09      	cmp	r3, #9
 8017cca:	dc02      	bgt.n	8017cd2 <etharp_find_entry+0x1d2>
    i = empty;
 8017ccc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017cd0:	e039      	b.n	8017d46 <etharp_find_entry+0x246>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017cd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017cd6:	2b09      	cmp	r3, #9
 8017cd8:	dc14      	bgt.n	8017d04 <etharp_find_entry+0x204>
      /* recycle oldest stable*/
      i = old_stable;
 8017cda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017cde:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017ce2:	493d      	ldr	r1, [pc, #244]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017ce4:	4613      	mov	r3, r2
 8017ce6:	005b      	lsls	r3, r3, #1
 8017ce8:	4413      	add	r3, r2
 8017cea:	00db      	lsls	r3, r3, #3
 8017cec:	440b      	add	r3, r1
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d018      	beq.n	8017d26 <etharp_find_entry+0x226>
 8017cf4:	4b39      	ldr	r3, [pc, #228]	; (8017ddc <etharp_find_entry+0x2dc>)
 8017cf6:	f240 126d 	movw	r2, #365	; 0x16d
 8017cfa:	493b      	ldr	r1, [pc, #236]	; (8017de8 <etharp_find_entry+0x2e8>)
 8017cfc:	4839      	ldr	r0, [pc, #228]	; (8017de4 <etharp_find_entry+0x2e4>)
 8017cfe:	f003 f9c9 	bl	801b094 <iprintf>
 8017d02:	e010      	b.n	8017d26 <etharp_find_entry+0x226>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017d04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d08:	2b09      	cmp	r3, #9
 8017d0a:	dc02      	bgt.n	8017d12 <etharp_find_entry+0x212>
      /* recycle oldest pending */
      i = old_pending;
 8017d0c:	8c3b      	ldrh	r3, [r7, #32]
 8017d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017d10:	e009      	b.n	8017d26 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017d12:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017d16:	2b09      	cmp	r3, #9
 8017d18:	dc02      	bgt.n	8017d20 <etharp_find_entry+0x220>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017d1a:	8bfb      	ldrh	r3, [r7, #30]
 8017d1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017d1e:	e002      	b.n	8017d26 <etharp_find_entry+0x226>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017d20:	f04f 33ff 	mov.w	r3, #4294967295
 8017d24:	e054      	b.n	8017dd0 <etharp_find_entry+0x2d0>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017d26:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017d2a:	2b09      	cmp	r3, #9
 8017d2c:	dd06      	ble.n	8017d3c <etharp_find_entry+0x23c>
 8017d2e:	4b2b      	ldr	r3, [pc, #172]	; (8017ddc <etharp_find_entry+0x2dc>)
 8017d30:	f240 127f 	movw	r2, #383	; 0x17f
 8017d34:	492d      	ldr	r1, [pc, #180]	; (8017dec <etharp_find_entry+0x2ec>)
 8017d36:	482b      	ldr	r0, [pc, #172]	; (8017de4 <etharp_find_entry+0x2e4>)
 8017d38:	f003 f9ac 	bl	801b094 <iprintf>
    etharp_free_entry(i);
 8017d3c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7ff fdd1 	bl	80178e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017d46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017d4a:	2b09      	cmp	r3, #9
 8017d4c:	dd06      	ble.n	8017d5c <etharp_find_entry+0x25c>
 8017d4e:	4b23      	ldr	r3, [pc, #140]	; (8017ddc <etharp_find_entry+0x2dc>)
 8017d50:	f240 1283 	movw	r2, #387	; 0x183
 8017d54:	4925      	ldr	r1, [pc, #148]	; (8017dec <etharp_find_entry+0x2ec>)
 8017d56:	4823      	ldr	r0, [pc, #140]	; (8017de4 <etharp_find_entry+0x2e4>)
 8017d58:	f003 f99c 	bl	801b094 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017d5c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017d60:	491d      	ldr	r1, [pc, #116]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017d62:	4613      	mov	r3, r2
 8017d64:	005b      	lsls	r3, r3, #1
 8017d66:	4413      	add	r3, r2
 8017d68:	00db      	lsls	r3, r3, #3
 8017d6a:	440b      	add	r3, r1
 8017d6c:	3314      	adds	r3, #20
 8017d6e:	781b      	ldrb	r3, [r3, #0]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d006      	beq.n	8017d82 <etharp_find_entry+0x282>
 8017d74:	4b19      	ldr	r3, [pc, #100]	; (8017ddc <etharp_find_entry+0x2dc>)
 8017d76:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017d7a:	491d      	ldr	r1, [pc, #116]	; (8017df0 <etharp_find_entry+0x2f0>)
 8017d7c:	4819      	ldr	r0, [pc, #100]	; (8017de4 <etharp_find_entry+0x2e4>)
 8017d7e:	f003 f989 	bl	801b094 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d00b      	beq.n	8017da0 <etharp_find_entry+0x2a0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017d88:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	6819      	ldr	r1, [r3, #0]
 8017d90:	4811      	ldr	r0, [pc, #68]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017d92:	4613      	mov	r3, r2
 8017d94:	005b      	lsls	r3, r3, #1
 8017d96:	4413      	add	r3, r2
 8017d98:	00db      	lsls	r3, r3, #3
 8017d9a:	4403      	add	r3, r0
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017da0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017da4:	490c      	ldr	r1, [pc, #48]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017da6:	4613      	mov	r3, r2
 8017da8:	005b      	lsls	r3, r3, #1
 8017daa:	4413      	add	r3, r2
 8017dac:	00db      	lsls	r3, r3, #3
 8017dae:	440b      	add	r3, r1
 8017db0:	3312      	adds	r3, #18
 8017db2:	2200      	movs	r2, #0
 8017db4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017db6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8017dba:	4907      	ldr	r1, [pc, #28]	; (8017dd8 <etharp_find_entry+0x2d8>)
 8017dbc:	4613      	mov	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	440b      	add	r3, r1
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	687a      	ldr	r2, [r7, #4]
 8017dca:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017dcc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3728      	adds	r7, #40	; 0x28
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}
 8017dd8:	20013e08 	.word	0x20013e08
 8017ddc:	08020348 	.word	0x08020348
 8017de0:	08020380 	.word	0x08020380
 8017de4:	080203c0 	.word	0x080203c0
 8017de8:	080203e8 	.word	0x080203e8
 8017dec:	08020400 	.word	0x08020400
 8017df0:	08020414 	.word	0x08020414

08017df4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b088      	sub	sp, #32
 8017df8:	af02      	add	r7, sp, #8
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	607a      	str	r2, [r7, #4]
 8017e00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e08:	2b06      	cmp	r3, #6
 8017e0a:	d006      	beq.n	8017e1a <etharp_update_arp_entry+0x26>
 8017e0c:	4b58      	ldr	r3, [pc, #352]	; (8017f70 <etharp_update_arp_entry+0x17c>)
 8017e0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017e12:	4958      	ldr	r1, [pc, #352]	; (8017f74 <etharp_update_arp_entry+0x180>)
 8017e14:	4858      	ldr	r0, [pc, #352]	; (8017f78 <etharp_update_arp_entry+0x184>)
 8017e16:	f003 f93d 	bl	801b094 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d012      	beq.n	8017e46 <etharp_update_arp_entry+0x52>
 8017e20:	68bb      	ldr	r3, [r7, #8]
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d00e      	beq.n	8017e46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	68f9      	ldr	r1, [r7, #12]
 8017e2e:	4618      	mov	r0, r3
 8017e30:	f001 fa00 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8017e34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d105      	bne.n	8017e46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017e42:	2be0      	cmp	r3, #224	; 0xe0
 8017e44:	d102      	bne.n	8017e4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017e46:	f06f 030f 	mvn.w	r3, #15
 8017e4a:	e08c      	b.n	8017f66 <etharp_update_arp_entry+0x172>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017e4c:	78fb      	ldrb	r3, [r7, #3]
 8017e4e:	68fa      	ldr	r2, [r7, #12]
 8017e50:	4619      	mov	r1, r3
 8017e52:	68b8      	ldr	r0, [r7, #8]
 8017e54:	f7ff fe54 	bl	8017b00 <etharp_find_entry>
 8017e58:	4603      	mov	r3, r0
 8017e5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017e5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	da02      	bge.n	8017e6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017e64:	8afb      	ldrh	r3, [r7, #22]
 8017e66:	b25b      	sxtb	r3, r3
 8017e68:	e07d      	b.n	8017f66 <etharp_update_arp_entry+0x172>
  }

#if ETHARP_SUPPORT_STATIC_ENTRIES
  if (flags & ETHARP_FLAG_STATIC_ENTRY) {
 8017e6a:	78fb      	ldrb	r3, [r7, #3]
 8017e6c:	f003 0304 	and.w	r3, r3, #4
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d00b      	beq.n	8017e8c <etharp_update_arp_entry+0x98>
    /* record static type */
    arp_table[i].state = ETHARP_STATE_STATIC;
 8017e74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e78:	4940      	ldr	r1, [pc, #256]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017e7a:	4613      	mov	r3, r2
 8017e7c:	005b      	lsls	r3, r3, #1
 8017e7e:	4413      	add	r3, r2
 8017e80:	00db      	lsls	r3, r3, #3
 8017e82:	440b      	add	r3, r1
 8017e84:	3314      	adds	r3, #20
 8017e86:	2205      	movs	r2, #5
 8017e88:	701a      	strb	r2, [r3, #0]
 8017e8a:	e019      	b.n	8017ec0 <etharp_update_arp_entry+0xcc>
  } else if (arp_table[i].state == ETHARP_STATE_STATIC) {
 8017e8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e90:	493a      	ldr	r1, [pc, #232]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017e92:	4613      	mov	r3, r2
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4413      	add	r3, r2
 8017e98:	00db      	lsls	r3, r3, #3
 8017e9a:	440b      	add	r3, r1
 8017e9c:	3314      	adds	r3, #20
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	2b05      	cmp	r3, #5
 8017ea2:	d102      	bne.n	8017eaa <etharp_update_arp_entry+0xb6>
    /* found entry is a static type, don't overwrite it */
    return ERR_VAL;
 8017ea4:	f06f 0305 	mvn.w	r3, #5
 8017ea8:	e05d      	b.n	8017f66 <etharp_update_arp_entry+0x172>
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017eaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017eae:	4933      	ldr	r1, [pc, #204]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017eb0:	4613      	mov	r3, r2
 8017eb2:	005b      	lsls	r3, r3, #1
 8017eb4:	4413      	add	r3, r2
 8017eb6:	00db      	lsls	r3, r3, #3
 8017eb8:	440b      	add	r3, r1
 8017eba:	3314      	adds	r3, #20
 8017ebc:	2202      	movs	r2, #2
 8017ebe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017ec0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ec4:	492d      	ldr	r1, [pc, #180]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017ec6:	4613      	mov	r3, r2
 8017ec8:	005b      	lsls	r3, r3, #1
 8017eca:	4413      	add	r3, r2
 8017ecc:	00db      	lsls	r3, r3, #3
 8017ece:	440b      	add	r3, r1
 8017ed0:	3308      	adds	r3, #8
 8017ed2:	68fa      	ldr	r2, [r7, #12]
 8017ed4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017ed6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	3308      	adds	r3, #8
 8017ee4:	4a25      	ldr	r2, [pc, #148]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017ee6:	4413      	add	r3, r2
 8017ee8:	3304      	adds	r3, #4
 8017eea:	2206      	movs	r2, #6
 8017eec:	6879      	ldr	r1, [r7, #4]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f003 faef 	bl	801b4d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017ef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ef8:	4920      	ldr	r1, [pc, #128]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017efa:	4613      	mov	r3, r2
 8017efc:	005b      	lsls	r3, r3, #1
 8017efe:	4413      	add	r3, r2
 8017f00:	00db      	lsls	r3, r3, #3
 8017f02:	440b      	add	r3, r1
 8017f04:	3312      	adds	r3, #18
 8017f06:	2200      	movs	r2, #0
 8017f08:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017f0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f0e:	491b      	ldr	r1, [pc, #108]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017f10:	4613      	mov	r3, r2
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	4413      	add	r3, r2
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	440b      	add	r3, r1
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d021      	beq.n	8017f64 <etharp_update_arp_entry+0x170>
    struct pbuf *p = arp_table[i].q;
 8017f20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f24:	4915      	ldr	r1, [pc, #84]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017f26:	4613      	mov	r3, r2
 8017f28:	005b      	lsls	r3, r3, #1
 8017f2a:	4413      	add	r3, r2
 8017f2c:	00db      	lsls	r3, r3, #3
 8017f2e:	440b      	add	r3, r1
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017f34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f38:	4910      	ldr	r1, [pc, #64]	; (8017f7c <etharp_update_arp_entry+0x188>)
 8017f3a:	4613      	mov	r3, r2
 8017f3c:	005b      	lsls	r3, r3, #1
 8017f3e:	4413      	add	r3, r2
 8017f40:	00db      	lsls	r3, r3, #3
 8017f42:	440b      	add	r3, r1
 8017f44:	2200      	movs	r2, #0
 8017f46:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f52:	9300      	str	r3, [sp, #0]
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	6939      	ldr	r1, [r7, #16]
 8017f58:	68f8      	ldr	r0, [r7, #12]
 8017f5a:	f002 f889 	bl	801a070 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017f5e:	6938      	ldr	r0, [r7, #16]
 8017f60:	f7f7 fa42 	bl	800f3e8 <pbuf_free>
  }
  return ERR_OK;
 8017f64:	2300      	movs	r3, #0
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	3718      	adds	r7, #24
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	bf00      	nop
 8017f70:	08020348 	.word	0x08020348
 8017f74:	08020440 	.word	0x08020440
 8017f78:	080203c0 	.word	0x080203c0
 8017f7c:	20013e08 	.word	0x20013e08

08017f80 <etharp_add_static_entry>:
 * @param ethaddr ethernet address for the new static entry
 * @return See return values of etharp_add_static_entry
 */
err_t
etharp_add_static_entry(const ip4_addr_t *ipaddr, struct eth_addr *ethaddr)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b084      	sub	sp, #16
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
 8017f88:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_add_static_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));

  netif = ip4_route(ipaddr);
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f000 fe2c 	bl	8018be8 <ip4_route>
 8017f90:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d102      	bne.n	8017f9e <etharp_add_static_entry+0x1e>
    return ERR_RTE;
 8017f98:	f06f 0303 	mvn.w	r3, #3
 8017f9c:	e006      	b.n	8017fac <etharp_add_static_entry+0x2c>
  }

  return etharp_update_arp_entry(netif, ipaddr, ethaddr, ETHARP_FLAG_TRY_HARD | ETHARP_FLAG_STATIC_ENTRY);
 8017f9e:	2305      	movs	r3, #5
 8017fa0:	683a      	ldr	r2, [r7, #0]
 8017fa2:	6879      	ldr	r1, [r7, #4]
 8017fa4:	68f8      	ldr	r0, [r7, #12]
 8017fa6:	f7ff ff25 	bl	8017df4 <etharp_update_arp_entry>
 8017faa:	4603      	mov	r3, r0
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	3710      	adds	r7, #16
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b084      	sub	sp, #16
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	60fb      	str	r3, [r7, #12]
 8017fc0:	e01e      	b.n	8018000 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017fc2:	4913      	ldr	r1, [pc, #76]	; (8018010 <etharp_cleanup_netif+0x5c>)
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	4613      	mov	r3, r2
 8017fc8:	005b      	lsls	r3, r3, #1
 8017fca:	4413      	add	r3, r2
 8017fcc:	00db      	lsls	r3, r3, #3
 8017fce:	440b      	add	r3, r1
 8017fd0:	3314      	adds	r3, #20
 8017fd2:	781b      	ldrb	r3, [r3, #0]
 8017fd4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017fd6:	7afb      	ldrb	r3, [r7, #11]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d00e      	beq.n	8017ffa <etharp_cleanup_netif+0x46>
 8017fdc:	490c      	ldr	r1, [pc, #48]	; (8018010 <etharp_cleanup_netif+0x5c>)
 8017fde:	68fa      	ldr	r2, [r7, #12]
 8017fe0:	4613      	mov	r3, r2
 8017fe2:	005b      	lsls	r3, r3, #1
 8017fe4:	4413      	add	r3, r2
 8017fe6:	00db      	lsls	r3, r3, #3
 8017fe8:	440b      	add	r3, r1
 8017fea:	3308      	adds	r3, #8
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	687a      	ldr	r2, [r7, #4]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d102      	bne.n	8017ffa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017ff4:	68f8      	ldr	r0, [r7, #12]
 8017ff6:	f7ff fc77 	bl	80178e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	3301      	adds	r3, #1
 8017ffe:	60fb      	str	r3, [r7, #12]
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	2b09      	cmp	r3, #9
 8018004:	dddd      	ble.n	8017fc2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018006:	bf00      	nop
 8018008:	bf00      	nop
 801800a:	3710      	adds	r7, #16
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}
 8018010:	20013e08 	.word	0x20013e08

08018014 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018014:	b5b0      	push	{r4, r5, r7, lr}
 8018016:	b08a      	sub	sp, #40	; 0x28
 8018018:	af04      	add	r7, sp, #16
 801801a:	6078      	str	r0, [r7, #4]
 801801c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801801e:	683b      	ldr	r3, [r7, #0]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d107      	bne.n	8018034 <etharp_input+0x20>
 8018024:	4b3f      	ldr	r3, [pc, #252]	; (8018124 <etharp_input+0x110>)
 8018026:	f240 228a 	movw	r2, #650	; 0x28a
 801802a:	493f      	ldr	r1, [pc, #252]	; (8018128 <etharp_input+0x114>)
 801802c:	483f      	ldr	r0, [pc, #252]	; (801812c <etharp_input+0x118>)
 801802e:	f003 f831 	bl	801b094 <iprintf>
 8018032:	e074      	b.n	801811e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	685b      	ldr	r3, [r3, #4]
 8018038:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	b29b      	uxth	r3, r3
 8018040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018044:	d10c      	bne.n	8018060 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801804a:	2b06      	cmp	r3, #6
 801804c:	d108      	bne.n	8018060 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801804e:	697b      	ldr	r3, [r7, #20]
 8018050:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018052:	2b04      	cmp	r3, #4
 8018054:	d104      	bne.n	8018060 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	885b      	ldrh	r3, [r3, #2]
 801805a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801805c:	2b08      	cmp	r3, #8
 801805e:	d003      	beq.n	8018068 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f7f7 f9c1 	bl	800f3e8 <pbuf_free>
    return;
 8018066:	e05a      	b.n	801811e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018068:	697b      	ldr	r3, [r7, #20]
 801806a:	330e      	adds	r3, #14
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	3318      	adds	r3, #24
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018078:	683b      	ldr	r3, [r7, #0]
 801807a:	3304      	adds	r3, #4
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d102      	bne.n	8018088 <etharp_input+0x74>
    for_us = 0;
 8018082:	2300      	movs	r3, #0
 8018084:	74fb      	strb	r3, [r7, #19]
 8018086:	e009      	b.n	801809c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018088:	68ba      	ldr	r2, [r7, #8]
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	3304      	adds	r3, #4
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	429a      	cmp	r2, r3
 8018092:	bf0c      	ite	eq
 8018094:	2301      	moveq	r3, #1
 8018096:	2300      	movne	r3, #0
 8018098:	b2db      	uxtb	r3, r3
 801809a:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801809c:	697b      	ldr	r3, [r7, #20]
 801809e:	f103 0208 	add.w	r2, r3, #8
 80180a2:	7cfb      	ldrb	r3, [r7, #19]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d001      	beq.n	80180ac <etharp_input+0x98>
 80180a8:	2301      	movs	r3, #1
 80180aa:	e000      	b.n	80180ae <etharp_input+0x9a>
 80180ac:	2302      	movs	r3, #2
 80180ae:	f107 010c 	add.w	r1, r7, #12
 80180b2:	6838      	ldr	r0, [r7, #0]
 80180b4:	f7ff fe9e 	bl	8017df4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	88db      	ldrh	r3, [r3, #6]
 80180bc:	b29b      	uxth	r3, r3
 80180be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80180c2:	d003      	beq.n	80180cc <etharp_input+0xb8>
 80180c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180c8:	d01e      	beq.n	8018108 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80180ca:	e025      	b.n	8018118 <etharp_input+0x104>
      if (for_us) {
 80180cc:	7cfb      	ldrb	r3, [r7, #19]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d021      	beq.n	8018116 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80180d2:	683b      	ldr	r3, [r7, #0]
 80180d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80180d8:	697b      	ldr	r3, [r7, #20]
 80180da:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80180e8:	697a      	ldr	r2, [r7, #20]
 80180ea:	3208      	adds	r2, #8
        etharp_raw(netif,
 80180ec:	2102      	movs	r1, #2
 80180ee:	9103      	str	r1, [sp, #12]
 80180f0:	f107 010c 	add.w	r1, r7, #12
 80180f4:	9102      	str	r1, [sp, #8]
 80180f6:	9201      	str	r2, [sp, #4]
 80180f8:	9300      	str	r3, [sp, #0]
 80180fa:	462b      	mov	r3, r5
 80180fc:	4622      	mov	r2, r4
 80180fe:	4601      	mov	r1, r0
 8018100:	6838      	ldr	r0, [r7, #0]
 8018102:	f000 faef 	bl	80186e4 <etharp_raw>
      break;
 8018106:	e006      	b.n	8018116 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8018108:	f107 030c 	add.w	r3, r7, #12
 801810c:	4619      	mov	r1, r3
 801810e:	6838      	ldr	r0, [r7, #0]
 8018110:	f7fe f976 	bl	8016400 <dhcp_arp_reply>
      break;
 8018114:	e000      	b.n	8018118 <etharp_input+0x104>
      break;
 8018116:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018118:	6878      	ldr	r0, [r7, #4]
 801811a:	f7f7 f965 	bl	800f3e8 <pbuf_free>
}
 801811e:	3718      	adds	r7, #24
 8018120:	46bd      	mov	sp, r7
 8018122:	bdb0      	pop	{r4, r5, r7, pc}
 8018124:	08020348 	.word	0x08020348
 8018128:	08020498 	.word	0x08020498
 801812c:	080203c0 	.word	0x080203c0

08018130 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b086      	sub	sp, #24
 8018134:	af02      	add	r7, sp, #8
 8018136:	60f8      	str	r0, [r7, #12]
 8018138:	60b9      	str	r1, [r7, #8]
 801813a:	4613      	mov	r3, r2
 801813c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801813e:	79fa      	ldrb	r2, [r7, #7]
 8018140:	4944      	ldr	r1, [pc, #272]	; (8018254 <etharp_output_to_arp_index+0x124>)
 8018142:	4613      	mov	r3, r2
 8018144:	005b      	lsls	r3, r3, #1
 8018146:	4413      	add	r3, r2
 8018148:	00db      	lsls	r3, r3, #3
 801814a:	440b      	add	r3, r1
 801814c:	3314      	adds	r3, #20
 801814e:	781b      	ldrb	r3, [r3, #0]
 8018150:	2b01      	cmp	r3, #1
 8018152:	d806      	bhi.n	8018162 <etharp_output_to_arp_index+0x32>
 8018154:	4b40      	ldr	r3, [pc, #256]	; (8018258 <etharp_output_to_arp_index+0x128>)
 8018156:	f240 22ee 	movw	r2, #750	; 0x2ee
 801815a:	4940      	ldr	r1, [pc, #256]	; (801825c <etharp_output_to_arp_index+0x12c>)
 801815c:	4840      	ldr	r0, [pc, #256]	; (8018260 <etharp_output_to_arp_index+0x130>)
 801815e:	f002 ff99 	bl	801b094 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018162:	79fa      	ldrb	r2, [r7, #7]
 8018164:	493b      	ldr	r1, [pc, #236]	; (8018254 <etharp_output_to_arp_index+0x124>)
 8018166:	4613      	mov	r3, r2
 8018168:	005b      	lsls	r3, r3, #1
 801816a:	4413      	add	r3, r2
 801816c:	00db      	lsls	r3, r3, #3
 801816e:	440b      	add	r3, r1
 8018170:	3314      	adds	r3, #20
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	2b02      	cmp	r3, #2
 8018176:	d153      	bne.n	8018220 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018178:	79fa      	ldrb	r2, [r7, #7]
 801817a:	4936      	ldr	r1, [pc, #216]	; (8018254 <etharp_output_to_arp_index+0x124>)
 801817c:	4613      	mov	r3, r2
 801817e:	005b      	lsls	r3, r3, #1
 8018180:	4413      	add	r3, r2
 8018182:	00db      	lsls	r3, r3, #3
 8018184:	440b      	add	r3, r1
 8018186:	3312      	adds	r3, #18
 8018188:	881b      	ldrh	r3, [r3, #0]
 801818a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801818e:	d919      	bls.n	80181c4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018190:	79fa      	ldrb	r2, [r7, #7]
 8018192:	4613      	mov	r3, r2
 8018194:	005b      	lsls	r3, r3, #1
 8018196:	4413      	add	r3, r2
 8018198:	00db      	lsls	r3, r3, #3
 801819a:	4a2e      	ldr	r2, [pc, #184]	; (8018254 <etharp_output_to_arp_index+0x124>)
 801819c:	4413      	add	r3, r2
 801819e:	3304      	adds	r3, #4
 80181a0:	4619      	mov	r1, r3
 80181a2:	68f8      	ldr	r0, [r7, #12]
 80181a4:	f000 fb4c 	bl	8018840 <etharp_request>
 80181a8:	4603      	mov	r3, r0
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d138      	bne.n	8018220 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80181ae:	79fa      	ldrb	r2, [r7, #7]
 80181b0:	4928      	ldr	r1, [pc, #160]	; (8018254 <etharp_output_to_arp_index+0x124>)
 80181b2:	4613      	mov	r3, r2
 80181b4:	005b      	lsls	r3, r3, #1
 80181b6:	4413      	add	r3, r2
 80181b8:	00db      	lsls	r3, r3, #3
 80181ba:	440b      	add	r3, r1
 80181bc:	3314      	adds	r3, #20
 80181be:	2203      	movs	r2, #3
 80181c0:	701a      	strb	r2, [r3, #0]
 80181c2:	e02d      	b.n	8018220 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80181c4:	79fa      	ldrb	r2, [r7, #7]
 80181c6:	4923      	ldr	r1, [pc, #140]	; (8018254 <etharp_output_to_arp_index+0x124>)
 80181c8:	4613      	mov	r3, r2
 80181ca:	005b      	lsls	r3, r3, #1
 80181cc:	4413      	add	r3, r2
 80181ce:	00db      	lsls	r3, r3, #3
 80181d0:	440b      	add	r3, r1
 80181d2:	3312      	adds	r3, #18
 80181d4:	881b      	ldrh	r3, [r3, #0]
 80181d6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80181da:	d321      	bcc.n	8018220 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80181dc:	79fa      	ldrb	r2, [r7, #7]
 80181de:	4613      	mov	r3, r2
 80181e0:	005b      	lsls	r3, r3, #1
 80181e2:	4413      	add	r3, r2
 80181e4:	00db      	lsls	r3, r3, #3
 80181e6:	4a1b      	ldr	r2, [pc, #108]	; (8018254 <etharp_output_to_arp_index+0x124>)
 80181e8:	4413      	add	r3, r2
 80181ea:	1d19      	adds	r1, r3, #4
 80181ec:	79fa      	ldrb	r2, [r7, #7]
 80181ee:	4613      	mov	r3, r2
 80181f0:	005b      	lsls	r3, r3, #1
 80181f2:	4413      	add	r3, r2
 80181f4:	00db      	lsls	r3, r3, #3
 80181f6:	3308      	adds	r3, #8
 80181f8:	4a16      	ldr	r2, [pc, #88]	; (8018254 <etharp_output_to_arp_index+0x124>)
 80181fa:	4413      	add	r3, r2
 80181fc:	3304      	adds	r3, #4
 80181fe:	461a      	mov	r2, r3
 8018200:	68f8      	ldr	r0, [r7, #12]
 8018202:	f000 fafb 	bl	80187fc <etharp_request_dst>
 8018206:	4603      	mov	r3, r0
 8018208:	2b00      	cmp	r3, #0
 801820a:	d109      	bne.n	8018220 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801820c:	79fa      	ldrb	r2, [r7, #7]
 801820e:	4911      	ldr	r1, [pc, #68]	; (8018254 <etharp_output_to_arp_index+0x124>)
 8018210:	4613      	mov	r3, r2
 8018212:	005b      	lsls	r3, r3, #1
 8018214:	4413      	add	r3, r2
 8018216:	00db      	lsls	r3, r3, #3
 8018218:	440b      	add	r3, r1
 801821a:	3314      	adds	r3, #20
 801821c:	2203      	movs	r2, #3
 801821e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8018226:	79fa      	ldrb	r2, [r7, #7]
 8018228:	4613      	mov	r3, r2
 801822a:	005b      	lsls	r3, r3, #1
 801822c:	4413      	add	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	3308      	adds	r3, #8
 8018232:	4a08      	ldr	r2, [pc, #32]	; (8018254 <etharp_output_to_arp_index+0x124>)
 8018234:	4413      	add	r3, r2
 8018236:	3304      	adds	r3, #4
 8018238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801823c:	9200      	str	r2, [sp, #0]
 801823e:	460a      	mov	r2, r1
 8018240:	68b9      	ldr	r1, [r7, #8]
 8018242:	68f8      	ldr	r0, [r7, #12]
 8018244:	f001 ff14 	bl	801a070 <ethernet_output>
 8018248:	4603      	mov	r3, r0
}
 801824a:	4618      	mov	r0, r3
 801824c:	3710      	adds	r7, #16
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}
 8018252:	bf00      	nop
 8018254:	20013e08 	.word	0x20013e08
 8018258:	08020348 	.word	0x08020348
 801825c:	080204b8 	.word	0x080204b8
 8018260:	080203c0 	.word	0x080203c0

08018264 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b08a      	sub	sp, #40	; 0x28
 8018268:	af02      	add	r7, sp, #8
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	60b9      	str	r1, [r7, #8]
 801826e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d106      	bne.n	8018288 <etharp_output+0x24>
 801827a:	4b73      	ldr	r3, [pc, #460]	; (8018448 <etharp_output+0x1e4>)
 801827c:	f240 321e 	movw	r2, #798	; 0x31e
 8018280:	4972      	ldr	r1, [pc, #456]	; (801844c <etharp_output+0x1e8>)
 8018282:	4873      	ldr	r0, [pc, #460]	; (8018450 <etharp_output+0x1ec>)
 8018284:	f002 ff06 	bl	801b094 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	2b00      	cmp	r3, #0
 801828c:	d106      	bne.n	801829c <etharp_output+0x38>
 801828e:	4b6e      	ldr	r3, [pc, #440]	; (8018448 <etharp_output+0x1e4>)
 8018290:	f240 321f 	movw	r2, #799	; 0x31f
 8018294:	496f      	ldr	r1, [pc, #444]	; (8018454 <etharp_output+0x1f0>)
 8018296:	486e      	ldr	r0, [pc, #440]	; (8018450 <etharp_output+0x1ec>)
 8018298:	f002 fefc 	bl	801b094 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d106      	bne.n	80182b0 <etharp_output+0x4c>
 80182a2:	4b69      	ldr	r3, [pc, #420]	; (8018448 <etharp_output+0x1e4>)
 80182a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80182a8:	496b      	ldr	r1, [pc, #428]	; (8018458 <etharp_output+0x1f4>)
 80182aa:	4869      	ldr	r0, [pc, #420]	; (8018450 <etharp_output+0x1ec>)
 80182ac:	f002 fef2 	bl	801b094 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	68f9      	ldr	r1, [r7, #12]
 80182b6:	4618      	mov	r0, r3
 80182b8:	f000 ffbc 	bl	8019234 <ip4_addr_isbroadcast_u32>
 80182bc:	4603      	mov	r3, r0
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d002      	beq.n	80182c8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80182c2:	4b66      	ldr	r3, [pc, #408]	; (801845c <etharp_output+0x1f8>)
 80182c4:	61fb      	str	r3, [r7, #28]
 80182c6:	e0af      	b.n	8018428 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182d0:	2be0      	cmp	r3, #224	; 0xe0
 80182d2:	d118      	bne.n	8018306 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80182d4:	2301      	movs	r3, #1
 80182d6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80182d8:	2300      	movs	r3, #0
 80182da:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80182dc:	235e      	movs	r3, #94	; 0x5e
 80182de:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	3301      	adds	r3, #1
 80182e4:	781b      	ldrb	r3, [r3, #0]
 80182e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80182ea:	b2db      	uxtb	r3, r3
 80182ec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	3302      	adds	r3, #2
 80182f2:	781b      	ldrb	r3, [r3, #0]
 80182f4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	3303      	adds	r3, #3
 80182fa:	781b      	ldrb	r3, [r3, #0]
 80182fc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80182fe:	f107 0310 	add.w	r3, r7, #16
 8018302:	61fb      	str	r3, [r7, #28]
 8018304:	e090      	b.n	8018428 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	681a      	ldr	r2, [r3, #0]
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	3304      	adds	r3, #4
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	405a      	eors	r2, r3
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	3308      	adds	r3, #8
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4013      	ands	r3, r2
 801831a:	2b00      	cmp	r3, #0
 801831c:	d012      	beq.n	8018344 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018324:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018328:	4293      	cmp	r3, r2
 801832a:	d00b      	beq.n	8018344 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	330c      	adds	r3, #12
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d003      	beq.n	801833e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	330c      	adds	r3, #12
 801833a:	61bb      	str	r3, [r7, #24]
 801833c:	e002      	b.n	8018344 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801833e:	f06f 0303 	mvn.w	r3, #3
 8018342:	e07d      	b.n	8018440 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018344:	4b46      	ldr	r3, [pc, #280]	; (8018460 <etharp_output+0x1fc>)
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	4619      	mov	r1, r3
 801834a:	4a46      	ldr	r2, [pc, #280]	; (8018464 <etharp_output+0x200>)
 801834c:	460b      	mov	r3, r1
 801834e:	005b      	lsls	r3, r3, #1
 8018350:	440b      	add	r3, r1
 8018352:	00db      	lsls	r3, r3, #3
 8018354:	4413      	add	r3, r2
 8018356:	3314      	adds	r3, #20
 8018358:	781b      	ldrb	r3, [r3, #0]
 801835a:	2b01      	cmp	r3, #1
 801835c:	d925      	bls.n	80183aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801835e:	4b40      	ldr	r3, [pc, #256]	; (8018460 <etharp_output+0x1fc>)
 8018360:	781b      	ldrb	r3, [r3, #0]
 8018362:	4619      	mov	r1, r3
 8018364:	4a3f      	ldr	r2, [pc, #252]	; (8018464 <etharp_output+0x200>)
 8018366:	460b      	mov	r3, r1
 8018368:	005b      	lsls	r3, r3, #1
 801836a:	440b      	add	r3, r1
 801836c:	00db      	lsls	r3, r3, #3
 801836e:	4413      	add	r3, r2
 8018370:	3308      	adds	r3, #8
 8018372:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018374:	68fa      	ldr	r2, [r7, #12]
 8018376:	429a      	cmp	r2, r3
 8018378:	d117      	bne.n	80183aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801837a:	69bb      	ldr	r3, [r7, #24]
 801837c:	681a      	ldr	r2, [r3, #0]
 801837e:	4b38      	ldr	r3, [pc, #224]	; (8018460 <etharp_output+0x1fc>)
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	4618      	mov	r0, r3
 8018384:	4937      	ldr	r1, [pc, #220]	; (8018464 <etharp_output+0x200>)
 8018386:	4603      	mov	r3, r0
 8018388:	005b      	lsls	r3, r3, #1
 801838a:	4403      	add	r3, r0
 801838c:	00db      	lsls	r3, r3, #3
 801838e:	440b      	add	r3, r1
 8018390:	3304      	adds	r3, #4
 8018392:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018394:	429a      	cmp	r2, r3
 8018396:	d108      	bne.n	80183aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018398:	4b31      	ldr	r3, [pc, #196]	; (8018460 <etharp_output+0x1fc>)
 801839a:	781b      	ldrb	r3, [r3, #0]
 801839c:	461a      	mov	r2, r3
 801839e:	68b9      	ldr	r1, [r7, #8]
 80183a0:	68f8      	ldr	r0, [r7, #12]
 80183a2:	f7ff fec5 	bl	8018130 <etharp_output_to_arp_index>
 80183a6:	4603      	mov	r3, r0
 80183a8:	e04a      	b.n	8018440 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183aa:	2300      	movs	r3, #0
 80183ac:	75fb      	strb	r3, [r7, #23]
 80183ae:	e031      	b.n	8018414 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183b0:	7dfa      	ldrb	r2, [r7, #23]
 80183b2:	492c      	ldr	r1, [pc, #176]	; (8018464 <etharp_output+0x200>)
 80183b4:	4613      	mov	r3, r2
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	4413      	add	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	440b      	add	r3, r1
 80183be:	3314      	adds	r3, #20
 80183c0:	781b      	ldrb	r3, [r3, #0]
 80183c2:	2b01      	cmp	r3, #1
 80183c4:	d923      	bls.n	801840e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80183c6:	7dfa      	ldrb	r2, [r7, #23]
 80183c8:	4926      	ldr	r1, [pc, #152]	; (8018464 <etharp_output+0x200>)
 80183ca:	4613      	mov	r3, r2
 80183cc:	005b      	lsls	r3, r3, #1
 80183ce:	4413      	add	r3, r2
 80183d0:	00db      	lsls	r3, r3, #3
 80183d2:	440b      	add	r3, r1
 80183d4:	3308      	adds	r3, #8
 80183d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183d8:	68fa      	ldr	r2, [r7, #12]
 80183da:	429a      	cmp	r2, r3
 80183dc:	d117      	bne.n	801840e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80183de:	69bb      	ldr	r3, [r7, #24]
 80183e0:	6819      	ldr	r1, [r3, #0]
 80183e2:	7dfa      	ldrb	r2, [r7, #23]
 80183e4:	481f      	ldr	r0, [pc, #124]	; (8018464 <etharp_output+0x200>)
 80183e6:	4613      	mov	r3, r2
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	4413      	add	r3, r2
 80183ec:	00db      	lsls	r3, r3, #3
 80183ee:	4403      	add	r3, r0
 80183f0:	3304      	adds	r3, #4
 80183f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80183f4:	4299      	cmp	r1, r3
 80183f6:	d10a      	bne.n	801840e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80183f8:	4a19      	ldr	r2, [pc, #100]	; (8018460 <etharp_output+0x1fc>)
 80183fa:	7dfb      	ldrb	r3, [r7, #23]
 80183fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80183fe:	7dfb      	ldrb	r3, [r7, #23]
 8018400:	461a      	mov	r2, r3
 8018402:	68b9      	ldr	r1, [r7, #8]
 8018404:	68f8      	ldr	r0, [r7, #12]
 8018406:	f7ff fe93 	bl	8018130 <etharp_output_to_arp_index>
 801840a:	4603      	mov	r3, r0
 801840c:	e018      	b.n	8018440 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801840e:	7dfb      	ldrb	r3, [r7, #23]
 8018410:	3301      	adds	r3, #1
 8018412:	75fb      	strb	r3, [r7, #23]
 8018414:	7dfb      	ldrb	r3, [r7, #23]
 8018416:	2b09      	cmp	r3, #9
 8018418:	d9ca      	bls.n	80183b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801841a:	68ba      	ldr	r2, [r7, #8]
 801841c:	69b9      	ldr	r1, [r7, #24]
 801841e:	68f8      	ldr	r0, [r7, #12]
 8018420:	f000 f822 	bl	8018468 <etharp_query>
 8018424:	4603      	mov	r3, r0
 8018426:	e00b      	b.n	8018440 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801842e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	69fb      	ldr	r3, [r7, #28]
 8018436:	68b9      	ldr	r1, [r7, #8]
 8018438:	68f8      	ldr	r0, [r7, #12]
 801843a:	f001 fe19 	bl	801a070 <ethernet_output>
 801843e:	4603      	mov	r3, r0
}
 8018440:	4618      	mov	r0, r3
 8018442:	3720      	adds	r7, #32
 8018444:	46bd      	mov	sp, r7
 8018446:	bd80      	pop	{r7, pc}
 8018448:	08020348 	.word	0x08020348
 801844c:	08020498 	.word	0x08020498
 8018450:	080203c0 	.word	0x080203c0
 8018454:	080204e8 	.word	0x080204e8
 8018458:	08020488 	.word	0x08020488
 801845c:	0806c808 	.word	0x0806c808
 8018460:	20013ef8 	.word	0x20013ef8
 8018464:	20013e08 	.word	0x20013e08

08018468 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b08c      	sub	sp, #48	; 0x30
 801846c:	af02      	add	r7, sp, #8
 801846e:	60f8      	str	r0, [r7, #12]
 8018470:	60b9      	str	r1, [r7, #8]
 8018472:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	332a      	adds	r3, #42	; 0x2a
 8018478:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801847a:	23ff      	movs	r3, #255	; 0xff
 801847c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018480:	2300      	movs	r3, #0
 8018482:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	68f9      	ldr	r1, [r7, #12]
 801848a:	4618      	mov	r0, r3
 801848c:	f000 fed2 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8018490:	4603      	mov	r3, r0
 8018492:	2b00      	cmp	r3, #0
 8018494:	d10c      	bne.n	80184b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801849e:	2be0      	cmp	r3, #224	; 0xe0
 80184a0:	d006      	beq.n	80184b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80184a2:	68bb      	ldr	r3, [r7, #8]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d003      	beq.n	80184b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d102      	bne.n	80184b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184b0:	f06f 030f 	mvn.w	r3, #15
 80184b4:	e101      	b.n	80186ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80184b6:	68fa      	ldr	r2, [r7, #12]
 80184b8:	2101      	movs	r1, #1
 80184ba:	68b8      	ldr	r0, [r7, #8]
 80184bc:	f7ff fb20 	bl	8017b00 <etharp_find_entry>
 80184c0:	4603      	mov	r3, r0
 80184c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80184c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	da02      	bge.n	80184d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80184cc:	8a7b      	ldrh	r3, [r7, #18]
 80184ce:	b25b      	sxtb	r3, r3
 80184d0:	e0f3      	b.n	80186ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80184d2:	8a7b      	ldrh	r3, [r7, #18]
 80184d4:	2b7e      	cmp	r3, #126	; 0x7e
 80184d6:	d906      	bls.n	80184e6 <etharp_query+0x7e>
 80184d8:	4b7a      	ldr	r3, [pc, #488]	; (80186c4 <etharp_query+0x25c>)
 80184da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80184de:	497a      	ldr	r1, [pc, #488]	; (80186c8 <etharp_query+0x260>)
 80184e0:	487a      	ldr	r0, [pc, #488]	; (80186cc <etharp_query+0x264>)
 80184e2:	f002 fdd7 	bl	801b094 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80184e6:	8a7b      	ldrh	r3, [r7, #18]
 80184e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80184ea:	7c7a      	ldrb	r2, [r7, #17]
 80184ec:	4978      	ldr	r1, [pc, #480]	; (80186d0 <etharp_query+0x268>)
 80184ee:	4613      	mov	r3, r2
 80184f0:	005b      	lsls	r3, r3, #1
 80184f2:	4413      	add	r3, r2
 80184f4:	00db      	lsls	r3, r3, #3
 80184f6:	440b      	add	r3, r1
 80184f8:	3314      	adds	r3, #20
 80184fa:	781b      	ldrb	r3, [r3, #0]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d115      	bne.n	801852c <etharp_query+0xc4>
    is_new_entry = 1;
 8018500:	2301      	movs	r3, #1
 8018502:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018504:	7c7a      	ldrb	r2, [r7, #17]
 8018506:	4972      	ldr	r1, [pc, #456]	; (80186d0 <etharp_query+0x268>)
 8018508:	4613      	mov	r3, r2
 801850a:	005b      	lsls	r3, r3, #1
 801850c:	4413      	add	r3, r2
 801850e:	00db      	lsls	r3, r3, #3
 8018510:	440b      	add	r3, r1
 8018512:	3314      	adds	r3, #20
 8018514:	2201      	movs	r2, #1
 8018516:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018518:	7c7a      	ldrb	r2, [r7, #17]
 801851a:	496d      	ldr	r1, [pc, #436]	; (80186d0 <etharp_query+0x268>)
 801851c:	4613      	mov	r3, r2
 801851e:	005b      	lsls	r3, r3, #1
 8018520:	4413      	add	r3, r2
 8018522:	00db      	lsls	r3, r3, #3
 8018524:	440b      	add	r3, r1
 8018526:	3308      	adds	r3, #8
 8018528:	68fa      	ldr	r2, [r7, #12]
 801852a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801852c:	7c7a      	ldrb	r2, [r7, #17]
 801852e:	4968      	ldr	r1, [pc, #416]	; (80186d0 <etharp_query+0x268>)
 8018530:	4613      	mov	r3, r2
 8018532:	005b      	lsls	r3, r3, #1
 8018534:	4413      	add	r3, r2
 8018536:	00db      	lsls	r3, r3, #3
 8018538:	440b      	add	r3, r1
 801853a:	3314      	adds	r3, #20
 801853c:	781b      	ldrb	r3, [r3, #0]
 801853e:	2b01      	cmp	r3, #1
 8018540:	d011      	beq.n	8018566 <etharp_query+0xfe>
 8018542:	7c7a      	ldrb	r2, [r7, #17]
 8018544:	4962      	ldr	r1, [pc, #392]	; (80186d0 <etharp_query+0x268>)
 8018546:	4613      	mov	r3, r2
 8018548:	005b      	lsls	r3, r3, #1
 801854a:	4413      	add	r3, r2
 801854c:	00db      	lsls	r3, r3, #3
 801854e:	440b      	add	r3, r1
 8018550:	3314      	adds	r3, #20
 8018552:	781b      	ldrb	r3, [r3, #0]
 8018554:	2b01      	cmp	r3, #1
 8018556:	d806      	bhi.n	8018566 <etharp_query+0xfe>
 8018558:	4b5a      	ldr	r3, [pc, #360]	; (80186c4 <etharp_query+0x25c>)
 801855a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801855e:	495d      	ldr	r1, [pc, #372]	; (80186d4 <etharp_query+0x26c>)
 8018560:	485a      	ldr	r0, [pc, #360]	; (80186cc <etharp_query+0x264>)
 8018562:	f002 fd97 	bl	801b094 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018566:	6a3b      	ldr	r3, [r7, #32]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d102      	bne.n	8018572 <etharp_query+0x10a>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2b00      	cmp	r3, #0
 8018570:	d10c      	bne.n	801858c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018572:	68b9      	ldr	r1, [r7, #8]
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	f000 f963 	bl	8018840 <etharp_request>
 801857a:	4603      	mov	r3, r0
 801857c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d102      	bne.n	801858c <etharp_query+0x124>
      return result;
 8018586:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801858a:	e096      	b.n	80186ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d106      	bne.n	80185a0 <etharp_query+0x138>
 8018592:	4b4c      	ldr	r3, [pc, #304]	; (80186c4 <etharp_query+0x25c>)
 8018594:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018598:	494f      	ldr	r1, [pc, #316]	; (80186d8 <etharp_query+0x270>)
 801859a:	484c      	ldr	r0, [pc, #304]	; (80186cc <etharp_query+0x264>)
 801859c:	f002 fd7a 	bl	801b094 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80185a0:	7c7a      	ldrb	r2, [r7, #17]
 80185a2:	494b      	ldr	r1, [pc, #300]	; (80186d0 <etharp_query+0x268>)
 80185a4:	4613      	mov	r3, r2
 80185a6:	005b      	lsls	r3, r3, #1
 80185a8:	4413      	add	r3, r2
 80185aa:	00db      	lsls	r3, r3, #3
 80185ac:	440b      	add	r3, r1
 80185ae:	3314      	adds	r3, #20
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d917      	bls.n	80185e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80185b6:	4a49      	ldr	r2, [pc, #292]	; (80186dc <etharp_query+0x274>)
 80185b8:	7c7b      	ldrb	r3, [r7, #17]
 80185ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80185bc:	7c7a      	ldrb	r2, [r7, #17]
 80185be:	4613      	mov	r3, r2
 80185c0:	005b      	lsls	r3, r3, #1
 80185c2:	4413      	add	r3, r2
 80185c4:	00db      	lsls	r3, r3, #3
 80185c6:	3308      	adds	r3, #8
 80185c8:	4a41      	ldr	r2, [pc, #260]	; (80186d0 <etharp_query+0x268>)
 80185ca:	4413      	add	r3, r2
 80185cc:	3304      	adds	r3, #4
 80185ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80185d2:	9200      	str	r2, [sp, #0]
 80185d4:	697a      	ldr	r2, [r7, #20]
 80185d6:	6879      	ldr	r1, [r7, #4]
 80185d8:	68f8      	ldr	r0, [r7, #12]
 80185da:	f001 fd49 	bl	801a070 <ethernet_output>
 80185de:	4603      	mov	r3, r0
 80185e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185e4:	e067      	b.n	80186b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80185e6:	7c7a      	ldrb	r2, [r7, #17]
 80185e8:	4939      	ldr	r1, [pc, #228]	; (80186d0 <etharp_query+0x268>)
 80185ea:	4613      	mov	r3, r2
 80185ec:	005b      	lsls	r3, r3, #1
 80185ee:	4413      	add	r3, r2
 80185f0:	00db      	lsls	r3, r3, #3
 80185f2:	440b      	add	r3, r1
 80185f4:	3314      	adds	r3, #20
 80185f6:	781b      	ldrb	r3, [r3, #0]
 80185f8:	2b01      	cmp	r3, #1
 80185fa:	d15c      	bne.n	80186b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80185fc:	2300      	movs	r3, #0
 80185fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018604:	e01c      	b.n	8018640 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018606:	69fb      	ldr	r3, [r7, #28]
 8018608:	895a      	ldrh	r2, [r3, #10]
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	891b      	ldrh	r3, [r3, #8]
 801860e:	429a      	cmp	r2, r3
 8018610:	d10a      	bne.n	8018628 <etharp_query+0x1c0>
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d006      	beq.n	8018628 <etharp_query+0x1c0>
 801861a:	4b2a      	ldr	r3, [pc, #168]	; (80186c4 <etharp_query+0x25c>)
 801861c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018620:	492f      	ldr	r1, [pc, #188]	; (80186e0 <etharp_query+0x278>)
 8018622:	482a      	ldr	r0, [pc, #168]	; (80186cc <etharp_query+0x264>)
 8018624:	f002 fd36 	bl	801b094 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	7b1b      	ldrb	r3, [r3, #12]
 801862c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018630:	2b00      	cmp	r3, #0
 8018632:	d002      	beq.n	801863a <etharp_query+0x1d2>
        copy_needed = 1;
 8018634:	2301      	movs	r3, #1
 8018636:	61bb      	str	r3, [r7, #24]
        break;
 8018638:	e005      	b.n	8018646 <etharp_query+0x1de>
      }
      p = p->next;
 801863a:	69fb      	ldr	r3, [r7, #28]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018640:	69fb      	ldr	r3, [r7, #28]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d1df      	bne.n	8018606 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018646:	69bb      	ldr	r3, [r7, #24]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d007      	beq.n	801865c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801864c:	687a      	ldr	r2, [r7, #4]
 801864e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018652:	200e      	movs	r0, #14
 8018654:	f7f7 f97c 	bl	800f950 <pbuf_clone>
 8018658:	61f8      	str	r0, [r7, #28]
 801865a:	e004      	b.n	8018666 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018660:	69f8      	ldr	r0, [r7, #28]
 8018662:	f7f6 ff67 	bl	800f534 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018666:	69fb      	ldr	r3, [r7, #28]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d021      	beq.n	80186b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801866c:	7c7a      	ldrb	r2, [r7, #17]
 801866e:	4918      	ldr	r1, [pc, #96]	; (80186d0 <etharp_query+0x268>)
 8018670:	4613      	mov	r3, r2
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	4413      	add	r3, r2
 8018676:	00db      	lsls	r3, r3, #3
 8018678:	440b      	add	r3, r1
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d00a      	beq.n	8018696 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018680:	7c7a      	ldrb	r2, [r7, #17]
 8018682:	4913      	ldr	r1, [pc, #76]	; (80186d0 <etharp_query+0x268>)
 8018684:	4613      	mov	r3, r2
 8018686:	005b      	lsls	r3, r3, #1
 8018688:	4413      	add	r3, r2
 801868a:	00db      	lsls	r3, r3, #3
 801868c:	440b      	add	r3, r1
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	4618      	mov	r0, r3
 8018692:	f7f6 fea9 	bl	800f3e8 <pbuf_free>
      }
      arp_table[i].q = p;
 8018696:	7c7a      	ldrb	r2, [r7, #17]
 8018698:	490d      	ldr	r1, [pc, #52]	; (80186d0 <etharp_query+0x268>)
 801869a:	4613      	mov	r3, r2
 801869c:	005b      	lsls	r3, r3, #1
 801869e:	4413      	add	r3, r2
 80186a0:	00db      	lsls	r3, r3, #3
 80186a2:	440b      	add	r3, r1
 80186a4:	69fa      	ldr	r2, [r7, #28]
 80186a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80186a8:	2300      	movs	r3, #0
 80186aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186ae:	e002      	b.n	80186b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80186b0:	23ff      	movs	r3, #255	; 0xff
 80186b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80186b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80186ba:	4618      	mov	r0, r3
 80186bc:	3728      	adds	r7, #40	; 0x28
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	bf00      	nop
 80186c4:	08020348 	.word	0x08020348
 80186c8:	080204f4 	.word	0x080204f4
 80186cc:	080203c0 	.word	0x080203c0
 80186d0:	20013e08 	.word	0x20013e08
 80186d4:	08020504 	.word	0x08020504
 80186d8:	080204e8 	.word	0x080204e8
 80186dc:	20013ef8 	.word	0x20013ef8
 80186e0:	0802052c 	.word	0x0802052c

080186e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b08a      	sub	sp, #40	; 0x28
 80186e8:	af02      	add	r7, sp, #8
 80186ea:	60f8      	str	r0, [r7, #12]
 80186ec:	60b9      	str	r1, [r7, #8]
 80186ee:	607a      	str	r2, [r7, #4]
 80186f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80186f2:	2300      	movs	r3, #0
 80186f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80186f6:	68fb      	ldr	r3, [r7, #12]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d106      	bne.n	801870a <etharp_raw+0x26>
 80186fc:	4b3a      	ldr	r3, [pc, #232]	; (80187e8 <etharp_raw+0x104>)
 80186fe:	f240 4257 	movw	r2, #1111	; 0x457
 8018702:	493a      	ldr	r1, [pc, #232]	; (80187ec <etharp_raw+0x108>)
 8018704:	483a      	ldr	r0, [pc, #232]	; (80187f0 <etharp_raw+0x10c>)
 8018706:	f002 fcc5 	bl	801b094 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801870a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801870e:	211c      	movs	r1, #28
 8018710:	200e      	movs	r0, #14
 8018712:	f7f6 fb81 	bl	800ee18 <pbuf_alloc>
 8018716:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018718:	69bb      	ldr	r3, [r7, #24]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d102      	bne.n	8018724 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801871e:	f04f 33ff 	mov.w	r3, #4294967295
 8018722:	e05d      	b.n	80187e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018724:	69bb      	ldr	r3, [r7, #24]
 8018726:	895b      	ldrh	r3, [r3, #10]
 8018728:	2b1b      	cmp	r3, #27
 801872a:	d806      	bhi.n	801873a <etharp_raw+0x56>
 801872c:	4b2e      	ldr	r3, [pc, #184]	; (80187e8 <etharp_raw+0x104>)
 801872e:	f240 4262 	movw	r2, #1122	; 0x462
 8018732:	4930      	ldr	r1, [pc, #192]	; (80187f4 <etharp_raw+0x110>)
 8018734:	482e      	ldr	r0, [pc, #184]	; (80187f0 <etharp_raw+0x10c>)
 8018736:	f002 fcad 	bl	801b094 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801873a:	69bb      	ldr	r3, [r7, #24]
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018740:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018742:	4618      	mov	r0, r3
 8018744:	f7f5 f92e 	bl	800d9a4 <lwip_htons>
 8018748:	4603      	mov	r3, r0
 801874a:	461a      	mov	r2, r3
 801874c:	697b      	ldr	r3, [r7, #20]
 801874e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018756:	2b06      	cmp	r3, #6
 8018758:	d006      	beq.n	8018768 <etharp_raw+0x84>
 801875a:	4b23      	ldr	r3, [pc, #140]	; (80187e8 <etharp_raw+0x104>)
 801875c:	f240 4269 	movw	r2, #1129	; 0x469
 8018760:	4925      	ldr	r1, [pc, #148]	; (80187f8 <etharp_raw+0x114>)
 8018762:	4823      	ldr	r0, [pc, #140]	; (80187f0 <etharp_raw+0x10c>)
 8018764:	f002 fc96 	bl	801b094 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	3308      	adds	r3, #8
 801876c:	2206      	movs	r2, #6
 801876e:	6839      	ldr	r1, [r7, #0]
 8018770:	4618      	mov	r0, r3
 8018772:	f002 feae 	bl	801b4d2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	3312      	adds	r3, #18
 801877a:	2206      	movs	r2, #6
 801877c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801877e:	4618      	mov	r0, r3
 8018780:	f002 fea7 	bl	801b4d2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	330e      	adds	r3, #14
 8018788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801878a:	6812      	ldr	r2, [r2, #0]
 801878c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801878e:	697b      	ldr	r3, [r7, #20]
 8018790:	3318      	adds	r3, #24
 8018792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018794:	6812      	ldr	r2, [r2, #0]
 8018796:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018798:	697b      	ldr	r3, [r7, #20]
 801879a:	2200      	movs	r2, #0
 801879c:	701a      	strb	r2, [r3, #0]
 801879e:	2200      	movs	r2, #0
 80187a0:	f042 0201 	orr.w	r2, r2, #1
 80187a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80187a6:	697b      	ldr	r3, [r7, #20]
 80187a8:	2200      	movs	r2, #0
 80187aa:	f042 0208 	orr.w	r2, r2, #8
 80187ae:	709a      	strb	r2, [r3, #2]
 80187b0:	2200      	movs	r2, #0
 80187b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80187b4:	697b      	ldr	r3, [r7, #20]
 80187b6:	2206      	movs	r2, #6
 80187b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	2204      	movs	r2, #4
 80187be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80187c0:	f640 0306 	movw	r3, #2054	; 0x806
 80187c4:	9300      	str	r3, [sp, #0]
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	68ba      	ldr	r2, [r7, #8]
 80187ca:	69b9      	ldr	r1, [r7, #24]
 80187cc:	68f8      	ldr	r0, [r7, #12]
 80187ce:	f001 fc4f 	bl	801a070 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80187d2:	69b8      	ldr	r0, [r7, #24]
 80187d4:	f7f6 fe08 	bl	800f3e8 <pbuf_free>
  p = NULL;
 80187d8:	2300      	movs	r3, #0
 80187da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80187dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	3720      	adds	r7, #32
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}
 80187e8:	08020348 	.word	0x08020348
 80187ec:	08020498 	.word	0x08020498
 80187f0:	080203c0 	.word	0x080203c0
 80187f4:	08020548 	.word	0x08020548
 80187f8:	0802057c 	.word	0x0802057c

080187fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b088      	sub	sp, #32
 8018800:	af04      	add	r7, sp, #16
 8018802:	60f8      	str	r0, [r7, #12]
 8018804:	60b9      	str	r1, [r7, #8]
 8018806:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018818:	2201      	movs	r2, #1
 801881a:	9203      	str	r2, [sp, #12]
 801881c:	68ba      	ldr	r2, [r7, #8]
 801881e:	9202      	str	r2, [sp, #8]
 8018820:	4a06      	ldr	r2, [pc, #24]	; (801883c <etharp_request_dst+0x40>)
 8018822:	9201      	str	r2, [sp, #4]
 8018824:	9300      	str	r3, [sp, #0]
 8018826:	4603      	mov	r3, r0
 8018828:	687a      	ldr	r2, [r7, #4]
 801882a:	68f8      	ldr	r0, [r7, #12]
 801882c:	f7ff ff5a 	bl	80186e4 <etharp_raw>
 8018830:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018832:	4618      	mov	r0, r3
 8018834:	3710      	adds	r7, #16
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
 801883a:	bf00      	nop
 801883c:	0806c810 	.word	0x0806c810

08018840 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801884a:	4a05      	ldr	r2, [pc, #20]	; (8018860 <etharp_request+0x20>)
 801884c:	6839      	ldr	r1, [r7, #0]
 801884e:	6878      	ldr	r0, [r7, #4]
 8018850:	f7ff ffd4 	bl	80187fc <etharp_request_dst>
 8018854:	4603      	mov	r3, r0
}
 8018856:	4618      	mov	r0, r3
 8018858:	3708      	adds	r7, #8
 801885a:	46bd      	mov	sp, r7
 801885c:	bd80      	pop	{r7, pc}
 801885e:	bf00      	nop
 8018860:	0806c808 	.word	0x0806c808

08018864 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b08e      	sub	sp, #56	; 0x38
 8018868:	af04      	add	r7, sp, #16
 801886a:	6078      	str	r0, [r7, #4]
 801886c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801886e:	4b8e      	ldr	r3, [pc, #568]	; (8018aa8 <icmp_input+0x244>)
 8018870:	689b      	ldr	r3, [r3, #8]
 8018872:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018876:	781b      	ldrb	r3, [r3, #0]
 8018878:	f003 030f 	and.w	r3, r3, #15
 801887c:	b2db      	uxtb	r3, r3
 801887e:	009b      	lsls	r3, r3, #2
 8018880:	b2db      	uxtb	r3, r3
 8018882:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018886:	2b13      	cmp	r3, #19
 8018888:	f240 80f6 	bls.w	8018a78 <icmp_input+0x214>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	895b      	ldrh	r3, [r3, #10]
 8018890:	2b03      	cmp	r3, #3
 8018892:	f240 80f3 	bls.w	8018a7c <icmp_input+0x218>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	781b      	ldrb	r3, [r3, #0]
 801889c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	685b      	ldr	r3, [r3, #4]
 80188a4:	785b      	ldrb	r3, [r3, #1]
 80188a6:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80188aa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	f000 80db 	beq.w	8018a6a <icmp_input+0x206>
 80188b4:	2b08      	cmp	r3, #8
 80188b6:	f040 80db 	bne.w	8018a70 <icmp_input+0x20c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80188ba:	4b7c      	ldr	r3, [pc, #496]	; (8018aac <icmp_input+0x248>)
 80188bc:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80188be:	4b7a      	ldr	r3, [pc, #488]	; (8018aa8 <icmp_input+0x244>)
 80188c0:	695b      	ldr	r3, [r3, #20]
 80188c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188c6:	2be0      	cmp	r3, #224	; 0xe0
 80188c8:	f000 80df 	beq.w	8018a8a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80188cc:	4b76      	ldr	r3, [pc, #472]	; (8018aa8 <icmp_input+0x244>)
 80188ce:	695b      	ldr	r3, [r3, #20]
 80188d0:	4a75      	ldr	r2, [pc, #468]	; (8018aa8 <icmp_input+0x244>)
 80188d2:	6812      	ldr	r2, [r2, #0]
 80188d4:	4611      	mov	r1, r2
 80188d6:	4618      	mov	r0, r3
 80188d8:	f000 fcac 	bl	8019234 <ip4_addr_isbroadcast_u32>
 80188dc:	4603      	mov	r3, r0
 80188de:	2b00      	cmp	r3, #0
 80188e0:	f040 80d5 	bne.w	8018a8e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	891b      	ldrh	r3, [r3, #8]
 80188e8:	2b07      	cmp	r3, #7
 80188ea:	f240 80c9 	bls.w	8018a80 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80188ee:	6878      	ldr	r0, [r7, #4]
 80188f0:	f7f5 f9b2 	bl	800dc58 <inet_chksum_pbuf>
 80188f4:	4603      	mov	r3, r0
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d003      	beq.n	8018902 <icmp_input+0x9e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80188fa:	6878      	ldr	r0, [r7, #4]
 80188fc:	f7f6 fd74 	bl	800f3e8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8018900:	e0ce      	b.n	8018aa0 <icmp_input+0x23c>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018904:	330e      	adds	r3, #14
 8018906:	4619      	mov	r1, r3
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f7f6 fcd7 	bl	800f2bc <pbuf_add_header>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d04b      	beq.n	80189ac <icmp_input+0x148>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	891a      	ldrh	r2, [r3, #8]
 8018918:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801891a:	4413      	add	r3, r2
 801891c:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	891b      	ldrh	r3, [r3, #8]
 8018922:	8b7a      	ldrh	r2, [r7, #26]
 8018924:	429a      	cmp	r2, r3
 8018926:	f0c0 80b4 	bcc.w	8018a92 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801892a:	8b7b      	ldrh	r3, [r7, #26]
 801892c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018930:	4619      	mov	r1, r3
 8018932:	200e      	movs	r0, #14
 8018934:	f7f6 fa70 	bl	800ee18 <pbuf_alloc>
 8018938:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801893a:	697b      	ldr	r3, [r7, #20]
 801893c:	2b00      	cmp	r3, #0
 801893e:	f000 80aa 	beq.w	8018a96 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018942:	697b      	ldr	r3, [r7, #20]
 8018944:	895b      	ldrh	r3, [r3, #10]
 8018946:	461a      	mov	r2, r3
 8018948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801894a:	3308      	adds	r3, #8
 801894c:	429a      	cmp	r2, r3
 801894e:	d203      	bcs.n	8018958 <icmp_input+0xf4>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018950:	6978      	ldr	r0, [r7, #20]
 8018952:	f7f6 fd49 	bl	800f3e8 <pbuf_free>
          goto icmperr;
 8018956:	e09f      	b.n	8018a98 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018958:	697b      	ldr	r3, [r7, #20]
 801895a:	685b      	ldr	r3, [r3, #4]
 801895c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801895e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018960:	4618      	mov	r0, r3
 8018962:	f002 fdb6 	bl	801b4d2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018966:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018968:	4619      	mov	r1, r3
 801896a:	6978      	ldr	r0, [r7, #20]
 801896c:	f7f6 fcb6 	bl	800f2dc <pbuf_remove_header>
 8018970:	4603      	mov	r3, r0
 8018972:	2b00      	cmp	r3, #0
 8018974:	d009      	beq.n	801898a <icmp_input+0x126>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018976:	4b4e      	ldr	r3, [pc, #312]	; (8018ab0 <icmp_input+0x24c>)
 8018978:	22b6      	movs	r2, #182	; 0xb6
 801897a:	494e      	ldr	r1, [pc, #312]	; (8018ab4 <icmp_input+0x250>)
 801897c:	484e      	ldr	r0, [pc, #312]	; (8018ab8 <icmp_input+0x254>)
 801897e:	f002 fb89 	bl	801b094 <iprintf>
          pbuf_free(r);
 8018982:	6978      	ldr	r0, [r7, #20]
 8018984:	f7f6 fd30 	bl	800f3e8 <pbuf_free>
          goto icmperr;
 8018988:	e086      	b.n	8018a98 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801898a:	6879      	ldr	r1, [r7, #4]
 801898c:	6978      	ldr	r0, [r7, #20]
 801898e:	f7f6 fe5f 	bl	800f650 <pbuf_copy>
 8018992:	4603      	mov	r3, r0
 8018994:	2b00      	cmp	r3, #0
 8018996:	d003      	beq.n	80189a0 <icmp_input+0x13c>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8018998:	6978      	ldr	r0, [r7, #20]
 801899a:	f7f6 fd25 	bl	800f3e8 <pbuf_free>
          goto icmperr;
 801899e:	e07b      	b.n	8018a98 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f7f6 fd21 	bl	800f3e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80189a6:	697b      	ldr	r3, [r7, #20]
 80189a8:	607b      	str	r3, [r7, #4]
 80189aa:	e00f      	b.n	80189cc <icmp_input+0x168>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80189ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189ae:	330e      	adds	r3, #14
 80189b0:	4619      	mov	r1, r3
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f7f6 fc92 	bl	800f2dc <pbuf_remove_header>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d006      	beq.n	80189cc <icmp_input+0x168>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80189be:	4b3c      	ldr	r3, [pc, #240]	; (8018ab0 <icmp_input+0x24c>)
 80189c0:	22c7      	movs	r2, #199	; 0xc7
 80189c2:	493e      	ldr	r1, [pc, #248]	; (8018abc <icmp_input+0x258>)
 80189c4:	483c      	ldr	r0, [pc, #240]	; (8018ab8 <icmp_input+0x254>)
 80189c6:	f002 fb65 	bl	801b094 <iprintf>
          goto icmperr;
 80189ca:	e065      	b.n	8018a98 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	685b      	ldr	r3, [r3, #4]
 80189d0:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80189d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189d4:	4619      	mov	r1, r3
 80189d6:	6878      	ldr	r0, [r7, #4]
 80189d8:	f7f6 fc70 	bl	800f2bc <pbuf_add_header>
 80189dc:	4603      	mov	r3, r0
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d145      	bne.n	8018a6e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	685b      	ldr	r3, [r3, #4]
 80189e6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80189e8:	69fb      	ldr	r3, [r7, #28]
 80189ea:	681a      	ldr	r2, [r3, #0]
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80189f0:	4b2d      	ldr	r3, [pc, #180]	; (8018aa8 <icmp_input+0x244>)
 80189f2:	691a      	ldr	r2, [r3, #16]
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80189f8:	693b      	ldr	r3, [r7, #16]
 80189fa:	2200      	movs	r2, #0
 80189fc:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80189fe:	693b      	ldr	r3, [r7, #16]
 8018a00:	885b      	ldrh	r3, [r3, #2]
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018a08:	4293      	cmp	r3, r2
 8018a0a:	d907      	bls.n	8018a1c <icmp_input+0x1b8>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	885b      	ldrh	r3, [r3, #2]
 8018a10:	b29b      	uxth	r3, r3
 8018a12:	3309      	adds	r3, #9
 8018a14:	b29a      	uxth	r2, r3
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	805a      	strh	r2, [r3, #2]
 8018a1a:	e006      	b.n	8018a2a <icmp_input+0x1c6>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018a1c:	693b      	ldr	r3, [r7, #16]
 8018a1e:	885b      	ldrh	r3, [r3, #2]
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	3308      	adds	r3, #8
 8018a24:	b29a      	uxth	r2, r3
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	22ff      	movs	r2, #255	; 0xff
 8018a2e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	2200      	movs	r2, #0
 8018a34:	729a      	strb	r2, [r3, #10]
 8018a36:	2200      	movs	r2, #0
 8018a38:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8018a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	68f8      	ldr	r0, [r7, #12]
 8018a40:	f7f5 f8f8 	bl	800dc34 <inet_chksum>
 8018a44:	4603      	mov	r3, r0
 8018a46:	461a      	mov	r2, r3
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018a4c:	683b      	ldr	r3, [r7, #0]
 8018a4e:	9302      	str	r3, [sp, #8]
 8018a50:	2301      	movs	r3, #1
 8018a52:	9301      	str	r3, [sp, #4]
 8018a54:	2300      	movs	r3, #0
 8018a56:	9300      	str	r3, [sp, #0]
 8018a58:	23ff      	movs	r3, #255	; 0xff
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	69f9      	ldr	r1, [r7, #28]
 8018a5e:	6878      	ldr	r0, [r7, #4]
 8018a60:	f000 faaa 	bl	8018fb8 <ip4_output_if>
 8018a64:	4603      	mov	r3, r0
 8018a66:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018a68:	e001      	b.n	8018a6e <icmp_input+0x20a>
      break;
 8018a6a:	bf00      	nop
 8018a6c:	e000      	b.n	8018a70 <icmp_input+0x20c>
      break;
 8018a6e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018a70:	6878      	ldr	r0, [r7, #4]
 8018a72:	f7f6 fcb9 	bl	800f3e8 <pbuf_free>
  return;
 8018a76:	e013      	b.n	8018aa0 <icmp_input+0x23c>
    goto lenerr;
 8018a78:	bf00      	nop
 8018a7a:	e002      	b.n	8018a82 <icmp_input+0x21e>
    goto lenerr;
 8018a7c:	bf00      	nop
 8018a7e:	e000      	b.n	8018a82 <icmp_input+0x21e>
        goto lenerr;
 8018a80:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018a82:	6878      	ldr	r0, [r7, #4]
 8018a84:	f7f6 fcb0 	bl	800f3e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a88:	e00a      	b.n	8018aa0 <icmp_input+0x23c>
        goto icmperr;
 8018a8a:	bf00      	nop
 8018a8c:	e004      	b.n	8018a98 <icmp_input+0x234>
        goto icmperr;
 8018a8e:	bf00      	nop
 8018a90:	e002      	b.n	8018a98 <icmp_input+0x234>
          goto icmperr;
 8018a92:	bf00      	nop
 8018a94:	e000      	b.n	8018a98 <icmp_input+0x234>
          goto icmperr;
 8018a96:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f7f6 fca5 	bl	800f3e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a9e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018aa0:	3728      	adds	r7, #40	; 0x28
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	bd80      	pop	{r7, pc}
 8018aa6:	bf00      	nop
 8018aa8:	2000a2fc 	.word	0x2000a2fc
 8018aac:	2000a310 	.word	0x2000a310
 8018ab0:	080205c0 	.word	0x080205c0
 8018ab4:	080205f8 	.word	0x080205f8
 8018ab8:	08020630 	.word	0x08020630
 8018abc:	08020658 	.word	0x08020658

08018ac0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	460b      	mov	r3, r1
 8018aca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018acc:	78fb      	ldrb	r3, [r7, #3]
 8018ace:	461a      	mov	r2, r3
 8018ad0:	2103      	movs	r1, #3
 8018ad2:	6878      	ldr	r0, [r7, #4]
 8018ad4:	f000 f814 	bl	8018b00 <icmp_send_response>
}
 8018ad8:	bf00      	nop
 8018ada:	3708      	adds	r7, #8
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}

08018ae0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018ae0:	b580      	push	{r7, lr}
 8018ae2:	b082      	sub	sp, #8
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	6078      	str	r0, [r7, #4]
 8018ae8:	460b      	mov	r3, r1
 8018aea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018aec:	78fb      	ldrb	r3, [r7, #3]
 8018aee:	461a      	mov	r2, r3
 8018af0:	210b      	movs	r1, #11
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f000 f804 	bl	8018b00 <icmp_send_response>
}
 8018af8:	bf00      	nop
 8018afa:	3708      	adds	r7, #8
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}

08018b00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b08c      	sub	sp, #48	; 0x30
 8018b04:	af04      	add	r7, sp, #16
 8018b06:	6078      	str	r0, [r7, #4]
 8018b08:	460b      	mov	r3, r1
 8018b0a:	70fb      	strb	r3, [r7, #3]
 8018b0c:	4613      	mov	r3, r2
 8018b0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018b10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018b14:	2124      	movs	r1, #36	; 0x24
 8018b16:	2022      	movs	r0, #34	; 0x22
 8018b18:	f7f6 f97e 	bl	800ee18 <pbuf_alloc>
 8018b1c:	61b8      	str	r0, [r7, #24]
                 PBUF_RAM);
  if (q == NULL) {
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d056      	beq.n	8018bd2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	895b      	ldrh	r3, [r3, #10]
 8018b28:	2b23      	cmp	r3, #35	; 0x23
 8018b2a:	d806      	bhi.n	8018b3a <icmp_send_response+0x3a>
 8018b2c:	4b2b      	ldr	r3, [pc, #172]	; (8018bdc <icmp_send_response+0xdc>)
 8018b2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018b32:	492b      	ldr	r1, [pc, #172]	; (8018be0 <icmp_send_response+0xe0>)
 8018b34:	482b      	ldr	r0, [pc, #172]	; (8018be4 <icmp_send_response+0xe4>)
 8018b36:	f002 faad 	bl	801b094 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	685b      	ldr	r3, [r3, #4]
 8018b3e:	617b      	str	r3, [r7, #20]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018b40:	69bb      	ldr	r3, [r7, #24]
 8018b42:	685b      	ldr	r3, [r3, #4]
 8018b44:	613b      	str	r3, [r7, #16]
  icmphdr->type = type;
 8018b46:	693b      	ldr	r3, [r7, #16]
 8018b48:	78fa      	ldrb	r2, [r7, #3]
 8018b4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018b4c:	693b      	ldr	r3, [r7, #16]
 8018b4e:	78ba      	ldrb	r2, [r7, #2]
 8018b50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018b52:	693b      	ldr	r3, [r7, #16]
 8018b54:	2200      	movs	r2, #0
 8018b56:	711a      	strb	r2, [r3, #4]
 8018b58:	2200      	movs	r2, #0
 8018b5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018b5c:	693b      	ldr	r3, [r7, #16]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	719a      	strb	r2, [r3, #6]
 8018b62:	2200      	movs	r2, #0
 8018b64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018b66:	69bb      	ldr	r3, [r7, #24]
 8018b68:	685b      	ldr	r3, [r3, #4]
 8018b6a:	f103 0008 	add.w	r0, r3, #8
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	685b      	ldr	r3, [r3, #4]
 8018b72:	221c      	movs	r2, #28
 8018b74:	4619      	mov	r1, r3
 8018b76:	f002 fcac 	bl	801b4d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	68db      	ldr	r3, [r3, #12]
 8018b7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018b80:	f107 030c 	add.w	r3, r7, #12
 8018b84:	4618      	mov	r0, r3
 8018b86:	f000 f82f 	bl	8018be8 <ip4_route>
 8018b8a:	61f8      	str	r0, [r7, #28]
#endif
  if (netif != NULL) {
 8018b8c:	69fb      	ldr	r3, [r7, #28]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d01b      	beq.n	8018bca <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	2200      	movs	r2, #0
 8018b96:	709a      	strb	r2, [r3, #2]
 8018b98:	2200      	movs	r2, #0
 8018b9a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	895b      	ldrh	r3, [r3, #10]
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	6938      	ldr	r0, [r7, #16]
 8018ba4:	f7f5 f846 	bl	800dc34 <inet_chksum>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	461a      	mov	r2, r3
 8018bac:	693b      	ldr	r3, [r7, #16]
 8018bae:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018bb0:	f107 020c 	add.w	r2, r7, #12
 8018bb4:	69fb      	ldr	r3, [r7, #28]
 8018bb6:	9302      	str	r3, [sp, #8]
 8018bb8:	2301      	movs	r3, #1
 8018bba:	9301      	str	r3, [sp, #4]
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	9300      	str	r3, [sp, #0]
 8018bc0:	23ff      	movs	r3, #255	; 0xff
 8018bc2:	2100      	movs	r1, #0
 8018bc4:	69b8      	ldr	r0, [r7, #24]
 8018bc6:	f000 f9f7 	bl	8018fb8 <ip4_output_if>
  }
  pbuf_free(q);
 8018bca:	69b8      	ldr	r0, [r7, #24]
 8018bcc:	f7f6 fc0c 	bl	800f3e8 <pbuf_free>
 8018bd0:	e000      	b.n	8018bd4 <icmp_send_response+0xd4>
    return;
 8018bd2:	bf00      	nop
}
 8018bd4:	3720      	adds	r7, #32
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	bd80      	pop	{r7, pc}
 8018bda:	bf00      	nop
 8018bdc:	080205c0 	.word	0x080205c0
 8018be0:	0802068c 	.word	0x0802068c
 8018be4:	08020630 	.word	0x08020630

08018be8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018be8:	b480      	push	{r7}
 8018bea:	b085      	sub	sp, #20
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018bf0:	4b33      	ldr	r3, [pc, #204]	; (8018cc0 <ip4_route+0xd8>)
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	60fb      	str	r3, [r7, #12]
 8018bf6:	e036      	b.n	8018c66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bfe:	f003 0301 	and.w	r3, r3, #1
 8018c02:	b2db      	uxtb	r3, r3
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d02b      	beq.n	8018c60 <ip4_route+0x78>
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c0e:	089b      	lsrs	r3, r3, #2
 8018c10:	f003 0301 	and.w	r3, r3, #1
 8018c14:	b2db      	uxtb	r3, r3
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d022      	beq.n	8018c60 <ip4_route+0x78>
 8018c1a:	68fb      	ldr	r3, [r7, #12]
 8018c1c:	3304      	adds	r3, #4
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d01d      	beq.n	8018c60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681a      	ldr	r2, [r3, #0]
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	3304      	adds	r3, #4
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	405a      	eors	r2, r3
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	3308      	adds	r3, #8
 8018c34:	681b      	ldr	r3, [r3, #0]
 8018c36:	4013      	ands	r3, r2
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d101      	bne.n	8018c40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	e038      	b.n	8018cb2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c46:	f003 0302 	and.w	r3, r3, #2
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d108      	bne.n	8018c60 <ip4_route+0x78>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	330c      	adds	r3, #12
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	d101      	bne.n	8018c60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	e028      	b.n	8018cb2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	60fb      	str	r3, [r7, #12]
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d1c5      	bne.n	8018bf8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c6c:	4b15      	ldr	r3, [pc, #84]	; (8018cc4 <ip4_route+0xdc>)
 8018c6e:	681b      	ldr	r3, [r3, #0]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d01a      	beq.n	8018caa <ip4_route+0xc2>
 8018c74:	4b13      	ldr	r3, [pc, #76]	; (8018cc4 <ip4_route+0xdc>)
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c7c:	f003 0301 	and.w	r3, r3, #1
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d012      	beq.n	8018caa <ip4_route+0xc2>
 8018c84:	4b0f      	ldr	r3, [pc, #60]	; (8018cc4 <ip4_route+0xdc>)
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c8c:	f003 0304 	and.w	r3, r3, #4
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d00a      	beq.n	8018caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018c94:	4b0b      	ldr	r3, [pc, #44]	; (8018cc4 <ip4_route+0xdc>)
 8018c96:	681b      	ldr	r3, [r3, #0]
 8018c98:	3304      	adds	r3, #4
 8018c9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d004      	beq.n	8018caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8018ca8:	d101      	bne.n	8018cae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018caa:	2300      	movs	r3, #0
 8018cac:	e001      	b.n	8018cb2 <ip4_route+0xca>
  }

  return netif_default;
 8018cae:	4b05      	ldr	r3, [pc, #20]	; (8018cc4 <ip4_route+0xdc>)
 8018cb0:	681b      	ldr	r3, [r3, #0]
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3714      	adds	r7, #20
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbc:	4770      	bx	lr
 8018cbe:	bf00      	nop
 8018cc0:	20013d64 	.word	0x20013d64
 8018cc4:	20013d68 	.word	0x20013d68

08018cc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b082      	sub	sp, #8
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018cd6:	f003 0301 	and.w	r3, r3, #1
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d016      	beq.n	8018d0e <ip4_input_accept+0x46>
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	3304      	adds	r3, #4
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d011      	beq.n	8018d0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018cea:	4b0b      	ldr	r3, [pc, #44]	; (8018d18 <ip4_input_accept+0x50>)
 8018cec:	695a      	ldr	r2, [r3, #20]
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	3304      	adds	r3, #4
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	d008      	beq.n	8018d0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018cf8:	4b07      	ldr	r3, [pc, #28]	; (8018d18 <ip4_input_accept+0x50>)
 8018cfa:	695b      	ldr	r3, [r3, #20]
 8018cfc:	6879      	ldr	r1, [r7, #4]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f000 fa98 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8018d04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d001      	beq.n	8018d0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	e000      	b.n	8018d10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018d0e:	2300      	movs	r3, #0
}
 8018d10:	4618      	mov	r0, r3
 8018d12:	3708      	adds	r7, #8
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	2000a2fc 	.word	0x2000a2fc

08018d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8018d26:	2301      	movs	r3, #1
 8018d28:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 8018d30:	693b      	ldr	r3, [r7, #16]
 8018d32:	781b      	ldrb	r3, [r3, #0]
 8018d34:	091b      	lsrs	r3, r3, #4
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	2b04      	cmp	r3, #4
 8018d3a:	d004      	beq.n	8018d46 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018d3c:	6878      	ldr	r0, [r7, #4]
 8018d3e:	f7f6 fb53 	bl	800f3e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018d42:	2300      	movs	r3, #0
 8018d44:	e130      	b.n	8018fa8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	f003 030f 	and.w	r3, r3, #15
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	009b      	lsls	r3, r3, #2
 8018d52:	b2db      	uxtb	r3, r3
 8018d54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018d56:	693b      	ldr	r3, [r7, #16]
 8018d58:	885b      	ldrh	r3, [r3, #2]
 8018d5a:	b29b      	uxth	r3, r3
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	f7f4 fe21 	bl	800d9a4 <lwip_htons>
 8018d62:	4603      	mov	r3, r0
 8018d64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	891b      	ldrh	r3, [r3, #8]
 8018d6a:	89ba      	ldrh	r2, [r7, #12]
 8018d6c:	429a      	cmp	r2, r3
 8018d6e:	d204      	bcs.n	8018d7a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018d70:	89bb      	ldrh	r3, [r7, #12]
 8018d72:	4619      	mov	r1, r3
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f7f6 f9b1 	bl	800f0dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	895b      	ldrh	r3, [r3, #10]
 8018d7e:	89fa      	ldrh	r2, [r7, #14]
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d807      	bhi.n	8018d94 <ip4_input+0x78>
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	891b      	ldrh	r3, [r3, #8]
 8018d88:	89ba      	ldrh	r2, [r7, #12]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d802      	bhi.n	8018d94 <ip4_input+0x78>
 8018d8e:	89fb      	ldrh	r3, [r7, #14]
 8018d90:	2b13      	cmp	r3, #19
 8018d92:	d804      	bhi.n	8018d9e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018d94:	6878      	ldr	r0, [r7, #4]
 8018d96:	f7f6 fb27 	bl	800f3e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018d9a:	2300      	movs	r3, #0
 8018d9c:	e104      	b.n	8018fa8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8018d9e:	89fb      	ldrh	r3, [r7, #14]
 8018da0:	4619      	mov	r1, r3
 8018da2:	6938      	ldr	r0, [r7, #16]
 8018da4:	f7f4 ff46 	bl	800dc34 <inet_chksum>
 8018da8:	4603      	mov	r3, r0
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d004      	beq.n	8018db8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8018dae:	6878      	ldr	r0, [r7, #4]
 8018db0:	f7f6 fb1a 	bl	800f3e8 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8018db4:	2300      	movs	r3, #0
 8018db6:	e0f7      	b.n	8018fa8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018db8:	693b      	ldr	r3, [r7, #16]
 8018dba:	691b      	ldr	r3, [r3, #16]
 8018dbc:	4a7c      	ldr	r2, [pc, #496]	; (8018fb0 <ip4_input+0x294>)
 8018dbe:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018dc0:	693b      	ldr	r3, [r7, #16]
 8018dc2:	68db      	ldr	r3, [r3, #12]
 8018dc4:	4a7a      	ldr	r2, [pc, #488]	; (8018fb0 <ip4_input+0x294>)
 8018dc6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018dc8:	4b79      	ldr	r3, [pc, #484]	; (8018fb0 <ip4_input+0x294>)
 8018dca:	695b      	ldr	r3, [r3, #20]
 8018dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018dd0:	2be0      	cmp	r3, #224	; 0xe0
 8018dd2:	d112      	bne.n	8018dfa <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018dda:	f003 0301 	and.w	r3, r3, #1
 8018dde:	b2db      	uxtb	r3, r3
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d007      	beq.n	8018df4 <ip4_input+0xd8>
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	3304      	adds	r3, #4
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d002      	beq.n	8018df4 <ip4_input+0xd8>
      netif = inp;
 8018dee:	683b      	ldr	r3, [r7, #0]
 8018df0:	61fb      	str	r3, [r7, #28]
 8018df2:	e02a      	b.n	8018e4a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018df4:	2300      	movs	r3, #0
 8018df6:	61fb      	str	r3, [r7, #28]
 8018df8:	e027      	b.n	8018e4a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018dfa:	6838      	ldr	r0, [r7, #0]
 8018dfc:	f7ff ff64 	bl	8018cc8 <ip4_input_accept>
 8018e00:	4603      	mov	r3, r0
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d002      	beq.n	8018e0c <ip4_input+0xf0>
      netif = inp;
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	61fb      	str	r3, [r7, #28]
 8018e0a:	e01e      	b.n	8018e4a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	61fb      	str	r3, [r7, #28]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018e10:	4b67      	ldr	r3, [pc, #412]	; (8018fb0 <ip4_input+0x294>)
 8018e12:	695b      	ldr	r3, [r3, #20]
 8018e14:	b2db      	uxtb	r3, r3
 8018e16:	2b7f      	cmp	r3, #127	; 0x7f
 8018e18:	d017      	beq.n	8018e4a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018e1a:	4b66      	ldr	r3, [pc, #408]	; (8018fb4 <ip4_input+0x298>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	61fb      	str	r3, [r7, #28]
 8018e20:	e00e      	b.n	8018e40 <ip4_input+0x124>
          if (netif == inp) {
 8018e22:	69fa      	ldr	r2, [r7, #28]
 8018e24:	683b      	ldr	r3, [r7, #0]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d006      	beq.n	8018e38 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018e2a:	69f8      	ldr	r0, [r7, #28]
 8018e2c:	f7ff ff4c 	bl	8018cc8 <ip4_input_accept>
 8018e30:	4603      	mov	r3, r0
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d108      	bne.n	8018e48 <ip4_input+0x12c>
 8018e36:	e000      	b.n	8018e3a <ip4_input+0x11e>
            continue;
 8018e38:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018e3a:	69fb      	ldr	r3, [r7, #28]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	61fb      	str	r3, [r7, #28]
 8018e40:	69fb      	ldr	r3, [r7, #28]
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d1ed      	bne.n	8018e22 <ip4_input+0x106>
 8018e46:	e000      	b.n	8018e4a <ip4_input+0x12e>
            break;
 8018e48:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d111      	bne.n	8018e74 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	7a5b      	ldrb	r3, [r3, #9]
 8018e54:	2b11      	cmp	r3, #17
 8018e56:	d10d      	bne.n	8018e74 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018e58:	89fb      	ldrh	r3, [r7, #14]
 8018e5a:	693a      	ldr	r2, [r7, #16]
 8018e5c:	4413      	add	r3, r2
 8018e5e:	61bb      	str	r3, [r7, #24]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8018e60:	69bb      	ldr	r3, [r7, #24]
 8018e62:	885b      	ldrh	r3, [r3, #2]
 8018e64:	b29b      	uxth	r3, r3
 8018e66:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018e6a:	d103      	bne.n	8018e74 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	61fb      	str	r3, [r7, #28]
        check_ip_src = 0;
 8018e70:	2300      	movs	r3, #0
 8018e72:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d017      	beq.n	8018eaa <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018e7a:	4b4d      	ldr	r3, [pc, #308]	; (8018fb0 <ip4_input+0x294>)
 8018e7c:	691b      	ldr	r3, [r3, #16]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d013      	beq.n	8018eaa <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e82:	4b4b      	ldr	r3, [pc, #300]	; (8018fb0 <ip4_input+0x294>)
 8018e84:	691b      	ldr	r3, [r3, #16]
 8018e86:	6839      	ldr	r1, [r7, #0]
 8018e88:	4618      	mov	r0, r3
 8018e8a:	f000 f9d3 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8018e8e:	4603      	mov	r3, r0
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d105      	bne.n	8018ea0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018e94:	4b46      	ldr	r3, [pc, #280]	; (8018fb0 <ip4_input+0x294>)
 8018e96:	691b      	ldr	r3, [r3, #16]
 8018e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018e9c:	2be0      	cmp	r3, #224	; 0xe0
 8018e9e:	d104      	bne.n	8018eaa <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f7f6 faa1 	bl	800f3e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	e07e      	b.n	8018fa8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d104      	bne.n	8018eba <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f7f6 fa99 	bl	800f3e8 <pbuf_free>
    return ERR_OK;
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	e076      	b.n	8018fa8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	88db      	ldrh	r3, [r3, #6]
 8018ebe:	b29b      	uxth	r3, r3
 8018ec0:	461a      	mov	r2, r3
 8018ec2:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018ec6:	4013      	ands	r3, r2
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d00b      	beq.n	8018ee4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018ecc:	6878      	ldr	r0, [r7, #4]
 8018ece:	f000 fcf7 	bl	80198c0 <ip4_reass>
 8018ed2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d101      	bne.n	8018ede <ip4_input+0x1c2>
      return ERR_OK;
 8018eda:	2300      	movs	r3, #0
 8018edc:	e064      	b.n	8018fa8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018ee4:	4a32      	ldr	r2, [pc, #200]	; (8018fb0 <ip4_input+0x294>)
 8018ee6:	69fb      	ldr	r3, [r7, #28]
 8018ee8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018eea:	4a31      	ldr	r2, [pc, #196]	; (8018fb0 <ip4_input+0x294>)
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018ef0:	4a2f      	ldr	r2, [pc, #188]	; (8018fb0 <ip4_input+0x294>)
 8018ef2:	693b      	ldr	r3, [r7, #16]
 8018ef4:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	f003 030f 	and.w	r3, r3, #15
 8018efe:	b2db      	uxtb	r3, r3
 8018f00:	009b      	lsls	r3, r3, #2
 8018f02:	b2db      	uxtb	r3, r3
 8018f04:	b29a      	uxth	r2, r3
 8018f06:	4b2a      	ldr	r3, [pc, #168]	; (8018fb0 <ip4_input+0x294>)
 8018f08:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018f0a:	89fb      	ldrh	r3, [r7, #14]
 8018f0c:	4619      	mov	r1, r3
 8018f0e:	6878      	ldr	r0, [r7, #4]
 8018f10:	f7f6 f9e4 	bl	800f2dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	7a5b      	ldrb	r3, [r3, #9]
 8018f18:	2b11      	cmp	r3, #17
 8018f1a:	d006      	beq.n	8018f2a <ip4_input+0x20e>
 8018f1c:	2b11      	cmp	r3, #17
 8018f1e:	dc13      	bgt.n	8018f48 <ip4_input+0x22c>
 8018f20:	2b01      	cmp	r3, #1
 8018f22:	d00c      	beq.n	8018f3e <ip4_input+0x222>
 8018f24:	2b06      	cmp	r3, #6
 8018f26:	d005      	beq.n	8018f34 <ip4_input+0x218>
 8018f28:	e00e      	b.n	8018f48 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018f2a:	6839      	ldr	r1, [r7, #0]
 8018f2c:	6878      	ldr	r0, [r7, #4]
 8018f2e:	f7fc f96d 	bl	801520c <udp_input>
        break;
 8018f32:	e026      	b.n	8018f82 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018f34:	6839      	ldr	r1, [r7, #0]
 8018f36:	6878      	ldr	r0, [r7, #4]
 8018f38:	f7f8 f936 	bl	80111a8 <tcp_input>
        break;
 8018f3c:	e021      	b.n	8018f82 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018f3e:	6839      	ldr	r1, [r7, #0]
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f7ff fc8f 	bl	8018864 <icmp_input>
        break;
 8018f46:	e01c      	b.n	8018f82 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018f48:	4b19      	ldr	r3, [pc, #100]	; (8018fb0 <ip4_input+0x294>)
 8018f4a:	695b      	ldr	r3, [r3, #20]
 8018f4c:	69f9      	ldr	r1, [r7, #28]
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f000 f970 	bl	8019234 <ip4_addr_isbroadcast_u32>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	d10f      	bne.n	8018f7a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018f5a:	4b15      	ldr	r3, [pc, #84]	; (8018fb0 <ip4_input+0x294>)
 8018f5c:	695b      	ldr	r3, [r3, #20]
 8018f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018f62:	2be0      	cmp	r3, #224	; 0xe0
 8018f64:	d009      	beq.n	8018f7a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f6a:	4619      	mov	r1, r3
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f7f6 fa28 	bl	800f3c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018f72:	2102      	movs	r1, #2
 8018f74:	6878      	ldr	r0, [r7, #4]
 8018f76:	f7ff fda3 	bl	8018ac0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018f7a:	6878      	ldr	r0, [r7, #4]
 8018f7c:	f7f6 fa34 	bl	800f3e8 <pbuf_free>
        break;
 8018f80:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018f82:	4b0b      	ldr	r3, [pc, #44]	; (8018fb0 <ip4_input+0x294>)
 8018f84:	2200      	movs	r2, #0
 8018f86:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018f88:	4b09      	ldr	r3, [pc, #36]	; (8018fb0 <ip4_input+0x294>)
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018f8e:	4b08      	ldr	r3, [pc, #32]	; (8018fb0 <ip4_input+0x294>)
 8018f90:	2200      	movs	r2, #0
 8018f92:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018f94:	4b06      	ldr	r3, [pc, #24]	; (8018fb0 <ip4_input+0x294>)
 8018f96:	2200      	movs	r2, #0
 8018f98:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018f9a:	4b05      	ldr	r3, [pc, #20]	; (8018fb0 <ip4_input+0x294>)
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018fa0:	4b03      	ldr	r3, [pc, #12]	; (8018fb0 <ip4_input+0x294>)
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018fa6:	2300      	movs	r3, #0
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	3720      	adds	r7, #32
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	2000a2fc 	.word	0x2000a2fc
 8018fb4:	20013d64 	.word	0x20013d64

08018fb8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b08a      	sub	sp, #40	; 0x28
 8018fbc:	af04      	add	r7, sp, #16
 8018fbe:	60f8      	str	r0, [r7, #12]
 8018fc0:	60b9      	str	r1, [r7, #8]
 8018fc2:	607a      	str	r2, [r7, #4]
 8018fc4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018fc6:	68bb      	ldr	r3, [r7, #8]
 8018fc8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d009      	beq.n	8018fe4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d003      	beq.n	8018fde <ip4_output_if+0x26>
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d102      	bne.n	8018fe4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe0:	3304      	adds	r3, #4
 8018fe2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018fe4:	78fa      	ldrb	r2, [r7, #3]
 8018fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe8:	9302      	str	r3, [sp, #8]
 8018fea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018fee:	9301      	str	r3, [sp, #4]
 8018ff0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018ff4:	9300      	str	r3, [sp, #0]
 8018ff6:	4613      	mov	r3, r2
 8018ff8:	687a      	ldr	r2, [r7, #4]
 8018ffa:	6979      	ldr	r1, [r7, #20]
 8018ffc:	68f8      	ldr	r0, [r7, #12]
 8018ffe:	f000 f805 	bl	801900c <ip4_output_if_src>
 8019002:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019004:	4618      	mov	r0, r3
 8019006:	3718      	adds	r7, #24
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}

0801900c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b088      	sub	sp, #32
 8019010:	af00      	add	r7, sp, #0
 8019012:	60f8      	str	r0, [r7, #12]
 8019014:	60b9      	str	r1, [r7, #8]
 8019016:	607a      	str	r2, [r7, #4]
 8019018:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801901a:	2300      	movs	r3, #0
 801901c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	7b9b      	ldrb	r3, [r3, #14]
 8019022:	2b01      	cmp	r3, #1
 8019024:	d006      	beq.n	8019034 <ip4_output_if_src+0x28>
 8019026:	4b7d      	ldr	r3, [pc, #500]	; (801921c <ip4_output_if_src+0x210>)
 8019028:	f44f 7255 	mov.w	r2, #852	; 0x354
 801902c:	497c      	ldr	r1, [pc, #496]	; (8019220 <ip4_output_if_src+0x214>)
 801902e:	487d      	ldr	r0, [pc, #500]	; (8019224 <ip4_output_if_src+0x218>)
 8019030:	f002 f830 	bl	801b094 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	2b00      	cmp	r3, #0
 8019038:	f000 80c4 	beq.w	80191c4 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 801903c:	2314      	movs	r3, #20
 801903e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019040:	2114      	movs	r1, #20
 8019042:	68f8      	ldr	r0, [r7, #12]
 8019044:	f7f6 f93a 	bl	800f2bc <pbuf_add_header>
 8019048:	4603      	mov	r3, r0
 801904a:	2b00      	cmp	r3, #0
 801904c:	d002      	beq.n	8019054 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801904e:	f06f 0301 	mvn.w	r3, #1
 8019052:	e0df      	b.n	8019214 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019054:	68fb      	ldr	r3, [r7, #12]
 8019056:	685b      	ldr	r3, [r3, #4]
 8019058:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	895b      	ldrh	r3, [r3, #10]
 801905e:	2b13      	cmp	r3, #19
 8019060:	d806      	bhi.n	8019070 <ip4_output_if_src+0x64>
 8019062:	4b6e      	ldr	r3, [pc, #440]	; (801921c <ip4_output_if_src+0x210>)
 8019064:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019068:	496f      	ldr	r1, [pc, #444]	; (8019228 <ip4_output_if_src+0x21c>)
 801906a:	486e      	ldr	r0, [pc, #440]	; (8019224 <ip4_output_if_src+0x218>)
 801906c:	f002 f812 	bl	801b094 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019070:	69bb      	ldr	r3, [r7, #24]
 8019072:	78fa      	ldrb	r2, [r7, #3]
 8019074:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801907c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801907e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019082:	78fb      	ldrb	r3, [r7, #3]
 8019084:	021b      	lsls	r3, r3, #8
 8019086:	4313      	orrs	r3, r2
 8019088:	021b      	lsls	r3, r3, #8
 801908a:	b21a      	sxth	r2, r3
 801908c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8019090:	78fb      	ldrb	r3, [r7, #3]
 8019092:	021b      	lsls	r3, r3, #8
 8019094:	430b      	orrs	r3, r1
 8019096:	121b      	asrs	r3, r3, #8
 8019098:	b21b      	sxth	r3, r3
 801909a:	b2db      	uxtb	r3, r3
 801909c:	b21b      	sxth	r3, r3
 801909e:	4313      	orrs	r3, r2
 80190a0:	b21b      	sxth	r3, r3
 80190a2:	b29b      	uxth	r3, r3
 80190a4:	461a      	mov	r2, r3
 80190a6:	69fb      	ldr	r3, [r7, #28]
 80190a8:	4413      	add	r3, r2
 80190aa:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	681a      	ldr	r2, [r3, #0]
 80190b0:	69bb      	ldr	r3, [r7, #24]
 80190b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80190b4:	69bb      	ldr	r3, [r7, #24]
 80190b6:	691b      	ldr	r3, [r3, #16]
 80190b8:	b29b      	uxth	r3, r3
 80190ba:	69fa      	ldr	r2, [r7, #28]
 80190bc:	4413      	add	r3, r2
 80190be:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80190c0:	69bb      	ldr	r3, [r7, #24]
 80190c2:	691b      	ldr	r3, [r3, #16]
 80190c4:	0c1b      	lsrs	r3, r3, #16
 80190c6:	69fa      	ldr	r2, [r7, #28]
 80190c8:	4413      	add	r3, r2
 80190ca:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80190cc:	8afb      	ldrh	r3, [r7, #22]
 80190ce:	089b      	lsrs	r3, r3, #2
 80190d0:	b29b      	uxth	r3, r3
 80190d2:	b2db      	uxtb	r3, r3
 80190d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190d8:	b2da      	uxtb	r2, r3
 80190da:	69bb      	ldr	r3, [r7, #24]
 80190dc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80190e4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80190e6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80190ea:	69bb      	ldr	r3, [r7, #24]
 80190ec:	781b      	ldrb	r3, [r3, #0]
 80190ee:	021b      	lsls	r3, r3, #8
 80190f0:	4313      	orrs	r3, r2
 80190f2:	021b      	lsls	r3, r3, #8
 80190f4:	b21a      	sxth	r2, r3
 80190f6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80190fa:	69bb      	ldr	r3, [r7, #24]
 80190fc:	781b      	ldrb	r3, [r3, #0]
 80190fe:	021b      	lsls	r3, r3, #8
 8019100:	430b      	orrs	r3, r1
 8019102:	121b      	asrs	r3, r3, #8
 8019104:	b21b      	sxth	r3, r3
 8019106:	b2db      	uxtb	r3, r3
 8019108:	b21b      	sxth	r3, r3
 801910a:	4313      	orrs	r3, r2
 801910c:	b21b      	sxth	r3, r3
 801910e:	b29b      	uxth	r3, r3
 8019110:	461a      	mov	r2, r3
 8019112:	69fb      	ldr	r3, [r7, #28]
 8019114:	4413      	add	r3, r2
 8019116:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	891b      	ldrh	r3, [r3, #8]
 801911c:	4618      	mov	r0, r3
 801911e:	f7f4 fc41 	bl	800d9a4 <lwip_htons>
 8019122:	4603      	mov	r3, r0
 8019124:	461a      	mov	r2, r3
 8019126:	69bb      	ldr	r3, [r7, #24]
 8019128:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801912a:	69bb      	ldr	r3, [r7, #24]
 801912c:	885b      	ldrh	r3, [r3, #2]
 801912e:	b29b      	uxth	r3, r3
 8019130:	461a      	mov	r2, r3
 8019132:	69fb      	ldr	r3, [r7, #28]
 8019134:	4413      	add	r3, r2
 8019136:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019138:	69bb      	ldr	r3, [r7, #24]
 801913a:	2200      	movs	r2, #0
 801913c:	719a      	strb	r2, [r3, #6]
 801913e:	2200      	movs	r2, #0
 8019140:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019142:	4b3a      	ldr	r3, [pc, #232]	; (801922c <ip4_output_if_src+0x220>)
 8019144:	881b      	ldrh	r3, [r3, #0]
 8019146:	4618      	mov	r0, r3
 8019148:	f7f4 fc2c 	bl	800d9a4 <lwip_htons>
 801914c:	4603      	mov	r3, r0
 801914e:	461a      	mov	r2, r3
 8019150:	69bb      	ldr	r3, [r7, #24]
 8019152:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8019154:	69bb      	ldr	r3, [r7, #24]
 8019156:	889b      	ldrh	r3, [r3, #4]
 8019158:	b29b      	uxth	r3, r3
 801915a:	461a      	mov	r2, r3
 801915c:	69fb      	ldr	r3, [r7, #28]
 801915e:	4413      	add	r3, r2
 8019160:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019162:	4b32      	ldr	r3, [pc, #200]	; (801922c <ip4_output_if_src+0x220>)
 8019164:	881b      	ldrh	r3, [r3, #0]
 8019166:	3301      	adds	r3, #1
 8019168:	b29a      	uxth	r2, r3
 801916a:	4b30      	ldr	r3, [pc, #192]	; (801922c <ip4_output_if_src+0x220>)
 801916c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801916e:	68bb      	ldr	r3, [r7, #8]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d104      	bne.n	801917e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019174:	4b2e      	ldr	r3, [pc, #184]	; (8019230 <ip4_output_if_src+0x224>)
 8019176:	681a      	ldr	r2, [r3, #0]
 8019178:	69bb      	ldr	r3, [r7, #24]
 801917a:	60da      	str	r2, [r3, #12]
 801917c:	e003      	b.n	8019186 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801917e:	68bb      	ldr	r3, [r7, #8]
 8019180:	681a      	ldr	r2, [r3, #0]
 8019182:	69bb      	ldr	r3, [r7, #24]
 8019184:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8019186:	69bb      	ldr	r3, [r7, #24]
 8019188:	68db      	ldr	r3, [r3, #12]
 801918a:	b29b      	uxth	r3, r3
 801918c:	69fa      	ldr	r2, [r7, #28]
 801918e:	4413      	add	r3, r2
 8019190:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8019192:	69bb      	ldr	r3, [r7, #24]
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	0c1b      	lsrs	r3, r3, #16
 8019198:	69fa      	ldr	r2, [r7, #28]
 801919a:	4413      	add	r3, r2
 801919c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801919e:	69fb      	ldr	r3, [r7, #28]
 80191a0:	0c1a      	lsrs	r2, r3, #16
 80191a2:	69fb      	ldr	r3, [r7, #28]
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	4413      	add	r3, r2
 80191a8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 80191aa:	69fb      	ldr	r3, [r7, #28]
 80191ac:	0c1b      	lsrs	r3, r3, #16
 80191ae:	69fa      	ldr	r2, [r7, #28]
 80191b0:	4413      	add	r3, r2
 80191b2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80191b4:	69fb      	ldr	r3, [r7, #28]
 80191b6:	43db      	mvns	r3, r3
 80191b8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80191ba:	69fb      	ldr	r3, [r7, #28]
 80191bc:	b29a      	uxth	r2, r3
 80191be:	69bb      	ldr	r3, [r7, #24]
 80191c0:	815a      	strh	r2, [r3, #10]
 80191c2:	e00f      	b.n	80191e4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	895b      	ldrh	r3, [r3, #10]
 80191c8:	2b13      	cmp	r3, #19
 80191ca:	d802      	bhi.n	80191d2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80191cc:	f06f 0301 	mvn.w	r3, #1
 80191d0:	e020      	b.n	8019214 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80191d8:	69bb      	ldr	r3, [r7, #24]
 80191da:	691b      	ldr	r3, [r3, #16]
 80191dc:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80191de:	f107 0310 	add.w	r3, r7, #16
 80191e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80191e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d00c      	beq.n	8019206 <ip4_output_if_src+0x1fa>
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	891a      	ldrh	r2, [r3, #8]
 80191f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80191f4:	429a      	cmp	r2, r3
 80191f6:	d906      	bls.n	8019206 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80191f8:	687a      	ldr	r2, [r7, #4]
 80191fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80191fc:	68f8      	ldr	r0, [r7, #12]
 80191fe:	f000 fd5b 	bl	8019cb8 <ip4_frag>
 8019202:	4603      	mov	r3, r0
 8019204:	e006      	b.n	8019214 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019208:	695b      	ldr	r3, [r3, #20]
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	68f9      	ldr	r1, [r7, #12]
 801920e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019210:	4798      	blx	r3
 8019212:	4603      	mov	r3, r0
}
 8019214:	4618      	mov	r0, r3
 8019216:	3720      	adds	r7, #32
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	080206b8 	.word	0x080206b8
 8019220:	080206ec 	.word	0x080206ec
 8019224:	080206f8 	.word	0x080206f8
 8019228:	08020720 	.word	0x08020720
 801922c:	20013efa 	.word	0x20013efa
 8019230:	0806c800 	.word	0x0806c800

08019234 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019234:	b480      	push	{r7}
 8019236:	b085      	sub	sp, #20
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
 801923c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801923e:	687b      	ldr	r3, [r7, #4]
 8019240:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019248:	d002      	beq.n	8019250 <ip4_addr_isbroadcast_u32+0x1c>
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d101      	bne.n	8019254 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019250:	2301      	movs	r3, #1
 8019252:	e02a      	b.n	80192aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801925a:	f003 0302 	and.w	r3, r3, #2
 801925e:	2b00      	cmp	r3, #0
 8019260:	d101      	bne.n	8019266 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019262:	2300      	movs	r3, #0
 8019264:	e021      	b.n	80192aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019266:	683b      	ldr	r3, [r7, #0]
 8019268:	3304      	adds	r3, #4
 801926a:	681b      	ldr	r3, [r3, #0]
 801926c:	687a      	ldr	r2, [r7, #4]
 801926e:	429a      	cmp	r2, r3
 8019270:	d101      	bne.n	8019276 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019272:	2300      	movs	r3, #0
 8019274:	e019      	b.n	80192aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019276:	68fa      	ldr	r2, [r7, #12]
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	3304      	adds	r3, #4
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	405a      	eors	r2, r3
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	3308      	adds	r3, #8
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	4013      	ands	r3, r2
 8019288:	2b00      	cmp	r3, #0
 801928a:	d10d      	bne.n	80192a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801928c:	683b      	ldr	r3, [r7, #0]
 801928e:	3308      	adds	r3, #8
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	43da      	mvns	r2, r3
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	3308      	adds	r3, #8
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d101      	bne.n	80192a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80192a4:	2301      	movs	r3, #1
 80192a6:	e000      	b.n	80192aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80192a8:	2300      	movs	r3, #0
  }
}
 80192aa:	4618      	mov	r0, r3
 80192ac:	3714      	adds	r7, #20
 80192ae:	46bd      	mov	sp, r7
 80192b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b4:	4770      	bx	lr
	...

080192b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b084      	sub	sp, #16
 80192bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80192be:	2300      	movs	r3, #0
 80192c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80192c2:	4b12      	ldr	r3, [pc, #72]	; (801930c <ip_reass_tmr+0x54>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80192c8:	e018      	b.n	80192fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	7fdb      	ldrb	r3, [r3, #31]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d00b      	beq.n	80192ea <ip_reass_tmr+0x32>
      r->timer--;
 80192d2:	68fb      	ldr	r3, [r7, #12]
 80192d4:	7fdb      	ldrb	r3, [r3, #31]
 80192d6:	3b01      	subs	r3, #1
 80192d8:	b2da      	uxtb	r2, r3
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	60fb      	str	r3, [r7, #12]
 80192e8:	e008      	b.n	80192fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80192ea:	68fb      	ldr	r3, [r7, #12]
 80192ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80192f4:	68b9      	ldr	r1, [r7, #8]
 80192f6:	6878      	ldr	r0, [r7, #4]
 80192f8:	f000 f80a 	bl	8019310 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d1e3      	bne.n	80192ca <ip_reass_tmr+0x12>
    }
  }
}
 8019302:	bf00      	nop
 8019304:	bf00      	nop
 8019306:	3710      	adds	r7, #16
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	20013efc 	.word	0x20013efc

08019310 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b088      	sub	sp, #32
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
 8019318:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801931a:	2300      	movs	r3, #0
 801931c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801931e:	683a      	ldr	r2, [r7, #0]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	429a      	cmp	r2, r3
 8019324:	d105      	bne.n	8019332 <ip_reass_free_complete_datagram+0x22>
 8019326:	4b45      	ldr	r3, [pc, #276]	; (801943c <ip_reass_free_complete_datagram+0x12c>)
 8019328:	22ab      	movs	r2, #171	; 0xab
 801932a:	4945      	ldr	r1, [pc, #276]	; (8019440 <ip_reass_free_complete_datagram+0x130>)
 801932c:	4845      	ldr	r0, [pc, #276]	; (8019444 <ip_reass_free_complete_datagram+0x134>)
 801932e:	f001 feb1 	bl	801b094 <iprintf>
  if (prev != NULL) {
 8019332:	683b      	ldr	r3, [r7, #0]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d00a      	beq.n	801934e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	687a      	ldr	r2, [r7, #4]
 801933e:	429a      	cmp	r2, r3
 8019340:	d005      	beq.n	801934e <ip_reass_free_complete_datagram+0x3e>
 8019342:	4b3e      	ldr	r3, [pc, #248]	; (801943c <ip_reass_free_complete_datagram+0x12c>)
 8019344:	22ad      	movs	r2, #173	; 0xad
 8019346:	4940      	ldr	r1, [pc, #256]	; (8019448 <ip_reass_free_complete_datagram+0x138>)
 8019348:	483e      	ldr	r0, [pc, #248]	; (8019444 <ip_reass_free_complete_datagram+0x134>)
 801934a:	f001 fea3 	bl	801b094 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	685b      	ldr	r3, [r3, #4]
 8019352:	685b      	ldr	r3, [r3, #4]
 8019354:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019356:	697b      	ldr	r3, [r7, #20]
 8019358:	889b      	ldrh	r3, [r3, #4]
 801935a:	b29b      	uxth	r3, r3
 801935c:	2b00      	cmp	r3, #0
 801935e:	d12a      	bne.n	80193b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	685b      	ldr	r3, [r3, #4]
 8019364:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019366:	697b      	ldr	r3, [r7, #20]
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	6858      	ldr	r0, [r3, #4]
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	3308      	adds	r3, #8
 8019376:	2214      	movs	r2, #20
 8019378:	4619      	mov	r1, r3
 801937a:	f002 f8aa 	bl	801b4d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801937e:	2101      	movs	r1, #1
 8019380:	69b8      	ldr	r0, [r7, #24]
 8019382:	f7ff fbad 	bl	8018ae0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019386:	69b8      	ldr	r0, [r7, #24]
 8019388:	f7f6 f8bc 	bl	800f504 <pbuf_clen>
 801938c:	4603      	mov	r3, r0
 801938e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019390:	8bfa      	ldrh	r2, [r7, #30]
 8019392:	8a7b      	ldrh	r3, [r7, #18]
 8019394:	4413      	add	r3, r2
 8019396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801939a:	db05      	blt.n	80193a8 <ip_reass_free_complete_datagram+0x98>
 801939c:	4b27      	ldr	r3, [pc, #156]	; (801943c <ip_reass_free_complete_datagram+0x12c>)
 801939e:	22bc      	movs	r2, #188	; 0xbc
 80193a0:	492a      	ldr	r1, [pc, #168]	; (801944c <ip_reass_free_complete_datagram+0x13c>)
 80193a2:	4828      	ldr	r0, [pc, #160]	; (8019444 <ip_reass_free_complete_datagram+0x134>)
 80193a4:	f001 fe76 	bl	801b094 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80193a8:	8bfa      	ldrh	r2, [r7, #30]
 80193aa:	8a7b      	ldrh	r3, [r7, #18]
 80193ac:	4413      	add	r3, r2
 80193ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80193b0:	69b8      	ldr	r0, [r7, #24]
 80193b2:	f7f6 f819 	bl	800f3e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	685b      	ldr	r3, [r3, #4]
 80193ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80193bc:	e01f      	b.n	80193fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80193c4:	69bb      	ldr	r3, [r7, #24]
 80193c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80193c8:	697b      	ldr	r3, [r7, #20]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80193ce:	68f8      	ldr	r0, [r7, #12]
 80193d0:	f7f6 f898 	bl	800f504 <pbuf_clen>
 80193d4:	4603      	mov	r3, r0
 80193d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80193d8:	8bfa      	ldrh	r2, [r7, #30]
 80193da:	8a7b      	ldrh	r3, [r7, #18]
 80193dc:	4413      	add	r3, r2
 80193de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80193e2:	db05      	blt.n	80193f0 <ip_reass_free_complete_datagram+0xe0>
 80193e4:	4b15      	ldr	r3, [pc, #84]	; (801943c <ip_reass_free_complete_datagram+0x12c>)
 80193e6:	22cc      	movs	r2, #204	; 0xcc
 80193e8:	4918      	ldr	r1, [pc, #96]	; (801944c <ip_reass_free_complete_datagram+0x13c>)
 80193ea:	4816      	ldr	r0, [pc, #88]	; (8019444 <ip_reass_free_complete_datagram+0x134>)
 80193ec:	f001 fe52 	bl	801b094 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80193f0:	8bfa      	ldrh	r2, [r7, #30]
 80193f2:	8a7b      	ldrh	r3, [r7, #18]
 80193f4:	4413      	add	r3, r2
 80193f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80193f8:	68f8      	ldr	r0, [r7, #12]
 80193fa:	f7f5 fff5 	bl	800f3e8 <pbuf_free>
  while (p != NULL) {
 80193fe:	69bb      	ldr	r3, [r7, #24]
 8019400:	2b00      	cmp	r3, #0
 8019402:	d1dc      	bne.n	80193be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019404:	6839      	ldr	r1, [r7, #0]
 8019406:	6878      	ldr	r0, [r7, #4]
 8019408:	f000 f8c2 	bl	8019590 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801940c:	4b10      	ldr	r3, [pc, #64]	; (8019450 <ip_reass_free_complete_datagram+0x140>)
 801940e:	881b      	ldrh	r3, [r3, #0]
 8019410:	8bfa      	ldrh	r2, [r7, #30]
 8019412:	429a      	cmp	r2, r3
 8019414:	d905      	bls.n	8019422 <ip_reass_free_complete_datagram+0x112>
 8019416:	4b09      	ldr	r3, [pc, #36]	; (801943c <ip_reass_free_complete_datagram+0x12c>)
 8019418:	22d2      	movs	r2, #210	; 0xd2
 801941a:	490e      	ldr	r1, [pc, #56]	; (8019454 <ip_reass_free_complete_datagram+0x144>)
 801941c:	4809      	ldr	r0, [pc, #36]	; (8019444 <ip_reass_free_complete_datagram+0x134>)
 801941e:	f001 fe39 	bl	801b094 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019422:	4b0b      	ldr	r3, [pc, #44]	; (8019450 <ip_reass_free_complete_datagram+0x140>)
 8019424:	881a      	ldrh	r2, [r3, #0]
 8019426:	8bfb      	ldrh	r3, [r7, #30]
 8019428:	1ad3      	subs	r3, r2, r3
 801942a:	b29a      	uxth	r2, r3
 801942c:	4b08      	ldr	r3, [pc, #32]	; (8019450 <ip_reass_free_complete_datagram+0x140>)
 801942e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019430:	8bfb      	ldrh	r3, [r7, #30]
}
 8019432:	4618      	mov	r0, r3
 8019434:	3720      	adds	r7, #32
 8019436:	46bd      	mov	sp, r7
 8019438:	bd80      	pop	{r7, pc}
 801943a:	bf00      	nop
 801943c:	08020750 	.word	0x08020750
 8019440:	0802078c 	.word	0x0802078c
 8019444:	08020798 	.word	0x08020798
 8019448:	080207c0 	.word	0x080207c0
 801944c:	080207d4 	.word	0x080207d4
 8019450:	20013f00 	.word	0x20013f00
 8019454:	080207f4 	.word	0x080207f4

08019458 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b08a      	sub	sp, #40	; 0x28
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
 8019460:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019462:	2300      	movs	r3, #0
 8019464:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019466:	2300      	movs	r3, #0
 8019468:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801946a:	2300      	movs	r3, #0
 801946c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801946e:	2300      	movs	r3, #0
 8019470:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019472:	2300      	movs	r3, #0
 8019474:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019476:	4b28      	ldr	r3, [pc, #160]	; (8019518 <ip_reass_remove_oldest_datagram+0xc0>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801947c:	e030      	b.n	80194e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019480:	695a      	ldr	r2, [r3, #20]
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	68db      	ldr	r3, [r3, #12]
 8019486:	429a      	cmp	r2, r3
 8019488:	d10c      	bne.n	80194a4 <ip_reass_remove_oldest_datagram+0x4c>
 801948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801948c:	699a      	ldr	r2, [r3, #24]
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	691b      	ldr	r3, [r3, #16]
 8019492:	429a      	cmp	r2, r3
 8019494:	d106      	bne.n	80194a4 <ip_reass_remove_oldest_datagram+0x4c>
 8019496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019498:	899a      	ldrh	r2, [r3, #12]
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	889b      	ldrh	r3, [r3, #4]
 801949e:	b29b      	uxth	r3, r3
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d014      	beq.n	80194ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80194a4:	693b      	ldr	r3, [r7, #16]
 80194a6:	3301      	adds	r3, #1
 80194a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80194aa:	6a3b      	ldr	r3, [r7, #32]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d104      	bne.n	80194ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80194b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80194b4:	69fb      	ldr	r3, [r7, #28]
 80194b6:	61bb      	str	r3, [r7, #24]
 80194b8:	e009      	b.n	80194ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80194ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194bc:	7fda      	ldrb	r2, [r3, #31]
 80194be:	6a3b      	ldr	r3, [r7, #32]
 80194c0:	7fdb      	ldrb	r3, [r3, #31]
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d803      	bhi.n	80194ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80194c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80194ca:	69fb      	ldr	r3, [r7, #28]
 80194cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80194ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d0:	681b      	ldr	r3, [r3, #0]
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d001      	beq.n	80194da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80194d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80194da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80194e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d1cb      	bne.n	801947e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80194e6:	6a3b      	ldr	r3, [r7, #32]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d008      	beq.n	80194fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80194ec:	69b9      	ldr	r1, [r7, #24]
 80194ee:	6a38      	ldr	r0, [r7, #32]
 80194f0:	f7ff ff0e 	bl	8019310 <ip_reass_free_complete_datagram>
 80194f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80194f6:	697a      	ldr	r2, [r7, #20]
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	4413      	add	r3, r2
 80194fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80194fe:	697a      	ldr	r2, [r7, #20]
 8019500:	683b      	ldr	r3, [r7, #0]
 8019502:	429a      	cmp	r2, r3
 8019504:	da02      	bge.n	801950c <ip_reass_remove_oldest_datagram+0xb4>
 8019506:	693b      	ldr	r3, [r7, #16]
 8019508:	2b01      	cmp	r3, #1
 801950a:	dcac      	bgt.n	8019466 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801950c:	697b      	ldr	r3, [r7, #20]
}
 801950e:	4618      	mov	r0, r3
 8019510:	3728      	adds	r7, #40	; 0x28
 8019512:	46bd      	mov	sp, r7
 8019514:	bd80      	pop	{r7, pc}
 8019516:	bf00      	nop
 8019518:	20013efc 	.word	0x20013efc

0801951c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019526:	2004      	movs	r0, #4
 8019528:	f7f5 f86a 	bl	800e600 <memp_malloc>
 801952c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d110      	bne.n	8019556 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019534:	6839      	ldr	r1, [r7, #0]
 8019536:	6878      	ldr	r0, [r7, #4]
 8019538:	f7ff ff8e 	bl	8019458 <ip_reass_remove_oldest_datagram>
 801953c:	4602      	mov	r2, r0
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	4293      	cmp	r3, r2
 8019542:	dc03      	bgt.n	801954c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019544:	2004      	movs	r0, #4
 8019546:	f7f5 f85b 	bl	800e600 <memp_malloc>
 801954a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801954c:	68fb      	ldr	r3, [r7, #12]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d101      	bne.n	8019556 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019552:	2300      	movs	r3, #0
 8019554:	e016      	b.n	8019584 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019556:	2220      	movs	r2, #32
 8019558:	2100      	movs	r1, #0
 801955a:	68f8      	ldr	r0, [r7, #12]
 801955c:	f001 fefc 	bl	801b358 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019560:	68fb      	ldr	r3, [r7, #12]
 8019562:	220f      	movs	r2, #15
 8019564:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019566:	4b09      	ldr	r3, [pc, #36]	; (801958c <ip_reass_enqueue_new_datagram+0x70>)
 8019568:	681a      	ldr	r2, [r3, #0]
 801956a:	68fb      	ldr	r3, [r7, #12]
 801956c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801956e:	4a07      	ldr	r2, [pc, #28]	; (801958c <ip_reass_enqueue_new_datagram+0x70>)
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	3308      	adds	r3, #8
 8019578:	2214      	movs	r2, #20
 801957a:	6879      	ldr	r1, [r7, #4]
 801957c:	4618      	mov	r0, r3
 801957e:	f001 ffa8 	bl	801b4d2 <memcpy>
  return ipr;
 8019582:	68fb      	ldr	r3, [r7, #12]
}
 8019584:	4618      	mov	r0, r3
 8019586:	3710      	adds	r7, #16
 8019588:	46bd      	mov	sp, r7
 801958a:	bd80      	pop	{r7, pc}
 801958c:	20013efc 	.word	0x20013efc

08019590 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019590:	b580      	push	{r7, lr}
 8019592:	b082      	sub	sp, #8
 8019594:	af00      	add	r7, sp, #0
 8019596:	6078      	str	r0, [r7, #4]
 8019598:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801959a:	4b10      	ldr	r3, [pc, #64]	; (80195dc <ip_reass_dequeue_datagram+0x4c>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	687a      	ldr	r2, [r7, #4]
 80195a0:	429a      	cmp	r2, r3
 80195a2:	d104      	bne.n	80195ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	4a0c      	ldr	r2, [pc, #48]	; (80195dc <ip_reass_dequeue_datagram+0x4c>)
 80195aa:	6013      	str	r3, [r2, #0]
 80195ac:	e00d      	b.n	80195ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80195ae:	683b      	ldr	r3, [r7, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d106      	bne.n	80195c2 <ip_reass_dequeue_datagram+0x32>
 80195b4:	4b0a      	ldr	r3, [pc, #40]	; (80195e0 <ip_reass_dequeue_datagram+0x50>)
 80195b6:	f240 1245 	movw	r2, #325	; 0x145
 80195ba:	490a      	ldr	r1, [pc, #40]	; (80195e4 <ip_reass_dequeue_datagram+0x54>)
 80195bc:	480a      	ldr	r0, [pc, #40]	; (80195e8 <ip_reass_dequeue_datagram+0x58>)
 80195be:	f001 fd69 	bl	801b094 <iprintf>
    prev->next = ipr->next;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	681a      	ldr	r2, [r3, #0]
 80195c6:	683b      	ldr	r3, [r7, #0]
 80195c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80195ca:	6879      	ldr	r1, [r7, #4]
 80195cc:	2004      	movs	r0, #4
 80195ce:	f7f5 f869 	bl	800e6a4 <memp_free>
}
 80195d2:	bf00      	nop
 80195d4:	3708      	adds	r7, #8
 80195d6:	46bd      	mov	sp, r7
 80195d8:	bd80      	pop	{r7, pc}
 80195da:	bf00      	nop
 80195dc:	20013efc 	.word	0x20013efc
 80195e0:	08020750 	.word	0x08020750
 80195e4:	08020818 	.word	0x08020818
 80195e8:	08020798 	.word	0x08020798

080195ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b08c      	sub	sp, #48	; 0x30
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	60f8      	str	r0, [r7, #12]
 80195f4:	60b9      	str	r1, [r7, #8]
 80195f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80195f8:	2300      	movs	r3, #0
 80195fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80195fc:	2301      	movs	r3, #1
 80195fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	685b      	ldr	r3, [r3, #4]
 8019604:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019606:	69fb      	ldr	r3, [r7, #28]
 8019608:	885b      	ldrh	r3, [r3, #2]
 801960a:	b29b      	uxth	r3, r3
 801960c:	4618      	mov	r0, r3
 801960e:	f7f4 f9c9 	bl	800d9a4 <lwip_htons>
 8019612:	4603      	mov	r3, r0
 8019614:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019616:	69fb      	ldr	r3, [r7, #28]
 8019618:	781b      	ldrb	r3, [r3, #0]
 801961a:	f003 030f 	and.w	r3, r3, #15
 801961e:	b2db      	uxtb	r3, r3
 8019620:	009b      	lsls	r3, r3, #2
 8019622:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019624:	7e7b      	ldrb	r3, [r7, #25]
 8019626:	b29b      	uxth	r3, r3
 8019628:	8b7a      	ldrh	r2, [r7, #26]
 801962a:	429a      	cmp	r2, r3
 801962c:	d202      	bcs.n	8019634 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801962e:	f04f 33ff 	mov.w	r3, #4294967295
 8019632:	e135      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019634:	7e7b      	ldrb	r3, [r7, #25]
 8019636:	b29b      	uxth	r3, r3
 8019638:	8b7a      	ldrh	r2, [r7, #26]
 801963a:	1ad3      	subs	r3, r2, r3
 801963c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801963e:	69fb      	ldr	r3, [r7, #28]
 8019640:	88db      	ldrh	r3, [r3, #6]
 8019642:	b29b      	uxth	r3, r3
 8019644:	4618      	mov	r0, r3
 8019646:	f7f4 f9ad 	bl	800d9a4 <lwip_htons>
 801964a:	4603      	mov	r3, r0
 801964c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019650:	b29b      	uxth	r3, r3
 8019652:	00db      	lsls	r3, r3, #3
 8019654:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019656:	68bb      	ldr	r3, [r7, #8]
 8019658:	685b      	ldr	r3, [r3, #4]
 801965a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801965c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801965e:	2200      	movs	r2, #0
 8019660:	701a      	strb	r2, [r3, #0]
 8019662:	2200      	movs	r2, #0
 8019664:	705a      	strb	r2, [r3, #1]
 8019666:	2200      	movs	r2, #0
 8019668:	709a      	strb	r2, [r3, #2]
 801966a:	2200      	movs	r2, #0
 801966c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019670:	8afa      	ldrh	r2, [r7, #22]
 8019672:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019674:	8afa      	ldrh	r2, [r7, #22]
 8019676:	8b7b      	ldrh	r3, [r7, #26]
 8019678:	4413      	add	r3, r2
 801967a:	b29a      	uxth	r2, r3
 801967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801967e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019682:	88db      	ldrh	r3, [r3, #6]
 8019684:	b29b      	uxth	r3, r3
 8019686:	8afa      	ldrh	r2, [r7, #22]
 8019688:	429a      	cmp	r2, r3
 801968a:	d902      	bls.n	8019692 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801968c:	f04f 33ff 	mov.w	r3, #4294967295
 8019690:	e106      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	685b      	ldr	r3, [r3, #4]
 8019696:	627b      	str	r3, [r7, #36]	; 0x24
 8019698:	e068      	b.n	801976c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80196a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196a2:	889b      	ldrh	r3, [r3, #4]
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	693b      	ldr	r3, [r7, #16]
 80196a8:	889b      	ldrh	r3, [r3, #4]
 80196aa:	b29b      	uxth	r3, r3
 80196ac:	429a      	cmp	r2, r3
 80196ae:	d235      	bcs.n	801971c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80196b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80196b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d020      	beq.n	80196fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80196bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196be:	889b      	ldrh	r3, [r3, #4]
 80196c0:	b29a      	uxth	r2, r3
 80196c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196c4:	88db      	ldrh	r3, [r3, #6]
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	429a      	cmp	r2, r3
 80196ca:	d307      	bcc.n	80196dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80196cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196ce:	88db      	ldrh	r3, [r3, #6]
 80196d0:	b29a      	uxth	r2, r3
 80196d2:	693b      	ldr	r3, [r7, #16]
 80196d4:	889b      	ldrh	r3, [r3, #4]
 80196d6:	b29b      	uxth	r3, r3
 80196d8:	429a      	cmp	r2, r3
 80196da:	d902      	bls.n	80196e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196dc:	f04f 33ff 	mov.w	r3, #4294967295
 80196e0:	e0de      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80196e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196e4:	68ba      	ldr	r2, [r7, #8]
 80196e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80196e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ea:	88db      	ldrh	r3, [r3, #6]
 80196ec:	b29a      	uxth	r2, r3
 80196ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196f0:	889b      	ldrh	r3, [r3, #4]
 80196f2:	b29b      	uxth	r3, r3
 80196f4:	429a      	cmp	r2, r3
 80196f6:	d03d      	beq.n	8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80196f8:	2300      	movs	r3, #0
 80196fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80196fc:	e03a      	b.n	8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80196fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019700:	88db      	ldrh	r3, [r3, #6]
 8019702:	b29a      	uxth	r2, r3
 8019704:	693b      	ldr	r3, [r7, #16]
 8019706:	889b      	ldrh	r3, [r3, #4]
 8019708:	b29b      	uxth	r3, r3
 801970a:	429a      	cmp	r2, r3
 801970c:	d902      	bls.n	8019714 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801970e:	f04f 33ff 	mov.w	r3, #4294967295
 8019712:	e0c5      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	68ba      	ldr	r2, [r7, #8]
 8019718:	605a      	str	r2, [r3, #4]
      break;
 801971a:	e02b      	b.n	8019774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801971e:	889b      	ldrh	r3, [r3, #4]
 8019720:	b29a      	uxth	r2, r3
 8019722:	693b      	ldr	r3, [r7, #16]
 8019724:	889b      	ldrh	r3, [r3, #4]
 8019726:	b29b      	uxth	r3, r3
 8019728:	429a      	cmp	r2, r3
 801972a:	d102      	bne.n	8019732 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801972c:	f04f 33ff 	mov.w	r3, #4294967295
 8019730:	e0b6      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019734:	889b      	ldrh	r3, [r3, #4]
 8019736:	b29a      	uxth	r2, r3
 8019738:	693b      	ldr	r3, [r7, #16]
 801973a:	88db      	ldrh	r3, [r3, #6]
 801973c:	b29b      	uxth	r3, r3
 801973e:	429a      	cmp	r2, r3
 8019740:	d202      	bcs.n	8019748 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019742:	f04f 33ff 	mov.w	r3, #4294967295
 8019746:	e0ab      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801974a:	2b00      	cmp	r3, #0
 801974c:	d009      	beq.n	8019762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019750:	88db      	ldrh	r3, [r3, #6]
 8019752:	b29a      	uxth	r2, r3
 8019754:	693b      	ldr	r3, [r7, #16]
 8019756:	889b      	ldrh	r3, [r3, #4]
 8019758:	b29b      	uxth	r3, r3
 801975a:	429a      	cmp	r2, r3
 801975c:	d001      	beq.n	8019762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801975e:	2300      	movs	r3, #0
 8019760:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019762:	693b      	ldr	r3, [r7, #16]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801976c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801976e:	2b00      	cmp	r3, #0
 8019770:	d193      	bne.n	801969a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019772:	e000      	b.n	8019776 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019774:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019778:	2b00      	cmp	r3, #0
 801977a:	d12d      	bne.n	80197d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801977e:	2b00      	cmp	r3, #0
 8019780:	d01c      	beq.n	80197bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019784:	88db      	ldrh	r3, [r3, #6]
 8019786:	b29a      	uxth	r2, r3
 8019788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801978a:	889b      	ldrh	r3, [r3, #4]
 801978c:	b29b      	uxth	r3, r3
 801978e:	429a      	cmp	r2, r3
 8019790:	d906      	bls.n	80197a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019792:	4b45      	ldr	r3, [pc, #276]	; (80198a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019794:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019798:	4944      	ldr	r1, [pc, #272]	; (80198ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801979a:	4845      	ldr	r0, [pc, #276]	; (80198b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801979c:	f001 fc7a 	bl	801b094 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80197a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a2:	68ba      	ldr	r2, [r7, #8]
 80197a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80197a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a8:	88db      	ldrh	r3, [r3, #6]
 80197aa:	b29a      	uxth	r2, r3
 80197ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80197ae:	889b      	ldrh	r3, [r3, #4]
 80197b0:	b29b      	uxth	r3, r3
 80197b2:	429a      	cmp	r2, r3
 80197b4:	d010      	beq.n	80197d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80197b6:	2300      	movs	r3, #0
 80197b8:	623b      	str	r3, [r7, #32]
 80197ba:	e00d      	b.n	80197d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80197bc:	68fb      	ldr	r3, [r7, #12]
 80197be:	685b      	ldr	r3, [r3, #4]
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d006      	beq.n	80197d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80197c4:	4b38      	ldr	r3, [pc, #224]	; (80198a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80197c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80197ca:	493a      	ldr	r1, [pc, #232]	; (80198b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80197cc:	4838      	ldr	r0, [pc, #224]	; (80198b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80197ce:	f001 fc61 	bl	801b094 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	68ba      	ldr	r2, [r7, #8]
 80197d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d105      	bne.n	80197ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	7f9b      	ldrb	r3, [r3, #30]
 80197e2:	f003 0301 	and.w	r3, r3, #1
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d059      	beq.n	801989e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80197ea:	6a3b      	ldr	r3, [r7, #32]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d04f      	beq.n	8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	685b      	ldr	r3, [r3, #4]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d006      	beq.n	8019806 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	685b      	ldr	r3, [r3, #4]
 80197fc:	685b      	ldr	r3, [r3, #4]
 80197fe:	889b      	ldrh	r3, [r3, #4]
 8019800:	b29b      	uxth	r3, r3
 8019802:	2b00      	cmp	r3, #0
 8019804:	d002      	beq.n	801980c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019806:	2300      	movs	r3, #0
 8019808:	623b      	str	r3, [r7, #32]
 801980a:	e041      	b.n	8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801980c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801980e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019816:	e012      	b.n	801983e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981a:	685b      	ldr	r3, [r3, #4]
 801981c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801981e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019820:	88db      	ldrh	r3, [r3, #6]
 8019822:	b29a      	uxth	r2, r3
 8019824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019826:	889b      	ldrh	r3, [r3, #4]
 8019828:	b29b      	uxth	r3, r3
 801982a:	429a      	cmp	r2, r3
 801982c:	d002      	beq.n	8019834 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801982e:	2300      	movs	r3, #0
 8019830:	623b      	str	r3, [r7, #32]
            break;
 8019832:	e007      	b.n	8019844 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019836:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019840:	2b00      	cmp	r3, #0
 8019842:	d1e9      	bne.n	8019818 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019844:	6a3b      	ldr	r3, [r7, #32]
 8019846:	2b00      	cmp	r3, #0
 8019848:	d022      	beq.n	8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d106      	bne.n	8019860 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019852:	4b15      	ldr	r3, [pc, #84]	; (80198a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019854:	f240 12df 	movw	r2, #479	; 0x1df
 8019858:	4917      	ldr	r1, [pc, #92]	; (80198b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801985a:	4815      	ldr	r0, [pc, #84]	; (80198b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801985c:	f001 fc1a 	bl	801b094 <iprintf>
          LWIP_ASSERT("sanity check",
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	685b      	ldr	r3, [r3, #4]
 8019864:	685b      	ldr	r3, [r3, #4]
 8019866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019868:	429a      	cmp	r2, r3
 801986a:	d106      	bne.n	801987a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801986c:	4b0e      	ldr	r3, [pc, #56]	; (80198a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801986e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019872:	4911      	ldr	r1, [pc, #68]	; (80198b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019874:	480e      	ldr	r0, [pc, #56]	; (80198b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019876:	f001 fc0d 	bl	801b094 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d006      	beq.n	8019890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019882:	4b09      	ldr	r3, [pc, #36]	; (80198a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019884:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019888:	490c      	ldr	r1, [pc, #48]	; (80198bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801988a:	4809      	ldr	r0, [pc, #36]	; (80198b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801988c:	f001 fc02 	bl	801b094 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019890:	6a3b      	ldr	r3, [r7, #32]
 8019892:	2b00      	cmp	r3, #0
 8019894:	bf14      	ite	ne
 8019896:	2301      	movne	r3, #1
 8019898:	2300      	moveq	r3, #0
 801989a:	b2db      	uxtb	r3, r3
 801989c:	e000      	b.n	80198a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801989e:	2300      	movs	r3, #0
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3730      	adds	r7, #48	; 0x30
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	08020750 	.word	0x08020750
 80198ac:	08020834 	.word	0x08020834
 80198b0:	08020798 	.word	0x08020798
 80198b4:	08020854 	.word	0x08020854
 80198b8:	0802088c 	.word	0x0802088c
 80198bc:	0802089c 	.word	0x0802089c

080198c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b08e      	sub	sp, #56	; 0x38
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	685b      	ldr	r3, [r3, #4]
 80198cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80198ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d0:	781b      	ldrb	r3, [r3, #0]
 80198d2:	f003 030f 	and.w	r3, r3, #15
 80198d6:	b2db      	uxtb	r3, r3
 80198d8:	009b      	lsls	r3, r3, #2
 80198da:	b2db      	uxtb	r3, r3
 80198dc:	2b14      	cmp	r3, #20
 80198de:	f040 8179 	bne.w	8019bd4 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80198e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e4:	88db      	ldrh	r3, [r3, #6]
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	4618      	mov	r0, r3
 80198ea:	f7f4 f85b 	bl	800d9a4 <lwip_htons>
 80198ee:	4603      	mov	r3, r0
 80198f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198f4:	b29b      	uxth	r3, r3
 80198f6:	00db      	lsls	r3, r3, #3
 80198f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80198fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fc:	885b      	ldrh	r3, [r3, #2]
 80198fe:	b29b      	uxth	r3, r3
 8019900:	4618      	mov	r0, r3
 8019902:	f7f4 f84f 	bl	800d9a4 <lwip_htons>
 8019906:	4603      	mov	r3, r0
 8019908:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801990a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801990c:	781b      	ldrb	r3, [r3, #0]
 801990e:	f003 030f 	and.w	r3, r3, #15
 8019912:	b2db      	uxtb	r3, r3
 8019914:	009b      	lsls	r3, r3, #2
 8019916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801991a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801991e:	b29b      	uxth	r3, r3
 8019920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019922:	429a      	cmp	r2, r3
 8019924:	f0c0 8158 	bcc.w	8019bd8 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801992c:	b29b      	uxth	r3, r3
 801992e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019934:	6878      	ldr	r0, [r7, #4]
 8019936:	f7f5 fde5 	bl	800f504 <pbuf_clen>
 801993a:	4603      	mov	r3, r0
 801993c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801993e:	4b90      	ldr	r3, [pc, #576]	; (8019b80 <ip4_reass+0x2c0>)
 8019940:	881b      	ldrh	r3, [r3, #0]
 8019942:	461a      	mov	r2, r3
 8019944:	8c3b      	ldrh	r3, [r7, #32]
 8019946:	4413      	add	r3, r2
 8019948:	2b0a      	cmp	r3, #10
 801994a:	dd10      	ble.n	801996e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801994c:	8c3b      	ldrh	r3, [r7, #32]
 801994e:	4619      	mov	r1, r3
 8019950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019952:	f7ff fd81 	bl	8019458 <ip_reass_remove_oldest_datagram>
 8019956:	4603      	mov	r3, r0
 8019958:	2b00      	cmp	r3, #0
 801995a:	f000 813f 	beq.w	8019bdc <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801995e:	4b88      	ldr	r3, [pc, #544]	; (8019b80 <ip4_reass+0x2c0>)
 8019960:	881b      	ldrh	r3, [r3, #0]
 8019962:	461a      	mov	r2, r3
 8019964:	8c3b      	ldrh	r3, [r7, #32]
 8019966:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019968:	2b0a      	cmp	r3, #10
 801996a:	f300 8137 	bgt.w	8019bdc <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801996e:	4b85      	ldr	r3, [pc, #532]	; (8019b84 <ip4_reass+0x2c4>)
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	633b      	str	r3, [r7, #48]	; 0x30
 8019974:	e015      	b.n	80199a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019978:	695a      	ldr	r2, [r3, #20]
 801997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801997c:	68db      	ldr	r3, [r3, #12]
 801997e:	429a      	cmp	r2, r3
 8019980:	d10c      	bne.n	801999c <ip4_reass+0xdc>
 8019982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019984:	699a      	ldr	r2, [r3, #24]
 8019986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019988:	691b      	ldr	r3, [r3, #16]
 801998a:	429a      	cmp	r2, r3
 801998c:	d106      	bne.n	801999c <ip4_reass+0xdc>
 801998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019990:	899a      	ldrh	r2, [r3, #12]
 8019992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019994:	889b      	ldrh	r3, [r3, #4]
 8019996:	b29b      	uxth	r3, r3
 8019998:	429a      	cmp	r2, r3
 801999a:	d006      	beq.n	80199aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	633b      	str	r3, [r7, #48]	; 0x30
 80199a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d1e6      	bne.n	8019976 <ip4_reass+0xb6>
 80199a8:	e000      	b.n	80199ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80199aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80199ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d109      	bne.n	80199c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80199b2:	8c3b      	ldrh	r3, [r7, #32]
 80199b4:	4619      	mov	r1, r3
 80199b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80199b8:	f7ff fdb0 	bl	801951c <ip_reass_enqueue_new_datagram>
 80199bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80199be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d11c      	bne.n	80199fe <ip4_reass+0x13e>
      goto nullreturn;
 80199c4:	e10d      	b.n	8019be2 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199c8:	88db      	ldrh	r3, [r3, #6]
 80199ca:	b29b      	uxth	r3, r3
 80199cc:	4618      	mov	r0, r3
 80199ce:	f7f3 ffe9 	bl	800d9a4 <lwip_htons>
 80199d2:	4603      	mov	r3, r0
 80199d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d110      	bne.n	80199fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80199dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199de:	89db      	ldrh	r3, [r3, #14]
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7f3 ffdf 	bl	800d9a4 <lwip_htons>
 80199e6:	4603      	mov	r3, r0
 80199e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d006      	beq.n	80199fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80199f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f2:	3308      	adds	r3, #8
 80199f4:	2214      	movs	r2, #20
 80199f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80199f8:	4618      	mov	r0, r3
 80199fa:	f001 fd6a 	bl	801b4d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80199fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a00:	88db      	ldrh	r3, [r3, #6]
 8019a02:	b29b      	uxth	r3, r3
 8019a04:	f003 0320 	and.w	r3, r3, #32
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	bf0c      	ite	eq
 8019a0c:	2301      	moveq	r3, #1
 8019a0e:	2300      	movne	r3, #0
 8019a10:	b2db      	uxtb	r3, r3
 8019a12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019a14:	69fb      	ldr	r3, [r7, #28]
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d00e      	beq.n	8019a38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a1e:	4413      	add	r3, r2
 8019a20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019a22:	8b7a      	ldrh	r2, [r7, #26]
 8019a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019a26:	429a      	cmp	r2, r3
 8019a28:	f0c0 80a8 	bcc.w	8019b7c <ip4_reass+0x2bc>
 8019a2c:	8b7b      	ldrh	r3, [r7, #26]
 8019a2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019a32:	4293      	cmp	r3, r2
 8019a34:	f200 80a2 	bhi.w	8019b7c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019a38:	69fa      	ldr	r2, [r7, #28]
 8019a3a:	6879      	ldr	r1, [r7, #4]
 8019a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019a3e:	f7ff fdd5 	bl	80195ec <ip_reass_chain_frag_into_datagram_and_validate>
 8019a42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019a44:	697b      	ldr	r3, [r7, #20]
 8019a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a4a:	f000 80a3 	beq.w	8019b94 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019a4e:	4b4c      	ldr	r3, [pc, #304]	; (8019b80 <ip4_reass+0x2c0>)
 8019a50:	881a      	ldrh	r2, [r3, #0]
 8019a52:	8c3b      	ldrh	r3, [r7, #32]
 8019a54:	4413      	add	r3, r2
 8019a56:	b29a      	uxth	r2, r3
 8019a58:	4b49      	ldr	r3, [pc, #292]	; (8019b80 <ip4_reass+0x2c0>)
 8019a5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019a5c:	69fb      	ldr	r3, [r7, #28]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d00d      	beq.n	8019a7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8019a62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a66:	4413      	add	r3, r2
 8019a68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6c:	8a7a      	ldrh	r2, [r7, #18]
 8019a6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8019a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a72:	7f9b      	ldrb	r3, [r3, #30]
 8019a74:	f043 0301 	orr.w	r3, r3, #1
 8019a78:	b2da      	uxtb	r2, r3
 8019a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	2b01      	cmp	r3, #1
 8019a82:	d179      	bne.n	8019b78 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a86:	8b9b      	ldrh	r3, [r3, #28]
 8019a88:	3314      	adds	r3, #20
 8019a8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a8e:	685b      	ldr	r3, [r3, #4]
 8019a90:	685b      	ldr	r3, [r3, #4]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8019a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a98:	685b      	ldr	r3, [r3, #4]
 8019a9a:	685b      	ldr	r3, [r3, #4]
 8019a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aa0:	3308      	adds	r3, #8
 8019aa2:	2214      	movs	r2, #20
 8019aa4:	4619      	mov	r1, r3
 8019aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019aa8:	f001 fd13 	bl	801b4d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019aac:	8a3b      	ldrh	r3, [r7, #16]
 8019aae:	4618      	mov	r0, r3
 8019ab0:	f7f3 ff78 	bl	800d9a4 <lwip_htons>
 8019ab4:	4603      	mov	r3, r0
 8019ab6:	461a      	mov	r2, r3
 8019ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019abe:	2200      	movs	r2, #0
 8019ac0:	719a      	strb	r2, [r3, #6]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ac8:	2200      	movs	r2, #0
 8019aca:	729a      	strb	r2, [r3, #10]
 8019acc:	2200      	movs	r2, #0
 8019ace:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8019ad0:	2114      	movs	r1, #20
 8019ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ad4:	f7f4 f8ae 	bl	800dc34 <inet_chksum>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	461a      	mov	r2, r3
 8019adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ade:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ae2:	685b      	ldr	r3, [r3, #4]
 8019ae4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019ae6:	e00d      	b.n	8019b04 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8019ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aea:	685b      	ldr	r3, [r3, #4]
 8019aec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019aee:	2114      	movs	r1, #20
 8019af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019af2:	f7f5 fbf3 	bl	800f2dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8019af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019af8:	6878      	ldr	r0, [r7, #4]
 8019afa:	f7f5 fd43 	bl	800f584 <pbuf_cat>
      r = iprh->next_pbuf;
 8019afe:	68fb      	ldr	r3, [r7, #12]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8019b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d1ee      	bne.n	8019ae8 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019b0a:	4b1e      	ldr	r3, [pc, #120]	; (8019b84 <ip4_reass+0x2c4>)
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b10:	429a      	cmp	r2, r3
 8019b12:	d102      	bne.n	8019b1a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8019b14:	2300      	movs	r3, #0
 8019b16:	637b      	str	r3, [r7, #52]	; 0x34
 8019b18:	e010      	b.n	8019b3c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019b1a:	4b1a      	ldr	r3, [pc, #104]	; (8019b84 <ip4_reass+0x2c4>)
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8019b20:	e007      	b.n	8019b32 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8019b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	d006      	beq.n	8019b3a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	637b      	str	r3, [r7, #52]	; 0x34
 8019b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d1f4      	bne.n	8019b22 <ip4_reass+0x262>
 8019b38:	e000      	b.n	8019b3c <ip4_reass+0x27c>
          break;
 8019b3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019b3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019b3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019b40:	f7ff fd26 	bl	8019590 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019b44:	6878      	ldr	r0, [r7, #4]
 8019b46:	f7f5 fcdd 	bl	800f504 <pbuf_clen>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019b4e:	4b0c      	ldr	r3, [pc, #48]	; (8019b80 <ip4_reass+0x2c0>)
 8019b50:	881b      	ldrh	r3, [r3, #0]
 8019b52:	8c3a      	ldrh	r2, [r7, #32]
 8019b54:	429a      	cmp	r2, r3
 8019b56:	d906      	bls.n	8019b66 <ip4_reass+0x2a6>
 8019b58:	4b0b      	ldr	r3, [pc, #44]	; (8019b88 <ip4_reass+0x2c8>)
 8019b5a:	f240 229b 	movw	r2, #667	; 0x29b
 8019b5e:	490b      	ldr	r1, [pc, #44]	; (8019b8c <ip4_reass+0x2cc>)
 8019b60:	480b      	ldr	r0, [pc, #44]	; (8019b90 <ip4_reass+0x2d0>)
 8019b62:	f001 fa97 	bl	801b094 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019b66:	4b06      	ldr	r3, [pc, #24]	; (8019b80 <ip4_reass+0x2c0>)
 8019b68:	881a      	ldrh	r2, [r3, #0]
 8019b6a:	8c3b      	ldrh	r3, [r7, #32]
 8019b6c:	1ad3      	subs	r3, r2, r3
 8019b6e:	b29a      	uxth	r2, r3
 8019b70:	4b03      	ldr	r3, [pc, #12]	; (8019b80 <ip4_reass+0x2c0>)
 8019b72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	e038      	b.n	8019bea <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019b78:	2300      	movs	r3, #0
 8019b7a:	e036      	b.n	8019bea <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8019b7c:	bf00      	nop
 8019b7e:	e00a      	b.n	8019b96 <ip4_reass+0x2d6>
 8019b80:	20013f00 	.word	0x20013f00
 8019b84:	20013efc 	.word	0x20013efc
 8019b88:	08020750 	.word	0x08020750
 8019b8c:	080208c0 	.word	0x080208c0
 8019b90:	08020798 	.word	0x08020798
    goto nullreturn_ipr;
 8019b94:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8019b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d106      	bne.n	8019baa <ip4_reass+0x2ea>
 8019b9c:	4b15      	ldr	r3, [pc, #84]	; (8019bf4 <ip4_reass+0x334>)
 8019b9e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8019ba2:	4915      	ldr	r1, [pc, #84]	; (8019bf8 <ip4_reass+0x338>)
 8019ba4:	4815      	ldr	r0, [pc, #84]	; (8019bfc <ip4_reass+0x33c>)
 8019ba6:	f001 fa75 	bl	801b094 <iprintf>
  if (ipr->p == NULL) {
 8019baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019bac:	685b      	ldr	r3, [r3, #4]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d116      	bne.n	8019be0 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8019bb2:	4b13      	ldr	r3, [pc, #76]	; (8019c00 <ip4_reass+0x340>)
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	d006      	beq.n	8019bca <ip4_reass+0x30a>
 8019bbc:	4b0d      	ldr	r3, [pc, #52]	; (8019bf4 <ip4_reass+0x334>)
 8019bbe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019bc2:	4910      	ldr	r1, [pc, #64]	; (8019c04 <ip4_reass+0x344>)
 8019bc4:	480d      	ldr	r0, [pc, #52]	; (8019bfc <ip4_reass+0x33c>)
 8019bc6:	f001 fa65 	bl	801b094 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019bca:	2100      	movs	r1, #0
 8019bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019bce:	f7ff fcdf 	bl	8019590 <ip_reass_dequeue_datagram>
 8019bd2:	e006      	b.n	8019be2 <ip4_reass+0x322>
    goto nullreturn;
 8019bd4:	bf00      	nop
 8019bd6:	e004      	b.n	8019be2 <ip4_reass+0x322>
    goto nullreturn;
 8019bd8:	bf00      	nop
 8019bda:	e002      	b.n	8019be2 <ip4_reass+0x322>
      goto nullreturn;
 8019bdc:	bf00      	nop
 8019bde:	e000      	b.n	8019be2 <ip4_reass+0x322>
  }

nullreturn:
 8019be0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019be2:	6878      	ldr	r0, [r7, #4]
 8019be4:	f7f5 fc00 	bl	800f3e8 <pbuf_free>
  return NULL;
 8019be8:	2300      	movs	r3, #0
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	3738      	adds	r7, #56	; 0x38
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	bd80      	pop	{r7, pc}
 8019bf2:	bf00      	nop
 8019bf4:	08020750 	.word	0x08020750
 8019bf8:	080208dc 	.word	0x080208dc
 8019bfc:	08020798 	.word	0x08020798
 8019c00:	20013efc 	.word	0x20013efc
 8019c04:	080208e8 	.word	0x080208e8

08019c08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019c0c:	2005      	movs	r0, #5
 8019c0e:	f7f4 fcf7 	bl	800e600 <memp_malloc>
 8019c12:	4603      	mov	r3, r0
}
 8019c14:	4618      	mov	r0, r3
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b082      	sub	sp, #8
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019c26:	4b07      	ldr	r3, [pc, #28]	; (8019c44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019c28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019c2c:	4906      	ldr	r1, [pc, #24]	; (8019c48 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019c2e:	4807      	ldr	r0, [pc, #28]	; (8019c4c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019c30:	f001 fa30 	bl	801b094 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019c34:	6879      	ldr	r1, [r7, #4]
 8019c36:	2005      	movs	r0, #5
 8019c38:	f7f4 fd34 	bl	800e6a4 <memp_free>
}
 8019c3c:	bf00      	nop
 8019c3e:	3708      	adds	r7, #8
 8019c40:	46bd      	mov	sp, r7
 8019c42:	bd80      	pop	{r7, pc}
 8019c44:	08020750 	.word	0x08020750
 8019c48:	08020908 	.word	0x08020908
 8019c4c:	08020798 	.word	0x08020798

08019c50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b084      	sub	sp, #16
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019c5c:	68fb      	ldr	r3, [r7, #12]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d106      	bne.n	8019c70 <ipfrag_free_pbuf_custom+0x20>
 8019c62:	4b11      	ldr	r3, [pc, #68]	; (8019ca8 <ipfrag_free_pbuf_custom+0x58>)
 8019c64:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019c68:	4910      	ldr	r1, [pc, #64]	; (8019cac <ipfrag_free_pbuf_custom+0x5c>)
 8019c6a:	4811      	ldr	r0, [pc, #68]	; (8019cb0 <ipfrag_free_pbuf_custom+0x60>)
 8019c6c:	f001 fa12 	bl	801b094 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019c70:	68fa      	ldr	r2, [r7, #12]
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	429a      	cmp	r2, r3
 8019c76:	d006      	beq.n	8019c86 <ipfrag_free_pbuf_custom+0x36>
 8019c78:	4b0b      	ldr	r3, [pc, #44]	; (8019ca8 <ipfrag_free_pbuf_custom+0x58>)
 8019c7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019c7e:	490d      	ldr	r1, [pc, #52]	; (8019cb4 <ipfrag_free_pbuf_custom+0x64>)
 8019c80:	480b      	ldr	r0, [pc, #44]	; (8019cb0 <ipfrag_free_pbuf_custom+0x60>)
 8019c82:	f001 fa07 	bl	801b094 <iprintf>
  if (pcr->original != NULL) {
 8019c86:	68fb      	ldr	r3, [r7, #12]
 8019c88:	695b      	ldr	r3, [r3, #20]
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d004      	beq.n	8019c98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	695b      	ldr	r3, [r3, #20]
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7f5 fba8 	bl	800f3e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019c98:	68f8      	ldr	r0, [r7, #12]
 8019c9a:	f7ff ffbd 	bl	8019c18 <ip_frag_free_pbuf_custom_ref>
}
 8019c9e:	bf00      	nop
 8019ca0:	3710      	adds	r7, #16
 8019ca2:	46bd      	mov	sp, r7
 8019ca4:	bd80      	pop	{r7, pc}
 8019ca6:	bf00      	nop
 8019ca8:	08020750 	.word	0x08020750
 8019cac:	08020914 	.word	0x08020914
 8019cb0:	08020798 	.word	0x08020798
 8019cb4:	08020920 	.word	0x08020920

08019cb8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019cb8:	b580      	push	{r7, lr}
 8019cba:	b094      	sub	sp, #80	; 0x50
 8019cbc:	af02      	add	r7, sp, #8
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019cca:	68bb      	ldr	r3, [r7, #8]
 8019ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019cce:	3b14      	subs	r3, #20
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	da00      	bge.n	8019cd6 <ip4_frag+0x1e>
 8019cd4:	3307      	adds	r3, #7
 8019cd6:	10db      	asrs	r3, r3, #3
 8019cd8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019cda:	2314      	movs	r3, #20
 8019cdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019cde:	68fb      	ldr	r3, [r7, #12]
 8019ce0:	685b      	ldr	r3, [r3, #4]
 8019ce2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ce6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cea:	781b      	ldrb	r3, [r3, #0]
 8019cec:	f003 030f 	and.w	r3, r3, #15
 8019cf0:	b2db      	uxtb	r3, r3
 8019cf2:	009b      	lsls	r3, r3, #2
 8019cf4:	b2db      	uxtb	r3, r3
 8019cf6:	2b14      	cmp	r3, #20
 8019cf8:	d002      	beq.n	8019d00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019cfa:	f06f 0305 	mvn.w	r3, #5
 8019cfe:	e118      	b.n	8019f32 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	895b      	ldrh	r3, [r3, #10]
 8019d04:	2b13      	cmp	r3, #19
 8019d06:	d809      	bhi.n	8019d1c <ip4_frag+0x64>
 8019d08:	4b8c      	ldr	r3, [pc, #560]	; (8019f3c <ip4_frag+0x284>)
 8019d0a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019d0e:	498c      	ldr	r1, [pc, #560]	; (8019f40 <ip4_frag+0x288>)
 8019d10:	488c      	ldr	r0, [pc, #560]	; (8019f44 <ip4_frag+0x28c>)
 8019d12:	f001 f9bf 	bl	801b094 <iprintf>
 8019d16:	f06f 0305 	mvn.w	r3, #5
 8019d1a:	e10a      	b.n	8019f32 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019d1e:	88db      	ldrh	r3, [r3, #6]
 8019d20:	b29b      	uxth	r3, r3
 8019d22:	4618      	mov	r0, r3
 8019d24:	f7f3 fe3e 	bl	800d9a4 <lwip_htons>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019d2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019d32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019d36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019d38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019d3e:	68fb      	ldr	r3, [r7, #12]
 8019d40:	891b      	ldrh	r3, [r3, #8]
 8019d42:	3b14      	subs	r3, #20
 8019d44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019d48:	e0e9      	b.n	8019f1e <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019d4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019d4c:	00db      	lsls	r3, r3, #3
 8019d4e:	b29b      	uxth	r3, r3
 8019d50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d54:	4293      	cmp	r3, r2
 8019d56:	bf28      	it	cs
 8019d58:	4613      	movcs	r3, r2
 8019d5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019d5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019d60:	2114      	movs	r1, #20
 8019d62:	200e      	movs	r0, #14
 8019d64:	f7f5 f858 	bl	800ee18 <pbuf_alloc>
 8019d68:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	f000 80dd 	beq.w	8019f2c <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d74:	895b      	ldrh	r3, [r3, #10]
 8019d76:	2b13      	cmp	r3, #19
 8019d78:	d806      	bhi.n	8019d88 <ip4_frag+0xd0>
 8019d7a:	4b70      	ldr	r3, [pc, #448]	; (8019f3c <ip4_frag+0x284>)
 8019d7c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019d80:	4971      	ldr	r1, [pc, #452]	; (8019f48 <ip4_frag+0x290>)
 8019d82:	4870      	ldr	r0, [pc, #448]	; (8019f44 <ip4_frag+0x28c>)
 8019d84:	f001 f986 	bl	801b094 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8a:	685b      	ldr	r3, [r3, #4]
 8019d8c:	2214      	movs	r2, #20
 8019d8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019d90:	4618      	mov	r0, r3
 8019d92:	f001 fb9e 	bl	801b4d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d98:	685b      	ldr	r3, [r3, #4]
 8019d9a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019d9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019d9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019da2:	e064      	b.n	8019e6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019da4:	68fb      	ldr	r3, [r7, #12]
 8019da6:	895a      	ldrh	r2, [r3, #10]
 8019da8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019daa:	1ad3      	subs	r3, r2, r3
 8019dac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	895b      	ldrh	r3, [r3, #10]
 8019db2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d906      	bls.n	8019dc6 <ip4_frag+0x10e>
 8019db8:	4b60      	ldr	r3, [pc, #384]	; (8019f3c <ip4_frag+0x284>)
 8019dba:	f240 322d 	movw	r2, #813	; 0x32d
 8019dbe:	4963      	ldr	r1, [pc, #396]	; (8019f4c <ip4_frag+0x294>)
 8019dc0:	4860      	ldr	r0, [pc, #384]	; (8019f44 <ip4_frag+0x28c>)
 8019dc2:	f001 f967 	bl	801b094 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019dc6:	8bfa      	ldrh	r2, [r7, #30]
 8019dc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	bf28      	it	cs
 8019dd0:	4613      	movcs	r3, r2
 8019dd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019dd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d105      	bne.n	8019dea <ip4_frag+0x132>
        poff = 0;
 8019dde:	2300      	movs	r3, #0
 8019de0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	60fb      	str	r3, [r7, #12]
        continue;
 8019de8:	e041      	b.n	8019e6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019dea:	f7ff ff0d 	bl	8019c08 <ip_frag_alloc_pbuf_custom_ref>
 8019dee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019df0:	69bb      	ldr	r3, [r7, #24]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d103      	bne.n	8019dfe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019df6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019df8:	f7f5 faf6 	bl	800f3e8 <pbuf_free>
        goto memerr;
 8019dfc:	e097      	b.n	8019f2e <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019dfe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019e04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019e06:	4413      	add	r3, r2
 8019e08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019e0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019e10:	9201      	str	r2, [sp, #4]
 8019e12:	9300      	str	r3, [sp, #0]
 8019e14:	4603      	mov	r3, r0
 8019e16:	2241      	movs	r2, #65	; 0x41
 8019e18:	2000      	movs	r0, #0
 8019e1a:	f7f5 f92b 	bl	800f074 <pbuf_alloced_custom>
 8019e1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019e20:	697b      	ldr	r3, [r7, #20]
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	d106      	bne.n	8019e34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019e26:	69b8      	ldr	r0, [r7, #24]
 8019e28:	f7ff fef6 	bl	8019c18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e2e:	f7f5 fadb 	bl	800f3e8 <pbuf_free>
        goto memerr;
 8019e32:	e07c      	b.n	8019f2e <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8019e34:	68f8      	ldr	r0, [r7, #12]
 8019e36:	f7f5 fb7d 	bl	800f534 <pbuf_ref>
      pcr->original = p;
 8019e3a:	69bb      	ldr	r3, [r7, #24]
 8019e3c:	68fa      	ldr	r2, [r7, #12]
 8019e3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019e40:	69bb      	ldr	r3, [r7, #24]
 8019e42:	4a43      	ldr	r2, [pc, #268]	; (8019f50 <ip4_frag+0x298>)
 8019e44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019e46:	6979      	ldr	r1, [r7, #20]
 8019e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019e4a:	f7f5 fb9b 	bl	800f584 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019e4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019e52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019e56:	1ad3      	subs	r3, r2, r3
 8019e58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019e5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e60:	2b00      	cmp	r3, #0
 8019e62:	d004      	beq.n	8019e6e <ip4_frag+0x1b6>
        poff = 0;
 8019e64:	2300      	movs	r3, #0
 8019e66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019e6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	d196      	bne.n	8019da4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019e76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019e78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019e7c:	4413      	add	r3, r2
 8019e7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019e84:	f1a3 0213 	sub.w	r2, r3, #19
 8019e88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	bfcc      	ite	gt
 8019e90:	2301      	movgt	r3, #1
 8019e92:	2300      	movle	r3, #0
 8019e94:	b2db      	uxtb	r3, r3
 8019e96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019ea2:	6a3b      	ldr	r3, [r7, #32]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d002      	beq.n	8019eae <ip4_frag+0x1f6>
 8019ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d003      	beq.n	8019eb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019eae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019eb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019eb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019eb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7f3 fd73 	bl	800d9a4 <lwip_htons>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	461a      	mov	r2, r3
 8019ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ec4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019ec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019ec8:	3314      	adds	r3, #20
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	4618      	mov	r0, r3
 8019ece:	f7f3 fd69 	bl	800d9a4 <lwip_htons>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	461a      	mov	r2, r3
 8019ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ed8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019edc:	2200      	movs	r2, #0
 8019ede:	729a      	strb	r2, [r3, #10]
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8019ee4:	2114      	movs	r1, #20
 8019ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019ee8:	f7f3 fea4 	bl	800dc34 <inet_chksum>
 8019eec:	4603      	mov	r3, r0
 8019eee:	461a      	mov	r2, r3
 8019ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ef2:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019ef4:	68bb      	ldr	r3, [r7, #8]
 8019ef6:	695b      	ldr	r3, [r3, #20]
 8019ef8:	687a      	ldr	r2, [r7, #4]
 8019efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019efc:	68b8      	ldr	r0, [r7, #8]
 8019efe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f02:	f7f5 fa71 	bl	800f3e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019f06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019f0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019f0c:	1ad3      	subs	r3, r2, r3
 8019f0e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019f12:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019f16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019f18:	4413      	add	r3, r2
 8019f1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019f1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	f47f af11 	bne.w	8019d4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019f28:	2300      	movs	r3, #0
 8019f2a:	e002      	b.n	8019f32 <ip4_frag+0x27a>
      goto memerr;
 8019f2c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f32:	4618      	mov	r0, r3
 8019f34:	3748      	adds	r7, #72	; 0x48
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	08020750 	.word	0x08020750
 8019f40:	0802092c 	.word	0x0802092c
 8019f44:	08020798 	.word	0x08020798
 8019f48:	08020948 	.word	0x08020948
 8019f4c:	08020968 	.word	0x08020968
 8019f50:	08019c51 	.word	0x08019c51

08019f54 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019f54:	b580      	push	{r7, lr}
 8019f56:	b086      	sub	sp, #24
 8019f58:	af00      	add	r7, sp, #0
 8019f5a:	6078      	str	r0, [r7, #4]
 8019f5c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019f5e:	230e      	movs	r3, #14
 8019f60:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	895b      	ldrh	r3, [r3, #10]
 8019f66:	2b0e      	cmp	r3, #14
 8019f68:	d96e      	bls.n	801a048 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	7bdb      	ldrb	r3, [r3, #15]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d106      	bne.n	8019f80 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019f72:	683b      	ldr	r3, [r7, #0]
 8019f74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019f78:	3301      	adds	r3, #1
 8019f7a:	b2da      	uxtb	r2, r3
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	685b      	ldr	r3, [r3, #4]
 8019f84:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019f86:	693b      	ldr	r3, [r7, #16]
 8019f88:	7b1a      	ldrb	r2, [r3, #12]
 8019f8a:	7b5b      	ldrb	r3, [r3, #13]
 8019f8c:	021b      	lsls	r3, r3, #8
 8019f8e:	4313      	orrs	r3, r2
 8019f90:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019f92:	693b      	ldr	r3, [r7, #16]
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	f003 0301 	and.w	r3, r3, #1
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d023      	beq.n	8019fe6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	781b      	ldrb	r3, [r3, #0]
 8019fa2:	2b01      	cmp	r3, #1
 8019fa4:	d10f      	bne.n	8019fc6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	785b      	ldrb	r3, [r3, #1]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d11b      	bne.n	8019fe6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019fae:	693b      	ldr	r3, [r7, #16]
 8019fb0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019fb2:	2b5e      	cmp	r3, #94	; 0x5e
 8019fb4:	d117      	bne.n	8019fe6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	7b5b      	ldrb	r3, [r3, #13]
 8019fba:	f043 0310 	orr.w	r3, r3, #16
 8019fbe:	b2da      	uxtb	r2, r3
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	735a      	strb	r2, [r3, #13]
 8019fc4:	e00f      	b.n	8019fe6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019fc6:	693b      	ldr	r3, [r7, #16]
 8019fc8:	2206      	movs	r2, #6
 8019fca:	4928      	ldr	r1, [pc, #160]	; (801a06c <ethernet_input+0x118>)
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f001 f9b3 	bl	801b338 <memcmp>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d106      	bne.n	8019fe6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	7b5b      	ldrb	r3, [r3, #13]
 8019fdc:	f043 0308 	orr.w	r3, r3, #8
 8019fe0:	b2da      	uxtb	r2, r3
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019fe6:	89fb      	ldrh	r3, [r7, #14]
 8019fe8:	2b08      	cmp	r3, #8
 8019fea:	d003      	beq.n	8019ff4 <ethernet_input+0xa0>
 8019fec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019ff0:	d014      	beq.n	801a01c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019ff2:	e032      	b.n	801a05a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019ffa:	f003 0308 	and.w	r3, r3, #8
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d024      	beq.n	801a04c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a002:	8afb      	ldrh	r3, [r7, #22]
 801a004:	4619      	mov	r1, r3
 801a006:	6878      	ldr	r0, [r7, #4]
 801a008:	f7f5 f968 	bl	800f2dc <pbuf_remove_header>
 801a00c:	4603      	mov	r3, r0
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d11e      	bne.n	801a050 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a012:	6839      	ldr	r1, [r7, #0]
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f7fe fe81 	bl	8018d1c <ip4_input>
      break;
 801a01a:	e013      	b.n	801a044 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a01c:	683b      	ldr	r3, [r7, #0]
 801a01e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a022:	f003 0308 	and.w	r3, r3, #8
 801a026:	2b00      	cmp	r3, #0
 801a028:	d014      	beq.n	801a054 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a02a:	8afb      	ldrh	r3, [r7, #22]
 801a02c:	4619      	mov	r1, r3
 801a02e:	6878      	ldr	r0, [r7, #4]
 801a030:	f7f5 f954 	bl	800f2dc <pbuf_remove_header>
 801a034:	4603      	mov	r3, r0
 801a036:	2b00      	cmp	r3, #0
 801a038:	d10e      	bne.n	801a058 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a03a:	6839      	ldr	r1, [r7, #0]
 801a03c:	6878      	ldr	r0, [r7, #4]
 801a03e:	f7fd ffe9 	bl	8018014 <etharp_input>
      break;
 801a042:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a044:	2300      	movs	r3, #0
 801a046:	e00c      	b.n	801a062 <ethernet_input+0x10e>
    goto free_and_return;
 801a048:	bf00      	nop
 801a04a:	e006      	b.n	801a05a <ethernet_input+0x106>
        goto free_and_return;
 801a04c:	bf00      	nop
 801a04e:	e004      	b.n	801a05a <ethernet_input+0x106>
        goto free_and_return;
 801a050:	bf00      	nop
 801a052:	e002      	b.n	801a05a <ethernet_input+0x106>
        goto free_and_return;
 801a054:	bf00      	nop
 801a056:	e000      	b.n	801a05a <ethernet_input+0x106>
        goto free_and_return;
 801a058:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a05a:	6878      	ldr	r0, [r7, #4]
 801a05c:	f7f5 f9c4 	bl	800f3e8 <pbuf_free>
  return ERR_OK;
 801a060:	2300      	movs	r3, #0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3718      	adds	r7, #24
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
 801a06a:	bf00      	nop
 801a06c:	0806c808 	.word	0x0806c808

0801a070 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a070:	b580      	push	{r7, lr}
 801a072:	b086      	sub	sp, #24
 801a074:	af00      	add	r7, sp, #0
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	60b9      	str	r1, [r7, #8]
 801a07a:	607a      	str	r2, [r7, #4]
 801a07c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a07e:	8c3b      	ldrh	r3, [r7, #32]
 801a080:	4618      	mov	r0, r3
 801a082:	f7f3 fc8f 	bl	800d9a4 <lwip_htons>
 801a086:	4603      	mov	r3, r0
 801a088:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a08a:	210e      	movs	r1, #14
 801a08c:	68b8      	ldr	r0, [r7, #8]
 801a08e:	f7f5 f915 	bl	800f2bc <pbuf_add_header>
 801a092:	4603      	mov	r3, r0
 801a094:	2b00      	cmp	r3, #0
 801a096:	d125      	bne.n	801a0e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a09e:	693b      	ldr	r3, [r7, #16]
 801a0a0:	8afa      	ldrh	r2, [r7, #22]
 801a0a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a0a4:	693b      	ldr	r3, [r7, #16]
 801a0a6:	2206      	movs	r2, #6
 801a0a8:	6839      	ldr	r1, [r7, #0]
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f001 fa11 	bl	801b4d2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a0b0:	693b      	ldr	r3, [r7, #16]
 801a0b2:	3306      	adds	r3, #6
 801a0b4:	2206      	movs	r2, #6
 801a0b6:	6879      	ldr	r1, [r7, #4]
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f001 fa0a 	bl	801b4d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a0c4:	2b06      	cmp	r3, #6
 801a0c6:	d006      	beq.n	801a0d6 <ethernet_output+0x66>
 801a0c8:	4b0a      	ldr	r3, [pc, #40]	; (801a0f4 <ethernet_output+0x84>)
 801a0ca:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a0ce:	490a      	ldr	r1, [pc, #40]	; (801a0f8 <ethernet_output+0x88>)
 801a0d0:	480a      	ldr	r0, [pc, #40]	; (801a0fc <ethernet_output+0x8c>)
 801a0d2:	f000 ffdf 	bl	801b094 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	699b      	ldr	r3, [r3, #24]
 801a0da:	68b9      	ldr	r1, [r7, #8]
 801a0dc:	68f8      	ldr	r0, [r7, #12]
 801a0de:	4798      	blx	r3
 801a0e0:	4603      	mov	r3, r0
 801a0e2:	e002      	b.n	801a0ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a0e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a0e6:	f06f 0301 	mvn.w	r3, #1
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	3718      	adds	r7, #24
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	08020978 	.word	0x08020978
 801a0f8:	080209b0 	.word	0x080209b0
 801a0fc:	080209e4 	.word	0x080209e4

0801a100 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b084      	sub	sp, #16
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
 801a108:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	60bb      	str	r3, [r7, #8]
 801a10e:	2304      	movs	r3, #4
 801a110:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a112:	f107 0308 	add.w	r3, r7, #8
 801a116:	2100      	movs	r1, #0
 801a118:	4618      	mov	r0, r3
 801a11a:	f7ef ff2e 	bl	8009f7a <osMessageCreate>
 801a11e:	4602      	mov	r2, r0
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	681b      	ldr	r3, [r3, #0]
 801a128:	2b00      	cmp	r3, #0
 801a12a:	d102      	bne.n	801a132 <sys_mbox_new+0x32>
  return ERR_MEM;
 801a12c:	f04f 33ff 	mov.w	r3, #4294967295
 801a130:	e000      	b.n	801a134 <sys_mbox_new+0x34>
 
 return ERR_OK;
 801a132:	2300      	movs	r3, #0
}
 801a134:	4618      	mov	r0, r3
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b082      	sub	sp, #8
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801a146:	bf00      	nop
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	6839      	ldr	r1, [r7, #0]
 801a14e:	f04f 32ff 	mov.w	r2, #4294967295
 801a152:	4618      	mov	r0, r3
 801a154:	f7ef ff24 	bl	8009fa0 <osMessagePut>
 801a158:	4603      	mov	r3, r0
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d1f4      	bne.n	801a148 <sys_mbox_post+0xc>
}
 801a15e:	bf00      	nop
 801a160:	bf00      	nop
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
 801a170:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	6839      	ldr	r1, [r7, #0]
 801a178:	2200      	movs	r2, #0
 801a17a:	4618      	mov	r0, r3
 801a17c:	f7ef ff10 	bl	8009fa0 <osMessagePut>
 801a180:	4603      	mov	r3, r0
 801a182:	2b00      	cmp	r3, #0
 801a184:	d102      	bne.n	801a18c <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 801a186:	2300      	movs	r3, #0
 801a188:	73fb      	strb	r3, [r7, #15]
 801a18a:	e001      	b.n	801a190 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 801a18c:	23ff      	movs	r3, #255	; 0xff
 801a18e:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 801a190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a194:	4618      	mov	r0, r3
 801a196:	3710      	adds	r7, #16
 801a198:	46bd      	mov	sp, r7
 801a19a:	bd80      	pop	{r7, pc}

0801a19c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a19c:	b580      	push	{r7, lr}
 801a19e:	b08c      	sub	sp, #48	; 0x30
 801a1a0:	af00      	add	r7, sp, #0
 801a1a2:	61f8      	str	r0, [r7, #28]
 801a1a4:	61b9      	str	r1, [r7, #24]
 801a1a6:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 801a1a8:	f7ef fdeb 	bl	8009d82 <osKernelSysTick>
 801a1ac:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 801a1ae:	697b      	ldr	r3, [r7, #20]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d017      	beq.n	801a1e4 <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 801a1b4:	69fb      	ldr	r3, [r7, #28]
 801a1b6:	6819      	ldr	r1, [r3, #0]
 801a1b8:	f107 0320 	add.w	r3, r7, #32
 801a1bc:	697a      	ldr	r2, [r7, #20]
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7ef ff30 	bl	800a024 <osMessageGet>
    
    if(event.status == osEventMessage)
 801a1c4:	6a3b      	ldr	r3, [r7, #32]
 801a1c6:	2b10      	cmp	r3, #16
 801a1c8:	d109      	bne.n	801a1de <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	69bb      	ldr	r3, [r7, #24]
 801a1d0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a1d2:	f7ef fdd6 	bl	8009d82 <osKernelSysTick>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1da:	1ad3      	subs	r3, r2, r3
 801a1dc:	e019      	b.n	801a212 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a1de:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e2:	e016      	b.n	801a212 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 801a1e4:	69fb      	ldr	r3, [r7, #28]
 801a1e6:	6819      	ldr	r1, [r3, #0]
 801a1e8:	463b      	mov	r3, r7
 801a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7ef ff18 	bl	800a024 <osMessageGet>
 801a1f4:	f107 0320 	add.w	r3, r7, #32
 801a1f8:	463a      	mov	r2, r7
 801a1fa:	ca07      	ldmia	r2, {r0, r1, r2}
 801a1fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a202:	461a      	mov	r2, r3
 801a204:	69bb      	ldr	r3, [r7, #24]
 801a206:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a208:	f7ef fdbb 	bl	8009d82 <osKernelSysTick>
 801a20c:	4602      	mov	r2, r0
 801a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a210:	1ad3      	subs	r3, r2, r3
  }
}
 801a212:	4618      	mov	r0, r3
 801a214:	3730      	adds	r7, #48	; 0x30
 801a216:	46bd      	mov	sp, r7
 801a218:	bd80      	pop	{r7, pc}

0801a21a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 801a21a:	b480      	push	{r7}
 801a21c:	b083      	sub	sp, #12
 801a21e:	af00      	add	r7, sp, #0
 801a220:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	2b00      	cmp	r3, #0
 801a228:	d101      	bne.n	801a22e <sys_mbox_valid+0x14>
    return 0;
 801a22a:	2300      	movs	r3, #0
 801a22c:	e000      	b.n	801a230 <sys_mbox_valid+0x16>
  else
    return 1;
 801a22e:	2301      	movs	r3, #1
}                                             
 801a230:	4618      	mov	r0, r3
 801a232:	370c      	adds	r7, #12
 801a234:	46bd      	mov	sp, r7
 801a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a23a:	4770      	bx	lr

0801a23c <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 801a23c:	b580      	push	{r7, lr}
 801a23e:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a240:	4803      	ldr	r0, [pc, #12]	; (801a250 <sys_init+0x14>)
 801a242:	f7ef fdf6 	bl	8009e32 <osMutexCreate>
 801a246:	4603      	mov	r3, r0
 801a248:	4a02      	ldr	r2, [pc, #8]	; (801a254 <sys_init+0x18>)
 801a24a:	6013      	str	r3, [r2, #0]
}
 801a24c:	bf00      	nop
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	0806c818 	.word	0x0806c818
 801a254:	20013f04 	.word	0x20013f04

0801a258 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a258:	b580      	push	{r7, lr}
 801a25a:	b084      	sub	sp, #16
 801a25c:	af00      	add	r7, sp, #0
 801a25e:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 801a260:	2300      	movs	r3, #0
 801a262:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a264:	f107 030c 	add.w	r3, r7, #12
 801a268:	4618      	mov	r0, r3
 801a26a:	f7ef fde2 	bl	8009e32 <osMutexCreate>
 801a26e:	4602      	mov	r2, r0
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d102      	bne.n	801a282 <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 801a27c:	f04f 33ff 	mov.w	r3, #4294967295
 801a280:	e000      	b.n	801a284 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a282:	2300      	movs	r3, #0
}
 801a284:	4618      	mov	r0, r3
 801a286:	3710      	adds	r7, #16
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b082      	sub	sp, #8
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f04f 31ff 	mov.w	r1, #4294967295
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7ef fdd5 	bl	8009e4c <osMutexWait>
}
 801a2a2:	bf00      	nop
 801a2a4:	3708      	adds	r7, #8
 801a2a6:	46bd      	mov	sp, r7
 801a2a8:	bd80      	pop	{r7, pc}

0801a2aa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a2aa:	b580      	push	{r7, lr}
 801a2ac:	b082      	sub	sp, #8
 801a2ae:	af00      	add	r7, sp, #0
 801a2b0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f7ef fe16 	bl	8009ee8 <osMutexRelease>
}
 801a2bc:	bf00      	nop
 801a2be:	3708      	adds	r7, #8
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd80      	pop	{r7, pc}

0801a2c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b08a      	sub	sp, #40	; 0x28
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	60f8      	str	r0, [r7, #12]
 801a2cc:	60b9      	str	r1, [r7, #8]
 801a2ce:	607a      	str	r2, [r7, #4]
 801a2d0:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	617b      	str	r3, [r7, #20]
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	61bb      	str	r3, [r7, #24]
 801a2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2dc:	b21b      	sxth	r3, r3
 801a2de:	83bb      	strh	r3, [r7, #28]
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	623b      	str	r3, [r7, #32]
 801a2e4:	683b      	ldr	r3, [r7, #0]
 801a2e6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a2e8:	f107 0314 	add.w	r3, r7, #20
 801a2ec:	6879      	ldr	r1, [r7, #4]
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7ef fd57 	bl	8009da2 <osThreadCreate>
 801a2f4:	4603      	mov	r3, r0
}
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	3728      	adds	r7, #40	; 0x28
 801a2fa:	46bd      	mov	sp, r7
 801a2fc:	bd80      	pop	{r7, pc}
	...

0801a300 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a300:	b580      	push	{r7, lr}
 801a302:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a304:	4b04      	ldr	r3, [pc, #16]	; (801a318 <sys_arch_protect+0x18>)
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	f04f 31ff 	mov.w	r1, #4294967295
 801a30c:	4618      	mov	r0, r3
 801a30e:	f7ef fd9d 	bl	8009e4c <osMutexWait>
  return (sys_prot_t)1;
 801a312:	2301      	movs	r3, #1
}
 801a314:	4618      	mov	r0, r3
 801a316:	bd80      	pop	{r7, pc}
 801a318:	20013f04 	.word	0x20013f04

0801a31c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b082      	sub	sp, #8
 801a320:	af00      	add	r7, sp, #0
 801a322:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a324:	4b04      	ldr	r3, [pc, #16]	; (801a338 <sys_arch_unprotect+0x1c>)
 801a326:	681b      	ldr	r3, [r3, #0]
 801a328:	4618      	mov	r0, r3
 801a32a:	f7ef fddd 	bl	8009ee8 <osMutexRelease>
}
 801a32e:	bf00      	nop
 801a330:	3708      	adds	r7, #8
 801a332:	46bd      	mov	sp, r7
 801a334:	bd80      	pop	{r7, pc}
 801a336:	bf00      	nop
 801a338:	20013f04 	.word	0x20013f04

0801a33c <_calloc_r>:
 801a33c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a33e:	fba1 2402 	umull	r2, r4, r1, r2
 801a342:	b94c      	cbnz	r4, 801a358 <_calloc_r+0x1c>
 801a344:	4611      	mov	r1, r2
 801a346:	9201      	str	r2, [sp, #4]
 801a348:	f000 f836 	bl	801a3b8 <_malloc_r>
 801a34c:	9a01      	ldr	r2, [sp, #4]
 801a34e:	4605      	mov	r5, r0
 801a350:	b930      	cbnz	r0, 801a360 <_calloc_r+0x24>
 801a352:	4628      	mov	r0, r5
 801a354:	b003      	add	sp, #12
 801a356:	bd30      	pop	{r4, r5, pc}
 801a358:	220c      	movs	r2, #12
 801a35a:	6002      	str	r2, [r0, #0]
 801a35c:	2500      	movs	r5, #0
 801a35e:	e7f8      	b.n	801a352 <_calloc_r+0x16>
 801a360:	4621      	mov	r1, r4
 801a362:	f000 fff9 	bl	801b358 <memset>
 801a366:	e7f4      	b.n	801a352 <_calloc_r+0x16>

0801a368 <malloc>:
 801a368:	4b02      	ldr	r3, [pc, #8]	; (801a374 <malloc+0xc>)
 801a36a:	4601      	mov	r1, r0
 801a36c:	6818      	ldr	r0, [r3, #0]
 801a36e:	f000 b823 	b.w	801a3b8 <_malloc_r>
 801a372:	bf00      	nop
 801a374:	20000118 	.word	0x20000118

0801a378 <sbrk_aligned>:
 801a378:	b570      	push	{r4, r5, r6, lr}
 801a37a:	4e0e      	ldr	r6, [pc, #56]	; (801a3b4 <sbrk_aligned+0x3c>)
 801a37c:	460c      	mov	r4, r1
 801a37e:	6831      	ldr	r1, [r6, #0]
 801a380:	4605      	mov	r5, r0
 801a382:	b911      	cbnz	r1, 801a38a <sbrk_aligned+0x12>
 801a384:	f001 f84e 	bl	801b424 <_sbrk_r>
 801a388:	6030      	str	r0, [r6, #0]
 801a38a:	4621      	mov	r1, r4
 801a38c:	4628      	mov	r0, r5
 801a38e:	f001 f849 	bl	801b424 <_sbrk_r>
 801a392:	1c43      	adds	r3, r0, #1
 801a394:	d00a      	beq.n	801a3ac <sbrk_aligned+0x34>
 801a396:	1cc4      	adds	r4, r0, #3
 801a398:	f024 0403 	bic.w	r4, r4, #3
 801a39c:	42a0      	cmp	r0, r4
 801a39e:	d007      	beq.n	801a3b0 <sbrk_aligned+0x38>
 801a3a0:	1a21      	subs	r1, r4, r0
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	f001 f83e 	bl	801b424 <_sbrk_r>
 801a3a8:	3001      	adds	r0, #1
 801a3aa:	d101      	bne.n	801a3b0 <sbrk_aligned+0x38>
 801a3ac:	f04f 34ff 	mov.w	r4, #4294967295
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	bd70      	pop	{r4, r5, r6, pc}
 801a3b4:	20013f0c 	.word	0x20013f0c

0801a3b8 <_malloc_r>:
 801a3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3bc:	1ccd      	adds	r5, r1, #3
 801a3be:	f025 0503 	bic.w	r5, r5, #3
 801a3c2:	3508      	adds	r5, #8
 801a3c4:	2d0c      	cmp	r5, #12
 801a3c6:	bf38      	it	cc
 801a3c8:	250c      	movcc	r5, #12
 801a3ca:	2d00      	cmp	r5, #0
 801a3cc:	4607      	mov	r7, r0
 801a3ce:	db01      	blt.n	801a3d4 <_malloc_r+0x1c>
 801a3d0:	42a9      	cmp	r1, r5
 801a3d2:	d905      	bls.n	801a3e0 <_malloc_r+0x28>
 801a3d4:	230c      	movs	r3, #12
 801a3d6:	603b      	str	r3, [r7, #0]
 801a3d8:	2600      	movs	r6, #0
 801a3da:	4630      	mov	r0, r6
 801a3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a4b4 <_malloc_r+0xfc>
 801a3e4:	f000 f868 	bl	801a4b8 <__malloc_lock>
 801a3e8:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ec:	461c      	mov	r4, r3
 801a3ee:	bb5c      	cbnz	r4, 801a448 <_malloc_r+0x90>
 801a3f0:	4629      	mov	r1, r5
 801a3f2:	4638      	mov	r0, r7
 801a3f4:	f7ff ffc0 	bl	801a378 <sbrk_aligned>
 801a3f8:	1c43      	adds	r3, r0, #1
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	d155      	bne.n	801a4aa <_malloc_r+0xf2>
 801a3fe:	f8d8 4000 	ldr.w	r4, [r8]
 801a402:	4626      	mov	r6, r4
 801a404:	2e00      	cmp	r6, #0
 801a406:	d145      	bne.n	801a494 <_malloc_r+0xdc>
 801a408:	2c00      	cmp	r4, #0
 801a40a:	d048      	beq.n	801a49e <_malloc_r+0xe6>
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	4631      	mov	r1, r6
 801a410:	4638      	mov	r0, r7
 801a412:	eb04 0903 	add.w	r9, r4, r3
 801a416:	f001 f805 	bl	801b424 <_sbrk_r>
 801a41a:	4581      	cmp	r9, r0
 801a41c:	d13f      	bne.n	801a49e <_malloc_r+0xe6>
 801a41e:	6821      	ldr	r1, [r4, #0]
 801a420:	1a6d      	subs	r5, r5, r1
 801a422:	4629      	mov	r1, r5
 801a424:	4638      	mov	r0, r7
 801a426:	f7ff ffa7 	bl	801a378 <sbrk_aligned>
 801a42a:	3001      	adds	r0, #1
 801a42c:	d037      	beq.n	801a49e <_malloc_r+0xe6>
 801a42e:	6823      	ldr	r3, [r4, #0]
 801a430:	442b      	add	r3, r5
 801a432:	6023      	str	r3, [r4, #0]
 801a434:	f8d8 3000 	ldr.w	r3, [r8]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d038      	beq.n	801a4ae <_malloc_r+0xf6>
 801a43c:	685a      	ldr	r2, [r3, #4]
 801a43e:	42a2      	cmp	r2, r4
 801a440:	d12b      	bne.n	801a49a <_malloc_r+0xe2>
 801a442:	2200      	movs	r2, #0
 801a444:	605a      	str	r2, [r3, #4]
 801a446:	e00f      	b.n	801a468 <_malloc_r+0xb0>
 801a448:	6822      	ldr	r2, [r4, #0]
 801a44a:	1b52      	subs	r2, r2, r5
 801a44c:	d41f      	bmi.n	801a48e <_malloc_r+0xd6>
 801a44e:	2a0b      	cmp	r2, #11
 801a450:	d917      	bls.n	801a482 <_malloc_r+0xca>
 801a452:	1961      	adds	r1, r4, r5
 801a454:	42a3      	cmp	r3, r4
 801a456:	6025      	str	r5, [r4, #0]
 801a458:	bf18      	it	ne
 801a45a:	6059      	strne	r1, [r3, #4]
 801a45c:	6863      	ldr	r3, [r4, #4]
 801a45e:	bf08      	it	eq
 801a460:	f8c8 1000 	streq.w	r1, [r8]
 801a464:	5162      	str	r2, [r4, r5]
 801a466:	604b      	str	r3, [r1, #4]
 801a468:	4638      	mov	r0, r7
 801a46a:	f104 060b 	add.w	r6, r4, #11
 801a46e:	f000 f829 	bl	801a4c4 <__malloc_unlock>
 801a472:	f026 0607 	bic.w	r6, r6, #7
 801a476:	1d23      	adds	r3, r4, #4
 801a478:	1af2      	subs	r2, r6, r3
 801a47a:	d0ae      	beq.n	801a3da <_malloc_r+0x22>
 801a47c:	1b9b      	subs	r3, r3, r6
 801a47e:	50a3      	str	r3, [r4, r2]
 801a480:	e7ab      	b.n	801a3da <_malloc_r+0x22>
 801a482:	42a3      	cmp	r3, r4
 801a484:	6862      	ldr	r2, [r4, #4]
 801a486:	d1dd      	bne.n	801a444 <_malloc_r+0x8c>
 801a488:	f8c8 2000 	str.w	r2, [r8]
 801a48c:	e7ec      	b.n	801a468 <_malloc_r+0xb0>
 801a48e:	4623      	mov	r3, r4
 801a490:	6864      	ldr	r4, [r4, #4]
 801a492:	e7ac      	b.n	801a3ee <_malloc_r+0x36>
 801a494:	4634      	mov	r4, r6
 801a496:	6876      	ldr	r6, [r6, #4]
 801a498:	e7b4      	b.n	801a404 <_malloc_r+0x4c>
 801a49a:	4613      	mov	r3, r2
 801a49c:	e7cc      	b.n	801a438 <_malloc_r+0x80>
 801a49e:	230c      	movs	r3, #12
 801a4a0:	603b      	str	r3, [r7, #0]
 801a4a2:	4638      	mov	r0, r7
 801a4a4:	f000 f80e 	bl	801a4c4 <__malloc_unlock>
 801a4a8:	e797      	b.n	801a3da <_malloc_r+0x22>
 801a4aa:	6025      	str	r5, [r4, #0]
 801a4ac:	e7dc      	b.n	801a468 <_malloc_r+0xb0>
 801a4ae:	605b      	str	r3, [r3, #4]
 801a4b0:	deff      	udf	#255	; 0xff
 801a4b2:	bf00      	nop
 801a4b4:	20013f08 	.word	0x20013f08

0801a4b8 <__malloc_lock>:
 801a4b8:	4801      	ldr	r0, [pc, #4]	; (801a4c0 <__malloc_lock+0x8>)
 801a4ba:	f001 b800 	b.w	801b4be <__retarget_lock_acquire_recursive>
 801a4be:	bf00      	nop
 801a4c0:	20014050 	.word	0x20014050

0801a4c4 <__malloc_unlock>:
 801a4c4:	4801      	ldr	r0, [pc, #4]	; (801a4cc <__malloc_unlock+0x8>)
 801a4c6:	f000 bffb 	b.w	801b4c0 <__retarget_lock_release_recursive>
 801a4ca:	bf00      	nop
 801a4cc:	20014050 	.word	0x20014050

0801a4d0 <rand>:
 801a4d0:	4b16      	ldr	r3, [pc, #88]	; (801a52c <rand+0x5c>)
 801a4d2:	b510      	push	{r4, lr}
 801a4d4:	681c      	ldr	r4, [r3, #0]
 801a4d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a4d8:	b9b3      	cbnz	r3, 801a508 <rand+0x38>
 801a4da:	2018      	movs	r0, #24
 801a4dc:	f7ff ff44 	bl	801a368 <malloc>
 801a4e0:	4602      	mov	r2, r0
 801a4e2:	6320      	str	r0, [r4, #48]	; 0x30
 801a4e4:	b920      	cbnz	r0, 801a4f0 <rand+0x20>
 801a4e6:	4b12      	ldr	r3, [pc, #72]	; (801a530 <rand+0x60>)
 801a4e8:	4812      	ldr	r0, [pc, #72]	; (801a534 <rand+0x64>)
 801a4ea:	2152      	movs	r1, #82	; 0x52
 801a4ec:	f001 f800 	bl	801b4f0 <__assert_func>
 801a4f0:	4911      	ldr	r1, [pc, #68]	; (801a538 <rand+0x68>)
 801a4f2:	4b12      	ldr	r3, [pc, #72]	; (801a53c <rand+0x6c>)
 801a4f4:	e9c0 1300 	strd	r1, r3, [r0]
 801a4f8:	4b11      	ldr	r3, [pc, #68]	; (801a540 <rand+0x70>)
 801a4fa:	6083      	str	r3, [r0, #8]
 801a4fc:	230b      	movs	r3, #11
 801a4fe:	8183      	strh	r3, [r0, #12]
 801a500:	2100      	movs	r1, #0
 801a502:	2001      	movs	r0, #1
 801a504:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a508:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a50a:	480e      	ldr	r0, [pc, #56]	; (801a544 <rand+0x74>)
 801a50c:	690b      	ldr	r3, [r1, #16]
 801a50e:	694c      	ldr	r4, [r1, #20]
 801a510:	4a0d      	ldr	r2, [pc, #52]	; (801a548 <rand+0x78>)
 801a512:	4358      	muls	r0, r3
 801a514:	fb02 0004 	mla	r0, r2, r4, r0
 801a518:	fba3 3202 	umull	r3, r2, r3, r2
 801a51c:	3301      	adds	r3, #1
 801a51e:	eb40 0002 	adc.w	r0, r0, r2
 801a522:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a526:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a52a:	bd10      	pop	{r4, pc}
 801a52c:	20000118 	.word	0x20000118
 801a530:	0806c81c 	.word	0x0806c81c
 801a534:	0806c833 	.word	0x0806c833
 801a538:	abcd330e 	.word	0xabcd330e
 801a53c:	e66d1234 	.word	0xe66d1234
 801a540:	0005deec 	.word	0x0005deec
 801a544:	5851f42d 	.word	0x5851f42d
 801a548:	4c957f2d 	.word	0x4c957f2d

0801a54c <_strtoul_l.constprop.0>:
 801a54c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a550:	4f36      	ldr	r7, [pc, #216]	; (801a62c <_strtoul_l.constprop.0+0xe0>)
 801a552:	4686      	mov	lr, r0
 801a554:	460d      	mov	r5, r1
 801a556:	4628      	mov	r0, r5
 801a558:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a55c:	5d3e      	ldrb	r6, [r7, r4]
 801a55e:	f016 0608 	ands.w	r6, r6, #8
 801a562:	d1f8      	bne.n	801a556 <_strtoul_l.constprop.0+0xa>
 801a564:	2c2d      	cmp	r4, #45	; 0x2d
 801a566:	d130      	bne.n	801a5ca <_strtoul_l.constprop.0+0x7e>
 801a568:	782c      	ldrb	r4, [r5, #0]
 801a56a:	2601      	movs	r6, #1
 801a56c:	1c85      	adds	r5, r0, #2
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d057      	beq.n	801a622 <_strtoul_l.constprop.0+0xd6>
 801a572:	2b10      	cmp	r3, #16
 801a574:	d109      	bne.n	801a58a <_strtoul_l.constprop.0+0x3e>
 801a576:	2c30      	cmp	r4, #48	; 0x30
 801a578:	d107      	bne.n	801a58a <_strtoul_l.constprop.0+0x3e>
 801a57a:	7828      	ldrb	r0, [r5, #0]
 801a57c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a580:	2858      	cmp	r0, #88	; 0x58
 801a582:	d149      	bne.n	801a618 <_strtoul_l.constprop.0+0xcc>
 801a584:	786c      	ldrb	r4, [r5, #1]
 801a586:	2310      	movs	r3, #16
 801a588:	3502      	adds	r5, #2
 801a58a:	f04f 38ff 	mov.w	r8, #4294967295
 801a58e:	2700      	movs	r7, #0
 801a590:	fbb8 f8f3 	udiv	r8, r8, r3
 801a594:	fb03 f908 	mul.w	r9, r3, r8
 801a598:	ea6f 0909 	mvn.w	r9, r9
 801a59c:	4638      	mov	r0, r7
 801a59e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a5a2:	f1bc 0f09 	cmp.w	ip, #9
 801a5a6:	d815      	bhi.n	801a5d4 <_strtoul_l.constprop.0+0x88>
 801a5a8:	4664      	mov	r4, ip
 801a5aa:	42a3      	cmp	r3, r4
 801a5ac:	dd23      	ble.n	801a5f6 <_strtoul_l.constprop.0+0xaa>
 801a5ae:	f1b7 3fff 	cmp.w	r7, #4294967295
 801a5b2:	d007      	beq.n	801a5c4 <_strtoul_l.constprop.0+0x78>
 801a5b4:	4580      	cmp	r8, r0
 801a5b6:	d31b      	bcc.n	801a5f0 <_strtoul_l.constprop.0+0xa4>
 801a5b8:	d101      	bne.n	801a5be <_strtoul_l.constprop.0+0x72>
 801a5ba:	45a1      	cmp	r9, r4
 801a5bc:	db18      	blt.n	801a5f0 <_strtoul_l.constprop.0+0xa4>
 801a5be:	fb00 4003 	mla	r0, r0, r3, r4
 801a5c2:	2701      	movs	r7, #1
 801a5c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a5c8:	e7e9      	b.n	801a59e <_strtoul_l.constprop.0+0x52>
 801a5ca:	2c2b      	cmp	r4, #43	; 0x2b
 801a5cc:	bf04      	itt	eq
 801a5ce:	782c      	ldrbeq	r4, [r5, #0]
 801a5d0:	1c85      	addeq	r5, r0, #2
 801a5d2:	e7cc      	b.n	801a56e <_strtoul_l.constprop.0+0x22>
 801a5d4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a5d8:	f1bc 0f19 	cmp.w	ip, #25
 801a5dc:	d801      	bhi.n	801a5e2 <_strtoul_l.constprop.0+0x96>
 801a5de:	3c37      	subs	r4, #55	; 0x37
 801a5e0:	e7e3      	b.n	801a5aa <_strtoul_l.constprop.0+0x5e>
 801a5e2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a5e6:	f1bc 0f19 	cmp.w	ip, #25
 801a5ea:	d804      	bhi.n	801a5f6 <_strtoul_l.constprop.0+0xaa>
 801a5ec:	3c57      	subs	r4, #87	; 0x57
 801a5ee:	e7dc      	b.n	801a5aa <_strtoul_l.constprop.0+0x5e>
 801a5f0:	f04f 37ff 	mov.w	r7, #4294967295
 801a5f4:	e7e6      	b.n	801a5c4 <_strtoul_l.constprop.0+0x78>
 801a5f6:	1c7b      	adds	r3, r7, #1
 801a5f8:	d106      	bne.n	801a608 <_strtoul_l.constprop.0+0xbc>
 801a5fa:	2322      	movs	r3, #34	; 0x22
 801a5fc:	f8ce 3000 	str.w	r3, [lr]
 801a600:	4638      	mov	r0, r7
 801a602:	b932      	cbnz	r2, 801a612 <_strtoul_l.constprop.0+0xc6>
 801a604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a608:	b106      	cbz	r6, 801a60c <_strtoul_l.constprop.0+0xc0>
 801a60a:	4240      	negs	r0, r0
 801a60c:	2a00      	cmp	r2, #0
 801a60e:	d0f9      	beq.n	801a604 <_strtoul_l.constprop.0+0xb8>
 801a610:	b107      	cbz	r7, 801a614 <_strtoul_l.constprop.0+0xc8>
 801a612:	1e69      	subs	r1, r5, #1
 801a614:	6011      	str	r1, [r2, #0]
 801a616:	e7f5      	b.n	801a604 <_strtoul_l.constprop.0+0xb8>
 801a618:	2430      	movs	r4, #48	; 0x30
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d1b5      	bne.n	801a58a <_strtoul_l.constprop.0+0x3e>
 801a61e:	2308      	movs	r3, #8
 801a620:	e7b3      	b.n	801a58a <_strtoul_l.constprop.0+0x3e>
 801a622:	2c30      	cmp	r4, #48	; 0x30
 801a624:	d0a9      	beq.n	801a57a <_strtoul_l.constprop.0+0x2e>
 801a626:	230a      	movs	r3, #10
 801a628:	e7af      	b.n	801a58a <_strtoul_l.constprop.0+0x3e>
 801a62a:	bf00      	nop
 801a62c:	0806c88c 	.word	0x0806c88c

0801a630 <strtoul>:
 801a630:	4613      	mov	r3, r2
 801a632:	460a      	mov	r2, r1
 801a634:	4601      	mov	r1, r0
 801a636:	4802      	ldr	r0, [pc, #8]	; (801a640 <strtoul+0x10>)
 801a638:	6800      	ldr	r0, [r0, #0]
 801a63a:	f7ff bf87 	b.w	801a54c <_strtoul_l.constprop.0>
 801a63e:	bf00      	nop
 801a640:	20000118 	.word	0x20000118

0801a644 <__cvt>:
 801a644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a648:	ec55 4b10 	vmov	r4, r5, d0
 801a64c:	2d00      	cmp	r5, #0
 801a64e:	460e      	mov	r6, r1
 801a650:	4619      	mov	r1, r3
 801a652:	462b      	mov	r3, r5
 801a654:	bfbb      	ittet	lt
 801a656:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a65a:	461d      	movlt	r5, r3
 801a65c:	2300      	movge	r3, #0
 801a65e:	232d      	movlt	r3, #45	; 0x2d
 801a660:	700b      	strb	r3, [r1, #0]
 801a662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a664:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a668:	4691      	mov	r9, r2
 801a66a:	f023 0820 	bic.w	r8, r3, #32
 801a66e:	bfbc      	itt	lt
 801a670:	4622      	movlt	r2, r4
 801a672:	4614      	movlt	r4, r2
 801a674:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a678:	d005      	beq.n	801a686 <__cvt+0x42>
 801a67a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a67e:	d100      	bne.n	801a682 <__cvt+0x3e>
 801a680:	3601      	adds	r6, #1
 801a682:	2102      	movs	r1, #2
 801a684:	e000      	b.n	801a688 <__cvt+0x44>
 801a686:	2103      	movs	r1, #3
 801a688:	ab03      	add	r3, sp, #12
 801a68a:	9301      	str	r3, [sp, #4]
 801a68c:	ab02      	add	r3, sp, #8
 801a68e:	9300      	str	r3, [sp, #0]
 801a690:	ec45 4b10 	vmov	d0, r4, r5
 801a694:	4653      	mov	r3, sl
 801a696:	4632      	mov	r2, r6
 801a698:	f000 ffd2 	bl	801b640 <_dtoa_r>
 801a69c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a6a0:	4607      	mov	r7, r0
 801a6a2:	d102      	bne.n	801a6aa <__cvt+0x66>
 801a6a4:	f019 0f01 	tst.w	r9, #1
 801a6a8:	d022      	beq.n	801a6f0 <__cvt+0xac>
 801a6aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a6ae:	eb07 0906 	add.w	r9, r7, r6
 801a6b2:	d110      	bne.n	801a6d6 <__cvt+0x92>
 801a6b4:	783b      	ldrb	r3, [r7, #0]
 801a6b6:	2b30      	cmp	r3, #48	; 0x30
 801a6b8:	d10a      	bne.n	801a6d0 <__cvt+0x8c>
 801a6ba:	2200      	movs	r2, #0
 801a6bc:	2300      	movs	r3, #0
 801a6be:	4620      	mov	r0, r4
 801a6c0:	4629      	mov	r1, r5
 801a6c2:	f7e6 fa19 	bl	8000af8 <__aeabi_dcmpeq>
 801a6c6:	b918      	cbnz	r0, 801a6d0 <__cvt+0x8c>
 801a6c8:	f1c6 0601 	rsb	r6, r6, #1
 801a6cc:	f8ca 6000 	str.w	r6, [sl]
 801a6d0:	f8da 3000 	ldr.w	r3, [sl]
 801a6d4:	4499      	add	r9, r3
 801a6d6:	2200      	movs	r2, #0
 801a6d8:	2300      	movs	r3, #0
 801a6da:	4620      	mov	r0, r4
 801a6dc:	4629      	mov	r1, r5
 801a6de:	f7e6 fa0b 	bl	8000af8 <__aeabi_dcmpeq>
 801a6e2:	b108      	cbz	r0, 801a6e8 <__cvt+0xa4>
 801a6e4:	f8cd 900c 	str.w	r9, [sp, #12]
 801a6e8:	2230      	movs	r2, #48	; 0x30
 801a6ea:	9b03      	ldr	r3, [sp, #12]
 801a6ec:	454b      	cmp	r3, r9
 801a6ee:	d307      	bcc.n	801a700 <__cvt+0xbc>
 801a6f0:	9b03      	ldr	r3, [sp, #12]
 801a6f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a6f4:	1bdb      	subs	r3, r3, r7
 801a6f6:	4638      	mov	r0, r7
 801a6f8:	6013      	str	r3, [r2, #0]
 801a6fa:	b004      	add	sp, #16
 801a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a700:	1c59      	adds	r1, r3, #1
 801a702:	9103      	str	r1, [sp, #12]
 801a704:	701a      	strb	r2, [r3, #0]
 801a706:	e7f0      	b.n	801a6ea <__cvt+0xa6>

0801a708 <__exponent>:
 801a708:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a70a:	4603      	mov	r3, r0
 801a70c:	2900      	cmp	r1, #0
 801a70e:	bfb8      	it	lt
 801a710:	4249      	neglt	r1, r1
 801a712:	f803 2b02 	strb.w	r2, [r3], #2
 801a716:	bfb4      	ite	lt
 801a718:	222d      	movlt	r2, #45	; 0x2d
 801a71a:	222b      	movge	r2, #43	; 0x2b
 801a71c:	2909      	cmp	r1, #9
 801a71e:	7042      	strb	r2, [r0, #1]
 801a720:	dd2a      	ble.n	801a778 <__exponent+0x70>
 801a722:	f10d 0207 	add.w	r2, sp, #7
 801a726:	4617      	mov	r7, r2
 801a728:	260a      	movs	r6, #10
 801a72a:	4694      	mov	ip, r2
 801a72c:	fb91 f5f6 	sdiv	r5, r1, r6
 801a730:	fb06 1415 	mls	r4, r6, r5, r1
 801a734:	3430      	adds	r4, #48	; 0x30
 801a736:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a73a:	460c      	mov	r4, r1
 801a73c:	2c63      	cmp	r4, #99	; 0x63
 801a73e:	f102 32ff 	add.w	r2, r2, #4294967295
 801a742:	4629      	mov	r1, r5
 801a744:	dcf1      	bgt.n	801a72a <__exponent+0x22>
 801a746:	3130      	adds	r1, #48	; 0x30
 801a748:	f1ac 0402 	sub.w	r4, ip, #2
 801a74c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a750:	1c41      	adds	r1, r0, #1
 801a752:	4622      	mov	r2, r4
 801a754:	42ba      	cmp	r2, r7
 801a756:	d30a      	bcc.n	801a76e <__exponent+0x66>
 801a758:	f10d 0209 	add.w	r2, sp, #9
 801a75c:	eba2 020c 	sub.w	r2, r2, ip
 801a760:	42bc      	cmp	r4, r7
 801a762:	bf88      	it	hi
 801a764:	2200      	movhi	r2, #0
 801a766:	4413      	add	r3, r2
 801a768:	1a18      	subs	r0, r3, r0
 801a76a:	b003      	add	sp, #12
 801a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a76e:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a772:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a776:	e7ed      	b.n	801a754 <__exponent+0x4c>
 801a778:	2330      	movs	r3, #48	; 0x30
 801a77a:	3130      	adds	r1, #48	; 0x30
 801a77c:	7083      	strb	r3, [r0, #2]
 801a77e:	70c1      	strb	r1, [r0, #3]
 801a780:	1d03      	adds	r3, r0, #4
 801a782:	e7f1      	b.n	801a768 <__exponent+0x60>

0801a784 <_printf_float>:
 801a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a788:	ed2d 8b02 	vpush	{d8}
 801a78c:	b08d      	sub	sp, #52	; 0x34
 801a78e:	460c      	mov	r4, r1
 801a790:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a794:	4616      	mov	r6, r2
 801a796:	461f      	mov	r7, r3
 801a798:	4605      	mov	r5, r0
 801a79a:	f000 fe0b 	bl	801b3b4 <_localeconv_r>
 801a79e:	f8d0 a000 	ldr.w	sl, [r0]
 801a7a2:	4650      	mov	r0, sl
 801a7a4:	f7e5 fd7c 	bl	80002a0 <strlen>
 801a7a8:	2300      	movs	r3, #0
 801a7aa:	930a      	str	r3, [sp, #40]	; 0x28
 801a7ac:	6823      	ldr	r3, [r4, #0]
 801a7ae:	9305      	str	r3, [sp, #20]
 801a7b0:	f8d8 3000 	ldr.w	r3, [r8]
 801a7b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a7b8:	3307      	adds	r3, #7
 801a7ba:	f023 0307 	bic.w	r3, r3, #7
 801a7be:	f103 0208 	add.w	r2, r3, #8
 801a7c2:	f8c8 2000 	str.w	r2, [r8]
 801a7c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a7ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a7ce:	9307      	str	r3, [sp, #28]
 801a7d0:	f8cd 8018 	str.w	r8, [sp, #24]
 801a7d4:	ee08 0a10 	vmov	s16, r0
 801a7d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 801a7dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7e0:	4b9e      	ldr	r3, [pc, #632]	; (801aa5c <_printf_float+0x2d8>)
 801a7e2:	f04f 32ff 	mov.w	r2, #4294967295
 801a7e6:	f7e6 f9b9 	bl	8000b5c <__aeabi_dcmpun>
 801a7ea:	bb88      	cbnz	r0, 801a850 <_printf_float+0xcc>
 801a7ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a7f0:	4b9a      	ldr	r3, [pc, #616]	; (801aa5c <_printf_float+0x2d8>)
 801a7f2:	f04f 32ff 	mov.w	r2, #4294967295
 801a7f6:	f7e6 f993 	bl	8000b20 <__aeabi_dcmple>
 801a7fa:	bb48      	cbnz	r0, 801a850 <_printf_float+0xcc>
 801a7fc:	2200      	movs	r2, #0
 801a7fe:	2300      	movs	r3, #0
 801a800:	4640      	mov	r0, r8
 801a802:	4649      	mov	r1, r9
 801a804:	f7e6 f982 	bl	8000b0c <__aeabi_dcmplt>
 801a808:	b110      	cbz	r0, 801a810 <_printf_float+0x8c>
 801a80a:	232d      	movs	r3, #45	; 0x2d
 801a80c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a810:	4a93      	ldr	r2, [pc, #588]	; (801aa60 <_printf_float+0x2dc>)
 801a812:	4b94      	ldr	r3, [pc, #592]	; (801aa64 <_printf_float+0x2e0>)
 801a814:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a818:	bf94      	ite	ls
 801a81a:	4690      	movls	r8, r2
 801a81c:	4698      	movhi	r8, r3
 801a81e:	2303      	movs	r3, #3
 801a820:	6123      	str	r3, [r4, #16]
 801a822:	9b05      	ldr	r3, [sp, #20]
 801a824:	f023 0304 	bic.w	r3, r3, #4
 801a828:	6023      	str	r3, [r4, #0]
 801a82a:	f04f 0900 	mov.w	r9, #0
 801a82e:	9700      	str	r7, [sp, #0]
 801a830:	4633      	mov	r3, r6
 801a832:	aa0b      	add	r2, sp, #44	; 0x2c
 801a834:	4621      	mov	r1, r4
 801a836:	4628      	mov	r0, r5
 801a838:	f000 f9da 	bl	801abf0 <_printf_common>
 801a83c:	3001      	adds	r0, #1
 801a83e:	f040 8090 	bne.w	801a962 <_printf_float+0x1de>
 801a842:	f04f 30ff 	mov.w	r0, #4294967295
 801a846:	b00d      	add	sp, #52	; 0x34
 801a848:	ecbd 8b02 	vpop	{d8}
 801a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a850:	4642      	mov	r2, r8
 801a852:	464b      	mov	r3, r9
 801a854:	4640      	mov	r0, r8
 801a856:	4649      	mov	r1, r9
 801a858:	f7e6 f980 	bl	8000b5c <__aeabi_dcmpun>
 801a85c:	b140      	cbz	r0, 801a870 <_printf_float+0xec>
 801a85e:	464b      	mov	r3, r9
 801a860:	2b00      	cmp	r3, #0
 801a862:	bfbc      	itt	lt
 801a864:	232d      	movlt	r3, #45	; 0x2d
 801a866:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a86a:	4a7f      	ldr	r2, [pc, #508]	; (801aa68 <_printf_float+0x2e4>)
 801a86c:	4b7f      	ldr	r3, [pc, #508]	; (801aa6c <_printf_float+0x2e8>)
 801a86e:	e7d1      	b.n	801a814 <_printf_float+0x90>
 801a870:	6863      	ldr	r3, [r4, #4]
 801a872:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a876:	9206      	str	r2, [sp, #24]
 801a878:	1c5a      	adds	r2, r3, #1
 801a87a:	d13f      	bne.n	801a8fc <_printf_float+0x178>
 801a87c:	2306      	movs	r3, #6
 801a87e:	6063      	str	r3, [r4, #4]
 801a880:	9b05      	ldr	r3, [sp, #20]
 801a882:	6861      	ldr	r1, [r4, #4]
 801a884:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a888:	2300      	movs	r3, #0
 801a88a:	9303      	str	r3, [sp, #12]
 801a88c:	ab0a      	add	r3, sp, #40	; 0x28
 801a88e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a892:	ab09      	add	r3, sp, #36	; 0x24
 801a894:	ec49 8b10 	vmov	d0, r8, r9
 801a898:	9300      	str	r3, [sp, #0]
 801a89a:	6022      	str	r2, [r4, #0]
 801a89c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a8a0:	4628      	mov	r0, r5
 801a8a2:	f7ff fecf 	bl	801a644 <__cvt>
 801a8a6:	9b06      	ldr	r3, [sp, #24]
 801a8a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a8aa:	2b47      	cmp	r3, #71	; 0x47
 801a8ac:	4680      	mov	r8, r0
 801a8ae:	d108      	bne.n	801a8c2 <_printf_float+0x13e>
 801a8b0:	1cc8      	adds	r0, r1, #3
 801a8b2:	db02      	blt.n	801a8ba <_printf_float+0x136>
 801a8b4:	6863      	ldr	r3, [r4, #4]
 801a8b6:	4299      	cmp	r1, r3
 801a8b8:	dd41      	ble.n	801a93e <_printf_float+0x1ba>
 801a8ba:	f1ab 0302 	sub.w	r3, fp, #2
 801a8be:	fa5f fb83 	uxtb.w	fp, r3
 801a8c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a8c6:	d820      	bhi.n	801a90a <_printf_float+0x186>
 801a8c8:	3901      	subs	r1, #1
 801a8ca:	465a      	mov	r2, fp
 801a8cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a8d0:	9109      	str	r1, [sp, #36]	; 0x24
 801a8d2:	f7ff ff19 	bl	801a708 <__exponent>
 801a8d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8d8:	1813      	adds	r3, r2, r0
 801a8da:	2a01      	cmp	r2, #1
 801a8dc:	4681      	mov	r9, r0
 801a8de:	6123      	str	r3, [r4, #16]
 801a8e0:	dc02      	bgt.n	801a8e8 <_printf_float+0x164>
 801a8e2:	6822      	ldr	r2, [r4, #0]
 801a8e4:	07d2      	lsls	r2, r2, #31
 801a8e6:	d501      	bpl.n	801a8ec <_printf_float+0x168>
 801a8e8:	3301      	adds	r3, #1
 801a8ea:	6123      	str	r3, [r4, #16]
 801a8ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d09c      	beq.n	801a82e <_printf_float+0xaa>
 801a8f4:	232d      	movs	r3, #45	; 0x2d
 801a8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8fa:	e798      	b.n	801a82e <_printf_float+0xaa>
 801a8fc:	9a06      	ldr	r2, [sp, #24]
 801a8fe:	2a47      	cmp	r2, #71	; 0x47
 801a900:	d1be      	bne.n	801a880 <_printf_float+0xfc>
 801a902:	2b00      	cmp	r3, #0
 801a904:	d1bc      	bne.n	801a880 <_printf_float+0xfc>
 801a906:	2301      	movs	r3, #1
 801a908:	e7b9      	b.n	801a87e <_printf_float+0xfa>
 801a90a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a90e:	d118      	bne.n	801a942 <_printf_float+0x1be>
 801a910:	2900      	cmp	r1, #0
 801a912:	6863      	ldr	r3, [r4, #4]
 801a914:	dd0b      	ble.n	801a92e <_printf_float+0x1aa>
 801a916:	6121      	str	r1, [r4, #16]
 801a918:	b913      	cbnz	r3, 801a920 <_printf_float+0x19c>
 801a91a:	6822      	ldr	r2, [r4, #0]
 801a91c:	07d0      	lsls	r0, r2, #31
 801a91e:	d502      	bpl.n	801a926 <_printf_float+0x1a2>
 801a920:	3301      	adds	r3, #1
 801a922:	440b      	add	r3, r1
 801a924:	6123      	str	r3, [r4, #16]
 801a926:	65a1      	str	r1, [r4, #88]	; 0x58
 801a928:	f04f 0900 	mov.w	r9, #0
 801a92c:	e7de      	b.n	801a8ec <_printf_float+0x168>
 801a92e:	b913      	cbnz	r3, 801a936 <_printf_float+0x1b2>
 801a930:	6822      	ldr	r2, [r4, #0]
 801a932:	07d2      	lsls	r2, r2, #31
 801a934:	d501      	bpl.n	801a93a <_printf_float+0x1b6>
 801a936:	3302      	adds	r3, #2
 801a938:	e7f4      	b.n	801a924 <_printf_float+0x1a0>
 801a93a:	2301      	movs	r3, #1
 801a93c:	e7f2      	b.n	801a924 <_printf_float+0x1a0>
 801a93e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a944:	4299      	cmp	r1, r3
 801a946:	db05      	blt.n	801a954 <_printf_float+0x1d0>
 801a948:	6823      	ldr	r3, [r4, #0]
 801a94a:	6121      	str	r1, [r4, #16]
 801a94c:	07d8      	lsls	r0, r3, #31
 801a94e:	d5ea      	bpl.n	801a926 <_printf_float+0x1a2>
 801a950:	1c4b      	adds	r3, r1, #1
 801a952:	e7e7      	b.n	801a924 <_printf_float+0x1a0>
 801a954:	2900      	cmp	r1, #0
 801a956:	bfd4      	ite	le
 801a958:	f1c1 0202 	rsble	r2, r1, #2
 801a95c:	2201      	movgt	r2, #1
 801a95e:	4413      	add	r3, r2
 801a960:	e7e0      	b.n	801a924 <_printf_float+0x1a0>
 801a962:	6823      	ldr	r3, [r4, #0]
 801a964:	055a      	lsls	r2, r3, #21
 801a966:	d407      	bmi.n	801a978 <_printf_float+0x1f4>
 801a968:	6923      	ldr	r3, [r4, #16]
 801a96a:	4642      	mov	r2, r8
 801a96c:	4631      	mov	r1, r6
 801a96e:	4628      	mov	r0, r5
 801a970:	47b8      	blx	r7
 801a972:	3001      	adds	r0, #1
 801a974:	d12c      	bne.n	801a9d0 <_printf_float+0x24c>
 801a976:	e764      	b.n	801a842 <_printf_float+0xbe>
 801a978:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a97c:	f240 80e0 	bls.w	801ab40 <_printf_float+0x3bc>
 801a980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a984:	2200      	movs	r2, #0
 801a986:	2300      	movs	r3, #0
 801a988:	f7e6 f8b6 	bl	8000af8 <__aeabi_dcmpeq>
 801a98c:	2800      	cmp	r0, #0
 801a98e:	d034      	beq.n	801a9fa <_printf_float+0x276>
 801a990:	4a37      	ldr	r2, [pc, #220]	; (801aa70 <_printf_float+0x2ec>)
 801a992:	2301      	movs	r3, #1
 801a994:	4631      	mov	r1, r6
 801a996:	4628      	mov	r0, r5
 801a998:	47b8      	blx	r7
 801a99a:	3001      	adds	r0, #1
 801a99c:	f43f af51 	beq.w	801a842 <_printf_float+0xbe>
 801a9a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a9a4:	429a      	cmp	r2, r3
 801a9a6:	db02      	blt.n	801a9ae <_printf_float+0x22a>
 801a9a8:	6823      	ldr	r3, [r4, #0]
 801a9aa:	07d8      	lsls	r0, r3, #31
 801a9ac:	d510      	bpl.n	801a9d0 <_printf_float+0x24c>
 801a9ae:	ee18 3a10 	vmov	r3, s16
 801a9b2:	4652      	mov	r2, sl
 801a9b4:	4631      	mov	r1, r6
 801a9b6:	4628      	mov	r0, r5
 801a9b8:	47b8      	blx	r7
 801a9ba:	3001      	adds	r0, #1
 801a9bc:	f43f af41 	beq.w	801a842 <_printf_float+0xbe>
 801a9c0:	f04f 0800 	mov.w	r8, #0
 801a9c4:	f104 091a 	add.w	r9, r4, #26
 801a9c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a9ca:	3b01      	subs	r3, #1
 801a9cc:	4543      	cmp	r3, r8
 801a9ce:	dc09      	bgt.n	801a9e4 <_printf_float+0x260>
 801a9d0:	6823      	ldr	r3, [r4, #0]
 801a9d2:	079b      	lsls	r3, r3, #30
 801a9d4:	f100 8107 	bmi.w	801abe6 <_printf_float+0x462>
 801a9d8:	68e0      	ldr	r0, [r4, #12]
 801a9da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9dc:	4298      	cmp	r0, r3
 801a9de:	bfb8      	it	lt
 801a9e0:	4618      	movlt	r0, r3
 801a9e2:	e730      	b.n	801a846 <_printf_float+0xc2>
 801a9e4:	2301      	movs	r3, #1
 801a9e6:	464a      	mov	r2, r9
 801a9e8:	4631      	mov	r1, r6
 801a9ea:	4628      	mov	r0, r5
 801a9ec:	47b8      	blx	r7
 801a9ee:	3001      	adds	r0, #1
 801a9f0:	f43f af27 	beq.w	801a842 <_printf_float+0xbe>
 801a9f4:	f108 0801 	add.w	r8, r8, #1
 801a9f8:	e7e6      	b.n	801a9c8 <_printf_float+0x244>
 801a9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	dc39      	bgt.n	801aa74 <_printf_float+0x2f0>
 801aa00:	4a1b      	ldr	r2, [pc, #108]	; (801aa70 <_printf_float+0x2ec>)
 801aa02:	2301      	movs	r3, #1
 801aa04:	4631      	mov	r1, r6
 801aa06:	4628      	mov	r0, r5
 801aa08:	47b8      	blx	r7
 801aa0a:	3001      	adds	r0, #1
 801aa0c:	f43f af19 	beq.w	801a842 <_printf_float+0xbe>
 801aa10:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801aa14:	4313      	orrs	r3, r2
 801aa16:	d102      	bne.n	801aa1e <_printf_float+0x29a>
 801aa18:	6823      	ldr	r3, [r4, #0]
 801aa1a:	07d9      	lsls	r1, r3, #31
 801aa1c:	d5d8      	bpl.n	801a9d0 <_printf_float+0x24c>
 801aa1e:	ee18 3a10 	vmov	r3, s16
 801aa22:	4652      	mov	r2, sl
 801aa24:	4631      	mov	r1, r6
 801aa26:	4628      	mov	r0, r5
 801aa28:	47b8      	blx	r7
 801aa2a:	3001      	adds	r0, #1
 801aa2c:	f43f af09 	beq.w	801a842 <_printf_float+0xbe>
 801aa30:	f04f 0900 	mov.w	r9, #0
 801aa34:	f104 0a1a 	add.w	sl, r4, #26
 801aa38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa3a:	425b      	negs	r3, r3
 801aa3c:	454b      	cmp	r3, r9
 801aa3e:	dc01      	bgt.n	801aa44 <_printf_float+0x2c0>
 801aa40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa42:	e792      	b.n	801a96a <_printf_float+0x1e6>
 801aa44:	2301      	movs	r3, #1
 801aa46:	4652      	mov	r2, sl
 801aa48:	4631      	mov	r1, r6
 801aa4a:	4628      	mov	r0, r5
 801aa4c:	47b8      	blx	r7
 801aa4e:	3001      	adds	r0, #1
 801aa50:	f43f aef7 	beq.w	801a842 <_printf_float+0xbe>
 801aa54:	f109 0901 	add.w	r9, r9, #1
 801aa58:	e7ee      	b.n	801aa38 <_printf_float+0x2b4>
 801aa5a:	bf00      	nop
 801aa5c:	7fefffff 	.word	0x7fefffff
 801aa60:	0806c98c 	.word	0x0806c98c
 801aa64:	0806c990 	.word	0x0806c990
 801aa68:	0806c994 	.word	0x0806c994
 801aa6c:	0806c998 	.word	0x0806c998
 801aa70:	0806c99c 	.word	0x0806c99c
 801aa74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aa76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aa78:	429a      	cmp	r2, r3
 801aa7a:	bfa8      	it	ge
 801aa7c:	461a      	movge	r2, r3
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	4691      	mov	r9, r2
 801aa82:	dc37      	bgt.n	801aaf4 <_printf_float+0x370>
 801aa84:	f04f 0b00 	mov.w	fp, #0
 801aa88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aa8c:	f104 021a 	add.w	r2, r4, #26
 801aa90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aa92:	9305      	str	r3, [sp, #20]
 801aa94:	eba3 0309 	sub.w	r3, r3, r9
 801aa98:	455b      	cmp	r3, fp
 801aa9a:	dc33      	bgt.n	801ab04 <_printf_float+0x380>
 801aa9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aaa0:	429a      	cmp	r2, r3
 801aaa2:	db3b      	blt.n	801ab1c <_printf_float+0x398>
 801aaa4:	6823      	ldr	r3, [r4, #0]
 801aaa6:	07da      	lsls	r2, r3, #31
 801aaa8:	d438      	bmi.n	801ab1c <_printf_float+0x398>
 801aaaa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801aaae:	eba2 0903 	sub.w	r9, r2, r3
 801aab2:	9b05      	ldr	r3, [sp, #20]
 801aab4:	1ad2      	subs	r2, r2, r3
 801aab6:	4591      	cmp	r9, r2
 801aab8:	bfa8      	it	ge
 801aaba:	4691      	movge	r9, r2
 801aabc:	f1b9 0f00 	cmp.w	r9, #0
 801aac0:	dc35      	bgt.n	801ab2e <_printf_float+0x3aa>
 801aac2:	f04f 0800 	mov.w	r8, #0
 801aac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801aaca:	f104 0a1a 	add.w	sl, r4, #26
 801aace:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801aad2:	1a9b      	subs	r3, r3, r2
 801aad4:	eba3 0309 	sub.w	r3, r3, r9
 801aad8:	4543      	cmp	r3, r8
 801aada:	f77f af79 	ble.w	801a9d0 <_printf_float+0x24c>
 801aade:	2301      	movs	r3, #1
 801aae0:	4652      	mov	r2, sl
 801aae2:	4631      	mov	r1, r6
 801aae4:	4628      	mov	r0, r5
 801aae6:	47b8      	blx	r7
 801aae8:	3001      	adds	r0, #1
 801aaea:	f43f aeaa 	beq.w	801a842 <_printf_float+0xbe>
 801aaee:	f108 0801 	add.w	r8, r8, #1
 801aaf2:	e7ec      	b.n	801aace <_printf_float+0x34a>
 801aaf4:	4613      	mov	r3, r2
 801aaf6:	4631      	mov	r1, r6
 801aaf8:	4642      	mov	r2, r8
 801aafa:	4628      	mov	r0, r5
 801aafc:	47b8      	blx	r7
 801aafe:	3001      	adds	r0, #1
 801ab00:	d1c0      	bne.n	801aa84 <_printf_float+0x300>
 801ab02:	e69e      	b.n	801a842 <_printf_float+0xbe>
 801ab04:	2301      	movs	r3, #1
 801ab06:	4631      	mov	r1, r6
 801ab08:	4628      	mov	r0, r5
 801ab0a:	9205      	str	r2, [sp, #20]
 801ab0c:	47b8      	blx	r7
 801ab0e:	3001      	adds	r0, #1
 801ab10:	f43f ae97 	beq.w	801a842 <_printf_float+0xbe>
 801ab14:	9a05      	ldr	r2, [sp, #20]
 801ab16:	f10b 0b01 	add.w	fp, fp, #1
 801ab1a:	e7b9      	b.n	801aa90 <_printf_float+0x30c>
 801ab1c:	ee18 3a10 	vmov	r3, s16
 801ab20:	4652      	mov	r2, sl
 801ab22:	4631      	mov	r1, r6
 801ab24:	4628      	mov	r0, r5
 801ab26:	47b8      	blx	r7
 801ab28:	3001      	adds	r0, #1
 801ab2a:	d1be      	bne.n	801aaaa <_printf_float+0x326>
 801ab2c:	e689      	b.n	801a842 <_printf_float+0xbe>
 801ab2e:	9a05      	ldr	r2, [sp, #20]
 801ab30:	464b      	mov	r3, r9
 801ab32:	4442      	add	r2, r8
 801ab34:	4631      	mov	r1, r6
 801ab36:	4628      	mov	r0, r5
 801ab38:	47b8      	blx	r7
 801ab3a:	3001      	adds	r0, #1
 801ab3c:	d1c1      	bne.n	801aac2 <_printf_float+0x33e>
 801ab3e:	e680      	b.n	801a842 <_printf_float+0xbe>
 801ab40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ab42:	2a01      	cmp	r2, #1
 801ab44:	dc01      	bgt.n	801ab4a <_printf_float+0x3c6>
 801ab46:	07db      	lsls	r3, r3, #31
 801ab48:	d53a      	bpl.n	801abc0 <_printf_float+0x43c>
 801ab4a:	2301      	movs	r3, #1
 801ab4c:	4642      	mov	r2, r8
 801ab4e:	4631      	mov	r1, r6
 801ab50:	4628      	mov	r0, r5
 801ab52:	47b8      	blx	r7
 801ab54:	3001      	adds	r0, #1
 801ab56:	f43f ae74 	beq.w	801a842 <_printf_float+0xbe>
 801ab5a:	ee18 3a10 	vmov	r3, s16
 801ab5e:	4652      	mov	r2, sl
 801ab60:	4631      	mov	r1, r6
 801ab62:	4628      	mov	r0, r5
 801ab64:	47b8      	blx	r7
 801ab66:	3001      	adds	r0, #1
 801ab68:	f43f ae6b 	beq.w	801a842 <_printf_float+0xbe>
 801ab6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801ab70:	2200      	movs	r2, #0
 801ab72:	2300      	movs	r3, #0
 801ab74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801ab78:	f7e5 ffbe 	bl	8000af8 <__aeabi_dcmpeq>
 801ab7c:	b9d8      	cbnz	r0, 801abb6 <_printf_float+0x432>
 801ab7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ab82:	f108 0201 	add.w	r2, r8, #1
 801ab86:	4631      	mov	r1, r6
 801ab88:	4628      	mov	r0, r5
 801ab8a:	47b8      	blx	r7
 801ab8c:	3001      	adds	r0, #1
 801ab8e:	d10e      	bne.n	801abae <_printf_float+0x42a>
 801ab90:	e657      	b.n	801a842 <_printf_float+0xbe>
 801ab92:	2301      	movs	r3, #1
 801ab94:	4652      	mov	r2, sl
 801ab96:	4631      	mov	r1, r6
 801ab98:	4628      	mov	r0, r5
 801ab9a:	47b8      	blx	r7
 801ab9c:	3001      	adds	r0, #1
 801ab9e:	f43f ae50 	beq.w	801a842 <_printf_float+0xbe>
 801aba2:	f108 0801 	add.w	r8, r8, #1
 801aba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aba8:	3b01      	subs	r3, #1
 801abaa:	4543      	cmp	r3, r8
 801abac:	dcf1      	bgt.n	801ab92 <_printf_float+0x40e>
 801abae:	464b      	mov	r3, r9
 801abb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801abb4:	e6da      	b.n	801a96c <_printf_float+0x1e8>
 801abb6:	f04f 0800 	mov.w	r8, #0
 801abba:	f104 0a1a 	add.w	sl, r4, #26
 801abbe:	e7f2      	b.n	801aba6 <_printf_float+0x422>
 801abc0:	2301      	movs	r3, #1
 801abc2:	4642      	mov	r2, r8
 801abc4:	e7df      	b.n	801ab86 <_printf_float+0x402>
 801abc6:	2301      	movs	r3, #1
 801abc8:	464a      	mov	r2, r9
 801abca:	4631      	mov	r1, r6
 801abcc:	4628      	mov	r0, r5
 801abce:	47b8      	blx	r7
 801abd0:	3001      	adds	r0, #1
 801abd2:	f43f ae36 	beq.w	801a842 <_printf_float+0xbe>
 801abd6:	f108 0801 	add.w	r8, r8, #1
 801abda:	68e3      	ldr	r3, [r4, #12]
 801abdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801abde:	1a5b      	subs	r3, r3, r1
 801abe0:	4543      	cmp	r3, r8
 801abe2:	dcf0      	bgt.n	801abc6 <_printf_float+0x442>
 801abe4:	e6f8      	b.n	801a9d8 <_printf_float+0x254>
 801abe6:	f04f 0800 	mov.w	r8, #0
 801abea:	f104 0919 	add.w	r9, r4, #25
 801abee:	e7f4      	b.n	801abda <_printf_float+0x456>

0801abf0 <_printf_common>:
 801abf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abf4:	4616      	mov	r6, r2
 801abf6:	4699      	mov	r9, r3
 801abf8:	688a      	ldr	r2, [r1, #8]
 801abfa:	690b      	ldr	r3, [r1, #16]
 801abfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ac00:	4293      	cmp	r3, r2
 801ac02:	bfb8      	it	lt
 801ac04:	4613      	movlt	r3, r2
 801ac06:	6033      	str	r3, [r6, #0]
 801ac08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ac0c:	4607      	mov	r7, r0
 801ac0e:	460c      	mov	r4, r1
 801ac10:	b10a      	cbz	r2, 801ac16 <_printf_common+0x26>
 801ac12:	3301      	adds	r3, #1
 801ac14:	6033      	str	r3, [r6, #0]
 801ac16:	6823      	ldr	r3, [r4, #0]
 801ac18:	0699      	lsls	r1, r3, #26
 801ac1a:	bf42      	ittt	mi
 801ac1c:	6833      	ldrmi	r3, [r6, #0]
 801ac1e:	3302      	addmi	r3, #2
 801ac20:	6033      	strmi	r3, [r6, #0]
 801ac22:	6825      	ldr	r5, [r4, #0]
 801ac24:	f015 0506 	ands.w	r5, r5, #6
 801ac28:	d106      	bne.n	801ac38 <_printf_common+0x48>
 801ac2a:	f104 0a19 	add.w	sl, r4, #25
 801ac2e:	68e3      	ldr	r3, [r4, #12]
 801ac30:	6832      	ldr	r2, [r6, #0]
 801ac32:	1a9b      	subs	r3, r3, r2
 801ac34:	42ab      	cmp	r3, r5
 801ac36:	dc26      	bgt.n	801ac86 <_printf_common+0x96>
 801ac38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ac3c:	1e13      	subs	r3, r2, #0
 801ac3e:	6822      	ldr	r2, [r4, #0]
 801ac40:	bf18      	it	ne
 801ac42:	2301      	movne	r3, #1
 801ac44:	0692      	lsls	r2, r2, #26
 801ac46:	d42b      	bmi.n	801aca0 <_printf_common+0xb0>
 801ac48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac4c:	4649      	mov	r1, r9
 801ac4e:	4638      	mov	r0, r7
 801ac50:	47c0      	blx	r8
 801ac52:	3001      	adds	r0, #1
 801ac54:	d01e      	beq.n	801ac94 <_printf_common+0xa4>
 801ac56:	6823      	ldr	r3, [r4, #0]
 801ac58:	6922      	ldr	r2, [r4, #16]
 801ac5a:	f003 0306 	and.w	r3, r3, #6
 801ac5e:	2b04      	cmp	r3, #4
 801ac60:	bf02      	ittt	eq
 801ac62:	68e5      	ldreq	r5, [r4, #12]
 801ac64:	6833      	ldreq	r3, [r6, #0]
 801ac66:	1aed      	subeq	r5, r5, r3
 801ac68:	68a3      	ldr	r3, [r4, #8]
 801ac6a:	bf0c      	ite	eq
 801ac6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ac70:	2500      	movne	r5, #0
 801ac72:	4293      	cmp	r3, r2
 801ac74:	bfc4      	itt	gt
 801ac76:	1a9b      	subgt	r3, r3, r2
 801ac78:	18ed      	addgt	r5, r5, r3
 801ac7a:	2600      	movs	r6, #0
 801ac7c:	341a      	adds	r4, #26
 801ac7e:	42b5      	cmp	r5, r6
 801ac80:	d11a      	bne.n	801acb8 <_printf_common+0xc8>
 801ac82:	2000      	movs	r0, #0
 801ac84:	e008      	b.n	801ac98 <_printf_common+0xa8>
 801ac86:	2301      	movs	r3, #1
 801ac88:	4652      	mov	r2, sl
 801ac8a:	4649      	mov	r1, r9
 801ac8c:	4638      	mov	r0, r7
 801ac8e:	47c0      	blx	r8
 801ac90:	3001      	adds	r0, #1
 801ac92:	d103      	bne.n	801ac9c <_printf_common+0xac>
 801ac94:	f04f 30ff 	mov.w	r0, #4294967295
 801ac98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac9c:	3501      	adds	r5, #1
 801ac9e:	e7c6      	b.n	801ac2e <_printf_common+0x3e>
 801aca0:	18e1      	adds	r1, r4, r3
 801aca2:	1c5a      	adds	r2, r3, #1
 801aca4:	2030      	movs	r0, #48	; 0x30
 801aca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801acaa:	4422      	add	r2, r4
 801acac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801acb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801acb4:	3302      	adds	r3, #2
 801acb6:	e7c7      	b.n	801ac48 <_printf_common+0x58>
 801acb8:	2301      	movs	r3, #1
 801acba:	4622      	mov	r2, r4
 801acbc:	4649      	mov	r1, r9
 801acbe:	4638      	mov	r0, r7
 801acc0:	47c0      	blx	r8
 801acc2:	3001      	adds	r0, #1
 801acc4:	d0e6      	beq.n	801ac94 <_printf_common+0xa4>
 801acc6:	3601      	adds	r6, #1
 801acc8:	e7d9      	b.n	801ac7e <_printf_common+0x8e>
	...

0801accc <_printf_i>:
 801accc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801acd0:	7e0f      	ldrb	r7, [r1, #24]
 801acd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801acd4:	2f78      	cmp	r7, #120	; 0x78
 801acd6:	4691      	mov	r9, r2
 801acd8:	4680      	mov	r8, r0
 801acda:	460c      	mov	r4, r1
 801acdc:	469a      	mov	sl, r3
 801acde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ace2:	d807      	bhi.n	801acf4 <_printf_i+0x28>
 801ace4:	2f62      	cmp	r7, #98	; 0x62
 801ace6:	d80a      	bhi.n	801acfe <_printf_i+0x32>
 801ace8:	2f00      	cmp	r7, #0
 801acea:	f000 80d4 	beq.w	801ae96 <_printf_i+0x1ca>
 801acee:	2f58      	cmp	r7, #88	; 0x58
 801acf0:	f000 80c0 	beq.w	801ae74 <_printf_i+0x1a8>
 801acf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801acf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801acfc:	e03a      	b.n	801ad74 <_printf_i+0xa8>
 801acfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ad02:	2b15      	cmp	r3, #21
 801ad04:	d8f6      	bhi.n	801acf4 <_printf_i+0x28>
 801ad06:	a101      	add	r1, pc, #4	; (adr r1, 801ad0c <_printf_i+0x40>)
 801ad08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ad0c:	0801ad65 	.word	0x0801ad65
 801ad10:	0801ad79 	.word	0x0801ad79
 801ad14:	0801acf5 	.word	0x0801acf5
 801ad18:	0801acf5 	.word	0x0801acf5
 801ad1c:	0801acf5 	.word	0x0801acf5
 801ad20:	0801acf5 	.word	0x0801acf5
 801ad24:	0801ad79 	.word	0x0801ad79
 801ad28:	0801acf5 	.word	0x0801acf5
 801ad2c:	0801acf5 	.word	0x0801acf5
 801ad30:	0801acf5 	.word	0x0801acf5
 801ad34:	0801acf5 	.word	0x0801acf5
 801ad38:	0801ae7d 	.word	0x0801ae7d
 801ad3c:	0801ada5 	.word	0x0801ada5
 801ad40:	0801ae37 	.word	0x0801ae37
 801ad44:	0801acf5 	.word	0x0801acf5
 801ad48:	0801acf5 	.word	0x0801acf5
 801ad4c:	0801ae9f 	.word	0x0801ae9f
 801ad50:	0801acf5 	.word	0x0801acf5
 801ad54:	0801ada5 	.word	0x0801ada5
 801ad58:	0801acf5 	.word	0x0801acf5
 801ad5c:	0801acf5 	.word	0x0801acf5
 801ad60:	0801ae3f 	.word	0x0801ae3f
 801ad64:	682b      	ldr	r3, [r5, #0]
 801ad66:	1d1a      	adds	r2, r3, #4
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	602a      	str	r2, [r5, #0]
 801ad6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ad74:	2301      	movs	r3, #1
 801ad76:	e09f      	b.n	801aeb8 <_printf_i+0x1ec>
 801ad78:	6820      	ldr	r0, [r4, #0]
 801ad7a:	682b      	ldr	r3, [r5, #0]
 801ad7c:	0607      	lsls	r7, r0, #24
 801ad7e:	f103 0104 	add.w	r1, r3, #4
 801ad82:	6029      	str	r1, [r5, #0]
 801ad84:	d501      	bpl.n	801ad8a <_printf_i+0xbe>
 801ad86:	681e      	ldr	r6, [r3, #0]
 801ad88:	e003      	b.n	801ad92 <_printf_i+0xc6>
 801ad8a:	0646      	lsls	r6, r0, #25
 801ad8c:	d5fb      	bpl.n	801ad86 <_printf_i+0xba>
 801ad8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ad92:	2e00      	cmp	r6, #0
 801ad94:	da03      	bge.n	801ad9e <_printf_i+0xd2>
 801ad96:	232d      	movs	r3, #45	; 0x2d
 801ad98:	4276      	negs	r6, r6
 801ad9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad9e:	485a      	ldr	r0, [pc, #360]	; (801af08 <_printf_i+0x23c>)
 801ada0:	230a      	movs	r3, #10
 801ada2:	e012      	b.n	801adca <_printf_i+0xfe>
 801ada4:	682b      	ldr	r3, [r5, #0]
 801ada6:	6820      	ldr	r0, [r4, #0]
 801ada8:	1d19      	adds	r1, r3, #4
 801adaa:	6029      	str	r1, [r5, #0]
 801adac:	0605      	lsls	r5, r0, #24
 801adae:	d501      	bpl.n	801adb4 <_printf_i+0xe8>
 801adb0:	681e      	ldr	r6, [r3, #0]
 801adb2:	e002      	b.n	801adba <_printf_i+0xee>
 801adb4:	0641      	lsls	r1, r0, #25
 801adb6:	d5fb      	bpl.n	801adb0 <_printf_i+0xe4>
 801adb8:	881e      	ldrh	r6, [r3, #0]
 801adba:	4853      	ldr	r0, [pc, #332]	; (801af08 <_printf_i+0x23c>)
 801adbc:	2f6f      	cmp	r7, #111	; 0x6f
 801adbe:	bf0c      	ite	eq
 801adc0:	2308      	moveq	r3, #8
 801adc2:	230a      	movne	r3, #10
 801adc4:	2100      	movs	r1, #0
 801adc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801adca:	6865      	ldr	r5, [r4, #4]
 801adcc:	60a5      	str	r5, [r4, #8]
 801adce:	2d00      	cmp	r5, #0
 801add0:	bfa2      	ittt	ge
 801add2:	6821      	ldrge	r1, [r4, #0]
 801add4:	f021 0104 	bicge.w	r1, r1, #4
 801add8:	6021      	strge	r1, [r4, #0]
 801adda:	b90e      	cbnz	r6, 801ade0 <_printf_i+0x114>
 801addc:	2d00      	cmp	r5, #0
 801adde:	d04b      	beq.n	801ae78 <_printf_i+0x1ac>
 801ade0:	4615      	mov	r5, r2
 801ade2:	fbb6 f1f3 	udiv	r1, r6, r3
 801ade6:	fb03 6711 	mls	r7, r3, r1, r6
 801adea:	5dc7      	ldrb	r7, [r0, r7]
 801adec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801adf0:	4637      	mov	r7, r6
 801adf2:	42bb      	cmp	r3, r7
 801adf4:	460e      	mov	r6, r1
 801adf6:	d9f4      	bls.n	801ade2 <_printf_i+0x116>
 801adf8:	2b08      	cmp	r3, #8
 801adfa:	d10b      	bne.n	801ae14 <_printf_i+0x148>
 801adfc:	6823      	ldr	r3, [r4, #0]
 801adfe:	07de      	lsls	r6, r3, #31
 801ae00:	d508      	bpl.n	801ae14 <_printf_i+0x148>
 801ae02:	6923      	ldr	r3, [r4, #16]
 801ae04:	6861      	ldr	r1, [r4, #4]
 801ae06:	4299      	cmp	r1, r3
 801ae08:	bfde      	ittt	le
 801ae0a:	2330      	movle	r3, #48	; 0x30
 801ae0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ae10:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ae14:	1b52      	subs	r2, r2, r5
 801ae16:	6122      	str	r2, [r4, #16]
 801ae18:	f8cd a000 	str.w	sl, [sp]
 801ae1c:	464b      	mov	r3, r9
 801ae1e:	aa03      	add	r2, sp, #12
 801ae20:	4621      	mov	r1, r4
 801ae22:	4640      	mov	r0, r8
 801ae24:	f7ff fee4 	bl	801abf0 <_printf_common>
 801ae28:	3001      	adds	r0, #1
 801ae2a:	d14a      	bne.n	801aec2 <_printf_i+0x1f6>
 801ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 801ae30:	b004      	add	sp, #16
 801ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae36:	6823      	ldr	r3, [r4, #0]
 801ae38:	f043 0320 	orr.w	r3, r3, #32
 801ae3c:	6023      	str	r3, [r4, #0]
 801ae3e:	4833      	ldr	r0, [pc, #204]	; (801af0c <_printf_i+0x240>)
 801ae40:	2778      	movs	r7, #120	; 0x78
 801ae42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ae46:	6823      	ldr	r3, [r4, #0]
 801ae48:	6829      	ldr	r1, [r5, #0]
 801ae4a:	061f      	lsls	r7, r3, #24
 801ae4c:	f851 6b04 	ldr.w	r6, [r1], #4
 801ae50:	d402      	bmi.n	801ae58 <_printf_i+0x18c>
 801ae52:	065f      	lsls	r7, r3, #25
 801ae54:	bf48      	it	mi
 801ae56:	b2b6      	uxthmi	r6, r6
 801ae58:	07df      	lsls	r7, r3, #31
 801ae5a:	bf48      	it	mi
 801ae5c:	f043 0320 	orrmi.w	r3, r3, #32
 801ae60:	6029      	str	r1, [r5, #0]
 801ae62:	bf48      	it	mi
 801ae64:	6023      	strmi	r3, [r4, #0]
 801ae66:	b91e      	cbnz	r6, 801ae70 <_printf_i+0x1a4>
 801ae68:	6823      	ldr	r3, [r4, #0]
 801ae6a:	f023 0320 	bic.w	r3, r3, #32
 801ae6e:	6023      	str	r3, [r4, #0]
 801ae70:	2310      	movs	r3, #16
 801ae72:	e7a7      	b.n	801adc4 <_printf_i+0xf8>
 801ae74:	4824      	ldr	r0, [pc, #144]	; (801af08 <_printf_i+0x23c>)
 801ae76:	e7e4      	b.n	801ae42 <_printf_i+0x176>
 801ae78:	4615      	mov	r5, r2
 801ae7a:	e7bd      	b.n	801adf8 <_printf_i+0x12c>
 801ae7c:	682b      	ldr	r3, [r5, #0]
 801ae7e:	6826      	ldr	r6, [r4, #0]
 801ae80:	6961      	ldr	r1, [r4, #20]
 801ae82:	1d18      	adds	r0, r3, #4
 801ae84:	6028      	str	r0, [r5, #0]
 801ae86:	0635      	lsls	r5, r6, #24
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	d501      	bpl.n	801ae90 <_printf_i+0x1c4>
 801ae8c:	6019      	str	r1, [r3, #0]
 801ae8e:	e002      	b.n	801ae96 <_printf_i+0x1ca>
 801ae90:	0670      	lsls	r0, r6, #25
 801ae92:	d5fb      	bpl.n	801ae8c <_printf_i+0x1c0>
 801ae94:	8019      	strh	r1, [r3, #0]
 801ae96:	2300      	movs	r3, #0
 801ae98:	6123      	str	r3, [r4, #16]
 801ae9a:	4615      	mov	r5, r2
 801ae9c:	e7bc      	b.n	801ae18 <_printf_i+0x14c>
 801ae9e:	682b      	ldr	r3, [r5, #0]
 801aea0:	1d1a      	adds	r2, r3, #4
 801aea2:	602a      	str	r2, [r5, #0]
 801aea4:	681d      	ldr	r5, [r3, #0]
 801aea6:	6862      	ldr	r2, [r4, #4]
 801aea8:	2100      	movs	r1, #0
 801aeaa:	4628      	mov	r0, r5
 801aeac:	f7e5 f9a8 	bl	8000200 <memchr>
 801aeb0:	b108      	cbz	r0, 801aeb6 <_printf_i+0x1ea>
 801aeb2:	1b40      	subs	r0, r0, r5
 801aeb4:	6060      	str	r0, [r4, #4]
 801aeb6:	6863      	ldr	r3, [r4, #4]
 801aeb8:	6123      	str	r3, [r4, #16]
 801aeba:	2300      	movs	r3, #0
 801aebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aec0:	e7aa      	b.n	801ae18 <_printf_i+0x14c>
 801aec2:	6923      	ldr	r3, [r4, #16]
 801aec4:	462a      	mov	r2, r5
 801aec6:	4649      	mov	r1, r9
 801aec8:	4640      	mov	r0, r8
 801aeca:	47d0      	blx	sl
 801aecc:	3001      	adds	r0, #1
 801aece:	d0ad      	beq.n	801ae2c <_printf_i+0x160>
 801aed0:	6823      	ldr	r3, [r4, #0]
 801aed2:	079b      	lsls	r3, r3, #30
 801aed4:	d413      	bmi.n	801aefe <_printf_i+0x232>
 801aed6:	68e0      	ldr	r0, [r4, #12]
 801aed8:	9b03      	ldr	r3, [sp, #12]
 801aeda:	4298      	cmp	r0, r3
 801aedc:	bfb8      	it	lt
 801aede:	4618      	movlt	r0, r3
 801aee0:	e7a6      	b.n	801ae30 <_printf_i+0x164>
 801aee2:	2301      	movs	r3, #1
 801aee4:	4632      	mov	r2, r6
 801aee6:	4649      	mov	r1, r9
 801aee8:	4640      	mov	r0, r8
 801aeea:	47d0      	blx	sl
 801aeec:	3001      	adds	r0, #1
 801aeee:	d09d      	beq.n	801ae2c <_printf_i+0x160>
 801aef0:	3501      	adds	r5, #1
 801aef2:	68e3      	ldr	r3, [r4, #12]
 801aef4:	9903      	ldr	r1, [sp, #12]
 801aef6:	1a5b      	subs	r3, r3, r1
 801aef8:	42ab      	cmp	r3, r5
 801aefa:	dcf2      	bgt.n	801aee2 <_printf_i+0x216>
 801aefc:	e7eb      	b.n	801aed6 <_printf_i+0x20a>
 801aefe:	2500      	movs	r5, #0
 801af00:	f104 0619 	add.w	r6, r4, #25
 801af04:	e7f5      	b.n	801aef2 <_printf_i+0x226>
 801af06:	bf00      	nop
 801af08:	0806c99e 	.word	0x0806c99e
 801af0c:	0806c9af 	.word	0x0806c9af

0801af10 <std>:
 801af10:	2300      	movs	r3, #0
 801af12:	b510      	push	{r4, lr}
 801af14:	4604      	mov	r4, r0
 801af16:	e9c0 3300 	strd	r3, r3, [r0]
 801af1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801af1e:	6083      	str	r3, [r0, #8]
 801af20:	8181      	strh	r1, [r0, #12]
 801af22:	6643      	str	r3, [r0, #100]	; 0x64
 801af24:	81c2      	strh	r2, [r0, #14]
 801af26:	6183      	str	r3, [r0, #24]
 801af28:	4619      	mov	r1, r3
 801af2a:	2208      	movs	r2, #8
 801af2c:	305c      	adds	r0, #92	; 0x5c
 801af2e:	f000 fa13 	bl	801b358 <memset>
 801af32:	4b0d      	ldr	r3, [pc, #52]	; (801af68 <std+0x58>)
 801af34:	6263      	str	r3, [r4, #36]	; 0x24
 801af36:	4b0d      	ldr	r3, [pc, #52]	; (801af6c <std+0x5c>)
 801af38:	62a3      	str	r3, [r4, #40]	; 0x28
 801af3a:	4b0d      	ldr	r3, [pc, #52]	; (801af70 <std+0x60>)
 801af3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801af3e:	4b0d      	ldr	r3, [pc, #52]	; (801af74 <std+0x64>)
 801af40:	6323      	str	r3, [r4, #48]	; 0x30
 801af42:	4b0d      	ldr	r3, [pc, #52]	; (801af78 <std+0x68>)
 801af44:	6224      	str	r4, [r4, #32]
 801af46:	429c      	cmp	r4, r3
 801af48:	d006      	beq.n	801af58 <std+0x48>
 801af4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801af4e:	4294      	cmp	r4, r2
 801af50:	d002      	beq.n	801af58 <std+0x48>
 801af52:	33d0      	adds	r3, #208	; 0xd0
 801af54:	429c      	cmp	r4, r3
 801af56:	d105      	bne.n	801af64 <std+0x54>
 801af58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801af5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af60:	f000 baac 	b.w	801b4bc <__retarget_lock_init_recursive>
 801af64:	bd10      	pop	{r4, pc}
 801af66:	bf00      	nop
 801af68:	0801b171 	.word	0x0801b171
 801af6c:	0801b193 	.word	0x0801b193
 801af70:	0801b1cb 	.word	0x0801b1cb
 801af74:	0801b1ef 	.word	0x0801b1ef
 801af78:	20013f10 	.word	0x20013f10

0801af7c <stdio_exit_handler>:
 801af7c:	4a02      	ldr	r2, [pc, #8]	; (801af88 <stdio_exit_handler+0xc>)
 801af7e:	4903      	ldr	r1, [pc, #12]	; (801af8c <stdio_exit_handler+0x10>)
 801af80:	4803      	ldr	r0, [pc, #12]	; (801af90 <stdio_exit_handler+0x14>)
 801af82:	f000 b869 	b.w	801b058 <_fwalk_sglue>
 801af86:	bf00      	nop
 801af88:	200000c0 	.word	0x200000c0
 801af8c:	0801cd49 	.word	0x0801cd49
 801af90:	200000cc 	.word	0x200000cc

0801af94 <cleanup_stdio>:
 801af94:	6841      	ldr	r1, [r0, #4]
 801af96:	4b0c      	ldr	r3, [pc, #48]	; (801afc8 <cleanup_stdio+0x34>)
 801af98:	4299      	cmp	r1, r3
 801af9a:	b510      	push	{r4, lr}
 801af9c:	4604      	mov	r4, r0
 801af9e:	d001      	beq.n	801afa4 <cleanup_stdio+0x10>
 801afa0:	f001 fed2 	bl	801cd48 <_fflush_r>
 801afa4:	68a1      	ldr	r1, [r4, #8]
 801afa6:	4b09      	ldr	r3, [pc, #36]	; (801afcc <cleanup_stdio+0x38>)
 801afa8:	4299      	cmp	r1, r3
 801afaa:	d002      	beq.n	801afb2 <cleanup_stdio+0x1e>
 801afac:	4620      	mov	r0, r4
 801afae:	f001 fecb 	bl	801cd48 <_fflush_r>
 801afb2:	68e1      	ldr	r1, [r4, #12]
 801afb4:	4b06      	ldr	r3, [pc, #24]	; (801afd0 <cleanup_stdio+0x3c>)
 801afb6:	4299      	cmp	r1, r3
 801afb8:	d004      	beq.n	801afc4 <cleanup_stdio+0x30>
 801afba:	4620      	mov	r0, r4
 801afbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afc0:	f001 bec2 	b.w	801cd48 <_fflush_r>
 801afc4:	bd10      	pop	{r4, pc}
 801afc6:	bf00      	nop
 801afc8:	20013f10 	.word	0x20013f10
 801afcc:	20013f78 	.word	0x20013f78
 801afd0:	20013fe0 	.word	0x20013fe0

0801afd4 <global_stdio_init.part.0>:
 801afd4:	b510      	push	{r4, lr}
 801afd6:	4b0b      	ldr	r3, [pc, #44]	; (801b004 <global_stdio_init.part.0+0x30>)
 801afd8:	4c0b      	ldr	r4, [pc, #44]	; (801b008 <global_stdio_init.part.0+0x34>)
 801afda:	4a0c      	ldr	r2, [pc, #48]	; (801b00c <global_stdio_init.part.0+0x38>)
 801afdc:	601a      	str	r2, [r3, #0]
 801afde:	4620      	mov	r0, r4
 801afe0:	2200      	movs	r2, #0
 801afe2:	2104      	movs	r1, #4
 801afe4:	f7ff ff94 	bl	801af10 <std>
 801afe8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801afec:	2201      	movs	r2, #1
 801afee:	2109      	movs	r1, #9
 801aff0:	f7ff ff8e 	bl	801af10 <std>
 801aff4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801aff8:	2202      	movs	r2, #2
 801affa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801affe:	2112      	movs	r1, #18
 801b000:	f7ff bf86 	b.w	801af10 <std>
 801b004:	20014048 	.word	0x20014048
 801b008:	20013f10 	.word	0x20013f10
 801b00c:	0801af7d 	.word	0x0801af7d

0801b010 <__sfp_lock_acquire>:
 801b010:	4801      	ldr	r0, [pc, #4]	; (801b018 <__sfp_lock_acquire+0x8>)
 801b012:	f000 ba54 	b.w	801b4be <__retarget_lock_acquire_recursive>
 801b016:	bf00      	nop
 801b018:	20014051 	.word	0x20014051

0801b01c <__sfp_lock_release>:
 801b01c:	4801      	ldr	r0, [pc, #4]	; (801b024 <__sfp_lock_release+0x8>)
 801b01e:	f000 ba4f 	b.w	801b4c0 <__retarget_lock_release_recursive>
 801b022:	bf00      	nop
 801b024:	20014051 	.word	0x20014051

0801b028 <__sinit>:
 801b028:	b510      	push	{r4, lr}
 801b02a:	4604      	mov	r4, r0
 801b02c:	f7ff fff0 	bl	801b010 <__sfp_lock_acquire>
 801b030:	6a23      	ldr	r3, [r4, #32]
 801b032:	b11b      	cbz	r3, 801b03c <__sinit+0x14>
 801b034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b038:	f7ff bff0 	b.w	801b01c <__sfp_lock_release>
 801b03c:	4b04      	ldr	r3, [pc, #16]	; (801b050 <__sinit+0x28>)
 801b03e:	6223      	str	r3, [r4, #32]
 801b040:	4b04      	ldr	r3, [pc, #16]	; (801b054 <__sinit+0x2c>)
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	2b00      	cmp	r3, #0
 801b046:	d1f5      	bne.n	801b034 <__sinit+0xc>
 801b048:	f7ff ffc4 	bl	801afd4 <global_stdio_init.part.0>
 801b04c:	e7f2      	b.n	801b034 <__sinit+0xc>
 801b04e:	bf00      	nop
 801b050:	0801af95 	.word	0x0801af95
 801b054:	20014048 	.word	0x20014048

0801b058 <_fwalk_sglue>:
 801b058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b05c:	4607      	mov	r7, r0
 801b05e:	4688      	mov	r8, r1
 801b060:	4614      	mov	r4, r2
 801b062:	2600      	movs	r6, #0
 801b064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b068:	f1b9 0901 	subs.w	r9, r9, #1
 801b06c:	d505      	bpl.n	801b07a <_fwalk_sglue+0x22>
 801b06e:	6824      	ldr	r4, [r4, #0]
 801b070:	2c00      	cmp	r4, #0
 801b072:	d1f7      	bne.n	801b064 <_fwalk_sglue+0xc>
 801b074:	4630      	mov	r0, r6
 801b076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b07a:	89ab      	ldrh	r3, [r5, #12]
 801b07c:	2b01      	cmp	r3, #1
 801b07e:	d907      	bls.n	801b090 <_fwalk_sglue+0x38>
 801b080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b084:	3301      	adds	r3, #1
 801b086:	d003      	beq.n	801b090 <_fwalk_sglue+0x38>
 801b088:	4629      	mov	r1, r5
 801b08a:	4638      	mov	r0, r7
 801b08c:	47c0      	blx	r8
 801b08e:	4306      	orrs	r6, r0
 801b090:	3568      	adds	r5, #104	; 0x68
 801b092:	e7e9      	b.n	801b068 <_fwalk_sglue+0x10>

0801b094 <iprintf>:
 801b094:	b40f      	push	{r0, r1, r2, r3}
 801b096:	b507      	push	{r0, r1, r2, lr}
 801b098:	4906      	ldr	r1, [pc, #24]	; (801b0b4 <iprintf+0x20>)
 801b09a:	ab04      	add	r3, sp, #16
 801b09c:	6808      	ldr	r0, [r1, #0]
 801b09e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b0a2:	6881      	ldr	r1, [r0, #8]
 801b0a4:	9301      	str	r3, [sp, #4]
 801b0a6:	f001 fcaf 	bl	801ca08 <_vfiprintf_r>
 801b0aa:	b003      	add	sp, #12
 801b0ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0b0:	b004      	add	sp, #16
 801b0b2:	4770      	bx	lr
 801b0b4:	20000118 	.word	0x20000118

0801b0b8 <_puts_r>:
 801b0b8:	6a03      	ldr	r3, [r0, #32]
 801b0ba:	b570      	push	{r4, r5, r6, lr}
 801b0bc:	6884      	ldr	r4, [r0, #8]
 801b0be:	4605      	mov	r5, r0
 801b0c0:	460e      	mov	r6, r1
 801b0c2:	b90b      	cbnz	r3, 801b0c8 <_puts_r+0x10>
 801b0c4:	f7ff ffb0 	bl	801b028 <__sinit>
 801b0c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b0ca:	07db      	lsls	r3, r3, #31
 801b0cc:	d405      	bmi.n	801b0da <_puts_r+0x22>
 801b0ce:	89a3      	ldrh	r3, [r4, #12]
 801b0d0:	0598      	lsls	r0, r3, #22
 801b0d2:	d402      	bmi.n	801b0da <_puts_r+0x22>
 801b0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0d6:	f000 f9f2 	bl	801b4be <__retarget_lock_acquire_recursive>
 801b0da:	89a3      	ldrh	r3, [r4, #12]
 801b0dc:	0719      	lsls	r1, r3, #28
 801b0de:	d513      	bpl.n	801b108 <_puts_r+0x50>
 801b0e0:	6923      	ldr	r3, [r4, #16]
 801b0e2:	b18b      	cbz	r3, 801b108 <_puts_r+0x50>
 801b0e4:	3e01      	subs	r6, #1
 801b0e6:	68a3      	ldr	r3, [r4, #8]
 801b0e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b0ec:	3b01      	subs	r3, #1
 801b0ee:	60a3      	str	r3, [r4, #8]
 801b0f0:	b9e9      	cbnz	r1, 801b12e <_puts_r+0x76>
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	da2e      	bge.n	801b154 <_puts_r+0x9c>
 801b0f6:	4622      	mov	r2, r4
 801b0f8:	210a      	movs	r1, #10
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	f000 f886 	bl	801b20c <__swbuf_r>
 801b100:	3001      	adds	r0, #1
 801b102:	d007      	beq.n	801b114 <_puts_r+0x5c>
 801b104:	250a      	movs	r5, #10
 801b106:	e007      	b.n	801b118 <_puts_r+0x60>
 801b108:	4621      	mov	r1, r4
 801b10a:	4628      	mov	r0, r5
 801b10c:	f000 f8bc 	bl	801b288 <__swsetup_r>
 801b110:	2800      	cmp	r0, #0
 801b112:	d0e7      	beq.n	801b0e4 <_puts_r+0x2c>
 801b114:	f04f 35ff 	mov.w	r5, #4294967295
 801b118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b11a:	07da      	lsls	r2, r3, #31
 801b11c:	d405      	bmi.n	801b12a <_puts_r+0x72>
 801b11e:	89a3      	ldrh	r3, [r4, #12]
 801b120:	059b      	lsls	r3, r3, #22
 801b122:	d402      	bmi.n	801b12a <_puts_r+0x72>
 801b124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b126:	f000 f9cb 	bl	801b4c0 <__retarget_lock_release_recursive>
 801b12a:	4628      	mov	r0, r5
 801b12c:	bd70      	pop	{r4, r5, r6, pc}
 801b12e:	2b00      	cmp	r3, #0
 801b130:	da04      	bge.n	801b13c <_puts_r+0x84>
 801b132:	69a2      	ldr	r2, [r4, #24]
 801b134:	429a      	cmp	r2, r3
 801b136:	dc06      	bgt.n	801b146 <_puts_r+0x8e>
 801b138:	290a      	cmp	r1, #10
 801b13a:	d004      	beq.n	801b146 <_puts_r+0x8e>
 801b13c:	6823      	ldr	r3, [r4, #0]
 801b13e:	1c5a      	adds	r2, r3, #1
 801b140:	6022      	str	r2, [r4, #0]
 801b142:	7019      	strb	r1, [r3, #0]
 801b144:	e7cf      	b.n	801b0e6 <_puts_r+0x2e>
 801b146:	4622      	mov	r2, r4
 801b148:	4628      	mov	r0, r5
 801b14a:	f000 f85f 	bl	801b20c <__swbuf_r>
 801b14e:	3001      	adds	r0, #1
 801b150:	d1c9      	bne.n	801b0e6 <_puts_r+0x2e>
 801b152:	e7df      	b.n	801b114 <_puts_r+0x5c>
 801b154:	6823      	ldr	r3, [r4, #0]
 801b156:	250a      	movs	r5, #10
 801b158:	1c5a      	adds	r2, r3, #1
 801b15a:	6022      	str	r2, [r4, #0]
 801b15c:	701d      	strb	r5, [r3, #0]
 801b15e:	e7db      	b.n	801b118 <_puts_r+0x60>

0801b160 <puts>:
 801b160:	4b02      	ldr	r3, [pc, #8]	; (801b16c <puts+0xc>)
 801b162:	4601      	mov	r1, r0
 801b164:	6818      	ldr	r0, [r3, #0]
 801b166:	f7ff bfa7 	b.w	801b0b8 <_puts_r>
 801b16a:	bf00      	nop
 801b16c:	20000118 	.word	0x20000118

0801b170 <__sread>:
 801b170:	b510      	push	{r4, lr}
 801b172:	460c      	mov	r4, r1
 801b174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b178:	f000 f942 	bl	801b400 <_read_r>
 801b17c:	2800      	cmp	r0, #0
 801b17e:	bfab      	itete	ge
 801b180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b182:	89a3      	ldrhlt	r3, [r4, #12]
 801b184:	181b      	addge	r3, r3, r0
 801b186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b18a:	bfac      	ite	ge
 801b18c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b18e:	81a3      	strhlt	r3, [r4, #12]
 801b190:	bd10      	pop	{r4, pc}

0801b192 <__swrite>:
 801b192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b196:	461f      	mov	r7, r3
 801b198:	898b      	ldrh	r3, [r1, #12]
 801b19a:	05db      	lsls	r3, r3, #23
 801b19c:	4605      	mov	r5, r0
 801b19e:	460c      	mov	r4, r1
 801b1a0:	4616      	mov	r6, r2
 801b1a2:	d505      	bpl.n	801b1b0 <__swrite+0x1e>
 801b1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1a8:	2302      	movs	r3, #2
 801b1aa:	2200      	movs	r2, #0
 801b1ac:	f000 f916 	bl	801b3dc <_lseek_r>
 801b1b0:	89a3      	ldrh	r3, [r4, #12]
 801b1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b1b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b1ba:	81a3      	strh	r3, [r4, #12]
 801b1bc:	4632      	mov	r2, r6
 801b1be:	463b      	mov	r3, r7
 801b1c0:	4628      	mov	r0, r5
 801b1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1c6:	f000 b93d 	b.w	801b444 <_write_r>

0801b1ca <__sseek>:
 801b1ca:	b510      	push	{r4, lr}
 801b1cc:	460c      	mov	r4, r1
 801b1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1d2:	f000 f903 	bl	801b3dc <_lseek_r>
 801b1d6:	1c43      	adds	r3, r0, #1
 801b1d8:	89a3      	ldrh	r3, [r4, #12]
 801b1da:	bf15      	itete	ne
 801b1dc:	6560      	strne	r0, [r4, #84]	; 0x54
 801b1de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b1e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b1e6:	81a3      	strheq	r3, [r4, #12]
 801b1e8:	bf18      	it	ne
 801b1ea:	81a3      	strhne	r3, [r4, #12]
 801b1ec:	bd10      	pop	{r4, pc}

0801b1ee <__sclose>:
 801b1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1f2:	f000 b8e3 	b.w	801b3bc <_close_r>
	...

0801b1f8 <viprintf>:
 801b1f8:	460b      	mov	r3, r1
 801b1fa:	4903      	ldr	r1, [pc, #12]	; (801b208 <viprintf+0x10>)
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	6808      	ldr	r0, [r1, #0]
 801b200:	6881      	ldr	r1, [r0, #8]
 801b202:	f001 bc01 	b.w	801ca08 <_vfiprintf_r>
 801b206:	bf00      	nop
 801b208:	20000118 	.word	0x20000118

0801b20c <__swbuf_r>:
 801b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b20e:	460e      	mov	r6, r1
 801b210:	4614      	mov	r4, r2
 801b212:	4605      	mov	r5, r0
 801b214:	b118      	cbz	r0, 801b21e <__swbuf_r+0x12>
 801b216:	6a03      	ldr	r3, [r0, #32]
 801b218:	b90b      	cbnz	r3, 801b21e <__swbuf_r+0x12>
 801b21a:	f7ff ff05 	bl	801b028 <__sinit>
 801b21e:	69a3      	ldr	r3, [r4, #24]
 801b220:	60a3      	str	r3, [r4, #8]
 801b222:	89a3      	ldrh	r3, [r4, #12]
 801b224:	071a      	lsls	r2, r3, #28
 801b226:	d525      	bpl.n	801b274 <__swbuf_r+0x68>
 801b228:	6923      	ldr	r3, [r4, #16]
 801b22a:	b31b      	cbz	r3, 801b274 <__swbuf_r+0x68>
 801b22c:	6823      	ldr	r3, [r4, #0]
 801b22e:	6922      	ldr	r2, [r4, #16]
 801b230:	1a98      	subs	r0, r3, r2
 801b232:	6963      	ldr	r3, [r4, #20]
 801b234:	b2f6      	uxtb	r6, r6
 801b236:	4283      	cmp	r3, r0
 801b238:	4637      	mov	r7, r6
 801b23a:	dc04      	bgt.n	801b246 <__swbuf_r+0x3a>
 801b23c:	4621      	mov	r1, r4
 801b23e:	4628      	mov	r0, r5
 801b240:	f001 fd82 	bl	801cd48 <_fflush_r>
 801b244:	b9e0      	cbnz	r0, 801b280 <__swbuf_r+0x74>
 801b246:	68a3      	ldr	r3, [r4, #8]
 801b248:	3b01      	subs	r3, #1
 801b24a:	60a3      	str	r3, [r4, #8]
 801b24c:	6823      	ldr	r3, [r4, #0]
 801b24e:	1c5a      	adds	r2, r3, #1
 801b250:	6022      	str	r2, [r4, #0]
 801b252:	701e      	strb	r6, [r3, #0]
 801b254:	6962      	ldr	r2, [r4, #20]
 801b256:	1c43      	adds	r3, r0, #1
 801b258:	429a      	cmp	r2, r3
 801b25a:	d004      	beq.n	801b266 <__swbuf_r+0x5a>
 801b25c:	89a3      	ldrh	r3, [r4, #12]
 801b25e:	07db      	lsls	r3, r3, #31
 801b260:	d506      	bpl.n	801b270 <__swbuf_r+0x64>
 801b262:	2e0a      	cmp	r6, #10
 801b264:	d104      	bne.n	801b270 <__swbuf_r+0x64>
 801b266:	4621      	mov	r1, r4
 801b268:	4628      	mov	r0, r5
 801b26a:	f001 fd6d 	bl	801cd48 <_fflush_r>
 801b26e:	b938      	cbnz	r0, 801b280 <__swbuf_r+0x74>
 801b270:	4638      	mov	r0, r7
 801b272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b274:	4621      	mov	r1, r4
 801b276:	4628      	mov	r0, r5
 801b278:	f000 f806 	bl	801b288 <__swsetup_r>
 801b27c:	2800      	cmp	r0, #0
 801b27e:	d0d5      	beq.n	801b22c <__swbuf_r+0x20>
 801b280:	f04f 37ff 	mov.w	r7, #4294967295
 801b284:	e7f4      	b.n	801b270 <__swbuf_r+0x64>
	...

0801b288 <__swsetup_r>:
 801b288:	b538      	push	{r3, r4, r5, lr}
 801b28a:	4b2a      	ldr	r3, [pc, #168]	; (801b334 <__swsetup_r+0xac>)
 801b28c:	4605      	mov	r5, r0
 801b28e:	6818      	ldr	r0, [r3, #0]
 801b290:	460c      	mov	r4, r1
 801b292:	b118      	cbz	r0, 801b29c <__swsetup_r+0x14>
 801b294:	6a03      	ldr	r3, [r0, #32]
 801b296:	b90b      	cbnz	r3, 801b29c <__swsetup_r+0x14>
 801b298:	f7ff fec6 	bl	801b028 <__sinit>
 801b29c:	89a3      	ldrh	r3, [r4, #12]
 801b29e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b2a2:	0718      	lsls	r0, r3, #28
 801b2a4:	d422      	bmi.n	801b2ec <__swsetup_r+0x64>
 801b2a6:	06d9      	lsls	r1, r3, #27
 801b2a8:	d407      	bmi.n	801b2ba <__swsetup_r+0x32>
 801b2aa:	2309      	movs	r3, #9
 801b2ac:	602b      	str	r3, [r5, #0]
 801b2ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b2b2:	81a3      	strh	r3, [r4, #12]
 801b2b4:	f04f 30ff 	mov.w	r0, #4294967295
 801b2b8:	e034      	b.n	801b324 <__swsetup_r+0x9c>
 801b2ba:	0758      	lsls	r0, r3, #29
 801b2bc:	d512      	bpl.n	801b2e4 <__swsetup_r+0x5c>
 801b2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b2c0:	b141      	cbz	r1, 801b2d4 <__swsetup_r+0x4c>
 801b2c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b2c6:	4299      	cmp	r1, r3
 801b2c8:	d002      	beq.n	801b2d0 <__swsetup_r+0x48>
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	f000 ffaa 	bl	801c224 <_free_r>
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	6363      	str	r3, [r4, #52]	; 0x34
 801b2d4:	89a3      	ldrh	r3, [r4, #12]
 801b2d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b2da:	81a3      	strh	r3, [r4, #12]
 801b2dc:	2300      	movs	r3, #0
 801b2de:	6063      	str	r3, [r4, #4]
 801b2e0:	6923      	ldr	r3, [r4, #16]
 801b2e2:	6023      	str	r3, [r4, #0]
 801b2e4:	89a3      	ldrh	r3, [r4, #12]
 801b2e6:	f043 0308 	orr.w	r3, r3, #8
 801b2ea:	81a3      	strh	r3, [r4, #12]
 801b2ec:	6923      	ldr	r3, [r4, #16]
 801b2ee:	b94b      	cbnz	r3, 801b304 <__swsetup_r+0x7c>
 801b2f0:	89a3      	ldrh	r3, [r4, #12]
 801b2f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b2f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b2fa:	d003      	beq.n	801b304 <__swsetup_r+0x7c>
 801b2fc:	4621      	mov	r1, r4
 801b2fe:	4628      	mov	r0, r5
 801b300:	f001 fd82 	bl	801ce08 <__smakebuf_r>
 801b304:	89a0      	ldrh	r0, [r4, #12]
 801b306:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b30a:	f010 0301 	ands.w	r3, r0, #1
 801b30e:	d00a      	beq.n	801b326 <__swsetup_r+0x9e>
 801b310:	2300      	movs	r3, #0
 801b312:	60a3      	str	r3, [r4, #8]
 801b314:	6963      	ldr	r3, [r4, #20]
 801b316:	425b      	negs	r3, r3
 801b318:	61a3      	str	r3, [r4, #24]
 801b31a:	6923      	ldr	r3, [r4, #16]
 801b31c:	b943      	cbnz	r3, 801b330 <__swsetup_r+0xa8>
 801b31e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b322:	d1c4      	bne.n	801b2ae <__swsetup_r+0x26>
 801b324:	bd38      	pop	{r3, r4, r5, pc}
 801b326:	0781      	lsls	r1, r0, #30
 801b328:	bf58      	it	pl
 801b32a:	6963      	ldrpl	r3, [r4, #20]
 801b32c:	60a3      	str	r3, [r4, #8]
 801b32e:	e7f4      	b.n	801b31a <__swsetup_r+0x92>
 801b330:	2000      	movs	r0, #0
 801b332:	e7f7      	b.n	801b324 <__swsetup_r+0x9c>
 801b334:	20000118 	.word	0x20000118

0801b338 <memcmp>:
 801b338:	b510      	push	{r4, lr}
 801b33a:	3901      	subs	r1, #1
 801b33c:	4402      	add	r2, r0
 801b33e:	4290      	cmp	r0, r2
 801b340:	d101      	bne.n	801b346 <memcmp+0xe>
 801b342:	2000      	movs	r0, #0
 801b344:	e005      	b.n	801b352 <memcmp+0x1a>
 801b346:	7803      	ldrb	r3, [r0, #0]
 801b348:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b34c:	42a3      	cmp	r3, r4
 801b34e:	d001      	beq.n	801b354 <memcmp+0x1c>
 801b350:	1b18      	subs	r0, r3, r4
 801b352:	bd10      	pop	{r4, pc}
 801b354:	3001      	adds	r0, #1
 801b356:	e7f2      	b.n	801b33e <memcmp+0x6>

0801b358 <memset>:
 801b358:	4402      	add	r2, r0
 801b35a:	4603      	mov	r3, r0
 801b35c:	4293      	cmp	r3, r2
 801b35e:	d100      	bne.n	801b362 <memset+0xa>
 801b360:	4770      	bx	lr
 801b362:	f803 1b01 	strb.w	r1, [r3], #1
 801b366:	e7f9      	b.n	801b35c <memset+0x4>

0801b368 <strncmp>:
 801b368:	b510      	push	{r4, lr}
 801b36a:	b16a      	cbz	r2, 801b388 <strncmp+0x20>
 801b36c:	3901      	subs	r1, #1
 801b36e:	1884      	adds	r4, r0, r2
 801b370:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b374:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b378:	429a      	cmp	r2, r3
 801b37a:	d103      	bne.n	801b384 <strncmp+0x1c>
 801b37c:	42a0      	cmp	r0, r4
 801b37e:	d001      	beq.n	801b384 <strncmp+0x1c>
 801b380:	2a00      	cmp	r2, #0
 801b382:	d1f5      	bne.n	801b370 <strncmp+0x8>
 801b384:	1ad0      	subs	r0, r2, r3
 801b386:	bd10      	pop	{r4, pc}
 801b388:	4610      	mov	r0, r2
 801b38a:	e7fc      	b.n	801b386 <strncmp+0x1e>

0801b38c <strncpy>:
 801b38c:	b510      	push	{r4, lr}
 801b38e:	3901      	subs	r1, #1
 801b390:	4603      	mov	r3, r0
 801b392:	b132      	cbz	r2, 801b3a2 <strncpy+0x16>
 801b394:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b398:	f803 4b01 	strb.w	r4, [r3], #1
 801b39c:	3a01      	subs	r2, #1
 801b39e:	2c00      	cmp	r4, #0
 801b3a0:	d1f7      	bne.n	801b392 <strncpy+0x6>
 801b3a2:	441a      	add	r2, r3
 801b3a4:	2100      	movs	r1, #0
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	d100      	bne.n	801b3ac <strncpy+0x20>
 801b3aa:	bd10      	pop	{r4, pc}
 801b3ac:	f803 1b01 	strb.w	r1, [r3], #1
 801b3b0:	e7f9      	b.n	801b3a6 <strncpy+0x1a>
	...

0801b3b4 <_localeconv_r>:
 801b3b4:	4800      	ldr	r0, [pc, #0]	; (801b3b8 <_localeconv_r+0x4>)
 801b3b6:	4770      	bx	lr
 801b3b8:	2000020c 	.word	0x2000020c

0801b3bc <_close_r>:
 801b3bc:	b538      	push	{r3, r4, r5, lr}
 801b3be:	4d06      	ldr	r5, [pc, #24]	; (801b3d8 <_close_r+0x1c>)
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	4604      	mov	r4, r0
 801b3c4:	4608      	mov	r0, r1
 801b3c6:	602b      	str	r3, [r5, #0]
 801b3c8:	f7e8 ff99 	bl	80042fe <_close>
 801b3cc:	1c43      	adds	r3, r0, #1
 801b3ce:	d102      	bne.n	801b3d6 <_close_r+0x1a>
 801b3d0:	682b      	ldr	r3, [r5, #0]
 801b3d2:	b103      	cbz	r3, 801b3d6 <_close_r+0x1a>
 801b3d4:	6023      	str	r3, [r4, #0]
 801b3d6:	bd38      	pop	{r3, r4, r5, pc}
 801b3d8:	2001404c 	.word	0x2001404c

0801b3dc <_lseek_r>:
 801b3dc:	b538      	push	{r3, r4, r5, lr}
 801b3de:	4d07      	ldr	r5, [pc, #28]	; (801b3fc <_lseek_r+0x20>)
 801b3e0:	4604      	mov	r4, r0
 801b3e2:	4608      	mov	r0, r1
 801b3e4:	4611      	mov	r1, r2
 801b3e6:	2200      	movs	r2, #0
 801b3e8:	602a      	str	r2, [r5, #0]
 801b3ea:	461a      	mov	r2, r3
 801b3ec:	f7e8 ffae 	bl	800434c <_lseek>
 801b3f0:	1c43      	adds	r3, r0, #1
 801b3f2:	d102      	bne.n	801b3fa <_lseek_r+0x1e>
 801b3f4:	682b      	ldr	r3, [r5, #0]
 801b3f6:	b103      	cbz	r3, 801b3fa <_lseek_r+0x1e>
 801b3f8:	6023      	str	r3, [r4, #0]
 801b3fa:	bd38      	pop	{r3, r4, r5, pc}
 801b3fc:	2001404c 	.word	0x2001404c

0801b400 <_read_r>:
 801b400:	b538      	push	{r3, r4, r5, lr}
 801b402:	4d07      	ldr	r5, [pc, #28]	; (801b420 <_read_r+0x20>)
 801b404:	4604      	mov	r4, r0
 801b406:	4608      	mov	r0, r1
 801b408:	4611      	mov	r1, r2
 801b40a:	2200      	movs	r2, #0
 801b40c:	602a      	str	r2, [r5, #0]
 801b40e:	461a      	mov	r2, r3
 801b410:	f7e8 ff3c 	bl	800428c <_read>
 801b414:	1c43      	adds	r3, r0, #1
 801b416:	d102      	bne.n	801b41e <_read_r+0x1e>
 801b418:	682b      	ldr	r3, [r5, #0]
 801b41a:	b103      	cbz	r3, 801b41e <_read_r+0x1e>
 801b41c:	6023      	str	r3, [r4, #0]
 801b41e:	bd38      	pop	{r3, r4, r5, pc}
 801b420:	2001404c 	.word	0x2001404c

0801b424 <_sbrk_r>:
 801b424:	b538      	push	{r3, r4, r5, lr}
 801b426:	4d06      	ldr	r5, [pc, #24]	; (801b440 <_sbrk_r+0x1c>)
 801b428:	2300      	movs	r3, #0
 801b42a:	4604      	mov	r4, r0
 801b42c:	4608      	mov	r0, r1
 801b42e:	602b      	str	r3, [r5, #0]
 801b430:	f7e8 ff9a 	bl	8004368 <_sbrk>
 801b434:	1c43      	adds	r3, r0, #1
 801b436:	d102      	bne.n	801b43e <_sbrk_r+0x1a>
 801b438:	682b      	ldr	r3, [r5, #0]
 801b43a:	b103      	cbz	r3, 801b43e <_sbrk_r+0x1a>
 801b43c:	6023      	str	r3, [r4, #0]
 801b43e:	bd38      	pop	{r3, r4, r5, pc}
 801b440:	2001404c 	.word	0x2001404c

0801b444 <_write_r>:
 801b444:	b538      	push	{r3, r4, r5, lr}
 801b446:	4d07      	ldr	r5, [pc, #28]	; (801b464 <_write_r+0x20>)
 801b448:	4604      	mov	r4, r0
 801b44a:	4608      	mov	r0, r1
 801b44c:	4611      	mov	r1, r2
 801b44e:	2200      	movs	r2, #0
 801b450:	602a      	str	r2, [r5, #0]
 801b452:	461a      	mov	r2, r3
 801b454:	f7e8 ff37 	bl	80042c6 <_write>
 801b458:	1c43      	adds	r3, r0, #1
 801b45a:	d102      	bne.n	801b462 <_write_r+0x1e>
 801b45c:	682b      	ldr	r3, [r5, #0]
 801b45e:	b103      	cbz	r3, 801b462 <_write_r+0x1e>
 801b460:	6023      	str	r3, [r4, #0]
 801b462:	bd38      	pop	{r3, r4, r5, pc}
 801b464:	2001404c 	.word	0x2001404c

0801b468 <__errno>:
 801b468:	4b01      	ldr	r3, [pc, #4]	; (801b470 <__errno+0x8>)
 801b46a:	6818      	ldr	r0, [r3, #0]
 801b46c:	4770      	bx	lr
 801b46e:	bf00      	nop
 801b470:	20000118 	.word	0x20000118

0801b474 <__libc_init_array>:
 801b474:	b570      	push	{r4, r5, r6, lr}
 801b476:	4d0d      	ldr	r5, [pc, #52]	; (801b4ac <__libc_init_array+0x38>)
 801b478:	4c0d      	ldr	r4, [pc, #52]	; (801b4b0 <__libc_init_array+0x3c>)
 801b47a:	1b64      	subs	r4, r4, r5
 801b47c:	10a4      	asrs	r4, r4, #2
 801b47e:	2600      	movs	r6, #0
 801b480:	42a6      	cmp	r6, r4
 801b482:	d109      	bne.n	801b498 <__libc_init_array+0x24>
 801b484:	4d0b      	ldr	r5, [pc, #44]	; (801b4b4 <__libc_init_array+0x40>)
 801b486:	4c0c      	ldr	r4, [pc, #48]	; (801b4b8 <__libc_init_array+0x44>)
 801b488:	f001 fd86 	bl	801cf98 <_init>
 801b48c:	1b64      	subs	r4, r4, r5
 801b48e:	10a4      	asrs	r4, r4, #2
 801b490:	2600      	movs	r6, #0
 801b492:	42a6      	cmp	r6, r4
 801b494:	d105      	bne.n	801b4a2 <__libc_init_array+0x2e>
 801b496:	bd70      	pop	{r4, r5, r6, pc}
 801b498:	f855 3b04 	ldr.w	r3, [r5], #4
 801b49c:	4798      	blx	r3
 801b49e:	3601      	adds	r6, #1
 801b4a0:	e7ee      	b.n	801b480 <__libc_init_array+0xc>
 801b4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b4a6:	4798      	blx	r3
 801b4a8:	3601      	adds	r6, #1
 801b4aa:	e7f2      	b.n	801b492 <__libc_init_array+0x1e>
 801b4ac:	0806cbf0 	.word	0x0806cbf0
 801b4b0:	0806cbf0 	.word	0x0806cbf0
 801b4b4:	0806cbf0 	.word	0x0806cbf0
 801b4b8:	0806cbf4 	.word	0x0806cbf4

0801b4bc <__retarget_lock_init_recursive>:
 801b4bc:	4770      	bx	lr

0801b4be <__retarget_lock_acquire_recursive>:
 801b4be:	4770      	bx	lr

0801b4c0 <__retarget_lock_release_recursive>:
 801b4c0:	4770      	bx	lr

0801b4c2 <strcpy>:
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4c8:	f803 2b01 	strb.w	r2, [r3], #1
 801b4cc:	2a00      	cmp	r2, #0
 801b4ce:	d1f9      	bne.n	801b4c4 <strcpy+0x2>
 801b4d0:	4770      	bx	lr

0801b4d2 <memcpy>:
 801b4d2:	440a      	add	r2, r1
 801b4d4:	4291      	cmp	r1, r2
 801b4d6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b4da:	d100      	bne.n	801b4de <memcpy+0xc>
 801b4dc:	4770      	bx	lr
 801b4de:	b510      	push	{r4, lr}
 801b4e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b4e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b4e8:	4291      	cmp	r1, r2
 801b4ea:	d1f9      	bne.n	801b4e0 <memcpy+0xe>
 801b4ec:	bd10      	pop	{r4, pc}
	...

0801b4f0 <__assert_func>:
 801b4f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4f2:	4614      	mov	r4, r2
 801b4f4:	461a      	mov	r2, r3
 801b4f6:	4b09      	ldr	r3, [pc, #36]	; (801b51c <__assert_func+0x2c>)
 801b4f8:	681b      	ldr	r3, [r3, #0]
 801b4fa:	4605      	mov	r5, r0
 801b4fc:	68d8      	ldr	r0, [r3, #12]
 801b4fe:	b14c      	cbz	r4, 801b514 <__assert_func+0x24>
 801b500:	4b07      	ldr	r3, [pc, #28]	; (801b520 <__assert_func+0x30>)
 801b502:	9100      	str	r1, [sp, #0]
 801b504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b508:	4906      	ldr	r1, [pc, #24]	; (801b524 <__assert_func+0x34>)
 801b50a:	462b      	mov	r3, r5
 801b50c:	f001 fc44 	bl	801cd98 <fiprintf>
 801b510:	f001 fcd8 	bl	801cec4 <abort>
 801b514:	4b04      	ldr	r3, [pc, #16]	; (801b528 <__assert_func+0x38>)
 801b516:	461c      	mov	r4, r3
 801b518:	e7f3      	b.n	801b502 <__assert_func+0x12>
 801b51a:	bf00      	nop
 801b51c:	20000118 	.word	0x20000118
 801b520:	0806c9c0 	.word	0x0806c9c0
 801b524:	0806c9cd 	.word	0x0806c9cd
 801b528:	0806c9fb 	.word	0x0806c9fb

0801b52c <quorem>:
 801b52c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b530:	6903      	ldr	r3, [r0, #16]
 801b532:	690c      	ldr	r4, [r1, #16]
 801b534:	42a3      	cmp	r3, r4
 801b536:	4607      	mov	r7, r0
 801b538:	db7e      	blt.n	801b638 <quorem+0x10c>
 801b53a:	3c01      	subs	r4, #1
 801b53c:	f101 0814 	add.w	r8, r1, #20
 801b540:	f100 0514 	add.w	r5, r0, #20
 801b544:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b548:	9301      	str	r3, [sp, #4]
 801b54a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b552:	3301      	adds	r3, #1
 801b554:	429a      	cmp	r2, r3
 801b556:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b55a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b55e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b562:	d331      	bcc.n	801b5c8 <quorem+0x9c>
 801b564:	f04f 0e00 	mov.w	lr, #0
 801b568:	4640      	mov	r0, r8
 801b56a:	46ac      	mov	ip, r5
 801b56c:	46f2      	mov	sl, lr
 801b56e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b572:	b293      	uxth	r3, r2
 801b574:	fb06 e303 	mla	r3, r6, r3, lr
 801b578:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b57c:	0c1a      	lsrs	r2, r3, #16
 801b57e:	b29b      	uxth	r3, r3
 801b580:	ebaa 0303 	sub.w	r3, sl, r3
 801b584:	f8dc a000 	ldr.w	sl, [ip]
 801b588:	fa13 f38a 	uxtah	r3, r3, sl
 801b58c:	fb06 220e 	mla	r2, r6, lr, r2
 801b590:	9300      	str	r3, [sp, #0]
 801b592:	9b00      	ldr	r3, [sp, #0]
 801b594:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b598:	b292      	uxth	r2, r2
 801b59a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b59e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5a2:	f8bd 3000 	ldrh.w	r3, [sp]
 801b5a6:	4581      	cmp	r9, r0
 801b5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5ac:	f84c 3b04 	str.w	r3, [ip], #4
 801b5b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b5b4:	d2db      	bcs.n	801b56e <quorem+0x42>
 801b5b6:	f855 300b 	ldr.w	r3, [r5, fp]
 801b5ba:	b92b      	cbnz	r3, 801b5c8 <quorem+0x9c>
 801b5bc:	9b01      	ldr	r3, [sp, #4]
 801b5be:	3b04      	subs	r3, #4
 801b5c0:	429d      	cmp	r5, r3
 801b5c2:	461a      	mov	r2, r3
 801b5c4:	d32c      	bcc.n	801b620 <quorem+0xf4>
 801b5c6:	613c      	str	r4, [r7, #16]
 801b5c8:	4638      	mov	r0, r7
 801b5ca:	f001 f8f3 	bl	801c7b4 <__mcmp>
 801b5ce:	2800      	cmp	r0, #0
 801b5d0:	db22      	blt.n	801b618 <quorem+0xec>
 801b5d2:	3601      	adds	r6, #1
 801b5d4:	4629      	mov	r1, r5
 801b5d6:	2000      	movs	r0, #0
 801b5d8:	f858 2b04 	ldr.w	r2, [r8], #4
 801b5dc:	f8d1 c000 	ldr.w	ip, [r1]
 801b5e0:	b293      	uxth	r3, r2
 801b5e2:	1ac3      	subs	r3, r0, r3
 801b5e4:	0c12      	lsrs	r2, r2, #16
 801b5e6:	fa13 f38c 	uxtah	r3, r3, ip
 801b5ea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b5ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5f8:	45c1      	cmp	r9, r8
 801b5fa:	f841 3b04 	str.w	r3, [r1], #4
 801b5fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b602:	d2e9      	bcs.n	801b5d8 <quorem+0xac>
 801b604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b60c:	b922      	cbnz	r2, 801b618 <quorem+0xec>
 801b60e:	3b04      	subs	r3, #4
 801b610:	429d      	cmp	r5, r3
 801b612:	461a      	mov	r2, r3
 801b614:	d30a      	bcc.n	801b62c <quorem+0x100>
 801b616:	613c      	str	r4, [r7, #16]
 801b618:	4630      	mov	r0, r6
 801b61a:	b003      	add	sp, #12
 801b61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b620:	6812      	ldr	r2, [r2, #0]
 801b622:	3b04      	subs	r3, #4
 801b624:	2a00      	cmp	r2, #0
 801b626:	d1ce      	bne.n	801b5c6 <quorem+0x9a>
 801b628:	3c01      	subs	r4, #1
 801b62a:	e7c9      	b.n	801b5c0 <quorem+0x94>
 801b62c:	6812      	ldr	r2, [r2, #0]
 801b62e:	3b04      	subs	r3, #4
 801b630:	2a00      	cmp	r2, #0
 801b632:	d1f0      	bne.n	801b616 <quorem+0xea>
 801b634:	3c01      	subs	r4, #1
 801b636:	e7eb      	b.n	801b610 <quorem+0xe4>
 801b638:	2000      	movs	r0, #0
 801b63a:	e7ee      	b.n	801b61a <quorem+0xee>
 801b63c:	0000      	movs	r0, r0
	...

0801b640 <_dtoa_r>:
 801b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b644:	ed2d 8b04 	vpush	{d8-d9}
 801b648:	69c5      	ldr	r5, [r0, #28]
 801b64a:	b093      	sub	sp, #76	; 0x4c
 801b64c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b650:	ec57 6b10 	vmov	r6, r7, d0
 801b654:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b658:	9107      	str	r1, [sp, #28]
 801b65a:	4604      	mov	r4, r0
 801b65c:	920a      	str	r2, [sp, #40]	; 0x28
 801b65e:	930d      	str	r3, [sp, #52]	; 0x34
 801b660:	b975      	cbnz	r5, 801b680 <_dtoa_r+0x40>
 801b662:	2010      	movs	r0, #16
 801b664:	f7fe fe80 	bl	801a368 <malloc>
 801b668:	4602      	mov	r2, r0
 801b66a:	61e0      	str	r0, [r4, #28]
 801b66c:	b920      	cbnz	r0, 801b678 <_dtoa_r+0x38>
 801b66e:	4bae      	ldr	r3, [pc, #696]	; (801b928 <_dtoa_r+0x2e8>)
 801b670:	21ef      	movs	r1, #239	; 0xef
 801b672:	48ae      	ldr	r0, [pc, #696]	; (801b92c <_dtoa_r+0x2ec>)
 801b674:	f7ff ff3c 	bl	801b4f0 <__assert_func>
 801b678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b67c:	6005      	str	r5, [r0, #0]
 801b67e:	60c5      	str	r5, [r0, #12]
 801b680:	69e3      	ldr	r3, [r4, #28]
 801b682:	6819      	ldr	r1, [r3, #0]
 801b684:	b151      	cbz	r1, 801b69c <_dtoa_r+0x5c>
 801b686:	685a      	ldr	r2, [r3, #4]
 801b688:	604a      	str	r2, [r1, #4]
 801b68a:	2301      	movs	r3, #1
 801b68c:	4093      	lsls	r3, r2
 801b68e:	608b      	str	r3, [r1, #8]
 801b690:	4620      	mov	r0, r4
 801b692:	f000 fe53 	bl	801c33c <_Bfree>
 801b696:	69e3      	ldr	r3, [r4, #28]
 801b698:	2200      	movs	r2, #0
 801b69a:	601a      	str	r2, [r3, #0]
 801b69c:	1e3b      	subs	r3, r7, #0
 801b69e:	bfbb      	ittet	lt
 801b6a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b6a4:	9303      	strlt	r3, [sp, #12]
 801b6a6:	2300      	movge	r3, #0
 801b6a8:	2201      	movlt	r2, #1
 801b6aa:	bfac      	ite	ge
 801b6ac:	f8c8 3000 	strge.w	r3, [r8]
 801b6b0:	f8c8 2000 	strlt.w	r2, [r8]
 801b6b4:	4b9e      	ldr	r3, [pc, #632]	; (801b930 <_dtoa_r+0x2f0>)
 801b6b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801b6ba:	ea33 0308 	bics.w	r3, r3, r8
 801b6be:	d11b      	bne.n	801b6f8 <_dtoa_r+0xb8>
 801b6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b6c2:	f242 730f 	movw	r3, #9999	; 0x270f
 801b6c6:	6013      	str	r3, [r2, #0]
 801b6c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801b6cc:	4333      	orrs	r3, r6
 801b6ce:	f000 8593 	beq.w	801c1f8 <_dtoa_r+0xbb8>
 801b6d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6d4:	b963      	cbnz	r3, 801b6f0 <_dtoa_r+0xb0>
 801b6d6:	4b97      	ldr	r3, [pc, #604]	; (801b934 <_dtoa_r+0x2f4>)
 801b6d8:	e027      	b.n	801b72a <_dtoa_r+0xea>
 801b6da:	4b97      	ldr	r3, [pc, #604]	; (801b938 <_dtoa_r+0x2f8>)
 801b6dc:	9300      	str	r3, [sp, #0]
 801b6de:	3308      	adds	r3, #8
 801b6e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b6e2:	6013      	str	r3, [r2, #0]
 801b6e4:	9800      	ldr	r0, [sp, #0]
 801b6e6:	b013      	add	sp, #76	; 0x4c
 801b6e8:	ecbd 8b04 	vpop	{d8-d9}
 801b6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6f0:	4b90      	ldr	r3, [pc, #576]	; (801b934 <_dtoa_r+0x2f4>)
 801b6f2:	9300      	str	r3, [sp, #0]
 801b6f4:	3303      	adds	r3, #3
 801b6f6:	e7f3      	b.n	801b6e0 <_dtoa_r+0xa0>
 801b6f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	ec51 0b17 	vmov	r0, r1, d7
 801b702:	eeb0 8a47 	vmov.f32	s16, s14
 801b706:	eef0 8a67 	vmov.f32	s17, s15
 801b70a:	2300      	movs	r3, #0
 801b70c:	f7e5 f9f4 	bl	8000af8 <__aeabi_dcmpeq>
 801b710:	4681      	mov	r9, r0
 801b712:	b160      	cbz	r0, 801b72e <_dtoa_r+0xee>
 801b714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b716:	2301      	movs	r3, #1
 801b718:	6013      	str	r3, [r2, #0]
 801b71a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	f000 8568 	beq.w	801c1f2 <_dtoa_r+0xbb2>
 801b722:	4b86      	ldr	r3, [pc, #536]	; (801b93c <_dtoa_r+0x2fc>)
 801b724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b726:	6013      	str	r3, [r2, #0]
 801b728:	3b01      	subs	r3, #1
 801b72a:	9300      	str	r3, [sp, #0]
 801b72c:	e7da      	b.n	801b6e4 <_dtoa_r+0xa4>
 801b72e:	aa10      	add	r2, sp, #64	; 0x40
 801b730:	a911      	add	r1, sp, #68	; 0x44
 801b732:	4620      	mov	r0, r4
 801b734:	eeb0 0a48 	vmov.f32	s0, s16
 801b738:	eef0 0a68 	vmov.f32	s1, s17
 801b73c:	f001 f8e0 	bl	801c900 <__d2b>
 801b740:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801b744:	4682      	mov	sl, r0
 801b746:	2d00      	cmp	r5, #0
 801b748:	d07f      	beq.n	801b84a <_dtoa_r+0x20a>
 801b74a:	ee18 3a90 	vmov	r3, s17
 801b74e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b752:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801b756:	ec51 0b18 	vmov	r0, r1, d8
 801b75a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b75e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801b766:	4619      	mov	r1, r3
 801b768:	2200      	movs	r2, #0
 801b76a:	4b75      	ldr	r3, [pc, #468]	; (801b940 <_dtoa_r+0x300>)
 801b76c:	f7e4 fda4 	bl	80002b8 <__aeabi_dsub>
 801b770:	a367      	add	r3, pc, #412	; (adr r3, 801b910 <_dtoa_r+0x2d0>)
 801b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b776:	f7e4 ff57 	bl	8000628 <__aeabi_dmul>
 801b77a:	a367      	add	r3, pc, #412	; (adr r3, 801b918 <_dtoa_r+0x2d8>)
 801b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b780:	f7e4 fd9c 	bl	80002bc <__adddf3>
 801b784:	4606      	mov	r6, r0
 801b786:	4628      	mov	r0, r5
 801b788:	460f      	mov	r7, r1
 801b78a:	f7e4 fee3 	bl	8000554 <__aeabi_i2d>
 801b78e:	a364      	add	r3, pc, #400	; (adr r3, 801b920 <_dtoa_r+0x2e0>)
 801b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b794:	f7e4 ff48 	bl	8000628 <__aeabi_dmul>
 801b798:	4602      	mov	r2, r0
 801b79a:	460b      	mov	r3, r1
 801b79c:	4630      	mov	r0, r6
 801b79e:	4639      	mov	r1, r7
 801b7a0:	f7e4 fd8c 	bl	80002bc <__adddf3>
 801b7a4:	4606      	mov	r6, r0
 801b7a6:	460f      	mov	r7, r1
 801b7a8:	f7e5 f9ee 	bl	8000b88 <__aeabi_d2iz>
 801b7ac:	2200      	movs	r2, #0
 801b7ae:	4683      	mov	fp, r0
 801b7b0:	2300      	movs	r3, #0
 801b7b2:	4630      	mov	r0, r6
 801b7b4:	4639      	mov	r1, r7
 801b7b6:	f7e5 f9a9 	bl	8000b0c <__aeabi_dcmplt>
 801b7ba:	b148      	cbz	r0, 801b7d0 <_dtoa_r+0x190>
 801b7bc:	4658      	mov	r0, fp
 801b7be:	f7e4 fec9 	bl	8000554 <__aeabi_i2d>
 801b7c2:	4632      	mov	r2, r6
 801b7c4:	463b      	mov	r3, r7
 801b7c6:	f7e5 f997 	bl	8000af8 <__aeabi_dcmpeq>
 801b7ca:	b908      	cbnz	r0, 801b7d0 <_dtoa_r+0x190>
 801b7cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b7d0:	f1bb 0f16 	cmp.w	fp, #22
 801b7d4:	d857      	bhi.n	801b886 <_dtoa_r+0x246>
 801b7d6:	4b5b      	ldr	r3, [pc, #364]	; (801b944 <_dtoa_r+0x304>)
 801b7d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e0:	ec51 0b18 	vmov	r0, r1, d8
 801b7e4:	f7e5 f992 	bl	8000b0c <__aeabi_dcmplt>
 801b7e8:	2800      	cmp	r0, #0
 801b7ea:	d04e      	beq.n	801b88a <_dtoa_r+0x24a>
 801b7ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	930c      	str	r3, [sp, #48]	; 0x30
 801b7f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b7f6:	1b5b      	subs	r3, r3, r5
 801b7f8:	1e5a      	subs	r2, r3, #1
 801b7fa:	bf45      	ittet	mi
 801b7fc:	f1c3 0301 	rsbmi	r3, r3, #1
 801b800:	9305      	strmi	r3, [sp, #20]
 801b802:	2300      	movpl	r3, #0
 801b804:	2300      	movmi	r3, #0
 801b806:	9206      	str	r2, [sp, #24]
 801b808:	bf54      	ite	pl
 801b80a:	9305      	strpl	r3, [sp, #20]
 801b80c:	9306      	strmi	r3, [sp, #24]
 801b80e:	f1bb 0f00 	cmp.w	fp, #0
 801b812:	db3c      	blt.n	801b88e <_dtoa_r+0x24e>
 801b814:	9b06      	ldr	r3, [sp, #24]
 801b816:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801b81a:	445b      	add	r3, fp
 801b81c:	9306      	str	r3, [sp, #24]
 801b81e:	2300      	movs	r3, #0
 801b820:	9308      	str	r3, [sp, #32]
 801b822:	9b07      	ldr	r3, [sp, #28]
 801b824:	2b09      	cmp	r3, #9
 801b826:	d868      	bhi.n	801b8fa <_dtoa_r+0x2ba>
 801b828:	2b05      	cmp	r3, #5
 801b82a:	bfc4      	itt	gt
 801b82c:	3b04      	subgt	r3, #4
 801b82e:	9307      	strgt	r3, [sp, #28]
 801b830:	9b07      	ldr	r3, [sp, #28]
 801b832:	f1a3 0302 	sub.w	r3, r3, #2
 801b836:	bfcc      	ite	gt
 801b838:	2500      	movgt	r5, #0
 801b83a:	2501      	movle	r5, #1
 801b83c:	2b03      	cmp	r3, #3
 801b83e:	f200 8085 	bhi.w	801b94c <_dtoa_r+0x30c>
 801b842:	e8df f003 	tbb	[pc, r3]
 801b846:	3b2e      	.short	0x3b2e
 801b848:	5839      	.short	0x5839
 801b84a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b84e:	441d      	add	r5, r3
 801b850:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b854:	2b20      	cmp	r3, #32
 801b856:	bfc1      	itttt	gt
 801b858:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b85c:	fa08 f803 	lslgt.w	r8, r8, r3
 801b860:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801b864:	fa26 f303 	lsrgt.w	r3, r6, r3
 801b868:	bfd6      	itet	le
 801b86a:	f1c3 0320 	rsble	r3, r3, #32
 801b86e:	ea48 0003 	orrgt.w	r0, r8, r3
 801b872:	fa06 f003 	lslle.w	r0, r6, r3
 801b876:	f7e4 fe5d 	bl	8000534 <__aeabi_ui2d>
 801b87a:	2201      	movs	r2, #1
 801b87c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801b880:	3d01      	subs	r5, #1
 801b882:	920e      	str	r2, [sp, #56]	; 0x38
 801b884:	e76f      	b.n	801b766 <_dtoa_r+0x126>
 801b886:	2301      	movs	r3, #1
 801b888:	e7b3      	b.n	801b7f2 <_dtoa_r+0x1b2>
 801b88a:	900c      	str	r0, [sp, #48]	; 0x30
 801b88c:	e7b2      	b.n	801b7f4 <_dtoa_r+0x1b4>
 801b88e:	9b05      	ldr	r3, [sp, #20]
 801b890:	eba3 030b 	sub.w	r3, r3, fp
 801b894:	9305      	str	r3, [sp, #20]
 801b896:	f1cb 0300 	rsb	r3, fp, #0
 801b89a:	9308      	str	r3, [sp, #32]
 801b89c:	2300      	movs	r3, #0
 801b89e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b8a0:	e7bf      	b.n	801b822 <_dtoa_r+0x1e2>
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	9309      	str	r3, [sp, #36]	; 0x24
 801b8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	dc52      	bgt.n	801b952 <_dtoa_r+0x312>
 801b8ac:	2301      	movs	r3, #1
 801b8ae:	9301      	str	r3, [sp, #4]
 801b8b0:	9304      	str	r3, [sp, #16]
 801b8b2:	461a      	mov	r2, r3
 801b8b4:	920a      	str	r2, [sp, #40]	; 0x28
 801b8b6:	e00b      	b.n	801b8d0 <_dtoa_r+0x290>
 801b8b8:	2301      	movs	r3, #1
 801b8ba:	e7f3      	b.n	801b8a4 <_dtoa_r+0x264>
 801b8bc:	2300      	movs	r3, #0
 801b8be:	9309      	str	r3, [sp, #36]	; 0x24
 801b8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b8c2:	445b      	add	r3, fp
 801b8c4:	9301      	str	r3, [sp, #4]
 801b8c6:	3301      	adds	r3, #1
 801b8c8:	2b01      	cmp	r3, #1
 801b8ca:	9304      	str	r3, [sp, #16]
 801b8cc:	bfb8      	it	lt
 801b8ce:	2301      	movlt	r3, #1
 801b8d0:	69e0      	ldr	r0, [r4, #28]
 801b8d2:	2100      	movs	r1, #0
 801b8d4:	2204      	movs	r2, #4
 801b8d6:	f102 0614 	add.w	r6, r2, #20
 801b8da:	429e      	cmp	r6, r3
 801b8dc:	d93d      	bls.n	801b95a <_dtoa_r+0x31a>
 801b8de:	6041      	str	r1, [r0, #4]
 801b8e0:	4620      	mov	r0, r4
 801b8e2:	f000 fceb 	bl	801c2bc <_Balloc>
 801b8e6:	9000      	str	r0, [sp, #0]
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	d139      	bne.n	801b960 <_dtoa_r+0x320>
 801b8ec:	4b16      	ldr	r3, [pc, #88]	; (801b948 <_dtoa_r+0x308>)
 801b8ee:	4602      	mov	r2, r0
 801b8f0:	f240 11af 	movw	r1, #431	; 0x1af
 801b8f4:	e6bd      	b.n	801b672 <_dtoa_r+0x32>
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	e7e1      	b.n	801b8be <_dtoa_r+0x27e>
 801b8fa:	2501      	movs	r5, #1
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	9307      	str	r3, [sp, #28]
 801b900:	9509      	str	r5, [sp, #36]	; 0x24
 801b902:	f04f 33ff 	mov.w	r3, #4294967295
 801b906:	9301      	str	r3, [sp, #4]
 801b908:	9304      	str	r3, [sp, #16]
 801b90a:	2200      	movs	r2, #0
 801b90c:	2312      	movs	r3, #18
 801b90e:	e7d1      	b.n	801b8b4 <_dtoa_r+0x274>
 801b910:	636f4361 	.word	0x636f4361
 801b914:	3fd287a7 	.word	0x3fd287a7
 801b918:	8b60c8b3 	.word	0x8b60c8b3
 801b91c:	3fc68a28 	.word	0x3fc68a28
 801b920:	509f79fb 	.word	0x509f79fb
 801b924:	3fd34413 	.word	0x3fd34413
 801b928:	0806c81c 	.word	0x0806c81c
 801b92c:	0806ca09 	.word	0x0806ca09
 801b930:	7ff00000 	.word	0x7ff00000
 801b934:	0806ca05 	.word	0x0806ca05
 801b938:	0806c9fc 	.word	0x0806c9fc
 801b93c:	0806c99d 	.word	0x0806c99d
 801b940:	3ff80000 	.word	0x3ff80000
 801b944:	0806caf8 	.word	0x0806caf8
 801b948:	0806ca61 	.word	0x0806ca61
 801b94c:	2301      	movs	r3, #1
 801b94e:	9309      	str	r3, [sp, #36]	; 0x24
 801b950:	e7d7      	b.n	801b902 <_dtoa_r+0x2c2>
 801b952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b954:	9301      	str	r3, [sp, #4]
 801b956:	9304      	str	r3, [sp, #16]
 801b958:	e7ba      	b.n	801b8d0 <_dtoa_r+0x290>
 801b95a:	3101      	adds	r1, #1
 801b95c:	0052      	lsls	r2, r2, #1
 801b95e:	e7ba      	b.n	801b8d6 <_dtoa_r+0x296>
 801b960:	69e3      	ldr	r3, [r4, #28]
 801b962:	9a00      	ldr	r2, [sp, #0]
 801b964:	601a      	str	r2, [r3, #0]
 801b966:	9b04      	ldr	r3, [sp, #16]
 801b968:	2b0e      	cmp	r3, #14
 801b96a:	f200 80a8 	bhi.w	801babe <_dtoa_r+0x47e>
 801b96e:	2d00      	cmp	r5, #0
 801b970:	f000 80a5 	beq.w	801babe <_dtoa_r+0x47e>
 801b974:	f1bb 0f00 	cmp.w	fp, #0
 801b978:	dd38      	ble.n	801b9ec <_dtoa_r+0x3ac>
 801b97a:	4bc0      	ldr	r3, [pc, #768]	; (801bc7c <_dtoa_r+0x63c>)
 801b97c:	f00b 020f 	and.w	r2, fp, #15
 801b980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b988:	e9d3 6700 	ldrd	r6, r7, [r3]
 801b98c:	ea4f 182b 	mov.w	r8, fp, asr #4
 801b990:	d019      	beq.n	801b9c6 <_dtoa_r+0x386>
 801b992:	4bbb      	ldr	r3, [pc, #748]	; (801bc80 <_dtoa_r+0x640>)
 801b994:	ec51 0b18 	vmov	r0, r1, d8
 801b998:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b99c:	f7e4 ff6e 	bl	800087c <__aeabi_ddiv>
 801b9a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9a4:	f008 080f 	and.w	r8, r8, #15
 801b9a8:	2503      	movs	r5, #3
 801b9aa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 801bc80 <_dtoa_r+0x640>
 801b9ae:	f1b8 0f00 	cmp.w	r8, #0
 801b9b2:	d10a      	bne.n	801b9ca <_dtoa_r+0x38a>
 801b9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b9b8:	4632      	mov	r2, r6
 801b9ba:	463b      	mov	r3, r7
 801b9bc:	f7e4 ff5e 	bl	800087c <__aeabi_ddiv>
 801b9c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b9c4:	e02b      	b.n	801ba1e <_dtoa_r+0x3de>
 801b9c6:	2502      	movs	r5, #2
 801b9c8:	e7ef      	b.n	801b9aa <_dtoa_r+0x36a>
 801b9ca:	f018 0f01 	tst.w	r8, #1
 801b9ce:	d008      	beq.n	801b9e2 <_dtoa_r+0x3a2>
 801b9d0:	4630      	mov	r0, r6
 801b9d2:	4639      	mov	r1, r7
 801b9d4:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b9d8:	f7e4 fe26 	bl	8000628 <__aeabi_dmul>
 801b9dc:	3501      	adds	r5, #1
 801b9de:	4606      	mov	r6, r0
 801b9e0:	460f      	mov	r7, r1
 801b9e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b9e6:	f109 0908 	add.w	r9, r9, #8
 801b9ea:	e7e0      	b.n	801b9ae <_dtoa_r+0x36e>
 801b9ec:	f000 809f 	beq.w	801bb2e <_dtoa_r+0x4ee>
 801b9f0:	f1cb 0600 	rsb	r6, fp, #0
 801b9f4:	4ba1      	ldr	r3, [pc, #644]	; (801bc7c <_dtoa_r+0x63c>)
 801b9f6:	4fa2      	ldr	r7, [pc, #648]	; (801bc80 <_dtoa_r+0x640>)
 801b9f8:	f006 020f 	and.w	r2, r6, #15
 801b9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba04:	ec51 0b18 	vmov	r0, r1, d8
 801ba08:	f7e4 fe0e 	bl	8000628 <__aeabi_dmul>
 801ba0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba10:	1136      	asrs	r6, r6, #4
 801ba12:	2300      	movs	r3, #0
 801ba14:	2502      	movs	r5, #2
 801ba16:	2e00      	cmp	r6, #0
 801ba18:	d17e      	bne.n	801bb18 <_dtoa_r+0x4d8>
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d1d0      	bne.n	801b9c0 <_dtoa_r+0x380>
 801ba1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ba20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	f000 8084 	beq.w	801bb32 <_dtoa_r+0x4f2>
 801ba2a:	4b96      	ldr	r3, [pc, #600]	; (801bc84 <_dtoa_r+0x644>)
 801ba2c:	2200      	movs	r2, #0
 801ba2e:	4640      	mov	r0, r8
 801ba30:	4649      	mov	r1, r9
 801ba32:	f7e5 f86b 	bl	8000b0c <__aeabi_dcmplt>
 801ba36:	2800      	cmp	r0, #0
 801ba38:	d07b      	beq.n	801bb32 <_dtoa_r+0x4f2>
 801ba3a:	9b04      	ldr	r3, [sp, #16]
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d078      	beq.n	801bb32 <_dtoa_r+0x4f2>
 801ba40:	9b01      	ldr	r3, [sp, #4]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	dd39      	ble.n	801baba <_dtoa_r+0x47a>
 801ba46:	4b90      	ldr	r3, [pc, #576]	; (801bc88 <_dtoa_r+0x648>)
 801ba48:	2200      	movs	r2, #0
 801ba4a:	4640      	mov	r0, r8
 801ba4c:	4649      	mov	r1, r9
 801ba4e:	f7e4 fdeb 	bl	8000628 <__aeabi_dmul>
 801ba52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba56:	9e01      	ldr	r6, [sp, #4]
 801ba58:	f10b 37ff 	add.w	r7, fp, #4294967295
 801ba5c:	3501      	adds	r5, #1
 801ba5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ba62:	4628      	mov	r0, r5
 801ba64:	f7e4 fd76 	bl	8000554 <__aeabi_i2d>
 801ba68:	4642      	mov	r2, r8
 801ba6a:	464b      	mov	r3, r9
 801ba6c:	f7e4 fddc 	bl	8000628 <__aeabi_dmul>
 801ba70:	4b86      	ldr	r3, [pc, #536]	; (801bc8c <_dtoa_r+0x64c>)
 801ba72:	2200      	movs	r2, #0
 801ba74:	f7e4 fc22 	bl	80002bc <__adddf3>
 801ba78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801ba7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba80:	9303      	str	r3, [sp, #12]
 801ba82:	2e00      	cmp	r6, #0
 801ba84:	d158      	bne.n	801bb38 <_dtoa_r+0x4f8>
 801ba86:	4b82      	ldr	r3, [pc, #520]	; (801bc90 <_dtoa_r+0x650>)
 801ba88:	2200      	movs	r2, #0
 801ba8a:	4640      	mov	r0, r8
 801ba8c:	4649      	mov	r1, r9
 801ba8e:	f7e4 fc13 	bl	80002b8 <__aeabi_dsub>
 801ba92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ba96:	4680      	mov	r8, r0
 801ba98:	4689      	mov	r9, r1
 801ba9a:	f7e5 f855 	bl	8000b48 <__aeabi_dcmpgt>
 801ba9e:	2800      	cmp	r0, #0
 801baa0:	f040 8296 	bne.w	801bfd0 <_dtoa_r+0x990>
 801baa4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801baa8:	4640      	mov	r0, r8
 801baaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801baae:	4649      	mov	r1, r9
 801bab0:	f7e5 f82c 	bl	8000b0c <__aeabi_dcmplt>
 801bab4:	2800      	cmp	r0, #0
 801bab6:	f040 8289 	bne.w	801bfcc <_dtoa_r+0x98c>
 801baba:	ed8d 8b02 	vstr	d8, [sp, #8]
 801babe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	f2c0 814e 	blt.w	801bd62 <_dtoa_r+0x722>
 801bac6:	f1bb 0f0e 	cmp.w	fp, #14
 801baca:	f300 814a 	bgt.w	801bd62 <_dtoa_r+0x722>
 801bace:	4b6b      	ldr	r3, [pc, #428]	; (801bc7c <_dtoa_r+0x63c>)
 801bad0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bada:	2b00      	cmp	r3, #0
 801badc:	f280 80dc 	bge.w	801bc98 <_dtoa_r+0x658>
 801bae0:	9b04      	ldr	r3, [sp, #16]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	f300 80d8 	bgt.w	801bc98 <_dtoa_r+0x658>
 801bae8:	f040 826f 	bne.w	801bfca <_dtoa_r+0x98a>
 801baec:	4b68      	ldr	r3, [pc, #416]	; (801bc90 <_dtoa_r+0x650>)
 801baee:	2200      	movs	r2, #0
 801baf0:	4640      	mov	r0, r8
 801baf2:	4649      	mov	r1, r9
 801baf4:	f7e4 fd98 	bl	8000628 <__aeabi_dmul>
 801baf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bafc:	f7e5 f81a 	bl	8000b34 <__aeabi_dcmpge>
 801bb00:	9e04      	ldr	r6, [sp, #16]
 801bb02:	4637      	mov	r7, r6
 801bb04:	2800      	cmp	r0, #0
 801bb06:	f040 8245 	bne.w	801bf94 <_dtoa_r+0x954>
 801bb0a:	9d00      	ldr	r5, [sp, #0]
 801bb0c:	2331      	movs	r3, #49	; 0x31
 801bb0e:	f805 3b01 	strb.w	r3, [r5], #1
 801bb12:	f10b 0b01 	add.w	fp, fp, #1
 801bb16:	e241      	b.n	801bf9c <_dtoa_r+0x95c>
 801bb18:	07f2      	lsls	r2, r6, #31
 801bb1a:	d505      	bpl.n	801bb28 <_dtoa_r+0x4e8>
 801bb1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb20:	f7e4 fd82 	bl	8000628 <__aeabi_dmul>
 801bb24:	3501      	adds	r5, #1
 801bb26:	2301      	movs	r3, #1
 801bb28:	1076      	asrs	r6, r6, #1
 801bb2a:	3708      	adds	r7, #8
 801bb2c:	e773      	b.n	801ba16 <_dtoa_r+0x3d6>
 801bb2e:	2502      	movs	r5, #2
 801bb30:	e775      	b.n	801ba1e <_dtoa_r+0x3de>
 801bb32:	9e04      	ldr	r6, [sp, #16]
 801bb34:	465f      	mov	r7, fp
 801bb36:	e792      	b.n	801ba5e <_dtoa_r+0x41e>
 801bb38:	9900      	ldr	r1, [sp, #0]
 801bb3a:	4b50      	ldr	r3, [pc, #320]	; (801bc7c <_dtoa_r+0x63c>)
 801bb3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb40:	4431      	add	r1, r6
 801bb42:	9102      	str	r1, [sp, #8]
 801bb44:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb46:	eeb0 9a47 	vmov.f32	s18, s14
 801bb4a:	eef0 9a67 	vmov.f32	s19, s15
 801bb4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bb52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bb56:	2900      	cmp	r1, #0
 801bb58:	d044      	beq.n	801bbe4 <_dtoa_r+0x5a4>
 801bb5a:	494e      	ldr	r1, [pc, #312]	; (801bc94 <_dtoa_r+0x654>)
 801bb5c:	2000      	movs	r0, #0
 801bb5e:	f7e4 fe8d 	bl	800087c <__aeabi_ddiv>
 801bb62:	ec53 2b19 	vmov	r2, r3, d9
 801bb66:	f7e4 fba7 	bl	80002b8 <__aeabi_dsub>
 801bb6a:	9d00      	ldr	r5, [sp, #0]
 801bb6c:	ec41 0b19 	vmov	d9, r0, r1
 801bb70:	4649      	mov	r1, r9
 801bb72:	4640      	mov	r0, r8
 801bb74:	f7e5 f808 	bl	8000b88 <__aeabi_d2iz>
 801bb78:	4606      	mov	r6, r0
 801bb7a:	f7e4 fceb 	bl	8000554 <__aeabi_i2d>
 801bb7e:	4602      	mov	r2, r0
 801bb80:	460b      	mov	r3, r1
 801bb82:	4640      	mov	r0, r8
 801bb84:	4649      	mov	r1, r9
 801bb86:	f7e4 fb97 	bl	80002b8 <__aeabi_dsub>
 801bb8a:	3630      	adds	r6, #48	; 0x30
 801bb8c:	f805 6b01 	strb.w	r6, [r5], #1
 801bb90:	ec53 2b19 	vmov	r2, r3, d9
 801bb94:	4680      	mov	r8, r0
 801bb96:	4689      	mov	r9, r1
 801bb98:	f7e4 ffb8 	bl	8000b0c <__aeabi_dcmplt>
 801bb9c:	2800      	cmp	r0, #0
 801bb9e:	d164      	bne.n	801bc6a <_dtoa_r+0x62a>
 801bba0:	4642      	mov	r2, r8
 801bba2:	464b      	mov	r3, r9
 801bba4:	4937      	ldr	r1, [pc, #220]	; (801bc84 <_dtoa_r+0x644>)
 801bba6:	2000      	movs	r0, #0
 801bba8:	f7e4 fb86 	bl	80002b8 <__aeabi_dsub>
 801bbac:	ec53 2b19 	vmov	r2, r3, d9
 801bbb0:	f7e4 ffac 	bl	8000b0c <__aeabi_dcmplt>
 801bbb4:	2800      	cmp	r0, #0
 801bbb6:	f040 80b6 	bne.w	801bd26 <_dtoa_r+0x6e6>
 801bbba:	9b02      	ldr	r3, [sp, #8]
 801bbbc:	429d      	cmp	r5, r3
 801bbbe:	f43f af7c 	beq.w	801baba <_dtoa_r+0x47a>
 801bbc2:	4b31      	ldr	r3, [pc, #196]	; (801bc88 <_dtoa_r+0x648>)
 801bbc4:	ec51 0b19 	vmov	r0, r1, d9
 801bbc8:	2200      	movs	r2, #0
 801bbca:	f7e4 fd2d 	bl	8000628 <__aeabi_dmul>
 801bbce:	4b2e      	ldr	r3, [pc, #184]	; (801bc88 <_dtoa_r+0x648>)
 801bbd0:	ec41 0b19 	vmov	d9, r0, r1
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	4640      	mov	r0, r8
 801bbd8:	4649      	mov	r1, r9
 801bbda:	f7e4 fd25 	bl	8000628 <__aeabi_dmul>
 801bbde:	4680      	mov	r8, r0
 801bbe0:	4689      	mov	r9, r1
 801bbe2:	e7c5      	b.n	801bb70 <_dtoa_r+0x530>
 801bbe4:	ec51 0b17 	vmov	r0, r1, d7
 801bbe8:	f7e4 fd1e 	bl	8000628 <__aeabi_dmul>
 801bbec:	9b02      	ldr	r3, [sp, #8]
 801bbee:	9d00      	ldr	r5, [sp, #0]
 801bbf0:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbf2:	ec41 0b19 	vmov	d9, r0, r1
 801bbf6:	4649      	mov	r1, r9
 801bbf8:	4640      	mov	r0, r8
 801bbfa:	f7e4 ffc5 	bl	8000b88 <__aeabi_d2iz>
 801bbfe:	4606      	mov	r6, r0
 801bc00:	f7e4 fca8 	bl	8000554 <__aeabi_i2d>
 801bc04:	3630      	adds	r6, #48	; 0x30
 801bc06:	4602      	mov	r2, r0
 801bc08:	460b      	mov	r3, r1
 801bc0a:	4640      	mov	r0, r8
 801bc0c:	4649      	mov	r1, r9
 801bc0e:	f7e4 fb53 	bl	80002b8 <__aeabi_dsub>
 801bc12:	f805 6b01 	strb.w	r6, [r5], #1
 801bc16:	9b02      	ldr	r3, [sp, #8]
 801bc18:	429d      	cmp	r5, r3
 801bc1a:	4680      	mov	r8, r0
 801bc1c:	4689      	mov	r9, r1
 801bc1e:	f04f 0200 	mov.w	r2, #0
 801bc22:	d124      	bne.n	801bc6e <_dtoa_r+0x62e>
 801bc24:	4b1b      	ldr	r3, [pc, #108]	; (801bc94 <_dtoa_r+0x654>)
 801bc26:	ec51 0b19 	vmov	r0, r1, d9
 801bc2a:	f7e4 fb47 	bl	80002bc <__adddf3>
 801bc2e:	4602      	mov	r2, r0
 801bc30:	460b      	mov	r3, r1
 801bc32:	4640      	mov	r0, r8
 801bc34:	4649      	mov	r1, r9
 801bc36:	f7e4 ff87 	bl	8000b48 <__aeabi_dcmpgt>
 801bc3a:	2800      	cmp	r0, #0
 801bc3c:	d173      	bne.n	801bd26 <_dtoa_r+0x6e6>
 801bc3e:	ec53 2b19 	vmov	r2, r3, d9
 801bc42:	4914      	ldr	r1, [pc, #80]	; (801bc94 <_dtoa_r+0x654>)
 801bc44:	2000      	movs	r0, #0
 801bc46:	f7e4 fb37 	bl	80002b8 <__aeabi_dsub>
 801bc4a:	4602      	mov	r2, r0
 801bc4c:	460b      	mov	r3, r1
 801bc4e:	4640      	mov	r0, r8
 801bc50:	4649      	mov	r1, r9
 801bc52:	f7e4 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 801bc56:	2800      	cmp	r0, #0
 801bc58:	f43f af2f 	beq.w	801baba <_dtoa_r+0x47a>
 801bc5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bc5e:	1e6b      	subs	r3, r5, #1
 801bc60:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc66:	2b30      	cmp	r3, #48	; 0x30
 801bc68:	d0f8      	beq.n	801bc5c <_dtoa_r+0x61c>
 801bc6a:	46bb      	mov	fp, r7
 801bc6c:	e04a      	b.n	801bd04 <_dtoa_r+0x6c4>
 801bc6e:	4b06      	ldr	r3, [pc, #24]	; (801bc88 <_dtoa_r+0x648>)
 801bc70:	f7e4 fcda 	bl	8000628 <__aeabi_dmul>
 801bc74:	4680      	mov	r8, r0
 801bc76:	4689      	mov	r9, r1
 801bc78:	e7bd      	b.n	801bbf6 <_dtoa_r+0x5b6>
 801bc7a:	bf00      	nop
 801bc7c:	0806caf8 	.word	0x0806caf8
 801bc80:	0806cad0 	.word	0x0806cad0
 801bc84:	3ff00000 	.word	0x3ff00000
 801bc88:	40240000 	.word	0x40240000
 801bc8c:	401c0000 	.word	0x401c0000
 801bc90:	40140000 	.word	0x40140000
 801bc94:	3fe00000 	.word	0x3fe00000
 801bc98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bc9c:	9d00      	ldr	r5, [sp, #0]
 801bc9e:	4642      	mov	r2, r8
 801bca0:	464b      	mov	r3, r9
 801bca2:	4630      	mov	r0, r6
 801bca4:	4639      	mov	r1, r7
 801bca6:	f7e4 fde9 	bl	800087c <__aeabi_ddiv>
 801bcaa:	f7e4 ff6d 	bl	8000b88 <__aeabi_d2iz>
 801bcae:	9001      	str	r0, [sp, #4]
 801bcb0:	f7e4 fc50 	bl	8000554 <__aeabi_i2d>
 801bcb4:	4642      	mov	r2, r8
 801bcb6:	464b      	mov	r3, r9
 801bcb8:	f7e4 fcb6 	bl	8000628 <__aeabi_dmul>
 801bcbc:	4602      	mov	r2, r0
 801bcbe:	460b      	mov	r3, r1
 801bcc0:	4630      	mov	r0, r6
 801bcc2:	4639      	mov	r1, r7
 801bcc4:	f7e4 faf8 	bl	80002b8 <__aeabi_dsub>
 801bcc8:	9e01      	ldr	r6, [sp, #4]
 801bcca:	9f04      	ldr	r7, [sp, #16]
 801bccc:	3630      	adds	r6, #48	; 0x30
 801bcce:	f805 6b01 	strb.w	r6, [r5], #1
 801bcd2:	9e00      	ldr	r6, [sp, #0]
 801bcd4:	1bae      	subs	r6, r5, r6
 801bcd6:	42b7      	cmp	r7, r6
 801bcd8:	4602      	mov	r2, r0
 801bcda:	460b      	mov	r3, r1
 801bcdc:	d134      	bne.n	801bd48 <_dtoa_r+0x708>
 801bcde:	f7e4 faed 	bl	80002bc <__adddf3>
 801bce2:	4642      	mov	r2, r8
 801bce4:	464b      	mov	r3, r9
 801bce6:	4606      	mov	r6, r0
 801bce8:	460f      	mov	r7, r1
 801bcea:	f7e4 ff2d 	bl	8000b48 <__aeabi_dcmpgt>
 801bcee:	b9c8      	cbnz	r0, 801bd24 <_dtoa_r+0x6e4>
 801bcf0:	4642      	mov	r2, r8
 801bcf2:	464b      	mov	r3, r9
 801bcf4:	4630      	mov	r0, r6
 801bcf6:	4639      	mov	r1, r7
 801bcf8:	f7e4 fefe 	bl	8000af8 <__aeabi_dcmpeq>
 801bcfc:	b110      	cbz	r0, 801bd04 <_dtoa_r+0x6c4>
 801bcfe:	9b01      	ldr	r3, [sp, #4]
 801bd00:	07db      	lsls	r3, r3, #31
 801bd02:	d40f      	bmi.n	801bd24 <_dtoa_r+0x6e4>
 801bd04:	4651      	mov	r1, sl
 801bd06:	4620      	mov	r0, r4
 801bd08:	f000 fb18 	bl	801c33c <_Bfree>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bd10:	702b      	strb	r3, [r5, #0]
 801bd12:	f10b 0301 	add.w	r3, fp, #1
 801bd16:	6013      	str	r3, [r2, #0]
 801bd18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	f43f ace2 	beq.w	801b6e4 <_dtoa_r+0xa4>
 801bd20:	601d      	str	r5, [r3, #0]
 801bd22:	e4df      	b.n	801b6e4 <_dtoa_r+0xa4>
 801bd24:	465f      	mov	r7, fp
 801bd26:	462b      	mov	r3, r5
 801bd28:	461d      	mov	r5, r3
 801bd2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd2e:	2a39      	cmp	r2, #57	; 0x39
 801bd30:	d106      	bne.n	801bd40 <_dtoa_r+0x700>
 801bd32:	9a00      	ldr	r2, [sp, #0]
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d1f7      	bne.n	801bd28 <_dtoa_r+0x6e8>
 801bd38:	9900      	ldr	r1, [sp, #0]
 801bd3a:	2230      	movs	r2, #48	; 0x30
 801bd3c:	3701      	adds	r7, #1
 801bd3e:	700a      	strb	r2, [r1, #0]
 801bd40:	781a      	ldrb	r2, [r3, #0]
 801bd42:	3201      	adds	r2, #1
 801bd44:	701a      	strb	r2, [r3, #0]
 801bd46:	e790      	b.n	801bc6a <_dtoa_r+0x62a>
 801bd48:	4ba3      	ldr	r3, [pc, #652]	; (801bfd8 <_dtoa_r+0x998>)
 801bd4a:	2200      	movs	r2, #0
 801bd4c:	f7e4 fc6c 	bl	8000628 <__aeabi_dmul>
 801bd50:	2200      	movs	r2, #0
 801bd52:	2300      	movs	r3, #0
 801bd54:	4606      	mov	r6, r0
 801bd56:	460f      	mov	r7, r1
 801bd58:	f7e4 fece 	bl	8000af8 <__aeabi_dcmpeq>
 801bd5c:	2800      	cmp	r0, #0
 801bd5e:	d09e      	beq.n	801bc9e <_dtoa_r+0x65e>
 801bd60:	e7d0      	b.n	801bd04 <_dtoa_r+0x6c4>
 801bd62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd64:	2a00      	cmp	r2, #0
 801bd66:	f000 80ca 	beq.w	801befe <_dtoa_r+0x8be>
 801bd6a:	9a07      	ldr	r2, [sp, #28]
 801bd6c:	2a01      	cmp	r2, #1
 801bd6e:	f300 80ad 	bgt.w	801becc <_dtoa_r+0x88c>
 801bd72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd74:	2a00      	cmp	r2, #0
 801bd76:	f000 80a5 	beq.w	801bec4 <_dtoa_r+0x884>
 801bd7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd7e:	9e08      	ldr	r6, [sp, #32]
 801bd80:	9d05      	ldr	r5, [sp, #20]
 801bd82:	9a05      	ldr	r2, [sp, #20]
 801bd84:	441a      	add	r2, r3
 801bd86:	9205      	str	r2, [sp, #20]
 801bd88:	9a06      	ldr	r2, [sp, #24]
 801bd8a:	2101      	movs	r1, #1
 801bd8c:	441a      	add	r2, r3
 801bd8e:	4620      	mov	r0, r4
 801bd90:	9206      	str	r2, [sp, #24]
 801bd92:	f000 fb89 	bl	801c4a8 <__i2b>
 801bd96:	4607      	mov	r7, r0
 801bd98:	b165      	cbz	r5, 801bdb4 <_dtoa_r+0x774>
 801bd9a:	9b06      	ldr	r3, [sp, #24]
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	dd09      	ble.n	801bdb4 <_dtoa_r+0x774>
 801bda0:	42ab      	cmp	r3, r5
 801bda2:	9a05      	ldr	r2, [sp, #20]
 801bda4:	bfa8      	it	ge
 801bda6:	462b      	movge	r3, r5
 801bda8:	1ad2      	subs	r2, r2, r3
 801bdaa:	9205      	str	r2, [sp, #20]
 801bdac:	9a06      	ldr	r2, [sp, #24]
 801bdae:	1aed      	subs	r5, r5, r3
 801bdb0:	1ad3      	subs	r3, r2, r3
 801bdb2:	9306      	str	r3, [sp, #24]
 801bdb4:	9b08      	ldr	r3, [sp, #32]
 801bdb6:	b1f3      	cbz	r3, 801bdf6 <_dtoa_r+0x7b6>
 801bdb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	f000 80a3 	beq.w	801bf06 <_dtoa_r+0x8c6>
 801bdc0:	2e00      	cmp	r6, #0
 801bdc2:	dd10      	ble.n	801bde6 <_dtoa_r+0x7a6>
 801bdc4:	4639      	mov	r1, r7
 801bdc6:	4632      	mov	r2, r6
 801bdc8:	4620      	mov	r0, r4
 801bdca:	f000 fc2d 	bl	801c628 <__pow5mult>
 801bdce:	4652      	mov	r2, sl
 801bdd0:	4601      	mov	r1, r0
 801bdd2:	4607      	mov	r7, r0
 801bdd4:	4620      	mov	r0, r4
 801bdd6:	f000 fb7d 	bl	801c4d4 <__multiply>
 801bdda:	4651      	mov	r1, sl
 801bddc:	4680      	mov	r8, r0
 801bdde:	4620      	mov	r0, r4
 801bde0:	f000 faac 	bl	801c33c <_Bfree>
 801bde4:	46c2      	mov	sl, r8
 801bde6:	9b08      	ldr	r3, [sp, #32]
 801bde8:	1b9a      	subs	r2, r3, r6
 801bdea:	d004      	beq.n	801bdf6 <_dtoa_r+0x7b6>
 801bdec:	4651      	mov	r1, sl
 801bdee:	4620      	mov	r0, r4
 801bdf0:	f000 fc1a 	bl	801c628 <__pow5mult>
 801bdf4:	4682      	mov	sl, r0
 801bdf6:	2101      	movs	r1, #1
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	f000 fb55 	bl	801c4a8 <__i2b>
 801bdfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be00:	2b00      	cmp	r3, #0
 801be02:	4606      	mov	r6, r0
 801be04:	f340 8081 	ble.w	801bf0a <_dtoa_r+0x8ca>
 801be08:	461a      	mov	r2, r3
 801be0a:	4601      	mov	r1, r0
 801be0c:	4620      	mov	r0, r4
 801be0e:	f000 fc0b 	bl	801c628 <__pow5mult>
 801be12:	9b07      	ldr	r3, [sp, #28]
 801be14:	2b01      	cmp	r3, #1
 801be16:	4606      	mov	r6, r0
 801be18:	dd7a      	ble.n	801bf10 <_dtoa_r+0x8d0>
 801be1a:	f04f 0800 	mov.w	r8, #0
 801be1e:	6933      	ldr	r3, [r6, #16]
 801be20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801be24:	6918      	ldr	r0, [r3, #16]
 801be26:	f000 faf1 	bl	801c40c <__hi0bits>
 801be2a:	f1c0 0020 	rsb	r0, r0, #32
 801be2e:	9b06      	ldr	r3, [sp, #24]
 801be30:	4418      	add	r0, r3
 801be32:	f010 001f 	ands.w	r0, r0, #31
 801be36:	f000 8094 	beq.w	801bf62 <_dtoa_r+0x922>
 801be3a:	f1c0 0320 	rsb	r3, r0, #32
 801be3e:	2b04      	cmp	r3, #4
 801be40:	f340 8085 	ble.w	801bf4e <_dtoa_r+0x90e>
 801be44:	9b05      	ldr	r3, [sp, #20]
 801be46:	f1c0 001c 	rsb	r0, r0, #28
 801be4a:	4403      	add	r3, r0
 801be4c:	9305      	str	r3, [sp, #20]
 801be4e:	9b06      	ldr	r3, [sp, #24]
 801be50:	4403      	add	r3, r0
 801be52:	4405      	add	r5, r0
 801be54:	9306      	str	r3, [sp, #24]
 801be56:	9b05      	ldr	r3, [sp, #20]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	dd05      	ble.n	801be68 <_dtoa_r+0x828>
 801be5c:	4651      	mov	r1, sl
 801be5e:	461a      	mov	r2, r3
 801be60:	4620      	mov	r0, r4
 801be62:	f000 fc3b 	bl	801c6dc <__lshift>
 801be66:	4682      	mov	sl, r0
 801be68:	9b06      	ldr	r3, [sp, #24]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	dd05      	ble.n	801be7a <_dtoa_r+0x83a>
 801be6e:	4631      	mov	r1, r6
 801be70:	461a      	mov	r2, r3
 801be72:	4620      	mov	r0, r4
 801be74:	f000 fc32 	bl	801c6dc <__lshift>
 801be78:	4606      	mov	r6, r0
 801be7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d072      	beq.n	801bf66 <_dtoa_r+0x926>
 801be80:	4631      	mov	r1, r6
 801be82:	4650      	mov	r0, sl
 801be84:	f000 fc96 	bl	801c7b4 <__mcmp>
 801be88:	2800      	cmp	r0, #0
 801be8a:	da6c      	bge.n	801bf66 <_dtoa_r+0x926>
 801be8c:	2300      	movs	r3, #0
 801be8e:	4651      	mov	r1, sl
 801be90:	220a      	movs	r2, #10
 801be92:	4620      	mov	r0, r4
 801be94:	f000 fa74 	bl	801c380 <__multadd>
 801be98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be9e:	4682      	mov	sl, r0
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	f000 81b0 	beq.w	801c206 <_dtoa_r+0xbc6>
 801bea6:	2300      	movs	r3, #0
 801bea8:	4639      	mov	r1, r7
 801beaa:	220a      	movs	r2, #10
 801beac:	4620      	mov	r0, r4
 801beae:	f000 fa67 	bl	801c380 <__multadd>
 801beb2:	9b01      	ldr	r3, [sp, #4]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	4607      	mov	r7, r0
 801beb8:	f300 8096 	bgt.w	801bfe8 <_dtoa_r+0x9a8>
 801bebc:	9b07      	ldr	r3, [sp, #28]
 801bebe:	2b02      	cmp	r3, #2
 801bec0:	dc59      	bgt.n	801bf76 <_dtoa_r+0x936>
 801bec2:	e091      	b.n	801bfe8 <_dtoa_r+0x9a8>
 801bec4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bec6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801beca:	e758      	b.n	801bd7e <_dtoa_r+0x73e>
 801becc:	9b04      	ldr	r3, [sp, #16]
 801bece:	1e5e      	subs	r6, r3, #1
 801bed0:	9b08      	ldr	r3, [sp, #32]
 801bed2:	42b3      	cmp	r3, r6
 801bed4:	bfbf      	itttt	lt
 801bed6:	9b08      	ldrlt	r3, [sp, #32]
 801bed8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801beda:	9608      	strlt	r6, [sp, #32]
 801bedc:	1af3      	sublt	r3, r6, r3
 801bede:	bfb4      	ite	lt
 801bee0:	18d2      	addlt	r2, r2, r3
 801bee2:	1b9e      	subge	r6, r3, r6
 801bee4:	9b04      	ldr	r3, [sp, #16]
 801bee6:	bfbc      	itt	lt
 801bee8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801beea:	2600      	movlt	r6, #0
 801beec:	2b00      	cmp	r3, #0
 801beee:	bfb7      	itett	lt
 801bef0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801bef4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 801bef8:	1a9d      	sublt	r5, r3, r2
 801befa:	2300      	movlt	r3, #0
 801befc:	e741      	b.n	801bd82 <_dtoa_r+0x742>
 801befe:	9e08      	ldr	r6, [sp, #32]
 801bf00:	9d05      	ldr	r5, [sp, #20]
 801bf02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bf04:	e748      	b.n	801bd98 <_dtoa_r+0x758>
 801bf06:	9a08      	ldr	r2, [sp, #32]
 801bf08:	e770      	b.n	801bdec <_dtoa_r+0x7ac>
 801bf0a:	9b07      	ldr	r3, [sp, #28]
 801bf0c:	2b01      	cmp	r3, #1
 801bf0e:	dc19      	bgt.n	801bf44 <_dtoa_r+0x904>
 801bf10:	9b02      	ldr	r3, [sp, #8]
 801bf12:	b9bb      	cbnz	r3, 801bf44 <_dtoa_r+0x904>
 801bf14:	9b03      	ldr	r3, [sp, #12]
 801bf16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bf1a:	b99b      	cbnz	r3, 801bf44 <_dtoa_r+0x904>
 801bf1c:	9b03      	ldr	r3, [sp, #12]
 801bf1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf22:	0d1b      	lsrs	r3, r3, #20
 801bf24:	051b      	lsls	r3, r3, #20
 801bf26:	b183      	cbz	r3, 801bf4a <_dtoa_r+0x90a>
 801bf28:	9b05      	ldr	r3, [sp, #20]
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	9305      	str	r3, [sp, #20]
 801bf2e:	9b06      	ldr	r3, [sp, #24]
 801bf30:	3301      	adds	r3, #1
 801bf32:	9306      	str	r3, [sp, #24]
 801bf34:	f04f 0801 	mov.w	r8, #1
 801bf38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	f47f af6f 	bne.w	801be1e <_dtoa_r+0x7de>
 801bf40:	2001      	movs	r0, #1
 801bf42:	e774      	b.n	801be2e <_dtoa_r+0x7ee>
 801bf44:	f04f 0800 	mov.w	r8, #0
 801bf48:	e7f6      	b.n	801bf38 <_dtoa_r+0x8f8>
 801bf4a:	4698      	mov	r8, r3
 801bf4c:	e7f4      	b.n	801bf38 <_dtoa_r+0x8f8>
 801bf4e:	d082      	beq.n	801be56 <_dtoa_r+0x816>
 801bf50:	9a05      	ldr	r2, [sp, #20]
 801bf52:	331c      	adds	r3, #28
 801bf54:	441a      	add	r2, r3
 801bf56:	9205      	str	r2, [sp, #20]
 801bf58:	9a06      	ldr	r2, [sp, #24]
 801bf5a:	441a      	add	r2, r3
 801bf5c:	441d      	add	r5, r3
 801bf5e:	9206      	str	r2, [sp, #24]
 801bf60:	e779      	b.n	801be56 <_dtoa_r+0x816>
 801bf62:	4603      	mov	r3, r0
 801bf64:	e7f4      	b.n	801bf50 <_dtoa_r+0x910>
 801bf66:	9b04      	ldr	r3, [sp, #16]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	dc37      	bgt.n	801bfdc <_dtoa_r+0x99c>
 801bf6c:	9b07      	ldr	r3, [sp, #28]
 801bf6e:	2b02      	cmp	r3, #2
 801bf70:	dd34      	ble.n	801bfdc <_dtoa_r+0x99c>
 801bf72:	9b04      	ldr	r3, [sp, #16]
 801bf74:	9301      	str	r3, [sp, #4]
 801bf76:	9b01      	ldr	r3, [sp, #4]
 801bf78:	b963      	cbnz	r3, 801bf94 <_dtoa_r+0x954>
 801bf7a:	4631      	mov	r1, r6
 801bf7c:	2205      	movs	r2, #5
 801bf7e:	4620      	mov	r0, r4
 801bf80:	f000 f9fe 	bl	801c380 <__multadd>
 801bf84:	4601      	mov	r1, r0
 801bf86:	4606      	mov	r6, r0
 801bf88:	4650      	mov	r0, sl
 801bf8a:	f000 fc13 	bl	801c7b4 <__mcmp>
 801bf8e:	2800      	cmp	r0, #0
 801bf90:	f73f adbb 	bgt.w	801bb0a <_dtoa_r+0x4ca>
 801bf94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf96:	9d00      	ldr	r5, [sp, #0]
 801bf98:	ea6f 0b03 	mvn.w	fp, r3
 801bf9c:	f04f 0800 	mov.w	r8, #0
 801bfa0:	4631      	mov	r1, r6
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f000 f9ca 	bl	801c33c <_Bfree>
 801bfa8:	2f00      	cmp	r7, #0
 801bfaa:	f43f aeab 	beq.w	801bd04 <_dtoa_r+0x6c4>
 801bfae:	f1b8 0f00 	cmp.w	r8, #0
 801bfb2:	d005      	beq.n	801bfc0 <_dtoa_r+0x980>
 801bfb4:	45b8      	cmp	r8, r7
 801bfb6:	d003      	beq.n	801bfc0 <_dtoa_r+0x980>
 801bfb8:	4641      	mov	r1, r8
 801bfba:	4620      	mov	r0, r4
 801bfbc:	f000 f9be 	bl	801c33c <_Bfree>
 801bfc0:	4639      	mov	r1, r7
 801bfc2:	4620      	mov	r0, r4
 801bfc4:	f000 f9ba 	bl	801c33c <_Bfree>
 801bfc8:	e69c      	b.n	801bd04 <_dtoa_r+0x6c4>
 801bfca:	2600      	movs	r6, #0
 801bfcc:	4637      	mov	r7, r6
 801bfce:	e7e1      	b.n	801bf94 <_dtoa_r+0x954>
 801bfd0:	46bb      	mov	fp, r7
 801bfd2:	4637      	mov	r7, r6
 801bfd4:	e599      	b.n	801bb0a <_dtoa_r+0x4ca>
 801bfd6:	bf00      	nop
 801bfd8:	40240000 	.word	0x40240000
 801bfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	f000 80c8 	beq.w	801c174 <_dtoa_r+0xb34>
 801bfe4:	9b04      	ldr	r3, [sp, #16]
 801bfe6:	9301      	str	r3, [sp, #4]
 801bfe8:	2d00      	cmp	r5, #0
 801bfea:	dd05      	ble.n	801bff8 <_dtoa_r+0x9b8>
 801bfec:	4639      	mov	r1, r7
 801bfee:	462a      	mov	r2, r5
 801bff0:	4620      	mov	r0, r4
 801bff2:	f000 fb73 	bl	801c6dc <__lshift>
 801bff6:	4607      	mov	r7, r0
 801bff8:	f1b8 0f00 	cmp.w	r8, #0
 801bffc:	d05b      	beq.n	801c0b6 <_dtoa_r+0xa76>
 801bffe:	6879      	ldr	r1, [r7, #4]
 801c000:	4620      	mov	r0, r4
 801c002:	f000 f95b 	bl	801c2bc <_Balloc>
 801c006:	4605      	mov	r5, r0
 801c008:	b928      	cbnz	r0, 801c016 <_dtoa_r+0x9d6>
 801c00a:	4b83      	ldr	r3, [pc, #524]	; (801c218 <_dtoa_r+0xbd8>)
 801c00c:	4602      	mov	r2, r0
 801c00e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c012:	f7ff bb2e 	b.w	801b672 <_dtoa_r+0x32>
 801c016:	693a      	ldr	r2, [r7, #16]
 801c018:	3202      	adds	r2, #2
 801c01a:	0092      	lsls	r2, r2, #2
 801c01c:	f107 010c 	add.w	r1, r7, #12
 801c020:	300c      	adds	r0, #12
 801c022:	f7ff fa56 	bl	801b4d2 <memcpy>
 801c026:	2201      	movs	r2, #1
 801c028:	4629      	mov	r1, r5
 801c02a:	4620      	mov	r0, r4
 801c02c:	f000 fb56 	bl	801c6dc <__lshift>
 801c030:	9b00      	ldr	r3, [sp, #0]
 801c032:	3301      	adds	r3, #1
 801c034:	9304      	str	r3, [sp, #16]
 801c036:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c03a:	4413      	add	r3, r2
 801c03c:	9308      	str	r3, [sp, #32]
 801c03e:	9b02      	ldr	r3, [sp, #8]
 801c040:	f003 0301 	and.w	r3, r3, #1
 801c044:	46b8      	mov	r8, r7
 801c046:	9306      	str	r3, [sp, #24]
 801c048:	4607      	mov	r7, r0
 801c04a:	9b04      	ldr	r3, [sp, #16]
 801c04c:	4631      	mov	r1, r6
 801c04e:	3b01      	subs	r3, #1
 801c050:	4650      	mov	r0, sl
 801c052:	9301      	str	r3, [sp, #4]
 801c054:	f7ff fa6a 	bl	801b52c <quorem>
 801c058:	4641      	mov	r1, r8
 801c05a:	9002      	str	r0, [sp, #8]
 801c05c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c060:	4650      	mov	r0, sl
 801c062:	f000 fba7 	bl	801c7b4 <__mcmp>
 801c066:	463a      	mov	r2, r7
 801c068:	9005      	str	r0, [sp, #20]
 801c06a:	4631      	mov	r1, r6
 801c06c:	4620      	mov	r0, r4
 801c06e:	f000 fbbd 	bl	801c7ec <__mdiff>
 801c072:	68c2      	ldr	r2, [r0, #12]
 801c074:	4605      	mov	r5, r0
 801c076:	bb02      	cbnz	r2, 801c0ba <_dtoa_r+0xa7a>
 801c078:	4601      	mov	r1, r0
 801c07a:	4650      	mov	r0, sl
 801c07c:	f000 fb9a 	bl	801c7b4 <__mcmp>
 801c080:	4602      	mov	r2, r0
 801c082:	4629      	mov	r1, r5
 801c084:	4620      	mov	r0, r4
 801c086:	9209      	str	r2, [sp, #36]	; 0x24
 801c088:	f000 f958 	bl	801c33c <_Bfree>
 801c08c:	9b07      	ldr	r3, [sp, #28]
 801c08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c090:	9d04      	ldr	r5, [sp, #16]
 801c092:	ea43 0102 	orr.w	r1, r3, r2
 801c096:	9b06      	ldr	r3, [sp, #24]
 801c098:	4319      	orrs	r1, r3
 801c09a:	d110      	bne.n	801c0be <_dtoa_r+0xa7e>
 801c09c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c0a0:	d029      	beq.n	801c0f6 <_dtoa_r+0xab6>
 801c0a2:	9b05      	ldr	r3, [sp, #20]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	dd02      	ble.n	801c0ae <_dtoa_r+0xa6e>
 801c0a8:	9b02      	ldr	r3, [sp, #8]
 801c0aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801c0ae:	9b01      	ldr	r3, [sp, #4]
 801c0b0:	f883 9000 	strb.w	r9, [r3]
 801c0b4:	e774      	b.n	801bfa0 <_dtoa_r+0x960>
 801c0b6:	4638      	mov	r0, r7
 801c0b8:	e7ba      	b.n	801c030 <_dtoa_r+0x9f0>
 801c0ba:	2201      	movs	r2, #1
 801c0bc:	e7e1      	b.n	801c082 <_dtoa_r+0xa42>
 801c0be:	9b05      	ldr	r3, [sp, #20]
 801c0c0:	2b00      	cmp	r3, #0
 801c0c2:	db04      	blt.n	801c0ce <_dtoa_r+0xa8e>
 801c0c4:	9907      	ldr	r1, [sp, #28]
 801c0c6:	430b      	orrs	r3, r1
 801c0c8:	9906      	ldr	r1, [sp, #24]
 801c0ca:	430b      	orrs	r3, r1
 801c0cc:	d120      	bne.n	801c110 <_dtoa_r+0xad0>
 801c0ce:	2a00      	cmp	r2, #0
 801c0d0:	dded      	ble.n	801c0ae <_dtoa_r+0xa6e>
 801c0d2:	4651      	mov	r1, sl
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	f000 fb00 	bl	801c6dc <__lshift>
 801c0dc:	4631      	mov	r1, r6
 801c0de:	4682      	mov	sl, r0
 801c0e0:	f000 fb68 	bl	801c7b4 <__mcmp>
 801c0e4:	2800      	cmp	r0, #0
 801c0e6:	dc03      	bgt.n	801c0f0 <_dtoa_r+0xab0>
 801c0e8:	d1e1      	bne.n	801c0ae <_dtoa_r+0xa6e>
 801c0ea:	f019 0f01 	tst.w	r9, #1
 801c0ee:	d0de      	beq.n	801c0ae <_dtoa_r+0xa6e>
 801c0f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c0f4:	d1d8      	bne.n	801c0a8 <_dtoa_r+0xa68>
 801c0f6:	9a01      	ldr	r2, [sp, #4]
 801c0f8:	2339      	movs	r3, #57	; 0x39
 801c0fa:	7013      	strb	r3, [r2, #0]
 801c0fc:	462b      	mov	r3, r5
 801c0fe:	461d      	mov	r5, r3
 801c100:	3b01      	subs	r3, #1
 801c102:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c106:	2a39      	cmp	r2, #57	; 0x39
 801c108:	d06c      	beq.n	801c1e4 <_dtoa_r+0xba4>
 801c10a:	3201      	adds	r2, #1
 801c10c:	701a      	strb	r2, [r3, #0]
 801c10e:	e747      	b.n	801bfa0 <_dtoa_r+0x960>
 801c110:	2a00      	cmp	r2, #0
 801c112:	dd07      	ble.n	801c124 <_dtoa_r+0xae4>
 801c114:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801c118:	d0ed      	beq.n	801c0f6 <_dtoa_r+0xab6>
 801c11a:	9a01      	ldr	r2, [sp, #4]
 801c11c:	f109 0301 	add.w	r3, r9, #1
 801c120:	7013      	strb	r3, [r2, #0]
 801c122:	e73d      	b.n	801bfa0 <_dtoa_r+0x960>
 801c124:	9b04      	ldr	r3, [sp, #16]
 801c126:	9a08      	ldr	r2, [sp, #32]
 801c128:	f803 9c01 	strb.w	r9, [r3, #-1]
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d043      	beq.n	801c1b8 <_dtoa_r+0xb78>
 801c130:	4651      	mov	r1, sl
 801c132:	2300      	movs	r3, #0
 801c134:	220a      	movs	r2, #10
 801c136:	4620      	mov	r0, r4
 801c138:	f000 f922 	bl	801c380 <__multadd>
 801c13c:	45b8      	cmp	r8, r7
 801c13e:	4682      	mov	sl, r0
 801c140:	f04f 0300 	mov.w	r3, #0
 801c144:	f04f 020a 	mov.w	r2, #10
 801c148:	4641      	mov	r1, r8
 801c14a:	4620      	mov	r0, r4
 801c14c:	d107      	bne.n	801c15e <_dtoa_r+0xb1e>
 801c14e:	f000 f917 	bl	801c380 <__multadd>
 801c152:	4680      	mov	r8, r0
 801c154:	4607      	mov	r7, r0
 801c156:	9b04      	ldr	r3, [sp, #16]
 801c158:	3301      	adds	r3, #1
 801c15a:	9304      	str	r3, [sp, #16]
 801c15c:	e775      	b.n	801c04a <_dtoa_r+0xa0a>
 801c15e:	f000 f90f 	bl	801c380 <__multadd>
 801c162:	4639      	mov	r1, r7
 801c164:	4680      	mov	r8, r0
 801c166:	2300      	movs	r3, #0
 801c168:	220a      	movs	r2, #10
 801c16a:	4620      	mov	r0, r4
 801c16c:	f000 f908 	bl	801c380 <__multadd>
 801c170:	4607      	mov	r7, r0
 801c172:	e7f0      	b.n	801c156 <_dtoa_r+0xb16>
 801c174:	9b04      	ldr	r3, [sp, #16]
 801c176:	9301      	str	r3, [sp, #4]
 801c178:	9d00      	ldr	r5, [sp, #0]
 801c17a:	4631      	mov	r1, r6
 801c17c:	4650      	mov	r0, sl
 801c17e:	f7ff f9d5 	bl	801b52c <quorem>
 801c182:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801c186:	9b00      	ldr	r3, [sp, #0]
 801c188:	f805 9b01 	strb.w	r9, [r5], #1
 801c18c:	1aea      	subs	r2, r5, r3
 801c18e:	9b01      	ldr	r3, [sp, #4]
 801c190:	4293      	cmp	r3, r2
 801c192:	dd07      	ble.n	801c1a4 <_dtoa_r+0xb64>
 801c194:	4651      	mov	r1, sl
 801c196:	2300      	movs	r3, #0
 801c198:	220a      	movs	r2, #10
 801c19a:	4620      	mov	r0, r4
 801c19c:	f000 f8f0 	bl	801c380 <__multadd>
 801c1a0:	4682      	mov	sl, r0
 801c1a2:	e7ea      	b.n	801c17a <_dtoa_r+0xb3a>
 801c1a4:	9b01      	ldr	r3, [sp, #4]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	bfc8      	it	gt
 801c1aa:	461d      	movgt	r5, r3
 801c1ac:	9b00      	ldr	r3, [sp, #0]
 801c1ae:	bfd8      	it	le
 801c1b0:	2501      	movle	r5, #1
 801c1b2:	441d      	add	r5, r3
 801c1b4:	f04f 0800 	mov.w	r8, #0
 801c1b8:	4651      	mov	r1, sl
 801c1ba:	2201      	movs	r2, #1
 801c1bc:	4620      	mov	r0, r4
 801c1be:	f000 fa8d 	bl	801c6dc <__lshift>
 801c1c2:	4631      	mov	r1, r6
 801c1c4:	4682      	mov	sl, r0
 801c1c6:	f000 faf5 	bl	801c7b4 <__mcmp>
 801c1ca:	2800      	cmp	r0, #0
 801c1cc:	dc96      	bgt.n	801c0fc <_dtoa_r+0xabc>
 801c1ce:	d102      	bne.n	801c1d6 <_dtoa_r+0xb96>
 801c1d0:	f019 0f01 	tst.w	r9, #1
 801c1d4:	d192      	bne.n	801c0fc <_dtoa_r+0xabc>
 801c1d6:	462b      	mov	r3, r5
 801c1d8:	461d      	mov	r5, r3
 801c1da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c1de:	2a30      	cmp	r2, #48	; 0x30
 801c1e0:	d0fa      	beq.n	801c1d8 <_dtoa_r+0xb98>
 801c1e2:	e6dd      	b.n	801bfa0 <_dtoa_r+0x960>
 801c1e4:	9a00      	ldr	r2, [sp, #0]
 801c1e6:	429a      	cmp	r2, r3
 801c1e8:	d189      	bne.n	801c0fe <_dtoa_r+0xabe>
 801c1ea:	f10b 0b01 	add.w	fp, fp, #1
 801c1ee:	2331      	movs	r3, #49	; 0x31
 801c1f0:	e796      	b.n	801c120 <_dtoa_r+0xae0>
 801c1f2:	4b0a      	ldr	r3, [pc, #40]	; (801c21c <_dtoa_r+0xbdc>)
 801c1f4:	f7ff ba99 	b.w	801b72a <_dtoa_r+0xea>
 801c1f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	f47f aa6d 	bne.w	801b6da <_dtoa_r+0x9a>
 801c200:	4b07      	ldr	r3, [pc, #28]	; (801c220 <_dtoa_r+0xbe0>)
 801c202:	f7ff ba92 	b.w	801b72a <_dtoa_r+0xea>
 801c206:	9b01      	ldr	r3, [sp, #4]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	dcb5      	bgt.n	801c178 <_dtoa_r+0xb38>
 801c20c:	9b07      	ldr	r3, [sp, #28]
 801c20e:	2b02      	cmp	r3, #2
 801c210:	f73f aeb1 	bgt.w	801bf76 <_dtoa_r+0x936>
 801c214:	e7b0      	b.n	801c178 <_dtoa_r+0xb38>
 801c216:	bf00      	nop
 801c218:	0806ca61 	.word	0x0806ca61
 801c21c:	0806c99c 	.word	0x0806c99c
 801c220:	0806c9fc 	.word	0x0806c9fc

0801c224 <_free_r>:
 801c224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c226:	2900      	cmp	r1, #0
 801c228:	d044      	beq.n	801c2b4 <_free_r+0x90>
 801c22a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c22e:	9001      	str	r0, [sp, #4]
 801c230:	2b00      	cmp	r3, #0
 801c232:	f1a1 0404 	sub.w	r4, r1, #4
 801c236:	bfb8      	it	lt
 801c238:	18e4      	addlt	r4, r4, r3
 801c23a:	f7fe f93d 	bl	801a4b8 <__malloc_lock>
 801c23e:	4a1e      	ldr	r2, [pc, #120]	; (801c2b8 <_free_r+0x94>)
 801c240:	9801      	ldr	r0, [sp, #4]
 801c242:	6813      	ldr	r3, [r2, #0]
 801c244:	b933      	cbnz	r3, 801c254 <_free_r+0x30>
 801c246:	6063      	str	r3, [r4, #4]
 801c248:	6014      	str	r4, [r2, #0]
 801c24a:	b003      	add	sp, #12
 801c24c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c250:	f7fe b938 	b.w	801a4c4 <__malloc_unlock>
 801c254:	42a3      	cmp	r3, r4
 801c256:	d908      	bls.n	801c26a <_free_r+0x46>
 801c258:	6825      	ldr	r5, [r4, #0]
 801c25a:	1961      	adds	r1, r4, r5
 801c25c:	428b      	cmp	r3, r1
 801c25e:	bf01      	itttt	eq
 801c260:	6819      	ldreq	r1, [r3, #0]
 801c262:	685b      	ldreq	r3, [r3, #4]
 801c264:	1949      	addeq	r1, r1, r5
 801c266:	6021      	streq	r1, [r4, #0]
 801c268:	e7ed      	b.n	801c246 <_free_r+0x22>
 801c26a:	461a      	mov	r2, r3
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	b10b      	cbz	r3, 801c274 <_free_r+0x50>
 801c270:	42a3      	cmp	r3, r4
 801c272:	d9fa      	bls.n	801c26a <_free_r+0x46>
 801c274:	6811      	ldr	r1, [r2, #0]
 801c276:	1855      	adds	r5, r2, r1
 801c278:	42a5      	cmp	r5, r4
 801c27a:	d10b      	bne.n	801c294 <_free_r+0x70>
 801c27c:	6824      	ldr	r4, [r4, #0]
 801c27e:	4421      	add	r1, r4
 801c280:	1854      	adds	r4, r2, r1
 801c282:	42a3      	cmp	r3, r4
 801c284:	6011      	str	r1, [r2, #0]
 801c286:	d1e0      	bne.n	801c24a <_free_r+0x26>
 801c288:	681c      	ldr	r4, [r3, #0]
 801c28a:	685b      	ldr	r3, [r3, #4]
 801c28c:	6053      	str	r3, [r2, #4]
 801c28e:	440c      	add	r4, r1
 801c290:	6014      	str	r4, [r2, #0]
 801c292:	e7da      	b.n	801c24a <_free_r+0x26>
 801c294:	d902      	bls.n	801c29c <_free_r+0x78>
 801c296:	230c      	movs	r3, #12
 801c298:	6003      	str	r3, [r0, #0]
 801c29a:	e7d6      	b.n	801c24a <_free_r+0x26>
 801c29c:	6825      	ldr	r5, [r4, #0]
 801c29e:	1961      	adds	r1, r4, r5
 801c2a0:	428b      	cmp	r3, r1
 801c2a2:	bf04      	itt	eq
 801c2a4:	6819      	ldreq	r1, [r3, #0]
 801c2a6:	685b      	ldreq	r3, [r3, #4]
 801c2a8:	6063      	str	r3, [r4, #4]
 801c2aa:	bf04      	itt	eq
 801c2ac:	1949      	addeq	r1, r1, r5
 801c2ae:	6021      	streq	r1, [r4, #0]
 801c2b0:	6054      	str	r4, [r2, #4]
 801c2b2:	e7ca      	b.n	801c24a <_free_r+0x26>
 801c2b4:	b003      	add	sp, #12
 801c2b6:	bd30      	pop	{r4, r5, pc}
 801c2b8:	20013f08 	.word	0x20013f08

0801c2bc <_Balloc>:
 801c2bc:	b570      	push	{r4, r5, r6, lr}
 801c2be:	69c6      	ldr	r6, [r0, #28]
 801c2c0:	4604      	mov	r4, r0
 801c2c2:	460d      	mov	r5, r1
 801c2c4:	b976      	cbnz	r6, 801c2e4 <_Balloc+0x28>
 801c2c6:	2010      	movs	r0, #16
 801c2c8:	f7fe f84e 	bl	801a368 <malloc>
 801c2cc:	4602      	mov	r2, r0
 801c2ce:	61e0      	str	r0, [r4, #28]
 801c2d0:	b920      	cbnz	r0, 801c2dc <_Balloc+0x20>
 801c2d2:	4b18      	ldr	r3, [pc, #96]	; (801c334 <_Balloc+0x78>)
 801c2d4:	4818      	ldr	r0, [pc, #96]	; (801c338 <_Balloc+0x7c>)
 801c2d6:	216b      	movs	r1, #107	; 0x6b
 801c2d8:	f7ff f90a 	bl	801b4f0 <__assert_func>
 801c2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c2e0:	6006      	str	r6, [r0, #0]
 801c2e2:	60c6      	str	r6, [r0, #12]
 801c2e4:	69e6      	ldr	r6, [r4, #28]
 801c2e6:	68f3      	ldr	r3, [r6, #12]
 801c2e8:	b183      	cbz	r3, 801c30c <_Balloc+0x50>
 801c2ea:	69e3      	ldr	r3, [r4, #28]
 801c2ec:	68db      	ldr	r3, [r3, #12]
 801c2ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c2f2:	b9b8      	cbnz	r0, 801c324 <_Balloc+0x68>
 801c2f4:	2101      	movs	r1, #1
 801c2f6:	fa01 f605 	lsl.w	r6, r1, r5
 801c2fa:	1d72      	adds	r2, r6, #5
 801c2fc:	0092      	lsls	r2, r2, #2
 801c2fe:	4620      	mov	r0, r4
 801c300:	f7fe f81c 	bl	801a33c <_calloc_r>
 801c304:	b160      	cbz	r0, 801c320 <_Balloc+0x64>
 801c306:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c30a:	e00e      	b.n	801c32a <_Balloc+0x6e>
 801c30c:	2221      	movs	r2, #33	; 0x21
 801c30e:	2104      	movs	r1, #4
 801c310:	4620      	mov	r0, r4
 801c312:	f7fe f813 	bl	801a33c <_calloc_r>
 801c316:	69e3      	ldr	r3, [r4, #28]
 801c318:	60f0      	str	r0, [r6, #12]
 801c31a:	68db      	ldr	r3, [r3, #12]
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d1e4      	bne.n	801c2ea <_Balloc+0x2e>
 801c320:	2000      	movs	r0, #0
 801c322:	bd70      	pop	{r4, r5, r6, pc}
 801c324:	6802      	ldr	r2, [r0, #0]
 801c326:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c32a:	2300      	movs	r3, #0
 801c32c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c330:	e7f7      	b.n	801c322 <_Balloc+0x66>
 801c332:	bf00      	nop
 801c334:	0806c81c 	.word	0x0806c81c
 801c338:	0806ca72 	.word	0x0806ca72

0801c33c <_Bfree>:
 801c33c:	b570      	push	{r4, r5, r6, lr}
 801c33e:	69c6      	ldr	r6, [r0, #28]
 801c340:	4605      	mov	r5, r0
 801c342:	460c      	mov	r4, r1
 801c344:	b976      	cbnz	r6, 801c364 <_Bfree+0x28>
 801c346:	2010      	movs	r0, #16
 801c348:	f7fe f80e 	bl	801a368 <malloc>
 801c34c:	4602      	mov	r2, r0
 801c34e:	61e8      	str	r0, [r5, #28]
 801c350:	b920      	cbnz	r0, 801c35c <_Bfree+0x20>
 801c352:	4b09      	ldr	r3, [pc, #36]	; (801c378 <_Bfree+0x3c>)
 801c354:	4809      	ldr	r0, [pc, #36]	; (801c37c <_Bfree+0x40>)
 801c356:	218f      	movs	r1, #143	; 0x8f
 801c358:	f7ff f8ca 	bl	801b4f0 <__assert_func>
 801c35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c360:	6006      	str	r6, [r0, #0]
 801c362:	60c6      	str	r6, [r0, #12]
 801c364:	b13c      	cbz	r4, 801c376 <_Bfree+0x3a>
 801c366:	69eb      	ldr	r3, [r5, #28]
 801c368:	6862      	ldr	r2, [r4, #4]
 801c36a:	68db      	ldr	r3, [r3, #12]
 801c36c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c370:	6021      	str	r1, [r4, #0]
 801c372:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c376:	bd70      	pop	{r4, r5, r6, pc}
 801c378:	0806c81c 	.word	0x0806c81c
 801c37c:	0806ca72 	.word	0x0806ca72

0801c380 <__multadd>:
 801c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c384:	690d      	ldr	r5, [r1, #16]
 801c386:	4607      	mov	r7, r0
 801c388:	460c      	mov	r4, r1
 801c38a:	461e      	mov	r6, r3
 801c38c:	f101 0c14 	add.w	ip, r1, #20
 801c390:	2000      	movs	r0, #0
 801c392:	f8dc 3000 	ldr.w	r3, [ip]
 801c396:	b299      	uxth	r1, r3
 801c398:	fb02 6101 	mla	r1, r2, r1, r6
 801c39c:	0c1e      	lsrs	r6, r3, #16
 801c39e:	0c0b      	lsrs	r3, r1, #16
 801c3a0:	fb02 3306 	mla	r3, r2, r6, r3
 801c3a4:	b289      	uxth	r1, r1
 801c3a6:	3001      	adds	r0, #1
 801c3a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c3ac:	4285      	cmp	r5, r0
 801c3ae:	f84c 1b04 	str.w	r1, [ip], #4
 801c3b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c3b6:	dcec      	bgt.n	801c392 <__multadd+0x12>
 801c3b8:	b30e      	cbz	r6, 801c3fe <__multadd+0x7e>
 801c3ba:	68a3      	ldr	r3, [r4, #8]
 801c3bc:	42ab      	cmp	r3, r5
 801c3be:	dc19      	bgt.n	801c3f4 <__multadd+0x74>
 801c3c0:	6861      	ldr	r1, [r4, #4]
 801c3c2:	4638      	mov	r0, r7
 801c3c4:	3101      	adds	r1, #1
 801c3c6:	f7ff ff79 	bl	801c2bc <_Balloc>
 801c3ca:	4680      	mov	r8, r0
 801c3cc:	b928      	cbnz	r0, 801c3da <__multadd+0x5a>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	4b0c      	ldr	r3, [pc, #48]	; (801c404 <__multadd+0x84>)
 801c3d2:	480d      	ldr	r0, [pc, #52]	; (801c408 <__multadd+0x88>)
 801c3d4:	21ba      	movs	r1, #186	; 0xba
 801c3d6:	f7ff f88b 	bl	801b4f0 <__assert_func>
 801c3da:	6922      	ldr	r2, [r4, #16]
 801c3dc:	3202      	adds	r2, #2
 801c3de:	f104 010c 	add.w	r1, r4, #12
 801c3e2:	0092      	lsls	r2, r2, #2
 801c3e4:	300c      	adds	r0, #12
 801c3e6:	f7ff f874 	bl	801b4d2 <memcpy>
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4638      	mov	r0, r7
 801c3ee:	f7ff ffa5 	bl	801c33c <_Bfree>
 801c3f2:	4644      	mov	r4, r8
 801c3f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c3f8:	3501      	adds	r5, #1
 801c3fa:	615e      	str	r6, [r3, #20]
 801c3fc:	6125      	str	r5, [r4, #16]
 801c3fe:	4620      	mov	r0, r4
 801c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c404:	0806ca61 	.word	0x0806ca61
 801c408:	0806ca72 	.word	0x0806ca72

0801c40c <__hi0bits>:
 801c40c:	0c03      	lsrs	r3, r0, #16
 801c40e:	041b      	lsls	r3, r3, #16
 801c410:	b9d3      	cbnz	r3, 801c448 <__hi0bits+0x3c>
 801c412:	0400      	lsls	r0, r0, #16
 801c414:	2310      	movs	r3, #16
 801c416:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c41a:	bf04      	itt	eq
 801c41c:	0200      	lsleq	r0, r0, #8
 801c41e:	3308      	addeq	r3, #8
 801c420:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c424:	bf04      	itt	eq
 801c426:	0100      	lsleq	r0, r0, #4
 801c428:	3304      	addeq	r3, #4
 801c42a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c42e:	bf04      	itt	eq
 801c430:	0080      	lsleq	r0, r0, #2
 801c432:	3302      	addeq	r3, #2
 801c434:	2800      	cmp	r0, #0
 801c436:	db05      	blt.n	801c444 <__hi0bits+0x38>
 801c438:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c43c:	f103 0301 	add.w	r3, r3, #1
 801c440:	bf08      	it	eq
 801c442:	2320      	moveq	r3, #32
 801c444:	4618      	mov	r0, r3
 801c446:	4770      	bx	lr
 801c448:	2300      	movs	r3, #0
 801c44a:	e7e4      	b.n	801c416 <__hi0bits+0xa>

0801c44c <__lo0bits>:
 801c44c:	6803      	ldr	r3, [r0, #0]
 801c44e:	f013 0207 	ands.w	r2, r3, #7
 801c452:	d00c      	beq.n	801c46e <__lo0bits+0x22>
 801c454:	07d9      	lsls	r1, r3, #31
 801c456:	d422      	bmi.n	801c49e <__lo0bits+0x52>
 801c458:	079a      	lsls	r2, r3, #30
 801c45a:	bf49      	itett	mi
 801c45c:	085b      	lsrmi	r3, r3, #1
 801c45e:	089b      	lsrpl	r3, r3, #2
 801c460:	6003      	strmi	r3, [r0, #0]
 801c462:	2201      	movmi	r2, #1
 801c464:	bf5c      	itt	pl
 801c466:	6003      	strpl	r3, [r0, #0]
 801c468:	2202      	movpl	r2, #2
 801c46a:	4610      	mov	r0, r2
 801c46c:	4770      	bx	lr
 801c46e:	b299      	uxth	r1, r3
 801c470:	b909      	cbnz	r1, 801c476 <__lo0bits+0x2a>
 801c472:	0c1b      	lsrs	r3, r3, #16
 801c474:	2210      	movs	r2, #16
 801c476:	b2d9      	uxtb	r1, r3
 801c478:	b909      	cbnz	r1, 801c47e <__lo0bits+0x32>
 801c47a:	3208      	adds	r2, #8
 801c47c:	0a1b      	lsrs	r3, r3, #8
 801c47e:	0719      	lsls	r1, r3, #28
 801c480:	bf04      	itt	eq
 801c482:	091b      	lsreq	r3, r3, #4
 801c484:	3204      	addeq	r2, #4
 801c486:	0799      	lsls	r1, r3, #30
 801c488:	bf04      	itt	eq
 801c48a:	089b      	lsreq	r3, r3, #2
 801c48c:	3202      	addeq	r2, #2
 801c48e:	07d9      	lsls	r1, r3, #31
 801c490:	d403      	bmi.n	801c49a <__lo0bits+0x4e>
 801c492:	085b      	lsrs	r3, r3, #1
 801c494:	f102 0201 	add.w	r2, r2, #1
 801c498:	d003      	beq.n	801c4a2 <__lo0bits+0x56>
 801c49a:	6003      	str	r3, [r0, #0]
 801c49c:	e7e5      	b.n	801c46a <__lo0bits+0x1e>
 801c49e:	2200      	movs	r2, #0
 801c4a0:	e7e3      	b.n	801c46a <__lo0bits+0x1e>
 801c4a2:	2220      	movs	r2, #32
 801c4a4:	e7e1      	b.n	801c46a <__lo0bits+0x1e>
	...

0801c4a8 <__i2b>:
 801c4a8:	b510      	push	{r4, lr}
 801c4aa:	460c      	mov	r4, r1
 801c4ac:	2101      	movs	r1, #1
 801c4ae:	f7ff ff05 	bl	801c2bc <_Balloc>
 801c4b2:	4602      	mov	r2, r0
 801c4b4:	b928      	cbnz	r0, 801c4c2 <__i2b+0x1a>
 801c4b6:	4b05      	ldr	r3, [pc, #20]	; (801c4cc <__i2b+0x24>)
 801c4b8:	4805      	ldr	r0, [pc, #20]	; (801c4d0 <__i2b+0x28>)
 801c4ba:	f240 1145 	movw	r1, #325	; 0x145
 801c4be:	f7ff f817 	bl	801b4f0 <__assert_func>
 801c4c2:	2301      	movs	r3, #1
 801c4c4:	6144      	str	r4, [r0, #20]
 801c4c6:	6103      	str	r3, [r0, #16]
 801c4c8:	bd10      	pop	{r4, pc}
 801c4ca:	bf00      	nop
 801c4cc:	0806ca61 	.word	0x0806ca61
 801c4d0:	0806ca72 	.word	0x0806ca72

0801c4d4 <__multiply>:
 801c4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d8:	4691      	mov	r9, r2
 801c4da:	690a      	ldr	r2, [r1, #16]
 801c4dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c4e0:	429a      	cmp	r2, r3
 801c4e2:	bfb8      	it	lt
 801c4e4:	460b      	movlt	r3, r1
 801c4e6:	460c      	mov	r4, r1
 801c4e8:	bfbc      	itt	lt
 801c4ea:	464c      	movlt	r4, r9
 801c4ec:	4699      	movlt	r9, r3
 801c4ee:	6927      	ldr	r7, [r4, #16]
 801c4f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c4f4:	68a3      	ldr	r3, [r4, #8]
 801c4f6:	6861      	ldr	r1, [r4, #4]
 801c4f8:	eb07 060a 	add.w	r6, r7, sl
 801c4fc:	42b3      	cmp	r3, r6
 801c4fe:	b085      	sub	sp, #20
 801c500:	bfb8      	it	lt
 801c502:	3101      	addlt	r1, #1
 801c504:	f7ff feda 	bl	801c2bc <_Balloc>
 801c508:	b930      	cbnz	r0, 801c518 <__multiply+0x44>
 801c50a:	4602      	mov	r2, r0
 801c50c:	4b44      	ldr	r3, [pc, #272]	; (801c620 <__multiply+0x14c>)
 801c50e:	4845      	ldr	r0, [pc, #276]	; (801c624 <__multiply+0x150>)
 801c510:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c514:	f7fe ffec 	bl	801b4f0 <__assert_func>
 801c518:	f100 0514 	add.w	r5, r0, #20
 801c51c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c520:	462b      	mov	r3, r5
 801c522:	2200      	movs	r2, #0
 801c524:	4543      	cmp	r3, r8
 801c526:	d321      	bcc.n	801c56c <__multiply+0x98>
 801c528:	f104 0314 	add.w	r3, r4, #20
 801c52c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c530:	f109 0314 	add.w	r3, r9, #20
 801c534:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c538:	9202      	str	r2, [sp, #8]
 801c53a:	1b3a      	subs	r2, r7, r4
 801c53c:	3a15      	subs	r2, #21
 801c53e:	f022 0203 	bic.w	r2, r2, #3
 801c542:	3204      	adds	r2, #4
 801c544:	f104 0115 	add.w	r1, r4, #21
 801c548:	428f      	cmp	r7, r1
 801c54a:	bf38      	it	cc
 801c54c:	2204      	movcc	r2, #4
 801c54e:	9201      	str	r2, [sp, #4]
 801c550:	9a02      	ldr	r2, [sp, #8]
 801c552:	9303      	str	r3, [sp, #12]
 801c554:	429a      	cmp	r2, r3
 801c556:	d80c      	bhi.n	801c572 <__multiply+0x9e>
 801c558:	2e00      	cmp	r6, #0
 801c55a:	dd03      	ble.n	801c564 <__multiply+0x90>
 801c55c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c560:	2b00      	cmp	r3, #0
 801c562:	d05b      	beq.n	801c61c <__multiply+0x148>
 801c564:	6106      	str	r6, [r0, #16]
 801c566:	b005      	add	sp, #20
 801c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c56c:	f843 2b04 	str.w	r2, [r3], #4
 801c570:	e7d8      	b.n	801c524 <__multiply+0x50>
 801c572:	f8b3 a000 	ldrh.w	sl, [r3]
 801c576:	f1ba 0f00 	cmp.w	sl, #0
 801c57a:	d024      	beq.n	801c5c6 <__multiply+0xf2>
 801c57c:	f104 0e14 	add.w	lr, r4, #20
 801c580:	46a9      	mov	r9, r5
 801c582:	f04f 0c00 	mov.w	ip, #0
 801c586:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c58a:	f8d9 1000 	ldr.w	r1, [r9]
 801c58e:	fa1f fb82 	uxth.w	fp, r2
 801c592:	b289      	uxth	r1, r1
 801c594:	fb0a 110b 	mla	r1, sl, fp, r1
 801c598:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c59c:	f8d9 2000 	ldr.w	r2, [r9]
 801c5a0:	4461      	add	r1, ip
 801c5a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c5a6:	fb0a c20b 	mla	r2, sl, fp, ip
 801c5aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c5ae:	b289      	uxth	r1, r1
 801c5b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c5b4:	4577      	cmp	r7, lr
 801c5b6:	f849 1b04 	str.w	r1, [r9], #4
 801c5ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c5be:	d8e2      	bhi.n	801c586 <__multiply+0xb2>
 801c5c0:	9a01      	ldr	r2, [sp, #4]
 801c5c2:	f845 c002 	str.w	ip, [r5, r2]
 801c5c6:	9a03      	ldr	r2, [sp, #12]
 801c5c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c5cc:	3304      	adds	r3, #4
 801c5ce:	f1b9 0f00 	cmp.w	r9, #0
 801c5d2:	d021      	beq.n	801c618 <__multiply+0x144>
 801c5d4:	6829      	ldr	r1, [r5, #0]
 801c5d6:	f104 0c14 	add.w	ip, r4, #20
 801c5da:	46ae      	mov	lr, r5
 801c5dc:	f04f 0a00 	mov.w	sl, #0
 801c5e0:	f8bc b000 	ldrh.w	fp, [ip]
 801c5e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c5e8:	fb09 220b 	mla	r2, r9, fp, r2
 801c5ec:	4452      	add	r2, sl
 801c5ee:	b289      	uxth	r1, r1
 801c5f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c5f4:	f84e 1b04 	str.w	r1, [lr], #4
 801c5f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c5fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c600:	f8be 1000 	ldrh.w	r1, [lr]
 801c604:	fb09 110a 	mla	r1, r9, sl, r1
 801c608:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c60c:	4567      	cmp	r7, ip
 801c60e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c612:	d8e5      	bhi.n	801c5e0 <__multiply+0x10c>
 801c614:	9a01      	ldr	r2, [sp, #4]
 801c616:	50a9      	str	r1, [r5, r2]
 801c618:	3504      	adds	r5, #4
 801c61a:	e799      	b.n	801c550 <__multiply+0x7c>
 801c61c:	3e01      	subs	r6, #1
 801c61e:	e79b      	b.n	801c558 <__multiply+0x84>
 801c620:	0806ca61 	.word	0x0806ca61
 801c624:	0806ca72 	.word	0x0806ca72

0801c628 <__pow5mult>:
 801c628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c62c:	4615      	mov	r5, r2
 801c62e:	f012 0203 	ands.w	r2, r2, #3
 801c632:	4606      	mov	r6, r0
 801c634:	460f      	mov	r7, r1
 801c636:	d007      	beq.n	801c648 <__pow5mult+0x20>
 801c638:	4c25      	ldr	r4, [pc, #148]	; (801c6d0 <__pow5mult+0xa8>)
 801c63a:	3a01      	subs	r2, #1
 801c63c:	2300      	movs	r3, #0
 801c63e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c642:	f7ff fe9d 	bl	801c380 <__multadd>
 801c646:	4607      	mov	r7, r0
 801c648:	10ad      	asrs	r5, r5, #2
 801c64a:	d03d      	beq.n	801c6c8 <__pow5mult+0xa0>
 801c64c:	69f4      	ldr	r4, [r6, #28]
 801c64e:	b97c      	cbnz	r4, 801c670 <__pow5mult+0x48>
 801c650:	2010      	movs	r0, #16
 801c652:	f7fd fe89 	bl	801a368 <malloc>
 801c656:	4602      	mov	r2, r0
 801c658:	61f0      	str	r0, [r6, #28]
 801c65a:	b928      	cbnz	r0, 801c668 <__pow5mult+0x40>
 801c65c:	4b1d      	ldr	r3, [pc, #116]	; (801c6d4 <__pow5mult+0xac>)
 801c65e:	481e      	ldr	r0, [pc, #120]	; (801c6d8 <__pow5mult+0xb0>)
 801c660:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c664:	f7fe ff44 	bl	801b4f0 <__assert_func>
 801c668:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c66c:	6004      	str	r4, [r0, #0]
 801c66e:	60c4      	str	r4, [r0, #12]
 801c670:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c674:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c678:	b94c      	cbnz	r4, 801c68e <__pow5mult+0x66>
 801c67a:	f240 2171 	movw	r1, #625	; 0x271
 801c67e:	4630      	mov	r0, r6
 801c680:	f7ff ff12 	bl	801c4a8 <__i2b>
 801c684:	2300      	movs	r3, #0
 801c686:	f8c8 0008 	str.w	r0, [r8, #8]
 801c68a:	4604      	mov	r4, r0
 801c68c:	6003      	str	r3, [r0, #0]
 801c68e:	f04f 0900 	mov.w	r9, #0
 801c692:	07eb      	lsls	r3, r5, #31
 801c694:	d50a      	bpl.n	801c6ac <__pow5mult+0x84>
 801c696:	4639      	mov	r1, r7
 801c698:	4622      	mov	r2, r4
 801c69a:	4630      	mov	r0, r6
 801c69c:	f7ff ff1a 	bl	801c4d4 <__multiply>
 801c6a0:	4639      	mov	r1, r7
 801c6a2:	4680      	mov	r8, r0
 801c6a4:	4630      	mov	r0, r6
 801c6a6:	f7ff fe49 	bl	801c33c <_Bfree>
 801c6aa:	4647      	mov	r7, r8
 801c6ac:	106d      	asrs	r5, r5, #1
 801c6ae:	d00b      	beq.n	801c6c8 <__pow5mult+0xa0>
 801c6b0:	6820      	ldr	r0, [r4, #0]
 801c6b2:	b938      	cbnz	r0, 801c6c4 <__pow5mult+0x9c>
 801c6b4:	4622      	mov	r2, r4
 801c6b6:	4621      	mov	r1, r4
 801c6b8:	4630      	mov	r0, r6
 801c6ba:	f7ff ff0b 	bl	801c4d4 <__multiply>
 801c6be:	6020      	str	r0, [r4, #0]
 801c6c0:	f8c0 9000 	str.w	r9, [r0]
 801c6c4:	4604      	mov	r4, r0
 801c6c6:	e7e4      	b.n	801c692 <__pow5mult+0x6a>
 801c6c8:	4638      	mov	r0, r7
 801c6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c6ce:	bf00      	nop
 801c6d0:	0806cbc0 	.word	0x0806cbc0
 801c6d4:	0806c81c 	.word	0x0806c81c
 801c6d8:	0806ca72 	.word	0x0806ca72

0801c6dc <__lshift>:
 801c6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e0:	460c      	mov	r4, r1
 801c6e2:	6849      	ldr	r1, [r1, #4]
 801c6e4:	6923      	ldr	r3, [r4, #16]
 801c6e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c6ea:	68a3      	ldr	r3, [r4, #8]
 801c6ec:	4607      	mov	r7, r0
 801c6ee:	4691      	mov	r9, r2
 801c6f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c6f4:	f108 0601 	add.w	r6, r8, #1
 801c6f8:	42b3      	cmp	r3, r6
 801c6fa:	db0b      	blt.n	801c714 <__lshift+0x38>
 801c6fc:	4638      	mov	r0, r7
 801c6fe:	f7ff fddd 	bl	801c2bc <_Balloc>
 801c702:	4605      	mov	r5, r0
 801c704:	b948      	cbnz	r0, 801c71a <__lshift+0x3e>
 801c706:	4602      	mov	r2, r0
 801c708:	4b28      	ldr	r3, [pc, #160]	; (801c7ac <__lshift+0xd0>)
 801c70a:	4829      	ldr	r0, [pc, #164]	; (801c7b0 <__lshift+0xd4>)
 801c70c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c710:	f7fe feee 	bl	801b4f0 <__assert_func>
 801c714:	3101      	adds	r1, #1
 801c716:	005b      	lsls	r3, r3, #1
 801c718:	e7ee      	b.n	801c6f8 <__lshift+0x1c>
 801c71a:	2300      	movs	r3, #0
 801c71c:	f100 0114 	add.w	r1, r0, #20
 801c720:	f100 0210 	add.w	r2, r0, #16
 801c724:	4618      	mov	r0, r3
 801c726:	4553      	cmp	r3, sl
 801c728:	db33      	blt.n	801c792 <__lshift+0xb6>
 801c72a:	6920      	ldr	r0, [r4, #16]
 801c72c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c730:	f104 0314 	add.w	r3, r4, #20
 801c734:	f019 091f 	ands.w	r9, r9, #31
 801c738:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c73c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c740:	d02b      	beq.n	801c79a <__lshift+0xbe>
 801c742:	f1c9 0e20 	rsb	lr, r9, #32
 801c746:	468a      	mov	sl, r1
 801c748:	2200      	movs	r2, #0
 801c74a:	6818      	ldr	r0, [r3, #0]
 801c74c:	fa00 f009 	lsl.w	r0, r0, r9
 801c750:	4310      	orrs	r0, r2
 801c752:	f84a 0b04 	str.w	r0, [sl], #4
 801c756:	f853 2b04 	ldr.w	r2, [r3], #4
 801c75a:	459c      	cmp	ip, r3
 801c75c:	fa22 f20e 	lsr.w	r2, r2, lr
 801c760:	d8f3      	bhi.n	801c74a <__lshift+0x6e>
 801c762:	ebac 0304 	sub.w	r3, ip, r4
 801c766:	3b15      	subs	r3, #21
 801c768:	f023 0303 	bic.w	r3, r3, #3
 801c76c:	3304      	adds	r3, #4
 801c76e:	f104 0015 	add.w	r0, r4, #21
 801c772:	4584      	cmp	ip, r0
 801c774:	bf38      	it	cc
 801c776:	2304      	movcc	r3, #4
 801c778:	50ca      	str	r2, [r1, r3]
 801c77a:	b10a      	cbz	r2, 801c780 <__lshift+0xa4>
 801c77c:	f108 0602 	add.w	r6, r8, #2
 801c780:	3e01      	subs	r6, #1
 801c782:	4638      	mov	r0, r7
 801c784:	612e      	str	r6, [r5, #16]
 801c786:	4621      	mov	r1, r4
 801c788:	f7ff fdd8 	bl	801c33c <_Bfree>
 801c78c:	4628      	mov	r0, r5
 801c78e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c792:	f842 0f04 	str.w	r0, [r2, #4]!
 801c796:	3301      	adds	r3, #1
 801c798:	e7c5      	b.n	801c726 <__lshift+0x4a>
 801c79a:	3904      	subs	r1, #4
 801c79c:	f853 2b04 	ldr.w	r2, [r3], #4
 801c7a0:	f841 2f04 	str.w	r2, [r1, #4]!
 801c7a4:	459c      	cmp	ip, r3
 801c7a6:	d8f9      	bhi.n	801c79c <__lshift+0xc0>
 801c7a8:	e7ea      	b.n	801c780 <__lshift+0xa4>
 801c7aa:	bf00      	nop
 801c7ac:	0806ca61 	.word	0x0806ca61
 801c7b0:	0806ca72 	.word	0x0806ca72

0801c7b4 <__mcmp>:
 801c7b4:	b530      	push	{r4, r5, lr}
 801c7b6:	6902      	ldr	r2, [r0, #16]
 801c7b8:	690c      	ldr	r4, [r1, #16]
 801c7ba:	1b12      	subs	r2, r2, r4
 801c7bc:	d10e      	bne.n	801c7dc <__mcmp+0x28>
 801c7be:	f100 0314 	add.w	r3, r0, #20
 801c7c2:	3114      	adds	r1, #20
 801c7c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c7c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c7cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c7d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c7d4:	42a5      	cmp	r5, r4
 801c7d6:	d003      	beq.n	801c7e0 <__mcmp+0x2c>
 801c7d8:	d305      	bcc.n	801c7e6 <__mcmp+0x32>
 801c7da:	2201      	movs	r2, #1
 801c7dc:	4610      	mov	r0, r2
 801c7de:	bd30      	pop	{r4, r5, pc}
 801c7e0:	4283      	cmp	r3, r0
 801c7e2:	d3f3      	bcc.n	801c7cc <__mcmp+0x18>
 801c7e4:	e7fa      	b.n	801c7dc <__mcmp+0x28>
 801c7e6:	f04f 32ff 	mov.w	r2, #4294967295
 801c7ea:	e7f7      	b.n	801c7dc <__mcmp+0x28>

0801c7ec <__mdiff>:
 801c7ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f0:	460c      	mov	r4, r1
 801c7f2:	4606      	mov	r6, r0
 801c7f4:	4611      	mov	r1, r2
 801c7f6:	4620      	mov	r0, r4
 801c7f8:	4690      	mov	r8, r2
 801c7fa:	f7ff ffdb 	bl	801c7b4 <__mcmp>
 801c7fe:	1e05      	subs	r5, r0, #0
 801c800:	d110      	bne.n	801c824 <__mdiff+0x38>
 801c802:	4629      	mov	r1, r5
 801c804:	4630      	mov	r0, r6
 801c806:	f7ff fd59 	bl	801c2bc <_Balloc>
 801c80a:	b930      	cbnz	r0, 801c81a <__mdiff+0x2e>
 801c80c:	4b3a      	ldr	r3, [pc, #232]	; (801c8f8 <__mdiff+0x10c>)
 801c80e:	4602      	mov	r2, r0
 801c810:	f240 2137 	movw	r1, #567	; 0x237
 801c814:	4839      	ldr	r0, [pc, #228]	; (801c8fc <__mdiff+0x110>)
 801c816:	f7fe fe6b 	bl	801b4f0 <__assert_func>
 801c81a:	2301      	movs	r3, #1
 801c81c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c820:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c824:	bfa4      	itt	ge
 801c826:	4643      	movge	r3, r8
 801c828:	46a0      	movge	r8, r4
 801c82a:	4630      	mov	r0, r6
 801c82c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c830:	bfa6      	itte	ge
 801c832:	461c      	movge	r4, r3
 801c834:	2500      	movge	r5, #0
 801c836:	2501      	movlt	r5, #1
 801c838:	f7ff fd40 	bl	801c2bc <_Balloc>
 801c83c:	b920      	cbnz	r0, 801c848 <__mdiff+0x5c>
 801c83e:	4b2e      	ldr	r3, [pc, #184]	; (801c8f8 <__mdiff+0x10c>)
 801c840:	4602      	mov	r2, r0
 801c842:	f240 2145 	movw	r1, #581	; 0x245
 801c846:	e7e5      	b.n	801c814 <__mdiff+0x28>
 801c848:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c84c:	6926      	ldr	r6, [r4, #16]
 801c84e:	60c5      	str	r5, [r0, #12]
 801c850:	f104 0914 	add.w	r9, r4, #20
 801c854:	f108 0514 	add.w	r5, r8, #20
 801c858:	f100 0e14 	add.w	lr, r0, #20
 801c85c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c860:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c864:	f108 0210 	add.w	r2, r8, #16
 801c868:	46f2      	mov	sl, lr
 801c86a:	2100      	movs	r1, #0
 801c86c:	f859 3b04 	ldr.w	r3, [r9], #4
 801c870:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c874:	fa11 f88b 	uxtah	r8, r1, fp
 801c878:	b299      	uxth	r1, r3
 801c87a:	0c1b      	lsrs	r3, r3, #16
 801c87c:	eba8 0801 	sub.w	r8, r8, r1
 801c880:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c884:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c888:	fa1f f888 	uxth.w	r8, r8
 801c88c:	1419      	asrs	r1, r3, #16
 801c88e:	454e      	cmp	r6, r9
 801c890:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c894:	f84a 3b04 	str.w	r3, [sl], #4
 801c898:	d8e8      	bhi.n	801c86c <__mdiff+0x80>
 801c89a:	1b33      	subs	r3, r6, r4
 801c89c:	3b15      	subs	r3, #21
 801c89e:	f023 0303 	bic.w	r3, r3, #3
 801c8a2:	3304      	adds	r3, #4
 801c8a4:	3415      	adds	r4, #21
 801c8a6:	42a6      	cmp	r6, r4
 801c8a8:	bf38      	it	cc
 801c8aa:	2304      	movcc	r3, #4
 801c8ac:	441d      	add	r5, r3
 801c8ae:	4473      	add	r3, lr
 801c8b0:	469e      	mov	lr, r3
 801c8b2:	462e      	mov	r6, r5
 801c8b4:	4566      	cmp	r6, ip
 801c8b6:	d30e      	bcc.n	801c8d6 <__mdiff+0xea>
 801c8b8:	f10c 0203 	add.w	r2, ip, #3
 801c8bc:	1b52      	subs	r2, r2, r5
 801c8be:	f022 0203 	bic.w	r2, r2, #3
 801c8c2:	3d03      	subs	r5, #3
 801c8c4:	45ac      	cmp	ip, r5
 801c8c6:	bf38      	it	cc
 801c8c8:	2200      	movcc	r2, #0
 801c8ca:	4413      	add	r3, r2
 801c8cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801c8d0:	b17a      	cbz	r2, 801c8f2 <__mdiff+0x106>
 801c8d2:	6107      	str	r7, [r0, #16]
 801c8d4:	e7a4      	b.n	801c820 <__mdiff+0x34>
 801c8d6:	f856 8b04 	ldr.w	r8, [r6], #4
 801c8da:	fa11 f288 	uxtah	r2, r1, r8
 801c8de:	1414      	asrs	r4, r2, #16
 801c8e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c8e4:	b292      	uxth	r2, r2
 801c8e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c8ea:	f84e 2b04 	str.w	r2, [lr], #4
 801c8ee:	1421      	asrs	r1, r4, #16
 801c8f0:	e7e0      	b.n	801c8b4 <__mdiff+0xc8>
 801c8f2:	3f01      	subs	r7, #1
 801c8f4:	e7ea      	b.n	801c8cc <__mdiff+0xe0>
 801c8f6:	bf00      	nop
 801c8f8:	0806ca61 	.word	0x0806ca61
 801c8fc:	0806ca72 	.word	0x0806ca72

0801c900 <__d2b>:
 801c900:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c904:	460f      	mov	r7, r1
 801c906:	2101      	movs	r1, #1
 801c908:	ec59 8b10 	vmov	r8, r9, d0
 801c90c:	4616      	mov	r6, r2
 801c90e:	f7ff fcd5 	bl	801c2bc <_Balloc>
 801c912:	4604      	mov	r4, r0
 801c914:	b930      	cbnz	r0, 801c924 <__d2b+0x24>
 801c916:	4602      	mov	r2, r0
 801c918:	4b24      	ldr	r3, [pc, #144]	; (801c9ac <__d2b+0xac>)
 801c91a:	4825      	ldr	r0, [pc, #148]	; (801c9b0 <__d2b+0xb0>)
 801c91c:	f240 310f 	movw	r1, #783	; 0x30f
 801c920:	f7fe fde6 	bl	801b4f0 <__assert_func>
 801c924:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c928:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c92c:	bb2d      	cbnz	r5, 801c97a <__d2b+0x7a>
 801c92e:	9301      	str	r3, [sp, #4]
 801c930:	f1b8 0300 	subs.w	r3, r8, #0
 801c934:	d026      	beq.n	801c984 <__d2b+0x84>
 801c936:	4668      	mov	r0, sp
 801c938:	9300      	str	r3, [sp, #0]
 801c93a:	f7ff fd87 	bl	801c44c <__lo0bits>
 801c93e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c942:	b1e8      	cbz	r0, 801c980 <__d2b+0x80>
 801c944:	f1c0 0320 	rsb	r3, r0, #32
 801c948:	fa02 f303 	lsl.w	r3, r2, r3
 801c94c:	430b      	orrs	r3, r1
 801c94e:	40c2      	lsrs	r2, r0
 801c950:	6163      	str	r3, [r4, #20]
 801c952:	9201      	str	r2, [sp, #4]
 801c954:	9b01      	ldr	r3, [sp, #4]
 801c956:	61a3      	str	r3, [r4, #24]
 801c958:	2b00      	cmp	r3, #0
 801c95a:	bf14      	ite	ne
 801c95c:	2202      	movne	r2, #2
 801c95e:	2201      	moveq	r2, #1
 801c960:	6122      	str	r2, [r4, #16]
 801c962:	b1bd      	cbz	r5, 801c994 <__d2b+0x94>
 801c964:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c968:	4405      	add	r5, r0
 801c96a:	603d      	str	r5, [r7, #0]
 801c96c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c970:	6030      	str	r0, [r6, #0]
 801c972:	4620      	mov	r0, r4
 801c974:	b003      	add	sp, #12
 801c976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c97a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c97e:	e7d6      	b.n	801c92e <__d2b+0x2e>
 801c980:	6161      	str	r1, [r4, #20]
 801c982:	e7e7      	b.n	801c954 <__d2b+0x54>
 801c984:	a801      	add	r0, sp, #4
 801c986:	f7ff fd61 	bl	801c44c <__lo0bits>
 801c98a:	9b01      	ldr	r3, [sp, #4]
 801c98c:	6163      	str	r3, [r4, #20]
 801c98e:	3020      	adds	r0, #32
 801c990:	2201      	movs	r2, #1
 801c992:	e7e5      	b.n	801c960 <__d2b+0x60>
 801c994:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c998:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c99c:	6038      	str	r0, [r7, #0]
 801c99e:	6918      	ldr	r0, [r3, #16]
 801c9a0:	f7ff fd34 	bl	801c40c <__hi0bits>
 801c9a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c9a8:	e7e2      	b.n	801c970 <__d2b+0x70>
 801c9aa:	bf00      	nop
 801c9ac:	0806ca61 	.word	0x0806ca61
 801c9b0:	0806ca72 	.word	0x0806ca72

0801c9b4 <__sfputc_r>:
 801c9b4:	6893      	ldr	r3, [r2, #8]
 801c9b6:	3b01      	subs	r3, #1
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	b410      	push	{r4}
 801c9bc:	6093      	str	r3, [r2, #8]
 801c9be:	da08      	bge.n	801c9d2 <__sfputc_r+0x1e>
 801c9c0:	6994      	ldr	r4, [r2, #24]
 801c9c2:	42a3      	cmp	r3, r4
 801c9c4:	db01      	blt.n	801c9ca <__sfputc_r+0x16>
 801c9c6:	290a      	cmp	r1, #10
 801c9c8:	d103      	bne.n	801c9d2 <__sfputc_r+0x1e>
 801c9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9ce:	f7fe bc1d 	b.w	801b20c <__swbuf_r>
 801c9d2:	6813      	ldr	r3, [r2, #0]
 801c9d4:	1c58      	adds	r0, r3, #1
 801c9d6:	6010      	str	r0, [r2, #0]
 801c9d8:	7019      	strb	r1, [r3, #0]
 801c9da:	4608      	mov	r0, r1
 801c9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9e0:	4770      	bx	lr

0801c9e2 <__sfputs_r>:
 801c9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9e4:	4606      	mov	r6, r0
 801c9e6:	460f      	mov	r7, r1
 801c9e8:	4614      	mov	r4, r2
 801c9ea:	18d5      	adds	r5, r2, r3
 801c9ec:	42ac      	cmp	r4, r5
 801c9ee:	d101      	bne.n	801c9f4 <__sfputs_r+0x12>
 801c9f0:	2000      	movs	r0, #0
 801c9f2:	e007      	b.n	801ca04 <__sfputs_r+0x22>
 801c9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9f8:	463a      	mov	r2, r7
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	f7ff ffda 	bl	801c9b4 <__sfputc_r>
 801ca00:	1c43      	adds	r3, r0, #1
 801ca02:	d1f3      	bne.n	801c9ec <__sfputs_r+0xa>
 801ca04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ca08 <_vfiprintf_r>:
 801ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca0c:	460d      	mov	r5, r1
 801ca0e:	b09d      	sub	sp, #116	; 0x74
 801ca10:	4614      	mov	r4, r2
 801ca12:	4698      	mov	r8, r3
 801ca14:	4606      	mov	r6, r0
 801ca16:	b118      	cbz	r0, 801ca20 <_vfiprintf_r+0x18>
 801ca18:	6a03      	ldr	r3, [r0, #32]
 801ca1a:	b90b      	cbnz	r3, 801ca20 <_vfiprintf_r+0x18>
 801ca1c:	f7fe fb04 	bl	801b028 <__sinit>
 801ca20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca22:	07d9      	lsls	r1, r3, #31
 801ca24:	d405      	bmi.n	801ca32 <_vfiprintf_r+0x2a>
 801ca26:	89ab      	ldrh	r3, [r5, #12]
 801ca28:	059a      	lsls	r2, r3, #22
 801ca2a:	d402      	bmi.n	801ca32 <_vfiprintf_r+0x2a>
 801ca2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca2e:	f7fe fd46 	bl	801b4be <__retarget_lock_acquire_recursive>
 801ca32:	89ab      	ldrh	r3, [r5, #12]
 801ca34:	071b      	lsls	r3, r3, #28
 801ca36:	d501      	bpl.n	801ca3c <_vfiprintf_r+0x34>
 801ca38:	692b      	ldr	r3, [r5, #16]
 801ca3a:	b99b      	cbnz	r3, 801ca64 <_vfiprintf_r+0x5c>
 801ca3c:	4629      	mov	r1, r5
 801ca3e:	4630      	mov	r0, r6
 801ca40:	f7fe fc22 	bl	801b288 <__swsetup_r>
 801ca44:	b170      	cbz	r0, 801ca64 <_vfiprintf_r+0x5c>
 801ca46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca48:	07dc      	lsls	r4, r3, #31
 801ca4a:	d504      	bpl.n	801ca56 <_vfiprintf_r+0x4e>
 801ca4c:	f04f 30ff 	mov.w	r0, #4294967295
 801ca50:	b01d      	add	sp, #116	; 0x74
 801ca52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca56:	89ab      	ldrh	r3, [r5, #12]
 801ca58:	0598      	lsls	r0, r3, #22
 801ca5a:	d4f7      	bmi.n	801ca4c <_vfiprintf_r+0x44>
 801ca5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca5e:	f7fe fd2f 	bl	801b4c0 <__retarget_lock_release_recursive>
 801ca62:	e7f3      	b.n	801ca4c <_vfiprintf_r+0x44>
 801ca64:	2300      	movs	r3, #0
 801ca66:	9309      	str	r3, [sp, #36]	; 0x24
 801ca68:	2320      	movs	r3, #32
 801ca6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ca6e:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca72:	2330      	movs	r3, #48	; 0x30
 801ca74:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cc28 <_vfiprintf_r+0x220>
 801ca78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ca7c:	f04f 0901 	mov.w	r9, #1
 801ca80:	4623      	mov	r3, r4
 801ca82:	469a      	mov	sl, r3
 801ca84:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca88:	b10a      	cbz	r2, 801ca8e <_vfiprintf_r+0x86>
 801ca8a:	2a25      	cmp	r2, #37	; 0x25
 801ca8c:	d1f9      	bne.n	801ca82 <_vfiprintf_r+0x7a>
 801ca8e:	ebba 0b04 	subs.w	fp, sl, r4
 801ca92:	d00b      	beq.n	801caac <_vfiprintf_r+0xa4>
 801ca94:	465b      	mov	r3, fp
 801ca96:	4622      	mov	r2, r4
 801ca98:	4629      	mov	r1, r5
 801ca9a:	4630      	mov	r0, r6
 801ca9c:	f7ff ffa1 	bl	801c9e2 <__sfputs_r>
 801caa0:	3001      	adds	r0, #1
 801caa2:	f000 80a9 	beq.w	801cbf8 <_vfiprintf_r+0x1f0>
 801caa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801caa8:	445a      	add	r2, fp
 801caaa:	9209      	str	r2, [sp, #36]	; 0x24
 801caac:	f89a 3000 	ldrb.w	r3, [sl]
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	f000 80a1 	beq.w	801cbf8 <_vfiprintf_r+0x1f0>
 801cab6:	2300      	movs	r3, #0
 801cab8:	f04f 32ff 	mov.w	r2, #4294967295
 801cabc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cac0:	f10a 0a01 	add.w	sl, sl, #1
 801cac4:	9304      	str	r3, [sp, #16]
 801cac6:	9307      	str	r3, [sp, #28]
 801cac8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cacc:	931a      	str	r3, [sp, #104]	; 0x68
 801cace:	4654      	mov	r4, sl
 801cad0:	2205      	movs	r2, #5
 801cad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cad6:	4854      	ldr	r0, [pc, #336]	; (801cc28 <_vfiprintf_r+0x220>)
 801cad8:	f7e3 fb92 	bl	8000200 <memchr>
 801cadc:	9a04      	ldr	r2, [sp, #16]
 801cade:	b9d8      	cbnz	r0, 801cb18 <_vfiprintf_r+0x110>
 801cae0:	06d1      	lsls	r1, r2, #27
 801cae2:	bf44      	itt	mi
 801cae4:	2320      	movmi	r3, #32
 801cae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caea:	0713      	lsls	r3, r2, #28
 801caec:	bf44      	itt	mi
 801caee:	232b      	movmi	r3, #43	; 0x2b
 801caf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caf4:	f89a 3000 	ldrb.w	r3, [sl]
 801caf8:	2b2a      	cmp	r3, #42	; 0x2a
 801cafa:	d015      	beq.n	801cb28 <_vfiprintf_r+0x120>
 801cafc:	9a07      	ldr	r2, [sp, #28]
 801cafe:	4654      	mov	r4, sl
 801cb00:	2000      	movs	r0, #0
 801cb02:	f04f 0c0a 	mov.w	ip, #10
 801cb06:	4621      	mov	r1, r4
 801cb08:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cb0c:	3b30      	subs	r3, #48	; 0x30
 801cb0e:	2b09      	cmp	r3, #9
 801cb10:	d94d      	bls.n	801cbae <_vfiprintf_r+0x1a6>
 801cb12:	b1b0      	cbz	r0, 801cb42 <_vfiprintf_r+0x13a>
 801cb14:	9207      	str	r2, [sp, #28]
 801cb16:	e014      	b.n	801cb42 <_vfiprintf_r+0x13a>
 801cb18:	eba0 0308 	sub.w	r3, r0, r8
 801cb1c:	fa09 f303 	lsl.w	r3, r9, r3
 801cb20:	4313      	orrs	r3, r2
 801cb22:	9304      	str	r3, [sp, #16]
 801cb24:	46a2      	mov	sl, r4
 801cb26:	e7d2      	b.n	801cace <_vfiprintf_r+0xc6>
 801cb28:	9b03      	ldr	r3, [sp, #12]
 801cb2a:	1d19      	adds	r1, r3, #4
 801cb2c:	681b      	ldr	r3, [r3, #0]
 801cb2e:	9103      	str	r1, [sp, #12]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	bfbb      	ittet	lt
 801cb34:	425b      	neglt	r3, r3
 801cb36:	f042 0202 	orrlt.w	r2, r2, #2
 801cb3a:	9307      	strge	r3, [sp, #28]
 801cb3c:	9307      	strlt	r3, [sp, #28]
 801cb3e:	bfb8      	it	lt
 801cb40:	9204      	strlt	r2, [sp, #16]
 801cb42:	7823      	ldrb	r3, [r4, #0]
 801cb44:	2b2e      	cmp	r3, #46	; 0x2e
 801cb46:	d10c      	bne.n	801cb62 <_vfiprintf_r+0x15a>
 801cb48:	7863      	ldrb	r3, [r4, #1]
 801cb4a:	2b2a      	cmp	r3, #42	; 0x2a
 801cb4c:	d134      	bne.n	801cbb8 <_vfiprintf_r+0x1b0>
 801cb4e:	9b03      	ldr	r3, [sp, #12]
 801cb50:	1d1a      	adds	r2, r3, #4
 801cb52:	681b      	ldr	r3, [r3, #0]
 801cb54:	9203      	str	r2, [sp, #12]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	bfb8      	it	lt
 801cb5a:	f04f 33ff 	movlt.w	r3, #4294967295
 801cb5e:	3402      	adds	r4, #2
 801cb60:	9305      	str	r3, [sp, #20]
 801cb62:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801cc38 <_vfiprintf_r+0x230>
 801cb66:	7821      	ldrb	r1, [r4, #0]
 801cb68:	2203      	movs	r2, #3
 801cb6a:	4650      	mov	r0, sl
 801cb6c:	f7e3 fb48 	bl	8000200 <memchr>
 801cb70:	b138      	cbz	r0, 801cb82 <_vfiprintf_r+0x17a>
 801cb72:	9b04      	ldr	r3, [sp, #16]
 801cb74:	eba0 000a 	sub.w	r0, r0, sl
 801cb78:	2240      	movs	r2, #64	; 0x40
 801cb7a:	4082      	lsls	r2, r0
 801cb7c:	4313      	orrs	r3, r2
 801cb7e:	3401      	adds	r4, #1
 801cb80:	9304      	str	r3, [sp, #16]
 801cb82:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb86:	4829      	ldr	r0, [pc, #164]	; (801cc2c <_vfiprintf_r+0x224>)
 801cb88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb8c:	2206      	movs	r2, #6
 801cb8e:	f7e3 fb37 	bl	8000200 <memchr>
 801cb92:	2800      	cmp	r0, #0
 801cb94:	d03f      	beq.n	801cc16 <_vfiprintf_r+0x20e>
 801cb96:	4b26      	ldr	r3, [pc, #152]	; (801cc30 <_vfiprintf_r+0x228>)
 801cb98:	bb1b      	cbnz	r3, 801cbe2 <_vfiprintf_r+0x1da>
 801cb9a:	9b03      	ldr	r3, [sp, #12]
 801cb9c:	3307      	adds	r3, #7
 801cb9e:	f023 0307 	bic.w	r3, r3, #7
 801cba2:	3308      	adds	r3, #8
 801cba4:	9303      	str	r3, [sp, #12]
 801cba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cba8:	443b      	add	r3, r7
 801cbaa:	9309      	str	r3, [sp, #36]	; 0x24
 801cbac:	e768      	b.n	801ca80 <_vfiprintf_r+0x78>
 801cbae:	fb0c 3202 	mla	r2, ip, r2, r3
 801cbb2:	460c      	mov	r4, r1
 801cbb4:	2001      	movs	r0, #1
 801cbb6:	e7a6      	b.n	801cb06 <_vfiprintf_r+0xfe>
 801cbb8:	2300      	movs	r3, #0
 801cbba:	3401      	adds	r4, #1
 801cbbc:	9305      	str	r3, [sp, #20]
 801cbbe:	4619      	mov	r1, r3
 801cbc0:	f04f 0c0a 	mov.w	ip, #10
 801cbc4:	4620      	mov	r0, r4
 801cbc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cbca:	3a30      	subs	r2, #48	; 0x30
 801cbcc:	2a09      	cmp	r2, #9
 801cbce:	d903      	bls.n	801cbd8 <_vfiprintf_r+0x1d0>
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d0c6      	beq.n	801cb62 <_vfiprintf_r+0x15a>
 801cbd4:	9105      	str	r1, [sp, #20]
 801cbd6:	e7c4      	b.n	801cb62 <_vfiprintf_r+0x15a>
 801cbd8:	fb0c 2101 	mla	r1, ip, r1, r2
 801cbdc:	4604      	mov	r4, r0
 801cbde:	2301      	movs	r3, #1
 801cbe0:	e7f0      	b.n	801cbc4 <_vfiprintf_r+0x1bc>
 801cbe2:	ab03      	add	r3, sp, #12
 801cbe4:	9300      	str	r3, [sp, #0]
 801cbe6:	462a      	mov	r2, r5
 801cbe8:	4b12      	ldr	r3, [pc, #72]	; (801cc34 <_vfiprintf_r+0x22c>)
 801cbea:	a904      	add	r1, sp, #16
 801cbec:	4630      	mov	r0, r6
 801cbee:	f7fd fdc9 	bl	801a784 <_printf_float>
 801cbf2:	4607      	mov	r7, r0
 801cbf4:	1c78      	adds	r0, r7, #1
 801cbf6:	d1d6      	bne.n	801cba6 <_vfiprintf_r+0x19e>
 801cbf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cbfa:	07d9      	lsls	r1, r3, #31
 801cbfc:	d405      	bmi.n	801cc0a <_vfiprintf_r+0x202>
 801cbfe:	89ab      	ldrh	r3, [r5, #12]
 801cc00:	059a      	lsls	r2, r3, #22
 801cc02:	d402      	bmi.n	801cc0a <_vfiprintf_r+0x202>
 801cc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cc06:	f7fe fc5b 	bl	801b4c0 <__retarget_lock_release_recursive>
 801cc0a:	89ab      	ldrh	r3, [r5, #12]
 801cc0c:	065b      	lsls	r3, r3, #25
 801cc0e:	f53f af1d 	bmi.w	801ca4c <_vfiprintf_r+0x44>
 801cc12:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cc14:	e71c      	b.n	801ca50 <_vfiprintf_r+0x48>
 801cc16:	ab03      	add	r3, sp, #12
 801cc18:	9300      	str	r3, [sp, #0]
 801cc1a:	462a      	mov	r2, r5
 801cc1c:	4b05      	ldr	r3, [pc, #20]	; (801cc34 <_vfiprintf_r+0x22c>)
 801cc1e:	a904      	add	r1, sp, #16
 801cc20:	4630      	mov	r0, r6
 801cc22:	f7fe f853 	bl	801accc <_printf_i>
 801cc26:	e7e4      	b.n	801cbf2 <_vfiprintf_r+0x1ea>
 801cc28:	0806cbcc 	.word	0x0806cbcc
 801cc2c:	0806cbd6 	.word	0x0806cbd6
 801cc30:	0801a785 	.word	0x0801a785
 801cc34:	0801c9e3 	.word	0x0801c9e3
 801cc38:	0806cbd2 	.word	0x0806cbd2

0801cc3c <__sflush_r>:
 801cc3c:	898a      	ldrh	r2, [r1, #12]
 801cc3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc42:	4605      	mov	r5, r0
 801cc44:	0710      	lsls	r0, r2, #28
 801cc46:	460c      	mov	r4, r1
 801cc48:	d458      	bmi.n	801ccfc <__sflush_r+0xc0>
 801cc4a:	684b      	ldr	r3, [r1, #4]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	dc05      	bgt.n	801cc5c <__sflush_r+0x20>
 801cc50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	dc02      	bgt.n	801cc5c <__sflush_r+0x20>
 801cc56:	2000      	movs	r0, #0
 801cc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc5e:	2e00      	cmp	r6, #0
 801cc60:	d0f9      	beq.n	801cc56 <__sflush_r+0x1a>
 801cc62:	2300      	movs	r3, #0
 801cc64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cc68:	682f      	ldr	r7, [r5, #0]
 801cc6a:	6a21      	ldr	r1, [r4, #32]
 801cc6c:	602b      	str	r3, [r5, #0]
 801cc6e:	d032      	beq.n	801ccd6 <__sflush_r+0x9a>
 801cc70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cc72:	89a3      	ldrh	r3, [r4, #12]
 801cc74:	075a      	lsls	r2, r3, #29
 801cc76:	d505      	bpl.n	801cc84 <__sflush_r+0x48>
 801cc78:	6863      	ldr	r3, [r4, #4]
 801cc7a:	1ac0      	subs	r0, r0, r3
 801cc7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cc7e:	b10b      	cbz	r3, 801cc84 <__sflush_r+0x48>
 801cc80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cc82:	1ac0      	subs	r0, r0, r3
 801cc84:	2300      	movs	r3, #0
 801cc86:	4602      	mov	r2, r0
 801cc88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cc8a:	6a21      	ldr	r1, [r4, #32]
 801cc8c:	4628      	mov	r0, r5
 801cc8e:	47b0      	blx	r6
 801cc90:	1c43      	adds	r3, r0, #1
 801cc92:	89a3      	ldrh	r3, [r4, #12]
 801cc94:	d106      	bne.n	801cca4 <__sflush_r+0x68>
 801cc96:	6829      	ldr	r1, [r5, #0]
 801cc98:	291d      	cmp	r1, #29
 801cc9a:	d82b      	bhi.n	801ccf4 <__sflush_r+0xb8>
 801cc9c:	4a29      	ldr	r2, [pc, #164]	; (801cd44 <__sflush_r+0x108>)
 801cc9e:	410a      	asrs	r2, r1
 801cca0:	07d6      	lsls	r6, r2, #31
 801cca2:	d427      	bmi.n	801ccf4 <__sflush_r+0xb8>
 801cca4:	2200      	movs	r2, #0
 801cca6:	6062      	str	r2, [r4, #4]
 801cca8:	04d9      	lsls	r1, r3, #19
 801ccaa:	6922      	ldr	r2, [r4, #16]
 801ccac:	6022      	str	r2, [r4, #0]
 801ccae:	d504      	bpl.n	801ccba <__sflush_r+0x7e>
 801ccb0:	1c42      	adds	r2, r0, #1
 801ccb2:	d101      	bne.n	801ccb8 <__sflush_r+0x7c>
 801ccb4:	682b      	ldr	r3, [r5, #0]
 801ccb6:	b903      	cbnz	r3, 801ccba <__sflush_r+0x7e>
 801ccb8:	6560      	str	r0, [r4, #84]	; 0x54
 801ccba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ccbc:	602f      	str	r7, [r5, #0]
 801ccbe:	2900      	cmp	r1, #0
 801ccc0:	d0c9      	beq.n	801cc56 <__sflush_r+0x1a>
 801ccc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ccc6:	4299      	cmp	r1, r3
 801ccc8:	d002      	beq.n	801ccd0 <__sflush_r+0x94>
 801ccca:	4628      	mov	r0, r5
 801cccc:	f7ff faaa 	bl	801c224 <_free_r>
 801ccd0:	2000      	movs	r0, #0
 801ccd2:	6360      	str	r0, [r4, #52]	; 0x34
 801ccd4:	e7c0      	b.n	801cc58 <__sflush_r+0x1c>
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	4628      	mov	r0, r5
 801ccda:	47b0      	blx	r6
 801ccdc:	1c41      	adds	r1, r0, #1
 801ccde:	d1c8      	bne.n	801cc72 <__sflush_r+0x36>
 801cce0:	682b      	ldr	r3, [r5, #0]
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d0c5      	beq.n	801cc72 <__sflush_r+0x36>
 801cce6:	2b1d      	cmp	r3, #29
 801cce8:	d001      	beq.n	801ccee <__sflush_r+0xb2>
 801ccea:	2b16      	cmp	r3, #22
 801ccec:	d101      	bne.n	801ccf2 <__sflush_r+0xb6>
 801ccee:	602f      	str	r7, [r5, #0]
 801ccf0:	e7b1      	b.n	801cc56 <__sflush_r+0x1a>
 801ccf2:	89a3      	ldrh	r3, [r4, #12]
 801ccf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccf8:	81a3      	strh	r3, [r4, #12]
 801ccfa:	e7ad      	b.n	801cc58 <__sflush_r+0x1c>
 801ccfc:	690f      	ldr	r7, [r1, #16]
 801ccfe:	2f00      	cmp	r7, #0
 801cd00:	d0a9      	beq.n	801cc56 <__sflush_r+0x1a>
 801cd02:	0793      	lsls	r3, r2, #30
 801cd04:	680e      	ldr	r6, [r1, #0]
 801cd06:	bf08      	it	eq
 801cd08:	694b      	ldreq	r3, [r1, #20]
 801cd0a:	600f      	str	r7, [r1, #0]
 801cd0c:	bf18      	it	ne
 801cd0e:	2300      	movne	r3, #0
 801cd10:	eba6 0807 	sub.w	r8, r6, r7
 801cd14:	608b      	str	r3, [r1, #8]
 801cd16:	f1b8 0f00 	cmp.w	r8, #0
 801cd1a:	dd9c      	ble.n	801cc56 <__sflush_r+0x1a>
 801cd1c:	6a21      	ldr	r1, [r4, #32]
 801cd1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cd20:	4643      	mov	r3, r8
 801cd22:	463a      	mov	r2, r7
 801cd24:	4628      	mov	r0, r5
 801cd26:	47b0      	blx	r6
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	dc06      	bgt.n	801cd3a <__sflush_r+0xfe>
 801cd2c:	89a3      	ldrh	r3, [r4, #12]
 801cd2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd32:	81a3      	strh	r3, [r4, #12]
 801cd34:	f04f 30ff 	mov.w	r0, #4294967295
 801cd38:	e78e      	b.n	801cc58 <__sflush_r+0x1c>
 801cd3a:	4407      	add	r7, r0
 801cd3c:	eba8 0800 	sub.w	r8, r8, r0
 801cd40:	e7e9      	b.n	801cd16 <__sflush_r+0xda>
 801cd42:	bf00      	nop
 801cd44:	dfbffffe 	.word	0xdfbffffe

0801cd48 <_fflush_r>:
 801cd48:	b538      	push	{r3, r4, r5, lr}
 801cd4a:	690b      	ldr	r3, [r1, #16]
 801cd4c:	4605      	mov	r5, r0
 801cd4e:	460c      	mov	r4, r1
 801cd50:	b913      	cbnz	r3, 801cd58 <_fflush_r+0x10>
 801cd52:	2500      	movs	r5, #0
 801cd54:	4628      	mov	r0, r5
 801cd56:	bd38      	pop	{r3, r4, r5, pc}
 801cd58:	b118      	cbz	r0, 801cd62 <_fflush_r+0x1a>
 801cd5a:	6a03      	ldr	r3, [r0, #32]
 801cd5c:	b90b      	cbnz	r3, 801cd62 <_fflush_r+0x1a>
 801cd5e:	f7fe f963 	bl	801b028 <__sinit>
 801cd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d0f3      	beq.n	801cd52 <_fflush_r+0xa>
 801cd6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cd6c:	07d0      	lsls	r0, r2, #31
 801cd6e:	d404      	bmi.n	801cd7a <_fflush_r+0x32>
 801cd70:	0599      	lsls	r1, r3, #22
 801cd72:	d402      	bmi.n	801cd7a <_fflush_r+0x32>
 801cd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd76:	f7fe fba2 	bl	801b4be <__retarget_lock_acquire_recursive>
 801cd7a:	4628      	mov	r0, r5
 801cd7c:	4621      	mov	r1, r4
 801cd7e:	f7ff ff5d 	bl	801cc3c <__sflush_r>
 801cd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cd84:	07da      	lsls	r2, r3, #31
 801cd86:	4605      	mov	r5, r0
 801cd88:	d4e4      	bmi.n	801cd54 <_fflush_r+0xc>
 801cd8a:	89a3      	ldrh	r3, [r4, #12]
 801cd8c:	059b      	lsls	r3, r3, #22
 801cd8e:	d4e1      	bmi.n	801cd54 <_fflush_r+0xc>
 801cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cd92:	f7fe fb95 	bl	801b4c0 <__retarget_lock_release_recursive>
 801cd96:	e7dd      	b.n	801cd54 <_fflush_r+0xc>

0801cd98 <fiprintf>:
 801cd98:	b40e      	push	{r1, r2, r3}
 801cd9a:	b503      	push	{r0, r1, lr}
 801cd9c:	4601      	mov	r1, r0
 801cd9e:	ab03      	add	r3, sp, #12
 801cda0:	4805      	ldr	r0, [pc, #20]	; (801cdb8 <fiprintf+0x20>)
 801cda2:	f853 2b04 	ldr.w	r2, [r3], #4
 801cda6:	6800      	ldr	r0, [r0, #0]
 801cda8:	9301      	str	r3, [sp, #4]
 801cdaa:	f7ff fe2d 	bl	801ca08 <_vfiprintf_r>
 801cdae:	b002      	add	sp, #8
 801cdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 801cdb4:	b003      	add	sp, #12
 801cdb6:	4770      	bx	lr
 801cdb8:	20000118 	.word	0x20000118

0801cdbc <__swhatbuf_r>:
 801cdbc:	b570      	push	{r4, r5, r6, lr}
 801cdbe:	460c      	mov	r4, r1
 801cdc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cdc4:	2900      	cmp	r1, #0
 801cdc6:	b096      	sub	sp, #88	; 0x58
 801cdc8:	4615      	mov	r5, r2
 801cdca:	461e      	mov	r6, r3
 801cdcc:	da0d      	bge.n	801cdea <__swhatbuf_r+0x2e>
 801cdce:	89a3      	ldrh	r3, [r4, #12]
 801cdd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cdd4:	f04f 0100 	mov.w	r1, #0
 801cdd8:	bf0c      	ite	eq
 801cdda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cdde:	2340      	movne	r3, #64	; 0x40
 801cde0:	2000      	movs	r0, #0
 801cde2:	6031      	str	r1, [r6, #0]
 801cde4:	602b      	str	r3, [r5, #0]
 801cde6:	b016      	add	sp, #88	; 0x58
 801cde8:	bd70      	pop	{r4, r5, r6, pc}
 801cdea:	466a      	mov	r2, sp
 801cdec:	f000 f848 	bl	801ce80 <_fstat_r>
 801cdf0:	2800      	cmp	r0, #0
 801cdf2:	dbec      	blt.n	801cdce <__swhatbuf_r+0x12>
 801cdf4:	9901      	ldr	r1, [sp, #4]
 801cdf6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cdfa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cdfe:	4259      	negs	r1, r3
 801ce00:	4159      	adcs	r1, r3
 801ce02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce06:	e7eb      	b.n	801cde0 <__swhatbuf_r+0x24>

0801ce08 <__smakebuf_r>:
 801ce08:	898b      	ldrh	r3, [r1, #12]
 801ce0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce0c:	079d      	lsls	r5, r3, #30
 801ce0e:	4606      	mov	r6, r0
 801ce10:	460c      	mov	r4, r1
 801ce12:	d507      	bpl.n	801ce24 <__smakebuf_r+0x1c>
 801ce14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ce18:	6023      	str	r3, [r4, #0]
 801ce1a:	6123      	str	r3, [r4, #16]
 801ce1c:	2301      	movs	r3, #1
 801ce1e:	6163      	str	r3, [r4, #20]
 801ce20:	b002      	add	sp, #8
 801ce22:	bd70      	pop	{r4, r5, r6, pc}
 801ce24:	ab01      	add	r3, sp, #4
 801ce26:	466a      	mov	r2, sp
 801ce28:	f7ff ffc8 	bl	801cdbc <__swhatbuf_r>
 801ce2c:	9900      	ldr	r1, [sp, #0]
 801ce2e:	4605      	mov	r5, r0
 801ce30:	4630      	mov	r0, r6
 801ce32:	f7fd fac1 	bl	801a3b8 <_malloc_r>
 801ce36:	b948      	cbnz	r0, 801ce4c <__smakebuf_r+0x44>
 801ce38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce3c:	059a      	lsls	r2, r3, #22
 801ce3e:	d4ef      	bmi.n	801ce20 <__smakebuf_r+0x18>
 801ce40:	f023 0303 	bic.w	r3, r3, #3
 801ce44:	f043 0302 	orr.w	r3, r3, #2
 801ce48:	81a3      	strh	r3, [r4, #12]
 801ce4a:	e7e3      	b.n	801ce14 <__smakebuf_r+0xc>
 801ce4c:	89a3      	ldrh	r3, [r4, #12]
 801ce4e:	6020      	str	r0, [r4, #0]
 801ce50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce54:	81a3      	strh	r3, [r4, #12]
 801ce56:	9b00      	ldr	r3, [sp, #0]
 801ce58:	6163      	str	r3, [r4, #20]
 801ce5a:	9b01      	ldr	r3, [sp, #4]
 801ce5c:	6120      	str	r0, [r4, #16]
 801ce5e:	b15b      	cbz	r3, 801ce78 <__smakebuf_r+0x70>
 801ce60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce64:	4630      	mov	r0, r6
 801ce66:	f000 f81d 	bl	801cea4 <_isatty_r>
 801ce6a:	b128      	cbz	r0, 801ce78 <__smakebuf_r+0x70>
 801ce6c:	89a3      	ldrh	r3, [r4, #12]
 801ce6e:	f023 0303 	bic.w	r3, r3, #3
 801ce72:	f043 0301 	orr.w	r3, r3, #1
 801ce76:	81a3      	strh	r3, [r4, #12]
 801ce78:	89a3      	ldrh	r3, [r4, #12]
 801ce7a:	431d      	orrs	r5, r3
 801ce7c:	81a5      	strh	r5, [r4, #12]
 801ce7e:	e7cf      	b.n	801ce20 <__smakebuf_r+0x18>

0801ce80 <_fstat_r>:
 801ce80:	b538      	push	{r3, r4, r5, lr}
 801ce82:	4d07      	ldr	r5, [pc, #28]	; (801cea0 <_fstat_r+0x20>)
 801ce84:	2300      	movs	r3, #0
 801ce86:	4604      	mov	r4, r0
 801ce88:	4608      	mov	r0, r1
 801ce8a:	4611      	mov	r1, r2
 801ce8c:	602b      	str	r3, [r5, #0]
 801ce8e:	f7e7 fa42 	bl	8004316 <_fstat>
 801ce92:	1c43      	adds	r3, r0, #1
 801ce94:	d102      	bne.n	801ce9c <_fstat_r+0x1c>
 801ce96:	682b      	ldr	r3, [r5, #0]
 801ce98:	b103      	cbz	r3, 801ce9c <_fstat_r+0x1c>
 801ce9a:	6023      	str	r3, [r4, #0]
 801ce9c:	bd38      	pop	{r3, r4, r5, pc}
 801ce9e:	bf00      	nop
 801cea0:	2001404c 	.word	0x2001404c

0801cea4 <_isatty_r>:
 801cea4:	b538      	push	{r3, r4, r5, lr}
 801cea6:	4d06      	ldr	r5, [pc, #24]	; (801cec0 <_isatty_r+0x1c>)
 801cea8:	2300      	movs	r3, #0
 801ceaa:	4604      	mov	r4, r0
 801ceac:	4608      	mov	r0, r1
 801ceae:	602b      	str	r3, [r5, #0]
 801ceb0:	f7e7 fa41 	bl	8004336 <_isatty>
 801ceb4:	1c43      	adds	r3, r0, #1
 801ceb6:	d102      	bne.n	801cebe <_isatty_r+0x1a>
 801ceb8:	682b      	ldr	r3, [r5, #0]
 801ceba:	b103      	cbz	r3, 801cebe <_isatty_r+0x1a>
 801cebc:	6023      	str	r3, [r4, #0]
 801cebe:	bd38      	pop	{r3, r4, r5, pc}
 801cec0:	2001404c 	.word	0x2001404c

0801cec4 <abort>:
 801cec4:	b508      	push	{r3, lr}
 801cec6:	2006      	movs	r0, #6
 801cec8:	f000 f84a 	bl	801cf60 <raise>
 801cecc:	2001      	movs	r0, #1
 801cece:	f7e7 f9d3 	bl	8004278 <_exit>

0801ced2 <__ascii_mbtowc>:
 801ced2:	b082      	sub	sp, #8
 801ced4:	b901      	cbnz	r1, 801ced8 <__ascii_mbtowc+0x6>
 801ced6:	a901      	add	r1, sp, #4
 801ced8:	b142      	cbz	r2, 801ceec <__ascii_mbtowc+0x1a>
 801ceda:	b14b      	cbz	r3, 801cef0 <__ascii_mbtowc+0x1e>
 801cedc:	7813      	ldrb	r3, [r2, #0]
 801cede:	600b      	str	r3, [r1, #0]
 801cee0:	7812      	ldrb	r2, [r2, #0]
 801cee2:	1e10      	subs	r0, r2, #0
 801cee4:	bf18      	it	ne
 801cee6:	2001      	movne	r0, #1
 801cee8:	b002      	add	sp, #8
 801ceea:	4770      	bx	lr
 801ceec:	4610      	mov	r0, r2
 801ceee:	e7fb      	b.n	801cee8 <__ascii_mbtowc+0x16>
 801cef0:	f06f 0001 	mvn.w	r0, #1
 801cef4:	e7f8      	b.n	801cee8 <__ascii_mbtowc+0x16>

0801cef6 <__ascii_wctomb>:
 801cef6:	b149      	cbz	r1, 801cf0c <__ascii_wctomb+0x16>
 801cef8:	2aff      	cmp	r2, #255	; 0xff
 801cefa:	bf85      	ittet	hi
 801cefc:	238a      	movhi	r3, #138	; 0x8a
 801cefe:	6003      	strhi	r3, [r0, #0]
 801cf00:	700a      	strbls	r2, [r1, #0]
 801cf02:	f04f 30ff 	movhi.w	r0, #4294967295
 801cf06:	bf98      	it	ls
 801cf08:	2001      	movls	r0, #1
 801cf0a:	4770      	bx	lr
 801cf0c:	4608      	mov	r0, r1
 801cf0e:	4770      	bx	lr

0801cf10 <_raise_r>:
 801cf10:	291f      	cmp	r1, #31
 801cf12:	b538      	push	{r3, r4, r5, lr}
 801cf14:	4604      	mov	r4, r0
 801cf16:	460d      	mov	r5, r1
 801cf18:	d904      	bls.n	801cf24 <_raise_r+0x14>
 801cf1a:	2316      	movs	r3, #22
 801cf1c:	6003      	str	r3, [r0, #0]
 801cf1e:	f04f 30ff 	mov.w	r0, #4294967295
 801cf22:	bd38      	pop	{r3, r4, r5, pc}
 801cf24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801cf26:	b112      	cbz	r2, 801cf2e <_raise_r+0x1e>
 801cf28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cf2c:	b94b      	cbnz	r3, 801cf42 <_raise_r+0x32>
 801cf2e:	4620      	mov	r0, r4
 801cf30:	f000 f830 	bl	801cf94 <_getpid_r>
 801cf34:	462a      	mov	r2, r5
 801cf36:	4601      	mov	r1, r0
 801cf38:	4620      	mov	r0, r4
 801cf3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf3e:	f000 b817 	b.w	801cf70 <_kill_r>
 801cf42:	2b01      	cmp	r3, #1
 801cf44:	d00a      	beq.n	801cf5c <_raise_r+0x4c>
 801cf46:	1c59      	adds	r1, r3, #1
 801cf48:	d103      	bne.n	801cf52 <_raise_r+0x42>
 801cf4a:	2316      	movs	r3, #22
 801cf4c:	6003      	str	r3, [r0, #0]
 801cf4e:	2001      	movs	r0, #1
 801cf50:	e7e7      	b.n	801cf22 <_raise_r+0x12>
 801cf52:	2400      	movs	r4, #0
 801cf54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cf58:	4628      	mov	r0, r5
 801cf5a:	4798      	blx	r3
 801cf5c:	2000      	movs	r0, #0
 801cf5e:	e7e0      	b.n	801cf22 <_raise_r+0x12>

0801cf60 <raise>:
 801cf60:	4b02      	ldr	r3, [pc, #8]	; (801cf6c <raise+0xc>)
 801cf62:	4601      	mov	r1, r0
 801cf64:	6818      	ldr	r0, [r3, #0]
 801cf66:	f7ff bfd3 	b.w	801cf10 <_raise_r>
 801cf6a:	bf00      	nop
 801cf6c:	20000118 	.word	0x20000118

0801cf70 <_kill_r>:
 801cf70:	b538      	push	{r3, r4, r5, lr}
 801cf72:	4d07      	ldr	r5, [pc, #28]	; (801cf90 <_kill_r+0x20>)
 801cf74:	2300      	movs	r3, #0
 801cf76:	4604      	mov	r4, r0
 801cf78:	4608      	mov	r0, r1
 801cf7a:	4611      	mov	r1, r2
 801cf7c:	602b      	str	r3, [r5, #0]
 801cf7e:	f7e7 f96b 	bl	8004258 <_kill>
 801cf82:	1c43      	adds	r3, r0, #1
 801cf84:	d102      	bne.n	801cf8c <_kill_r+0x1c>
 801cf86:	682b      	ldr	r3, [r5, #0]
 801cf88:	b103      	cbz	r3, 801cf8c <_kill_r+0x1c>
 801cf8a:	6023      	str	r3, [r4, #0]
 801cf8c:	bd38      	pop	{r3, r4, r5, pc}
 801cf8e:	bf00      	nop
 801cf90:	2001404c 	.word	0x2001404c

0801cf94 <_getpid_r>:
 801cf94:	f7e7 b958 	b.w	8004248 <_getpid>

0801cf98 <_init>:
 801cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf9a:	bf00      	nop
 801cf9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf9e:	bc08      	pop	{r3}
 801cfa0:	469e      	mov	lr, r3
 801cfa2:	4770      	bx	lr

0801cfa4 <_fini>:
 801cfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cfa6:	bf00      	nop
 801cfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cfaa:	bc08      	pop	{r3}
 801cfac:	469e      	mov	lr, r3
 801cfae:	4770      	bx	lr
